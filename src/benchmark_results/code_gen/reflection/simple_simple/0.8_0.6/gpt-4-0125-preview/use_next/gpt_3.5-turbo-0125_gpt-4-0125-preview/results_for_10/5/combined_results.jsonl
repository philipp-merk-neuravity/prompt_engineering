{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0"}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1"}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4"}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5"}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8"}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 68, "duration": 4.141433477401733, "task_id": "HumanEval/9"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11"}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13"}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19"}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21"}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27"}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28"}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31"}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35"}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36"}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37"}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43"}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44"}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53"}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54"}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56"}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32"}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n", "is_solved": true, "iteration": 1, "prompt_tokens": 972, "completion_tokens": 193, "duration": 11.584001541137695, "task_id": "HumanEval/41"}
{"generated_code": "def truncate_number(number: float) -> float:\n    if '.' in str(number):\n        return float('0.' + str(number).split('.')[1])\n    else:\n        return 0.0", "is_solved": true, "iteration": 3, "prompt_tokens": 2087, "completion_tokens": 380, "duration": 20.94173240661621, "task_id": "HumanEval/2"}
{"generated_code": "def median(l: list):\n    l_sorted = sorted(l)  # Use sorted to not modify the original list\n    n = len(l_sorted)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l_sorted[mid - 1] + l_sorted[mid]) / 2.0  # Ensure division result is float\n    else:\n        return l_sorted[mid]", "is_solved": false, "iteration": 4, "prompt_tokens": 3148, "completion_tokens": 898, "duration": 39.90951132774353, "task_id": "HumanEval/47"}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": false, "iteration": 4, "prompt_tokens": 4072, "completion_tokens": 1089, "duration": 53.8868293762207, "task_id": "HumanEval/38"}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    >>> filter_by_substring(['hello', 'world', 'python'], 'o')\n    ['hello', 'world', 'python']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 4, "prompt_tokens": 3763, "completion_tokens": 960, "duration": 45.435659408569336, "task_id": "HumanEval/7"}
{"generated_code": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if 'a' <= ch <= 'z' else ch for ch in s])", "is_solved": false, "iteration": 4, "prompt_tokens": 3744, "completion_tokens": 1081, "duration": 54.47804069519043, "task_id": "HumanEval/50"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": false, "iteration": 4, "prompt_tokens": 5380, "completion_tokens": 1217, "duration": 55.18196177482605, "task_id": "HumanEval/20"}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Replace the special note markers with unique sequences for easier parsing\n    formatted_music_string = music_string.replace('o|', 'h,').replace('.|', 'q,').replace('o', 'o,')\n    # Split the string into a list for iteration\n    notes = formatted_music_string.split(',')\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'h':  # Represents 'o|'\n            beats.append(2)\n        elif note == 'q':  # Represents '.|'\n            beats.append(1)\n    # Remove possible empty strings due to trailing commas\n    return list(filter(lambda x: x != '', beats))", "is_solved": false, "iteration": 4, "prompt_tokens": 5320, "completion_tokens": 1072, "duration": 48.707913875579834, "task_id": "HumanEval/17"}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 ** (n - 1) - 8 ** (n - 1)", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 81, "duration": 5.6620423793792725, "task_id": "HumanEval/83"}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65"}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i+1, a): # start from i+1 to avoid repeating the same factor\n                if a % (i*j) == 0 and is_prime(j):\n                    k = a // (i*j)\n                    if is_prime(k) and k != i and k != j:\n                        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 158, "duration": 9.53858232498169, "task_id": "HumanEval/75"}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76"}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87"}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88"}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99"}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100"}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106"}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107"}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110"}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112"}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113"}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num >= 0:\n            return sum(int(digit) for digit in str(num))\n        else:\n            # Correct handling of negative numbers\n            return -int(str(num)[1]) + sum(int(digit) for digit in str(num)[2:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": true, "iteration": 1, "prompt_tokens": 991, "completion_tokens": 251, "duration": 15.125659227371216, "task_id": "HumanEval/108"}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1091, "completion_tokens": 293, "duration": 15.038652658462524, "task_id": "HumanEval/91"}
{"generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 1, "prompt_tokens": 1735, "completion_tokens": 340, "duration": 15.880380630493164, "task_id": "HumanEval/94"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 2715, "completion_tokens": 468, "duration": 21.530465126037598, "task_id": "HumanEval/85"}
{"generated_code": "def encode(message):\n    def shift_vowel(v):\n        # Shift vowel 2 places ahead in the alphabet, considering wrap-around\n        vowels = 'aeiouAEIOU'\n        shift = 2\n        if v in vowels:\n            # Find the index of the vowel in the vowels string and add shift\n            index = vowels.index(v) % 10  # Use modulo to ensure we stay within bounds for uppercase\n            new_index = (index + shift) % 10  # Use modulo to wrap around\n            return vowels[new_index]\n        else:\n            return v\n\n    def encode_char(c):\n        if c.isalpha():  # Check if the character is a letter\n            if c.lower() in 'aeiou':  # Check if the character is a vowel\n                # For vowels, shift them 2 places ahead\n                return shift_vowel(c)\n            else:\n                # For consonants, swap case\n                return c.swapcase()\n        else:\n            return c  # Return the character as is if it's not a letter\n\n    return ''.join(encode_char(c) for c in message)", "is_solved": false, "iteration": 4, "prompt_tokens": 3775, "completion_tokens": 1223, "duration": 54.80125045776367, "task_id": "HumanEval/93"}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": false, "iteration": 4, "prompt_tokens": 6462, "completion_tokens": 1847, "duration": 85.21999907493591, "task_id": "HumanEval/81"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114"}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117"}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124"}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128"}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134"}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136"}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137"}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139"}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140"}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142"}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146"}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148"}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162"}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 154, "completion_tokens": 71, "duration": 8.549454927444458, "task_id": "HumanEval/163"}
{"generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "is_solved": true, "iteration": 1, "prompt_tokens": 1405, "completion_tokens": 124, "duration": 10.186097383499146, "task_id": "HumanEval/115"}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if x < 100)", "is_solved": true, "iteration": 1, "prompt_tokens": 1000, "completion_tokens": 148, "duration": 10.319974899291992, "task_id": "HumanEval/122"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1016, "completion_tokens": 245, "duration": 13.775942325592041, "task_id": "HumanEval/118"}
{"generated_code": "def find_max(words):\n    return max(sorted(words, key=lambda word: (len(set(word)), word)))", "is_solved": true, "iteration": 1, "prompt_tokens": 786, "completion_tokens": 149, "duration": 15.767595767974854, "task_id": "HumanEval/158"}
{"generated_code": "def match_parens(lst):\n    # Concatenate in both possible orders\n    concat1 = lst[0] + lst[1]\n    concat2 = lst[1] + lst[0]\n    \n    # Function to check if a string of parentheses is balanced\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    \n    # Check if either concatenation order results in a balanced string\n    return 'Yes' if is_balanced(concat1) or is_balanced(concat2) else 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 1165, "completion_tokens": 428, "duration": 21.18485689163208, "task_id": "HumanEval/119"}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start >= end:  # Adjusted to consider touching intervals as no intersection\n        return \"NO\"\n    length = end - start  # Adjusted to correctly calculate the intersection length\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1431, "completion_tokens": 415, "duration": 22.0767343044281, "task_id": "HumanEval/127"}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(sorted(arr, reverse=True)[:k])", "is_solved": true, "iteration": 2, "prompt_tokens": 2249, "completion_tokens": 321, "duration": 18.615335702896118, "task_id": "HumanEval/120"}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    # Double the string `a` to handle cyclic patterns\n    extended_a = a * 2\n    # Now, we only need to check if `b` is a substring of the extended `a`\n    return b in extended_a", "is_solved": true, "iteration": 2, "prompt_tokens": 1897, "completion_tokens": 545, "duration": 27.226980447769165, "task_id": "HumanEval/154"}
{"generated_code": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 3, "prompt_tokens": 2279, "completion_tokens": 494, "duration": 30.4599027633667, "task_id": "HumanEval/135"}
{"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    # If k is 1, we only need to find the minimum value in the grid.\n    if k == 1:\n        return [min(min(row) for row in grid)]\n    \n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    heap = [(grid[i][j], i, j, [grid[i][j]]) for i in range(N) for j in range(N)]\n    visited = set()\n\n    while heap:\n        cost, x, y, path = heappop(heap)\n        if (x, y, len(path)) in visited:\n            continue\n        visited.add((x, y, len(path)))\n        if len(path) == k:\n            return path\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                newPath = path + [grid[nx][ny]]\n                heappush(heap, (cost + grid[nx][ny], nx, ny, newPath))", "is_solved": true, "iteration": 2, "prompt_tokens": 3410, "completion_tokens": 1028, "duration": 44.8512077331543, "task_id": "HumanEval/129"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 == 1)", "is_solved": false, "iteration": 4, "prompt_tokens": 3179, "completion_tokens": 568, "duration": 32.858055114746094, "task_id": "HumanEval/121"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 4, "prompt_tokens": 3360, "completion_tokens": 567, "duration": 34.6333110332489, "task_id": "HumanEval/145"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 3433, "completion_tokens": 822, "duration": 47.686856269836426, "task_id": "HumanEval/125"}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)", "is_solved": false, "iteration": 4, "prompt_tokens": 3095, "completion_tokens": 676, "duration": 34.30518698692322, "task_id": "HumanEval/161"}
{"generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                top = stack.pop()\n                # Check if the current closing bracket directly closes a previous opening bracket (nested)\n                if top == '[' and (not stack or stack[-1] != 'N'):\n                    stack.append('N')\n            else:\n                # Unmatched closing bracket found\n                return False\n    # The presence of 'N' in the stack indicates a nested structure was found.\n    return 'N' in stack", "is_solved": false, "iteration": 4, "prompt_tokens": 4195, "completion_tokens": 1270, "duration": 69.22496485710144, "task_id": "HumanEval/132"}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers according to\n    the number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 4, "prompt_tokens": 4025, "completion_tokens": 912, "duration": 50.768967628479004, "task_id": "HumanEval/116"}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the filtered list by length, then alphabetically\n    filtered_lst.sort(key=lambda s: (len(s), s))\n    return filtered_lst", "is_solved": false, "iteration": 4, "prompt_tokens": 4000, "completion_tokens": 795, "duration": 43.34455728530884, "task_id": "HumanEval/149"}
{"generated_code": "def do_algebra(operator, operand):\n    from operator import add, sub, mul, floordiv, pow\n    import re\n\n    op_map = {'+': add, '-': sub, '*': mul, '//': floordiv, '**': pow}\n    expression = f\"{operand[0]}\"\n    for op, num in zip(operator, operand[1:]):\n        expression += f\" {op} {num}\"\n    \n    # Use regular expressions to find and evaluate expressions within parentheses first, if any.\n    while '(' in expression or ')' in expression:\n        expression = re.sub(r'\\(([^\\(\\)]+)\\)', lambda x: str(eval(x.group(1), {}, op_map)), expression)\n    \n    # Evaluate the final expression using the operators defined in op_map.\n    result = eval(expression, {}, op_map)\n    return result", "is_solved": false, "iteration": 4, "prompt_tokens": 3937, "completion_tokens": 815, "duration": 47.21053385734558, "task_id": "HumanEval/160"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Filtering words whose lengths are prime numbers\n    prime_length_words = [word for word in sentence.split() if is_prime(len(word))]\n    \n    # Joining the filtered words into a string, handling cases where no words match the criteria\n    return ' '.join(prime_length_words)", "is_solved": false, "iteration": 4, "prompt_tokens": 3532, "completion_tokens": 877, "duration": 46.06733202934265, "task_id": "HumanEval/143"}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = set()  # Use a set to avoid duplicates and for efficient look-up\n    while n != 1:\n        if n % 2 == 1:  # Check if the current number is odd\n            odd_numbers.add(n)\n        n = 3 * n + 1 if n % 2 else n // 2  # Apply Collatz operation\n    odd_numbers.add(1)  # Add 1 to the set as per the conjecture\n    return sorted(odd_numbers)  # Return a sorted list of unique odd numbers", "is_solved": false, "iteration": 4, "prompt_tokens": 4914, "completion_tokens": 1217, "duration": 54.48561334609985, "task_id": "HumanEval/123"}
{"generated_code": "def tri(n):\n    # Initialize the first three numbers of the Tribonacci sequence as per the corrected problem statement\n    trib = [3, 1, 2]\n    \n    # Adjust for cases where n is less than 3\n    if n < 3:\n        return trib[:n + 1]\n    \n    # Generate the Tribonacci sequence for n >= 3\n    for i in range(3, n + 1):\n        next_value = trib[i - 1] + trib[i - 2] + trib[i - 3]\n        trib.append(next_value)\n    \n    return trib", "is_solved": false, "iteration": 4, "prompt_tokens": 4514, "completion_tokens": 1180, "duration": 50.61365056037903, "task_id": "HumanEval/130"}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0"}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1"}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4"}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5"}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8"}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 68, "duration": 4.141433477401733, "task_id": "HumanEval/9"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11"}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13"}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19"}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21"}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27"}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28"}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31"}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35"}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36"}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37"}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43"}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44"}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53"}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54"}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56"}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32"}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n", "is_solved": true, "iteration": 1, "prompt_tokens": 960, "completion_tokens": 181, "duration": 10.834616422653198, "task_id": "HumanEval/41"}
{"generated_code": "def truncate_number(number: float) -> float:\n    from decimal import Decimal, getcontext\n    getcontext().prec = 15  # Setting precision to 15 decimal places\n    return float(Decimal(number) - int(number))", "is_solved": true, "iteration": 1, "prompt_tokens": 809, "completion_tokens": 187, "duration": 9.395334959030151, "task_id": "HumanEval/2"}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    >>> filter_by_substring(['hello', 'world', 'python'], 'o')\n    ['hello', 'world', 'python']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 4, "prompt_tokens": 3803, "completion_tokens": 972, "duration": 42.45979619026184, "task_id": "HumanEval/7"}
{"generated_code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2.0\n    else:\n        return sorted_l[n//2]", "is_solved": false, "iteration": 4, "prompt_tokens": 3070, "completion_tokens": 810, "duration": 38.321699380874634, "task_id": "HumanEval/47"}
{"generated_code": "def decode_shift(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 4, "prompt_tokens": 3590, "completion_tokens": 936, "duration": 38.660074949264526, "task_id": "HumanEval/50"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        # Since the list is sorted, the next number is always greater or equal.\n        diff = numbers[i + 1] - numbers[i]  # Removed unnecessary abs() due to sorting\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])  # Direct assignment due to sorting\n    return closest_pair", "is_solved": false, "iteration": 4, "prompt_tokens": 5062, "completion_tokens": 1056, "duration": 44.92243027687073, "task_id": "HumanEval/20"}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. For groups of 3, move the last element to the start.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": false, "iteration": 4, "prompt_tokens": 4099, "completion_tokens": 1121, "duration": 50.10820269584656, "task_id": "HumanEval/38"}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Replace 'o|' and '.|' with unique sequences to ensure correct interpretation\n    music_string = music_string.replace('o|', 'h').replace('.|', 'q')\n    # Splitting the string into individual notes without relying on spaces\n    notes = list(music_string)\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'h':  # Represents 'o|'\n            beats.append(2)\n        elif note == 'q':  # Represents '.|'\n            beats.append(1)\n    return beats", "is_solved": false, "iteration": 4, "prompt_tokens": 5531, "completion_tokens": 1172, "duration": 49.04305338859558, "task_id": "HumanEval/17"}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 ** (n - 1) - 8 ** (n - 1)", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 81, "duration": 5.6620423793792725, "task_id": "HumanEval/83"}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65"}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i+1, a): # start from i+1 to avoid repeating the same factor\n                if a % (i*j) == 0 and is_prime(j):\n                    k = a // (i*j)\n                    if is_prime(k) and k != i and k != j:\n                        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 158, "duration": 9.53858232498169, "task_id": "HumanEval/75"}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76"}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87"}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88"}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99"}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100"}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106"}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107"}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110"}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112"}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113"}
{"generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 1, "prompt_tokens": 1706, "completion_tokens": 311, "duration": 13.191598176956177, "task_id": "HumanEval/94"}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1100, "completion_tokens": 302, "duration": 14.590113639831543, "task_id": "HumanEval/91"}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num < 0:\n            return sum(int(digit) for digit in str(num)[1:]) - 2*int(str(num)[1])\n        else:\n            return sum(int(digit) for digit in str(num))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": true, "iteration": 2, "prompt_tokens": 1746, "completion_tokens": 394, "duration": 22.93813395500183, "task_id": "HumanEval/108"}
{"generated_code": "def encode(message):\n    def swap_case_and_shift_vowel(c):\n        # Swap case\n        swapped_c = c.lower() if c.isupper() else c.upper()\n        \n        # Shift vowel by 2 places ahead in the alphabet\n        vowels = 'aeiouAEIOU'\n        shift_map = {'a': 'c', 'A': 'C', 'e': 'g', 'E': 'G', 'i': 'k', 'I': 'K', 'o': 'q', 'O': 'Q', 'u': 's', 'U': 'S'}\n        \n        return shift_map.get(swapped_c, swapped_c)  # Return shifted vowel or original character if not a vowel\n\n    encoded_message = ''.join([swap_case_and_shift_vowel(c) for c in message])\n    return encoded_message", "is_solved": true, "iteration": 3, "prompt_tokens": 2781, "completion_tokens": 889, "duration": 38.591362714767456, "task_id": "HumanEval/93"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 2686, "completion_tokens": 439, "duration": 22.667757272720337, "task_id": "HumanEval/85"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114"}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117"}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124"}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128"}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134"}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136"}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137"}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139"}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140"}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142"}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146"}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148"}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162"}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 154, "completion_tokens": 71, "duration": 8.549454927444458, "task_id": "HumanEval/163"}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers in ascending order based on their decimal values.\n    \"\"\"\n    return sorted(arr)", "is_solved": true, "iteration": 1, "prompt_tokens": 1058, "completion_tokens": 170, "duration": 11.787341594696045, "task_id": "HumanEval/116"}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(sorted(arr, reverse=True)[:k])", "is_solved": true, "iteration": 1, "prompt_tokens": 1228, "completion_tokens": 160, "duration": 11.848648071289062, "task_id": "HumanEval/120"}
{"generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "is_solved": true, "iteration": 1, "prompt_tokens": 1416, "completion_tokens": 135, "duration": 11.36709475517273, "task_id": "HumanEval/115"}
{"generated_code": "def find_max(words):\n    return max(sorted(words, key=lambda word: (len(set(word)), word)))", "is_solved": true, "iteration": 1, "prompt_tokens": 767, "completion_tokens": 130, "duration": 12.43235969543457, "task_id": "HumanEval/158"}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)", "is_solved": true, "iteration": 1, "prompt_tokens": 991, "completion_tokens": 143, "duration": 10.642897367477417, "task_id": "HumanEval/122"}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    elif all(c.isupper() for c in s):\n        return s[::-1].lower()\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 1, "prompt_tokens": 893, "completion_tokens": 240, "duration": 15.394926071166992, "task_id": "HumanEval/161"}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    # Double the string a to simulate a cyclic pattern\n    a_doubled = a * 2\n    # Check if b is a substring of the doubled a\n    return b in a_doubled", "is_solved": true, "iteration": 1, "prompt_tokens": 986, "completion_tokens": 280, "duration": 16.06872296333313, "task_id": "HumanEval/154"}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # First, check if concatenating str1 to str2 in this order makes a good string\n    combined = str1 + str2\n    stack = []\n    for char in combined:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n        else:\n            # If we encounter a ')' and there's nothing to pop, it's bad\n            break\n    else:\n        if not stack:\n            return 'Yes'\n    \n    # Then, check if concatenating str2 to str1 in this order makes a good string\n    combined = str2 + str1\n    stack = []\n    for char in combined:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n        else:\n            # If we encounter a ')' and there's nothing to pop, it's bad\n            break\n    else:\n        if not stack:\n            return 'Yes'\n    \n    # If neither order works, return 'No'\n    return 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 1149, "completion_tokens": 495, "duration": 22.09647536277771, "task_id": "HumanEval/119"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    # Start from the second last character to avoid IndexError when checking i+1\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1136, "completion_tokens": 382, "duration": 19.109261989593506, "task_id": "HumanEval/118"}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        \"\"\"Check if a number is a prime number.\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    # Find the intersection range\n    start = max(start1, start2)\n    end = min(end1, end2)\n    # Check if there is no intersection\n    if start > end:\n        return \"NO\"\n    # Calculate the length of the intersection\n    length = end - start\n    # Check if the length of the intersection is a prime number\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 3, "prompt_tokens": 3890, "completion_tokens": 1099, "duration": 48.58767747879028, "task_id": "HumanEval/127"}
{"generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    if k == 1:\n        return [min(min(row) for row in grid)]\n    \n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    heap = []\n    for i in range(N):\n        for j in range(N):\n            heappush(heap, (grid[i][j], i, j, [grid[i][j]]))\n\n    visited = set()\n\n    while heap:\n        val, x, y, path = heappop(heap)\n        if (x, y, len(path)) in visited:\n            continue\n        visited.add((x, y, len(path)))\n        if len(path) == k:\n            return path\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                newPath = path + [grid[nx][ny]]\n                heappush(heap, (newPath[-1], nx, ny, newPath))", "is_solved": true, "iteration": 2, "prompt_tokens": 3451, "completion_tokens": 1055, "duration": 56.415632486343384, "task_id": "HumanEval/129"}
{"generated_code": "def split_words(txt):\n    # Check for whitespace\n    if ' ' in txt:\n        return txt.split()\n    # Check for commas\n    elif ',' in txt:\n        return txt.split(',')\n    # If the string does not contain spaces or commas, handle single word or count odd order letters\n    else:\n        # If the string is a single word without spaces or commas, return it in a list\n        if txt.isalpha():\n            # Return the word in a list if it's fully alphabetic\n            return [txt]\n        else:\n            # Count lower-case odd order letters\n            return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 3654, "completion_tokens": 1007, "duration": 48.47724008560181, "task_id": "HumanEval/125"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 or lst[i] % 2 == 1)", "is_solved": false, "iteration": 4, "prompt_tokens": 3219, "completion_tokens": 616, "duration": 32.67990684509277, "task_id": "HumanEval/121"}
{"generated_code": "def sorted_list_sum(lst):\n    # Sort the list alphabetically without filtering\n    lst.sort()\n    return lst", "is_solved": false, "iteration": 4, "prompt_tokens": 3933, "completion_tokens": 682, "duration": 33.100817918777466, "task_id": "HumanEval/149"}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "is_solved": false, "iteration": 4, "prompt_tokens": 3897, "completion_tokens": 645, "duration": 32.79998826980591, "task_id": "HumanEval/160"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 4, "prompt_tokens": 3356, "completion_tokens": 565, "duration": 33.431636095047, "task_id": "HumanEval/145"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Correctly exclude words whose lengths are prime numbers\n    return ' '.join(word for word in sentence.split() if not is_prime(len(word)))", "is_solved": false, "iteration": 4, "prompt_tokens": 3473, "completion_tokens": 841, "duration": 40.75565505027771, "task_id": "HumanEval/143"}
{"generated_code": "def is_nested(string):\n    stack = []\n    nested_found = False  # Flag to track if a nested pair is found\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                # Before popping, check if this closing bracket directly follows an opening bracket\n                if stack[-1] == '[':\n                    nested_found = True\n                stack.pop()\n            else:\n                # If there's no matching opening bracket, it's not properly nested\n                return False\n    \n    # The string is only considered nested if the stack is empty (all brackets matched)\n    # and a nested pair was found.\n    return nested_found and not stack", "is_solved": false, "iteration": 4, "prompt_tokens": 3851, "completion_tokens": 1135, "duration": 56.19459319114685, "task_id": "HumanEval/132"}
{"generated_code": "def can_arrange(arr):\n    last_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            if last_index != -1:\n                return -1\n            last_index = i\n    return last_index", "is_solved": false, "iteration": 4, "prompt_tokens": 3115, "completion_tokens": 733, "duration": 41.27179670333862, "task_id": "HumanEval/135"}
{"generated_code": "def get_odd_collatz(n):\n    odd_numbers = set()\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.add(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    odd_numbers.add(1)  # Ensure 1 is always included as it's the end of every Collatz sequence.\n    return sorted(list(odd_numbers))", "is_solved": false, "iteration": 4, "prompt_tokens": 4612, "completion_tokens": 1004, "duration": 63.78781247138977, "task_id": "HumanEval/123"}
{"generated_code": "def tri(n):\n    # Correct the base cases and the rule for calculating the Tribonacci sequence\n    # Initialize the sequence with the correct first three values according to the problem statement\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 3]\n    elif n == 2:\n        return [3, 3, 2]\n\n    trib = [3, 3, 2]  # Corrected initial values for the Tribonacci sequence\n\n    # Iterate through the range starting from 3 to n to generate the Tribonacci numbers\n    for i in range(3, n + 1):\n        if i % 2 == 0:  # Check if the index is even\n            next_val = 1 + (i / 2)\n        else:  # Calculate the next value based on the provided recurrence for odd indices\n            next_val = trib[i - 1] + trib[i - 2] + trib[i - 3]\n        trib.append(int(next_val))  # Append the next value to the sequence\n\n    return trib", "is_solved": false, "iteration": 4, "prompt_tokens": 4646, "completion_tokens": 1375, "duration": 59.33855962753296, "task_id": "HumanEval/130"}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g >= 3.7: \n            letter_grades.append('A')\n        elif g >= 3.3: \n            letter_grades.append('A-')\n        elif g >= 3.0: \n            letter_grades.append('B+')\n        elif g >= 2.7: \n            letter_grades.append('B')\n        elif g >= 2.3: \n            letter_grades.append('B-')\n        elif g >= 2.0: \n            letter_grades.append('C+')\n        elif g >= 1.7: \n            letter_grades.append('C')\n        elif g >= 1.3: \n            letter_grades.append('C-')\n        elif g >= 1.0: \n            letter_grades.append('D+')\n        elif g >= 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": false, "iteration": 4, "prompt_tokens": 6480, "completion_tokens": 1865, "duration": 74.2711889743805, "task_id": "HumanEval/81"}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0"}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1"}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4"}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5"}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8"}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 68, "duration": 4.141433477401733, "task_id": "HumanEval/9"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11"}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13"}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19"}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21"}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27"}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28"}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31"}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35"}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36"}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37"}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43"}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44"}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53"}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54"}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56"}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32"}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n", "is_solved": true, "iteration": 1, "prompt_tokens": 990, "completion_tokens": 211, "duration": 10.90630054473877, "task_id": "HumanEval/41"}
{"generated_code": "def truncate_number(number: float) -> float:\n    from decimal import Decimal\n    return float(Decimal(str(number)) - int(number))", "is_solved": true, "iteration": 1, "prompt_tokens": 797, "completion_tokens": 155, "duration": 10.430107831954956, "task_id": "HumanEval/2"}
{"generated_code": "def median(l: list):\n    l = sorted(l)  # Use sorted to avoid modifying the original list\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        # Correctly calculate the average of the two middle elements\n        return (l[mid - 1] + l[mid]) / 2.0  # Ensure division result is float\n    else:\n        return l[mid]", "is_solved": false, "iteration": 4, "prompt_tokens": 3059, "completion_tokens": 790, "duration": 38.93539333343506, "task_id": "HumanEval/47"}
{"generated_code": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 4, "prompt_tokens": 3523, "completion_tokens": 848, "duration": 40.57100701332092, "task_id": "HumanEval/50"}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 4, "prompt_tokens": 3732, "completion_tokens": 901, "duration": 45.743526220321655, "task_id": "HumanEval/7"}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. For groups of length 3, move the last element to the start.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": false, "iteration": 4, "prompt_tokens": 4151, "completion_tokens": 1162, "duration": 53.965795040130615, "task_id": "HumanEval/38"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    # Ensuring the order is always (smaller, larger) in case of negative numbers or specific edge cases\n    closest_pair = tuple(sorted(closest_pair))\n    return closest_pair", "is_solved": false, "iteration": 4, "prompt_tokens": 5093, "completion_tokens": 1095, "duration": 51.14260292053223, "task_id": "HumanEval/20"}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Replace the special note indicators with unique characters for easy splitting\n    # Adding spaces after replacements to ensure each note is separated\n    music_string = music_string.replace('o|', 'h ').replace('.|', 'q ')\n    # Split the modified string into notes, considering spaces as separators\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'h':\n            beats.append(2)\n        elif note == 'q':\n            beats.append(1)\n    return beats", "is_solved": false, "iteration": 4, "prompt_tokens": 5411, "completion_tokens": 1093, "duration": 79.13704252243042, "task_id": "HumanEval/17"}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 ** (n - 1) - 8 ** (n - 1)", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 81, "duration": 5.6620423793792725, "task_id": "HumanEval/83"}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65"}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i+1, a): # start from i+1 to avoid repeating the same factor\n                if a % (i*j) == 0 and is_prime(j):\n                    k = a // (i*j)\n                    if is_prime(k) and k != i and k != j:\n                        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 158, "duration": 9.53858232498169, "task_id": "HumanEval/75"}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76"}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87"}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88"}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99"}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100"}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106"}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107"}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110"}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112"}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113"}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1089, "completion_tokens": 291, "duration": 15.3612961769104, "task_id": "HumanEval/91"}
{"generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 1, "prompt_tokens": 1725, "completion_tokens": 330, "duration": 15.840807914733887, "task_id": "HumanEval/94"}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num >= 0:\n            return sum(int(digit) for digit in str(num))\n        else:\n            # Treat the first digit of a negative number as negative\n            return -int(str(num)[1]) + sum(int(digit) for digit in str(num)[2:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": true, "iteration": 2, "prompt_tokens": 1785, "completion_tokens": 404, "duration": 23.55169701576233, "task_id": "HumanEval/108"}
{"generated_code": "def encode(message):\n    def replace_vowel(c):\n        vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        return vowels.get(c, c)\n    \n    def swap_case(c):\n        return c.lower() if c.isupper() else c.upper()\n    \n    return ''.join(swap_case(replace_vowel(c)) if c.isalpha() else c for c in message)", "is_solved": true, "iteration": 2, "prompt_tokens": 1745, "completion_tokens": 530, "duration": 24.900113582611084, "task_id": "HumanEval/93"}
{"generated_code": "def add(lst):\n    return sum(1 for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 2727, "completion_tokens": 464, "duration": 28.630332946777344, "task_id": "HumanEval/85"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114"}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117"}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124"}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128"}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134"}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136"}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137"}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139"}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140"}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142"}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146"}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148"}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162"}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 154, "completion_tokens": 71, "duration": 8.549454927444458, "task_id": "HumanEval/163"}
{"generated_code": "def find_max(words):\n    return max(sorted(words, key=lambda word: (len(set(word)), word)))", "is_solved": true, "iteration": 1, "prompt_tokens": 770, "completion_tokens": 133, "duration": 10.822442293167114, "task_id": "HumanEval/158"}
{"generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "is_solved": true, "iteration": 1, "prompt_tokens": 1412, "completion_tokens": 131, "duration": 10.612847328186035, "task_id": "HumanEval/115"}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)", "is_solved": true, "iteration": 1, "prompt_tokens": 1003, "completion_tokens": 155, "duration": 10.128400564193726, "task_id": "HumanEval/122"}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers in ascending order.\n    \"\"\"\n    return sorted(arr)", "is_solved": true, "iteration": 1, "prompt_tokens": 1071, "completion_tokens": 178, "duration": 13.790140151977539, "task_id": "HumanEval/116"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1005, "completion_tokens": 234, "duration": 12.911695957183838, "task_id": "HumanEval/118"}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    elif all(c.isupper() for c in s):\n        return s[::-1].lower()\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 1, "prompt_tokens": 896, "completion_tokens": 243, "duration": 15.06015133857727, "task_id": "HumanEval/161"}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    # Check if 'b' is a substring of 'a' or any of its cyclic rotations.\n    extended_a = a * 2  # Create a doubled version of 'a' to simulate all possible rotations\n    return any(b in extended_a[i:i+len(b)] for i in range(len(a)))", "is_solved": true, "iteration": 1, "prompt_tokens": 925, "completion_tokens": 238, "duration": 16.057724475860596, "task_id": "HumanEval/154"}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # Attempt to concatenate in both possible orders and check if either results in a balanced string\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    \n    return 'Yes' if is_balanced(str1 + str2) or is_balanced(str2 + str1) else 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 1124, "completion_tokens": 358, "duration": 18.69607901573181, "task_id": "HumanEval/119"}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 1, "prompt_tokens": 1245, "completion_tokens": 173, "duration": 18.816009283065796, "task_id": "HumanEval/120"}
{"generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length_of_intersection = end - start\n    if is_prime(length_of_intersection):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 2, "prompt_tokens": 2413, "completion_tokens": 581, "duration": 31.35683274269104, "task_id": "HumanEval/127"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 != 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 3724, "completion_tokens": 962, "duration": 45.84757471084595, "task_id": "HumanEval/125"}
{"generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            last = stack.pop()\n            if not stack:\n                nested = False\n            else:\n                nested = True\n    return nested and not stack", "is_solved": false, "iteration": 4, "prompt_tokens": 3635, "completion_tokens": 940, "duration": 52.73868680000305, "task_id": "HumanEval/132"}
{"generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n\n    N = len(grid)\n    # Moves: right, down, left, up\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    # Initialize a min heap with tuples containing the value at grid cell, x and y coordinates, and the path taken\n    # Since we are interested in the lexicographically smallest path, we start from the smallest value in the grid\n    minValue, minPos = min((grid[i][j], (i, j)) for i in range(N) for j in range(N))\n    heap = [(minValue, minPos[0], minPos[1], [minValue])]\n    \n    while heap:\n        cost, x, y, path = heappop(heap)\n        # If we have reached a path of length k, return the path\n        if len(path) == k:\n            return path\n        # Explore all possible moves\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            # Check if the new position is within bounds\n            if 0 <= nx < N and 0 <= ny < N and len(path) < k:\n                newPath = path + [grid[nx][ny]]\n                # Push the new state into the heap\n                heappush(heap, (sum(newPath), nx, ny, newPath))", "is_solved": true, "iteration": 2, "prompt_tokens": 3617, "completion_tokens": 1195, "duration": 72.84795260429382, "task_id": "HumanEval/129"}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": false, "iteration": 4, "prompt_tokens": 3235, "completion_tokens": 798, "duration": 58.5396363735199, "task_id": "HumanEval/135"}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths and sort the list\n    filtered_sorted_lst = sorted([x for x in lst if len(x) % 2 == 0], key=lambda x: (len(x), x))\n    return filtered_sorted_lst", "is_solved": false, "iteration": 4, "prompt_tokens": 3849, "completion_tokens": 679, "duration": 33.87727332115173, "task_id": "HumanEval/149"}
{"generated_code": "def order_by_points(nums):\n    def sorting_key(x):\n        # Calculate the sum of digits of the absolute value of the number\n        digit_sum = sum(int(digit) for digit in str(abs(x)))\n        # Return a tuple with the sum of digits and the original number to maintain stability for same sums\n        return (digit_sum, nums.index(x))\n    return sorted(nums, key=sorting_key)", "is_solved": false, "iteration": 4, "prompt_tokens": 3349, "completion_tokens": 601, "duration": 29.695692777633667, "task_id": "HumanEval/145"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 3080, "completion_tokens": 492, "duration": 29.174160718917847, "task_id": "HumanEval/121"}
{"generated_code": "def do_algebra(operator, operand):\n    from operator import add, sub, mul, floordiv, pow\n    ops = {'+': add, '-': sub, '*': mul, '//': floordiv, '**': pow}\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f\" {ops[op].__name__} {num}\"\n    return eval(expression)", "is_solved": false, "iteration": 4, "prompt_tokens": 4283, "completion_tokens": 936, "duration": 43.2540397644043, "task_id": "HumanEval/160"}
{"generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Ensure 1 is always included\n    return sorted(odd_numbers)  # Return the list sorted in increasing order", "is_solved": false, "iteration": 4, "prompt_tokens": 4561, "completion_tokens": 936, "duration": 48.62627816200256, "task_id": "HumanEval/123"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    \n    return ' '.join(prime_length_words)", "is_solved": false, "iteration": 4, "prompt_tokens": 3580, "completion_tokens": 934, "duration": 50.94365644454956, "task_id": "HumanEval/143"}
{"generated_code": "def numerical_letter_grade(grades):\n    def get_letter_grade(gpa):\n        if gpa == 4.0: return 'A+'\n        elif gpa > 3.7: return 'A'\n        elif gpa > 3.3: return 'A-'\n        elif gpa > 3.0: return 'B+'\n        elif gpa > 2.7: return 'B'\n        elif gpa > 2.3: return 'B-'\n        elif gpa > 2.0: return 'C+'\n        elif gpa > 1.7: return 'C'\n        elif gpa > 1.3: return 'C-'\n        elif gpa > 1.0: return 'D+'\n        elif gpa > 0.7: return 'D'\n        elif gpa > 0.0: return 'D-'\n        else: return 'F'\n    \n    return [get_letter_grade(g) for g in grades]", "is_solved": false, "iteration": 4, "prompt_tokens": 6328, "completion_tokens": 1762, "duration": 97.79752540588379, "task_id": "HumanEval/81"}
{"generated_code": "def tri(n):\n    if n == 0: return [3]\n    if n == 1: return [3, 1]\n    if n == 2: return [3, 1, 2]\n    \n    trib = [3, 1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            next_value = 1 + (i / 2)\n        else:\n            if i + 1 > n:  # If calculating tri(n + 1) goes beyond the desired length, use a placeholder\n                next_value = trib[i - 1] + trib[i - 2] + 1  # Assume tri(n + 1) = 1 for calculation\n            else:\n                next_value = trib[i - 1] + trib[i - 2] + trib[i - 3]\n        trib.append(int(next_value))  # Ensure the value is an integer\n    \n    return trib", "is_solved": false, "iteration": 4, "prompt_tokens": 4610, "completion_tokens": 1324, "duration": 77.56409931182861, "task_id": "HumanEval/130"}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0"}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1"}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4"}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5"}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8"}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 68, "duration": 4.141433477401733, "task_id": "HumanEval/9"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11"}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13"}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19"}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21"}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27"}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28"}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31"}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35"}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36"}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37"}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43"}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44"}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53"}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54"}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56"}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32"}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    Each car from one direction will collide with each car from the opposite direction exactly once.\n    \"\"\"\n    return n", "is_solved": true, "iteration": 1, "prompt_tokens": 1002, "completion_tokens": 241, "duration": 14.893032550811768, "task_id": "HumanEval/41"}
{"generated_code": "def truncate_number(number: float) -> float:\n    import math\n    return round(number - math.floor(number), 10)", "is_solved": true, "iteration": 3, "prompt_tokens": 2110, "completion_tokens": 380, "duration": 21.52135729789734, "task_id": "HumanEval/2"}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring, excluding those where the substring is at the end.\n    \"\"\"\n    return [s for s in strings if substring in s and not s.endswith(substring)]", "is_solved": false, "iteration": 4, "prompt_tokens": 3423, "completion_tokens": 700, "duration": 34.598915100097656, "task_id": "HumanEval/7"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        mid_sum = l[n//2 - 1] + l[n//2]\n        return mid_sum / 2.0  # Ensure division result is float\n    else:\n        return l[n//2]", "is_solved": false, "iteration": 4, "prompt_tokens": 3114, "completion_tokens": 858, "duration": 40.77526068687439, "task_id": "HumanEval/47"}
{"generated_code": "def decode_shift(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_shift function. Returns decoded string by reversing the shift of 5.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if 'a' <= ch <= 'z' else ch for ch in s])", "is_solved": false, "iteration": 4, "prompt_tokens": 3488, "completion_tokens": 835, "duration": 37.237075328826904, "task_id": "HumanEval/50"}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Split the music string by spaces to handle notes individually\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": false, "iteration": 4, "prompt_tokens": 5118, "completion_tokens": 858, "duration": 35.2779221534729, "task_id": "HumanEval/17"}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": false, "iteration": 4, "prompt_tokens": 4137, "completion_tokens": 1128, "duration": 49.007909536361694, "task_id": "HumanEval/38"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers.\")\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (min(numbers[i], numbers[i+1]), max(numbers[i], numbers[i+1]))\n    return closest_pair", "is_solved": false, "iteration": 4, "prompt_tokens": 5204, "completion_tokens": 1126, "duration": 50.609148263931274, "task_id": "HumanEval/20"}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 ** (n - 1) - 8 ** (n - 1)", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 81, "duration": 5.6620423793792725, "task_id": "HumanEval/83"}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65"}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i+1, a): # start from i+1 to avoid repeating the same factor\n                if a % (i*j) == 0 and is_prime(j):\n                    k = a // (i*j)\n                    if is_prime(k) and k != i and k != j:\n                        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 158, "duration": 9.53858232498169, "task_id": "HumanEval/75"}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76"}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87"}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88"}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99"}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100"}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106"}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107"}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110"}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112"}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113"}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1096, "completion_tokens": 298, "duration": 17.24023723602295, "task_id": "HumanEval/91"}
{"generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 1, "prompt_tokens": 1680, "completion_tokens": 285, "duration": 18.802178144454956, "task_id": "HumanEval/94"}
{"generated_code": "def encode(message):\n    def shift_vowel(vowel):\n        vowels = 'aeiouAEIOU'\n        shifts = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 's', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'S'}\n        return shifts.get(vowel, vowel)\n\n    def swap_case(ch):\n        return ch.lower() if ch.isupper() else ch.upper()\n\n    encoded_message = ''\n    for c in message:\n        if c.lower() in 'aeiou':\n            # Shift the vowel before swapping its case\n            shifted_vowel = shift_vowel(c)\n            encoded_message += swap_case(shifted_vowel)\n        else:\n            encoded_message += swap_case(c)\n    return encoded_message", "is_solved": true, "iteration": 3, "prompt_tokens": 2806, "completion_tokens": 886, "duration": 36.92036509513855, "task_id": "HumanEval/93"}
{"generated_code": "def count_nums(arr):\n    def sum_of_signed_digits(num):\n        # Handle both positive and negative numbers correctly\n        if num < 0:\n            return -int(str(num)[1]) + sum(int(digit) for digit in str(num)[2:])\n        else:\n            return sum(int(digit) for digit in str(num))\n\n    # Count the numbers whose sum of signed digits is greater than 0.\n    return sum(1 for num in arr if sum_of_signed_digits(num) > 0)", "is_solved": true, "iteration": 4, "prompt_tokens": 3602, "completion_tokens": 933, "duration": 44.85846948623657, "task_id": "HumanEval/108"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 2833, "completion_tokens": 576, "duration": 26.959120512008667, "task_id": "HumanEval/85"}
{"generated_code": "def numerical_letter_grade(grades):\n    def get_letter_grade(g):\n        if g == 4.0: return 'A+'\n        elif g > 3.7: return 'A'\n        elif g > 3.3: return 'A-'\n        elif g > 3.0: return 'B+'\n        elif g > 2.7: return 'B'\n        elif g > 2.3: return 'B-'\n        elif g > 2.0: return 'C+'\n        elif g > 1.7: return 'C'\n        elif g > 1.3: return 'C-'\n        elif g > 1.0: return 'D+'\n        elif g > 0.7: return 'D'\n        elif g > 0.0: return 'D-'\n        else: return 'E'\n    \n    return [get_letter_grade(g) for g in grades]", "is_solved": false, "iteration": 4, "prompt_tokens": 6380, "completion_tokens": 1729, "duration": 81.97659420967102, "task_id": "HumanEval/81"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114"}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117"}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124"}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128"}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134"}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136"}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137"}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139"}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140"}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142"}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146"}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148"}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162"}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 154, "completion_tokens": 71, "duration": 8.549454927444458, "task_id": "HumanEval/163"}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "is_solved": true, "iteration": 1, "prompt_tokens": 1396, "completion_tokens": 114, "duration": 9.571719408035278, "task_id": "HumanEval/115"}
{"generated_code": "def find_max(words):\n    return sorted(words, key=lambda word: (-len(set(word)), word))[0]", "is_solved": true, "iteration": 1, "prompt_tokens": 784, "completion_tokens": 148, "duration": 12.154732465744019, "task_id": "HumanEval/158"}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 0 <= x <= 99)", "is_solved": true, "iteration": 1, "prompt_tokens": 1006, "completion_tokens": 157, "duration": 10.798314332962036, "task_id": "HumanEval/122"}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 1, "prompt_tokens": 1234, "completion_tokens": 162, "duration": 12.755249500274658, "task_id": "HumanEval/120"}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    elif all(c.isupper() for c in s):\n        return s[::-1].lower()\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 1, "prompt_tokens": 856, "completion_tokens": 203, "duration": 14.738380908966064, "task_id": "HumanEval/161"}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    # Correcting the calculation of length for intersection\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1458, "completion_tokens": 431, "duration": 18.986658573150635, "task_id": "HumanEval/127"}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # Attempt to concatenate str1 + str2 and check if it forms a balanced string\n    if is_balanced(str1 + str2):\n        return 'Yes'\n    # Attempt to concatenate str2 + str1 and check if it forms a balanced string\n    if is_balanced(str2 + str1):\n        return 'Yes'\n    return 'No'\n\ndef is_balanced(s):\n    balance = 0\n    for char in s:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        # If balance goes negative, parentheses are not balanced\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 1, "prompt_tokens": 1130, "completion_tokens": 402, "duration": 20.90039873123169, "task_id": "HumanEval/119"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1043, "completion_tokens": 272, "duration": 16.587726593017578, "task_id": "HumanEval/118"}
{"generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n\n    N = len(grid)\n    if k == 1:\n        return [min(min(row) for row in grid)]\n    \n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    heap = []\n    for i in range(N):\n        for j in range(N):\n            heappush(heap, (grid[i][j], i, j, [grid[i][j]]))\n\n    while heap:\n        _, x, y, path = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                newPath = path + [grid[nx][ny]]\n                if len(newPath) <= k:\n                    heappush(heap, (newPath[-1], nx, ny, newPath))", "is_solved": true, "iteration": 1, "prompt_tokens": 1955, "completion_tokens": 651, "duration": 27.774801015853882, "task_id": "HumanEval/129"}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    # Directly check if b is a substring of a or the extended version of a (to cover rotations)\n    return b in a or b in a + a", "is_solved": true, "iteration": 2, "prompt_tokens": 1787, "completion_tokens": 474, "duration": 27.19823694229126, "task_id": "HumanEval/154"}
{"generated_code": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 3, "prompt_tokens": 2382, "completion_tokens": 597, "duration": 31.94104504585266, "task_id": "HumanEval/135"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 4, "prompt_tokens": 3408, "completion_tokens": 615, "duration": 33.64921808242798, "task_id": "HumanEval/145"}
{"generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0 and '[]' in string", "is_solved": false, "iteration": 4, "prompt_tokens": 3611, "completion_tokens": 921, "duration": 53.63914704322815, "task_id": "HumanEval/132"}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths and sort the remaining strings alphabetically\n    filtered_sorted_list = sorted([x for x in lst if len(x) % 2 == 0])\n    # Sort the filtered list by length\n    return sorted(filtered_sorted_list, key=len)", "is_solved": false, "iteration": 4, "prompt_tokens": 3887, "completion_tokens": 714, "duration": 34.72922205924988, "task_id": "HumanEval/149"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 3280, "completion_tokens": 640, "duration": 33.686482191085815, "task_id": "HumanEval/121"}
{"generated_code": "def do_algebra(operator, operand):\n    from operator import add, sub, mul, floordiv, pow\n    import re\n\n    op_dict = {'+': add, '-': sub, '*': mul, '//': floordiv, '**': pow}\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n\n    # Convert the expression into a form that can be evaluated while respecting operator precedence\n    expression = re.sub(r'\\*\\*', 'pow', expression)\n    expression = re.sub(r'(?<=\\d) (?=\\d)', ',', expression)  # Add commas between numbers for function calls\n    for op, func in op_dict.items():\n        if op == '+':\n            continue  # '+' doesn't need replacement\n        expression = expression.replace(f' {op} ', f' {func.__name__}(')\n        expression = re.sub(r'(?<=\\w)\\(', '(', expression)  # Fix function names followed by '('\n    expression = expression.replace('(', ',').replace(' ', '')\n\n    # Dynamically evaluate the expression\n    result = eval(expression)\n    return result", "is_solved": false, "iteration": 4, "prompt_tokens": 3953, "completion_tokens": 899, "duration": 47.217517137527466, "task_id": "HumanEval/160"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Check if the string is composed of alphabetic characters only\n        if txt.isalpha():\n            # Count lowercase letters with odd order in the alphabet\n            return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)\n        else:\n            # Return the input string as a single-element list for other cases\n            return [txt]", "is_solved": false, "iteration": 4, "prompt_tokens": 3525, "completion_tokens": 918, "duration": 49.316840171813965, "task_id": "HumanEval/125"}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers based on the number of ones in their binary representation in ascending order,\n    then by their decimal values if the number of ones is the same. Handles both non-negative and negative integers\n    correctly, sorting negative integers in descending order by their absolute values.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x) if x >= 0 else (float('inf'), -x))", "is_solved": false, "iteration": 4, "prompt_tokens": 3914, "completion_tokens": 829, "duration": 43.59930229187012, "task_id": "HumanEval/116"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Filter words where the length is a prime number\n    filtered_words = [word for word in words if is_prime(len(word))]\n    \n    # Join the filtered words back into a string\n    return ' '.join(filtered_words)", "is_solved": false, "iteration": 4, "prompt_tokens": 3483, "completion_tokens": 875, "duration": 48.07789444923401, "task_id": "HumanEval/143"}
{"generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 == 1 else n // 2\n    odd_numbers.append(1)  # Adding 1 as the sequence always ends with 1\n    return sorted(set(odd_numbers))  # Using set to remove duplicates before sorting, converting to list is unnecessary", "is_solved": false, "iteration": 4, "prompt_tokens": 4659, "completion_tokens": 1031, "duration": 45.932700872421265, "task_id": "HumanEval/123"}
{"generated_code": "def tri(n):\n    # Initialize the first three elements of the Tribonacci sequence\n    trib = [3, 1, 2]\n    # Handle the base cases\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    elif n == 2:\n        return trib\n\n    # Generate the Tribonacci sequence for n > 2\n    for i in range(3, n + 1):\n        # The next element is the sum of the previous three elements\n        next_element = trib[i - 1] + trib[i - 2] + trib[i - 3]\n        trib.append(next_element)\n    \n    return trib", "is_solved": false, "iteration": 4, "prompt_tokens": 4383, "completion_tokens": 1131, "duration": 53.550782203674316, "task_id": "HumanEval/130"}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0"}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1"}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4"}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5"}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8"}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 68, "duration": 4.141433477401733, "task_id": "HumanEval/9"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11"}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13"}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19"}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21"}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27"}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28"}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31"}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35"}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36"}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37"}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43"}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44"}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53"}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54"}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56"}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32"}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n", "is_solved": true, "iteration": 1, "prompt_tokens": 979, "completion_tokens": 200, "duration": 10.956305980682373, "task_id": "HumanEval/41"}
{"generated_code": "def truncate_number(number: float) -> float:\n    # Convert the number to a string\n    number_str = str(number)\n    # Find the position of the decimal point\n    decimal_pos = number_str.find('.')\n    # If there is no decimal part, return 0.0\n    if decimal_pos == -1:\n        return 0.0\n    # Extract the decimal part and convert it back to float\n    decimal_part = '0' + number_str[decimal_pos:]\n    return float(decimal_part)", "is_solved": true, "iteration": 1, "prompt_tokens": 788, "completion_tokens": 225, "duration": 11.204614877700806, "task_id": "HumanEval/2"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        # Correctly compute the average of the two middle elements\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]", "is_solved": false, "iteration": 4, "prompt_tokens": 2951, "completion_tokens": 705, "duration": 36.0363404750824, "task_id": "HumanEval/47"}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    >>> filter_by_substring(['hello', 'world', 'python'], 'o')\n    ['hello', 'world', 'python']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 4, "prompt_tokens": 3918, "completion_tokens": 1031, "duration": 48.54900288581848, "task_id": "HumanEval/7"}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group by moving the last character to the start, unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": false, "iteration": 4, "prompt_tokens": 4056, "completion_tokens": 1073, "duration": 51.5415472984314, "task_id": "HumanEval/38"}
{"generated_code": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 4, "prompt_tokens": 3496, "completion_tokens": 821, "duration": 34.7172212600708, "task_id": "HumanEval/50"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "is_solved": false, "iteration": 4, "prompt_tokens": 5143, "completion_tokens": 1060, "duration": 51.73723244667053, "task_id": "HumanEval/20"}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # First replace notes with '|' to ensure they are not incorrectly replaced in the next steps\n    formatted_music_string = music_string.replace('o|', '2 ').replace('.|', '1 ')\n    # Now replace the remaining notes without '|'\n    formatted_music_string = formatted_music_string.replace('o', '4 ')\n    # Split the string into a list of beat counts\n    beat_counts = formatted_music_string.split()\n    # Convert each beat count from string to integer\n    beats = [int(beat) for beat in beat_counts]\n    return beats", "is_solved": false, "iteration": 4, "prompt_tokens": 5486, "completion_tokens": 1044, "duration": 41.368022441864014, "task_id": "HumanEval/17"}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 ** (n - 1) - 8 ** (n - 1)", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 81, "duration": 5.6620423793792725, "task_id": "HumanEval/83"}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65"}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i+1, a): # start from i+1 to avoid repeating the same factor\n                if a % (i*j) == 0 and is_prime(j):\n                    k = a // (i*j)\n                    if is_prime(k) and k != i and k != j:\n                        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 158, "duration": 9.53858232498169, "task_id": "HumanEval/75"}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76"}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87"}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88"}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99"}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100"}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106"}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107"}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110"}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112"}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113"}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1076, "completion_tokens": 278, "duration": 12.750828504562378, "task_id": "HumanEval/91"}
{"generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 1, "prompt_tokens": 1719, "completion_tokens": 324, "duration": 16.23916244506836, "task_id": "HumanEval/94"}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num < 0:\n            return sum(int(digit) for digit in str(num)[1:]) - 2*int(str(num)[1])\n        else:\n            return sum(int(digit) for digit in str(num))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": true, "iteration": 2, "prompt_tokens": 1754, "completion_tokens": 403, "duration": 32.051841497421265, "task_id": "HumanEval/108"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 2737, "completion_tokens": 475, "duration": 28.604445695877075, "task_id": "HumanEval/85"}
{"generated_code": "def encode(message):\n    def shift_vowel(v):\n        # Dictionary to shift vowels two places ahead; maintaining case\n        shift_map = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a', \n                     'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A'}\n        return shift_map.get(v, v)  # Return the shifted vowel, or the original character if not a vowel\n\n    encoded_message = ''\n    for c in message:\n        if c.isalpha():\n            if c in 'aeiouAEIOU':\n                # Shift vowel by 2 places using the shift_map\n                encoded_message += shift_vowel(c)\n            else:\n                # Swap case for consonants\n                encoded_message += c.swapcase()\n        else:\n            # Leave non-alphabetic characters unchanged\n            encoded_message += c\n    return encoded_message", "is_solved": false, "iteration": 4, "prompt_tokens": 3816, "completion_tokens": 1255, "duration": 62.80754780769348, "task_id": "HumanEval/93"}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        elif g == 0.0: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": false, "iteration": 4, "prompt_tokens": 6473, "completion_tokens": 1864, "duration": 74.07758116722107, "task_id": "HumanEval/81"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114"}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117"}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124"}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128"}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134"}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136"}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137"}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139"}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140"}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142"}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146"}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148"}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162"}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 154, "completion_tokens": 71, "duration": 8.549454927444458, "task_id": "HumanEval/163"}
{"generated_code": "def find_max(words):\n    return max(sorted(words, key=lambda word: (len(set(word)), word)))", "is_solved": true, "iteration": 1, "prompt_tokens": 770, "completion_tokens": 133, "duration": 12.054778099060059, "task_id": "HumanEval/158"}
{"generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "is_solved": true, "iteration": 1, "prompt_tokens": 1427, "completion_tokens": 146, "duration": 11.043399333953857, "task_id": "HumanEval/115"}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(sorted(arr, reverse=True)[:k])", "is_solved": true, "iteration": 1, "prompt_tokens": 1236, "completion_tokens": 168, "duration": 11.839033603668213, "task_id": "HumanEval/120"}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if x < 100)", "is_solved": true, "iteration": 1, "prompt_tokens": 1014, "completion_tokens": 162, "duration": 10.618948936462402, "task_id": "HumanEval/122"}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a + a\n    return any(b in extended_a[i:i+len(b)] for i in range(len(a)))", "is_solved": true, "iteration": 1, "prompt_tokens": 974, "completion_tokens": 250, "duration": 15.721943616867065, "task_id": "HumanEval/154"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1026, "completion_tokens": 255, "duration": 13.92094349861145, "task_id": "HumanEval/118"}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    elif all(c.isupper() for c in s):\n        return s[::-1].lower()\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 1, "prompt_tokens": 871, "completion_tokens": 218, "duration": 16.225614070892334, "task_id": "HumanEval/161"}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        \"\"\"Check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    # Find the maximum start point and the minimum end point to determine the intersection.\n    start = max(start1, start2)\n    end = min(end1, end2)\n    # If there is no intersection return \"NO\".\n    if start > end:\n        return \"NO\"\n    # Calculate the length of the intersection.\n    length = end - start\n    # Check if the length of the intersection is a prime number.\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1446, "completion_tokens": 468, "duration": 22.109172105789185, "task_id": "HumanEval/127"}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # First, check if overall they have the same number of '(' and ')'\n    total_open = str1.count('(') + str2.count('(')\n    total_close = str1.count(')') + str2.count(')')\n    if total_open != total_close:\n        return 'No'\n    \n    # Check if str1 can be the first string without causing imbalance\n    balance = 0\n    for char in str1:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                break  # str1 causes imbalance, no need to proceed further\n    \n    if balance >= 0:  # str1 does not cause imbalance\n        # Check if str2 does not cause imbalance after str1\n        for char in str2:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n                if balance < 0:\n                    return 'No'  # str2 causes imbalance after str1\n        return 'Yes'  # Neither str1 nor str2 causes imbalance\n    \n    # If str1 itself causes imbalance, check if str2 as the first string works\n    balance = 0\n    for char in str2:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                return 'No'  # str2 as the first string also causes imbalance\n    \n    # If we reach here, str2 does not cause imbalance as the first string\n    # Check if str1 does not cause imbalance after str2\n    for char in str1:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                return 'No'  # str1 causes imbalance after str2\n    \n    return 'Yes'  # str2 followed by str1 does not cause imbalance", "is_solved": true, "iteration": 1, "prompt_tokens": 1161, "completion_tokens": 695, "duration": 34.332963705062866, "task_id": "HumanEval/119"}
{"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    if k == 1:\n        return [min(cell for row in grid for cell in row)]\n    \n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    heap = [(grid[i][j], i, j, [grid[i][j]]) for i in range(N) for j in range(N)]\n    best = {}\n\n    while heap:\n        cost, x, y, path = heappop(heap)\n        if (x, y, len(path)) in best and best[(x, y, len(path))] <= path:\n            continue\n        best[(x, y, len(path))] = path\n        if len(path) == k:\n            return path\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                newPath = path + [grid[nx][ny]]\n                heappush(heap, (cost + grid[nx][ny], nx, ny, newPath))", "is_solved": true, "iteration": 2, "prompt_tokens": 3308, "completion_tokens": 926, "duration": 43.69652462005615, "task_id": "HumanEval/129"}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers based on the number of ones in their binary representation in ascending order.\n    For integers with the same number of ones, sorts based on their decimal values.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 4, "prompt_tokens": 3728, "completion_tokens": 744, "duration": 33.34903883934021, "task_id": "HumanEval/116"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 != 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 3164, "completion_tokens": 571, "duration": 31.686874389648438, "task_id": "HumanEval/121"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), x))", "is_solved": false, "iteration": 4, "prompt_tokens": 3356, "completion_tokens": 563, "duration": 31.323853969573975, "task_id": "HumanEval/145"}
{"generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                # Unmatched closing bracket, string is not properly nested\n                return False\n    # If the stack is empty, all brackets were matched, but we need at least one nested pair\n    # A nested pair exists if the length of the string is greater than the stack's final size times 2\n    return len(string) > len(stack) * 2", "is_solved": false, "iteration": 4, "prompt_tokens": 3856, "completion_tokens": 1073, "duration": 50.61227083206177, "task_id": "HumanEval/132"}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the filtered list first by length, then alphabetically\n    sorted_filtered_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_filtered_lst", "is_solved": false, "iteration": 4, "prompt_tokens": 3916, "completion_tokens": 760, "duration": 40.31315016746521, "task_id": "HumanEval/149"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((ord(char) - ord('a')) % 2 == 0 for char in txt if char.islower())", "is_solved": false, "iteration": 4, "prompt_tokens": 3445, "completion_tokens": 781, "duration": 38.799150705337524, "task_id": "HumanEval/125"}
{"generated_code": "def do_algebra(operator, operand):\n    operations = {'+': lambda x, y: x + y, '-': lambda x, y: x - y, '*': lambda x, y: x * y, '//': lambda x, y: x // y, '**': lambda x, y: x ** y}\n    expression = str(operand[0])\n    \n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n\n    return eval(expression)", "is_solved": false, "iteration": 4, "prompt_tokens": 4165, "completion_tokens": 881, "duration": 47.3780632019043, "task_id": "HumanEval/160"}
{"generated_code": "def get_odd_collatz(n):\n    odd_numbers = set()\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.add(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.add(1)  # Ensure 1 is always included\n    return sorted(odd_numbers)", "is_solved": false, "iteration": 4, "prompt_tokens": 4614, "completion_tokens": 952, "duration": 43.283111810684204, "task_id": "HumanEval/123"}
{"generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n            break\n    return largest_index", "is_solved": false, "iteration": 4, "prompt_tokens": 3030, "completion_tokens": 682, "duration": 36.98869705200195, "task_id": "HumanEval/135"}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 1, 1]\n    \n    sequence = [1, 1, 1]\n    for i in range(3, n + 1):\n        next_value = sequence[i - 1] + sequence[i - 2] + sequence[i - 3]\n        sequence.append(next_value)\n    \n    return sequence", "is_solved": false, "iteration": 4, "prompt_tokens": 4602, "completion_tokens": 1204, "duration": 56.11225891113281, "task_id": "HumanEval/130"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "is_solved": false, "iteration": 4, "prompt_tokens": 3592, "completion_tokens": 933, "duration": 47.72368049621582, "task_id": "HumanEval/143"}
