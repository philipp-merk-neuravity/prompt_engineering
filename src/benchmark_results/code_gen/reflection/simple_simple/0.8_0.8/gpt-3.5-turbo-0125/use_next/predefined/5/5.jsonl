{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "iteration_states": [{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117}]}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "iteration_states": [{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455}]}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iterations": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047, "iteration_states": [{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047}]}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "iteration_states": [{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098}]}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iterations": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "iteration_states": [{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693}]}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "iteration_states": [{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793}]}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "iteration_states": [{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222}]}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iterations": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437, "iteration_states": [{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437}]}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "iteration_states": [{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928}]}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iterations": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "iteration_states": [{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049}]}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iterations": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "iteration_states": [{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785}]}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iterations": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "iteration_states": [{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287}]}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iterations": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "iteration_states": [{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146}]}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iterations": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "iteration_states": [{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464}]}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": true, "iterations": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458, "iteration_states": [{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458}]}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "iteration_states": [{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504}]}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iterations": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "iteration_states": [{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827}]}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": true, "iterations": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459, "iteration_states": [{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459}]}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iterations": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "iteration_states": [{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672}]}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iterations": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "iteration_states": [{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945}]}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iterations": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "iteration_states": [{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462}]}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iterations": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "iteration_states": [{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275}]}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iterations": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "iteration_states": [{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634}]}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iterations": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "iteration_states": [{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334}]}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iterations": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "iteration_states": [{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355}]}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iterations": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "iteration_states": [{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329}]}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iterations": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "iteration_states": [{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695}]}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iterations": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "iteration_states": [{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717}]}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iterations": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "iteration_states": [{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982}]}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iterations": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784, "iteration_states": [{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784}]}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iterations": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "iteration_states": [{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844}]}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iterations": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "iteration_states": [{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704}]}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iterations": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "iteration_states": [{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204}]}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iterations": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "iteration_states": [{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094}]}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iterations": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "iteration_states": [{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064}]}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iterations": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "iteration_states": [{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773}]}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "iteration_states": [{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735}]}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iterations": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "iteration_states": [{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395}]}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iterations": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "iteration_states": [{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555}]}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iterations": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098, "iteration_states": [{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098}]}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iterations": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "iteration_states": [{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554}]}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iterations": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "iteration_states": [{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255}]}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iterations": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379, "iteration_states": [{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379}]}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iterations": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "iteration_states": [{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788}]}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iterations": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "iteration_states": [{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431}]}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iterations": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "iteration_states": [{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785}]}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iterations": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "iteration_states": [{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365}]}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iterations": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "iteration_states": [{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541}]}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n**2", "is_solved": true, "iterations": 1, "prompt_tokens": 934, "completion_tokens": 109, "duration": 9.178351402282715, "iteration_states": [{"generated_code": "def car_race_collision(n: int):\n    return n*(n-1)", "is_solved": false, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 20, "duration": 4.578029155731201}, {"generated_code": "def car_race_collision(n: int):\n    return n**2", "is_solved": true, "iteration": 1, "prompt_tokens": 934, "completion_tokens": 109, "duration": 9.178351402282715}]}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    \n    total_sum = sum(numbers)\n    \n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return total_sum, total_product", "is_solved": true, "iterations": 2, "prompt_tokens": 1859, "completion_tokens": 362, "duration": 9.79278016090393, "iteration_states": [{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))\n\n# Test cases\nprint(sum_product([]))  # (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)", "is_solved": false, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 103, "duration": 4.0435051918029785}, {"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1 if 0 in numbers else eval('*'.join(map(str, numbers)))\n        return total_sum, total_product", "is_solved": false, "iteration": 1, "prompt_tokens": 1030, "completion_tokens": 229, "duration": 6.468576192855835}, {"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    \n    total_sum = sum(numbers)\n    \n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return total_sum, total_product", "is_solved": true, "iteration": 2, "prompt_tokens": 1859, "completion_tokens": 362, "duration": 9.79278016090393}]}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_len)", "is_solved": true, "iterations": 2, "prompt_tokens": 1515, "completion_tokens": 300, "duration": 9.483569860458374, "iteration_states": [{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "is_solved": false, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.525851011276245}, {"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return min(strings, key=lambda x: (-len(x), x))", "is_solved": false, "iteration": 1, "prompt_tokens": 816, "completion_tokens": 145, "duration": 6.07533073425293}, {"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_len)", "is_solved": true, "iteration": 2, "prompt_tokens": 1515, "completion_tokens": 300, "duration": 9.483569860458374}]}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iterations": 2, "prompt_tokens": 1830, "completion_tokens": 180, "duration": 11.403427124023438, "iteration_states": [{"generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "is_solved": false, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 28, "duration": 5.186999797821045}, {"generated_code": "def same_chars(s0: str, s1: str):\n    from collections import Counter\n    return Counter(s0) == Counter(s1)", "is_solved": false, "iteration": 1, "prompt_tokens": 1014, "completion_tokens": 117, "duration": 9.196382761001587}, {"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 2, "prompt_tokens": 1830, "completion_tokens": 180, "duration": 11.403427124023438}]}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_values = sorted([val for idx, val in enumerate(l) if idx % 2 == 0])\n    result = [val if idx % 2 != 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iterations": 2, "prompt_tokens": 2127, "completion_tokens": 315, "duration": 10.682646989822388, "iteration_states": [{"generated_code": "def sort_even(l: list):\n    even_values = sorted([x for x in l[::2]])\n    result = [val if idx % 2 == 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.5508744716644287}, {"generated_code": "def sort_even(l: list):\n    even_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = [val if idx % 2 == 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": false, "iteration": 1, "prompt_tokens": 1131, "completion_tokens": 178, "duration": 6.368633031845093}, {"generated_code": "def sort_even(l: list):\n    even_values = sorted([val for idx, val in enumerate(l) if idx % 2 == 0])\n    result = [val if idx % 2 != 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iteration": 2, "prompt_tokens": 2127, "completion_tokens": 315, "duration": 10.682646989822388}]}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "is_solved": true, "iterations": 3, "prompt_tokens": 2397, "completion_tokens": 271, "duration": 14.484200716018677, "iteration_states": [{"generated_code": "def change_base(x: int, base: int):\n    return str(int(str(x), 10 if base == 10 else base))", "is_solved": false, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 32, "duration": 4.395244598388672}, {"generated_code": "def change_base(x: int, base: int):\n    return str(np.base_repr(x, base))", "is_solved": false, "iteration": 1, "prompt_tokens": 981, "completion_tokens": 103, "duration": 8.17000937461853}, {"generated_code": "def change_base(x: int, base: int):\n    return format(x, f'0{base}b')", "is_solved": false, "iteration": 2, "prompt_tokens": 1730, "completion_tokens": 168, "duration": 11.223843097686768}, {"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "is_solved": true, "iteration": 3, "prompt_tokens": 2397, "completion_tokens": 271, "duration": 14.484200716018677}]}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    sorted_indices = [i for i in range(0, len(l), 3) if i < len(l)]\n    sorted_values = sorted([l[i] for i in sorted_indices])\n\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": true, "iterations": 5, "prompt_tokens": 7612, "completion_tokens": 821, "duration": 27.42115616798401, "iteration_states": [{"generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248}, {"generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": false, "iteration": 1, "prompt_tokens": 1690, "completion_tokens": 252, "duration": 8.37200117111206}, {"generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": false, "iteration": 2, "prompt_tokens": 3180, "completion_tokens": 397, "duration": 12.132856607437134}, {"generated_code": "def sort_third(l: list):\n    sorted_values = sorted([l[i] for i in range(2, len(l), 3)])\n    result = l.copy()\n    for i, v in zip(range(2, len(l), 3), sorted_values):\n        result[i] = v\n    return result", "is_solved": false, "iteration": 3, "prompt_tokens": 4690, "completion_tokens": 536, "duration": 17.277909517288208}, {"generated_code": "def sort_third(l: list):\n    sorted_indices = [i for i in range(2, len(l), 3)]\n    sorted_values = [l[i] for i in sorted_indices]\n    sorted_values.sort()\n    \n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": false, "iteration": 4, "prompt_tokens": 6154, "completion_tokens": 691, "duration": 22.119346141815186}, {"generated_code": "def sort_third(l: list):\n    sorted_indices = [i for i in range(0, len(l), 3) if i < len(l)]\n    sorted_values = sorted([l[i] for i in sorted_indices])\n\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": true, "iteration": 5, "prompt_tokens": 7612, "completion_tokens": 821, "duration": 27.42115616798401}]}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if '7' in str(i) or i % 11 == 0 or i % 13 == 0)", "is_solved": false, "iterations": 9, "prompt_tokens": 7798, "completion_tokens": 1256, "duration": 40.2157347202301, "iteration_states": [{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 57, "duration": 4.1797919273376465}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 1, "prompt_tokens": 971, "completion_tokens": 189, "duration": 9.356485843658447}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0 or '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 2, "prompt_tokens": 1808, "completion_tokens": 314, "duration": 13.079331398010254}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 3, "prompt_tokens": 2674, "completion_tokens": 462, "duration": 17.85759425163269}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0 or '7' in str(i)):\n            count += 1\n    return count", "is_solved": false, "iteration": 4, "prompt_tokens": 3531, "completion_tokens": 608, "duration": 23.053027153015137}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) or '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 4375, "completion_tokens": 732, "duration": 27.792255401611328}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 3 == 0 and i % 5 == 0:\n            continue\n        if (i % 11 == 0 or i % 13 == 0) or '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 6, "prompt_tokens": 5242, "completion_tokens": 898, "duration": 31.393599271774292}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 6122, "completion_tokens": 1014, "duration": 34.242738246917725}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 8, "prompt_tokens": 6956, "completion_tokens": 1138, "duration": 37.405885219573975}, {"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if '7' in str(i) or i % 11 == 0 or i % 13 == 0)", "is_solved": false, "iteration": 9, "prompt_tokens": 7798, "completion_tokens": 1256, "duration": 40.2157347202301}]}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    i = 1\n    while i < len(string) and string[:i] == string[:i][::-1]:\n        i += 1\n\n    if i == len(string):\n        return string\n    else:\n        return string + string[:i-1][::-1]", "is_solved": false, "iterations": 9, "prompt_tokens": 7585, "completion_tokens": 1238, "duration": 42.642592430114746, "iteration_states": [{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 64, "duration": 3.7330939769744873}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    i = 1\n    while string[:i] != string[:i][::-1]:\n        i += 1\n    \n    return string + string[:i-1][::-1]", "is_solved": false, "iteration": 1, "prompt_tokens": 989, "completion_tokens": 183, "duration": 7.989503622055054}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    i = 1\n    while string[:i] == string[:i][::-1] and i < len(string):\n        i += 1\n    \n    return string + string[:i-1][::-1]", "is_solved": false, "iteration": 2, "prompt_tokens": 1751, "completion_tokens": 287, "duration": 11.17365837097168}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    i = 1\n    while i < len(string) and string[:i] == string[:i][::-1]:\n        i += 1\n    \n    return string + string[:i-1][::-1]", "is_solved": false, "iteration": 3, "prompt_tokens": 2556, "completion_tokens": 410, "duration": 16.027769804000854}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    i = 1\n    while i < len(string) and string[:i] == string[:i][::-1]:\n        i += 1\n    \n    return string + string[:i-1][::-1] if i != len(string) else string + string[:i-1][::-1][1:]", "is_solved": false, "iteration": 4, "prompt_tokens": 3362, "completion_tokens": 554, "duration": 20.642940521240234}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    i = 1\n    while i < len(string) and string[:i] == string[:i][::-1]:\n        i += 1\n    \n    return string + string[:i-1][::-1] if i != len(string) else string[:i-1][::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 4194, "completion_tokens": 680, "duration": 24.230894327163696}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    i = 1\n    while i < len(string) and string[:i] == string[:i][::-1]:\n        i += 1\n\n    return string + string[:i-1][::-1] if i != len(string) else string[:-1][::-1]", "is_solved": false, "iteration": 6, "prompt_tokens": 5041, "completion_tokens": 816, "duration": 30.903729677200317}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    i = 1\n    while i < len(string) and string[:i] == string[:i][::-1]:\n        i += 1\n\n    return string + string[:i-1][::-1] if i != len(string) else string[:-1][::-1] if string == string[::-1] else string + string[:-1][::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5876, "completion_tokens": 963, "duration": 35.449822664260864}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    i = 1\n    while i < len(string) and string[:i] == string[:i][::-1]:\n        i += 1\n\n    if i == len(string):\n        return string\n    else:\n        return string + string[:i-1][::-1]", "is_solved": false, "iteration": 8, "prompt_tokens": 6748, "completion_tokens": 1096, "duration": 39.21326780319214}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    i = 1\n    while i < len(string) and string[:i] == string[:i][::-1]:\n        i += 1\n\n    if i == len(string):\n        return string\n    else:\n        return string + string[:i-1][::-1]", "is_solved": false, "iteration": 9, "prompt_tokens": 7585, "completion_tokens": 1238, "duration": 42.642592430114746}]}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iterations": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "iteration_states": [{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684}]}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iterations": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "iteration_states": [{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214}]}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iterations": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "iteration_states": [{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987}]}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iterations": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "iteration_states": [{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924}]}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iterations": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "iteration_states": [{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926}]}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iterations": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "iteration_states": [{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723}]}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iterations": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "iteration_states": [{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351}]}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iterations": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "iteration_states": [{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045}]}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iterations": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "iteration_states": [{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304}]}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iterations": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "iteration_states": [{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392}]}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "iteration_states": [{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021}]}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iterations": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "iteration_states": [{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145}]}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iterations": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "iteration_states": [{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395}]}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iterations": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "iteration_states": [{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664}]}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iterations": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "iteration_states": [{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}]}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "iteration_states": [{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355}]}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iterations": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "iteration_states": [{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805}]}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iterations": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "iteration_states": [{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783}]}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "iteration_states": [{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107}]}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iterations": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "iteration_states": [{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475}]}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iterations": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795, "iteration_states": [{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795}]}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iterations": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "iteration_states": [{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296}]}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "iteration_states": [{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721}]}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "iteration_states": [{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727}]}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "iteration_states": [{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403}]}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "iteration_states": [{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297}]}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iterations": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "iteration_states": [{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802}]}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": true, "iterations": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165, "iteration_states": [{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165}]}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iterations": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "iteration_states": [{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723}]}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iterations": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "iteration_states": [{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731}]}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iterations": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "iteration_states": [{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601}]}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iterations": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "iteration_states": [{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994}]}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iterations": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "iteration_states": [{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414}]}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iterations": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "iteration_states": [{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715}]}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iterations": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "iteration_states": [{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159}]}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iterations": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "iteration_states": [{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854}]}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iterations": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "iteration_states": [{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544}]}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "iteration_states": [{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033}]}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iterations": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "iteration_states": [{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187}]}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "iteration_states": [{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547}]}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iterations": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "iteration_states": [{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125}]}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for char in s:\n        if char.lower() in vowels or (char.lower() == 'y' and char == s[-1]):\n            count += 1\n    \n    return count", "is_solved": true, "iterations": 1, "prompt_tokens": 1007, "completion_tokens": 195, "duration": 8.028461694717407, "iteration_states": [{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    if s[-1].lower() == 'y':\n        count += 1\n    \n    for char in s[:-1]:\n        if char.lower() in vowels:\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 78, "duration": 5.1695027351379395}, {"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for char in s:\n        if char.lower() in vowels or (char.lower() == 'y' and char == s[-1]):\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 1, "prompt_tokens": 1007, "completion_tokens": 195, "duration": 8.028461694717407}]}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iterations": 1, "prompt_tokens": 1224, "completion_tokens": 211, "duration": 7.870043039321899, "iteration_states": [{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": false, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 79, "duration": 4.324152231216431}, {"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1224, "completion_tokens": 211, "duration": 7.870043039321899}]}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    result = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    return result", "is_solved": true, "iterations": 1, "prompt_tokens": 3142, "completion_tokens": 170, "duration": 7.259710073471069, "iteration_states": [{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            return num\n    return -1", "is_solved": false, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 49, "duration": 3.606308937072754}, {"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    result = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 3142, "completion_tokens": 170, "duration": 7.259710073471069}]}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if not array or (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iterations": 1, "prompt_tokens": 1330, "completion_tokens": 168, "duration": 7.23306131362915, "iteration_states": [{"generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": false, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 50, "duration": 3.571953773498535}, {"generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if not array or (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1330, "completion_tokens": 168, "duration": 7.23306131362915}]}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iterations": 1, "prompt_tokens": 853, "completion_tokens": 186, "duration": 11.04960560798645, "iteration_states": [{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 55, "duration": 6.772214412689209}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 1, "prompt_tokens": 853, "completion_tokens": 186, "duration": 11.04960560798645}]}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iterations": 3, "prompt_tokens": 2870, "completion_tokens": 423, "duration": 15.432985544204712, "iteration_states": [{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "is_solved": false, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 61, "duration": 5.982418060302734}, {"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": false, "iteration": 1, "prompt_tokens": 1061, "completion_tokens": 182, "duration": 8.367082595825195}, {"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 1)\n    return stones", "is_solved": false, "iteration": 2, "prompt_tokens": 1972, "completion_tokens": 303, "duration": 11.219971656799316}, {"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iteration": 3, "prompt_tokens": 2870, "completion_tokens": 423, "duration": 15.432985544204712}]}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iterations": 3, "prompt_tokens": 3491, "completion_tokens": 422, "duration": 16.718501329421997, "iteration_states": [{"generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "is_solved": false, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516}, {"generated_code": "def total_match(lst1, lst2):\n    set1 = set(lst1)\n    set2 = set(lst2)\n    \n    result = list(set1.intersection(set2))\n    \n    return result", "is_solved": false, "iteration": 1, "prompt_tokens": 1312, "completion_tokens": 161, "duration": 11.122615098953247}, {"generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "is_solved": false, "iteration": 2, "prompt_tokens": 2397, "completion_tokens": 289, "duration": 13.657374382019043}, {"generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 3, "prompt_tokens": 3491, "completion_tokens": 422, "duration": 16.718501329421997}]}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(num % 2 != 0 for num in lst1) <= len(lst2) - sum(num % 2 != 0 for num in lst2) else \"NO\"", "is_solved": true, "iterations": 4, "prompt_tokens": 4738, "completion_tokens": 564, "duration": 21.304051637649536, "iteration_states": [{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= len(lst2) else \"NO\"", "is_solved": false, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 44, "duration": 3.410109043121338}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 != 0) else \"NO\"", "is_solved": false, "iteration": 1, "prompt_tokens": 1378, "completion_tokens": 200, "duration": 7.113417863845825}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(num for num in lst1 if num % 2 != 0) <= sum(num for num in lst2 if num % 2 != 0) else \"NO\"", "is_solved": false, "iteration": 2, "prompt_tokens": 2517, "completion_tokens": 336, "duration": 12.083214282989502}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(num % 2 != 0 for num in lst1) <= sum(num % 2 != 0 for num in lst2) else \"NO\"", "is_solved": false, "iteration": 3, "prompt_tokens": 3638, "completion_tokens": 454, "duration": 15.100350856781006}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(num % 2 != 0 for num in lst1) <= len(lst2) - sum(num % 2 != 0 for num in lst2) else \"NO\"", "is_solved": true, "iteration": 4, "prompt_tokens": 4738, "completion_tokens": 564, "duration": 21.304051637649536}]}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    return round(a**(1/3))**3 == a if a >= 0 else round((-a)**(1/3))**3 == -a", "is_solved": true, "iterations": 8, "prompt_tokens": 5810, "completion_tokens": 681, "duration": 23.448694229125977, "iteration_states": [{"generated_code": "def iscube(a):\n    return int(a**(1/3))**3 == a", "is_solved": false, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 23, "duration": 4.322655439376831}, {"generated_code": "def iscube(a):\n    return a >= 0 and int(a**(1/3))**3 == a", "is_solved": false, "iteration": 1, "prompt_tokens": 897, "completion_tokens": 131, "duration": 6.996598482131958}, {"generated_code": "def iscube(a):\n    return a >= 0 and int(a**(1/3))**3 == a", "is_solved": false, "iteration": 2, "prompt_tokens": 1591, "completion_tokens": 194, "duration": 8.819188833236694}, {"generated_code": "def iscube(a):\n    return a >= 0 and (a**(1/3)).is_integer()", "is_solved": false, "iteration": 3, "prompt_tokens": 2306, "completion_tokens": 276, "duration": 11.189048290252686}, {"generated_code": "import math\n\ndef iscube(a):\n    return a >= 0 and math.isqrt(abs(a))**3 == abs(a)", "is_solved": false, "iteration": 4, "prompt_tokens": 3015, "completion_tokens": 361, "duration": 13.786285877227783}, {"generated_code": "import math\n\ndef iscube(a):\n    return a >= 0 and round(a**(1/3))**3 == a", "is_solved": false, "iteration": 5, "prompt_tokens": 3744, "completion_tokens": 456, "duration": 16.270660638809204}, {"generated_code": "import math\n\ndef iscube(a):\n    return a >= 0 and round(abs(a)**(1/3))**3 == abs(a)", "is_solved": false, "iteration": 6, "prompt_tokens": 4413, "completion_tokens": 514, "duration": 17.781721830368042}, {"generated_code": "import math\n\ndef iscube(a):\n    return round(a**(1/3))**3 == a", "is_solved": false, "iteration": 7, "prompt_tokens": 5127, "completion_tokens": 603, "duration": 21.3484468460083}, {"generated_code": "import math\n\ndef iscube(a):\n    return round(a**(1/3))**3 == a if a >= 0 else round((-a)**(1/3))**3 == -a", "is_solved": true, "iteration": 8, "prompt_tokens": 5810, "completion_tokens": 681, "duration": 23.448694229125977}]}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] != s[i] for i in range(len(s)-2))", "is_solved": true, "iterations": 9, "prompt_tokens": 7150, "completion_tokens": 965, "duration": 27.09461545944214, "iteration_states": [{"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": false, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 47, "duration": 1.0319738388061523}, {"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": false, "iteration": 1, "prompt_tokens": 933, "completion_tokens": 138, "duration": 4.686770915985107}, {"generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2))", "is_solved": false, "iteration": 2, "prompt_tokens": 1710, "completion_tokens": 241, "duration": 7.106853485107422}, {"generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) and all(s[i] != s[i+1] for i in range(len(s)-1))", "is_solved": false, "iteration": 3, "prompt_tokens": 2465, "completion_tokens": 348, "duration": 9.597907543182373}, {"generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2))", "is_solved": false, "iteration": 4, "prompt_tokens": 3275, "completion_tokens": 450, "duration": 12.409555196762085}, {"generated_code": "def is_happy(s):\n    return len(s) >= 3 and any(s[i] == s[i+1] == s[i+2] for i in range(len(s)-2))", "is_solved": false, "iteration": 5, "prompt_tokens": 4043, "completion_tokens": 550, "duration": 14.705260515213013}, {"generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2))", "is_solved": false, "iteration": 6, "prompt_tokens": 4832, "completion_tokens": 651, "duration": 18.56301784515381}, {"generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+2] for i in range(len(s)-2))", "is_solved": false, "iteration": 7, "prompt_tokens": 5621, "completion_tokens": 766, "duration": 21.29181742668152}, {"generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2))", "is_solved": false, "iteration": 8, "prompt_tokens": 6398, "completion_tokens": 877, "duration": 23.57305598258972}, {"generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] != s[i] for i in range(len(s)-2))", "is_solved": true, "iteration": 9, "prompt_tokens": 7150, "completion_tokens": 965, "duration": 27.09461545944214}]}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) % 2 != 0)", "is_solved": false, "iterations": 9, "prompt_tokens": 8665, "completion_tokens": 1014, "duration": 30.2289936542511, "iteration_states": [{"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = str(num)[1:]\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 63, "duration": 3.6947553157806396}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            digits = str(num)[1:]\n        else:\n            digits = str(num)\n        if sum(int(digit) for digit in digits) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 1, "prompt_tokens": 1144, "completion_tokens": 187, "duration": 7.661186218261719}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            digits = str(num)[1:]\n        else:\n            digits = str(num)\n        if sum(int(digit) for digit in digits) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 2, "prompt_tokens": 2130, "completion_tokens": 311, "duration": 11.470949411392212}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = str(abs(num))\n        if sum(int(digit) for digit in digits) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 3, "prompt_tokens": 3131, "completion_tokens": 433, "duration": 14.685580015182495}, {"generated_code": "def count_nums(arr):\n    return sum(1 for num in arr if num != 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 4092, "completion_tokens": 519, "duration": 16.652242422103882}, {"generated_code": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0 and num > 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 4963, "completion_tokens": 591, "duration": 18.915446519851685}, {"generated_code": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0 and num > 0)", "is_solved": false, "iteration": 6, "prompt_tokens": 5912, "completion_tokens": 739, "duration": 22.73338508605957}, {"generated_code": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) != 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 6792, "completion_tokens": 813, "duration": 24.41377091407776}, {"generated_code": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) % 2 == 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 7727, "completion_tokens": 925, "duration": 27.86616826057434}, {"generated_code": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) % 2 != 0)", "is_solved": false, "iteration": 9, "prompt_tokens": 8665, "completion_tokens": 1014, "duration": 30.2289936542511}]}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    keys = dict.keys()\n    if not all(isinstance(key, str) for key in keys):\n        return False\n    \n    lowercase_keys = all(key.islower() for key in keys)\n    uppercase_keys = all(key.isupper() for key in keys)\n    \n    return lowercase_keys or uppercase_keys", "is_solved": true, "iterations": 7, "prompt_tokens": 7155, "completion_tokens": 1057, "duration": 36.01599907875061, "iteration_states": [{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(key.islower() for key in dict.keys())\n    uppercase_keys = all(key.isupper() for key in dict.keys())\n    \n    return lowercase_keys or uppercase_keys", "is_solved": false, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 62, "duration": 6.021496057510376}, {"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    str_keys = [key for key in dict.keys() if isinstance(key, str)]\n    \n    lowercase_keys = all(key.islower() for key in str_keys)\n    uppercase_keys = all(key.isupper() for key in str_keys)\n    \n    return lowercase_keys or uppercase_keys", "is_solved": false, "iteration": 1, "prompt_tokens": 1178, "completion_tokens": 198, "duration": 9.72647476196289}, {"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    str_keys = [key for key in dict.keys() if isinstance(key, str)]\n    \n    if len(str_keys) == 0:\n        return False\n    \n    lowercase_keys = all(key.islower() for key in str_keys)\n    uppercase_keys = all(key.isupper() for key in str_keys)\n    \n    return lowercase_keys or uppercase_keys", "is_solved": false, "iteration": 2, "prompt_tokens": 2143, "completion_tokens": 338, "duration": 13.279284238815308}, {"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    str_keys = [key for key in dict.keys() if isinstance(key, str)]\n    \n    if len(str_keys) == 0:\n        return False\n    \n    lowercase_keys = all(str(key).islower() for key in str_keys)\n    uppercase_keys = all(str(key).isupper() for key in str_keys)\n    \n    return lowercase_keys or uppercase_keys", "is_solved": false, "iteration": 3, "prompt_tokens": 3127, "completion_tokens": 473, "duration": 17.97266149520874}, {"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    str_keys = [key for key in dict.keys() if isinstance(key, str)]\n    \n    if len(str_keys) == 0:\n        return False\n    \n    lowercase_keys = any(str(key).islower() for key in str_keys)\n    uppercase_keys = any(str(key).isupper() for key in str_keys)\n    \n    return not (lowercase_keys and uppercase_keys)", "is_solved": false, "iteration": 4, "prompt_tokens": 4155, "completion_tokens": 647, "duration": 21.19412660598755}, {"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    str_keys = [key for key in dict.keys() if isinstance(key, str)]\n\n    if not str_keys:\n        return False\n\n    lowercase_keys = all(key.islower() for key in str_keys)\n    uppercase_keys = all(key.isupper() for key in str_keys)\n\n    return lowercase_keys or uppercase_keys", "is_solved": false, "iteration": 5, "prompt_tokens": 5188, "completion_tokens": 793, "duration": 29.236584186553955}, {"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    str_keys = [key for key in dict.keys() if isinstance(key, str)]\n\n    if not str_keys or not all(key.isalpha() for key in str_keys):\n        return False\n\n    lowercase_keys = all(key.islower() for key in str_keys)\n    uppercase_keys = all(key.isupper() for key in str_keys)\n\n    return lowercase_keys or uppercase_keys", "is_solved": false, "iteration": 6, "prompt_tokens": 6167, "completion_tokens": 941, "duration": 33.20910334587097}, {"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    keys = dict.keys()\n    if not all(isinstance(key, str) for key in keys):\n        return False\n    \n    lowercase_keys = all(key.islower() for key in keys)\n    uppercase_keys = all(key.isupper() for key in keys)\n    \n    return lowercase_keys or uppercase_keys", "is_solved": true, "iteration": 7, "prompt_tokens": 7155, "completion_tokens": 1057, "duration": 36.01599907875061}]}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iterations": 9, "prompt_tokens": 9868, "completion_tokens": 1189, "duration": 34.74305582046509, "iteration_states": [{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 65, "duration": 3.23934006690979}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 1, "prompt_tokens": 1283, "completion_tokens": 180, "duration": 5.9885358810424805}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 2, "prompt_tokens": 2347, "completion_tokens": 299, "duration": 10.920318126678467}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 3, "prompt_tokens": 3422, "completion_tokens": 429, "duration": 14.139200210571289}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 4, "prompt_tokens": 4497, "completion_tokens": 559, "duration": 17.688697814941406}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for s in lst for digit in s)}n the str{lst.index(s) + 1}ng {s} of the {lst.index(s) + 1}nput.\" for s in lst]", "is_solved": false, "iteration": 5, "prompt_tokens": 5560, "completion_tokens": 687, "duration": 20.812228202819824}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{lst.index(s) + 1}ng {s} of the {lst.index(s) + 1}nput.\" for s in lst]", "is_solved": false, "iteration": 6, "prompt_tokens": 6650, "completion_tokens": 818, "duration": 24.56511354446411}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 7, "prompt_tokens": 7726, "completion_tokens": 937, "duration": 27.58121395111084}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 8, "prompt_tokens": 8791, "completion_tokens": 1057, "duration": 30.190343618392944}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 9, "prompt_tokens": 9868, "completion_tokens": 1189, "duration": 34.74305582046509}]}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa > 0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": true, "iterations": 5, "prompt_tokens": 7435, "completion_tokens": 1738, "duration": 41.565723180770874, "iteration_states": [{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 221, "duration": 8.414106845855713}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 1, "prompt_tokens": 1729, "completion_tokens": 508, "duration": 14.889594793319702}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 2, "prompt_tokens": 3155, "completion_tokens": 812, "duration": 20.62933325767517}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa >= 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 3, "prompt_tokens": 4574, "completion_tokens": 1109, "duration": 28.390198707580566}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa >= 0.7:\n            return 'D'\n        if gpa > 0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 4, "prompt_tokens": 5993, "completion_tokens": 1404, "duration": 34.36416435241699}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa > 0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": true, "iteration": 5, "prompt_tokens": 7435, "completion_tokens": 1738, "duration": 41.565723180770874}]}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'aeiouAEIOU'\n    vowel_mapping = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = vowel_mapping.get(char.lower(), char)\n                result += encoded_char.upper() if char.isupper() else encoded_char\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n\n    return result", "is_solved": false, "iterations": 9, "prompt_tokens": 8446, "completion_tokens": 1488, "duration": 43.518958568573, "iteration_states": [{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225}, {"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 1, "prompt_tokens": 1307, "completion_tokens": 288, "duration": 7.476122617721558}, {"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 2, "prompt_tokens": 2168, "completion_tokens": 423, "duration": 11.649798154830933}, {"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char.lower())+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 3, "prompt_tokens": 3027, "completion_tokens": 558, "duration": 16.341647148132324}, {"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char.lower())+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 4, "prompt_tokens": 3907, "completion_tokens": 710, "duration": 20.49276041984558}, {"generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'aeiou'\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n            \n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 4764, "completion_tokens": 847, "duration": 24.57784080505371}, {"generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'aeiou'\n\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('A')) if char.isupper() else chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n            \n    return result", "is_solved": false, "iteration": 6, "prompt_tokens": 5631, "completion_tokens": 1006, "duration": 29.840198755264282}, {"generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'aeiou'\n\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n                result += encoded_char.upper() if char.isupper() else encoded_char\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n            \n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 6579, "completion_tokens": 1154, "duration": 35.77819085121155}, {"generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'aeiouAEIOU'\n\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a'))\n                result += encoded_char.upper() if char.isupper() else encoded_char\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n            \n    return result", "is_solved": false, "iteration": 8, "prompt_tokens": 7509, "completion_tokens": 1311, "duration": 38.84552001953125}, {"generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'aeiouAEIOU'\n    vowel_mapping = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = vowel_mapping.get(char.lower(), char)\n                result += encoded_char.upper() if char.isupper() else encoded_char\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n\n    return result", "is_solved": false, "iteration": 9, "prompt_tokens": 8446, "completion_tokens": 1488, "duration": 43.518958568573}]}
{"task_id": "HumanEval/75", "generated_code": "import itertools\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = set()\n    \n    for i in range(2, a+1):\n        if a % i == 0 and is_prime(i):\n            prime_factors.add(i)\n    \n    if len(prime_factors) == 3:\n        product = 1\n        for prime in prime_factors:\n            product *= prime\n        \n        return product == a\n    \n    return False", "is_solved": false, "iterations": 9, "prompt_tokens": 9772, "completion_tokens": 2233, "duration": 57.231703996658325, "iteration_states": [{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3", "is_solved": false, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 106, "duration": 6.856443166732788}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            while a % i == 0:\n                a //= i\n        if count > 3 or a == 1:\n            break\n    return count == 3", "is_solved": false, "iteration": 1, "prompt_tokens": 1115, "completion_tokens": 330, "duration": 11.36805534362793}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    distinct_primes = set()\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            distinct_primes.add(i)\n            while a % i == 0:\n                a //= i\n        if count > 3 or a == 1:\n            break\n    return count == 3 and len(distinct_primes) == 3", "is_solved": false, "iteration": 2, "prompt_tokens": 2194, "completion_tokens": 607, "duration": 17.024346113204956}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    distinct_primes = set()\n    \n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            distinct_primes.add(i)\n            while a % i == 0:\n                a //= i\n        if count > 3 or a == 1:\n            break\n    \n    return count == 3 and a == 1 and len(distinct_primes) == 3", "is_solved": false, "iteration": 3, "prompt_tokens": 3288, "completion_tokens": 857, "duration": 23.754724979400635}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    distinct_primes = set()\n    \n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            distinct_primes.add(i)\n            while a % i == 0:\n                a //= i\n        if count > 3 or a == 1:\n            break\n    \n    return count == 3 and a == 1 and len(distinct_primes) == 3", "is_solved": false, "iteration": 4, "prompt_tokens": 4394, "completion_tokens": 1107, "duration": 29.59467625617981}, {"generated_code": "import itertools\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    \n    for prime_combination in itertools.combinations(primes, 3):\n        if a == prime_combination[0] * prime_combination[1] * prime_combination[2]:\n            return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 5506, "completion_tokens": 1330, "duration": 34.797367572784424}, {"generated_code": "import itertools\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = set()\n        for i in range(2, n+1):\n            if n % i == 0 and is_prime(i):\n                factors.add(i)\n        return factors\n\n    prime_factors_set = prime_factors(a)\n\n    for i in range(1, len(prime_factors_set) + 1):\n        for prime_combination in itertools.combinations(prime_factors_set, i):\n            if a == 1:  # Edge case where a is 1\n                return False\n            product = 1\n            for prime in prime_combination:\n                product *= prime\n            if product == a:\n                return True\n\n    return False", "is_solved": false, "iteration": 6, "prompt_tokens": 6523, "completion_tokens": 1608, "duration": 40.8202919960022}, {"generated_code": "import itertools\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n+1):\n            if n % i == 0 and is_prime(i):\n                factors.append(i)\n        return factors\n\n    prime_factors_list = prime_factors(a)\n\n    if len(prime_factors_list) != 3:\n        return False\n\n    product = 1\n    for prime in prime_factors_list:\n        product *= prime\n\n    return product == a", "is_solved": false, "iteration": 7, "prompt_tokens": 7703, "completion_tokens": 1833, "duration": 48.06698536872864}, {"generated_code": "import itertools\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = [i for i in range(2, a+1) if a % i == 0 and is_prime(i)]\n    \n    if len(prime_factors) != 3:\n        return False\n\n    product = 1\n    for prime in prime_factors:\n        product *= prime\n\n    return product == a", "is_solved": false, "iteration": 8, "prompt_tokens": 8752, "completion_tokens": 2018, "duration": 51.32258892059326}, {"generated_code": "import itertools\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = set()\n    \n    for i in range(2, a+1):\n        if a % i == 0 and is_prime(i):\n            prime_factors.add(i)\n    \n    if len(prime_factors) == 3:\n        product = 1\n        for prime in prime_factors:\n            product *= prime\n        \n        return product == a\n    \n    return False", "is_solved": false, "iteration": 9, "prompt_tokens": 9772, "completion_tokens": 2233, "duration": 57.231703996658325}]}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iterations": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "iteration_states": [{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938}]}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iterations": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368, "iteration_states": [{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368}]}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "iteration_states": [{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723}]}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iterations": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "iteration_states": [{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926}]}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "iterations": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828, "iteration_states": [{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828}]}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iterations": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "iteration_states": [{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696}]}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iterations": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "iteration_states": [{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791}]}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iterations": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "iteration_states": [{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156}]}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iterations": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "iteration_states": [{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195}]}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "iteration_states": [{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996}]}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iterations": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "iteration_states": [{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674}]}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iterations": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875, "iteration_states": [{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875}]}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iterations": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "iteration_states": [{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018}]}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "iteration_states": [{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169}]}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iterations": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042, "iteration_states": [{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042}]}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iterations": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "iteration_states": [{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797}]}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iterations": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "iteration_states": [{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875}]}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iterations": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "iteration_states": [{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605}]}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iterations": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "iteration_states": [{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635}]}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iterations": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "iteration_states": [{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884}]}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iterations": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "iteration_states": [{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545}]}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iterations": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "iteration_states": [{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488}]}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iterations": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "iteration_states": [{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798}]}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iterations": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "iteration_states": [{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018}]}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": true, "iterations": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729, "iteration_states": [{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729}]}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383, "iteration_states": [{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383}]}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iterations": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "iteration_states": [{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438}]}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iterations": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "iteration_states": [{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076}]}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:] if k > 0 else []", "is_solved": true, "iterations": 2, "prompt_tokens": 2857, "completion_tokens": 161, "duration": 7.714008331298828, "iteration_states": [{"generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "is_solved": false, "iteration": 0, "prompt_tokens": 267, "completion_tokens": 20, "duration": 2.360170602798462}, {"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": false, "iteration": 1, "prompt_tokens": 1603, "completion_tokens": 89, "duration": 5.7607033252716064}, {"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:] if k > 0 else []", "is_solved": true, "iteration": 2, "prompt_tokens": 2857, "completion_tokens": 161, "duration": 7.714008331298828}]}
{"task_id": "HumanEval/115", "generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    wells = [sum(row) for row in grid]\n    buckets_needed = sum(math.ceil(well / capacity) for well in wells)\n    return buckets_needed", "is_solved": true, "iterations": 2, "prompt_tokens": 2747, "completion_tokens": 298, "duration": 8.910766124725342, "iteration_states": [{"generated_code": "def max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": false, "iteration": 0, "prompt_tokens": 373, "completion_tokens": 47, "duration": 3.505402088165283}, {"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": false, "iteration": 1, "prompt_tokens": 1588, "completion_tokens": 146, "duration": 6.254047155380249}, {"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    wells = [sum(row) for row in grid]\n    buckets_needed = sum(math.ceil(well / capacity) for well in wells)\n    return buckets_needed", "is_solved": true, "iteration": 2, "prompt_tokens": 2747, "completion_tokens": 298, "duration": 8.910766124725342}]}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)", "is_solved": true, "iterations": 3, "prompt_tokens": 2673, "completion_tokens": 313, "duration": 8.486102104187012, "iteration_states": [{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 38, "duration": 1.2757461071014404}, {"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 1, "prompt_tokens": 973, "completion_tokens": 114, "duration": 3.461292028427124}, {"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 2, "prompt_tokens": 1827, "completion_tokens": 218, "duration": 5.789203405380249}, {"generated_code": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)", "is_solved": true, "iteration": 3, "prompt_tokens": 2673, "completion_tokens": 313, "duration": 8.486102104187012}]}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i\n    return index", "is_solved": true, "iterations": 2, "prompt_tokens": 1704, "completion_tokens": 254, "duration": 13.296911716461182, "iteration_states": [{"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i-1\n            break\n    return index", "is_solved": false, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 52, "duration": 5.050522565841675}, {"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i\n    return index - 1", "is_solved": false, "iteration": 1, "prompt_tokens": 933, "completion_tokens": 168, "duration": 8.305094242095947}, {"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i\n    return index", "is_solved": true, "iteration": 2, "prompt_tokens": 1704, "completion_tokens": 254, "duration": 13.296911716461182}]}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if num < 100)", "is_solved": true, "iterations": 4, "prompt_tokens": 3629, "completion_tokens": 374, "duration": 14.74634313583374, "iteration_states": [{"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "is_solved": false, "iteration": 0, "prompt_tokens": 178, "completion_tokens": 31, "duration": 2.967463731765747}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr if 10 <= num < 100)[:k]", "is_solved": false, "iteration": 1, "prompt_tokens": 1029, "completion_tokens": 123, "duration": 5.479618787765503}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "is_solved": false, "iteration": 2, "prompt_tokens": 1927, "completion_tokens": 191, "duration": 8.301784992218018}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "is_solved": false, "iteration": 3, "prompt_tokens": 2774, "completion_tokens": 280, "duration": 11.418242931365967}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if num < 100)", "is_solved": true, "iteration": 4, "prompt_tokens": 3629, "completion_tokens": 374, "duration": 14.74634313583374}]}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    odd_digits = [int(digit) for digit in str(n) if int(digit) % 2 != 0]\n    if odd_digits:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product\n    return 0", "is_solved": true, "iterations": 4, "prompt_tokens": 3075, "completion_tokens": 529, "duration": 16.491013526916504, "iteration_states": [{"generated_code": "def digits(n):\n    prod = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n    return prod if prod != 1 else 0", "is_solved": false, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 53, "duration": 1.1113629341125488}, {"generated_code": "def digits(n):\n    return 0 if all(int(digit) % 2 == 0 for digit in str(n)) else 1 if 1 in [int(digit) for digit in str(n) if int(digit) % 2 != 0] else 0", "is_solved": false, "iteration": 1, "prompt_tokens": 810, "completion_tokens": 170, "duration": 4.6263580322265625}, {"generated_code": "def digits(n):\n    return 0 if all(int(digit) % 2 == 0 for digit in str(n)) else 1 if 1 in [int(digit) for digit in str(n) if int(digit) % 2 != 0] else 1", "is_solved": false, "iteration": 2, "prompt_tokens": 1560, "completion_tokens": 286, "duration": 7.59206748008728}, {"generated_code": "def digits(n):\n    odd_digits = [int(digit) for digit in str(n) if int(digit) % 2 != 0]\n    return 0 if not odd_digits else 1 if len(odd_digits) == 1 else 1 if len(odd_digits) == 2 else 1", "is_solved": false, "iteration": 3, "prompt_tokens": 2299, "completion_tokens": 398, "duration": 11.654928207397461}, {"generated_code": "def digits(n):\n    odd_digits = [int(digit) for digit in str(n) if int(digit) % 2 != 0]\n    if odd_digits:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product\n    return 0", "is_solved": true, "iteration": 4, "prompt_tokens": 3075, "completion_tokens": 529, "duration": 16.491013526916504}]}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a)", "is_solved": false, "iterations": 9, "prompt_tokens": 7285, "completion_tokens": 914, "duration": 29.698430061340332, "iteration_states": [{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2)", "is_solved": false, "iteration": 0, "prompt_tokens": 179, "completion_tokens": 29, "duration": 3.6121397018432617}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a)", "is_solved": false, "iteration": 1, "prompt_tokens": 944, "completion_tokens": 115, "duration": 6.058017015457153}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or len(a) == len(b) and any(b in a[i:] + a[:i] for i in range(len(a)))", "is_solved": false, "iteration": 2, "prompt_tokens": 1702, "completion_tokens": 221, "duration": 8.80812931060791}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a)", "is_solved": false, "iteration": 3, "prompt_tokens": 2521, "completion_tokens": 307, "duration": 12.05431866645813}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or len(a) == len(b) and b[::-1] in (a + a)", "is_solved": false, "iteration": 4, "prompt_tokens": 3288, "completion_tokens": 414, "duration": 14.646002769470215}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or len(a) == len(b) and b[::-1] in (a + a) or len(a) == len(b) and any(b in a[i:] + a[:i] for i in range(len(a)))", "is_solved": false, "iteration": 5, "prompt_tokens": 4094, "completion_tokens": 549, "duration": 18.551496505737305}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a)", "is_solved": false, "iteration": 6, "prompt_tokens": 4961, "completion_tokens": 645, "duration": 20.885368824005127}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or any(b in a[i:] + a[:i] for i in range(len(a)))", "is_solved": false, "iteration": 7, "prompt_tokens": 5713, "completion_tokens": 737, "duration": 23.438767671585083}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or any(b in a[i:] + a[:i] for i in range(len(a)))", "is_solved": false, "iteration": 8, "prompt_tokens": 6504, "completion_tokens": 840, "duration": 28.031782150268555}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a)", "is_solved": false, "iteration": 9, "prompt_tokens": 7285, "completion_tokens": 914, "duration": 29.698430061340332}]}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    count = sum(1 for i in range(2, n//4+1, 2) for j in range(i, n//3+1, 2) for k in range(j, n//2+1, 2) if n - i - j - k >= k and (n - i - j - k) % 2 == 0)\n    return count >= 1", "is_solved": true, "iterations": 6, "prompt_tokens": 5122, "completion_tokens": 965, "duration": 33.0368127822876, "iteration_states": [{"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if n - i in range(2, n, 2):\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 64, "duration": 5.258005857467651}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = sum(1 for i in range(2, n//2 + 1, 2) if n - i in range(2, n, 2))\n    return count == 4", "is_solved": false, "iteration": 1, "prompt_tokens": 917, "completion_tokens": 168, "duration": 8.088441371917725}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = sum(1 for i in range(2, n, 2) for j in range(2, n, 2) for k in range(2, n, 2) for l in range(2, n, 2) if i + j + k + l == n)\n    return count == 1", "is_solved": false, "iteration": 2, "prompt_tokens": 1713, "completion_tokens": 322, "duration": 13.940209865570068}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = sum(1 for i in range(2, n, 2) for j in range(2, n, 2) for k in range(2, n, 2) for l in range(2, n, 2) if i + j + k + l == n)\n    return count == 1", "is_solved": false, "iteration": 3, "prompt_tokens": 2571, "completion_tokens": 482, "duration": 18.715675354003906}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = sum(1 for i in range(2, n, 2) for j in range(i, n, 2) for k in range(j, n, 2) for l in range(k, n, 2) if i + j + k + l == n)\n    return count == 1", "is_solved": false, "iteration": 4, "prompt_tokens": 3425, "completion_tokens": 635, "duration": 23.098000526428223}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = sum(1 for i in range(2, n//4+1, 2) for j in range(i, n//3+1, 2) for k in range(j, n//2+1, 2) for l in range(k, n+1, 2) if i + j + k + l == n)\n    return count == 1", "is_solved": false, "iteration": 5, "prompt_tokens": 4261, "completion_tokens": 800, "duration": 28.23295283317566}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = sum(1 for i in range(2, n//4+1, 2) for j in range(i, n//3+1, 2) for k in range(j, n//2+1, 2) if n - i - j - k >= k and (n - i - j - k) % 2 == 0)\n    return count >= 1", "is_solved": true, "iteration": 6, "prompt_tokens": 5122, "completion_tokens": 965, "duration": 33.0368127822876}]}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(d) for d in str(abs(num)) if d.isdigit())\n    \n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "is_solved": false, "iterations": 9, "prompt_tokens": 10955, "completion_tokens": 1069, "duration": 31.5305233001709, "iteration_states": [{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "is_solved": false, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 31, "duration": 2.5527098178863525}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x) if d.isdigit()), nums.index(x)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1376, "completion_tokens": 126, "duration": 5.281257629394531}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x)) if d.isdigit()), nums.index(x)))", "is_solved": false, "iteration": 2, "prompt_tokens": 2529, "completion_tokens": 210, "duration": 7.332197427749634}, {"generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(d) for d in str(abs(num)) if d.isdigit())\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "is_solved": false, "iteration": 3, "prompt_tokens": 3716, "completion_tokens": 340, "duration": 10.101334571838379}, {"generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(d) for d in str(abs(num)) if d.isdigit())\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "is_solved": false, "iteration": 4, "prompt_tokens": 4925, "completion_tokens": 464, "duration": 13.697617292404175}, {"generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(d) for d in str(abs(num)) if d.isdigit())\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 6133, "completion_tokens": 587, "duration": 17.015005826950073}, {"generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(d) for d in str(abs(num)) if d.isdigit())\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "is_solved": false, "iteration": 6, "prompt_tokens": 7327, "completion_tokens": 696, "duration": 19.379923105239868}, {"generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(d) for d in str(abs(num)) if d.isdigit())\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 8535, "completion_tokens": 819, "duration": 24.74238896369934}, {"generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(d) for d in str(abs(num)) if d.isdigit())\n    \n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "is_solved": false, "iteration": 8, "prompt_tokens": 9754, "completion_tokens": 954, "duration": 28.0729923248291}, {"generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(d) for d in str(abs(num)) if d.isdigit())\n    \n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "is_solved": false, "iteration": 9, "prompt_tokens": 10955, "completion_tokens": 1069, "duration": 31.5305233001709}]}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    if start % 2 != 0:\n        start += 1\n    return [i for i in range(start, end+1, 2)]", "is_solved": false, "iterations": 9, "prompt_tokens": 7790, "completion_tokens": 1103, "duration": 33.5898597240448, "iteration_states": [{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 0, "prompt_tokens": 154, "completion_tokens": 35, "duration": 3.812481641769409}, {"generated_code": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 1, "prompt_tokens": 967, "completion_tokens": 150, "duration": 7.453592777252197}, {"generated_code": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 2, "prompt_tokens": 1809, "completion_tokens": 262, "duration": 9.802521705627441}, {"generated_code": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 3, "prompt_tokens": 2657, "completion_tokens": 380, "duration": 13.413418054580688}, {"generated_code": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 4, "prompt_tokens": 3505, "completion_tokens": 498, "duration": 16.322756052017212}, {"generated_code": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    if start % 2 != 0:\n        start += 1\n    return [i for i in range(start, end+1, 2)]", "is_solved": false, "iteration": 5, "prompt_tokens": 4328, "completion_tokens": 601, "duration": 18.460615158081055}, {"generated_code": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    if start % 2 != 0:\n        start += 1\n    return [i for i in range(start, end+1, 2)]", "is_solved": false, "iteration": 6, "prompt_tokens": 5206, "completion_tokens": 739, "duration": 22.184027194976807}, {"generated_code": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    if start % 2 != 0:\n        start += 1\n    return [i for i in range(start, end+1, 2)]", "is_solved": false, "iteration": 7, "prompt_tokens": 6067, "completion_tokens": 860, "duration": 27.492276906967163}, {"generated_code": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    if start % 2 != 0:\n        start += 1\n    return [i for i in range(start, end+1, 2)]", "is_solved": false, "iteration": 8, "prompt_tokens": 6940, "completion_tokens": 993, "duration": 30.267380475997925}, {"generated_code": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    if start % 2 != 0:\n        start += 1\n    return [i for i in range(start, end+1, 2)]", "is_solved": false, "iteration": 9, "prompt_tokens": 7790, "completion_tokens": 1103, "duration": 33.5898597240448}]}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt:\n        words = txt.split()\n        if words:\n            last_word = words[-1]\n            if last_word and last_word[-1].isalpha() and not last_word[-1].isalnum():\n                return True\n    return False", "is_solved": false, "iterations": 9, "prompt_tokens": 8952, "completion_tokens": 1181, "duration": 35.195125579833984, "iteration_states": [{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 66, "duration": 5.334384918212891}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if txt.strip()[-2] == ' ':\n        return True\n    return False", "is_solved": false, "iteration": 1, "prompt_tokens": 1154, "completion_tokens": 182, "duration": 8.376780986785889}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    txt = txt.strip()\n    if len(txt) < 2:\n        return txt.isalpha()\n    return txt[-1].isalpha() and txt[-2] == ' '", "is_solved": false, "iteration": 2, "prompt_tokens": 2157, "completion_tokens": 314, "duration": 11.795516967773438}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    txt = txt.strip()\n    if len(txt) < 2:\n        return txt.isalpha()\n    return txt[-1].isalpha() and not txt[-2].isalnum()", "is_solved": false, "iteration": 3, "prompt_tokens": 3113, "completion_tokens": 426, "duration": 15.458884239196777}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha():\n        txt = txt.strip()\n        if txt:\n            return not txt[-1].isalnum()\n    return False", "is_solved": false, "iteration": 4, "prompt_tokens": 4068, "completion_tokens": 522, "duration": 19.162628650665283}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt.strip()[-1].isalpha() and not txt.split()[-1][-1].isalnum():\n        return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 5037, "completion_tokens": 657, "duration": 22.097012042999268}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt.strip() and txt.strip()[-1].isalpha() and (len(txt.split()) == 1 or not txt.split()[-1][-1].isalnum()):\n        return True\n    return False", "is_solved": false, "iteration": 6, "prompt_tokens": 5968, "completion_tokens": 769, "duration": 25.761922597885132}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt:\n        words = txt.split()\n        if words:\n            last_word = words[-1]\n            if len(last_word) == 1 and last_word.isalpha():\n                return True\n            if len(last_word) > 1 and last_word[-1].isalpha() and not last_word[-1].isalnum():\n                return True\n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 6963, "completion_tokens": 939, "duration": 29.780226707458496}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt:\n        words = txt.split()\n        if words:\n            last_word = words[-1]\n            if last_word[-1].isalpha() and not last_word[-1].isalnum():\n                return True\n    return False", "is_solved": false, "iteration": 8, "prompt_tokens": 7980, "completion_tokens": 1054, "duration": 32.75511980056763}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt:\n        words = txt.split()\n        if words:\n            last_word = words[-1]\n            if last_word and last_word[-1].isalpha() and not last_word[-1].isalnum():\n                return True\n    return False", "is_solved": false, "iteration": 9, "prompt_tokens": 8952, "completion_tokens": 1181, "duration": 35.195125579833984}]}
{"task_id": "HumanEval/126", "generated_code": "from collections import Counter\n\ndef is_sorted(lst):\n    if len(lst) != len(set(lst)):\n        return False\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))", "is_solved": false, "iterations": 9, "prompt_tokens": 12452, "completion_tokens": 1016, "duration": 34.45376443862915, "iteration_states": [{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1) if lst.count(lst[i]) == 1)", "is_solved": false, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 43, "duration": 4.305203914642334}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))", "is_solved": false, "iteration": 1, "prompt_tokens": 1932, "completion_tokens": 173, "duration": 7.823157548904419}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(lst) == len(set(lst))", "is_solved": false, "iteration": 2, "prompt_tokens": 3166, "completion_tokens": 287, "duration": 12.041869878768921}, {"generated_code": "def is_sorted(lst):\n    return lst == sorted(set(lst))", "is_solved": false, "iteration": 3, "prompt_tokens": 4384, "completion_tokens": 352, "duration": 14.679432153701782}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))", "is_solved": false, "iteration": 4, "prompt_tokens": 5575, "completion_tokens": 453, "duration": 18.69731616973877}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(set(lst)) == len(lst)", "is_solved": false, "iteration": 5, "prompt_tokens": 6780, "completion_tokens": 541, "duration": 22.06688404083252}, {"generated_code": "def is_sorted(lst):\n    return lst == sorted(set(lst)) and all(lst[i] <= lst[i+1] for i in range(len(lst)-1))", "is_solved": false, "iteration": 6, "prompt_tokens": 8033, "completion_tokens": 667, "duration": 25.112120866775513}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(set(lst)) == len(lst)", "is_solved": false, "iteration": 7, "prompt_tokens": 9650, "completion_tokens": 809, "duration": 28.307132482528687}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))", "is_solved": false, "iteration": 8, "prompt_tokens": 11244, "completion_tokens": 915, "duration": 31.93954563140869}, {"generated_code": "from collections import Counter\n\ndef is_sorted(lst):\n    if len(lst) != len(set(lst)):\n        return False\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))", "is_solved": false, "iteration": 9, "prompt_tokens": 12452, "completion_tokens": 1016, "duration": 34.45376443862915}]}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    \n    for s in lst:\n        for char in s:\n            if char == '(':\n                count += 1\n            else:\n                if count == 0:\n                    return 'No'\n                count -= 1\n    \n    return 'Yes' if count == 0 else 'No'", "is_solved": false, "iterations": 9, "prompt_tokens": 10216, "completion_tokens": 1267, "duration": 34.32953715324402, "iteration_states": [{"generated_code": "def match_parens(lst):\n    return 'Yes' if abs(lst[0].count('(') - lst[0].count(')')) <= 1 and abs(lst[1].count('(') - lst[1].count(')')) <= 1 else 'No'", "is_solved": false, "iteration": 0, "prompt_tokens": 218, "completion_tokens": 62, "duration": 3.538313865661621}, {"generated_code": "def match_parens(lst):\n    count = 0\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return 'No'\n    return 'Yes' if count == 0 else 'No'", "is_solved": false, "iteration": 1, "prompt_tokens": 1328, "completion_tokens": 190, "duration": 7.927029371261597}, {"generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append('(')\n            else:\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n    return 'Yes' if not stack else 'No'", "is_solved": false, "iteration": 2, "prompt_tokens": 2441, "completion_tokens": 324, "duration": 10.871994733810425}, {"generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                count += 1\n            else:\n                if count > 0:\n                    count -= 1\n                else:\n                    return 'No'\n    return 'Yes' if count == 0 else 'No'", "is_solved": false, "iteration": 3, "prompt_tokens": 3567, "completion_tokens": 476, "duration": 14.224472045898438}, {"generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append('(')\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'", "is_solved": false, "iteration": 4, "prompt_tokens": 4694, "completion_tokens": 611, "duration": 17.792126655578613}, {"generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append('(')\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    \n    return 'Yes' if len(stack) == 0 else 'No'", "is_solved": false, "iteration": 5, "prompt_tokens": 5796, "completion_tokens": 750, "duration": 20.587382793426514}, {"generated_code": "def match_parens(lst):\n    open_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count == 0:\n                    return 'No'\n                open_count -= 1\n    \n    return 'Yes' if open_count == 0 else 'No'", "is_solved": false, "iteration": 6, "prompt_tokens": 6891, "completion_tokens": 881, "duration": 24.654679536819458}, {"generated_code": "def match_parens(lst):\n    open_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count == 0:\n                    return 'No'\n                open_count -= 1\n    \n    return 'Yes' if open_count == 0 else 'No'", "is_solved": false, "iteration": 7, "prompt_tokens": 8023, "completion_tokens": 1031, "duration": 27.878267288208008}, {"generated_code": "def match_parens(lst):\n    stack = []\n    \n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    \n    return 'Yes' if not stack else 'No'", "is_solved": false, "iteration": 8, "prompt_tokens": 9131, "completion_tokens": 1145, "duration": 30.852514028549194}, {"generated_code": "def match_parens(lst):\n    count = 0\n    \n    for s in lst:\n        for char in s:\n            if char == '(':\n                count += 1\n            else:\n                if count == 0:\n                    return 'No'\n                count -= 1\n    \n    return 'Yes' if count == 0 else 'No'", "is_solved": false, "iteration": 9, "prompt_tokens": 10216, "completion_tokens": 1267, "duration": 34.32953715324402}]}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    a_val = float(a.replace(',', '.')) if isinstance(a, str) else float(a)\n    b_val = float(b.replace(',', '.')) if isinstance(b, str) else float(b)\n    \n    if a_val == b_val:\n        return None\n    \n    return a if a_val > b_val else b", "is_solved": true, "iterations": 7, "prompt_tokens": 7305, "completion_tokens": 1354, "duration": 34.961403608322144, "iteration_states": [{"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "is_solved": false, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}, {"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else b\n\n    if isinstance(a, str) and isinstance(b, str):\n        a_val = float(a.replace(',', '.')) if ',' in a else float(a)\n        b_val = float(b.replace(',', '.')) if ',' in b else float(b)\n        return a if a_val > b_val else b\n\n    return a if isinstance(a, str) else b", "is_solved": false, "iteration": 1, "prompt_tokens": 1065, "completion_tokens": 251, "duration": 6.5570268630981445}, {"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    \n    if (isinstance(a, int) or isinstance(a, float)) and (isinstance(b, int) or isinstance(b, float)):\n        return a if float(a) > float(b) else b\n\n    if isinstance(a, str) and (isinstance(b, int) or isinstance(b, float)):\n        a_val = float(a.replace(',', '.')) if ',' in a else float(a)\n        return a if a_val > float(b) else b\n\n    if (isinstance(a, int) or isinstance(a, float)) and isinstance(b, str):\n        b_val = float(b.replace(',', '.')) if ',' in b else float(b)\n        return a if float(a) > b_val else b\n\n    return a if isinstance(a, str) else b", "is_solved": false, "iteration": 2, "prompt_tokens": 2084, "completion_tokens": 510, "duration": 12.961152076721191}, {"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    \n    if (isinstance(a, str) and ',' in a):\n        a_val = float(a.replace(',', '.'))\n    else:\n        a_val = float(a) if isinstance(a, (int, float)) else a\n        \n    if (isinstance(b, str) and ',' in b):\n        b_val = float(b.replace(',', '.'))\n    else:\n        b_val = float(b) if isinstance(b, (int, float)) else b\n        \n    return a_val if a_val > b_val else b_val", "is_solved": false, "iteration": 3, "prompt_tokens": 3235, "completion_tokens": 710, "duration": 17.68887710571289}, {"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    \n    if isinstance(a, str):\n        a_val = float(a.replace(',', '.')) if ',' in a else float(a)\n    else:\n        a_val = float(a)\n        \n    if isinstance(b, str):\n        b_val = float(b.replace(',', '.')) if ',' in b else float(b)\n    else:\n        b_val = float(b)\n        \n    return a_val if a_val > b_val else b_val", "is_solved": false, "iteration": 4, "prompt_tokens": 4342, "completion_tokens": 896, "duration": 23.656590938568115}, {"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    \n    if isinstance(a, str):\n        a_val = float(a.replace(',', '.')) if ',' in a else float(a)\n    else:\n        a_val = float(a)\n        \n    if isinstance(b, str):\n        b_val = float(b.replace(',', '.')) if ',' in b else float(b)\n    else:\n        b_val = float(b)\n        \n    return a_val if a_val > b_val else b_val", "is_solved": false, "iteration": 5, "prompt_tokens": 5352, "completion_tokens": 1071, "duration": 28.20891761779785}, {"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    \n    a_val = float(a.replace(',', '.')) if isinstance(a, str) else float(a)\n    b_val = float(b.replace(',', '.')) if isinstance(b, str) else float(b)\n    \n    return a_val if a_val > b_val else b_val", "is_solved": false, "iteration": 6, "prompt_tokens": 6343, "completion_tokens": 1196, "duration": 31.395384073257446}, {"generated_code": "def compare_one(a, b):\n    a_val = float(a.replace(',', '.')) if isinstance(a, str) else float(a)\n    b_val = float(b.replace(',', '.')) if isinstance(b, str) else float(b)\n    \n    if a_val == b_val:\n        return None\n    \n    return a if a_val > b_val else b", "is_solved": true, "iteration": 7, "prompt_tokens": 7305, "completion_tokens": 1354, "duration": 34.961403608322144}]}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for c in text:\n        if c == ' ':\n            count += 1\n            if count > 1:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iterations": 9, "prompt_tokens": 7955, "completion_tokens": 1336, "duration": 38.72339701652527, "iteration_states": [{"generated_code": "def fix_spaces(text):\n    return ''.join(['_' if c == ' ' else '-' if c == ' ' * 2 else c for c in text])\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "is_solved": false, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 102, "duration": 5.568545341491699}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for c in text:\n        if c == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            count = 0\n            result.append(c)\n    return ''.join(result)", "is_solved": false, "iteration": 1, "prompt_tokens": 1041, "completion_tokens": 224, "duration": 9.96503496170044}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for c in text:\n        if c == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            count = 0\n            result.append(c)\n    return ''.join(result)", "is_solved": false, "iteration": 2, "prompt_tokens": 1904, "completion_tokens": 378, "duration": 15.056709051132202}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for c in text:\n        if c == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            count = 0\n            result.append(c)\n    return ''.join(result)", "is_solved": false, "iteration": 3, "prompt_tokens": 2745, "completion_tokens": 498, "duration": 17.276947736740112}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for c in text:\n        if c == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            count = 0\n            result.append(c)\n    if count > 2:\n        result[-1] = '-'\n    else:\n        result[-1] = '_'\n    return ''.join(result)", "is_solved": false, "iteration": 4, "prompt_tokens": 3606, "completion_tokens": 664, "duration": 20.66822838783264}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for c in text:\n        if c == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            count = 0\n            result.append(c)\n    return ''.join(result)", "is_solved": false, "iteration": 5, "prompt_tokens": 4542, "completion_tokens": 799, "duration": 23.915076732635498}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for c in text:\n        if c == ' ':\n            count += 1\n            if count > 1:\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            count = 0\n            result.append(c)\n    return ''.join(result)", "is_solved": false, "iteration": 6, "prompt_tokens": 5383, "completion_tokens": 925, "duration": 28.51486873626709}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for c in text:\n        if c == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            count = 0\n            result.append(c)\n    return ''.join(result)", "is_solved": false, "iteration": 7, "prompt_tokens": 6254, "completion_tokens": 1077, "duration": 33.02230262756348}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for c in text:\n        if c == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iteration": 8, "prompt_tokens": 7114, "completion_tokens": 1216, "duration": 36.43519449234009}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for c in text:\n        if c == ' ':\n            count += 1\n            if count > 1:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iteration": 9, "prompt_tokens": 7955, "completion_tokens": 1336, "duration": 38.72339701652527}]}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iterations": 9, "prompt_tokens": 12400, "completion_tokens": 1144, "duration": 34.75653672218323, "iteration_states": [{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 54, "duration": 1.426814079284668}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 1, "prompt_tokens": 1553, "completion_tokens": 177, "duration": 4.167659759521484}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 2, "prompt_tokens": 2927, "completion_tokens": 316, "duration": 8.746983766555786}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 3, "prompt_tokens": 4299, "completion_tokens": 453, "duration": 12.394991397857666}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 4, "prompt_tokens": 5658, "completion_tokens": 565, "duration": 16.24058985710144}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 6978, "completion_tokens": 674, "duration": 20.35892081260681}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 6, "prompt_tokens": 8333, "completion_tokens": 794, "duration": 23.123608827590942}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 7, "prompt_tokens": 9690, "completion_tokens": 916, "duration": 27.55618691444397}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 8, "prompt_tokens": 11048, "completion_tokens": 1039, "duration": 32.68295359611511}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 9, "prompt_tokens": 12400, "completion_tokens": 1144, "duration": 34.75653672218323}]}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        words = [word for word in txt.split(',') if word.isalpha()]\n        return words if words else sum(1 for char in txt if char.islower())", "is_solved": false, "iterations": 9, "prompt_tokens": 8320, "completion_tokens": 1266, "duration": 40.09142017364502, "iteration_states": [{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "is_solved": false, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 60, "duration": 3.0317656993865967}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        words = txt.split()\n        if len(words) == 1:  # if no whitespaces or commas, count number of lowercase letters with odd order in the alphabet\n            return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return words", "is_solved": false, "iteration": 1, "prompt_tokens": 1041, "completion_tokens": 196, "duration": 6.00335168838501}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    elif txt:\n        return sum(1 for char in txt if char.islower())\n    else:\n        return 0", "is_solved": false, "iteration": 2, "prompt_tokens": 2011, "completion_tokens": 319, "duration": 10.716768741607666}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    elif txt:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n    else:\n        return 0", "is_solved": false, "iteration": 3, "prompt_tokens": 2891, "completion_tokens": 447, "duration": 14.448011875152588}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 3779, "completion_tokens": 562, "duration": 17.55172348022461}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        unique_letters = set(char for char in txt if char.islower())\n        odd_order_letters = [char for char in unique_letters if ord(char) % 2 != 0]\n        return len(odd_order_letters)", "is_solved": false, "iteration": 5, "prompt_tokens": 4647, "completion_tokens": 696, "duration": 21.088371753692627}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        unique_letters = set(char for char in txt if char.islower())\n        odd_order_letters = [char for char in unique_letters if ord(char) % 2 != 0]\n        return len(odd_order_letters)", "is_solved": false, "iteration": 6, "prompt_tokens": 5551, "completion_tokens": 834, "duration": 24.80597758293152}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        words = [word for word in txt.split() if word.isalpha()]\n        return words if words else sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 6479, "completion_tokens": 995, "duration": 32.13773965835571}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        words = [word for word in txt.split(',') if word.isalpha()]\n        return words if words else sum(1 for char in txt if char.islower())", "is_solved": false, "iteration": 8, "prompt_tokens": 7416, "completion_tokens": 1136, "duration": 36.47289323806763}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        words = [word for word in txt.split(',') if word.isalpha()]\n        return words if words else sum(1 for char in txt if char.islower())", "is_solved": false, "iteration": 9, "prompt_tokens": 8320, "completion_tokens": 1266, "duration": 40.09142017364502}]}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n            nested = True\n    \n    return nested and len(stack) < len(string) // 2", "is_solved": false, "iterations": 9, "prompt_tokens": 9788, "completion_tokens": 1477, "duration": 48.217472076416016, "iteration_states": [{"generated_code": "def is_nested(string):\n    opening_brackets = []\n    \n    for char in string:\n        if char == '[':\n            opening_brackets.append(char)\n        elif char == ']':\n            if opening_brackets:\n                opening_brackets.pop()\n    \n    return len(opening_brackets) != 0\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 116, "duration": 6.233360767364502}, {"generated_code": "def is_nested(string):\n    nested_level = 0\n    \n    for char in string:\n        if char == '[':\n            nested_level += 1\n        elif char == ']':\n            if nested_level > 0:\n                nested_level -= 1\n    \n    return nested_level > 0\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 1, "prompt_tokens": 1319, "completion_tokens": 296, "duration": 12.181598424911499}, {"generated_code": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    \n    return len(stack) > 0\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 2, "prompt_tokens": 2444, "completion_tokens": 473, "duration": 17.762039184570312}, {"generated_code": "def is_nested(string):\n    stack = []\n    nested_found = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack: # Check if there was an opening bracket before the closing bracket\n                nested_found = True\n    \n    return nested_found\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 3, "prompt_tokens": 3564, "completion_tokens": 656, "duration": 20.76179814338684}, {"generated_code": "def is_nested(string):\n    stack = []\n    nested_found = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            \n        if len(stack) >= 2:\n            nested_found = True\n    \n    return nested_found", "is_solved": false, "iteration": 4, "prompt_tokens": 4694, "completion_tokens": 814, "duration": 26.10061812400818}, {"generated_code": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    \n    return len(stack) > 1", "is_solved": false, "iteration": 5, "prompt_tokens": 5678, "completion_tokens": 921, "duration": 30.400256872177124}, {"generated_code": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    \n    return len(stack) > 0", "is_solved": false, "iteration": 6, "prompt_tokens": 6684, "completion_tokens": 1038, "duration": 32.99584126472473}, {"generated_code": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    \n    return len(stack) > 0 and stack[0] != stack[-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 7716, "completion_tokens": 1180, "duration": 38.94253635406494}, {"generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n            nested = True\n    \n    return nested", "is_solved": false, "iteration": 8, "prompt_tokens": 8746, "completion_tokens": 1316, "duration": 42.37175798416138}, {"generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n            nested = True\n    \n    return nested and len(stack) < len(string) // 2", "is_solved": false, "iteration": 9, "prompt_tokens": 9788, "completion_tokens": 1477, "duration": 48.217472076416016}]}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iterations": 9, "prompt_tokens": 14077, "completion_tokens": 2154, "duration": 48.310242652893066, "iteration_states": [{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 0, "prompt_tokens": 304, "completion_tokens": 159, "duration": 5.277536869049072}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 1, "prompt_tokens": 1850, "completion_tokens": 397, "duration": 10.634515523910522}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 2, "prompt_tokens": 3387, "completion_tokens": 626, "duration": 17.22759246826172}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 3, "prompt_tokens": 4912, "completion_tokens": 843, "duration": 21.254996061325073}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 4, "prompt_tokens": 6433, "completion_tokens": 1056, "duration": 26.538679838180542}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 7944, "completion_tokens": 1259, "duration": 30.232218027114868}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 6, "prompt_tokens": 9478, "completion_tokens": 1485, "duration": 35.7671537399292}, {"generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 7, "prompt_tokens": 10997, "completion_tokens": 1696, "duration": 40.27764534950256}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 8, "prompt_tokens": 12506, "completion_tokens": 1896, "duration": 43.960660457611084}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 9, "prompt_tokens": 14077, "completion_tokens": 2154, "duration": 48.310242652893066}]}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iterations": 9, "prompt_tokens": 10280, "completion_tokens": 1721, "duration": 45.722569942474365, "iteration_states": [{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 126, "duration": 2.1185858249664307}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 1, "prompt_tokens": 1367, "completion_tokens": 296, "duration": 9.697014331817627}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 2, "prompt_tokens": 2487, "completion_tokens": 480, "duration": 14.555154800415039}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 3, "prompt_tokens": 3602, "completion_tokens": 659, "duration": 18.251641511917114}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 4, "prompt_tokens": 4731, "completion_tokens": 852, "duration": 23.27822184562683}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 5, "prompt_tokens": 5834, "completion_tokens": 1019, "duration": 28.064684629440308}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 6, "prompt_tokens": 6940, "completion_tokens": 1189, "duration": 31.19628095626831}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 7, "prompt_tokens": 8046, "completion_tokens": 1359, "duration": 37.67103362083435}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 8, "prompt_tokens": 9154, "completion_tokens": 1531, "duration": 42.40724778175354}, {"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 9, "prompt_tokens": 10280, "completion_tokens": 1721, "duration": 45.722569942474365}]}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    \n    sequence = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            next_val = 1 + i // 2\n        else:\n            next_val = sequence[-1] + sequence[-2] + sequence[-3]\n        sequence.append(next_val)\n    \n    return sequence", "is_solved": false, "iterations": 9, "prompt_tokens": 16082, "completion_tokens": 1791, "duration": 50.80753302574158, "iteration_states": [{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 0, "prompt_tokens": 285, "completion_tokens": 108, "duration": 6.019955396652222}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                sequence.append(sequence[i // 2])\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-2])\n        return sequence", "is_solved": false, "iteration": 1, "prompt_tokens": 2045, "completion_tokens": 308, "duration": 11.041385889053345}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i // 2])\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n        return sequence", "is_solved": false, "iteration": 2, "prompt_tokens": 3774, "completion_tokens": 510, "duration": 15.355011463165283}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i // 2])\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n        return sequence", "is_solved": false, "iteration": 3, "prompt_tokens": 5609, "completion_tokens": 720, "duration": 19.711670637130737}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i // 2])\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n        sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n        return sequence", "is_solved": false, "iteration": 4, "prompt_tokens": 7393, "completion_tokens": 903, "duration": 25.828331232070923}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    sequence = [1, 3]\n    for i in range(2, n):\n        if i % 2 == 0:\n            next_val = sequence[i - 1] + sequence[i // 2]\n        else:\n            next_val = sequence[i - 1] + sequence[i - 2] + sequence[i // 2]\n        sequence.append(next_val)\n    return sequence", "is_solved": false, "iteration": 5, "prompt_tokens": 9221, "completion_tokens": 1091, "duration": 30.209291458129883}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    sequence = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            next_val = sequence[i - 1] + sequence[i // 2]\n        else:\n            next_val = sequence[i - 1] + sequence[i - 2] + sequence[i // 2]\n        sequence.append(next_val)\n    return sequence", "is_solved": false, "iteration": 6, "prompt_tokens": 10928, "completion_tokens": 1257, "duration": 36.08135986328125}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    \n    sequence = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            next_val = 1 + i // 2\n        else:\n            next_val = sequence[i - 1] + sequence[i - 2] + sequence[i // 2]\n        sequence.append(next_val)\n    \n    return sequence", "is_solved": false, "iteration": 7, "prompt_tokens": 12666, "completion_tokens": 1445, "duration": 42.97679114341736}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    \n    sequence = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            next_val = 1 + i // 2\n        else:\n            next_val = sequence[i - 1] + sequence[i - 2] + sequence[i - 3]\n        sequence.append(next_val)\n    \n    return sequence", "is_solved": false, "iteration": 8, "prompt_tokens": 14367, "completion_tokens": 1626, "duration": 47.29838538169861}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    \n    sequence = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            next_val = 1 + i // 2\n        else:\n            next_val = sequence[-1] + sequence[-2] + sequence[-3]\n        sequence.append(next_val)\n    \n    return sequence", "is_solved": false, "iteration": 9, "prompt_tokens": 16082, "completion_tokens": 1791, "duration": 50.80753302574158}]}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    heap = [(grid[i][j], i, j, [grid[i][j]]) for i in range(n) for j in range(n)]\n    visited = set()\n    \n    while heap:\n        val, x, y, path = heappop(heap)\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        \n        if len(path) == k:\n            return path\n        \n        for dx in range(-1, 2):\n            for dy in range(-1, 2):\n                if dx == 0 and dy == 0:\n                    continue\n                for i in range(1, k-len(path)+1):\n                    nx, ny = x + dx*i, y + dy*i\n                    if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                        heappush(heap, (grid[nx][ny], nx, ny, path + [grid[nx][ny]]))\n    \n    return []", "is_solved": false, "iterations": 9, "prompt_tokens": 25285, "completion_tokens": 3000, "duration": 66.32129693031311, "iteration_states": [{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            result = dfs(i, j, 1, [grid[i][j]])\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 446, "completion_tokens": 263, "duration": 4.281391620635986}, {"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if new_path and (not min_path or new_path < min_path):\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            result = dfs(i, j, 1, [grid[i][j]])\n            visited[i][j] = False\n            if result:\n                return result\n\n    return result", "is_solved": false, "iteration": 1, "prompt_tokens": 3240, "completion_tokens": 595, "duration": 10.417638301849365}, {"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        next_paths = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                next_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if next_path:\n                    next_paths.append(next_path)\n                visited[nx][ny] = False\n\n        return min(next_paths) if next_paths else []\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            result = dfs(i, j, 1, [grid[i][j]])\n            visited[i][j] = False\n            if result:\n                return result\n\n    return result", "is_solved": false, "iteration": 2, "prompt_tokens": 6056, "completion_tokens": 920, "duration": 18.274697065353394}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    heap = [(grid[i][j], i, j) for i in range(n) for j in range(n)]\n    visited = set()\n    \n    while heap:\n        val, x, y = heappop(heap)\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        \n        if len(visited) == k:\n            return [grid[i][j] for i, j in sorted(visited)]\n        \n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                heappush(heap, (grid[nx][ny], nx, ny))\n    \n    return []", "is_solved": false, "iteration": 3, "prompt_tokens": 8855, "completion_tokens": 1182, "duration": 24.202461004257202}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    heap = [(grid[i][j], i, j, 1, [grid[i][j]]) for i in range(n) for j in range(n)]\n    visited = set()\n    \n    while heap:\n        val, x, y, steps, path = heappop(heap)\n        if (x, y) in visited or steps > k:\n            continue\n        visited.add((x, y))\n        \n        if steps == k:\n            return path\n        \n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                heappush(heap, (grid[nx][ny], nx, ny, steps + 1, path + [grid[nx][ny]]))\n    \n    return []", "is_solved": false, "iteration": 4, "prompt_tokens": 11569, "completion_tokens": 1486, "duration": 31.87118649482727}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    heap = [(grid[i][j], i, j, 1, [grid[i][j]]) for i in range(n) for j in range(n)]\n    visited = set()\n    \n    while heap:\n        val, x, y, steps, path = heappop(heap)\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        \n        if grid[x][y] == k:\n            return path\n        \n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                heappush(heap, (grid[nx][ny], nx, ny, steps + 1, path + [grid[nx][ny]]))\n    \n    return []", "is_solved": false, "iteration": 5, "prompt_tokens": 14301, "completion_tokens": 1778, "duration": 38.05887699127197}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    heap = [(grid[i][j], i, j, 1, [grid[i][j]]) for i in range(n) for j in range(n)]\n    visited = set()\n    \n    while heap:\n        val, x, y, steps, path = heappop(heap)\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        \n        if steps == k:\n            if val == k:\n                return path\n            continue\n        \n        for dx in range(-k + 1, k):\n            dy = k - abs(dx)\n            for nx, ny in [(x + dx, y + dy), (x + dx, y - dy)]:\n                if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                    heappush(heap, (grid[nx][ny], nx, ny, steps + 1, path + [grid[nx][ny]]))\n    \n    return []", "is_solved": false, "iteration": 6, "prompt_tokens": 17026, "completion_tokens": 2070, "duration": 46.72179460525513}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    heap = [(grid[i][j], i, j, 1, [grid[i][j]]) for i in range(n) for j in range(n)]\n    visited = set()\n    \n    while heap:\n        val, x, y, steps, path = heappop(heap)\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        \n        if steps == k:\n            if val == k:\n                return path\n            continue\n        \n        for dx in range(-1, 2):\n            for dy in range(-1, 2):\n                if dx == 0 and dy == 0:\n                    continue\n                for i in range(1, k-steps+1):\n                    nx, ny = x + dx*i, y + dy*i\n                    if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                        heappush(heap, (grid[nx][ny], nx, ny, steps + 1, path + [grid[nx][ny]]))\n    \n    return []", "is_solved": false, "iteration": 7, "prompt_tokens": 19760, "completion_tokens": 2389, "duration": 52.48083448410034}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    heap = [(grid[i][j], i, j, [grid[i][j]]) for i in range(n) for j in range(n)]\n    visited = set()\n    \n    while heap:\n        val, x, y, path = heappop(heap)\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        \n        if len(path) == k and val == k:\n            return path\n        \n        for dx in range(-1, 2):\n            for dy in range(-1, 2):\n                if dx == 0 and dy == 0:\n                    continue\n                for i in range(1, k-len(path)+1):\n                    nx, ny = x + dx*i, y + dy*i\n                    if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                        heappush(heap, (grid[nx][ny], nx, ny, path + [grid[nx][ny]]))\n    \n    return []", "is_solved": false, "iteration": 8, "prompt_tokens": 22531, "completion_tokens": 2692, "duration": 57.83511161804199}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    heap = [(grid[i][j], i, j, [grid[i][j]]) for i in range(n) for j in range(n)]\n    visited = set()\n    \n    while heap:\n        val, x, y, path = heappop(heap)\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        \n        if len(path) == k:\n            return path\n        \n        for dx in range(-1, 2):\n            for dy in range(-1, 2):\n                if dx == 0 and dy == 0:\n                    continue\n                for i in range(1, k-len(path)+1):\n                    nx, ny = x + dx*i, y + dy*i\n                    if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                        heappush(heap, (grid[nx][ny], nx, ny, path + [grid[nx][ny]]))\n    \n    return []", "is_solved": false, "iteration": 9, "prompt_tokens": 25285, "completion_tokens": 3000, "duration": 66.32129693031311}]}
