{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x:\n        result = str(x % base) + result\n        x //= base\n    \n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 994, "completion_tokens": 147, "duration": 6.9884192943573, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def sort_third(l: list):\n    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted([l[i] for i in sorted_indices])\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1666, "completion_tokens": 210, "duration": 7.045475244522095, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)", "is_solved": true, "iteration": 1, "prompt_tokens": 831, "completion_tokens": 174, "duration": 6.449218273162842, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list):\n    even_values = sorted([x for x in l[::2]])\n    result = [val if idx % 2 != 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1152, "completion_tokens": 189, "duration": 6.857564926147461, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n ** 2", "is_solved": true, "iteration": 2, "prompt_tokens": 1626, "completion_tokens": 173, "duration": 8.7712242603302, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 4, "prompt_tokens": 3567, "completion_tokens": 413, "duration": 14.08700442314148, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    \n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    \n    return sum_result, product_result", "is_solved": true, "iteration": 4, "prompt_tokens": 3570, "completion_tokens": 686, "duration": 15.760504007339478, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    i = len(string)\n    while i >= 0:\n        if string[:i] == string[:i][::-1]:\n            break\n        i -= 1\n\n    if string == string[::-1]:\n        return string\n    \n    return string + string[i-1::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 4260, "completion_tokens": 723, "duration": 18.55312204360962, "task_id": "HumanEval/10", "result": "failed: ", "passed": false}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if '7' in str(i) or i % 7 == 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 4344, "completion_tokens": 701, "duration": 18.444066524505615, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "task_id": "HumanEval/83", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1307, "completion_tokens": 151, "duration": 6.082810163497925, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if hist:\n        max_count = max(hist.values())\n        return {k: v for k, v in hist.items() if v == max_count}\n    else:\n        return {}", "is_solved": true, "iteration": 1, "prompt_tokens": 1218, "completion_tokens": 207, "duration": 7.171306133270264, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    result = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 3127, "completion_tokens": 155, "duration": 6.725823402404785, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[i-1] % 2 == 0:\n            stones.append(stones[i-1] + 2)\n        else:\n            stones.append(stones[i-1] + 1 if n % 2 == 0 else stones[i-1] + 2)\n    return stones", "is_solved": true, "iteration": 3, "prompt_tokens": 2897, "completion_tokens": 464, "duration": 14.574124097824097, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(x) for x in lst1) < sum(len(x) for x in lst2) else lst2 if sum(len(x) for x in lst1) > sum(len(x) for x in lst2) else lst1", "is_solved": true, "iteration": 4, "prompt_tokens": 4665, "completion_tokens": 573, "duration": 17.033838748931885, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i, char in enumerate(s.lower()):\n        if char in vowels or (char == 'y' and i == len(s)-1):\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 4, "prompt_tokens": 3419, "completion_tokens": 568, "duration": 16.024314641952515, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2))", "is_solved": false, "iteration": 5, "prompt_tokens": 3998, "completion_tokens": 520, "duration": 12.558054208755493, "task_id": "HumanEval/80", "result": "failed: iopaxioi", "passed": false}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 5876, "completion_tokens": 654, "duration": 17.15396237373352, "task_id": "HumanEval/110", "result": "failed: ", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s if digit.isdigit())} in the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 5648, "completion_tokens": 715, "duration": 17.17253851890564, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def count_nums(arr):\n    def sum_of_signed_digits(num):\n        num_str = str(num)\n        return sum(int(digit) for digit in num_str if digit.isdigit() or digit == '-')\n\n    return sum(1 for num in arr if sum_of_signed_digits(num) > 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 5505, "completion_tokens": 768, "duration": 18.63038420677185, "task_id": "HumanEval/108", "result": "failed: invalid literal for int() with base 10: '-'", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042, "task_id": "HumanEval/149", "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "is_solved": true, "iteration": 1, "prompt_tokens": 986, "completion_tokens": 126, "duration": 3.3604815006256104, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    prod = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n            has_odd = True\n    return prod if has_odd else 0", "is_solved": true, "iteration": 1, "prompt_tokens": 805, "completion_tokens": 164, "duration": 3.9340248107910156, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    if not grid:\n        return 0\n    \n    num_buckets = 0\n    for well in grid:\n        water_in_well = sum(well)\n        num_buckets += math.ceil(water_in_well / capacity)\n    \n    return num_buckets", "is_solved": true, "iteration": 2, "prompt_tokens": 2726, "completion_tokens": 274, "duration": 9.228225946426392, "task_id": "HumanEval/115", "result": "passed", "passed": true}
{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(str(key).islower() for key in dict.keys() if isinstance(key, str))\n    uppercase_keys = all(str(key).isupper() for key in dict.keys() if isinstance(key, str))\n    non_string_keys = any(not isinstance(key, str) for key in dict.keys())\n    \n    return (lowercase_keys or uppercase_keys) and not non_string_keys", "is_solved": true, "iteration": 2, "prompt_tokens": 2131, "completion_tokens": 338, "duration": 12.933822631835938, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:] if k > 0 else []", "is_solved": true, "iteration": 2, "prompt_tokens": 2859, "completion_tokens": 163, "duration": 10.034475564956665, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 3, "prompt_tokens": 4235, "completion_tokens": 367, "duration": 9.511591672897339, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    i = 2\n    while i <= a and count < 3:\n        if a % i == 0 and is_prime(i):\n            count += 1\n            a //= i\n        else:\n            i += 1\n    return count == 3 and a == 1", "is_solved": true, "iteration": 2, "prompt_tokens": 2177, "completion_tokens": 535, "duration": 15.782604694366455, "task_id": "HumanEval/75", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if len(str(num)) <= 2)", "is_solved": true, "iteration": 3, "prompt_tokens": 2692, "completion_tokens": 298, "duration": 11.9398512840271, "task_id": "HumanEval/122", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.split()[-1]) == 1 and txt.split()[-1].isalpha():\n        return True\n    return False", "is_solved": true, "iteration": 5, "prompt_tokens": 5076, "completion_tokens": 701, "duration": 20.029722452163696, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    out_of_order_indices = [i for i in range(1, len(arr)) if arr[i] < arr[i-1]]\n    \n    if len(out_of_order_indices) > 0:\n        return max(out_of_order_indices)\n    else:\n        return -1", "is_solved": true, "iteration": 5, "prompt_tokens": 4144, "completion_tokens": 709, "duration": 21.36014175415039, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple([planet for planet in planets if start_idx < planets.index(planet) < end_idx])\n    elif start_idx > end_idx:\n        return tuple([planet for planet in planets if start_idx > planets.index(planet) > end_idx])\n    else:\n        return ()", "is_solved": true, "iteration": 4, "prompt_tokens": 4956, "completion_tokens": 939, "duration": 21.001492977142334, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    return a >= 0 and (a**(1/3)).is_integer()", "is_solved": false, "iteration": 5, "prompt_tokens": 3713, "completion_tokens": 421, "duration": 15.592606782913208, "task_id": "HumanEval/77", "result": "failed: Third test error: False", "passed": false}
{"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_space_count = 0\n    for i, c in enumerate(text):\n        if c == ' ':\n            consecutive_space_count += 1\n            if consecutive_space_count > 2:\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            consecutive_space_count = 0\n    return ''.join(result)", "is_solved": false, "iteration": 5, "prompt_tokens": 4560, "completion_tokens": 833, "duration": 21.802786588668823, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or any(b in a[i:] + a[:i] for i in range(len(a))) and len(set(a)) == len(set(b))", "is_solved": false, "iteration": 5, "prompt_tokens": 4094, "completion_tokens": 548, "duration": 16.184670448303223, "task_id": "HumanEval/154", "result": "failed: test #1", "passed": false}
{"generated_code": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        a = float(a.replace(',', '.')) if isinstance(a, str) else a\n        b = float(b.replace(',', '.')) if isinstance(b, str) else b\n\n    if a == b:\n        return None\n    \n    return a if a > b else b", "is_solved": false, "iteration": 5, "prompt_tokens": 4660, "completion_tokens": 684, "duration": 19.15547752380371, "task_id": "HumanEval/137", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char.lower())+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 4710, "completion_tokens": 789, "duration": 20.569593906402588, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        if all(char.islower() for char in txt) and len(set(txt)) == 1:\n            return len(set(txt))\n        else:\n            return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 4738, "completion_tokens": 736, "duration": 17.949450492858887, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 5, "prompt_tokens": 4385, "completion_tokens": 643, "duration": 18.740481853485107, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(lst) == len(set(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 6489, "completion_tokens": 550, "duration": 20.0966854095459, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    \n    sequence = [1, 3]  # Initialize the sequence with the correct starting values\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n    \n    return sequence", "is_solved": false, "iteration": 5, "prompt_tokens": 8881, "completion_tokens": 966, "duration": 26.224607944488525, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 6112, "completion_tokens": 567, "duration": 16.781811952590942, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str) / 2 else x_str[-shift:] + x_str[:-shift] if len(x_str) > 1 else x_str", "is_solved": false, "iteration": 5, "prompt_tokens": 3728, "completion_tokens": 700, "duration": 22.141748905181885, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def match_parens(lst):\n    open_count = lst[0].count('(')\n    close_count = lst[1].count(')')\n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'", "is_solved": false, "iteration": 5, "prompt_tokens": 5901, "completion_tokens": 759, "duration": 26.885536193847656, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    open_brackets = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']':\n            if open_brackets > 0:\n                open_brackets -= 1\n    \n    return open_brackets < len(string) and open_brackets > 0", "is_solved": false, "iteration": 5, "prompt_tokens": 5435, "completion_tokens": 759, "duration": 22.361019372940063, "task_id": "HumanEval/132", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if n - i != i and n - i >= 2 * i and (n - i) % 2 == 0 and i % 2 == 0:\n            count += 1\n            if count > 4:\n                return False\n    return count == 4", "is_solved": false, "iteration": 5, "prompt_tokens": 4335, "completion_tokens": 828, "duration": 26.58063793182373, "task_id": "HumanEval/138", "result": "failed: ", "passed": false}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 7891, "completion_tokens": 1206, "duration": 28.707985877990723, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa >= 0.7 and gpa < 1.0:  \n            return 'D'\n        if gpa >= 0.0 and gpa < 0.7:  \n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 5, "prompt_tokens": 7355, "completion_tokens": 1663, "duration": 38.53570318222046, "task_id": "HumanEval/81", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path[:]\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if new_path and (not min_path or new_path < min_path):\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            new_path = dfs(i, j, 1, [grid[i][j]])\n            if new_path and (not result or len(new_path) < k or (len(new_path) == k and new_path < result)):\n                result = new_path\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 14606, "completion_tokens": 2023, "duration": 43.87610340118408, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    \n    prod = 1\n    for num in numbers:\n        prod *= num\n    \n    return sum(numbers), prod", "is_solved": true, "iteration": 1, "prompt_tokens": 1043, "completion_tokens": 227, "duration": 6.607698678970337, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    digits = '0123456789'\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = digits[remainder] + result\n        x //= base\n    return result", "is_solved": true, "iteration": 2, "prompt_tokens": 1819, "completion_tokens": 320, "duration": 10.713829040527344, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n**2", "is_solved": true, "iteration": 3, "prompt_tokens": 2384, "completion_tokens": 267, "duration": 11.403160333633423, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)", "is_solved": true, "iteration": 3, "prompt_tokens": 2088, "completion_tokens": 315, "duration": 10.454618692398071, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list):\n    even_values = [l[i] for i in range(len(l)) if i % 2 == 0]\n    sorted_even_values = sorted(even_values)\n    result = [sorted_even_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n    return result", "is_solved": true, "iteration": 3, "prompt_tokens": 3112, "completion_tokens": 455, "duration": 12.096726655960083, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def sort_third(l: list):\n    sorted_values = sorted(l[::3])\n    result = l.copy()\n    result[::3] = sorted_values\n    return result", "is_solved": true, "iteration": 4, "prompt_tokens": 5886, "completion_tokens": 475, "duration": 14.596999406814575, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "is_solved": false, "iteration": 5, "prompt_tokens": 4364, "completion_tokens": 469, "duration": 16.829631090164185, "task_id": "HumanEval/54", "result": "failed: ", "passed": false}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 4401, "completion_tokens": 759, "duration": 19.87726402282715, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            break\n    \n    return string + string[:i-1][::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 4253, "completion_tokens": 722, "duration": 18.38130259513855, "task_id": "HumanEval/10", "result": "failed: ", "passed": false}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "task_id": "HumanEval/83", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 == 0) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1358, "completion_tokens": 180, "duration": 5.979006290435791, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1213, "completion_tokens": 200, "duration": 6.962917804718018, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    current_stones = n\n    for i in range(1, n):\n        if current_stones % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n        stones.append(current_stones)\n    return stones", "is_solved": true, "iteration": 1, "prompt_tokens": 1065, "completion_tokens": 191, "duration": 8.838615417480469, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    uppercase_keys = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return lowercase_keys or uppercase_keys", "is_solved": true, "iteration": 1, "prompt_tokens": 1186, "completion_tokens": 199, "duration": 9.076978921890259, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    max_num = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            max_num = max(max_num, num)\n    return max_num", "is_solved": true, "iteration": 1, "prompt_tokens": 3134, "completion_tokens": 166, "duration": 6.757751226425171, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if not array:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1321, "completion_tokens": 164, "duration": 6.95065450668335, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = []\n    i = 2\n    while i * i <= a:\n        if a % i:\n            i += 1\n        else:\n            a //= i\n            if is_prime(i):\n                prime_factors.append(i)\n    \n    if a > 1 and is_prime(a):\n        prime_factors.append(a)\n\n    return len(prime_factors) == 3", "is_solved": true, "iteration": 2, "prompt_tokens": 2070, "completion_tokens": 493, "duration": 13.663447380065918, "task_id": "HumanEval/75", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] != s[i] for i in range(len(s)-2))", "is_solved": true, "iteration": 5, "prompt_tokens": 4099, "completion_tokens": 591, "duration": 13.354021310806274, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    return a >= 0 and round(abs(a)**(1/3))**3 == abs(a)", "is_solved": false, "iteration": 5, "prompt_tokens": 3654, "completion_tokens": 427, "duration": 14.312404870986938, "task_id": "HumanEval/77", "result": "failed: Third test error: False", "passed": false}
{"generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if all(len(word) for word in lst1) < all(len(word) for word in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": false, "iteration": 5, "prompt_tokens": 5645, "completion_tokens": 668, "duration": 20.30359411239624, "task_id": "HumanEval/74", "result": "failed: ", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift][::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 3840, "completion_tokens": 729, "duration": 20.877519607543945, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i+1}ng {i+1} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 5525, "completion_tokens": 638, "duration": 17.919545888900757, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    \n    if s[-1].lower() == 'y' and count == 0:\n        count += 1\n    \n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 4564, "completion_tokens": 877, "duration": 21.039684295654297, "task_id": "HumanEval/64", "result": "failed: Test 3", "passed": false}
{"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num == 0:\n            count += 1\n        elif num < 0:\n            digit_sum = sum(int(digit) for digit in str(num)[1:] if digit.isdigit())\n            if digit_sum > 0:\n                count += 1\n        else:\n            digit_sum = sum(int(digit) for digit in str(num) if digit.isdigit())\n            if digit_sum > 0:\n                count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 5311, "completion_tokens": 835, "duration": 19.2472186088562, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char.lower())+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 5014, "completion_tokens": 875, "duration": 20.740431308746338, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        elif gpa >= 0.0:\n            return 'D-'\n        else:\n            return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 5, "prompt_tokens": 7360, "completion_tokens": 1643, "duration": 33.896517753601074, "task_id": "HumanEval/81", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042, "task_id": "HumanEval/149", "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    prod = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n            has_odd = True\n    return prod if has_odd else 0", "is_solved": true, "iteration": 1, "prompt_tokens": 826, "completion_tokens": 185, "duration": 4.249444484710693, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:] if k > 0 else []", "is_solved": true, "iteration": 2, "prompt_tokens": 2862, "completion_tokens": 166, "duration": 6.6758646965026855, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if len(str(num)) <= 2)", "is_solved": true, "iteration": 2, "prompt_tokens": 1870, "completion_tokens": 205, "duration": 7.297608375549316, "task_id": "HumanEval/122", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_buckets = 0\n    for row in grid:\n        well_water = sum(row)\n        total_buckets += math.ceil(well_water / capacity)\n    return total_buckets", "is_solved": true, "iteration": 2, "prompt_tokens": 2713, "completion_tokens": 254, "duration": 8.365315914154053, "task_id": "HumanEval/115", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "is_solved": true, "iteration": 5, "prompt_tokens": 4329, "completion_tokens": 482, "duration": 11.833675622940063, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) and a != b", "is_solved": false, "iteration": 5, "prompt_tokens": 4043, "completion_tokens": 477, "duration": 15.219008922576904, "task_id": "HumanEval/154", "result": "failed: test #1", "passed": false}
{"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n\n    if isinstance(a, str) and ',' in a:\n        a = float(a.replace(',', '.'))\n    elif isinstance(a, str):\n        a = float(a)\n\n    if isinstance(b, str) and ',' in b:\n        b = float(b.replace(',', '.'))\n    elif isinstance(b, str):\n        b = float(b)\n\n    if type(a) == type(b):\n        return a if a > b else b", "is_solved": false, "iteration": 5, "prompt_tokens": 4893, "completion_tokens": 808, "duration": 19.44248080253601, "task_id": "HumanEval/137", "result": "failed: ", "passed": false}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.rstrip()\n    if not txt:\n        return False\n    if txt[-1].isalpha() and (len(txt) < 2 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 5060, "completion_tokens": 662, "duration": 18.595244646072388, "task_id": "HumanEval/134", "result": "failed: ", "passed": false}
{"generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        num_str = str(abs(num))\n        return sum(int(digit) for digit in num_str)\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 6189, "completion_tokens": 598, "duration": 15.268572807312012, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def can_arrange(arr):\n    disorder_index = -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return disorder_index", "is_solved": false, "iteration": 5, "prompt_tokens": 3978, "completion_tokens": 581, "duration": 16.839702367782593, "task_id": "HumanEval/135", "result": "failed: ", "passed": false}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1) if lst[i] != lst[i+1])", "is_solved": false, "iteration": 5, "prompt_tokens": 6903, "completion_tokens": 631, "duration": 18.325111389160156, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 5 (good for debugging!)", "passed": false}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 7012, "completion_tokens": 696, "duration": 15.512869358062744, "task_id": "HumanEval/142", "result": "failed: ", "passed": false}
{"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n                consecutive_spaces = 0\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            consecutive_spaces = 0\n    return ''.join(result)", "is_solved": false, "iteration": 5, "prompt_tokens": 4495, "completion_tokens": 792, "duration": 19.309696912765503, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"generated_code": "def match_parens(lst):\n    open_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count == 0:\n                    return 'No'\n                open_count -= 1\n    return 'Yes' if open_count == 0 else 'No'", "is_solved": false, "iteration": 5, "prompt_tokens": 5806, "completion_tokens": 751, "duration": 18.12383460998535, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    start, end = sorted([a, b])\n    return [i for i in range(start, end + 1) if i % 2 == 0]", "is_solved": false, "iteration": 5, "prompt_tokens": 4317, "completion_tokens": 589, "duration": 18.114527463912964, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if n - i >= 2 and n - i <= n and (n - i) % 2 == 0:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 5, "prompt_tokens": 4267, "completion_tokens": 782, "duration": 21.12199878692627, "task_id": "HumanEval/138", "result": "failed: ", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        current_word = ''\n        words = []\n        for char in txt:\n            if char.islower() and ord(char) % 2 != 0:\n                current_word += char\n            else:\n                if current_word:\n                    words.append(current_word)\n                    current_word = ''\n        if current_word:\n            words.append(current_word)\n        return words", "is_solved": false, "iteration": 5, "prompt_tokens": 4595, "completion_tokens": 685, "duration": 18.88982653617859, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    \n    sequence = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            next_element = 1 + i // 2\n        else:\n            next_element = sequence[-1] + sequence[-2] + sequence[-3]\n        sequence.append(next_element)\n    \n    return sequence", "is_solved": false, "iteration": 5, "prompt_tokens": 8897, "completion_tokens": 996, "duration": 24.496535301208496, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > 0:\n            open_brackets -= 1\n    \n    return open_brackets < len(string) and open_brackets > 0", "is_solved": false, "iteration": 5, "prompt_tokens": 6400, "completion_tokens": 1208, "duration": 27.904012203216553, "task_id": "HumanEval/132", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": false, "iteration": 5, "prompt_tokens": 5849, "completion_tokens": 996, "duration": 20.19240140914917, "task_id": "HumanEval/148", "result": "failed: Fourth test error: ('Uranus', 'Saturn', 'Jupiter', 'Mars', 'Earth')", "passed": false}
{"generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 7977, "completion_tokens": 1292, "duration": 25.94861388206482, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "import heapq\n\ndef minPath(grid, k):\n    n = len(grid)\n    \n    min_heap = [(grid[0][0], 0, 0)]\n    seen = set((0, 0))\n    \n    path = []\n    while k > 0:\n        val, i, j = heapq.heappop(min_heap)\n        path.append(val)\n        \n        for x, y in [(i+1, j), (i, j+1)]:\n            if 0 <= x < n and 0 <= y < n and (x, y) not in seen:\n                heapq.heappush(min_heap, (grid[x][y], x, y))\n                seen.add((x, y))\n        \n        k -= 1\n    \n    return path", "is_solved": false, "iteration": 5, "prompt_tokens": 14485, "completion_tokens": 1819, "duration": 33.42364716529846, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)", "is_solved": true, "iteration": 1, "prompt_tokens": 780, "completion_tokens": 123, "duration": 5.9281816482543945, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n**2", "is_solved": true, "iteration": 2, "prompt_tokens": 1645, "completion_tokens": 172, "duration": 8.214130640029907, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        prod = 1\n        for num in numbers:\n            prod *= num\n        return sum(numbers), prod\n\n# Test cases\nprint(sum_product([]) == (0, 1))\nprint(sum_product([1, 2, 3, 4]) == (10, 24))\nprint(sum_product([100, 0]) == (100, 0))", "is_solved": true, "iteration": 1, "prompt_tokens": 1065, "completion_tokens": 306, "duration": 8.730359315872192, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def sort_third(l: list):\n    sorted_values = sorted([l[i] for i in range(0, len(l), 3)])\n    result = l.copy()\n    for i, v in zip(range(0, len(l), 3), sorted_values):\n        result[i] = v\n    return result", "is_solved": true, "iteration": 2, "prompt_tokens": 3141, "completion_tokens": 343, "duration": 10.01429557800293, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    if base < 2 or base > 10:\n        return \"Invalid base. Base should be between 2 and 10.\"\n    \n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x:\n        result = str(x % base) + result\n        x //= base\n        \n    return result", "is_solved": true, "iteration": 2, "prompt_tokens": 1944, "completion_tokens": 394, "duration": 13.022531270980835, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    from collections import Counter\n    return Counter(s0) == Counter(s1)", "is_solved": false, "iteration": 5, "prompt_tokens": 4354, "completion_tokens": 465, "duration": 15.302159070968628, "task_id": "HumanEval/54", "result": "failed: ", "passed": false}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            if string == string[::-1]:  # Check if the string is already a palindrome\n                return string\n            return string + string[i-1::-1]\n\n    return string + string[:-1][::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 4270, "completion_tokens": 724, "duration": 16.898178100585938, "task_id": "HumanEval/10", "result": "failed: ", "passed": false}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 4426, "completion_tokens": 794, "duration": 18.503695249557495, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def sort_even(l: list):\n    even_values = sorted([x for x in l[::2] if x % 2 == 0], reverse=True)\n    result = [val if val % 2 != 0 else even_values.pop() for val in l]\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 5098, "completion_tokens": 698, "duration": 16.57929229736328, "task_id": "HumanEval/37", "result": "failed: pop from empty list", "passed": false}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "task_id": "HumanEval/83", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1303, "completion_tokens": 147, "duration": 6.025141000747681, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1212, "completion_tokens": 199, "duration": 6.975388288497925, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    current_stones = n\n    for i in range(1, n):\n        if current_stones % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n        stones.append(current_stones)\n    return stones", "is_solved": true, "iteration": 1, "prompt_tokens": 1065, "completion_tokens": 191, "duration": 8.976945877075195, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    all_lowercase_keys = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_uppercase_keys = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return all_lowercase_keys or all_uppercase_keys", "is_solved": true, "iteration": 1, "prompt_tokens": 1180, "completion_tokens": 195, "duration": 9.026175498962402, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for char in s:\n        if char.lower() in vowels or (char.lower() == 'y' and s.index(char) == len(s) - 1):\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 1, "prompt_tokens": 1025, "completion_tokens": 219, "duration": 8.284993171691895, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    def total_chars(lst):\n        return sum(len(word) for word in lst)\n\n    total_chars_lst1 = total_chars(lst1)\n    total_chars_lst2 = total_chars(lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 2, "prompt_tokens": 2358, "completion_tokens": 302, "duration": 11.804434299468994, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    return round(abs(a)**(1/3))**3 == abs(a)", "is_solved": true, "iteration": 3, "prompt_tokens": 2274, "completion_tokens": 264, "duration": 10.454793453216553, "task_id": "HumanEval/77", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    max_num = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_num = max(max_num, num)\n    return max_num", "is_solved": true, "iteration": 3, "prompt_tokens": 9268, "completion_tokens": 391, "duration": 11.613851070404053, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] and s[i+1] != s[i+2] and s[i] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": true, "iteration": 5, "prompt_tokens": 4102, "completion_tokens": 612, "duration": 13.404539108276367, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa > 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": true, "iteration": 3, "prompt_tokens": 4552, "completion_tokens": 1099, "duration": 23.856935262680054, "task_id": "HumanEval/81", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) or any(num % 2 == 0 for num in lst2) and all(num % 2 != 1 for num in lst1) else \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 5905, "completion_tokens": 741, "duration": 18.32997488975525, "task_id": "HumanEval/110", "result": "failed: ", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(d) % 2 != 0 for d in s)} in the str{i+1} of the input.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 5514, "completion_tokens": 642, "duration": 15.796000242233276, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    else:\n        shifted_str = x_str[-shift:] + x_str[:-shift]\n        return shifted_str.lstrip('0') if x_str[0] == '0' else shifted_str", "is_solved": false, "iteration": 5, "prompt_tokens": 3777, "completion_tokens": 716, "duration": 20.52784252166748, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def count_nums(arr):\n    def has_nonzero_digit_sum(num):\n        if num == 0:\n            return False\n        num = abs(num)\n        return sum(int(d) for d in str(num)) > 0\n\n    return sum(1 for num in arr if has_nonzero_digit_sum(num))", "is_solved": false, "iteration": 5, "prompt_tokens": 5136, "completion_tokens": 725, "duration": 17.730344533920288, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char.lower()) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 4727, "completion_tokens": 801, "duration": 20.250982522964478, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def prime_factors(n):\n        factors = []\n        i = 2\n        while i * i <= n:\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n            else:\n                i += 1\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) >= 3 and all(is_prime(f) for f in factors)", "is_solved": false, "iteration": 5, "prompt_tokens": 5472, "completion_tokens": 1301, "duration": 29.129000902175903, "task_id": "HumanEval/75", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042, "task_id": "HumanEval/149", "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "is_solved": true, "iteration": 1, "prompt_tokens": 993, "completion_tokens": 133, "duration": 3.7148854732513428, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i\n    return index", "is_solved": true, "iteration": 2, "prompt_tokens": 1719, "completion_tokens": 269, "duration": 9.776894092559814, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    prod = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            prod *= int(digit)\n    return prod if has_odd else 0", "is_solved": true, "iteration": 2, "prompt_tokens": 1476, "completion_tokens": 252, "duration": 5.880263090133667, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "def max_fill(grid, capacity):\n    total_buckets = 0\n    for row in grid:\n        water_level = 0\n        for well in row:\n            if well:\n                water_level += 1\n                if water_level == capacity:\n                    total_buckets += 1\n                    water_level = 0\n        if water_level > 0:\n            total_buckets += 1\n    return total_buckets", "is_solved": true, "iteration": 2, "prompt_tokens": 2702, "completion_tokens": 281, "duration": 9.108840465545654, "task_id": "HumanEval/115", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if x < 100)", "is_solved": true, "iteration": 3, "prompt_tokens": 2679, "completion_tokens": 288, "duration": 10.332388639450073, "task_id": "HumanEval/122", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple([planet for planet in planets if start_idx < planets.index(planet) < end_idx])\n    else:\n        return tuple([planet for planet in planets if end_idx < planets.index(planet) < start_idx])", "is_solved": true, "iteration": 2, "prompt_tokens": 2474, "completion_tokens": 484, "duration": 11.826380491256714, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": false, "iteration": 5, "prompt_tokens": 7013, "completion_tokens": 407, "duration": 43.63029074668884, "task_id": "HumanEval/120", "result": "failed: ", "passed": false}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 3, "prompt_tokens": 4179, "completion_tokens": 350, "duration": 9.252940654754639, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def is_sorted(lst):\n    return sorted(set(lst)) == lst and all(x <= y for x, y in zip(lst, lst[1:]) if x != y)", "is_solved": false, "iteration": 5, "prompt_tokens": 6434, "completion_tokens": 540, "duration": 15.276320695877075, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 6037, "completion_tokens": 516, "duration": 14.136177778244019, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= 2:\n            count += 1\n            if count == 4:\n                return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 4264, "completion_tokens": 773, "duration": 20.056434154510498, "task_id": "HumanEval/138", "result": "failed: ", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "is_solved": false, "iteration": 5, "prompt_tokens": 4507, "completion_tokens": 602, "duration": 15.148884773254395, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    txt = txt.rstrip()\n    if txt and txt[-1].isalpha() and not txt[-1].isalnum():\n        return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 5072, "completion_tokens": 646, "duration": 17.899537086486816, "task_id": "HumanEval/134", "result": "failed: ", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or len(a) > len(b) and b in (a + a)", "is_solved": false, "iteration": 5, "prompt_tokens": 4095, "completion_tokens": 557, "duration": 16.938705682754517, "task_id": "HumanEval/154", "result": "failed: test #3", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if any(digit in '02468' for digit in str(i))]", "is_solved": false, "iteration": 5, "prompt_tokens": 4356, "completion_tokens": 628, "duration": 17.281538248062134, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    \n    return bool(stack)", "is_solved": false, "iteration": 5, "prompt_tokens": 5658, "completion_tokens": 822, "duration": 20.852878093719482, "task_id": "HumanEval/132", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            consecutive_spaces = 0\n\n    return ''.join(result).replace('_'*3, '-')", "is_solved": false, "iteration": 5, "prompt_tokens": 4495, "completion_tokens": 804, "duration": 20.820327758789062, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"generated_code": "def match_parens(lst):\n    def is_good_string(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    return 'Yes' if is_good_string(lst[0]) or is_good_string(lst[1]) else 'No'", "is_solved": false, "iteration": 5, "prompt_tokens": 6016, "completion_tokens": 845, "duration": 19.630199432373047, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    \n    sequence = [0, 1, 3]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n    return sequence", "is_solved": false, "iteration": 5, "prompt_tokens": 8805, "completion_tokens": 895, "duration": 22.8727810382843, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    \n    def parse_real_number(val):\n        try:\n            if isinstance(val, (int, float)):\n                return val\n            else:\n                return float(val.replace(',', '.'))\n        except ValueError:\n            return val\n\n    a_num = parse_real_number(a)\n    b_num = parse_real_number(b)\n    \n    return a_num if a_num > b_num else b_num", "is_solved": false, "iteration": 5, "prompt_tokens": 4935, "completion_tokens": 812, "duration": 18.645604610443115, "task_id": "HumanEval/137", "result": "failed: ", "passed": false}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(abs(n) ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(abs(length)):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 7943, "completion_tokens": 1255, "duration": 26.565859079360962, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path, visited):\n        nonlocal min_path\n        if path_len == k:\n            if not min_path or path < min_path:\n                min_path = path[:]\n            return\n\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                dfs(nx, ny, path_len + 1, path + [grid[nx][ny]], visited)  # Append the current cell value to the path\n                visited[nx][ny] = False\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    min_path = None  # Initialize min_path to None\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            dfs(i, j, 1, [grid[i][j]], visited)  # Start with the current cell value as the initial path\n            visited[i][j] = False\n\n    return min_path", "is_solved": false, "iteration": 5, "prompt_tokens": 15190, "completion_tokens": 2182, "duration": 40.974868059158325, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    \n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 987, "completion_tokens": 143, "duration": 6.763739824295044, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list):\n    even_indices = sorted([i for i in range(len(l)) if i % 2 == 0], key=lambda x: l[x])\n    sorted_even_values = [l[i] for i in even_indices]\n    result = [val if idx % 2 != 0 else sorted_even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1126, "completion_tokens": 194, "duration": 6.465117454528809, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    \n    product = 1\n    has_zero = False\n    \n    for num in numbers:\n        if num == 0:\n            has_zero = True\n        else:\n            product *= num\n    \n    if has_zero:\n        return sum(numbers), 0\n    else:\n        return sum(numbers), product", "is_solved": true, "iteration": 2, "prompt_tokens": 1867, "completion_tokens": 402, "duration": 10.054561614990234, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n**2", "is_solved": true, "iteration": 4, "prompt_tokens": 3104, "completion_tokens": 354, "duration": 12.926730632781982, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    longest_str = next(s for s in strings if len(s) == max_len)\n    return longest_str", "is_solved": true, "iteration": 4, "prompt_tokens": 2782, "completion_tokens": 458, "duration": 11.958103656768799, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "is_solved": false, "iteration": 5, "prompt_tokens": 4374, "completion_tokens": 469, "duration": 15.24012279510498, "task_id": "HumanEval/54", "result": "failed: ", "passed": false}
{"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and '7' in str(i))", "is_solved": false, "iteration": 5, "prompt_tokens": 4298, "completion_tokens": 663, "duration": 21.913206815719604, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    if string == '' or is_palindrome(string):\n        return string\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]\n    \n    return string + string[:-1][::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 4423, "completion_tokens": 855, "duration": 21.28609609603882, "task_id": "HumanEval/10", "result": "failed: ", "passed": false}
{"generated_code": "def sort_third(l: list):\n    third_indices = [i for i in range(2, len(l), 3) if i < len(l)]\n    sorted_third_elements = sorted([l[i] for i in third_indices])\n    result = l.copy()\n    for i, idx in enumerate(sorted(third_indices)):\n        result[idx] = sorted_third_elements[i]\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 7545, "completion_tokens": 770, "duration": 20.79561424255371, "task_id": "HumanEval/33", "result": "failed: ", "passed": false}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "task_id": "HumanEval/83", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1209, "completion_tokens": 196, "duration": 6.980730295181274, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    max_num = -1\n    for num, freq in counts.items():\n        if num > max_num and freq >= num:\n            max_num = num\n    return max_num", "is_solved": true, "iteration": 1, "prompt_tokens": 3135, "completion_tokens": 163, "duration": 6.410593271255493, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 == 0) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1341, "completion_tokens": 163, "duration": 6.1690919399261475, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array:\n        return array\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1298, "completion_tokens": 142, "duration": 6.41082501411438, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i, char in enumerate(s):\n        if char.lower() in vowels or (char.lower() == 'y' and i == len(s) - 1):\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 2, "prompt_tokens": 1810, "completion_tokens": 332, "duration": 10.123389720916748, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1", "is_solved": true, "iteration": 2, "prompt_tokens": 2404, "completion_tokens": 312, "duration": 11.404965162277222, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) == 3 and all(is_prime(f) for f in factors)", "is_solved": true, "iteration": 3, "prompt_tokens": 2973, "completion_tokens": 621, "duration": 20.097506523132324, "task_id": "HumanEval/75", "result": "passed", "passed": true}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    lower_keys = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    upper_keys = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return lower_keys or upper_keys and not (lower_keys and upper_keys)", "is_solved": true, "iteration": 5, "prompt_tokens": 5058, "completion_tokens": 703, "duration": 20.81762170791626, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 1)\n    return stones", "is_solved": false, "iteration": 5, "prompt_tokens": 4712, "completion_tokens": 685, "duration": 19.16151762008667, "task_id": "HumanEval/100", "result": "failed: Test 3", "passed": false}
{"generated_code": "def iscube(a):\n    return a >= 0 and (a**(1/3)).is_integer()", "is_solved": false, "iteration": 5, "prompt_tokens": 3692, "completion_tokens": 386, "duration": 13.53933072090149, "task_id": "HumanEval/77", "result": "failed: Third test error: False", "passed": false}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        n = abs(n)\n        return sum(int(digit) for digit in str(n))\n\n    return sum(sum_of_digits(num) > 1 for num in arr)", "is_solved": false, "iteration": 5, "prompt_tokens": 5098, "completion_tokens": 674, "duration": 18.50595235824585, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] for i in range(len(s)-2))", "is_solved": false, "iteration": 5, "prompt_tokens": 4034, "completion_tokens": 560, "duration": 13.910990476608276, "task_id": "HumanEval/80", "result": "failed: xyy", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in string)} in the string {i+1} of the input.\" for i, string in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 5614, "completion_tokens": 716, "duration": 16.94633150100708, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str", "is_solved": false, "iteration": 5, "prompt_tokens": 3814, "completion_tokens": 685, "duration": 22.458824396133423, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char.lower())+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += chr((ord(char) + 3 - ord('A')) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 4492, "completion_tokens": 770, "duration": 16.80533003807068, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa >= 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 5, "prompt_tokens": 7340, "completion_tokens": 1631, "duration": 32.318363666534424, "task_id": "HumanEval/81", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042, "task_id": "HumanEval/149", "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "is_solved": true, "iteration": 1, "prompt_tokens": 1006, "completion_tokens": 146, "duration": 3.6264116764068604, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    prod = 1\n    has_odd_digit = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd_digit = True\n            prod *= int(digit)\n    return prod if has_odd_digit else 0", "is_solved": true, "iteration": 1, "prompt_tokens": 839, "completion_tokens": 201, "duration": 4.629025936126709, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 2, "prompt_tokens": 2861, "completion_tokens": 168, "duration": 6.691577196121216, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n > 7 and n % 2 == 0", "is_solved": true, "iteration": 4, "prompt_tokens": 3454, "completion_tokens": 593, "duration": 16.676418781280518, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i\n    return index - 1", "is_solved": false, "iteration": 5, "prompt_tokens": 3976, "completion_tokens": 562, "duration": 17.112586736679077, "task_id": "HumanEval/135", "result": "failed: ", "passed": false}
{"generated_code": "def add_elements(arr, k):\n    return sum([x for x in arr[:k] if 10 <= x <= 99])", "is_solved": false, "iteration": 5, "prompt_tokens": 4333, "completion_tokens": 466, "duration": 13.21686315536499, "task_id": "HumanEval/122", "result": "failed: ", "passed": false}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if last_char.isalpha() and (len(txt.strip()) == 1 or not txt.strip()[-2].isalpha()):\n        return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 5022, "completion_tokens": 639, "duration": 17.624372720718384, "task_id": "HumanEval/134", "result": "failed: ", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 5, "prompt_tokens": 4289, "completion_tokens": 562, "duration": 16.361597299575806, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    return b in (a + a) or b in (a * 2) or b[::-1] in (a + a) or b[::-1] in (a * 2)", "is_solved": false, "iteration": 5, "prompt_tokens": 4167, "completion_tokens": 603, "duration": 16.106892108917236, "task_id": "HumanEval/154", "result": "failed: test #1", "passed": false}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 6979, "completion_tokens": 687, "duration": 14.659402847290039, "task_id": "HumanEval/142", "result": "failed: ", "passed": false}
{"generated_code": "def is_sorted(lst):\n    return lst == sorted(lst) and all(lst.count(num) <= 1 for num in lst)", "is_solved": false, "iteration": 5, "prompt_tokens": 6405, "completion_tokens": 528, "duration": 17.02967143058777, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n    \n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 6069, "completion_tokens": 535, "duration": 15.679527759552002, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    max_water = max(max(row) for row in grid)\n    buckets_needed = math.ceil(max_water / capacity)\n    return buckets_needed", "is_solved": false, "iteration": 5, "prompt_tokens": 6102, "completion_tokens": 571, "duration": 16.3619601726532, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def match_parens(lst):\n    s = ''.join(lst)\n    \n    open_parens = 0\n    for char in s:\n        if char == '(':\n            open_parens += 1\n        elif char == ')':\n            if open_parens == 0:\n                return 'No'\n            open_parens -= 1\n    \n    return 'Yes' if open_parens == 0 else 'No'", "is_solved": false, "iteration": 5, "prompt_tokens": 5923, "completion_tokens": 841, "duration": 19.772685289382935, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def compare_one(a, b):\n    def convert_to_float(value):\n        try:\n            return float(value.replace(',', '.'))\n        except ValueError:\n            return value\n\n    a = convert_to_float(a) if isinstance(a, str) else a\n    b = convert_to_float(b) if isinstance(b, str) else b\n\n    if a == b:\n        return None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    else:\n        return b if isinstance(b, (int, float)) else a", "is_solved": false, "iteration": 5, "prompt_tokens": 5054, "completion_tokens": 910, "duration": 20.382969856262207, "task_id": "HumanEval/137", "result": "failed: ", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        words = []\n        current_word = ''\n        for char in txt:\n            if char.islower() and ord(char) % 2 != 0:\n                current_word += char\n            else:\n                if current_word:\n                    words.append(current_word)\n                    current_word = ''\n                if char.islower() and ord(char) % 2 != 0:\n                    current_word += char\n        if current_word:\n            words.append(current_word)\n        \n        if not words:\n            return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return words", "is_solved": false, "iteration": 5, "prompt_tokens": 5166, "completion_tokens": 1031, "duration": 22.370410919189453, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    \n    sequence = [0, 1, 3]  # Initialize the sequence with the first three values\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n    \n    return sequence", "is_solved": false, "iteration": 5, "prompt_tokens": 8993, "completion_tokens": 1044, "duration": 26.093642950057983, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[start_idx+1:] + planets[:end_idx])", "is_solved": false, "iteration": 5, "prompt_tokens": 5810, "completion_tokens": 996, "duration": 19.49148941040039, "task_id": "HumanEval/148", "result": "failed: Second test error: ('Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')", "passed": false}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 7901, "completion_tokens": 1216, "duration": 24.21027684211731, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    opened = 0\n    \n    for char in string:\n        if char == '[':\n            opened += 1\n        elif char == ']':\n            if opened == 0:\n                return False\n            opened -= 1\n    \n    return opened != 0", "is_solved": false, "iteration": 5, "prompt_tokens": 6076, "completion_tokens": 1037, "duration": 25.181769847869873, "task_id": "HumanEval/132", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if new_path and (not min_path or new_path < min_path):\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            result = dfs(i, j, 1, [grid[i][j]])\n            visited[i][j] = False\n            if result:\n                return result\n\n    return None  # Change to return None", "is_solved": false, "iteration": 5, "prompt_tokens": 15315, "completion_tokens": 2230, "duration": 40.874465227127075, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def fix_spaces(text):\n    updated_text = []\n    consecutive_spaces = 0\n\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                updated_text.pop()\n                updated_text.append('-')\n            else:\n                updated_text.append('_')\n        else:\n            consecutive_spaces = 0\n            updated_text.append(c)\n\n    return ''.join(updated_text)", "is_solved": false, "iteration": 5, "prompt_tokens": 4836, "completion_tokens": 1016, "duration": 24.595417261123657, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784, "task_id": "HumanEval/32", "result": "failed: name 'poly' is not defined", "passed": false}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "task_id": "HumanEval/38", "result": "passed", "passed": true}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379, "task_id": "HumanEval/50", "result": "passed", "passed": true}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int):\n    return n**2", "is_solved": true, "iteration": 1, "prompt_tokens": 943, "completion_tokens": 118, "duration": 6.803693532943726, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def sort_third(l: list):\n    sorted_values = sorted([l[i] for i in range(0, len(l), 3)])\n    result = l.copy()\n    result[::3] = sorted_values\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1669, "completion_tokens": 188, "duration": 6.8375890254974365, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x:\n        result = str(x % base) + result\n        x //= base\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1013, "completion_tokens": 165, "duration": 7.298094272613525, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n\n    prod = 1\n    for num in numbers:\n        prod *= num\n\n    return sum(numbers), prod if 0 not in numbers else 0", "is_solved": true, "iteration": 2, "prompt_tokens": 1844, "completion_tokens": 353, "duration": 8.968103170394897, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 3, "prompt_tokens": 2688, "completion_tokens": 277, "duration": 11.457684516906738, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == max_length]\n    return longest_strings[0]", "is_solved": true, "iteration": 3, "prompt_tokens": 2194, "completion_tokens": 397, "duration": 11.097129821777344, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    sorted_even_vals = sorted([l[i] for i in even_indices])\n    result = [val if idx % 2 != 0 else sorted_even_vals.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iteration": 3, "prompt_tokens": 3128, "completion_tokens": 462, "duration": 11.906111478805542, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 7 == 0) and ('3' in str(i) or '5' in str(i)):\n            count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 4367, "completion_tokens": 716, "duration": 18.558611392974854, "task_id": "HumanEval/36", "result": "failed: ", "passed": false}
{"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            palindrome_suffix = string[i:]\n            return string + palindrome_suffix[:-1][::-1]\n\n    return string + string[:-1][::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 4284, "completion_tokens": 749, "duration": 17.89856243133545, "task_id": "HumanEval/10", "result": "failed: ", "passed": false}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "task_id": "HumanEval/83", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1313, "completion_tokens": 157, "duration": 6.004330635070801, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 == 0) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1356, "completion_tokens": 178, "duration": 6.021646738052368, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    keys = dict.keys()\n    if all(isinstance(key, str) for key in keys):\n        lowercase_keys = all(key.islower() for key in keys)\n        uppercase_keys = all(key.isupper() for key in keys)\n        return lowercase_keys or uppercase_keys\n    else:\n        return False", "is_solved": true, "iteration": 1, "prompt_tokens": 1156, "completion_tokens": 180, "duration": 8.672712087631226, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    elif sum1 > sum2:\n        return lst2\n    else:\n        return lst1", "is_solved": true, "iteration": 1, "prompt_tokens": 1317, "completion_tokens": 197, "duration": 9.186126947402954, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": true, "iteration": 1, "prompt_tokens": 950, "completion_tokens": 171, "duration": 3.8294570446014404, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    if not lst:\n        return {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1239, "completion_tokens": 226, "duration": 7.086573600769043, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    count = 0\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    \n    for i, char in enumerate(s):\n        if char.lower() in vowels or (char.lower() == 'y' and i == len(s) - 1):\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 2, "prompt_tokens": 1795, "completion_tokens": 318, "duration": 10.168331861495972, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "is_solved": true, "iteration": 2, "prompt_tokens": 1979, "completion_tokens": 310, "duration": 11.571051120758057, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    return a >= 0 and round(a**(1/3))**3 == a", "is_solved": false, "iteration": 5, "prompt_tokens": 3657, "completion_tokens": 393, "duration": 14.46077561378479, "task_id": "HumanEval/77", "result": "failed: Third test error: False", "passed": false}
{"generated_code": "from collections import Counter\n\ndef search(lst):\n    counter = Counter(lst)\n    max_freq_value = -1\n    for num, freq in counter.items():\n        if num == freq and num > max_freq_value:\n            max_freq_value = num\n    return max_freq_value", "is_solved": false, "iteration": 5, "prompt_tokens": 15369, "completion_tokens": 621, "duration": 18.074674606323242, "task_id": "HumanEval/69", "result": "failed: ", "passed": false}
{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa > 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": true, "iteration": 4, "prompt_tokens": 5950, "completion_tokens": 1375, "duration": 29.39318037033081, "task_id": "HumanEval/81", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        while a % i == 0 and is_prime(i):\n            a //= i\n            count += 1\n    \n    return count == 3 and is_prime(a)", "is_solved": false, "iteration": 5, "prompt_tokens": 5056, "completion_tokens": 1044, "duration": 24.826963186264038, "task_id": "HumanEval/75", "result": "failed: ", "passed": false}
{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in num)}n the str{lst.index(num)+1}ng {num} of the {lst.index(num)+1}nput.\" for num in lst]", "is_solved": false, "iteration": 5, "prompt_tokens": 5541, "completion_tokens": 658, "duration": 18.21769404411316, "task_id": "HumanEval/113", "result": "failed: Test 1", "passed": false}
{"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num == 0:\n            count += 1\n        else:\n            all_nonzero_digits = all(int(digit) != 0 for digit in str(abs(num)) if digit.isdigit())\n            if all_nonzero_digits:\n                count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 5089, "completion_tokens": 703, "duration": 17.2307608127594, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    else:\n        if shift <= len(x_str) // 2:\n            return x_str[-shift:] + x_str[:-shift]\n        else:\n            return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str) // 2 else x_str[::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 3825, "completion_tokens": 770, "duration": 23.522828102111816, "task_id": "HumanEval/65", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr(ord(char) + 2)\n                if encoded_char.lower() in vowels:\n                    encoded_char = chr(ord(char) + 2 - 26)\n                result += encoded_char.upper() if char.isupper() else encoded_char.lower()\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 4728, "completion_tokens": 868, "duration": 19.845379114151, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042, "task_id": "HumanEval/149", "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 2, "prompt_tokens": 2856, "completion_tokens": 163, "duration": 6.6252570152282715, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = 0\n    for well in wells:\n        buckets_needed += math.ceil(well / capacity)\n    return buckets_needed", "is_solved": true, "iteration": 2, "prompt_tokens": 2718, "completion_tokens": 271, "duration": 8.23015832901001, "task_id": "HumanEval/115", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    prod = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n            has_odd = True\n    return prod if has_odd else 0", "is_solved": true, "iteration": 2, "prompt_tokens": 1498, "completion_tokens": 274, "duration": 6.04761004447937, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": true, "iteration": 2, "prompt_tokens": 2033, "completion_tokens": 221, "duration": 6.797186374664307, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 6982, "completion_tokens": 702, "duration": 15.493690490722656, "task_id": "HumanEval/142", "result": "failed: ", "passed": false}
{"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr if 10 <= abs(num) < 100)", "is_solved": false, "iteration": 5, "prompt_tokens": 4460, "completion_tokens": 519, "duration": 14.430793523788452, "task_id": "HumanEval/122", "result": "failed: ", "passed": false}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt.split()) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 5162, "completion_tokens": 681, "duration": 19.759185552597046, "task_id": "HumanEval/134", "result": "failed: ", "passed": false}
{"generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 6143, "completion_tokens": 581, "duration": 15.1612708568573, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": false, "iteration": 5, "prompt_tokens": 4332, "completion_tokens": 607, "duration": 17.35875129699707, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def is_sorted(lst):\n    return lst == sorted(set(lst)) and all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))", "is_solved": false, "iteration": 5, "prompt_tokens": 6576, "completion_tokens": 635, "duration": 17.931645393371582, "task_id": "HumanEval/126", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a)", "is_solved": false, "iteration": 5, "prompt_tokens": 4133, "completion_tokens": 543, "duration": 16.140177011489868, "task_id": "HumanEval/154", "result": "failed: test #1", "passed": false}
{"generated_code": "def match_parens(lst):\n    s = lst[0] + lst[1]\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack and stack[-1] == '(':\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes'", "is_solved": false, "iteration": 5, "prompt_tokens": 5927, "completion_tokens": 790, "duration": 19.81399369239807, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n    \n    return len(stack) < len(string) and len(stack) > 0", "is_solved": false, "iteration": 5, "prompt_tokens": 5597, "completion_tokens": 882, "duration": 21.641748428344727, "task_id": "HumanEval/132", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) >= i:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 5, "prompt_tokens": 4245, "completion_tokens": 763, "duration": 19.452314853668213, "task_id": "HumanEval/138", "result": "failed: ", "passed": false}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count if count > 0 else 0", "is_solved": false, "iteration": 5, "prompt_tokens": 4709, "completion_tokens": 719, "duration": 17.37571120262146, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n                consecutive_spaces = 0\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            consecutive_spaces = 0\n    return ('_' if text[0] == ' ' else '') + ''.join(result).lstrip('_')", "is_solved": false, "iteration": 5, "prompt_tokens": 4513, "completion_tokens": 841, "duration": 20.988615036010742, "task_id": "HumanEval/140", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"generated_code": "def tri(n):\n    sequence = []\n    for i in range(n + 1):\n        if i == 0:\n            sequence.append(0)\n        elif i == 1:\n            sequence.append(3)\n        elif i == 2:\n            sequence.append(1)\n        else:\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n    return sequence", "is_solved": false, "iteration": 5, "prompt_tokens": 8891, "completion_tokens": 949, "duration": 23.004734992980957, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    elif start_idx > end_idx:\n        return tuple(planets[end_idx+1:start_idx][::-1])\n    else:\n        return ()", "is_solved": false, "iteration": 5, "prompt_tokens": 5852, "completion_tokens": 1037, "duration": 19.645051956176758, "task_id": "HumanEval/148", "result": "failed: Fourth test error: ('Uranus', 'Saturn', 'Jupiter', 'Mars', 'Earth')", "passed": false}
{"generated_code": "def can_arrange(arr):\n    index = -1\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n            index = i\n            if count > 1 or (i < len(arr) - 1 and arr[i+1] < arr[i-1]):\n                return -1\n    if count == 1 and arr[0] >= arr[-1]:\n        return -1\n    return index", "is_solved": false, "iteration": 5, "prompt_tokens": 4430, "completion_tokens": 895, "duration": 24.83335041999817, "task_id": "HumanEval/135", "result": "failed: ", "passed": false}
{"generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n            return b if a < b else a\n        return b if isinstance(a, str) else a\n    \n    if a == b:\n        return None\n    \n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        try:\n            return float(x)\n        except ValueError:\n            return None\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float is not None and b_float is not None:\n        if a_float > b_float:\n            return a\n        return b\n    \n    return b if a_float is None else a", "is_solved": false, "iteration": 5, "prompt_tokens": 4865, "completion_tokens": 887, "duration": 20.53434681892395, "task_id": "HumanEval/137", "result": "failed: ", "passed": false}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 7925, "completion_tokens": 1240, "duration": 26.18905019760132, "task_id": "HumanEval/127", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if new_path and (not min_path or new_path < min_path):\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    min_path = None\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            new_path = dfs(i, j, 1, [grid[i][j]])\n            if new_path and (not min_path or len(new_path) < len(min_path)):\n                min_path = new_path\n            visited[i][j] = False\n\n    return min_path if min_path else []", "is_solved": false, "iteration": 5, "prompt_tokens": 14731, "completion_tokens": 2088, "duration": 51.951733350753784, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
