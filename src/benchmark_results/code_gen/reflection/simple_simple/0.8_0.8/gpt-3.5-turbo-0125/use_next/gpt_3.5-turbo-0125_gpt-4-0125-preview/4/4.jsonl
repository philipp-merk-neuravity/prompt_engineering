{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "iteration_states": [{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117}]}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "iteration_states": [{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455}]}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "iteration_states": [{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098}]}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iterations": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "iteration_states": [{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693}]}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "iteration_states": [{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793}]}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "iteration_states": [{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222}]}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))\n\n# Test cases\nprint(sum_product([]))  # (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)", "is_solved": true, "iterations": 0, "prompt_tokens": 160, "completion_tokens": 103, "duration": 4.0435051918029785, "iteration_states": [{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))\n\n# Test cases\nprint(sum_product([]))  # (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 103, "duration": 4.0435051918029785}]}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "iteration_states": [{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928}]}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iterations": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "iteration_states": [{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049}]}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iterations": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "iteration_states": [{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785}]}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iterations": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "iteration_states": [{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287}]}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iterations": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "iteration_states": [{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146}]}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iterations": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "iteration_states": [{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464}]}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "iteration_states": [{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504}]}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iterations": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "iteration_states": [{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827}]}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iterations": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "iteration_states": [{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672}]}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iterations": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "iteration_states": [{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945}]}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iterations": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "iteration_states": [{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462}]}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iterations": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "iteration_states": [{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275}]}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iterations": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "iteration_states": [{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634}]}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iterations": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "iteration_states": [{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334}]}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iterations": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "iteration_states": [{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355}]}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iterations": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "iteration_states": [{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329}]}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iterations": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "iteration_states": [{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695}]}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iterations": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "iteration_states": [{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717}]}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iterations": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "iteration_states": [{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982}]}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248, "iteration_states": [{"generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248}]}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iterations": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "iteration_states": [{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844}]}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iterations": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "iteration_states": [{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704}]}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iterations": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "iteration_states": [{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204}]}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iterations": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "iteration_states": [{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094}]}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iterations": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "iteration_states": [{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064}]}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iterations": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "iteration_states": [{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773}]}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "iteration_states": [{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735}]}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iterations": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "iteration_states": [{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395}]}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iterations": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "iteration_states": [{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555}]}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iterations": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "iteration_states": [{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554}]}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iterations": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "iteration_states": [{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255}]}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iterations": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "iteration_states": [{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788}]}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iterations": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "iteration_states": [{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431}]}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iterations": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "iteration_states": [{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785}]}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iterations": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "iteration_states": [{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365}]}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iterations": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "iteration_states": [{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541}]}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return min(strings, key=lambda x: (-len(x), x))", "is_solved": true, "iterations": 1, "prompt_tokens": 767, "completion_tokens": 120, "duration": 5.63150691986084, "iteration_states": [{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "is_solved": false, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.525851011276245}, {"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return min(strings, key=lambda x: (-len(x), x))", "is_solved": true, "iteration": 1, "prompt_tokens": 767, "completion_tokens": 120, "duration": 5.63150691986084}]}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_values = sorted([x for x in l[::2]])\n    result = [val if idx % 2 != 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iterations": 1, "prompt_tokens": 888, "completion_tokens": 163, "duration": 5.918615818023682, "iteration_states": [{"generated_code": "def sort_even(l: list):\n    even_values = sorted([x for x in l[::2]])\n    result = [val if idx % 2 == 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.5508744716644287}, {"generated_code": "def sort_even(l: list):\n    even_values = sorted([x for x in l[::2]])\n    result = [val if idx % 2 != 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 888, "completion_tokens": 163, "duration": 5.918615818023682}]}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    def base_conversion(n, b):\n        if n == 0:\n            return '0'\n        digits = []\n        while n:\n            digits.append(str(n % b))\n            n //= b\n        return ''.join(digits[::-1])\n    \n    return base_conversion(x, base)", "is_solved": true, "iterations": 2, "prompt_tokens": 1449, "completion_tokens": 235, "duration": 8.681633949279785, "iteration_states": [{"generated_code": "def change_base(x: int, base: int):\n    return str(int(str(x), 10 if base == 10 else base))", "is_solved": false, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 32, "duration": 4.395244598388672}, {"generated_code": "def change_base(x: int, base: int):\n    return str(format(x, f'0{base}b' if base != 10 else 'd'))", "is_solved": false, "iteration": 1, "prompt_tokens": 843, "completion_tokens": 122, "duration": 6.4545605182647705}, {"generated_code": "def change_base(x: int, base: int):\n    def base_conversion(n, b):\n        if n == 0:\n            return '0'\n        digits = []\n        while n:\n            digits.append(str(n % b))\n            n //= b\n        return ''.join(digits[::-1])\n    \n    return base_conversion(x, base)", "is_solved": true, "iteration": 2, "prompt_tokens": 1449, "completion_tokens": 235, "duration": 8.681633949279785}]}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iterations": 3, "prompt_tokens": 2292, "completion_tokens": 304, "duration": 11.573330163955688, "iteration_states": [{"generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "is_solved": false, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 28, "duration": 5.186999797821045}, {"generated_code": "from collections import Counter\n\ndef same_chars(s0: str, s1: str):\n    return Counter(s0) == Counter(s1)", "is_solved": false, "iteration": 1, "prompt_tokens": 896, "completion_tokens": 134, "duration": 7.412952184677124}, {"generated_code": "def same_chars(s0: str, s1: str):\n    from collections import Counter\n    return Counter(s0) == Counter(s1)", "is_solved": false, "iteration": 2, "prompt_tokens": 1586, "completion_tokens": 215, "duration": 9.450711488723755}, {"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 3, "prompt_tokens": 2292, "completion_tokens": 304, "duration": 11.573330163955688}]}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "iteration_states": [{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107}]}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iterations": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "iteration_states": [{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684}]}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iterations": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "iteration_states": [{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214}]}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iterations": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "iteration_states": [{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987}]}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iterations": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "iteration_states": [{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924}]}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iterations": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "iteration_states": [{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926}]}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iterations": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "iteration_states": [{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723}]}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iterations": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "iteration_states": [{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351}]}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iterations": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "iteration_states": [{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045}]}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iterations": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "iteration_states": [{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304}]}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iterations": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "iteration_states": [{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392}]}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "iteration_states": [{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021}]}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iterations": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "iteration_states": [{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145}]}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iterations": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "iteration_states": [{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395}]}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iterations": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "iteration_states": [{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664}]}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iterations": 0, "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516, "iteration_states": [{"generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516}]}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iterations": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "iteration_states": [{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}]}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "iteration_states": [{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355}]}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iterations": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "iteration_states": [{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805}]}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": true, "iterations": 0, "prompt_tokens": 171, "completion_tokens": 47, "duration": 1.0319738388061523, "iteration_states": [{"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 47, "duration": 1.0319738388061523}]}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iterations": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "iteration_states": [{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783}]}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iterations": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "iteration_states": [{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475}]}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iterations": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "iteration_states": [{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296}]}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "iteration_states": [{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721}]}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "iteration_states": [{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727}]}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "iteration_states": [{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403}]}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "iteration_states": [{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297}]}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iterations": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "iteration_states": [{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802}]}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225, "iteration_states": [{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225}]}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iterations": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "iteration_states": [{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723}]}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iterations": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "iteration_states": [{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731}]}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iterations": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "iteration_states": [{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601}]}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iterations": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "iteration_states": [{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994}]}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iterations": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "iteration_states": [{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414}]}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iterations": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "iteration_states": [{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715}]}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iterations": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "iteration_states": [{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159}]}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (round(a**(1/3)))**3 == a", "is_solved": true, "iterations": 1, "prompt_tokens": 758, "completion_tokens": 100, "duration": 6.543181896209717, "iteration_states": [{"generated_code": "def iscube(a):\n    return int(a**(1/3))**3 == a", "is_solved": false, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 23, "duration": 4.322655439376831}, {"generated_code": "def iscube(a):\n    return (round(a**(1/3)))**3 == a", "is_solved": true, "iteration": 1, "prompt_tokens": 758, "completion_tokens": 100, "duration": 6.543181896209717}]}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iterations": 1, "prompt_tokens": 1143, "completion_tokens": 167, "duration": 6.4468700885772705, "iteration_states": [{"generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": false, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 50, "duration": 3.571953773498535}, {"generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1143, "completion_tokens": 167, "duration": 6.4468700885772705}]}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    \n    for i, char in enumerate(s):\n        if char in vowels or (char.lower() == 'y' and i == len(s)-1):\n            count += 1\n    \n    return count", "is_solved": true, "iterations": 3, "prompt_tokens": 2212, "completion_tokens": 453, "duration": 13.215418577194214, "iteration_states": [{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    if s[-1].lower() == 'y':\n        count += 1\n    \n    for char in s[:-1]:\n        if char.lower() in vowels:\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 78, "duration": 5.1695027351379395}, {"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 1, "prompt_tokens": 863, "completion_tokens": 184, "duration": 7.491134166717529}, {"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    \n    for char in s:\n        if char in vowels or (char == 'y' and s.index(char) == len(s)-1):\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 2, "prompt_tokens": 1494, "completion_tokens": 304, "duration": 9.899459600448608}, {"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    \n    for i, char in enumerate(s):\n        if char in vowels or (char.lower() == 'y' and i == len(s)-1):\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 3, "prompt_tokens": 2212, "completion_tokens": 453, "duration": 13.215418577194214}]}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    max_num = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            if num > max_num:\n                max_num = num\n    return max_num", "is_solved": true, "iterations": 3, "prompt_tokens": 2762, "completion_tokens": 443, "duration": 11.692185640335083, "iteration_states": [{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            return num\n    return -1", "is_solved": false, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 49, "duration": 3.606308937072754}, {"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            return num\n    return -1", "is_solved": false, "iteration": 1, "prompt_tokens": 1082, "completion_tokens": 193, "duration": 6.304611682891846}, {"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            return num\n    return -1", "is_solved": false, "iteration": 2, "prompt_tokens": 1935, "completion_tokens": 323, "duration": 9.289215803146362}, {"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    max_num = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            if num > max_num:\n                max_num = num\n    return max_num", "is_solved": true, "iteration": 3, "prompt_tokens": 2762, "completion_tokens": 443, "duration": 11.692185640335083}]}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[i-1] % 2 == 0:\n            stones.append(stones[i-1] + 2)\n        else:\n            stones.append(stones[i-1] + 1 if n % 2 == 0 else stones[i-1] + 2)\n    return stones", "is_solved": true, "iterations": 3, "prompt_tokens": 2551, "completion_tokens": 484, "duration": 14.462320804595947, "iteration_states": [{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "is_solved": false, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 61, "duration": 5.982418060302734}, {"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[i-1] % 2 == 0:\n            stones.append(stones[i-1] + 1)\n        else:\n            stones.append(stones[i-1] + 2)\n    return stones", "is_solved": false, "iteration": 1, "prompt_tokens": 946, "completion_tokens": 192, "duration": 8.569928169250488}, {"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[i-1] % 2 == 0:\n            stones.append(stones[i-1] + 2)\n        else:\n            stones.append(stones[i-1] + 1)\n    return stones", "is_solved": false, "iteration": 2, "prompt_tokens": 1746, "completion_tokens": 321, "duration": 11.110016584396362}, {"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[i-1] % 2 == 0:\n            stones.append(stones[i-1] + 2)\n        else:\n            stones.append(stones[i-1] + 1 if n % 2 == 0 else stones[i-1] + 2)\n    return stones", "is_solved": true, "iteration": 3, "prompt_tokens": 2551, "completion_tokens": 484, "duration": 14.462320804595947}]}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = [i for i in range(2, a) if a % i == 0 and is_prime(i)]\n    \n    if len(prime_factors) != 3:\n        return False\n    \n    product = 1\n    for factor in prime_factors:\n        product *= factor\n    \n    return product == a", "is_solved": true, "iterations": 4, "prompt_tokens": 3187, "completion_tokens": 818, "duration": 21.63321304321289, "iteration_states": [{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3", "is_solved": false, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 106, "duration": 6.856443166732788}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            if count > 3:\n                return False\n    return count == 3", "is_solved": false, "iteration": 1, "prompt_tokens": 883, "completion_tokens": 289, "duration": 10.139683723449707}, {"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            if count > 3:\n                return False\n    return count == 3 and a != 1", "is_solved": false, "iteration": 2, "prompt_tokens": 1647, "completion_tokens": 465, "duration": 14.472548246383667}, {"generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            if count > 3:\n                return False\n    return count == 3 and a != 1", "is_solved": false, "iteration": 3, "prompt_tokens": 2413, "completion_tokens": 633, "duration": 17.65730047225952}, {"generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = [i for i in range(2, a) if a % i == 0 and is_prime(i)]\n    \n    if len(prime_factors) != 3:\n        return False\n    \n    product = 1\n    for factor in prime_factors:\n        product *= factor\n    \n    return product == a", "is_solved": true, "iteration": 4, "prompt_tokens": 3187, "completion_tokens": 818, "duration": 21.63321304321289}]}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": false, "iterations": 9, "prompt_tokens": 5609, "completion_tokens": 637, "duration": 20.78850245475769, "iteration_states": [{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": false, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047}, {"generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "is_solved": false, "iteration": 1, "prompt_tokens": 731, "completion_tokens": 78, "duration": 5.657691478729248}, {"generated_code": "def truncate_number(number: float) -> float:\n    return abs(number) % 1", "is_solved": false, "iteration": 2, "prompt_tokens": 1330, "completion_tokens": 140, "duration": 7.353806972503662}, {"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": false, "iteration": 3, "prompt_tokens": 1958, "completion_tokens": 225, "duration": 9.488449573516846}, {"generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "is_solved": false, "iteration": 4, "prompt_tokens": 2553, "completion_tokens": 281, "duration": 11.297721147537231}, {"generated_code": "def truncate_number(number: float) -> float:\n    return abs(number) % 1", "is_solved": false, "iteration": 5, "prompt_tokens": 3166, "completion_tokens": 357, "duration": 13.423062086105347}, {"generated_code": "def truncate_number(number: float) -> float:\n    return abs(number) - int(abs(number))", "is_solved": false, "iteration": 6, "prompt_tokens": 3782, "completion_tokens": 433, "duration": 15.392377138137817}, {"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": false, "iteration": 7, "prompt_tokens": 4391, "completion_tokens": 497, "duration": 16.99180793762207}, {"generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "is_solved": false, "iteration": 8, "prompt_tokens": 4998, "completion_tokens": 565, "duration": 19.05811071395874}, {"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": false, "iteration": 9, "prompt_tokens": 5609, "completion_tokens": 637, "duration": 20.78850245475769}]}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    string_keys = [key for key in dict.keys() if isinstance(key, str)]\n    \n    if not string_keys:\n        return False\n    \n    lowercase_keys = all(key.islower() for key in string_keys if key.isalpha())\n    uppercase_keys = all(key.isupper() for key in string_keys if key.isalpha())\n    \n    return len(string_keys) == len(dict) and (lowercase_keys or uppercase_keys)", "is_solved": true, "iterations": 6, "prompt_tokens": 5565, "completion_tokens": 1000, "duration": 25.44342613220215, "iteration_states": [{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(key.islower() for key in dict.keys())\n    uppercase_keys = all(key.isupper() for key in dict.keys())\n    \n    return lowercase_keys or uppercase_keys", "is_solved": false, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 62, "duration": 6.021496057510376}, {"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    string_keys = [key for key in dict.keys() if isinstance(key, str)]\n    \n    if not string_keys:\n        return False\n    \n    lowercase_keys = all(key.islower() for key in string_keys)\n    uppercase_keys = all(key.isupper() for key in string_keys)\n    \n    return lowercase_keys or uppercase_keys", "is_solved": false, "iteration": 1, "prompt_tokens": 1073, "completion_tokens": 215, "duration": 9.278621435165405}, {"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    string_keys = [key for key in dict.keys() if isinstance(key, str)]\n    \n    if len(string_keys) != len(set(map(str.lower, string_keys))) and len(string_keys) != len(set(map(str.upper, string_keys))):\n        return False\n    \n    lowercase_keys = all(key.islower() for key in string_keys)\n    uppercase_keys = all(key.isupper() for key in string_keys)\n    \n    return lowercase_keys or uppercase_keys", "is_solved": false, "iteration": 2, "prompt_tokens": 1947, "completion_tokens": 377, "duration": 12.964245080947876}, {"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    string_keys = [key for key in dict.keys() if isinstance(key, str)]\n    \n    if not string_keys:\n        return False\n    \n    lowercase_keys = all(key.islower() for key in string_keys)\n    uppercase_keys = all(key.isupper() for key in string_keys)\n    \n    return lowercase_keys or uppercase_keys", "is_solved": false, "iteration": 3, "prompt_tokens": 2893, "completion_tokens": 536, "duration": 16.11865496635437}, {"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    string_keys = [key for key in dict.keys() if isinstance(key, str)]\n    \n    if not string_keys:\n        return False\n    \n    lowercase_keys = all(key.islower() for key in string_keys if key.isalpha())\n    uppercase_keys = all(key.isupper() for key in string_keys if key.isalpha())\n    \n    return lowercase_keys or uppercase_keys", "is_solved": false, "iteration": 4, "prompt_tokens": 3773, "completion_tokens": 687, "duration": 19.491863250732422}, {"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    string_keys = [key for key in dict.keys() if isinstance(key, str)]\n    \n    if not string_keys:\n        return False\n    \n    lowercase_keys = all(key.islower() for key in string_keys if key.isalpha())\n    uppercase_keys = all(key.isupper() for key in string_keys if key.isalpha())\n    \n    return lowercase_keys or uppercase_keys", "is_solved": false, "iteration": 5, "prompt_tokens": 4685, "completion_tokens": 854, "duration": 22.84239411354065}, {"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    string_keys = [key for key in dict.keys() if isinstance(key, str)]\n    \n    if not string_keys:\n        return False\n    \n    lowercase_keys = all(key.islower() for key in string_keys if key.isalpha())\n    uppercase_keys = all(key.isupper() for key in string_keys if key.isalpha())\n    \n    return len(string_keys) == len(dict) and (lowercase_keys or uppercase_keys)", "is_solved": true, "iteration": 6, "prompt_tokens": 5565, "completion_tokens": 1000, "duration": 25.44342613220215}]}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "is_solved": false, "iterations": 9, "prompt_tokens": 6406, "completion_tokens": 787, "duration": 26.159911155700684, "iteration_states": [{"generated_code": "def car_race_collision(n: int):\n    return n*(n-1)", "is_solved": false, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 20, "duration": 4.578029155731201}, {"generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "is_solved": false, "iteration": 1, "prompt_tokens": 889, "completion_tokens": 118, "duration": 6.744301795959473}, {"generated_code": "def car_race_collision(n: int):\n    return n * (n - 1)", "is_solved": false, "iteration": 2, "prompt_tokens": 1580, "completion_tokens": 191, "duration": 8.480832576751709}, {"generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "is_solved": false, "iteration": 3, "prompt_tokens": 2254, "completion_tokens": 271, "duration": 11.825195789337158}, {"generated_code": "def car_race_collision(n: int):\n    return n * (n - 1)", "is_solved": false, "iteration": 4, "prompt_tokens": 2957, "completion_tokens": 356, "duration": 13.71968150138855}, {"generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "is_solved": false, "iteration": 5, "prompt_tokens": 3650, "completion_tokens": 455, "duration": 16.21291494369507}, {"generated_code": "def car_race_collision(n: int):\n    return n * (n - 1)", "is_solved": false, "iteration": 6, "prompt_tokens": 4356, "completion_tokens": 543, "duration": 18.9892315864563}, {"generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "is_solved": false, "iteration": 7, "prompt_tokens": 5033, "completion_tokens": 626, "duration": 21.070870876312256}, {"generated_code": "def car_race_collision(n: int):\n    return n * (n - 1)", "is_solved": false, "iteration": 8, "prompt_tokens": 5740, "completion_tokens": 715, "duration": 23.187450408935547}, {"generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "is_solved": false, "iteration": 9, "prompt_tokens": 6406, "completion_tokens": 787, "duration": 26.159911155700684}]}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iterations": 9, "prompt_tokens": 5933, "completion_tokens": 944, "duration": 25.069019556045532, "iteration_states": [{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795}, {"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 1, "prompt_tokens": 805, "completion_tokens": 188, "duration": 7.68727970123291}, {"generated_code": "def add(lst):\n    return sum(num for num in lst if num % 2 == 0)", "is_solved": false, "iteration": 2, "prompt_tokens": 1437, "completion_tokens": 261, "duration": 9.505197048187256}, {"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 3, "prompt_tokens": 2056, "completion_tokens": 350, "duration": 11.85728144645691}, {"generated_code": "def add(lst):\n    return sum(num for num in lst if num % 2 == 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 2730, "completion_tokens": 465, "duration": 14.408541202545166}, {"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 3342, "completion_tokens": 547, "duration": 16.28243899345398}, {"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": false, "iteration": 6, "prompt_tokens": 3977, "completion_tokens": 638, "duration": 18.38474178314209}, {"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 4654, "completion_tokens": 765, "duration": 20.98971939086914}, {"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if i % 2 == 1 and lst[i] % 2 == 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 5278, "completion_tokens": 851, "duration": 22.897664070129395}, {"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 9, "prompt_tokens": 5933, "completion_tokens": 944, "duration": 25.069019556045532}]}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2\n    else:\n        return sorted_l[mid]", "is_solved": false, "iterations": 9, "prompt_tokens": 6205, "completion_tokens": 1177, "duration": 24.824135065078735, "iteration_states": [{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": false, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098}, {"generated_code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    else:\n        return sorted_l[n//2]", "is_solved": false, "iteration": 1, "prompt_tokens": 774, "completion_tokens": 172, "duration": 4.237980842590332}, {"generated_code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2\n    else:\n        return sorted_l[n//2]", "is_solved": false, "iteration": 2, "prompt_tokens": 1464, "completion_tokens": 310, "duration": 7.329438924789429}, {"generated_code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2\n    else:\n        return sorted_l[mid]", "is_solved": false, "iteration": 3, "prompt_tokens": 2139, "completion_tokens": 435, "duration": 9.621930122375488}, {"generated_code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2\n    else:\n        return sorted_l[mid]", "is_solved": false, "iteration": 4, "prompt_tokens": 2821, "completion_tokens": 563, "duration": 12.285571098327637}, {"generated_code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2\n    else:\n        return sorted_l[mid]", "is_solved": false, "iteration": 5, "prompt_tokens": 3497, "completion_tokens": 685, "duration": 14.794006109237671}, {"generated_code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2\n    else:\n        return sorted_l[mid]", "is_solved": false, "iteration": 6, "prompt_tokens": 4182, "completion_tokens": 816, "duration": 17.321190357208252}, {"generated_code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2\n    else:\n        return sorted_l[mid]", "is_solved": false, "iteration": 7, "prompt_tokens": 4862, "completion_tokens": 942, "duration": 19.753978490829468}, {"generated_code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2\n    else:\n        return sorted_l[mid]", "is_solved": false, "iteration": 8, "prompt_tokens": 5539, "completion_tokens": 1065, "duration": 22.63064980506897}, {"generated_code": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2\n    else:\n        return sorted_l[mid]", "is_solved": false, "iteration": 9, "prompt_tokens": 6205, "completion_tokens": 1177, "duration": 24.824135065078735}]}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iterations": 9, "prompt_tokens": 6775, "completion_tokens": 884, "duration": 27.22941493988037, "iteration_states": [{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437}, {"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s.split()]", "is_solved": false, "iteration": 1, "prompt_tokens": 838, "completion_tokens": 102, "duration": 5.821719646453857}, {"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 2, "prompt_tokens": 1573, "completion_tokens": 182, "duration": 7.683720111846924}, {"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 3, "prompt_tokens": 2270, "completion_tokens": 250, "duration": 9.375059366226196}, {"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if s.endswith(substring)]", "is_solved": false, "iteration": 4, "prompt_tokens": 3019, "completion_tokens": 371, "duration": 14.734599113464355}, {"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 5, "prompt_tokens": 3772, "completion_tokens": 469, "duration": 18.242945909500122}, {"generated_code": "import re\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if re.search(r'\\b{}\\b'.format(substring), s)]", "is_solved": false, "iteration": 6, "prompt_tokens": 4483, "completion_tokens": 569, "duration": 20.566035747528076}, {"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 7, "prompt_tokens": 5277, "completion_tokens": 679, "duration": 22.706074714660645}, {"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s.split()]", "is_solved": false, "iteration": 8, "prompt_tokens": 6029, "completion_tokens": 798, "duration": 25.21507215499878}, {"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 9, "prompt_tokens": 6775, "completion_tokens": 884, "duration": 27.22941493988037}]}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:len(string) - i][::-1]\n\n    return string + string[:-1][::-1]", "is_solved": false, "iterations": 9, "prompt_tokens": 6751, "completion_tokens": 1207, "duration": 27.487277507781982, "iteration_states": [{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 64, "duration": 3.7330939769744873}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[i-1::-1]", "is_solved": false, "iteration": 1, "prompt_tokens": 902, "completion_tokens": 166, "duration": 6.071926832199097}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            if string == string[::-1]:\n                return string\n            return string + string[i-1::-1]", "is_solved": false, "iteration": 2, "prompt_tokens": 1597, "completion_tokens": 276, "duration": 8.591973304748535}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[i-1::-1]", "is_solved": false, "iteration": 3, "prompt_tokens": 2343, "completion_tokens": 403, "duration": 10.983577966690063}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            if i == len(string):  # string is already a palindrome\n                return string\n            return string + string[i-1::-1]", "is_solved": false, "iteration": 4, "prompt_tokens": 3051, "completion_tokens": 535, "duration": 13.592920303344727}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[i-1::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 3805, "completion_tokens": 656, "duration": 16.536530256271362}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[i:][::-1]", "is_solved": false, "iteration": 6, "prompt_tokens": 4542, "completion_tokens": 798, "duration": 19.640516996383667}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:len(string) - i][::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5264, "completion_tokens": 919, "duration": 22.167056798934937}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            if string == string[::-1]:\n                return string\n            return string + string[:len(string) - i][::-1]", "is_solved": false, "iteration": 8, "prompt_tokens": 6008, "completion_tokens": 1076, "duration": 24.853047132492065}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:len(string) - i][::-1]\n\n    return string + string[:-1][::-1]", "is_solved": false, "iteration": 9, "prompt_tokens": 6751, "completion_tokens": 1207, "duration": 27.487277507781982}]}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iterations": 9, "prompt_tokens": 6421, "completion_tokens": 1084, "duration": 31.212652444839478, "iteration_states": [{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 55, "duration": 6.772214412689209}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift < len(x_str) else x_str[::-1]", "is_solved": false, "iteration": 1, "prompt_tokens": 821, "completion_tokens": 179, "duration": 9.282754182815552}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 2, "prompt_tokens": 1526, "completion_tokens": 277, "duration": 11.486486196517944}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift] if shift < len(x_str) else x_str[::-1]", "is_solved": false, "iteration": 3, "prompt_tokens": 2217, "completion_tokens": 406, "duration": 13.801209449768066}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift] if shift < len(x_str) else x_str[-shift:][::-1] + x_str[:-shift][::-1]", "is_solved": false, "iteration": 4, "prompt_tokens": 2908, "completion_tokens": 522, "duration": 16.541486024856567}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift] if shift < len(x_str) else x_str[::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 3645, "completion_tokens": 645, "duration": 19.586278676986694}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 6, "prompt_tokens": 4390, "completion_tokens": 777, "duration": 22.384268283843994}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift] if shift != 0 else x_str[::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5037, "completion_tokens": 872, "duration": 24.782110929489136}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 8, "prompt_tokens": 5720, "completion_tokens": 975, "duration": 28.456274032592773}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 9, "prompt_tokens": 6421, "completion_tokens": 1084, "duration": 31.212652444839478}]}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note in durations:\n            result.append(durations[note])\n        elif note[-1] == '|':\n            result.append(durations[note[:-1]])\n    return result", "is_solved": false, "iterations": 9, "prompt_tokens": 10466, "completion_tokens": 1252, "duration": 29.049923419952393, "iteration_states": [{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": false, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations.get(note, 0) for note in music_string.split()]", "is_solved": false, "iteration": 1, "prompt_tokens": 1340, "completion_tokens": 173, "duration": 6.186092853546143}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations.get(note, 0) for note in music_string.split() if note in durations]", "is_solved": false, "iteration": 2, "prompt_tokens": 2492, "completion_tokens": 330, "duration": 9.340838432312012}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations.get(note, 0) for note in music_string.split()]", "is_solved": false, "iteration": 3, "prompt_tokens": 3626, "completion_tokens": 454, "duration": 11.887237787246704}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 1, '.|': 1}\n    return [durations.get(note, 0) for note in music_string.split()]", "is_solved": false, "iteration": 4, "prompt_tokens": 4746, "completion_tokens": 574, "duration": 14.612649202346802}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [durations.get(note, 0) for note in notes]", "is_solved": false, "iteration": 5, "prompt_tokens": 5897, "completion_tokens": 706, "duration": 17.428274154663086}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [durations[note] for note in notes]", "is_solved": false, "iteration": 6, "prompt_tokens": 7015, "completion_tokens": 816, "duration": 21.005735874176025}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [durations.get(note, 0) for note in notes]", "is_solved": false, "iteration": 7, "prompt_tokens": 8146, "completion_tokens": 948, "duration": 23.408812999725342}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note in durations:\n            result.append(durations[note])\n        elif note[-1] == '|':\n            result.extend([durations[note[:-1]]] * len(note))\n    return result", "is_solved": false, "iteration": 8, "prompt_tokens": 9270, "completion_tokens": 1104, "duration": 26.34608554840088}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note in durations:\n            result.append(durations[note])\n        elif note[-1] == '|':\n            result.append(durations[note[:-1]])\n    return result", "is_solved": false, "iteration": 9, "prompt_tokens": 10466, "completion_tokens": 1252, "duration": 29.049923419952393}]}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.islower() else ch for ch in s])", "is_solved": false, "iterations": 9, "prompt_tokens": 6793, "completion_tokens": 1348, "duration": 31.92774796485901, "iteration_states": [{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379}, {"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 1, "prompt_tokens": 859, "completion_tokens": 216, "duration": 8.857581853866577}, {"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 2, "prompt_tokens": 1599, "completion_tokens": 371, "duration": 12.352120637893677}, {"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 3, "prompt_tokens": 2305, "completion_tokens": 492, "duration": 15.073637008666992}, {"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 4, "prompt_tokens": 3034, "completion_tokens": 636, "duration": 18.289034843444824}, {"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.islower() else ch for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.islower() else ch for ch in s])", "is_solved": false, "iteration": 5, "prompt_tokens": 3792, "completion_tokens": 823, "duration": 21.36087465286255}, {"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.islower() else ch for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.islower() else ch for ch in s])", "is_solved": false, "iteration": 6, "prompt_tokens": 4551, "completion_tokens": 983, "duration": 24.518279314041138}, {"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.islower() else ch for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.islower() else ch for ch in s])", "is_solved": false, "iteration": 7, "prompt_tokens": 5282, "completion_tokens": 1115, "duration": 27.249213695526123}, {"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 21 - ord(\"a\")) % 26) + ord(\"a\")) if ch.islower() else ch for ch in s])", "is_solved": false, "iteration": 8, "prompt_tokens": 6049, "completion_tokens": 1237, "duration": 29.59320592880249}, {"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.islower() else ch for ch in s])", "is_solved": false, "iteration": 9, "prompt_tokens": 6793, "completion_tokens": 1348, "duration": 31.92774796485901}]}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n\n    return closest_pair", "is_solved": false, "iterations": 9, "prompt_tokens": 10497, "completion_tokens": 1532, "duration": 34.64741230010986, "iteration_states": [{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": false, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": false, "iteration": 1, "prompt_tokens": 1316, "completion_tokens": 233, "duration": 7.190197229385376}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pairs = []\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff == min_diff:\n            closest_pairs.append((numbers[i], numbers[i+1]))\n        elif diff < min_diff:\n            min_diff = diff\n            closest_pairs = [(numbers[i], numbers[i+1])]\n    \n    return closest_pairs[0] if len(closest_pairs) == 1 else min(closest_pairs)", "is_solved": false, "iteration": 2, "prompt_tokens": 2429, "completion_tokens": 412, "duration": 11.417251586914062}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pairs = []\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff == min_diff:\n            closest_pairs.append((numbers[i], numbers[i+1]))\n        elif diff < min_diff:\n            min_diff = diff\n            closest_pairs = [(numbers[i], numbers[i+1])]\n    \n    return min(closest_pairs)", "is_solved": false, "iteration": 3, "prompt_tokens": 3607, "completion_tokens": 577, "duration": 14.336548089981079}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pairs = []\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff <= min_diff:\n            if diff < min_diff:\n                min_diff = diff\n                closest_pairs = [(numbers[i], numbers[i+1])]\n            else:\n                closest_pairs.append((numbers[i], numbers[i+1]))\n    \n    return min(closest_pairs)", "is_solved": false, "iteration": 4, "prompt_tokens": 4757, "completion_tokens": 747, "duration": 17.85412311553955}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pairs = []\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pairs = [(numbers[i], numbers[i+1])]\n        elif diff == min_diff:\n            closest_pairs.append((numbers[i], numbers[i+1]))\n    \n    return min(closest_pairs)", "is_solved": false, "iteration": 5, "prompt_tokens": 5897, "completion_tokens": 898, "duration": 20.62049674987793}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n\n    return closest_pair", "is_solved": false, "iteration": 6, "prompt_tokens": 7026, "completion_tokens": 1020, "duration": 23.276052474975586}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff == min_diff and (numbers[i], numbers[i+1]) != closest_pair:\n            closest_pair = (numbers[i], numbers[i+1])\n            break\n\n    return closest_pair", "is_solved": false, "iteration": 7, "prompt_tokens": 8129, "completion_tokens": 1224, "duration": 27.730787992477417}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pairs = []\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pairs = [(numbers[i], numbers[i+1])]\n        elif diff == min_diff:\n            closest_pairs.append((numbers[i], numbers[i+1]))\n\n    return min(closest_pairs)", "is_solved": false, "iteration": 8, "prompt_tokens": 9342, "completion_tokens": 1380, "duration": 31.285341501235962}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n\n    return closest_pair", "is_solved": false, "iteration": 9, "prompt_tokens": 10497, "completion_tokens": 1532, "duration": 34.64741230010986}]}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0 or '7' in str(i)):\n            count += 1\n    return count", "is_solved": false, "iterations": 9, "prompt_tokens": 6144, "completion_tokens": 1246, "duration": 35.42251777648926, "iteration_states": [{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 57, "duration": 4.1797919273376465}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 1, "prompt_tokens": 786, "completion_tokens": 182, "duration": 6.955239772796631}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i) and i % 13 != 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 2, "prompt_tokens": 1436, "completion_tokens": 309, "duration": 9.59587550163269}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i) and i % 13 != 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 3, "prompt_tokens": 2112, "completion_tokens": 444, "duration": 15.613394021987915}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 4, "prompt_tokens": 2781, "completion_tokens": 563, "duration": 18.291743516921997}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 3459, "completion_tokens": 709, "duration": 24.12813639640808}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and not (i % 11 == 0 and i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 6, "prompt_tokens": 4122, "completion_tokens": 859, "duration": 27.02146887779236}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 4816, "completion_tokens": 983, "duration": 29.73021388053894}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 8, "prompt_tokens": 5479, "completion_tokens": 1114, "duration": 32.48459482192993}, {"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0 or '7' in str(i)):\n            count += 1\n    return count", "is_solved": false, "iteration": 9, "prompt_tokens": 6144, "completion_tokens": 1246, "duration": 35.42251777648926}]}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n\n    roots = np.roots(xs)\n    \n    real_roots = [root.real for root in roots if np.iscomplex(root) == False]\n    \n    if len(real_roots) == 0:\n        return None\n    else:\n        return real_roots[0]", "is_solved": false, "iterations": 9, "prompt_tokens": 9779, "completion_tokens": 2049, "duration": 40.434526681900024, "iteration_states": [{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": false, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784}, {"generated_code": "def find_zero(xs: list):\n    a, b, c = xs[-3], xs[-2], xs[-1] # coefficients of a quadratic equation ax^2 + bx + c = 0\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return None  # No real roots\n    else:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a)\n        x2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return x1 if abs(x1) < abs(x2) else x2", "is_solved": false, "iteration": 1, "prompt_tokens": 1067, "completion_tokens": 209, "duration": 6.585609197616577}, {"generated_code": "import math\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    degree = len(xs) - 1\n    while xs[degree] == 0:\n        degree -= 1\n    \n    if degree % 2 != 0:\n        raise ValueError(\"The largest non-zero coefficient must be of odd degree.\")\n    \n    if degree == 1:  # linear equation\n        return -xs[0] / xs[1]\n    \n    if degree == 2:  # quadratic equation\n        a, b, c = xs[-3], xs[-2], xs[-1]\n        discriminant = b**2 - 4*a*c\n        if discriminant < 0:\n            return None  # No real roots\n        else:\n            x1 = (-b + math.sqrt(discriminant)) / (2*a)\n            x2 = (-b - math.sqrt(discriminant)) / (2*a)\n            return x1 if abs(x1) < abs(x2) else x2\n\n    return None", "is_solved": false, "iteration": 2, "prompt_tokens": 2102, "completion_tokens": 518, "duration": 12.04417371749878}, {"generated_code": "import math\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    degree = len(xs) - 1\n    while xs[degree] == 0:\n        degree -= 1\n    \n    if degree < 1:\n        raise ValueError(\"No non-zero coefficient found.\")\n    \n    if degree == 1:  # linear equation\n        return -xs[0] / xs[1]\n    \n    if degree == 2:  # quadratic equation\n        a, b, c = xs[-3], xs[-2], xs[-1]\n        discriminant = b**2 - 4*a*c\n        if discriminant < 0:\n            return None  # No real roots\n        else:\n            x1 = (-b + math.sqrt(discriminant)) / (2*a)\n            x2 = (-b - math.sqrt(discriminant)) / (2*a)\n            return x1 if abs(x1) < abs(x2) else x2\n\n    return None", "is_solved": false, "iteration": 3, "prompt_tokens": 3329, "completion_tokens": 785, "duration": 17.536097764968872}, {"generated_code": "import math\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    degree = len(xs) - 1\n    while xs[degree] == 0:\n        degree -= 1\n    \n    if degree < 1:\n        raise ValueError(\"No non-zero coefficient found.\")\n    \n    if degree == 1:  # linear equation\n        return -xs[0] / xs[1]\n    \n    if degree == 2:  # quadratic equation\n        a, b, c = xs[-3], xs[-2], xs[-1]\n        discriminant = b**2 - 4*a*c\n        if discriminant < 0:\n            return None  # No real roots\n        else:\n            x1 = (-b + math.sqrt(discriminant)) / (2*a)\n            x2 = (-b - math.sqrt(discriminant)) / (2*a)\n            if x1 == x2:\n                return x1\n            else:\n                return x1, x2\n\n    return None", "is_solved": false, "iteration": 4, "prompt_tokens": 4511, "completion_tokens": 1063, "duration": 22.270775318145752}, {"generated_code": "import math\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    degree = len(xs) - 1\n    while xs[degree] == 0:\n        degree -= 1\n    \n    if degree < 1:\n        raise ValueError(\"No non-zero coefficient found.\")\n    \n    if degree == 1:  # linear equation\n        return -xs[0] / xs[1]\n    \n    if degree == 2:  # quadratic equation\n        a, b, c = xs[-3], xs[-2], xs[-1]\n        discriminant = b**2 - 4*a*c\n        if discriminant < 0:\n            return None  # No real roots\n        else:\n            x1 = (-b + math.sqrt(discriminant)) / (2*a)\n            x2 = (-b - math.sqrt(discriminant)) / (2*a)\n            if x1 == x2:\n                return x1\n            else:\n                return x1, x2\n    \n    return None", "is_solved": false, "iteration": 5, "prompt_tokens": 5723, "completion_tokens": 1359, "duration": 27.612930059432983}, {"generated_code": "import numpy as np\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    roots = np.roots(xs)\n    real_roots = roots[np.isreal(roots)].real\n    \n    if len(real_roots) == 0:\n        return None\n    elif len(real_roots) == 1:\n        return real_roots[0]\n    else:\n        return real_roots", "is_solved": false, "iteration": 6, "prompt_tokens": 6940, "completion_tokens": 1530, "duration": 31.38183331489563}, {"generated_code": "import numpy as np\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    roots = np.roots(xs)\n    real_roots = roots[np.isreal(roots)].real\n    \n    if len(real_roots) == 0:\n        return None\n    elif len(real_roots) == 1:\n        return real_roots[0]\n    else:\n        return real_roots[0]", "is_solved": false, "iteration": 7, "prompt_tokens": 7915, "completion_tokens": 1709, "duration": 34.53289079666138}, {"generated_code": "import numpy as np\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    roots = np.roots(xs)\n    \n    real_roots = [root.real for root in roots if np.iscomplex(root) == False]\n    \n    if len(real_roots) == 0:\n        return None\n    else:\n        return real_roots[0]", "is_solved": false, "iteration": 8, "prompt_tokens": 8862, "completion_tokens": 1876, "duration": 37.54179859161377}, {"generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n\n    roots = np.roots(xs)\n    \n    real_roots = [root.real for root in roots if np.iscomplex(root) == False]\n    \n    if len(real_roots) == 0:\n        return None\n    else:\n        return real_roots[0]", "is_solved": false, "iteration": 9, "prompt_tokens": 9779, "completion_tokens": 2049, "duration": 40.434526681900024}]}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    \n    if prime_values:\n        largest_prime = max(prime_values)\n        return sum_of_digits(largest_prime)\n    \n    return 0", "is_solved": false, "iterations": 9, "prompt_tokens": 12810, "completion_tokens": 1883, "duration": 42.96468114852905, "iteration_states": [{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    \n    if prime_values:\n        largest_prime = max(prime_values)\n        return sum_of_digits(largest_prime)\n    \n    return 0", "is_solved": false, "iteration": 1, "prompt_tokens": 1715, "completion_tokens": 329, "duration": 10.288315773010254}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    \n    if prime_values:\n        largest_prime = max(prime_values)\n        return sum_of_digits(largest_prime)\n    \n    return 0", "is_solved": false, "iteration": 2, "prompt_tokens": 3087, "completion_tokens": 509, "duration": 14.405595541000366}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    \n    if prime_values:\n        largest_prime = max(prime_values)\n        return sum_of_digits(largest_prime)\n    \n    return 0", "is_solved": false, "iteration": 3, "prompt_tokens": 4473, "completion_tokens": 703, "duration": 18.600688695907593}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    \n    if prime_values:\n        largest_prime = max(prime_values)\n        return sum_of_digits(largest_prime)\n    \n    return 0", "is_solved": false, "iteration": 4, "prompt_tokens": 5862, "completion_tokens": 900, "duration": 24.390690803527832}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    \n    if prime_values:\n        largest_prime = max(prime_values)\n        return sum(int(d) for d in str(largest_prime))\n    \n    return 0", "is_solved": false, "iteration": 5, "prompt_tokens": 7263, "completion_tokens": 1114, "duration": 27.899760007858276}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    \n    if prime_values:\n        largest_prime = max(prime_values)\n        return sum_of_digits(largest_prime)\n    \n    return 0", "is_solved": false, "iteration": 6, "prompt_tokens": 8679, "completion_tokens": 1328, "duration": 31.94418239593506}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    \n    if prime_values:\n        largest_prime = max(prime_values)\n        return sum_of_digits(largest_prime)\n    \n    return 0", "is_solved": false, "iteration": 7, "prompt_tokens": 10060, "completion_tokens": 1517, "duration": 35.49668741226196}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    \n    if prime_values:\n        largest_prime = max(prime_values)\n        return sum_of_digits(largest_prime)\n    \n    return 0", "is_solved": false, "iteration": 8, "prompt_tokens": 11438, "completion_tokens": 1703, "duration": 39.36262798309326}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    \n    if prime_values:\n        largest_prime = max(prime_values)\n        return sum_of_digits(largest_prime)\n    \n    return 0", "is_solved": false, "iteration": 9, "prompt_tokens": 12810, "completion_tokens": 1883, "duration": 42.96468114852905}]}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 3.0:\n            return 'B+'\n        elif gpa >= 2.7:\n            return 'B'\n        elif gpa >= 2.3:\n            return 'B-'\n        elif gpa >= 2.0:\n            return 'C+'\n        elif gpa >= 1.7:\n            return 'C'\n        elif gpa >= 1.3:\n            return 'C-'\n        elif gpa >= 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iterations": 9, "prompt_tokens": 12532, "completion_tokens": 2629, "duration": 53.83145523071289, "iteration_states": [{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 221, "duration": 8.414106845855713}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 3.0:\n            return 'B+'\n        elif gpa >= 2.7:\n            return 'B'\n        elif gpa >= 2.3:\n            return 'B-'\n        elif gpa >= 2.0:\n            return 'C+'\n        elif gpa >= 1.7:\n            return 'C'\n        elif gpa >= 1.3:\n            return 'C-'\n        elif gpa >= 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        elif gpa >= 0.0:\n            return 'D-'\n        else:\n            return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 1, "prompt_tokens": 1681, "completion_tokens": 495, "duration": 14.230602264404297}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa >= 0.0:\n            return 'D-'\n        else:\n            return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 2, "prompt_tokens": 3060, "completion_tokens": 769, "duration": 19.831846714019775}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 3.0:\n            return 'B+'\n        elif gpa >= 2.7:\n            return 'B'\n        elif gpa >= 2.3:\n            return 'B-'\n        elif gpa >= 2.0:\n            return 'C+'\n        elif gpa >= 1.7:\n            return 'C'\n        elif gpa >= 1.3:\n            return 'C-'\n        elif gpa >= 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 3, "prompt_tokens": 4447, "completion_tokens": 1048, "duration": 25.09720230102539}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 4, "prompt_tokens": 5790, "completion_tokens": 1301, "duration": 30.1032452583313}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 3.0:\n            return 'B+'\n        elif gpa >= 2.7:\n            return 'B'\n        elif gpa >= 2.3:\n            return 'B-'\n        elif gpa >= 2.0:\n            return 'C+'\n        elif gpa >= 1.7:\n            return 'C'\n        elif gpa >= 1.3:\n            return 'C-'\n        elif gpa >= 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 5, "prompt_tokens": 7133, "completion_tokens": 1566, "duration": 35.20268106460571}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 6, "prompt_tokens": 8481, "completion_tokens": 1824, "duration": 40.357195138931274}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 3.0:\n            return 'B+'\n        elif gpa >= 2.7:\n            return 'B'\n        elif gpa >= 2.3:\n            return 'B-'\n        elif gpa >= 2.0:\n            return 'C+'\n        elif gpa >= 1.7:\n            return 'C'\n        elif gpa >= 1.3:\n            return 'C-'\n        elif gpa >= 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 7, "prompt_tokens": 9818, "completion_tokens": 2083, "duration": 44.71338677406311}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 8, "prompt_tokens": 11169, "completion_tokens": 2344, "duration": 48.914074659347534}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 3.0:\n            return 'B+'\n        elif gpa >= 2.7:\n            return 'B'\n        elif gpa >= 2.3:\n            return 'B-'\n        elif gpa >= 2.0:\n            return 'C+'\n        elif gpa >= 1.7:\n            return 'C'\n        elif gpa >= 1.3:\n            return 'C-'\n        elif gpa >= 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 9, "prompt_tokens": 12532, "completion_tokens": 2629, "duration": 53.83145523071289}]}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iterations": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "iteration_states": [{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854}]}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iterations": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "iteration_states": [{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544}]}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "iteration_states": [{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033}]}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iterations": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "iteration_states": [{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187}]}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "iteration_states": [{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547}]}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iterations": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "iteration_states": [{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125}]}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iterations": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "iteration_states": [{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938}]}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "iteration_states": [{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723}]}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iterations": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "iteration_states": [{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926}]}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iterations": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "iteration_states": [{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696}]}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iterations": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "iteration_states": [{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791}]}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iterations": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "iteration_states": [{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156}]}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iterations": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "iteration_states": [{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195}]}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "iteration_states": [{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996}]}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iterations": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "iteration_states": [{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674}]}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iterations": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "iteration_states": [{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018}]}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "iteration_states": [{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169}]}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iterations": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "iteration_states": [{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076}]}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": true, "iterations": 0, "prompt_tokens": 261, "completion_tokens": 126, "duration": 2.1185858249664307, "iteration_states": [{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 126, "duration": 2.1185858249664307}]}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iterations": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "iteration_states": [{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797}]}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iterations": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "iteration_states": [{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875}]}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iterations": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "iteration_states": [{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605}]}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iterations": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "iteration_states": [{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635}]}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iterations": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "iteration_states": [{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884}]}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iterations": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "iteration_states": [{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545}]}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iterations": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "iteration_states": [{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488}]}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iterations": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "iteration_states": [{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798}]}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iterations": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "iteration_states": [{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018}]}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return sorted(set(lst)) == lst", "is_solved": true, "iterations": 1, "prompt_tokens": 1167, "completion_tokens": 109, "duration": 6.092881441116333, "iteration_states": [{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1) if lst.count(lst[i]) == 1)", "is_solved": false, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 43, "duration": 4.305203914642334}, {"generated_code": "def is_sorted(lst):\n    return sorted(set(lst)) == lst", "is_solved": true, "iteration": 1, "prompt_tokens": 1167, "completion_tokens": 109, "duration": 6.092881441116333}]}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iterations": 1, "prompt_tokens": 1170, "completion_tokens": 98, "duration": 4.730991840362549, "iteration_states": [{"generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "is_solved": false, "iteration": 0, "prompt_tokens": 267, "completion_tokens": 20, "duration": 2.360170602798462}, {"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 1, "prompt_tokens": 1170, "completion_tokens": 98, "duration": 4.730991840362549}]}
{"task_id": "HumanEval/115", "generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": true, "iterations": 1, "prompt_tokens": 1413, "completion_tokens": 131, "duration": 6.036069393157959, "iteration_states": [{"generated_code": "def max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": false, "iteration": 0, "prompt_tokens": 373, "completion_tokens": 47, "duration": 3.505402088165283}, {"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": true, "iteration": 1, "prompt_tokens": 1413, "completion_tokens": 131, "duration": 6.036069393157959}]}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    total_open = lst[0].count('(') + lst[1].count('(')\n    total_close = lst[0].count(')') + lst[1].count(')')\n    return 'Yes' if total_open == total_close else 'No'", "is_solved": true, "iterations": 1, "prompt_tokens": 950, "completion_tokens": 196, "duration": 6.152614593505859, "iteration_states": [{"generated_code": "def match_parens(lst):\n    return 'Yes' if abs(lst[0].count('(') - lst[0].count(')')) <= 1 and abs(lst[1].count('(') - lst[1].count(')')) <= 1 else 'No'", "is_solved": false, "iteration": 0, "prompt_tokens": 218, "completion_tokens": 62, "duration": 3.538313865661621}, {"generated_code": "def match_parens(lst):\n    total_open = lst[0].count('(') + lst[1].count('(')\n    total_close = lst[0].count(')') + lst[1].count(')')\n    return 'Yes' if total_open == total_close else 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 950, "completion_tokens": 196, "duration": 6.152614593505859}]}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    if not lst:\n        return {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iterations": 1, "prompt_tokens": 1031, "completion_tokens": 214, "duration": 7.6740031242370605, "iteration_states": [{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": false, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 79, "duration": 4.324152231216431}, {"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    if not lst:\n        return {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1031, "completion_tokens": 214, "duration": 7.6740031242370605}]}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(num % 2 == 0 for num in lst1) == sum(num % 2 != 0 for num in lst2) else \"NO\"", "is_solved": true, "iterations": 4, "prompt_tokens": 3734, "completion_tokens": 541, "duration": 14.84621000289917, "iteration_states": [{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= len(lst2) else \"NO\"", "is_solved": false, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 44, "duration": 3.410109043121338}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) or any(num % 2 == 0 for num in lst2) else \"NO\"", "is_solved": false, "iteration": 1, "prompt_tokens": 1071, "completion_tokens": 135, "duration": 5.664705514907837}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) and all(num % 2 != 0 for num in lst2) else \"NO\"", "is_solved": false, "iteration": 2, "prompt_tokens": 1981, "completion_tokens": 298, "duration": 9.13131308555603}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(num for num in lst1 if num % 2 == 0) == sum(num for num in lst2 if num % 2 != 0) else \"NO\"", "is_solved": false, "iteration": 3, "prompt_tokens": 2842, "completion_tokens": 416, "duration": 12.183937311172485}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(num % 2 == 0 for num in lst1) == sum(num % 2 != 0 for num in lst2) else \"NO\"", "is_solved": true, "iteration": 4, "prompt_tokens": 3734, "completion_tokens": 541, "duration": 14.84621000289917}]}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(1, n//2 + 1):\n        if n - 2*i > 0 and (n - 2*i) % 2 == 0:\n            count += 1\n            if count >= 4:\n                return True\n    return False", "is_solved": true, "iterations": 4, "prompt_tokens": 2974, "completion_tokens": 639, "duration": 17.327489614486694, "iteration_states": [{"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if n - i in range(2, n, 2):\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 64, "duration": 5.258005857467651}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(1, n//2 + 1):\n        if (n - i) % 2 == 0 and i % 2 == 0:\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 1, "prompt_tokens": 819, "completion_tokens": 196, "duration": 8.112908601760864}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(1, n//2 + 1):\n        if (n - i) % 2 == 0 and i % 2 == 0:\n            count += 1\n            if count > 4:\n                return False\n    return count == 4", "is_solved": false, "iteration": 2, "prompt_tokens": 1531, "completion_tokens": 351, "duration": 11.640743970870972}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(1, n//2 + 1):\n        if (n - i) % 2 == 0 and i % 2 == 0:\n            count += 1\n            if count >= 4:\n                return True\n    return False", "is_solved": false, "iteration": 3, "prompt_tokens": 2250, "completion_tokens": 488, "duration": 14.483561515808105}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(1, n//2 + 1):\n        if n - 2*i > 0 and (n - 2*i) % 2 == 0:\n            count += 1\n            if count >= 4:\n                return True\n    return False", "is_solved": true, "iteration": 4, "prompt_tokens": 2974, "completion_tokens": 639, "duration": 17.327489614486694}]}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    prod = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n            has_odd = True\n    \n    return prod if has_odd else n % 2", "is_solved": true, "iterations": 5, "prompt_tokens": 3305, "completion_tokens": 615, "duration": 14.03437066078186, "iteration_states": [{"generated_code": "def digits(n):\n    prod = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n    return prod if prod != 1 else 0", "is_solved": false, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 53, "duration": 1.1113629341125488}, {"generated_code": "def digits(n):\n    prod = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n    \n    return prod if prod != 1 else int(str(n))", "is_solved": false, "iteration": 1, "prompt_tokens": 739, "completion_tokens": 158, "duration": 3.91831111907959}, {"generated_code": "def digits(n):\n    prod = 1\n    has_odd_digit = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n            has_odd_digit = True\n    \n    return prod if has_odd_digit else 1", "is_solved": false, "iteration": 2, "prompt_tokens": 1350, "completion_tokens": 253, "duration": 6.021708250045776}, {"generated_code": "def digits(n):\n    prod = 1\n    has_odd_digit = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n            has_odd_digit = True\n    \n    return prod if has_odd_digit else 1", "is_solved": false, "iteration": 3, "prompt_tokens": 2019, "completion_tokens": 384, "duration": 9.020665168762207}, {"generated_code": "def digits(n):\n    prod = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n    \n    return prod if prod != 1 else 0", "is_solved": false, "iteration": 4, "prompt_tokens": 2679, "completion_tokens": 494, "duration": 11.446507692337036}, {"generated_code": "def digits(n):\n    prod = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n            has_odd = True\n    \n    return prod if has_odd else n % 2", "is_solved": true, "iteration": 5, "prompt_tokens": 3305, "completion_tokens": 615, "duration": 14.03437066078186}]}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr)", "is_solved": true, "iterations": 5, "prompt_tokens": 3966, "completion_tokens": 432, "duration": 17.99687385559082, "iteration_states": [{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368}, {"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x, arr.index(x)))", "is_solved": false, "iteration": 1, "prompt_tokens": 957, "completion_tokens": 106, "duration": 5.781430959701538}, {"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 2, "prompt_tokens": 1717, "completion_tokens": 195, "duration": 7.949974298477173}, {"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x if x >= 0 else float('inf')))", "is_solved": false, "iteration": 3, "prompt_tokens": 2461, "completion_tokens": 285, "duration": 12.005418300628662}, {"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 4, "prompt_tokens": 3209, "completion_tokens": 352, "duration": 13.870687484741211}, {"generated_code": "def sort_array(arr):\n    return sorted(arr)", "is_solved": true, "iteration": 5, "prompt_tokens": 3966, "completion_tokens": 432, "duration": 17.99687385559082}]}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or len(a) == len(b) and b[::-1] in (a + a) or b in (a * 2)", "is_solved": true, "iterations": 6, "prompt_tokens": 4188, "completion_tokens": 660, "duration": 19.980369329452515, "iteration_states": [{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2)", "is_solved": false, "iteration": 0, "prompt_tokens": 179, "completion_tokens": 29, "duration": 3.6121397018432617}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a)", "is_solved": false, "iteration": 1, "prompt_tokens": 820, "completion_tokens": 113, "duration": 5.9677815437316895}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or len(a) == len(b) and b in (a[::-1] + a[::-1])", "is_solved": false, "iteration": 2, "prompt_tokens": 1469, "completion_tokens": 226, "duration": 8.443516731262207}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or len(a) == len(b) and b in (a[::-1] + a[::-1][::-1])", "is_solved": false, "iteration": 3, "prompt_tokens": 2173, "completion_tokens": 355, "duration": 11.423547506332397}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a)", "is_solved": false, "iteration": 4, "prompt_tokens": 2870, "completion_tokens": 447, "duration": 14.653616905212402}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or len(a) == len(b) and b[::-1] in (a + a)", "is_solved": false, "iteration": 5, "prompt_tokens": 3509, "completion_tokens": 548, "duration": 16.801859378814697}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or len(a) == len(b) and b[::-1] in (a + a) or b in (a * 2)", "is_solved": true, "iteration": 6, "prompt_tokens": 4188, "completion_tokens": 660, "duration": 19.980369329452515}]}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x)) if sum(len(word) for word in lst) % 2 == 0 else []", "is_solved": false, "iterations": 9, "prompt_tokens": 7900, "completion_tokens": 811, "duration": 21.615963220596313, "iteration_states": [{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042}, {"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 1, "prompt_tokens": 1150, "completion_tokens": 135, "duration": 5.343918085098267}, {"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 2, "prompt_tokens": 2052, "completion_tokens": 220, "duration": 7.394843578338623}, {"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 3, "prompt_tokens": 2941, "completion_tokens": 292, "duration": 9.319768905639648}, {"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 4, "prompt_tokens": 3848, "completion_tokens": 383, "duration": 11.537069320678711}, {"generated_code": "def sorted_list_sum(lst):\n    return sum(len(word) for word in lst if len(word) % 2 == 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 4656, "completion_tokens": 462, "duration": 13.546582460403442}, {"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 6, "prompt_tokens": 5488, "completion_tokens": 560, "duration": 15.87256646156311}, {"generated_code": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x))", "is_solved": false, "iteration": 7, "prompt_tokens": 6302, "completion_tokens": 639, "duration": 17.606234073638916}, {"generated_code": "def sorted_list_sum(lst):\n    return sorted(filter(lambda x: len(x) % 2 == 0, lst), key=lambda x: (len(x), x))", "is_solved": false, "iteration": 8, "prompt_tokens": 7102, "completion_tokens": 728, "duration": 19.700953483581543}, {"generated_code": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x)) if sum(len(word) for word in lst) % 2 == 0 else []", "is_solved": false, "iteration": 9, "prompt_tokens": 7900, "completion_tokens": 811, "duration": 21.615963220596313}]}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "is_solved": false, "iterations": 9, "prompt_tokens": 6814, "completion_tokens": 929, "duration": 22.005439281463623, "iteration_states": [{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 38, "duration": 1.2757461071014404}, {"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": false, "iteration": 1, "prompt_tokens": 894, "completion_tokens": 147, "duration": 3.685783863067627}, {"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": false, "iteration": 2, "prompt_tokens": 1636, "completion_tokens": 247, "duration": 6.148345708847046}, {"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if i % 2 == 1 and lst[i] % 2 != 0)", "is_solved": false, "iteration": 3, "prompt_tokens": 2403, "completion_tokens": 372, "duration": 8.782522916793823}, {"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 3155, "completion_tokens": 470, "duration": 10.755388975143433}, {"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 3945, "completion_tokens": 610, "duration": 13.54628849029541}, {"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "is_solved": false, "iteration": 6, "prompt_tokens": 4667, "completion_tokens": 685, "duration": 15.135530710220337}, {"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 != 0 and num % 2 != 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 5354, "completion_tokens": 759, "duration": 17.918606996536255}, {"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 != 0 and num % 2 != 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 6084, "completion_tokens": 844, "duration": 19.89322519302368}, {"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "is_solved": false, "iteration": 9, "prompt_tokens": 6814, "completion_tokens": 929, "duration": 22.005439281463623}]}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 9 < num < 100)", "is_solved": false, "iterations": 9, "prompt_tokens": 7229, "completion_tokens": 773, "duration": 26.954413652420044, "iteration_states": [{"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "is_solved": false, "iteration": 0, "prompt_tokens": 178, "completion_tokens": 31, "duration": 2.967463731765747}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "is_solved": false, "iteration": 1, "prompt_tokens": 965, "completion_tokens": 116, "duration": 5.03365159034729}, {"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 2, "prompt_tokens": 1747, "completion_tokens": 183, "duration": 6.7852442264556885}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 9 < num < 100)", "is_solved": false, "iteration": 3, "prompt_tokens": 2514, "completion_tokens": 264, "duration": 8.98552680015564}, {"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 4, "prompt_tokens": 3305, "completion_tokens": 340, "duration": 11.288970947265625}, {"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x < 100)", "is_solved": false, "iteration": 5, "prompt_tokens": 4071, "completion_tokens": 420, "duration": 13.321988821029663}, {"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 6, "prompt_tokens": 4863, "completion_tokens": 497, "duration": 15.201489448547363}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 9 < num < 100)", "is_solved": false, "iteration": 7, "prompt_tokens": 5630, "completion_tokens": 578, "duration": 17.210942029953003}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 9 < num < 100)", "is_solved": false, "iteration": 8, "prompt_tokens": 6422, "completion_tokens": 668, "duration": 21.78005027770996}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 9 < num < 100)", "is_solved": false, "iteration": 9, "prompt_tokens": 7229, "completion_tokens": 773, "duration": 26.954413652420044}]}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.rstrip()\n    if txt and txt[-1].isalpha() and not txt[-1].isspace():\n        return True\n    return False", "is_solved": false, "iterations": 9, "prompt_tokens": 6679, "completion_tokens": 942, "duration": 29.495028734207153, "iteration_states": [{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 66, "duration": 5.334384918212891}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.rstrip()[-1]\n    return last_char.isalpha() and not last_char.isspace()", "is_solved": false, "iteration": 1, "prompt_tokens": 931, "completion_tokens": 153, "duration": 7.319507360458374}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.rstrip()[-1]\n    return last_char.isalpha() and not last_char.isspace()", "is_solved": false, "iteration": 2, "prompt_tokens": 1638, "completion_tokens": 241, "duration": 9.501120805740356}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_non_whitespace_char = txt.rstrip()[-1]\n    return last_non_whitespace_char.isalpha() and not last_non_whitespace_char.isspace()", "is_solved": false, "iteration": 3, "prompt_tokens": 2357, "completion_tokens": 347, "duration": 12.317216157913208}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_non_whitespace_char = txt.rstrip()[-1]\n    return last_non_whitespace_char.isalpha() and not last_non_whitespace_char.isspace()", "is_solved": false, "iteration": 4, "prompt_tokens": 3082, "completion_tokens": 447, "duration": 14.810042381286621}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_non_whitespace_char = txt.rstrip()[-1]\n    return last_non_whitespace_char.isalpha() and not last_non_whitespace_char.isspace()", "is_solved": false, "iteration": 5, "prompt_tokens": 3802, "completion_tokens": 542, "duration": 18.29982852935791}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.rstrip()[-1].isalpha() and not txt.rstrip()[-1].isspace() if txt else False", "is_solved": false, "iteration": 6, "prompt_tokens": 4532, "completion_tokens": 634, "duration": 20.566530466079712}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt:\n        txt = txt.rstrip()\n        if txt:\n            return txt[-1].isalpha() and not txt[-1].isspace()\n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 5257, "completion_tokens": 756, "duration": 23.7938392162323}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt:\n        txt = txt.rstrip()\n        if txt:\n            return txt[-1].isalpha()\n    return False", "is_solved": false, "iteration": 8, "prompt_tokens": 5973, "completion_tokens": 843, "duration": 25.891575574874878}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.rstrip()\n    if txt and txt[-1].isalpha() and not txt[-1].isspace():\n        return True\n    return False", "is_solved": false, "iteration": 9, "prompt_tokens": 6679, "completion_tokens": 942, "duration": 29.495028734207153}]}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the string {i+1} of the input.\" for i, s in enumerate(lst)]", "is_solved": false, "iterations": 9, "prompt_tokens": 7924, "completion_tokens": 1035, "duration": 28.08057737350464, "iteration_states": [{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 65, "duration": 3.23934006690979}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the string {i+1} of the input.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 1, "prompt_tokens": 1066, "completion_tokens": 150, "duration": 5.537269830703735}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i+1}ng {i+1} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 2, "prompt_tokens": 1903, "completion_tokens": 258, "duration": 8.307421207427979}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i+1}ng {i+1} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 3, "prompt_tokens": 2764, "completion_tokens": 368, "duration": 11.258552074432373}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i+1}ng {i+1} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 4, "prompt_tokens": 3628, "completion_tokens": 481, "duration": 13.763142585754395}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i+1}ng {i+1} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 4490, "completion_tokens": 592, "duration": 16.81400465965271}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i}ng {i+1} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 6, "prompt_tokens": 5367, "completion_tokens": 716, "duration": 19.251176595687866}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the string {i+1} of the input.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 7, "prompt_tokens": 6229, "completion_tokens": 820, "duration": 23.306936264038086}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the string {i+1} of the input.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 8, "prompt_tokens": 7085, "completion_tokens": 936, "duration": 25.90052843093872}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the string {i+1} of the input.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 9, "prompt_tokens": 7924, "completion_tokens": 1035, "duration": 28.08057737350464}]}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def get_signed_digits(num):\n        if num < 0:\n            num = -num\n            return [-int(digit) for digit in str(num)]\n        return [int(digit) for digit in str(num) if digit != '0']\n\n    count = 0\n    for num in arr:\n        if sum(get_signed_digits(num)) > 0:\n            count += 1\n    return count", "is_solved": true, "iterations": 6, "prompt_tokens": 4580, "completion_tokens": 800, "duration": 25.79433512687683, "iteration_states": [{"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = str(num)[1:]\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 63, "duration": 3.6947553157806396}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            digits = str(num)[1:]\n        else:\n            digits = str(num)\n        if sum(int(digit) for digit in digits) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 1, "prompt_tokens": 941, "completion_tokens": 220, "duration": 9.831439971923828}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = str(abs(num))\n        if sum(int(digit) for digit in digits) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 2, "prompt_tokens": 1692, "completion_tokens": 328, "duration": 12.381873846054077}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = str(abs(num))\n        if any(int(digit) != 0 for digit in digits):\n            count += 1\n    return count", "is_solved": false, "iteration": 3, "prompt_tokens": 2410, "completion_tokens": 436, "duration": 16.282145500183105}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = str(num).replace('-', '')\n        if any(int(digit) != 0 for digit in digits):\n            count += 1\n    return count", "is_solved": false, "iteration": 4, "prompt_tokens": 3110, "completion_tokens": 530, "duration": 18.71397590637207}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = str(num).replace('-', '')\n        if any(int(digit) != 0 for digit in digits) and any(int(digit) != 0 for digit in str(num) if digit != '-'):\n            count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 3832, "completion_tokens": 662, "duration": 21.643104553222656}, {"generated_code": "def count_nums(arr):\n    def get_signed_digits(num):\n        if num < 0:\n            num = -num\n            return [-int(digit) for digit in str(num)]\n        return [int(digit) for digit in str(num) if digit != '0']\n\n    count = 0\n    for num in arr:\n        if sum(get_signed_digits(num)) > 0:\n            count += 1\n    return count", "is_solved": true, "iteration": 6, "prompt_tokens": 4580, "completion_tokens": 800, "duration": 25.79433512687683}]}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iterations": 9, "prompt_tokens": 7329, "completion_tokens": 1173, "duration": 27.177974462509155, "iteration_states": [{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 54, "duration": 1.426814079284668}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 1, "prompt_tokens": 1001, "completion_tokens": 185, "duration": 4.60187840461731}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 2, "prompt_tokens": 1804, "completion_tokens": 301, "duration": 6.91778302192688}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 3, "prompt_tokens": 2614, "completion_tokens": 448, "duration": 10.091972351074219}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 4, "prompt_tokens": 3379, "completion_tokens": 550, "duration": 12.582841873168945}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 4148, "completion_tokens": 668, "duration": 15.109398603439331}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 6, "prompt_tokens": 4949, "completion_tokens": 782, "duration": 17.437817096710205}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 7, "prompt_tokens": 5742, "completion_tokens": 924, "duration": 20.03286862373352}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 8, "prompt_tokens": 6562, "completion_tokens": 1057, "duration": 22.98890972137451}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 9, "prompt_tokens": 7329, "completion_tokens": 1173, "duration": 27.177974462509155}]}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_digits(num):\n        return sum(int(d) for d in str(abs(num)) if d.isdigit())\n    \n    return sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))", "is_solved": false, "iterations": 9, "prompt_tokens": 7190, "completion_tokens": 975, "duration": 27.16875386238098, "iteration_states": [{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "is_solved": false, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 31, "duration": 2.5527098178863525}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x) if d.isdigit()), nums.index(x)))", "is_solved": false, "iteration": 1, "prompt_tokens": 927, "completion_tokens": 119, "duration": 4.662411689758301}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x)) if d.isdigit()), nums.index(x)))", "is_solved": false, "iteration": 2, "prompt_tokens": 1673, "completion_tokens": 198, "duration": 6.6511969566345215}, {"generated_code": "def order_by_points(nums):\n    def sum_digits(num):\n        return sum(int(d) for d in str(abs(num)) if d.isdigit())\n\n    return sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))", "is_solved": false, "iteration": 3, "prompt_tokens": 2430, "completion_tokens": 298, "duration": 8.967735290527344}, {"generated_code": "def order_by_points(nums):\n    def sum_digits(num):\n        return sum(int(d) for d in str(abs(num)) if d.isdigit())\n\n    return sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))", "is_solved": false, "iteration": 4, "prompt_tokens": 3218, "completion_tokens": 405, "duration": 11.53563642501831}, {"generated_code": "def order_by_points(nums):\n    def sum_digits(num):\n        return sum(int(d) for d in str(abs(num)) if d.isdigit())\n\n    return sorted(nums, key=lambda x: (sum_digits(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 4032, "completion_tokens": 534, "duration": 14.64521837234497}, {"generated_code": "def order_by_points(nums):\n    def sum_digits(num):\n        return sum(int(d) for d in str(abs(num)) if d.isdigit())\n\n    return sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))", "is_solved": false, "iteration": 6, "prompt_tokens": 4799, "completion_tokens": 628, "duration": 18.038264274597168}, {"generated_code": "def order_by_points(nums):\n    def sum_digits(num):\n        return sum(int(d) for d in str(abs(num)) if d.isdigit())\n    \n    return sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 5609, "completion_tokens": 758, "duration": 21.833197593688965}, {"generated_code": "def order_by_points(nums):\n    def sum_digits(num):\n        return sum(int(d) for d in str(abs(num)) if d.isdigit())\n    \n    return sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))", "is_solved": false, "iteration": 8, "prompt_tokens": 6394, "completion_tokens": 861, "duration": 24.579020261764526}, {"generated_code": "def order_by_points(nums):\n    def sum_digits(num):\n        return sum(int(d) for d in str(abs(num)) if d.isdigit())\n    \n    return sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))", "is_solved": false, "iteration": 9, "prompt_tokens": 7190, "completion_tokens": 975, "duration": 27.16875386238098}]}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    peak = -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            peak = i\n    return peak", "is_solved": false, "iterations": 9, "prompt_tokens": 6369, "completion_tokens": 1216, "duration": 33.26711320877075, "iteration_states": [{"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i-1\n            break\n    return index", "is_solved": false, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 52, "duration": 5.050522565841675}, {"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i\n    return index-1", "is_solved": false, "iteration": 1, "prompt_tokens": 808, "completion_tokens": 144, "duration": 7.251027822494507}, {"generated_code": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i - 1\n    return -1", "is_solved": false, "iteration": 2, "prompt_tokens": 1493, "completion_tokens": 255, "duration": 10.149376630783081}, {"generated_code": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i - 1\n    return -1", "is_solved": false, "iteration": 3, "prompt_tokens": 2153, "completion_tokens": 368, "duration": 12.817163228988647}, {"generated_code": "def can_arrange(arr):\n    peak = -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            if peak != -1:\n                return -1\n            peak = i\n    return peak", "is_solved": false, "iteration": 4, "prompt_tokens": 2837, "completion_tokens": 504, "duration": 16.078405380249023}, {"generated_code": "def can_arrange(arr):\n    peak = -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            peak = i\n            break\n    return peak", "is_solved": false, "iteration": 5, "prompt_tokens": 3539, "completion_tokens": 631, "duration": 18.911148071289062}, {"generated_code": "def can_arrange(arr):\n    peak = -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            peak = i\n    return peak", "is_solved": false, "iteration": 6, "prompt_tokens": 4271, "completion_tokens": 803, "duration": 22.00770592689514}, {"generated_code": "def can_arrange(arr):\n    peak = -1\n    max_val = float('-inf')\n    for i in range(len(arr)):\n        if arr[i] >= max_val:\n            max_val = arr[i]\n        else:\n            peak = i - 1\n    return peak", "is_solved": false, "iteration": 7, "prompt_tokens": 4935, "completion_tokens": 930, "duration": 25.557307481765747}, {"generated_code": "def can_arrange(arr):\n    peak = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            peak = i-1\n            break\n    return peak", "is_solved": false, "iteration": 8, "prompt_tokens": 5665, "completion_tokens": 1078, "duration": 28.87697124481201}, {"generated_code": "def can_arrange(arr):\n    peak = -1\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            peak = i\n    return peak", "is_solved": false, "iteration": 9, "prompt_tokens": 6369, "completion_tokens": 1216, "duration": 33.26711320877075}]}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [word for word in txt.split() if word.isalpha()] if txt else []", "is_solved": false, "iterations": 9, "prompt_tokens": 6511, "completion_tokens": 1071, "duration": 31.989628791809082, "iteration_states": [{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "is_solved": false, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 60, "duration": 3.0317656993865967}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]", "is_solved": false, "iteration": 1, "prompt_tokens": 896, "completion_tokens": 151, "duration": 5.50545072555542}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [c for c in txt if c.islower() and ord(c) % 2 != 0]", "is_solved": false, "iteration": 2, "prompt_tokens": 1568, "completion_tokens": 267, "duration": 8.185696125030518}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2 != 0])", "is_solved": false, "iteration": 3, "prompt_tokens": 2328, "completion_tokens": 424, "duration": 11.540202140808105}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]", "is_solved": false, "iteration": 4, "prompt_tokens": 3036, "completion_tokens": 517, "duration": 13.823267936706543}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return list(txt)", "is_solved": false, "iteration": 5, "prompt_tokens": 3706, "completion_tokens": 612, "duration": 18.39547634124756}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    elif txt.isalpha():\n        return [txt]\n    else:\n        return [c for c in txt if c.islower() and ord(c) % 2 != 0]", "is_solved": false, "iteration": 6, "prompt_tokens": 4406, "completion_tokens": 757, "duration": 22.27969717979431}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [word for word in txt.split() if word.isalpha()]", "is_solved": false, "iteration": 7, "prompt_tokens": 5139, "completion_tokens": 865, "duration": 26.609736680984497}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [word for word in txt.split() if word.isalpha()]", "is_solved": false, "iteration": 8, "prompt_tokens": 5827, "completion_tokens": 968, "duration": 29.276211977005005}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [word for word in txt.split() if word.isalpha()] if txt else []", "is_solved": false, "iteration": 9, "prompt_tokens": 6511, "completion_tokens": 1071, "duration": 31.989628791809082}]}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for char in text:\n        if char == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            result.append(char)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iterations": 9, "prompt_tokens": 6696, "completion_tokens": 1329, "duration": 32.96942734718323, "iteration_states": [{"generated_code": "def fix_spaces(text):\n    return ''.join(['_' if c == ' ' else '-' if c == ' ' * 2 else c for c in text])\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "is_solved": false, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 102, "duration": 5.568545341491699}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for char in text:\n        if char == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(char)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iteration": 1, "prompt_tokens": 922, "completion_tokens": 239, "duration": 8.460080623626709}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for char in text:\n        if char == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            result.append(char)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iteration": 2, "prompt_tokens": 1636, "completion_tokens": 378, "duration": 11.639360666275024}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for char in text:\n        if char == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            result.append(char)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iteration": 3, "prompt_tokens": 2350, "completion_tokens": 505, "duration": 14.535955429077148}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for char in text:\n        if char == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            result.append(char)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iteration": 4, "prompt_tokens": 3070, "completion_tokens": 638, "duration": 17.917162895202637}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for char in text:\n        if char == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            result.append(char)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iteration": 5, "prompt_tokens": 3805, "completion_tokens": 786, "duration": 20.5854651927948}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for char in text:\n        if char == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            result.append(char)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iteration": 6, "prompt_tokens": 4531, "completion_tokens": 925, "duration": 23.60108232498169}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for char in text:\n        if char == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            result.append(char)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iteration": 7, "prompt_tokens": 5253, "completion_tokens": 1060, "duration": 28.13522481918335}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for char in text:\n        if char == ' ':\n            count += 1\n            if count > 1:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            result.append(char)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iteration": 8, "prompt_tokens": 5970, "completion_tokens": 1190, "duration": 30.448657274246216}, {"generated_code": "def fix_spaces(text):\n    result = []\n    count = 0\n    for char in text:\n        if char == ' ':\n            count += 1\n            if count > 2:\n                result.append('-')\n                count = 0\n            else:\n                result.append('_')\n        else:\n            result.append(char)\n            count = 0\n    return ''.join(result)", "is_solved": false, "iteration": 9, "prompt_tokens": 6696, "completion_tokens": 1329, "duration": 32.96942734718323}]}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    opening_brackets = 0\n    \n    for char in string:\n        if char == '[':\n            opening_brackets += 1\n        elif char == ']' and opening_brackets > 0:\n            opening_brackets -= 1\n    \n    return opening_brackets < len(string) // 2", "is_solved": false, "iterations": 9, "prompt_tokens": 7134, "completion_tokens": 1402, "duration": 33.14496397972107, "iteration_states": [{"generated_code": "def is_nested(string):\n    opening_brackets = []\n    \n    for char in string:\n        if char == '[':\n            opening_brackets.append(char)\n        elif char == ']':\n            if opening_brackets:\n                opening_brackets.pop()\n    \n    return len(opening_brackets) != 0\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 116, "duration": 6.233360767364502}, {"generated_code": "def is_nested(string):\n    opening_brackets = []\n    nested_found = False\n\n    for char in string:\n        if char == '[':\n            opening_brackets.append(char)\n        elif char == ']':\n            if opening_brackets:\n                opening_brackets.pop()\n                if opening_brackets:\n                    nested_found = True\n    \n    return nested_found\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 1, "prompt_tokens": 1037, "completion_tokens": 317, "duration": 10.054736137390137}, {"generated_code": "def is_nested(string):\n    opening_brackets = []\n    nested_found = False\n\n    for char in string:\n        if char == '[':\n            opening_brackets.append(char)\n        elif char == ']':\n            if opening_brackets and opening_brackets[-1] == '[':\n                nested_found = True\n                break\n            else:\n                opening_brackets.append(char)\n\n    return nested_found", "is_solved": false, "iteration": 2, "prompt_tokens": 1883, "completion_tokens": 462, "duration": 13.236069440841675}, {"generated_code": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return True\n    \n    return False", "is_solved": false, "iteration": 3, "prompt_tokens": 2662, "completion_tokens": 578, "duration": 15.774845600128174}, {"generated_code": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    \n    return len(stack) > 1", "is_solved": false, "iteration": 4, "prompt_tokens": 3409, "completion_tokens": 721, "duration": 18.541314363479614}, {"generated_code": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    \n    return len(stack) < len(string) // 2", "is_solved": false, "iteration": 5, "prompt_tokens": 4137, "completion_tokens": 849, "duration": 21.16891098022461}, {"generated_code": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    \n    return len(stack) > 0", "is_solved": false, "iteration": 6, "prompt_tokens": 4898, "completion_tokens": 988, "duration": 23.721230030059814}, {"generated_code": "def is_nested(string):\n    open_brackets = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']':\n            if open_brackets > 0:\n                open_brackets -= 1\n    \n    return open_brackets != 0", "is_solved": false, "iteration": 7, "prompt_tokens": 5616, "completion_tokens": 1103, "duration": 26.002543926239014}, {"generated_code": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    \n    return len(stack) != 0", "is_solved": false, "iteration": 8, "prompt_tokens": 6364, "completion_tokens": 1228, "duration": 29.028491020202637}, {"generated_code": "def is_nested(string):\n    opening_brackets = 0\n    \n    for char in string:\n        if char == '[':\n            opening_brackets += 1\n        elif char == ']' and opening_brackets > 0:\n            opening_brackets -= 1\n    \n    return opening_brackets < len(string) // 2", "is_solved": false, "iteration": 9, "prompt_tokens": 7134, "completion_tokens": 1402, "duration": 33.14496397972107}]}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    sequence = [3, 1, 2]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i+1])\n    return sequence", "is_solved": false, "iterations": 9, "prompt_tokens": 8660, "completion_tokens": 1496, "duration": 38.15151262283325, "iteration_states": [{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 0, "prompt_tokens": 285, "completion_tokens": 108, "duration": 6.019955396652222}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [3]\n        for i in range(1, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 1, "prompt_tokens": 1216, "completion_tokens": 254, "duration": 9.427140712738037}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [3]\n        for i in range(1, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 2, "prompt_tokens": 2143, "completion_tokens": 396, "duration": 13.017624855041504}, {"generated_code": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [3]\n        for i in range(1, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 3, "prompt_tokens": 3099, "completion_tokens": 565, "duration": 18.709240674972534}, {"generated_code": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [3]\n        for i in range(1, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 4, "prompt_tokens": 4022, "completion_tokens": 705, "duration": 21.582395553588867}, {"generated_code": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [3]\n        for i in range(1, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 5, "prompt_tokens": 4963, "completion_tokens": 863, "duration": 25.670521020889282}, {"generated_code": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [3, 1]\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n            else:\n                sequence.append(1 + i // 2)\n        return sequence", "is_solved": false, "iteration": 6, "prompt_tokens": 5900, "completion_tokens": 1022, "duration": 28.553067445755005}, {"generated_code": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    sequence = [3, 1, 2]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n    return sequence", "is_solved": false, "iteration": 7, "prompt_tokens": 6826, "completion_tokens": 1187, "duration": 32.20996928215027}, {"generated_code": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    sequence = [3, 1, 2]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        else:\n            sequence.append(1 + i // 2)\n    return sequence", "is_solved": false, "iteration": 8, "prompt_tokens": 7750, "completion_tokens": 1335, "duration": 35.08882403373718}, {"generated_code": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    sequence = [3, 1, 2]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i+1])\n    return sequence", "is_solved": false, "iteration": 9, "prompt_tokens": 8660, "completion_tokens": 1496, "duration": 38.15151262283325}]}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    def collatz_seq(num):\n        seq = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = 3 * num + 1\n            seq.append(num)\n        return seq\n\n    return sorted(list(set([num for num in collatz_seq(n) if num % 2 != 0])))", "is_solved": false, "iterations": 9, "prompt_tokens": 9392, "completion_tokens": 1512, "duration": 37.847346782684326, "iteration_states": [{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": false, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828}, {"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0 and num != 1])))", "is_solved": false, "iteration": 1, "prompt_tokens": 1269, "completion_tokens": 237, "duration": 7.567545652389526}, {"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": false, "iteration": 2, "prompt_tokens": 2269, "completion_tokens": 374, "duration": 11.442848920822144}, {"generated_code": "def get_odd_collatz(n):\n    def collatz_seq(num):\n        seq = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = 3 * num + 1\n            seq.append(num)\n        return seq\n\n    return sorted(list(set([num for num in collatz_seq(n) if num % 2 != 0])))", "is_solved": false, "iteration": 3, "prompt_tokens": 3258, "completion_tokens": 531, "duration": 14.650032043457031}, {"generated_code": "def get_odd_collatz(n):\n    def collatz_seq(num):\n        seq = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = 3 * num + 1\n            seq.append(num)\n        return seq\n    \n    return sorted([num for num in collatz_seq(n) if num % 2 != 0])", "is_solved": false, "iteration": 4, "prompt_tokens": 4291, "completion_tokens": 712, "duration": 18.124914407730103}, {"generated_code": "def get_odd_collatz(n):\n    def collatz_seq(num):\n        seq = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = 3 * num + 1\n            seq.append(num)\n        return seq\n    \n    return sorted([num for num in collatz_seq(n) if num % 2 != 0 and num != 1])", "is_solved": false, "iteration": 5, "prompt_tokens": 5293, "completion_tokens": 871, "duration": 21.661707639694214}, {"generated_code": "def get_odd_collatz(n):\n    def collatz_seq(num):\n        seq = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = 3 * num + 1\n            seq.append(num)\n        return seq\n    \n    return sorted([num for num in collatz_seq(n) if num % 2 != 0 and num != 1 and num % 2 != 0])", "is_solved": false, "iteration": 6, "prompt_tokens": 6311, "completion_tokens": 1032, "duration": 27.535919427871704}, {"generated_code": "def get_odd_collatz(n):\n    def collatz_seq(num):\n        seq = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = 3 * num + 1\n            seq.append(num)\n        return seq\n\n    return sorted(list(set([num for num in collatz_seq(n) if num % 2 != 0 and num != 1])))", "is_solved": false, "iteration": 7, "prompt_tokens": 7369, "completion_tokens": 1211, "duration": 31.25115656852722}, {"generated_code": "def get_odd_collatz(n):\n    def collatz_seq(num):\n        seq = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = 3 * num + 1\n            seq.append(num)\n        return seq\n\n    return sorted(list(set([num for num in collatz_seq(n) if num % 2 != 0])))", "is_solved": false, "iteration": 8, "prompt_tokens": 8382, "completion_tokens": 1352, "duration": 34.46754765510559}, {"generated_code": "def get_odd_collatz(n):\n    def collatz_seq(num):\n        seq = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = 3 * num + 1\n            seq.append(num)\n        return seq\n\n    return sorted(list(set([num for num in collatz_seq(n) if num % 2 != 0])))", "is_solved": false, "iteration": 9, "prompt_tokens": 9392, "completion_tokens": 1512, "duration": 37.847346782684326}]}
{"task_id": "HumanEval/143", "generated_code": "import sympy\n\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        return sympy.isprime(num)\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    return ' '.join(prime_words)", "is_solved": false, "iterations": 9, "prompt_tokens": 7213, "completion_tokens": 1368, "duration": 32.20463562011719, "iteration_states": [{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875}, {"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_prime_word(word):\n        return is_prime(len(word))\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime_word(word)]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 1, "prompt_tokens": 978, "completion_tokens": 251, "duration": 6.930092096328735}, {"generated_code": "import sympy\n\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        return sympy.isprime(num)\n\n    def is_prime_word(word):\n        return is_prime(len(word))\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime_word(word)]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 2, "prompt_tokens": 1799, "completion_tokens": 385, "duration": 9.827860832214355}, {"generated_code": "import sympy\n\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        return sympy.isprime(num)\n\n    def is_prime_word(word):\n        return is_prime(len(word))\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime_word(word)]\n    \n    if prime_words:\n        return ' '.join(prime_words)\n    else:\n        return ''", "is_solved": false, "iteration": 3, "prompt_tokens": 2556, "completion_tokens": 537, "duration": 12.6135995388031}, {"generated_code": "import sympy\n\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        return sympy.isprime(num)\n\n    def is_prime_word(word):\n        word_length = len(word)\n        return is_prime(sum(ord(char) for char in word))\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime_word(word)]\n    \n    if prime_words:\n        return ' '.join(prime_words)\n    else:\n        return ''", "is_solved": false, "iteration": 4, "prompt_tokens": 3337, "completion_tokens": 702, "duration": 17.72022294998169}, {"generated_code": "import sympy\n\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        return sympy.isprime(num)\n\n    def is_prime_length_word(word):\n        word_length = len(word)\n        return is_prime(word_length)\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime_length_word(word)]\n    \n    if prime_words:\n        return ' '.join(prime_words)\n    else:\n        return ''", "is_solved": false, "iteration": 5, "prompt_tokens": 4158, "completion_tokens": 865, "duration": 20.98688530921936}, {"generated_code": "import sympy\n\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        return sympy.isprime(num)\n\n    def is_prime_word(word):\n        word_length = len(word)\n        return is_prime(word_length)\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime_word(word)]\n    \n    if prime_words:\n        return ' '.join(prime_words)\n    else:\n        return ''", "is_solved": false, "iteration": 6, "prompt_tokens": 4938, "completion_tokens": 1005, "duration": 23.88208818435669}, {"generated_code": "import sympy\n\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        return sympy.isprime(num)\n\n    words = sentence.split()\n    prime_words = [word for word in words if all(is_prime(len(word)) for word in words)]\n    \n    return ' '.join(prime_words)", "is_solved": false, "iteration": 7, "prompt_tokens": 5728, "completion_tokens": 1133, "duration": 27.268829345703125}, {"generated_code": "import sympy\n\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        return sympy.isprime(num)\n\n    words = sentence.split()\n    prime_words = [word for word in words if all(is_prime(len(word)) for letter in word)]\n    \n    return ' '.join(prime_words)", "is_solved": false, "iteration": 8, "prompt_tokens": 6474, "completion_tokens": 1245, "duration": 29.823230504989624}, {"generated_code": "import sympy\n\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        return sympy.isprime(num)\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    return ' '.join(prime_words)", "is_solved": false, "iteration": 9, "prompt_tokens": 7213, "completion_tokens": 1368, "duration": 32.20463562011719}]}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float_or_int(value):\n        if isinstance(value, (int, float)):\n            return value\n        elif isinstance(value, str):\n            value = value.replace(',', '.')\n            return float(value) if '.' in value else int(value)\n    \n    a_converted = convert_to_float_or_int(a)\n    b_converted = convert_to_float_or_int(b)\n    \n    if a_converted == b_converted:\n        return None\n    elif isinstance(a_converted, str) and isinstance(b_converted, (float, int)):\n        return b\n    elif isinstance(b_converted, str) and isinstance(a_converted, (float, int)):\n        return a\n    else:\n        return a if a_converted > b_converted else b", "is_solved": true, "iterations": 9, "prompt_tokens": 8037, "completion_tokens": 1637, "duration": 37.801685094833374, "iteration_states": [{"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "is_solved": false, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}, {"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if type(a) == type(b):\n        return a if a > b else b\n    return a if isinstance(a, (float, int)) else b", "is_solved": false, "iteration": 1, "prompt_tokens": 924, "completion_tokens": 154, "duration": 5.399919033050537}, {"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else b\n    return a if isinstance(a, (float, int)) else b", "is_solved": false, "iteration": 2, "prompt_tokens": 1693, "completion_tokens": 274, "duration": 8.341206312179565}, {"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if (isinstance(a, int) or isinstance(a, float)) and (isinstance(b, int) or isinstance(b, float)):\n        return a if a > b else b\n    return a if isinstance(a, (float, int)) else b", "is_solved": false, "iteration": 3, "prompt_tokens": 2474, "completion_tokens": 406, "duration": 11.654996871948242}, {"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if (isinstance(a, int) or isinstance(a, float)) and (isinstance(b, int) or isinstance(b, float)):\n        return a if a > b else b\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.') if ',' in a else a\n        b = b.replace(',', '.') if ',' in b else b\n        return a if float(a) > float(b) else b\n    return a if isinstance(a, (float, int)) else b", "is_solved": false, "iteration": 4, "prompt_tokens": 3261, "completion_tokens": 579, "duration": 14.998603582382202}, {"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    \n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else b\n    \n    if isinstance(a, str) and isinstance(b, str):\n        try:\n            a = float(a.replace(',', '.'))\n            b = float(b.replace(',', '.'))\n            return a if a > b else b\n        except ValueError:\n            return a if len(a) > len(b) else b\n    \n    return a if isinstance(a, (float, int)) else b", "is_solved": false, "iteration": 5, "prompt_tokens": 4158, "completion_tokens": 749, "duration": 20.85920023918152}, {"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    \n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else b\n    \n    if isinstance(a, str) and isinstance(b, str):\n        try:\n            a = a.replace(',', '.')\n            b = b.replace(',', '.')\n            a = float(a) if '.' in a else int(a)\n            b = float(b) if '.' in b else int(b)\n            return a if a > b else b\n        except ValueError:\n            return a if len(a) > len(b) else b\n    \n    return a if isinstance(a, (float, int)) else b", "is_solved": false, "iteration": 6, "prompt_tokens": 5071, "completion_tokens": 957, "duration": 25.004577159881592}, {"generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    \n    def convert_to_float_or_int(value):\n        if isinstance(value, (int, float)):\n            return value\n        elif isinstance(value, str):\n            value = value.replace(',', '.')\n            return float(value) if '.' in value else int(value)\n    \n    a_converted = convert_to_float_or_int(a)\n    b_converted = convert_to_float_or_int(b)\n    \n    return a if a_converted is None or (isinstance(a_converted, (float, int)) and isinstance(b_converted, str)) else b if b_converted is None or (isinstance(b_converted, (float, int)) and isinstance(a_converted, str)) else a_converted if a_converted > b_converted else b_converted", "is_solved": false, "iteration": 7, "prompt_tokens": 6050, "completion_tokens": 1200, "duration": 29.0427725315094}, {"generated_code": "def compare_one(a, b):\n    def convert_to_float_or_int(value):\n        if isinstance(value, (int, float)):\n            return value\n        elif isinstance(value, str):\n            value = value.replace(',', '.')\n            return float(value) if '.' in value else int(value)\n    \n    a_converted = convert_to_float_or_int(a)\n    b_converted = convert_to_float_or_int(b)\n    \n    if a_converted == b_converted:\n        return None\n    elif isinstance(a_converted, str) and isinstance(b_converted, (float, int)):\n        return b\n    elif isinstance(b_converted, str) and isinstance(a_converted, (float, int)):\n        return a\n    else:\n        return a_converted if a_converted > b_converted else b_converted", "is_solved": false, "iteration": 8, "prompt_tokens": 7066, "completion_tokens": 1435, "duration": 34.093469858169556}, {"generated_code": "def compare_one(a, b):\n    def convert_to_float_or_int(value):\n        if isinstance(value, (int, float)):\n            return value\n        elif isinstance(value, str):\n            value = value.replace(',', '.')\n            return float(value) if '.' in value else int(value)\n    \n    a_converted = convert_to_float_or_int(a)\n    b_converted = convert_to_float_or_int(b)\n    \n    if a_converted == b_converted:\n        return None\n    elif isinstance(a_converted, str) and isinstance(b_converted, (float, int)):\n        return b\n    elif isinstance(b_converted, str) and isinstance(a_converted, (float, int)):\n        return a\n    else:\n        return a if a_converted > b_converted else b", "is_solved": true, "iteration": 9, "prompt_tokens": 8037, "completion_tokens": 1637, "duration": 37.801685094833374}]}
{"task_id": "HumanEval/127", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start <= intersection_end:\n        intersection_length = intersection_end - intersection_start + 1\n        \n        if intersection_length <= 0: \n            return \"NO\"\n        \n        return \"YES\" if is_prime(intersection_length) else \"NO\"\n    \n    return \"NO\"", "is_solved": false, "iterations": 9, "prompt_tokens": 10707, "completion_tokens": 2368, "duration": 48.63642740249634, "iteration_states": [{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 0, "prompt_tokens": 304, "completion_tokens": 159, "duration": 5.277536869049072}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start <= intersection_end:\n        length = intersection_end - intersection_start + 1\n        if is_prime(length):\n            return \"YES\"\n    return \"NO\"", "is_solved": false, "iteration": 1, "prompt_tokens": 1402, "completion_tokens": 352, "duration": 9.742536306381226}, {"generated_code": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start <= intersection_end:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 2, "prompt_tokens": 2473, "completion_tokens": 480, "duration": 12.303000688552856}, {"generated_code": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start <= intersection_end:\n        intersection_length = intersection_end - intersection_start + 1\n        \n        if intersection_length <= 1:\n            return \"NO\"\n        \n        for i in range(2, int(intersection_length**0.5) + 1):\n            if intersection_length % i == 0:\n                return \"NO\"\n        \n        return \"YES\"\n    \n    return \"NO\"", "is_solved": false, "iteration": 3, "prompt_tokens": 3409, "completion_tokens": 671, "duration": 16.60811758041382}, {"generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start <= intersection_end:\n        intersection_length = intersection_end - intersection_start + 1\n        \n        if is_prime(intersection_length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    return \"NO\"", "is_solved": false, "iteration": 4, "prompt_tokens": 4464, "completion_tokens": 919, "duration": 21.546329736709595}, {"generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start <= intersection_end:\n        intersection_length = intersection_end - intersection_start + 1\n        \n        if intersection_length <= 1: \n            return \"NO\" # Special case where the intersection is a single point (length 1 or 0)\n\n        for i in range(2, int(intersection_length**0.5) + 1):\n            if intersection_length % i == 0:\n                return \"NO\"\n        \n        return \"YES\" if is_prime(intersection_length) else \"NO\"\n    \n    return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 5649, "completion_tokens": 1237, "duration": 26.574429273605347}, {"generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start <= intersection_end:\n        intersection_length = intersection_end - intersection_start + 1\n        \n        if intersection_length <= 1: \n            return \"NO\" # Special case where the intersection is a single point (length 1 or 0)\n\n        return \"YES\" if is_prime(intersection_length) else \"NO\"\n    \n    return \"NO\"", "is_solved": false, "iteration": 6, "prompt_tokens": 6948, "completion_tokens": 1504, "duration": 33.30651879310608}, {"generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start <= intersection_end:\n        intersection_length = intersection_end - intersection_start + 1\n        \n        if intersection_length <= 1: \n            return \"NO\" # Special case where the intersection is a single point (length 1 or 0)\n\n        return \"YES\" if is_prime(intersection_length) else \"NO\"\n    \n    return \"NO\"", "is_solved": false, "iteration": 7, "prompt_tokens": 8198, "completion_tokens": 1799, "duration": 38.710110902786255}, {"generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start <= intersection_end:\n        intersection_length = intersection_end - intersection_start + 1\n        \n        if intersection_length <= 1: \n            return \"NO\" # Special case where the intersection is a single point (length 1 or 0)\n\n        return \"YES\" if is_prime(abs(intersection_length)) else \"NO\"\n    \n    return \"NO\"", "is_solved": false, "iteration": 8, "prompt_tokens": 9440, "completion_tokens": 2081, "duration": 44.307016372680664}, {"generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start <= intersection_end:\n        intersection_length = intersection_end - intersection_start + 1\n        \n        if intersection_length <= 0: \n            return \"NO\"\n        \n        return \"YES\" if is_prime(intersection_length) else \"NO\"\n    \n    return \"NO\"", "is_solved": false, "iteration": 9, "prompt_tokens": 10707, "completion_tokens": 2368, "duration": 48.63642740249634}]}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iterations": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "iteration_states": [{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438}]}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    start, end = (a, b) if a < b else (b, a)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": true, "iterations": 2, "prompt_tokens": 1514, "completion_tokens": 284, "duration": 8.984832286834717, "iteration_states": [{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 0, "prompt_tokens": 154, "completion_tokens": 35, "duration": 3.812481641769409}, {"generated_code": "def generate_integers(a, b):\n    if a < b:\n        return [i for i in range(a, b+1) if i % 2 == 0]\n    else:\n        return [i for i in range(a, b-1, -1) if i % 2 == 0]", "is_solved": false, "iteration": 1, "prompt_tokens": 788, "completion_tokens": 156, "duration": 6.377397298812866}, {"generated_code": "def generate_integers(a, b):\n    start, end = (a, b) if a < b else (b, a)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": true, "iteration": 2, "prompt_tokens": 1514, "completion_tokens": 284, "duration": 8.984832286834717}]}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    if k == 1:\n        return [min(min(grid))]\n    \n    heap = [(grid[i][0], i, 0, [grid[i][0]]) for i in range(n)]\n    \n    while heap:\n        val, i, j, path = heappop(heap)\n        if len(path) == k:\n            return path\n        \n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            ni, nj = i + dx, j + dy\n            if 0 <= ni < n and 0 <= nj < n:\n                heappush(heap, (grid[ni][nj], ni, nj, path + [grid[ni][nj]]))", "is_solved": true, "iterations": 2, "prompt_tokens": 3150, "completion_tokens": 746, "duration": 12.034085750579834, "iteration_states": [{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            result = dfs(i, j, 1, [grid[i][j]])\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 446, "completion_tokens": 263, "duration": 4.281391620635986}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    heap = [(grid[i][0], i, 0, [grid[i][0]]) for i in range(n)]\n    \n    while heap:\n        val, i, j, path = heappop(heap)\n        if len(path) == k:\n            return path\n        \n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            ni, nj = i + dx, j + dy\n            if 0 <= ni < n and 0 <= nj < n:\n                heappush(heap, (grid[ni][nj], ni, nj, path + [grid[ni][nj]]))", "is_solved": false, "iteration": 1, "prompt_tokens": 1904, "completion_tokens": 506, "duration": 8.2070894241333}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    if k == 1:\n        return [min(min(grid))]\n    \n    heap = [(grid[i][0], i, 0, [grid[i][0]]) for i in range(n)]\n    \n    while heap:\n        val, i, j, path = heappop(heap)\n        if len(path) == k:\n            return path\n        \n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            ni, nj = i + dx, j + dy\n            if 0 <= ni < n and 0 <= nj < n:\n                heappush(heap, (grid[ni][nj], ni, nj, path + [grid[ni][nj]]))", "is_solved": true, "iteration": 2, "prompt_tokens": 3150, "completion_tokens": 746, "duration": 12.034085750579834}]}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            result += char.lower() if char.isupper() else char.upper()\n        else:\n            result += char\n    return result[::-1] if has_letter and any(c.islower() for c in s) else s[::-1]", "is_solved": false, "iterations": 9, "prompt_tokens": 6954, "completion_tokens": 1360, "duration": 28.389514207839966, "iteration_states": [{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383}, {"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]  # Reverse the input string when no letters are present\n    return result", "is_solved": false, "iteration": 1, "prompt_tokens": 885, "completion_tokens": 224, "duration": 6.926273584365845}, {"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]  # Reverse the input string when no letters are present\n    return result[::-1]  # Reverse the result containing reversed cases of letters", "is_solved": false, "iteration": 2, "prompt_tokens": 1658, "completion_tokens": 401, "duration": 9.961209297180176}, {"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]  # Reverse the input string when no letters are present\n    return result", "is_solved": false, "iteration": 3, "prompt_tokens": 2437, "completion_tokens": 533, "duration": 12.641663312911987}, {"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]  # Reverse the input string only when no letters are present\n    return result", "is_solved": false, "iteration": 4, "prompt_tokens": 3200, "completion_tokens": 688, "duration": 15.382004261016846}, {"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]  # Reverse the input string only when no letters are present\n    return result[::-1] if has_letter else s", "is_solved": false, "iteration": 5, "prompt_tokens": 3949, "completion_tokens": 835, "duration": 18.329854249954224}, {"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]  # Reverse the input string only when no letters are present\n    return result[::-1] if has_letter else s", "is_solved": false, "iteration": 6, "prompt_tokens": 4739, "completion_tokens": 995, "duration": 21.219610691070557}, {"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            result += char.lower() if char.isupper() else char.upper()\n        else:\n            result += char\n    return result[::-1] if has_letter else s[::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5515, "completion_tokens": 1112, "duration": 23.478159189224243}, {"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            result += char.lower() if char.isupper() else char.upper()\n        else:\n            result += char\n    return result[::-1] if has_letter else s[::-1]", "is_solved": false, "iteration": 8, "prompt_tokens": 6227, "completion_tokens": 1223, "duration": 26.050527811050415}, {"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            result += char.lower() if char.isupper() else char.upper()\n        else:\n            result += char\n    return result[::-1] if has_letter and any(c.islower() for c in s) else s[::-1]", "is_solved": false, "iteration": 9, "prompt_tokens": 6954, "completion_tokens": 1360, "duration": 28.389514207839966}]}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    precedence = {'+': 1, '-': 1, '*': 2, '//': 2, '**': 3}\n\n    def apply_operator(op, num1, num2):\n        if op == '+':\n            return num1 + num2\n        elif op == '-':\n            return num1 - num2\n        elif op == '*':\n            return num1 * num2\n        elif op == '//':\n            return num1 // num2\n        elif op == '**':\n            return num1 ** num2\n\n    stack = []\n    operator_stack = []\n\n    for i in range(len(operators)):\n        while operator_stack and precedence[operators[i]] <= precedence[operator_stack[-1]]:\n            op = operator_stack.pop()\n            num2 = stack.pop()\n            num1 = stack.pop()\n            stack.append(apply_operator(op, num1, num2))\n        stack.append(operands[i])\n        if i < len(operators):\n            operator_stack.append(operators[i])\n\n    while operator_stack:\n        op = operator_stack.pop()\n        num2 = stack.pop()\n        num1 = stack.pop()\n        stack.append(apply_operator(op, num1, num2))\n\n    return stack[0]", "is_solved": false, "iterations": 9, "prompt_tokens": 11706, "completion_tokens": 3074, "duration": 52.7838397026062, "iteration_states": [{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": false, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'+': 1, '-': 1, '*': 2, '//': 2, '**': 3}\n\n    def apply_operator(op, num1, num2):\n        if op == '+':\n            return num1 + num2\n        elif op == '-':\n            return num1 - num2\n        elif op == '*':\n            return num1 * num2\n        elif op == '//':\n            return num1 // num2\n        elif op == '**':\n            return num1 ** num2\n\n    stack = []\n    operator_stack = []\n    \n    for i in range(len(operands)):\n        stack.append(operands[i])\n        if i < len(operators):\n            while operator_stack and precedence[operators[i]] <= precedence[operator_stack[-1]]:\n                op = operator_stack.pop()\n                num2 = stack.pop()\n                num1 = stack.pop()\n                stack.append(apply_operator(op, num1, num2))\n            operator_stack.append(operators[i])\n\n    while operator_stack:\n        op = operator_stack.pop()\n        num2 = stack.pop()\n        num1 = stack.pop()\n        stack.append(apply_operator(op, num1, num2))\n\n    return stack[0]", "is_solved": false, "iteration": 1, "prompt_tokens": 1107, "completion_tokens": 386, "duration": 7.103396892547607}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'+': 1, '-': 1, '*': 2, '//': 2, '**': 3}\n\n    def apply_operator(op, num1, num2):\n        if op == '+':\n            return num1 + num2\n        elif op == '-':\n            return num1 - num2\n        elif op == '*':\n            return num1 * num2\n        elif op == '//':\n            return num1 // num2\n        elif op == '**':\n            return num1 ** num2\n\n    stack = []\n    operator_stack = []\n    \n    for i in range(len(operators)):\n        while operator_stack and precedence[operators[i]] <= precedence[operator_stack[-1]]:\n            op = operator_stack.pop()\n            num2 = stack.pop()\n            num1 = stack.pop()\n            stack.append(apply_operator(op, num1, num2))\n        stack.append(operands[i])\n        operator_stack.append(operators[i])\n\n    while operator_stack:\n        op = operator_stack.pop()\n        num2 = stack.pop()\n        num1 = stack.pop()\n        stack.append(apply_operator(op, num1, num2))\n\n    return stack[0]", "is_solved": false, "iteration": 2, "prompt_tokens": 2390, "completion_tokens": 718, "duration": 13.087999820709229}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'+': 1, '-': 1, '*': 2, '//': 2, '**': 3}\n\n    def apply_operator(op, num1, num2):\n        if op == '+':\n            return num1 + num2\n        elif op == '-':\n            return num1 - num2\n        elif op == '*':\n            return num1 * num2\n        elif op == '//':\n            return num1 // num2\n        elif op == '**':\n            return num1 ** num2\n\n    stack = []\n    operator_stack = []\n    \n    for i in range(len(operators)):\n        while operator_stack and precedence[operators[i]] <= precedence[operator_stack[-1]]:\n            op = operator_stack.pop()\n            num2 = stack.pop()\n            num1 = stack.pop()\n            stack.append(apply_operator(op, num1, num2))\n        stack.append(operands[i])\n        operator_stack.append(operators[i])\n\n    while operator_stack:\n        op = operator_stack.pop()\n        num2 = stack.pop()\n        num1 = stack.pop()\n        stack.append(apply_operator(op, num1, num2))\n\n    if len(stack) != 1:\n        raise ValueError(\"Incorrect number of operands and operators provided.\")\n    \n    return stack[0]", "is_solved": false, "iteration": 3, "prompt_tokens": 3672, "completion_tokens": 1045, "duration": 18.36176633834839}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'+': 1, '-': 1, '*': 2, '//': 2, '**': 3}\n\n    def apply_operator(op, num1, num2):\n        if op == '+':\n            return num1 + num2\n        elif op == '-':\n            return num1 - num2\n        elif op == '*':\n            return num1 * num2\n        elif op == '//':\n            return num1 // num2\n        elif op == '**':\n            return num1 ** num2\n\n    stack = []\n    operator_stack = []\n    \n    for i in range(len(operators)):\n        while operator_stack and precedence[operators[i]] <= precedence[operator_stack[-1]]:\n            op = operator_stack.pop()\n            num2 = stack.pop()\n            num1 = stack.pop()\n            stack.append(apply_operator(op, num1, num2))\n        stack.append(operands[i])\n        operator_stack.append(operators[i])\n\n    while operator_stack:\n        op = operator_stack.pop()\n        num2 = stack.pop()\n        num1 = stack.pop()\n        stack.append(apply_operator(op, num1, num2))\n\n    if len(stack) != 1:\n        raise ValueError(\"Incorrect number of operands and operators provided.\")\n    \n    return stack[0]", "is_solved": false, "iteration": 4, "prompt_tokens": 5010, "completion_tokens": 1384, "duration": 25.455891847610474}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'+': 1, '-': 1, '*': 2, '//': 2, '**': 3}\n\n    def apply_operator(op, num1, num2):\n        if op == '+':\n            return num1 + num2\n        elif op == '-':\n            return num1 - num2\n        elif op == '*':\n            return num1 * num2\n        elif op == '//':\n            return num1 // num2\n        elif op == '**':\n            return num1 ** num2\n\n    stack = []\n    operator_stack = []\n    \n    for i in range(len(operators)):\n        while operator_stack and precedence[operators[i]] <= precedence[operator_stack[-1]]:\n            op = operator_stack.pop()\n            num2 = stack.pop()\n            num1 = stack.pop()\n            stack.append(apply_operator(op, num1, num2))\n        stack.append(operands[i])\n        if i < len(operators):\n            operator_stack.append(operators[i])\n\n    while operator_stack:\n        op = operator_stack.pop()\n        num2 = stack.pop()\n        num1 = stack.pop()\n        stack.append(apply_operator(op, num1, num2))\n\n    if len(stack) != 1:\n        raise ValueError(\"Incorrect number of operands and operators provided.\")\n    \n    return stack[0]", "is_solved": false, "iteration": 5, "prompt_tokens": 6345, "completion_tokens": 1728, "duration": 31.379349946975708}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'+': 1, '-': 1, '*': 2, '//': 2, '**': 3}\n\n    def apply_operator(op, num1, num2):\n        if op == '+':\n            return num1 + num2\n        elif op == '-':\n            return num1 - num2\n        elif op == '*':\n            return num1 * num2\n        elif op == '//':\n            return num1 // num2\n        elif op == '**':\n            return num1 ** num2\n\n    stack = []\n    operator_stack = []\n    \n    for i in range(len(operators)):\n        while operator_stack and precedence[operators[i]] <= precedence[operator_stack[-1]]:\n            op = operator_stack.pop()\n            num2 = stack.pop()\n            num1 = stack.pop()\n            stack.append(apply_operator(op, num1, num2))\n        stack.append(operands[i])\n        if i < len(operators) - 1:\n            operator_stack.append(operators[i])\n\n    while operator_stack:\n        op = operator_stack.pop()\n        num2 = stack.pop()\n        num1 = stack.pop()\n        stack.append(apply_operator(op, num1, num2))\n\n    if len(stack) != 1:\n        raise ValueError(\"Incorrect number of operands and operators provided.\")\n    \n    return stack[0]", "is_solved": false, "iteration": 6, "prompt_tokens": 7698, "completion_tokens": 2078, "duration": 36.61216139793396}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'+': 1, '-': 1, '*': 2, '//': 2, '**': 3}\n\n    def apply_operator(op, num1, num2):\n        if op == '+':\n            return num1 + num2\n        elif op == '-':\n            return num1 - num2\n        elif op == '*':\n            return num1 * num2\n        elif op == '//':\n            return num1 // num2\n        elif op == '**':\n            return num1 ** num2\n\n    stack = []\n    operator_stack = []\n    \n    for i in range(len(operators)):\n        while operator_stack and precedence[operators[i]] <= precedence[operator_stack[-1]]:\n            op = operator_stack.pop()\n            num2 = stack.pop()\n            num1 = stack.pop()\n            stack.append(apply_operator(op, num1, num2))\n        stack.append(operands[i])\n        if i < len(operators):\n            operator_stack.append(operators[i])\n\n    while operator_stack:\n        op = operator_stack.pop()\n        num2 = stack.pop()\n        num1 = stack.pop()\n        stack.append(apply_operator(op, num1, num2))\n\n    return stack[0]", "is_solved": false, "iteration": 7, "prompt_tokens": 9060, "completion_tokens": 2403, "duration": 42.55664920806885}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'+': 1, '-': 1, '*': 2, '//': 2, '**': 3}\n\n    def apply_operator(op, num1, num2):\n        if op == '+':\n            return num1 + num2\n        elif op == '-':\n            return num1 - num2\n        elif op == '*':\n            return num1 * num2\n        elif op == '//':\n            return num1 // num2\n        elif op == '**':\n            return num1 ** num2\n\n    stack = []\n    operator_stack = []\n    \n    for i in range(len(operators)):\n        while operator_stack and precedence[operators[i]] <= precedence[operator_stack[-1]]:\n            op = operator_stack.pop()\n            num2 = stack.pop()\n            num1 = stack.pop()\n            stack.append(apply_operator(op, num1, num2))\n        stack.append(operands[i])\n        if i < len(operators) - 1:\n            operator_stack.append(operators[i])\n\n    while operator_stack:\n        op = operator_stack.pop()\n        num2 = stack.pop()\n        num1 = stack.pop()\n        stack.append(apply_operator(op, num1, num2))\n\n    return stack[0]", "is_solved": false, "iteration": 8, "prompt_tokens": 10370, "completion_tokens": 2732, "duration": 47.33478665351868}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'+': 1, '-': 1, '*': 2, '//': 2, '**': 3}\n\n    def apply_operator(op, num1, num2):\n        if op == '+':\n            return num1 + num2\n        elif op == '-':\n            return num1 - num2\n        elif op == '*':\n            return num1 * num2\n        elif op == '//':\n            return num1 // num2\n        elif op == '**':\n            return num1 ** num2\n\n    stack = []\n    operator_stack = []\n\n    for i in range(len(operators)):\n        while operator_stack and precedence[operators[i]] <= precedence[operator_stack[-1]]:\n            op = operator_stack.pop()\n            num2 = stack.pop()\n            num1 = stack.pop()\n            stack.append(apply_operator(op, num1, num2))\n        stack.append(operands[i])\n        if i < len(operators):\n            operator_stack.append(operators[i])\n\n    while operator_stack:\n        op = operator_stack.pop()\n        num2 = stack.pop()\n        num1 = stack.pop()\n        stack.append(apply_operator(op, num1, num2))\n\n    return stack[0]", "is_solved": false, "iteration": 9, "prompt_tokens": 11706, "completion_tokens": 3074, "duration": 52.7838397026062}]}
