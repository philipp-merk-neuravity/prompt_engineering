{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117, "iteration_states": [{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.7879819869995117}]}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455, "iteration_states": [{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            temp += '('\n        elif char == ')':\n            stack.pop()\n            temp += ')'\n            if not stack:\n                result.append(temp)\n                temp = ''\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 86, "duration": 4.6310436725616455}]}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098, "iteration_states": [{"generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098}]}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iterations": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693, "iteration_states": [{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693}]}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793, "iteration_states": [{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 56, "duration": 3.8390955924987793}]}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222, "iteration_states": [{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 97, "duration": 4.703549146652222}]}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))\n\n# Test cases\nprint(sum_product([]))  # (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)", "is_solved": true, "iterations": 0, "prompt_tokens": 160, "completion_tokens": 103, "duration": 4.0435051918029785, "iteration_states": [{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))\n\n# Test cases\nprint(sum_product([]))  # (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 103, "duration": 4.0435051918029785}]}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928, "iteration_states": [{"generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928}]}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iterations": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049, "iteration_states": [{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049}]}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iterations": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785, "iteration_states": [{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785}]}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iterations": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287, "iteration_states": [{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.6700150966644287}]}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iterations": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146, "iteration_states": [{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146}]}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iterations": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464, "iteration_states": [{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464}]}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504, "iteration_states": [{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504}]}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iterations": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827, "iteration_states": [{"generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827}]}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iterations": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672, "iteration_states": [{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.686016082763672}]}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iterations": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945, "iteration_states": [{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3969316482543945}]}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iterations": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462, "iteration_states": [{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462}]}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iterations": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275, "iteration_states": [{"generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275}]}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iterations": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634, "iteration_states": [{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634}]}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iterations": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334, "iteration_states": [{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334}]}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iterations": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355, "iteration_states": [{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355}]}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iterations": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329, "iteration_states": [{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329}]}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iterations": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695, "iteration_states": [{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.4382829666137695}]}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iterations": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717, "iteration_states": [{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717}]}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iterations": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982, "iteration_states": [{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982}]}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248, "iteration_states": [{"generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248}]}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iterations": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844, "iteration_states": [{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844}]}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iterations": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704, "iteration_states": [{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704}]}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iterations": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204, "iteration_states": [{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204}]}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iterations": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094, "iteration_states": [{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094}]}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iterations": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064, "iteration_states": [{"generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064}]}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iterations": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773, "iteration_states": [{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773}]}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735, "iteration_states": [{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735}]}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iterations": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395, "iteration_states": [{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395}]}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iterations": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555, "iteration_states": [{"generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555}]}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iterations": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554, "iteration_states": [{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554}]}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iterations": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255, "iteration_states": [{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255}]}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iterations": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788, "iteration_states": [{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788}]}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iterations": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431, "iteration_states": [{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431}]}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iterations": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785, "iteration_states": [{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785}]}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iterations": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365, "iteration_states": [{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365}]}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iterations": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541, "iteration_states": [{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541}]}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    sorted_even_values = [val for val in sorted([l[i] for i in even_indices])]\n    \n    result = [val if idx % 2 != 0 else sorted_even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iterations": 1, "prompt_tokens": 894, "completion_tokens": 199, "duration": 6.752565145492554, "iteration_states": [{"generated_code": "def sort_even(l: list):\n    even_values = sorted([x for x in l[::2]])\n    result = [val if idx % 2 == 0 else even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.5508744716644287}, {"generated_code": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    sorted_even_values = [val for val in sorted([l[i] for i in even_indices])]\n    \n    result = [val if idx % 2 != 0 else sorted_even_values.pop(0) for idx, val in enumerate(l)]\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 894, "completion_tokens": 199, "duration": 6.752565145492554}]}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n", "is_solved": true, "iterations": 2, "prompt_tokens": 1590, "completion_tokens": 195, "duration": 8.859933376312256, "iteration_states": [{"generated_code": "def car_race_collision(n: int):\n    return n*(n-1)", "is_solved": false, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 20, "duration": 4.578029155731201}, {"generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "is_solved": false, "iteration": 1, "prompt_tokens": 883, "completion_tokens": 112, "duration": 6.807376384735107}, {"generated_code": "def car_race_collision(n: int):\n    return n", "is_solved": true, "iteration": 2, "prompt_tokens": 1590, "completion_tokens": 195, "duration": 8.859933376312256}]}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iterations": 2, "prompt_tokens": 1862, "completion_tokens": 230, "duration": 10.02322006225586, "iteration_states": [{"generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "is_solved": false, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 28, "duration": 5.186999797821045}, {"generated_code": "def same_chars(s0: str, s1: str):\n    return all(s0.count(char) == s1.count(char) for char in set(s0 + s1))", "is_solved": false, "iteration": 1, "prompt_tokens": 866, "completion_tokens": 112, "duration": 7.331965923309326}, {"generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 2, "prompt_tokens": 1862, "completion_tokens": 230, "duration": 10.02322006225586}]}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return min(strings, key=lambda x: (-len(x), x))", "is_solved": true, "iterations": 3, "prompt_tokens": 2002, "completion_tokens": 287, "duration": 9.28892207145691, "iteration_states": [{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "is_solved": false, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.525851011276245}, {"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return min(strings, key=lambda x: (len(x), x))", "is_solved": false, "iteration": 1, "prompt_tokens": 754, "completion_tokens": 107, "duration": 5.496907711029053}, {"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "is_solved": false, "iteration": 2, "prompt_tokens": 1350, "completion_tokens": 169, "duration": 7.026868581771851}, {"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return min(strings, key=lambda x: (-len(x), x))", "is_solved": true, "iteration": 3, "prompt_tokens": 2002, "completion_tokens": 287, "duration": 9.28892207145691}]}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    converted_num = ''\n    while x > 0:\n        remainder = x % base\n        converted_num = str(remainder) + converted_num\n        x = x // base\n\n    return converted_num", "is_solved": true, "iterations": 3, "prompt_tokens": 2260, "completion_tokens": 377, "duration": 11.99656891822815, "iteration_states": [{"generated_code": "def change_base(x: int, base: int):\n    return str(int(str(x), 10 if base == 10 else base))", "is_solved": false, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 32, "duration": 4.395244598388672}, {"generated_code": "def change_base(x: int, base: int):\n    return '{:b}'.format(int(str(x), base))", "is_solved": false, "iteration": 1, "prompt_tokens": 843, "completion_tokens": 112, "duration": 6.722393035888672}, {"generated_code": "def change_base(x: int, base: int):\n    return '{:0{width}d}'.format(int(str(x), 10), width=len(bin(x)) - 2 if x else 1).replace('0b', '').replace('0', '0' * (base - 1))", "is_solved": false, "iteration": 2, "prompt_tokens": 1544, "completion_tokens": 238, "duration": 9.24214220046997}, {"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    converted_num = ''\n    while x > 0:\n        remainder = x % base\n        converted_num = str(remainder) + converted_num\n        x = x // base\n\n    return converted_num", "is_solved": true, "iteration": 3, "prompt_tokens": 2260, "completion_tokens": 377, "duration": 11.99656891822815}]}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": false, "iterations": 9, "prompt_tokens": 5595, "completion_tokens": 628, "duration": 20.362769842147827, "iteration_states": [{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": false, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047}, {"generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "is_solved": false, "iteration": 1, "prompt_tokens": 738, "completion_tokens": 85, "duration": 5.448019504547119}, {"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": false, "iteration": 2, "prompt_tokens": 1340, "completion_tokens": 148, "duration": 7.569296836853027}, {"generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "is_solved": false, "iteration": 3, "prompt_tokens": 1952, "completion_tokens": 221, "duration": 9.55004358291626}, {"generated_code": "def truncate_number(number: float) -> float:\n    return abs(number) % 1", "is_solved": false, "iteration": 4, "prompt_tokens": 2557, "completion_tokens": 289, "duration": 11.330442190170288}, {"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": false, "iteration": 5, "prompt_tokens": 3170, "completion_tokens": 359, "duration": 13.148121356964111}, {"generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "is_solved": false, "iteration": 6, "prompt_tokens": 3773, "completion_tokens": 423, "duration": 14.994300365447998}, {"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": false, "iteration": 7, "prompt_tokens": 4374, "completion_tokens": 485, "duration": 16.75932550430298}, {"generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "is_solved": false, "iteration": 8, "prompt_tokens": 4984, "completion_tokens": 556, "duration": 18.487920999526978}, {"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": false, "iteration": 9, "prompt_tokens": 5595, "completion_tokens": 628, "duration": 20.362769842147827}]}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iterations": 9, "prompt_tokens": 6807, "completion_tokens": 932, "duration": 24.18157172203064, "iteration_states": [{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437}, {"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if s.startswith(substring)]", "is_solved": false, "iteration": 1, "prompt_tokens": 869, "completion_tokens": 133, "duration": 6.182821035385132}, {"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 2, "prompt_tokens": 1632, "completion_tokens": 241, "duration": 8.582966327667236}, {"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 3, "prompt_tokens": 2384, "completion_tokens": 364, "duration": 11.032068252563477}, {"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if s.startswith(substring) or s.endswith(substring)]", "is_solved": false, "iteration": 4, "prompt_tokens": 3113, "completion_tokens": 471, "duration": 13.84230089187622}, {"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 5, "prompt_tokens": 3873, "completion_tokens": 564, "duration": 15.759923934936523}, {"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s.split()]", "is_solved": false, "iteration": 6, "prompt_tokens": 4608, "completion_tokens": 671, "duration": 17.97383761405945}, {"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 7, "prompt_tokens": 5347, "completion_tokens": 755, "duration": 20.112510204315186}, {"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if s.startswith(substring)]", "is_solved": false, "iteration": 8, "prompt_tokens": 6075, "completion_tokens": 855, "duration": 22.091150522232056}, {"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 9, "prompt_tokens": 6807, "completion_tokens": 932, "duration": 24.18157172203064}]}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if ((i % 11 == 0 or i % 13 == 0) and '7' in str(i)))", "is_solved": false, "iterations": 9, "prompt_tokens": 5865, "completion_tokens": 1075, "duration": 26.372055530548096, "iteration_states": [{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 57, "duration": 4.1797919273376465}, {"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0 or '7' in str(i)))", "is_solved": false, "iteration": 1, "prompt_tokens": 803, "completion_tokens": 185, "duration": 6.815620422363281}, {"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and '7' in str(i))", "is_solved": false, "iteration": 2, "prompt_tokens": 1432, "completion_tokens": 285, "duration": 9.329998254776001}, {"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and '7' in str(i))", "is_solved": false, "iteration": 3, "prompt_tokens": 2074, "completion_tokens": 408, "duration": 11.653170585632324}, {"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and str(i).endswith('7'))", "is_solved": false, "iteration": 4, "prompt_tokens": 2709, "completion_tokens": 525, "duration": 14.057294368743896}, {"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and str(i)[-1] == '7')", "is_solved": false, "iteration": 5, "prompt_tokens": 3347, "completion_tokens": 644, "duration": 17.21845054626465}, {"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if str(i)[-1] == '7')", "is_solved": false, "iteration": 6, "prompt_tokens": 3979, "completion_tokens": 737, "duration": 19.18348479270935}, {"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and '7' in str(i))", "is_solved": false, "iteration": 7, "prompt_tokens": 4574, "completion_tokens": 833, "duration": 21.08348250389099}, {"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0 or '7' in str(i)))", "is_solved": false, "iteration": 8, "prompt_tokens": 5209, "completion_tokens": 948, "duration": 23.603639841079712}, {"generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if ((i % 11 == 0 or i % 13 == 0) and '7' in str(i)))", "is_solved": false, "iteration": 9, "prompt_tokens": 5865, "completion_tokens": 1075, "duration": 26.372055530548096}]}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107, "iteration_states": [{"generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107}]}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iterations": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684, "iteration_states": [{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684}]}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iterations": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214, "iteration_states": [{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214}]}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iterations": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987, "iteration_states": [{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987}]}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iterations": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924, "iteration_states": [{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924}]}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iterations": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926, "iteration_states": [{"generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926}]}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iterations": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723, "iteration_states": [{"generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723}]}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iterations": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351, "iteration_states": [{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351}]}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iterations": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045, "iteration_states": [{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045}]}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iterations": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304, "iteration_states": [{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304}]}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iterations": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392, "iteration_states": [{"generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392}]}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021, "iteration_states": [{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021}]}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iterations": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145, "iteration_states": [{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145}]}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iterations": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395, "iteration_states": [{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395}]}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iterations": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664, "iteration_states": [{"generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664}]}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iterations": 0, "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516, "iteration_states": [{"generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516}]}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iterations": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291, "iteration_states": [{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}]}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355, "iteration_states": [{"generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355}]}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iterations": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805, "iteration_states": [{"generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805}]}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": true, "iterations": 0, "prompt_tokens": 171, "completion_tokens": 47, "duration": 1.0319738388061523, "iteration_states": [{"generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 47, "duration": 1.0319738388061523}]}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iterations": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783, "iteration_states": [{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783}]}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iterations": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475, "iteration_states": [{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475}]}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iterations": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296, "iteration_states": [{"generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296}]}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721, "iteration_states": [{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721}]}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727, "iteration_states": [{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727}]}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403, "iteration_states": [{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403}]}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297, "iteration_states": [{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297}]}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iterations": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802, "iteration_states": [{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802}]}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225, "iteration_states": [{"generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225}]}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iterations": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723, "iteration_states": [{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723}]}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iterations": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731, "iteration_states": [{"generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731}]}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iterations": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601, "iteration_states": [{"generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601}]}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iterations": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994, "iteration_states": [{"generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994}]}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iterations": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414, "iteration_states": [{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414}]}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iterations": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715, "iteration_states": [{"generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715}]}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iterations": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159, "iteration_states": [{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159}]}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iterations": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854, "iteration_states": [{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854}]}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iterations": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544, "iteration_states": [{"generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544}]}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033, "iteration_states": [{"generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033}]}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iterations": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187, "iteration_states": [{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187}]}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if not array:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iterations": 1, "prompt_tokens": 1126, "completion_tokens": 141, "duration": 5.735494375228882, "iteration_states": [{"generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": false, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 50, "duration": 3.571953773498535}, {"generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if not array:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 1, "prompt_tokens": 1126, "completion_tokens": 141, "duration": 5.735494375228882}]}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return int(round(a**(1/3)))**3 == a", "is_solved": true, "iterations": 1, "prompt_tokens": 758, "completion_tokens": 100, "duration": 6.744335889816284, "iteration_states": [{"generated_code": "def iscube(a):\n    return int(a**(1/3))**3 == a", "is_solved": false, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 23, "duration": 4.322655439376831}, {"generated_code": "def iscube(a):\n    return int(round(a**(1/3)))**3 == a", "is_solved": true, "iteration": 1, "prompt_tokens": 758, "completion_tokens": 100, "duration": 6.744335889816284}]}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    uppercase_keys = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return lowercase_keys or uppercase_keys", "is_solved": true, "iterations": 1, "prompt_tokens": 1049, "completion_tokens": 174, "duration": 8.700589179992676, "iteration_states": [{"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(key.islower() for key in dict.keys())\n    uppercase_keys = all(key.isupper() for key in dict.keys())\n    \n    return lowercase_keys or uppercase_keys", "is_solved": false, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 62, "duration": 6.021496057510376}, {"generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lowercase_keys = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    uppercase_keys = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return lowercase_keys or uppercase_keys", "is_solved": true, "iteration": 1, "prompt_tokens": 1049, "completion_tokens": 174, "duration": 8.700589179992676}]}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    result = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    return result", "is_solved": true, "iterations": 1, "prompt_tokens": 1048, "completion_tokens": 168, "duration": 6.421461343765259, "iteration_states": [{"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            return num\n    return -1", "is_solved": false, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 49, "duration": 3.606308937072754}, {"generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    result = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1048, "completion_tokens": 168, "duration": 6.421461343765259}]}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for char in s:\n        if char.lower() in vowels or (char.lower() == 'y' and s.index(char) == len(s)-1):\n            count += 1\n    \n    return count", "is_solved": true, "iterations": 1, "prompt_tokens": 884, "completion_tokens": 224, "duration": 8.394565105438232, "iteration_states": [{"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    if s[-1].lower() == 'y':\n        count += 1\n    \n    for char in s[:-1]:\n        if char.lower() in vowels:\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 78, "duration": 5.1695027351379395}, {"generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for char in s:\n        if char.lower() in vowels or (char.lower() == 'y' and s.index(char) == len(s)-1):\n            count += 1\n    \n    return count", "is_solved": true, "iteration": 1, "prompt_tokens": 884, "completion_tokens": 224, "duration": 8.394565105438232}]}
{"task_id": "HumanEval/75", "generated_code": "import itertools\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n):\n            if n % i == 0 and is_prime(i):\n                factors.append(i)\n        return factors\n\n    factors = prime_factors(a)\n    if len(factors) >= 3:\n        for comb in itertools.combinations(factors, 3):\n            if a == comb[0] * comb[1] * comb[2]:\n                return True\n    return False", "is_solved": true, "iterations": 2, "prompt_tokens": 1692, "completion_tokens": 547, "duration": 14.324835300445557, "iteration_states": [{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3", "is_solved": false, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 106, "duration": 6.856443166732788}, {"generated_code": "import itertools\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0:\n            factors = [x for x in range(2, i) if is_prime(x)]\n            if len(factors) == 3:\n                return True\n    return False", "is_solved": false, "iteration": 1, "prompt_tokens": 887, "completion_tokens": 299, "duration": 10.59190845489502}, {"generated_code": "import itertools\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n):\n            if n % i == 0 and is_prime(i):\n                factors.append(i)\n        return factors\n\n    factors = prime_factors(a)\n    if len(factors) >= 3:\n        for comb in itertools.combinations(factors, 3):\n            if a == comb[0] * comb[1] * comb[2]:\n                return True\n    return False", "is_solved": true, "iteration": 2, "prompt_tokens": 1692, "completion_tokens": 547, "duration": 14.324835300445557}]}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[i-1] % 2 == 0:\n            stones.append(stones[i-1] + 2)\n        else:\n            stones.append(stones[i-1] + 2)\n    return stones", "is_solved": true, "iterations": 3, "prompt_tokens": 2572, "completion_tokens": 488, "duration": 14.49055552482605, "iteration_states": [{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "is_solved": false, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 61, "duration": 5.982418060302734}, {"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[i-1] % 2 == 0:\n            stones.append(stones[i-1] + 1)\n        else:\n            stones.append(stones[i-1] + 2)\n    return stones", "is_solved": false, "iteration": 1, "prompt_tokens": 966, "completion_tokens": 212, "duration": 9.1459481716156}, {"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[i-1] % 2 == 0:\n            stones.append(stones[i-1] + 2)\n        else:\n            stones.append(stones[i-1] + 1)\n    return stones", "is_solved": false, "iteration": 2, "prompt_tokens": 1776, "completion_tokens": 351, "duration": 11.923846960067749}, {"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if stones[i-1] % 2 == 0:\n            stones.append(stones[i-1] + 2)\n        else:\n            stones.append(stones[i-1] + 2)\n    return stones", "is_solved": true, "iteration": 3, "prompt_tokens": 2572, "completion_tokens": 488, "duration": 14.49055552482605}]}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iterations": 9, "prompt_tokens": 5837, "completion_tokens": 860, "duration": 23.073581218719482, "iteration_states": [{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795}, {"generated_code": "def add(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 != 0 and num % 2 == 0)", "is_solved": false, "iteration": 1, "prompt_tokens": 770, "completion_tokens": 152, "duration": 5.791555881500244}, {"generated_code": "def add(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 == 0)", "is_solved": false, "iteration": 2, "prompt_tokens": 1427, "completion_tokens": 264, "duration": 8.089600324630737}, {"generated_code": "def add(lst):\n    return sum(num for num in lst if num % 2 == 0)", "is_solved": false, "iteration": 3, "prompt_tokens": 2062, "completion_tokens": 332, "duration": 9.929603815078735}, {"generated_code": "def add(lst):\n    return sum(lst[1::2])", "is_solved": false, "iteration": 4, "prompt_tokens": 2689, "completion_tokens": 408, "duration": 11.89081335067749}, {"generated_code": "def add(lst):\n    return sum(num for num in lst if num % 2 == 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 3299, "completion_tokens": 479, "duration": 14.521569728851318}, {"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 6, "prompt_tokens": 3907, "completion_tokens": 557, "duration": 16.36378836631775}, {"generated_code": "def add(lst):\n    return sum(num for num in lst[1::2] if num % 2 == 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 4583, "completion_tokens": 679, "duration": 18.850569009780884}, {"generated_code": "def add(lst):\n    return sum(num for num in lst if num % 2 == 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 5226, "completion_tokens": 779, "duration": 21.045777082443237}, {"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 9, "prompt_tokens": 5837, "completion_tokens": 860, "duration": 23.073581218719482}]}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iterations": 9, "prompt_tokens": 6559, "completion_tokens": 1195, "duration": 29.15178871154785, "iteration_states": [{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379}, {"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 1, "prompt_tokens": 850, "completion_tokens": 207, "duration": 8.705132961273193}, {"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 2, "prompt_tokens": 1561, "completion_tokens": 333, "duration": 11.363365173339844}, {"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 3, "prompt_tokens": 2276, "completion_tokens": 424, "duration": 13.357106924057007}, {"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 4, "prompt_tokens": 3016, "completion_tokens": 577, "duration": 16.19537663459778}, {"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 5, "prompt_tokens": 3720, "completion_tokens": 696, "duration": 18.85654902458191}, {"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 6, "prompt_tokens": 4431, "completion_tokens": 822, "duration": 21.352818250656128}, {"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 7, "prompt_tokens": 5135, "completion_tokens": 941, "duration": 23.869516611099243}, {"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 8, "prompt_tokens": 5855, "completion_tokens": 1076, "duration": 26.555686950683594}, {"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 9, "prompt_tokens": 6559, "completion_tokens": 1195, "duration": 29.15178871154785}]}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift < len(x_str) else x_str[::-1]", "is_solved": false, "iterations": 9, "prompt_tokens": 6613, "completion_tokens": 1171, "duration": 30.202576160430908, "iteration_states": [{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 55, "duration": 6.772214412689209}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str)//2 else x_str[::-1]", "is_solved": false, "iteration": 1, "prompt_tokens": 831, "completion_tokens": 190, "duration": 10.024978876113892}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str)//2 else x_str[-shift:] + x_str[:-shift][::-1]", "is_solved": false, "iteration": 2, "prompt_tokens": 1554, "completion_tokens": 318, "duration": 12.479777574539185}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    elif shift < len(x_str) // 2:\n        return x_str[-shift:] + x_str[:-shift]\n    else:\n        return x_str[-shift:] + x_str[:-shift][::-1]", "is_solved": false, "iteration": 3, "prompt_tokens": 2292, "completion_tokens": 449, "duration": 15.234420776367188}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 4, "prompt_tokens": 3064, "completion_tokens": 547, "duration": 17.30552649497986}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    elif shift > len(x_str) // 2:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 5, "prompt_tokens": 3726, "completion_tokens": 679, "duration": 19.93097734451294}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 6, "prompt_tokens": 4470, "completion_tokens": 794, "duration": 22.275214672088623}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str)//2 else x_str[-shift:] + x_str[:-shift] if shift % len(x_str) == 0 else x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 7, "prompt_tokens": 5152, "completion_tokens": 939, "duration": 25.241878032684326}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 8, "prompt_tokens": 5923, "completion_tokens": 1047, "duration": 27.548754692077637}, {"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    \n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift < len(x_str) else x_str[::-1]", "is_solved": false, "iteration": 9, "prompt_tokens": 6613, "completion_tokens": 1171, "duration": 30.202576160430908}]}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "is_solved": false, "iterations": 9, "prompt_tokens": 6213, "completion_tokens": 1195, "duration": 25.252203226089478, "iteration_states": [{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": false, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098}, {"generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "is_solved": false, "iteration": 1, "prompt_tokens": 783, "completion_tokens": 181, "duration": 4.561720609664917}, {"generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "is_solved": false, "iteration": 2, "prompt_tokens": 1450, "completion_tokens": 296, "duration": 6.72767186164856}, {"generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "is_solved": false, "iteration": 3, "prompt_tokens": 2152, "completion_tokens": 446, "duration": 9.53291940689087}, {"generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "is_solved": false, "iteration": 4, "prompt_tokens": 2834, "completion_tokens": 576, "duration": 11.877538204193115}, {"generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "is_solved": false, "iteration": 5, "prompt_tokens": 3498, "completion_tokens": 688, "duration": 14.070940017700195}, {"generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "is_solved": false, "iteration": 6, "prompt_tokens": 4181, "completion_tokens": 819, "duration": 16.595054149627686}, {"generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "is_solved": false, "iteration": 7, "prompt_tokens": 4858, "completion_tokens": 944, "duration": 19.655583381652832}, {"generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "is_solved": false, "iteration": 8, "prompt_tokens": 5545, "completion_tokens": 1079, "duration": 22.363101482391357}, {"generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "is_solved": false, "iteration": 9, "prompt_tokens": 6213, "completion_tokens": 1195, "duration": 25.252203226089478}]}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    degree = len(xs) - 1\n    largest_nonzero_coeff = xs[degree]\n    \n    return -largest_nonzero_coeff / xs[degree-1]", "is_solved": false, "iterations": 9, "prompt_tokens": 8382, "completion_tokens": 1362, "duration": 30.00211238861084, "iteration_states": [{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": false, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784}, {"generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    # Find the non-zero coefficient with the largest degree\n    max_coeff_idx = max(enumerate(xs), key=lambda x: abs(x[1]))[0]\n\n    return -xs[max_coeff_idx - 1] / xs[max_coeff_idx]", "is_solved": false, "iteration": 1, "prompt_tokens": 1087, "completion_tokens": 184, "duration": 6.952931642532349}, {"generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    # Find the non-zero coefficient with the largest degree\n    max_coeff_idx = max(enumerate(xs), key=lambda x: abs(x[1]))[0]\n\n    return -xs[max_coeff_idx] / xs[max_coeff_idx - 1]", "is_solved": false, "iteration": 2, "prompt_tokens": 1981, "completion_tokens": 329, "duration": 9.618776559829712}, {"generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    # Find the root of the polynomial using numpy's roots function\n    roots = np.roots(xs)\n\n    # Filter out complex roots and return the real part of the first root\n    return roots[np.isreal(roots)][0].real", "is_solved": false, "iteration": 3, "prompt_tokens": 2878, "completion_tokens": 465, "duration": 12.313237428665161}, {"generated_code": "import numpy as np\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    # Find the root of the polynomial using numpy's roots function\n    roots = np.roots(xs)\n\n    # Filter out complex roots and return the real part of the first root\n    return roots[np.isreal(roots)].real[0]", "is_solved": false, "iteration": 4, "prompt_tokens": 3796, "completion_tokens": 601, "duration": 14.75747036933899}, {"generated_code": "import numpy as np\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    # Find the root of the polynomial using numpy's roots function\n    roots = np.roots(xs)\n\n    # Filter out complex roots and return the real part of the first root\n    real_roots = [root.real for root in roots if np.isreal(root)]\n    return real_roots[0] if real_roots else None", "is_solved": false, "iteration": 5, "prompt_tokens": 4705, "completion_tokens": 776, "duration": 18.30622625350952}, {"generated_code": "import numpy as np\n\ndef find_zero(xs: list):\n    # Find the roots of the polynomial using numpy's roots function\n    roots = np.roots(xs)\n\n    # Filter out complex roots and return the real part of the first root\n    real_roots = [root.real for root in roots if np.isreal(root)]\n    return real_roots[0] if real_roots else None", "is_solved": false, "iteration": 6, "prompt_tokens": 5641, "completion_tokens": 911, "duration": 20.906015396118164}, {"generated_code": "import math\n\ndef find_zero(xs: list):\n    a, b = xs\n    return -b / a", "is_solved": false, "iteration": 7, "prompt_tokens": 6539, "completion_tokens": 1003, "duration": 22.99564003944397}, {"generated_code": "import math\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    degree = len(xs) - 1\n    largest_nonzero_coeff = xs[degree]\n    \n    if degree % 2 != 0:\n        raise ValueError(\"Input list must represent a polynomial with an even degree.\")\n    \n    return -largest_nonzero_coeff / xs[degree-1]", "is_solved": false, "iteration": 8, "prompt_tokens": 7415, "completion_tokens": 1236, "duration": 27.323614358901978}, {"generated_code": "import math\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Input list must have an even number of coefficients.\")\n    \n    degree = len(xs) - 1\n    largest_nonzero_coeff = xs[degree]\n    \n    return -largest_nonzero_coeff / xs[degree-1]", "is_solved": false, "iteration": 9, "prompt_tokens": 8382, "completion_tokens": 1362, "duration": 30.00211238861084}]}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    \n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i:i+2] in durations:\n            result.append(durations[music_string[i:i+2]])\n            i += 2\n        else:\n            result.append(durations[music_string[i]])\n            i += 1\n    \n    return result", "is_solved": false, "iterations": 9, "prompt_tokens": 11226, "completion_tokens": 1557, "duration": 32.06639528274536, "iteration_states": [{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "is_solved": false, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 59, "duration": 3.708634614944458}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    \n    result = []\n    for note in notes:\n        if note in durations:\n            result.append(durations[note])\n        elif note == 'o|':\n            result.append(2)\n        else:\n            result.append(1)\n    \n    return result", "is_solved": false, "iteration": 1, "prompt_tokens": 1345, "completion_tokens": 220, "duration": 7.404860973358154}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 4, '.|': 1}\n    notes = music_string.split()\n    \n    result = []\n    for note in notes:\n        if note in durations:\n            result.append(durations[note])\n    \n    return result", "is_solved": false, "iteration": 2, "prompt_tokens": 2613, "completion_tokens": 423, "duration": 10.90469241142273}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    \n    notes = music_string.split()\n    \n    result = []\n    for note in notes:\n        if note in durations:\n            result.append(durations[note])\n    \n    return result", "is_solved": false, "iteration": 3, "prompt_tokens": 3787, "completion_tokens": 555, "duration": 13.501347780227661}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    \n    notes = music_string.split()\n    \n    result = []\n    for note in notes:\n        duration = note.replace('|', '')\n        if duration in durations:\n            result.append(durations[duration])\n    \n    return result", "is_solved": false, "iteration": 4, "prompt_tokens": 4932, "completion_tokens": 688, "duration": 16.022406101226807}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    \n    notes = music_string.split()\n    \n    result = []\n    for note in notes:\n        if note in durations:\n            result.append(durations[note])\n    \n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 6132, "completion_tokens": 828, "duration": 18.533361673355103}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    \n    notes = music_string.split()\n    \n    result = []\n    for note in notes:\n        found = False\n        for key in durations:\n            if key in note:\n                result.append(durations[key])\n                found = True\n        if not found:\n            raise ValueError(f\"Invalid note: {note}\")\n    \n    return result", "is_solved": false, "iteration": 6, "prompt_tokens": 7279, "completion_tokens": 986, "duration": 21.418003797531128}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    \n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i:i+2] in durations:\n            result.append(durations[music_string[i:i+2]])\n            i += 2\n        elif music_string[i] in durations:\n            result.append(durations[music_string[i]])\n            i += 1\n        else:\n            raise ValueError(f\"Invalid note: {music_string[i:i+2]}\")\n    \n    return result", "is_solved": false, "iteration": 7, "prompt_tokens": 8530, "completion_tokens": 1194, "duration": 25.231400728225708}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    \n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i:i+2] in durations:\n            result.append(durations[music_string[i:i+2]])\n            i += 2\n        elif music_string[i] in durations:\n            result.append(durations[music_string[i]])\n            i += 1\n        else:\n            raise ValueError(f\"Invalid note: {music_string[i:i+2]}\")\n    \n    return result", "is_solved": false, "iteration": 8, "prompt_tokens": 9882, "completion_tokens": 1393, "duration": 28.714832305908203}, {"generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    \n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i:i+2] in durations:\n            result.append(durations[music_string[i:i+2]])\n            i += 2\n        else:\n            result.append(durations[music_string[i]])\n            i += 1\n    \n    return result", "is_solved": false, "iteration": 9, "prompt_tokens": 11226, "completion_tokens": 1557, "duration": 32.06639528274536}]}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    def find_longest_palindrome(s: str) -> str:\n        for i in range(len(s), 0, -1):\n            if s[:i] == s[:i][::-1]:\n                return s[:i]\n\n    if not string:\n        return ''\n\n    longest_palindrome = find_longest_palindrome(string)\n    \n    if string == string[::-1]:  # Check if the string is already a palindrome\n        return string\n    \n    return string + string[:len(string) - len(longest_palindrome)][::-1] if len(longest_palindrome) != len(string) else string[:len(string)-1]", "is_solved": false, "iterations": 9, "prompt_tokens": 7379, "completion_tokens": 1584, "duration": 33.2076621055603, "iteration_states": [{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i-1][::-1]", "is_solved": false, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 64, "duration": 3.7330939769744873}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i-1][::-1]\n    \n    return string + string[:-1][::-1]", "is_solved": false, "iteration": 1, "prompt_tokens": 917, "completion_tokens": 195, "duration": 6.804359197616577}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i-1][::-1]\n    \n    return string + string[:-1][::-1] if string != string[::-1] else string", "is_solved": false, "iteration": 2, "prompt_tokens": 1673, "completion_tokens": 341, "duration": 9.717541694641113}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i-1][::-1]\n    \n    return string + string[:-1][::-1] if string != string[::-1] else string", "is_solved": false, "iteration": 3, "prompt_tokens": 2470, "completion_tokens": 508, "duration": 13.029542446136475}, {"generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i-1][::-1]\n    \n    return string + string[:-1][::-1] if string != string[::-1] else string + string[1:][::-1]", "is_solved": false, "iteration": 4, "prompt_tokens": 3264, "completion_tokens": 679, "duration": 16.10872220993042}, {"generated_code": "def make_palindrome(string: str) -> str:\n    def find_longest_palindrome(s: str) -> str:\n        for i in range(len(s), 0, -1):\n            if s[:i] == s[:i][::-1]:\n                return s[:i]\n\n    longest_palindrome = find_longest_palindrome(string)\n    \n    return string + string[:len(string) - len(longest_palindrome)][::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 4044, "completion_tokens": 823, "duration": 18.816351890563965}, {"generated_code": "def make_palindrome(string: str) -> str:\n    def find_longest_palindrome(s: str) -> str:\n        for i in range(len(s), 0, -1):\n            if s[:i] == s[:i][::-1]:\n                return s[:i]\n\n    if not string:\n        return ''\n\n    longest_palindrome = find_longest_palindrome(string)\n    \n    return string + string[:len(string) - len(longest_palindrome)][::-1]", "is_solved": false, "iteration": 6, "prompt_tokens": 4854, "completion_tokens": 985, "duration": 21.90114426612854}, {"generated_code": "def make_palindrome(string: str) -> str:\n    def find_longest_palindrome(s: str) -> str:\n        for i in range(len(s), 0, -1):\n            if s[:i] == s[:i][::-1]:\n                return s[:i]\n\n    if not string:\n        return ''\n\n    longest_palindrome = find_longest_palindrome(string)\n    \n    if string == string[::-1]:  # Check if the string is already a palindrome\n        return string\n    \n    return string + string[:len(string) - len(longest_palindrome)][::-1]", "is_solved": false, "iteration": 7, "prompt_tokens": 5643, "completion_tokens": 1161, "duration": 25.06082320213318}, {"generated_code": "def make_palindrome(string: str) -> str:\n    def find_longest_palindrome(s: str) -> str:\n        for i in range(len(s), 0, -1):\n            if s[:i] == s[:i][::-1]:\n                return s[:i]\n\n    if not string:\n        return ''\n\n    longest_palindrome = find_longest_palindrome(string)\n    \n    if string == string[::-1]:  # Check if the string is already a palindrome\n        return string\n    \n    return string + string[:len(string) - len(longest_palindrome)][::-1] if len(longest_palindrome) != len(string) else string", "is_solved": false, "iteration": 8, "prompt_tokens": 6504, "completion_tokens": 1377, "duration": 29.57830572128296}, {"generated_code": "def make_palindrome(string: str) -> str:\n    def find_longest_palindrome(s: str) -> str:\n        for i in range(len(s), 0, -1):\n            if s[:i] == s[:i][::-1]:\n                return s[:i]\n\n    if not string:\n        return ''\n\n    longest_palindrome = find_longest_palindrome(string)\n    \n    if string == string[::-1]:  # Check if the string is already a palindrome\n        return string\n    \n    return string + string[:len(string) - len(longest_palindrome)][::-1] if len(longest_palindrome) != len(string) else string[:len(string)-1]", "is_solved": false, "iteration": 9, "prompt_tokens": 7379, "completion_tokens": 1584, "duration": 33.2076621055603}]}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n\n    for i in range(len(numbers)-1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n\n    return closest_pair", "is_solved": false, "iterations": 9, "prompt_tokens": 10769, "completion_tokens": 1730, "duration": 35.7558650970459, "iteration_states": [{"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "is_solved": false, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 99, "duration": 4.436337947845459}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pairs = []\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pairs = [(numbers[i], numbers[i+1])]\n        elif diff == min_diff:\n            closest_pairs.append((numbers[i], numbers[i+1]))\n    \n    return closest_pairs[0]", "is_solved": false, "iteration": 1, "prompt_tokens": 1340, "completion_tokens": 274, "duration": 8.30141568183899}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pairs = []\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pairs = [(numbers[i], numbers[i+1])]\n        elif diff == min_diff:\n            closest_pairs.append((numbers[i], numbers[i+1]))\n    \n    return closest_pairs[0] if len(closest_pairs) == 1 else closest_pairs", "is_solved": false, "iteration": 2, "prompt_tokens": 2517, "completion_tokens": 481, "duration": 12.319926261901855}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pairs = []\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pairs = [(numbers[i], numbers[i+1])]\n        elif diff == min_diff:\n            closest_pairs.append((numbers[i], numbers[i+1]))\n    \n    return closest_pairs[0] if len(closest_pairs) == 1 else min(closest_pairs)", "is_solved": false, "iteration": 3, "prompt_tokens": 3717, "completion_tokens": 675, "duration": 15.52213978767395}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pairs = []\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pairs = [(numbers[i], numbers[i+1])]\n        elif diff == min_diff:\n            closest_pairs.append((numbers[i], numbers[i+1]))\n    \n    return closest_pairs[0] if len(closest_pairs) == 1 else min(closest_pairs, key=lambda pair: abs(pair[0] - pair[1]))", "is_solved": false, "iteration": 4, "prompt_tokens": 4899, "completion_tokens": 872, "duration": 19.567827939987183}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pairs = []\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pairs = [(numbers[i], numbers[i+1])]\n        elif diff == min_diff:\n            closest_pairs.append((numbers[i], numbers[i+1]))\n    \n    return min(closest_pairs, key=lambda pair: abs(pair[0] - pair[1]))", "is_solved": false, "iteration": 5, "prompt_tokens": 6108, "completion_tokens": 1055, "duration": 23.052968502044678}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pairs = []\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pairs = [(numbers[i], numbers[i+1])]\n        elif diff == min_diff:\n            closest_pairs.append((numbers[i], numbers[i+1]))\n\n    return min(closest_pairs, key=lambda pair: pair[1] - pair[0])", "is_solved": false, "iteration": 6, "prompt_tokens": 7298, "completion_tokens": 1247, "duration": 26.349332809448242}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pairs = []\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pairs = [(numbers[i], numbers[i+1])]\n        elif diff == min_diff:\n            closest_pairs.append((numbers[i], numbers[i+1]))\n\n    return min(closest_pairs, key=lambda pair: pair[1] - pair[0])", "is_solved": false, "iteration": 7, "prompt_tokens": 8469, "completion_tokens": 1424, "duration": 29.969217538833618}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[j] - numbers[i])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair", "is_solved": false, "iteration": 8, "prompt_tokens": 9655, "completion_tokens": 1586, "duration": 33.24383330345154}, {"generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n\n    for i in range(len(numbers)-1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n\n    return closest_pair", "is_solved": false, "iteration": 9, "prompt_tokens": 10769, "completion_tokens": 1730, "duration": 35.7558650970459}]}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iterations": 9, "prompt_tokens": 12533, "completion_tokens": 2624, "duration": 50.925081729888916, "iteration_states": [{"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 221, "duration": 8.414106845855713}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        if gpa >= 3.7:\n            return 'A'\n        if gpa >= 3.3:\n            return 'A-'\n        if gpa >= 3.0:\n            return 'B+'\n        if gpa >= 2.7:\n            return 'B'\n        if gpa >= 2.3:\n            return 'B-'\n        if gpa >= 2.0:\n            return 'C+'\n        if gpa >= 1.7:\n            return 'C'\n        if gpa >= 1.3:\n            return 'C-'\n        if gpa >= 1.0:\n            return 'D+'\n        if gpa >= 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 1, "prompt_tokens": 1676, "completion_tokens": 487, "duration": 13.99958610534668}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 3.0:\n            return 'B+'\n        elif gpa >= 2.7:\n            return 'B'\n        elif gpa >= 2.3:\n            return 'B-'\n        elif gpa >= 2.0:\n            return 'C+'\n        elif gpa >= 1.7:\n            return 'C'\n        elif gpa >= 1.3:\n            return 'C-'\n        elif gpa >= 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 2, "prompt_tokens": 3042, "completion_tokens": 739, "duration": 19.698902368545532}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 3.0:\n            return 'B+'\n        elif gpa >= 2.7:\n            return 'B'\n        elif gpa >= 2.3:\n            return 'B-'\n        elif gpa >= 2.0:\n            return 'C+'\n        elif gpa >= 1.7:\n            return 'C'\n        elif gpa >= 1.3:\n            return 'C-'\n        elif gpa >= 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 3, "prompt_tokens": 4390, "completion_tokens": 997, "duration": 24.185774326324463}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 4, "prompt_tokens": 5751, "completion_tokens": 1268, "duration": 28.833089113235474}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 3.0:\n            return 'B+'\n        elif gpa >= 2.7:\n            return 'B'\n        elif gpa >= 2.3:\n            return 'B-'\n        elif gpa >= 2.0:\n            return 'C+'\n        elif gpa >= 1.7:\n            return 'C'\n        elif gpa >= 1.3:\n            return 'C-'\n        elif gpa >= 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 5, "prompt_tokens": 7095, "completion_tokens": 1534, "duration": 33.46699380874634}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 3.0:\n            return 'B+'\n        elif gpa >= 2.7:\n            return 'B'\n        elif gpa >= 2.3:\n            return 'B-'\n        elif gpa >= 2.0:\n            return 'C+'\n        elif gpa >= 1.7:\n            return 'C'\n        elif gpa >= 1.3:\n            return 'C-'\n        elif gpa >= 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 6, "prompt_tokens": 8471, "completion_tokens": 1820, "duration": 38.27781128883362}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 7, "prompt_tokens": 9817, "completion_tokens": 2076, "duration": 42.15471887588501}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 3.0:\n            return 'B+'\n        elif gpa >= 2.7:\n            return 'B'\n        elif gpa >= 2.3:\n            return 'B-'\n        elif gpa >= 2.0:\n            return 'C+'\n        elif gpa >= 1.7:\n            return 'C'\n        elif gpa >= 1.3:\n            return 'C-'\n        elif gpa >= 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 8, "prompt_tokens": 11169, "completion_tokens": 2350, "duration": 46.350183725357056}, {"generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [grade(g) for g in grades]", "is_solved": false, "iteration": 9, "prompt_tokens": 12533, "completion_tokens": 2624, "duration": 50.925081729888916}]}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n    \n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iterations": 9, "prompt_tokens": 12793, "completion_tokens": 1871, "duration": 85.02125120162964, "iteration_states": [{"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n    \n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 1, "prompt_tokens": 1723, "completion_tokens": 337, "duration": 10.107035636901855}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n    \n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 2, "prompt_tokens": 3113, "completion_tokens": 535, "duration": 13.658468961715698}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n    \n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 3, "prompt_tokens": 4498, "completion_tokens": 728, "duration": 17.316470623016357}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n    \n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 4, "prompt_tokens": 5857, "completion_tokens": 895, "duration": 21.015045166015625}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n    \n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 5, "prompt_tokens": 7247, "completion_tokens": 1093, "duration": 70.67736482620239}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n    \n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 6, "prompt_tokens": 8642, "completion_tokens": 1296, "duration": 74.54455137252808}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n    \n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 7, "prompt_tokens": 10024, "completion_tokens": 1486, "duration": 78.00053405761719}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n    \n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 8, "prompt_tokens": 11418, "completion_tokens": 1688, "duration": 81.66801857948303}, {"generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n    \n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 9, "prompt_tokens": 12793, "completion_tokens": 1871, "duration": 85.02125120162964}]}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iterations": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547, "iteration_states": [{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547}]}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iterations": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125, "iteration_states": [{"generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125}]}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iterations": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938, "iteration_states": [{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938}]}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723, "iteration_states": [{"generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723}]}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iterations": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926, "iteration_states": [{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926}]}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iterations": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696, "iteration_states": [{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696}]}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iterations": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791, "iteration_states": [{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791}]}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iterations": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156, "iteration_states": [{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156}]}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iterations": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195, "iteration_states": [{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195}]}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iterations": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996, "iteration_states": [{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996}]}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iterations": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674, "iteration_states": [{"generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674}]}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iterations": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018, "iteration_states": [{"generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018}]}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iterations": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169, "iteration_states": [{"generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169}]}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iterations": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076, "iteration_states": [{"generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076}]}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": true, "iterations": 0, "prompt_tokens": 261, "completion_tokens": 126, "duration": 2.1185858249664307, "iteration_states": [{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 126, "duration": 2.1185858249664307}]}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iterations": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797, "iteration_states": [{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797}]}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iterations": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875, "iteration_states": [{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875}]}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iterations": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605, "iteration_states": [{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605}]}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iterations": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635, "iteration_states": [{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635}]}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iterations": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884, "iteration_states": [{"generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884}]}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iterations": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545, "iteration_states": [{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545}]}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iterations": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488, "iteration_states": [{"generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488}]}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iterations": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798, "iteration_states": [{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "is_solved": true, "iteration": 0, "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798}]}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iterations": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018, "iteration_states": [{"generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018}]}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iterations": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438, "iteration_states": [{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438}]}
{"task_id": "HumanEval/115", "generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": true, "iterations": 1, "prompt_tokens": 1405, "completion_tokens": 116, "duration": 6.182273864746094, "iteration_states": [{"generated_code": "def max_fill(grid, capacity):\n    wells = [sum(row) for row in grid]\n    total_water = sum(wells)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": false, "iteration": 0, "prompt_tokens": 373, "completion_tokens": 47, "duration": 3.505402088165283}, {"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    buckets_needed = math.ceil(total_water / capacity)\n    return buckets_needed", "is_solved": true, "iteration": 1, "prompt_tokens": 1405, "completion_tokens": 116, "duration": 6.182273864746094}]}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iterations": 1, "prompt_tokens": 1176, "completion_tokens": 104, "duration": 5.586527585983276, "iteration_states": [{"generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "is_solved": false, "iteration": 0, "prompt_tokens": 267, "completion_tokens": 20, "duration": 2.360170602798462}, {"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 1, "prompt_tokens": 1176, "completion_tokens": 104, "duration": 5.586527585983276}]}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if n - i in range(2, n, 2):\n            count += 1\n    return count >= 2", "is_solved": true, "iterations": 1, "prompt_tokens": 838, "completion_tokens": 211, "duration": 8.822994470596313, "iteration_states": [{"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if n - i in range(2, n, 2):\n            count += 1\n    return count == 4", "is_solved": false, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 64, "duration": 5.258005857467651}, {"generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if n - i in range(2, n, 2):\n            count += 1\n    return count >= 2", "is_solved": true, "iteration": 1, "prompt_tokens": 838, "completion_tokens": 211, "duration": 8.822994470596313}]}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": true, "iterations": 1, "prompt_tokens": 803, "completion_tokens": 151, "duration": 7.803219795227051, "iteration_states": [{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 0, "prompt_tokens": 154, "completion_tokens": 35, "duration": 3.812481641769409}, {"generated_code": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]", "is_solved": true, "iteration": 1, "prompt_tokens": 803, "completion_tokens": 151, "duration": 7.803219795227051}]}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n    \n    return 'Yes' if is_balanced(lst[0] + lst[1]) else 'No'", "is_solved": true, "iterations": 1, "prompt_tokens": 943, "completion_tokens": 209, "duration": 7.984406232833862, "iteration_states": [{"generated_code": "def match_parens(lst):\n    return 'Yes' if abs(lst[0].count('(') - lst[0].count(')')) <= 1 and abs(lst[1].count('(') - lst[1].count(')')) <= 1 else 'No'", "is_solved": false, "iteration": 0, "prompt_tokens": 218, "completion_tokens": 62, "duration": 3.538313865661621}, {"generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n    \n    return 'Yes' if is_balanced(lst[0] + lst[1]) else 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 943, "completion_tokens": 209, "duration": 7.984406232833862}]}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iterations": 1, "prompt_tokens": 1028, "completion_tokens": 211, "duration": 8.966975688934326, "iteration_states": [{"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": false, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 79, "duration": 4.324152231216431}, {"generated_code": "def histogram(test):\n    lst = test.split()\n    hist = {}\n    for letter in lst:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    if not hist:\n        return {}\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "is_solved": true, "iteration": 1, "prompt_tokens": 1028, "completion_tokens": 211, "duration": 8.966975688934326}]}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    prod = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n            has_odd = True\n    return prod if has_odd else 0", "is_solved": true, "iterations": 2, "prompt_tokens": 1394, "completion_tokens": 296, "duration": 6.876667261123657, "iteration_states": [{"generated_code": "def digits(n):\n    prod = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n    return prod if prod != 1 else 0", "is_solved": false, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 53, "duration": 1.1113629341125488}, {"generated_code": "def digits(n):\n    prod = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n    return prod if prod != 1 else 1", "is_solved": false, "iteration": 1, "prompt_tokens": 756, "completion_tokens": 173, "duration": 4.484660387039185}, {"generated_code": "def digits(n):\n    prod = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            prod *= int(digit)\n            has_odd = True\n    return prod if has_odd else 0", "is_solved": true, "iteration": 2, "prompt_tokens": 1394, "completion_tokens": 296, "duration": 6.876667261123657}]}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(set(lst)) == len(lst)", "is_solved": true, "iterations": 2, "prompt_tokens": 2119, "completion_tokens": 285, "duration": 11.136346340179443, "iteration_states": [{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1) if lst.count(lst[i]) == 1)", "is_solved": false, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 43, "duration": 4.305203914642334}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1) if lst.count(lst[i]) == 1) and all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))", "is_solved": false, "iteration": 1, "prompt_tokens": 1201, "completion_tokens": 191, "duration": 8.651299476623535}, {"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(set(lst)) == len(lst)", "is_solved": true, "iteration": 2, "prompt_tokens": 2119, "completion_tokens": 285, "duration": 11.136346340179443}]}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i\n            break\n    return index", "is_solved": true, "iterations": 3, "prompt_tokens": 2198, "completion_tokens": 410, "duration": 13.890673875808716, "iteration_states": [{"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i-1\n            break\n    return index", "is_solved": false, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 52, "duration": 5.050522565841675}, {"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i\n    return index - 1", "is_solved": false, "iteration": 1, "prompt_tokens": 821, "completion_tokens": 158, "duration": 8.12007761001587}, {"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i\n    return index", "is_solved": false, "iteration": 2, "prompt_tokens": 1501, "completion_tokens": 265, "duration": 10.662988901138306}, {"generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i\n            break\n    return index", "is_solved": true, "iteration": 3, "prompt_tokens": 2198, "completion_tokens": 410, "duration": 13.890673875808716}]}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or b in (a*2)", "is_solved": true, "iterations": 4, "prompt_tokens": 2792, "completion_tokens": 408, "duration": 14.27806305885315, "iteration_states": [{"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2)", "is_solved": false, "iteration": 0, "prompt_tokens": 179, "completion_tokens": 29, "duration": 3.6121397018432617}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2)[:len(a)]", "is_solved": false, "iteration": 1, "prompt_tokens": 820, "completion_tokens": 116, "duration": 7.0781660079956055}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a*2) or b in (a*2)[::-1]", "is_solved": false, "iteration": 2, "prompt_tokens": 1471, "completion_tokens": 215, "duration": 9.786983966827393}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a)", "is_solved": false, "iteration": 3, "prompt_tokens": 2119, "completion_tokens": 284, "duration": 11.798997402191162}, {"generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in (a + a) or b in (a*2)", "is_solved": true, "iteration": 4, "prompt_tokens": 2792, "completion_tokens": 408, "duration": 14.27806305885315}]}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a == b:\n            return None\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        a_num = float(a.replace(\",\", \".\"))\n        b_num = float(b.replace(\",\", \".\"))\n        if a_num == b_num:\n            return None\n        return a if a_num > b_num else b\n    elif isinstance(a, (int, float)) and isinstance(b, str):\n        b_num = float(b.replace(\",\", \".\"))\n        if a == b_num:\n            return None\n        return a if a > b_num else b\n    elif isinstance(a, str) and isinstance(b, (int, float)):\n        a_num = float(a.replace(\",\", \".\"))\n        if a_num == b:\n            return None\n        return a if a_num > b else b\n    else:\n        return None", "is_solved": true, "iterations": 3, "prompt_tokens": 2585, "completion_tokens": 616, "duration": 14.307436466217041, "iteration_states": [{"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "is_solved": false, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}, {"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    if isinstance(a, (int, float)) and isinstance(b, str):\n        return a\n    return b", "is_solved": false, "iteration": 1, "prompt_tokens": 932, "completion_tokens": 171, "duration": 6.2347025871276855}, {"generated_code": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a == b:\n            return None\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        a_num = float(a.replace(\",\", \".\"))\n        b_num = float(b.replace(\",\", \".\"))\n        if a_num == b_num:\n            return None\n        return a if a_num > b_num else b\n    else:\n        return None", "is_solved": false, "iteration": 2, "prompt_tokens": 1703, "completion_tokens": 334, "duration": 9.494404315948486}, {"generated_code": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a == b:\n            return None\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        a_num = float(a.replace(\",\", \".\"))\n        b_num = float(b.replace(\",\", \".\"))\n        if a_num == b_num:\n            return None\n        return a if a_num > b_num else b\n    elif isinstance(a, (int, float)) and isinstance(b, str):\n        b_num = float(b.replace(\",\", \".\"))\n        if a == b_num:\n            return None\n        return a if a > b_num else b\n    elif isinstance(a, str) and isinstance(b, (int, float)):\n        a_num = float(a.replace(\",\", \".\"))\n        if a_num == b:\n            return None\n        return a if a_num > b else b\n    else:\n        return None", "is_solved": true, "iteration": 3, "prompt_tokens": 2585, "completion_tokens": 616, "duration": 14.307436466217041}]}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100 or num < 10)", "is_solved": true, "iterations": 6, "prompt_tokens": 5046, "completion_tokens": 680, "duration": 18.454643964767456, "iteration_states": [{"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "is_solved": false, "iteration": 0, "prompt_tokens": 178, "completion_tokens": 31, "duration": 2.967463731765747}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100 or num > 99)", "is_solved": false, "iteration": 1, "prompt_tokens": 1026, "completion_tokens": 182, "duration": 6.572038650512695}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "is_solved": false, "iteration": 2, "prompt_tokens": 1843, "completion_tokens": 277, "duration": 8.870380163192749}, {"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 3, "prompt_tokens": 2626, "completion_tokens": 345, "duration": 10.947664499282837}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "is_solved": false, "iteration": 4, "prompt_tokens": 3397, "completion_tokens": 430, "duration": 13.20291781425476}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "is_solved": false, "iteration": 5, "prompt_tokens": 4177, "completion_tokens": 508, "duration": 15.36128044128418}, {"generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100 or num < 10)", "is_solved": true, "iteration": 6, "prompt_tokens": 5046, "completion_tokens": 680, "duration": 18.454643964767456}]}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))", "is_solved": false, "iterations": 9, "prompt_tokens": 6984, "completion_tokens": 811, "duration": 23.70650887489319, "iteration_states": [{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368}, {"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 1, "prompt_tokens": 968, "completion_tokens": 113, "duration": 6.741738319396973}, {"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x, -x))", "is_solved": false, "iteration": 2, "prompt_tokens": 1715, "completion_tokens": 200, "duration": 8.992942571640015}, {"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 3, "prompt_tokens": 2484, "completion_tokens": 300, "duration": 11.586321353912354}, {"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x, x))", "is_solved": false, "iteration": 4, "prompt_tokens": 3236, "completion_tokens": 391, "duration": 13.645831823348999}, {"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 5, "prompt_tokens": 3996, "completion_tokens": 484, "duration": 16.17445135116577}, {"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))", "is_solved": false, "iteration": 6, "prompt_tokens": 4746, "completion_tokens": 573, "duration": 18.072540283203125}, {"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x, x != 0))", "is_solved": false, "iteration": 7, "prompt_tokens": 5490, "completion_tokens": 657, "duration": 20.03102207183838}, {"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))", "is_solved": false, "iteration": 8, "prompt_tokens": 6241, "completion_tokens": 733, "duration": 21.677948236465454}, {"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))", "is_solved": false, "iteration": 9, "prompt_tokens": 6984, "completion_tokens": 811, "duration": 23.70650887489319}]}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    if all(not c.isupper() for c in result):\n        return result[::-1]\n    return result", "is_solved": true, "iterations": 6, "prompt_tokens": 4876, "completion_tokens": 1071, "duration": 23.9855740070343, "iteration_states": [{"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383}, {"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    if all(not c.isalpha() or c.isupper() for c in s):\n        return s[::-1]\n    return result", "is_solved": false, "iteration": 1, "prompt_tokens": 870, "completion_tokens": 221, "duration": 7.563644647598267}, {"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    if all(not c.isalpha() or c.isupper() for c in s):\n        return s[::-1]\n    return result if any(c.islower() for c in s) else s[::-1]", "is_solved": false, "iteration": 2, "prompt_tokens": 1658, "completion_tokens": 403, "duration": 11.650593042373657}, {"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    if all(not c.isalpha() or c.isupper() for c in result):\n        return s[::-1]\n    return result", "is_solved": false, "iteration": 3, "prompt_tokens": 2498, "completion_tokens": 592, "duration": 15.207045555114746}, {"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    if all(not c.isalpha() or c.isupper() for c in result):\n        return result[::-1]\n    return result", "is_solved": false, "iteration": 4, "prompt_tokens": 3312, "completion_tokens": 773, "duration": 18.295305252075195}, {"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    if all(not c.islower() for c in result):\n        return result[::-1]\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 4092, "completion_tokens": 915, "duration": 21.13002061843872}, {"generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    if all(not c.isupper() for c in result):\n        return result[::-1]\n    return result", "is_solved": true, "iteration": 6, "prompt_tokens": 4876, "completion_tokens": 1071, "duration": 23.9855740070343}]}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 != 0 and num % 2 != 0)", "is_solved": false, "iterations": 9, "prompt_tokens": 6651, "completion_tokens": 883, "duration": 22.223721027374268, "iteration_states": [{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 38, "duration": 1.2757461071014404}, {"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 1, "prompt_tokens": 884, "completion_tokens": 129, "duration": 4.316991806030273}, {"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": false, "iteration": 2, "prompt_tokens": 1618, "completion_tokens": 225, "duration": 7.374762296676636}, {"generated_code": "def solution(lst):\n    return sum(num for num in lst if num % 2 != 0)", "is_solved": false, "iteration": 3, "prompt_tokens": 2387, "completion_tokens": 331, "duration": 9.727234363555908}, {"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 3093, "completion_tokens": 409, "duration": 11.581412076950073}, {"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2))", "is_solved": false, "iteration": 5, "prompt_tokens": 3774, "completion_tokens": 471, "duration": 13.475921154022217}, {"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 6, "prompt_tokens": 4475, "completion_tokens": 548, "duration": 15.473876714706421}, {"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "is_solved": false, "iteration": 7, "prompt_tokens": 5202, "completion_tokens": 660, "duration": 17.67016053199768}, {"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 5918, "completion_tokens": 763, "duration": 19.881930828094482}, {"generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 != 0 and num % 2 != 0)", "is_solved": false, "iteration": 9, "prompt_tokens": 6651, "completion_tokens": 883, "duration": 22.223721027374268}]}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iterations": 9, "prompt_tokens": 7737, "completion_tokens": 920, "duration": 24.03144383430481, "iteration_states": [{"generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 39, "duration": 2.81819486618042}, {"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 1, "prompt_tokens": 1171, "completion_tokens": 157, "duration": 6.06725287437439}, {"generated_code": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x))", "is_solved": false, "iteration": 2, "prompt_tokens": 1998, "completion_tokens": 249, "duration": 8.479100942611694}, {"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 3, "prompt_tokens": 2803, "completion_tokens": 344, "duration": 10.793889999389648}, {"generated_code": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x)) if all(len(word) % 2 == 0 for word in lst) else sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 4, "prompt_tokens": 3611, "completion_tokens": 462, "duration": 13.199216842651367}, {"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 5, "prompt_tokens": 4505, "completion_tokens": 576, "duration": 15.668997764587402}, {"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 6, "prompt_tokens": 5308, "completion_tokens": 649, "duration": 17.337916374206543}, {"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 7, "prompt_tokens": 6113, "completion_tokens": 734, "duration": 19.299099445343018}, {"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: lst.index(x))", "is_solved": false, "iteration": 8, "prompt_tokens": 6928, "completion_tokens": 827, "duration": 21.42221689224243}, {"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 9, "prompt_tokens": 7737, "completion_tokens": 920, "duration": 24.03144383430481}]}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(number):\n        return sum(map(int, str(abs(number))))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "is_solved": false, "iterations": 9, "prompt_tokens": 7507, "completion_tokens": 912, "duration": 24.228007316589355, "iteration_states": [{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "is_solved": false, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 31, "duration": 2.5527098178863525}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x).replace('-', '')), nums.index(x)))", "is_solved": false, "iteration": 1, "prompt_tokens": 920, "completion_tokens": 113, "duration": 5.809710741043091}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x).replace('-', '')), x))", "is_solved": false, "iteration": 2, "prompt_tokens": 1696, "completion_tokens": 218, "duration": 8.18027138710022}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 3, "prompt_tokens": 2443, "completion_tokens": 297, "duration": 10.073262453079224}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x) if x >= 0 else -1))", "is_solved": false, "iteration": 4, "prompt_tokens": 3191, "completion_tokens": 388, "duration": 12.179541826248169}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 3955, "completion_tokens": 468, "duration": 14.258790731430054}, {"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 6, "prompt_tokens": 4689, "completion_tokens": 536, "duration": 15.978221416473389}, {"generated_code": "def order_by_points(nums):\n    def digit_sum(number):\n        return sum(map(int, str(abs(number))))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "is_solved": false, "iteration": 7, "prompt_tokens": 5714, "completion_tokens": 685, "duration": 19.21831464767456}, {"generated_code": "def order_by_points(nums):\n    def digit_sum(number):\n        return sum(map(int, str(abs(number))))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "is_solved": false, "iteration": 8, "prompt_tokens": 6469, "completion_tokens": 766, "duration": 21.154090642929077}, {"generated_code": "def order_by_points(nums):\n    def digit_sum(number):\n        return sum(map(int, str(abs(number))))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "is_solved": false, "iteration": 9, "prompt_tokens": 7507, "completion_tokens": 912, "duration": 24.228007316589355}]}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(d) for d in str(abs(num))) > 0:\n            if num < 0:\n                count += len(str(num)) - 1  # Subtract 1 for the negative sign\n            else:\n                count += len(str(num))\n    return count", "is_solved": false, "iterations": 9, "prompt_tokens": 6734, "completion_tokens": 1088, "duration": 27.4765727519989, "iteration_states": [{"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = str(num)[1:]\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 63, "duration": 3.6947553157806396}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_digits > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 1, "prompt_tokens": 925, "completion_tokens": 188, "duration": 7.598904609680176}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_digits == 1:\n            count += 1\n    return count", "is_solved": false, "iteration": 2, "prompt_tokens": 1643, "completion_tokens": 296, "duration": 10.334084033966064}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_digits > 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 3, "prompt_tokens": 2374, "completion_tokens": 417, "duration": 13.162215232849121}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = sum(int(digit) for digit in str(num) if digit.isdigit())\n        if sum_digits != 0:\n            count += 1\n    return count", "is_solved": false, "iteration": 4, "prompt_tokens": 3100, "completion_tokens": 536, "duration": 15.75657606124878}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        count += 1\n        for digit in str(abs(num)):\n            if digit.isdigit():\n                if num < 0:\n                    count -= 1\n                break\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 3814, "completion_tokens": 639, "duration": 18.381808042526245}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(d) for d in str(abs(num))) > 0:\n            if num < 0:\n                count += 1\n            else:\n                count += len(str(num))\n    return count", "is_solved": false, "iteration": 6, "prompt_tokens": 4516, "completion_tokens": 731, "duration": 20.463727712631226}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(d) for d in str(abs(num))) > 0:\n            if num < 0:\n                count += len(str(num)) - 1  # Subtract 1 to account for the negative sign\n            else:\n                count += len(str(num))\n    return count", "is_solved": false, "iteration": 7, "prompt_tokens": 5258, "completion_tokens": 869, "duration": 23.021206378936768}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(d) for d in str(abs(num))) > 0:\n            count += len(str(num).replace('-', ''))  # Consider only the absolute value for counting digits\n    return count", "is_solved": false, "iteration": 8, "prompt_tokens": 6018, "completion_tokens": 976, "duration": 25.116981744766235}, {"generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(d) for d in str(abs(num))) > 0:\n            if num < 0:\n                count += len(str(num)) - 1  # Subtract 1 for the negative sign\n            else:\n                count += len(str(num))\n    return count", "is_solved": false, "iteration": 9, "prompt_tokens": 6734, "completion_tokens": 1088, "duration": 27.4765727519989}]}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    txt = txt.rstrip()  # Strip trailing spaces\n    if not txt:\n        return False\n    last_char = txt[-1]\n    second_last_char = txt[-2] if len(txt) > 1 else \"\"\n    if last_char.isalpha() and second_last_char != \" \":\n        return True\n    return False", "is_solved": false, "iterations": 9, "prompt_tokens": 7127, "completion_tokens": 1237, "duration": 29.151997327804565, "iteration_states": [{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt.split()[-1]) == 1:\n        return True\n    return False", "is_solved": false, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 66, "duration": 5.334384918212891}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha() and last_char != \" \":\n        return False\n    return True", "is_solved": false, "iteration": 1, "prompt_tokens": 943, "completion_tokens": 174, "duration": 8.065120697021484}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if not last_char.isalpha() and last_char != \" \":\n        return False\n    return True", "is_solved": false, "iteration": 2, "prompt_tokens": 1662, "completion_tokens": 265, "duration": 10.175569534301758}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    txt = txt.strip()\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() or last_char == \" \":\n        return False\n    return True", "is_solved": false, "iteration": 3, "prompt_tokens": 2390, "completion_tokens": 377, "duration": 12.686290502548218}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    txt = txt.strip()\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and txt[-2] == \" \":\n        return True\n    return False", "is_solved": false, "iteration": 4, "prompt_tokens": 3169, "completion_tokens": 508, "duration": 15.373973369598389}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    txt = txt.strip()\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 3947, "completion_tokens": 652, "duration": 17.997509002685547}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    txt = txt.rstrip()  # Strip trailing spaces\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": false, "iteration": 6, "prompt_tokens": 4747, "completion_tokens": 808, "duration": 20.842524528503418}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    txt = txt.rstrip()  # Strip trailing spaces\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": false, "iteration": 7, "prompt_tokens": 5556, "completion_tokens": 961, "duration": 23.867329835891724}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    txt = txt.rstrip()  # Strip trailing spaces\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and txt[-2] != \" \":\n        return True\n    return False", "is_solved": false, "iteration": 8, "prompt_tokens": 6364, "completion_tokens": 1105, "duration": 26.734721183776855}, {"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    txt = txt.rstrip()  # Strip trailing spaces\n    if not txt:\n        return False\n    last_char = txt[-1]\n    second_last_char = txt[-2] if len(txt) > 1 else \"\"\n    if last_char.isalpha() and second_last_char != \" \":\n        return True\n    return False", "is_solved": false, "iteration": 9, "prompt_tokens": 7127, "completion_tokens": 1237, "duration": 29.151997327804565}]}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iterations": 9, "prompt_tokens": 7239, "completion_tokens": 1071, "duration": 25.152437448501587, "iteration_states": [{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 54, "duration": 1.426814079284668}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 1, "prompt_tokens": 1010, "completion_tokens": 182, "duration": 4.907392501831055}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 2, "prompt_tokens": 1779, "completion_tokens": 300, "duration": 7.766953229904175}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 3, "prompt_tokens": 2575, "completion_tokens": 409, "duration": 10.325119018554688}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 4, "prompt_tokens": 3334, "completion_tokens": 505, "duration": 13.072628498077393}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 4092, "completion_tokens": 600, "duration": 15.491185665130615}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 6, "prompt_tokens": 4861, "completion_tokens": 718, "duration": 17.92143988609314}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 and (i+1) % 3 != 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 7, "prompt_tokens": 5675, "completion_tokens": 857, "duration": 20.772769927978516}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 8, "prompt_tokens": 6466, "completion_tokens": 961, "duration": 22.836233139038086}, {"generated_code": "def sum_squares(lst):\n    return sum(x**2 if (i+1) % 3 == 0 else x**3 if (i+1) % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 9, "prompt_tokens": 7239, "completion_tokens": 1071, "duration": 25.152437448501587}]}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(num % 2 == 1 for num in lst2) + sum(num % 2 == 1 for num in lst1) % 2 == 0 else \"NO\"", "is_solved": false, "iterations": 9, "prompt_tokens": 8112, "completion_tokens": 1142, "duration": 27.910276889801025, "iteration_states": [{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= len(lst2) else \"NO\"", "is_solved": false, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 44, "duration": 3.410109043121338}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 != 0) else \"NO\"", "is_solved": false, "iteration": 1, "prompt_tokens": 1115, "completion_tokens": 185, "duration": 7.940117835998535}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) or all(num % 2 == 0 for num in lst2) else \"NO\"", "is_solved": false, "iteration": 2, "prompt_tokens": 2022, "completion_tokens": 333, "duration": 10.818923711776733}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if set(num for num in lst1 if num % 2 == 0) <= set(num for num in lst2 if num % 2 == 0) else \"NO\"", "is_solved": false, "iteration": 3, "prompt_tokens": 2875, "completion_tokens": 443, "duration": 13.061608076095581}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) and set(lst1).issubset(set(lst2)) else \"NO\"", "is_solved": false, "iteration": 4, "prompt_tokens": 3739, "completion_tokens": 549, "duration": 15.501502275466919}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) and all(num in lst2 for num in lst1) else \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 4614, "completion_tokens": 668, "duration": 17.936264276504517}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(num % 2 == 1 for num in lst2) >= sum(num % 2 == 1 for num in lst1) else \"NO\"", "is_solved": false, "iteration": 6, "prompt_tokens": 5486, "completion_tokens": 787, "duration": 20.46082329750061}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(num % 2 == 1 for num in lst2) >= sum(num % 2 == 1 for num in lst1) and all(num % 2 == 0 for num in lst1) else \"NO\"", "is_solved": false, "iteration": 7, "prompt_tokens": 6339, "completion_tokens": 908, "duration": 23.091675996780396}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(num % 2 == 1 for num in lst2) >= sum(num % 2 == 1 for num in lst1) and sum(num % 2 == 1 for num in lst1) % 2 == 0 else \"NO\"", "is_solved": false, "iteration": 8, "prompt_tokens": 7227, "completion_tokens": 1040, "duration": 25.688571453094482}, {"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(num % 2 == 1 for num in lst2) + sum(num % 2 == 1 for num in lst1) % 2 == 0 else \"NO\"", "is_solved": false, "iteration": 9, "prompt_tokens": 8112, "completion_tokens": 1142, "duration": 27.910276889801025}]}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i+1}ng {i+1} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iterations": 9, "prompt_tokens": 8004, "completion_tokens": 1113, "duration": 28.01340937614441, "iteration_states": [{"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 65, "duration": 3.23934006690979}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the string {i+1} of the input.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 1, "prompt_tokens": 1075, "completion_tokens": 159, "duration": 5.942347764968872}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the string {i+1} of the input.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 2, "prompt_tokens": 1913, "completion_tokens": 257, "duration": 9.025003910064697}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i+1}ng {i+1} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 3, "prompt_tokens": 2753, "completion_tokens": 368, "duration": 11.567463397979736}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i}ng {i+1} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 4, "prompt_tokens": 3609, "completion_tokens": 471, "duration": 13.91473388671875}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s if digit.isdigit())} in the str{i+1}ng {i+1} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 4490, "completion_tokens": 609, "duration": 16.818026304244995}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i+1}ng {i+1} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 6, "prompt_tokens": 5364, "completion_tokens": 724, "duration": 19.032774925231934}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i}ng {i+1} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 7, "prompt_tokens": 6233, "completion_tokens": 840, "duration": 21.5907039642334}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i+1}ng {i+1} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 8, "prompt_tokens": 7110, "completion_tokens": 970, "duration": 25.200968265533447}, {"generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)} in the str{i+1}ng {i+1} of the {i+1}nput.\" for i, s in enumerate(lst)]", "is_solved": false, "iteration": 9, "prompt_tokens": 8004, "completion_tokens": 1113, "duration": 28.01340937614441}]}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [char for char in txt if char.islower() and ord(char) % 2 != 0] if len(txt) > 0 else []", "is_solved": false, "iterations": 9, "prompt_tokens": 6536, "completion_tokens": 1111, "duration": 29.01143789291382, "iteration_states": [{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "is_solved": false, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 60, "duration": 3.0317656993865967}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]", "is_solved": false, "iteration": 1, "prompt_tokens": 918, "completion_tokens": 173, "duration": 6.300008535385132}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [word for word in txt.split() if word.isalpha()]", "is_solved": false, "iteration": 2, "prompt_tokens": 1603, "completion_tokens": 293, "duration": 10.92894172668457}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([word for word in txt if word.islower() and ord(word) % 2 == 1])", "is_solved": false, "iteration": 3, "prompt_tokens": 2278, "completion_tokens": 393, "duration": 13.461930751800537}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]", "is_solved": false, "iteration": 4, "prompt_tokens": 3001, "completion_tokens": 501, "duration": 15.862594366073608}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [char for char in txt if char.islower() and ord(char) % 2 != 0]", "is_solved": false, "iteration": 5, "prompt_tokens": 3679, "completion_tokens": 623, "duration": 18.504918575286865}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "is_solved": false, "iteration": 6, "prompt_tokens": 4407, "completion_tokens": 748, "duration": 21.393922805786133}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [txt]", "is_solved": false, "iteration": 7, "prompt_tokens": 5118, "completion_tokens": 844, "duration": 23.60343074798584}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [char for char in txt if char.islower() and ord(char) % 2 != 0]", "is_solved": false, "iteration": 8, "prompt_tokens": 5796, "completion_tokens": 966, "duration": 26.18272089958191}, {"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [char for char in txt if char.islower() and ord(char) % 2 != 0] if len(txt) > 0 else []", "is_solved": false, "iteration": 9, "prompt_tokens": 6536, "completion_tokens": 1111, "duration": 29.01143789291382}]}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    opened = 0\n    for char in string:\n        if char == '[':\n            opened += 1\n        elif char == ']' and opened > 0:\n            opened -= 1\n    return opened > 0", "is_solved": false, "iterations": 9, "prompt_tokens": 7122, "completion_tokens": 1297, "duration": 32.2539267539978, "iteration_states": [{"generated_code": "def is_nested(string):\n    opening_brackets = []\n    \n    for char in string:\n        if char == '[':\n            opening_brackets.append(char)\n        elif char == ']':\n            if opening_brackets:\n                opening_brackets.pop()\n    \n    return len(opening_brackets) != 0\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 116, "duration": 6.233360767364502}, {"generated_code": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) != 0\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 1, "prompt_tokens": 1002, "completion_tokens": 267, "duration": 10.540189504623413}, {"generated_code": "def is_nested(string):\n    stack = []\n    nested_found = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                continue\n            stack.pop()\n            nested_found = True\n            if stack:\n                return True\n    \n    return nested_found\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 2, "prompt_tokens": 1818, "completion_tokens": 450, "duration": 14.021891117095947}, {"generated_code": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                return True\n            elif stack:\n                stack.pop()\n    \n    return False", "is_solved": false, "iteration": 3, "prompt_tokens": 2689, "completion_tokens": 584, "duration": 16.838471174240112}, {"generated_code": "def is_nested(string):\n    stack = []\n    found_nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                found_nested = True\n            elif stack:\n                stack.pop()\n    \n    return found_nested", "is_solved": false, "iteration": 4, "prompt_tokens": 3439, "completion_tokens": 721, "duration": 19.651108741760254}, {"generated_code": "def is_nested(string):\n    opened = 0\n    closed = 0\n    \n    for char in string:\n        if char == '[':\n            opened += 1\n        elif char == ']' and opened > closed:\n            closed += 1\n    \n    return opened > 0 and closed > 0", "is_solved": false, "iteration": 5, "prompt_tokens": 4195, "completion_tokens": 843, "duration": 22.337745428085327}, {"generated_code": "def is_nested(string):\n    opened = 0\n    closed = 0\n    \n    for char in string:\n        if char == '[':\n            opened += 1\n        elif char == ']' and opened > closed:\n            closed += 1\n    \n    return opened > 0 and closed > 0 and opened == closed", "is_solved": false, "iteration": 6, "prompt_tokens": 4940, "completion_tokens": 968, "duration": 25.16762351989746}, {"generated_code": "def is_nested(string):\n    opened = 0\n    for char in string:\n        if char == '[':\n            opened += 1\n        elif char == ']' and opened > 0:\n            opened -= 1\n    return opened > 0", "is_solved": false, "iteration": 7, "prompt_tokens": 5681, "completion_tokens": 1077, "duration": 27.53640127182007}, {"generated_code": "def is_nested(string):\n    opened = 0\n    for char in string:\n        if char == '[':\n            opened += 1\n        elif char == ']' and opened > 0:\n            opened -= 1\n    return opened < len(string) - opened", "is_solved": false, "iteration": 8, "prompt_tokens": 6403, "completion_tokens": 1198, "duration": 29.924248933792114}, {"generated_code": "def is_nested(string):\n    opened = 0\n    for char in string:\n        if char == '[':\n            opened += 1\n        elif char == ']' and opened > 0:\n            opened -= 1\n    return opened > 0", "is_solved": false, "iteration": 9, "prompt_tokens": 7122, "completion_tokens": 1297, "duration": 32.2539267539978}]}
{"task_id": "HumanEval/143", "generated_code": "import math\n\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "is_solved": false, "iterations": 9, "prompt_tokens": 7141, "completion_tokens": 1381, "duration": 29.601574182510376, "iteration_states": [{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875}, {"generated_code": "import sympy\n\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        return sympy.isprime(num)\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 1, "prompt_tokens": 990, "completion_tokens": 214, "duration": 6.623627424240112}, {"generated_code": "import sympy\n\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        return sympy.isprime(num)\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(sum(ord(c) for c in word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 2, "prompt_tokens": 1708, "completion_tokens": 335, "duration": 9.524991750717163}, {"generated_code": "import sympy\n\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        return sympy.isprime(num)\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 3, "prompt_tokens": 2455, "completion_tokens": 455, "duration": 12.018937110900879}, {"generated_code": "import sympy\n\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        return sympy.isprime(num)\n\n    words = sentence.split()\n    prime_words = [word for word in words if all(is_prime(ord(char)) for char in word)]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 4, "prompt_tokens": 3169, "completion_tokens": 572, "duration": 14.50561785697937}, {"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 5, "prompt_tokens": 3907, "completion_tokens": 719, "duration": 17.35380268096924}, {"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    non_prime_words = [word for word in words if not is_prime(len(word))]\n    return ' '.join(non_prime_words)", "is_solved": false, "iteration": 6, "prompt_tokens": 4701, "completion_tokens": 876, "duration": 20.231096982955933}, {"generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "is_solved": false, "iteration": 7, "prompt_tokens": 5516, "completion_tokens": 1038, "duration": 23.199212789535522}, {"generated_code": "import math\n\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "is_solved": false, "iteration": 8, "prompt_tokens": 6332, "completion_tokens": 1213, "duration": 26.454275608062744}, {"generated_code": "import math\n\ndef words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "is_solved": false, "iteration": 9, "prompt_tokens": 7141, "completion_tokens": 1381, "duration": 29.601574182510376}]}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            collatz.append(n)\n    \n    return sorted(collatz)", "is_solved": false, "iterations": 9, "prompt_tokens": 9121, "completion_tokens": 1319, "duration": 31.825016736984253, "iteration_states": [{"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "is_solved": false, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828}, {"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            collatz.append(n)\n    \n    return sorted(collatz)", "is_solved": false, "iteration": 1, "prompt_tokens": 1277, "completion_tokens": 235, "duration": 8.437450408935547}, {"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            collatz.append(n)\n    \n    return sorted(set(collatz))", "is_solved": false, "iteration": 2, "prompt_tokens": 2242, "completion_tokens": 365, "duration": 11.057306051254272}, {"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(set(num for num in collatz if num % 2 != 0))", "is_solved": false, "iteration": 3, "prompt_tokens": 3205, "completion_tokens": 493, "duration": 13.773197412490845}, {"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(set(num for num in collatz if (num % 2 != 0) or (num == 1)))", "is_solved": false, "iteration": 4, "prompt_tokens": 4171, "completion_tokens": 628, "duration": 17.216119289398193}, {"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(set(num for num in collatz if (num % 2 != 0) and (num != 1)))", "is_solved": false, "iteration": 5, "prompt_tokens": 5160, "completion_tokens": 770, "duration": 19.878856420516968}, {"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(set(num for num in collatz if num % 2 != 0 and num != 1))", "is_solved": false, "iteration": 6, "prompt_tokens": 6156, "completion_tokens": 904, "duration": 22.916335344314575}, {"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n        if n == 1:\n            break\n    \n    return sorted(set(num for num in collatz if num % 2 != 0))", "is_solved": false, "iteration": 7, "prompt_tokens": 7156, "completion_tokens": 1052, "duration": 25.744943618774414}, {"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(num for num in collatz if num % 2 != 0)", "is_solved": false, "iteration": 8, "prompt_tokens": 8158, "completion_tokens": 1196, "duration": 28.89716672897339}, {"generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            collatz.append(n)\n    \n    return sorted(collatz)", "is_solved": false, "iteration": 9, "prompt_tokens": 9121, "completion_tokens": 1319, "duration": 31.825016736984253}]}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [0, 1, 3]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iterations": 9, "prompt_tokens": 8755, "completion_tokens": 1567, "duration": 34.75175094604492, "iteration_states": [{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 0, "prompt_tokens": 285, "completion_tokens": 108, "duration": 6.019955396652222}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 1, "prompt_tokens": 1210, "completion_tokens": 260, "duration": 10.377058029174805}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence[:n+1]", "is_solved": false, "iteration": 2, "prompt_tokens": 2156, "completion_tokens": 431, "duration": 14.21190333366394}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 3, "prompt_tokens": 3123, "completion_tokens": 608, "duration": 17.40754795074463}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence[:n+1]", "is_solved": false, "iteration": 4, "prompt_tokens": 4057, "completion_tokens": 770, "duration": 20.493837594985962}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 5, "prompt_tokens": 4993, "completion_tokens": 922, "duration": 23.221919298171997}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-1])\n        return sequence", "is_solved": false, "iteration": 6, "prompt_tokens": 5928, "completion_tokens": 1081, "duration": 26.21907114982605}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [0, 1, 3]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 7, "prompt_tokens": 6870, "completion_tokens": 1247, "duration": 29.333086252212524}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [0, 1, 3]\n        for i in range(3, n):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence + [sequence[-1] + sequence[-2] + sequence[-3]]", "is_solved": false, "iteration": 8, "prompt_tokens": 7794, "completion_tokens": 1407, "duration": 32.034221172332764}, {"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        sequence = [0, 1, 3]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "is_solved": false, "iteration": 9, "prompt_tokens": 8755, "completion_tokens": 1567, "duration": 34.75175094604492}]}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n                consecutive_spaces = 0\n            else:\n                result.append(c)\n        else:\n            if consecutive_spaces > 2:\n                result.append('-')\n            elif consecutive_spaces > 1:\n                result.append('_')\n            result.append(c)\n            consecutive_spaces = 0\n\n    if consecutive_spaces > 2:\n        result.append('-')\n\n    return ''.join(result)", "is_solved": false, "iterations": 9, "prompt_tokens": 7057, "completion_tokens": 1537, "duration": 35.92766857147217, "iteration_states": [{"generated_code": "def fix_spaces(text):\n    return ''.join(['_' if c == ' ' else '-' if c == ' ' * 2 else c for c in text])\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "is_solved": false, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 102, "duration": 5.568545341491699}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(c)\n            consecutive_spaces = 0\n\n    return ''.join(result)", "is_solved": false, "iteration": 1, "prompt_tokens": 910, "completion_tokens": 231, "duration": 8.835739612579346}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append('_' if consecutive_spaces > 1 else c)\n            consecutive_spaces = 0\n\n    return ''.join(result)", "is_solved": false, "iteration": 2, "prompt_tokens": 1629, "completion_tokens": 374, "duration": 12.10348105430603}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces == 2:\n                result[-1] = '_'\n            elif consecutive_spaces > 2:\n                result[-1] = '-'\n        else:\n            result.append('_' if consecutive_spaces > 1 else c)\n            consecutive_spaces = 0\n\n    return ''.join(result)", "is_solved": false, "iteration": 3, "prompt_tokens": 2381, "completion_tokens": 543, "duration": 15.511143207550049}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result[-1] = '-'\n        else:\n            result.append('_' if consecutive_spaces >= 2 else c)\n            consecutive_spaces = 0\n\n    return ''.join(result)", "is_solved": false, "iteration": 4, "prompt_tokens": 3159, "completion_tokens": 688, "duration": 18.31317639350891}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result[-1] = '-'\n            elif consecutive_spaces == 2:\n                result.append('_')\n        else:\n            if consecutive_spaces >= 2:\n                result.append('-')\n            result.append(c)\n            consecutive_spaces = 0\n\n    return ''.join(result)", "is_solved": false, "iteration": 5, "prompt_tokens": 3910, "completion_tokens": 855, "duration": 21.536053895950317}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n            elif consecutive_spaces == 2:\n                result.append('_')\n        else:\n            if consecutive_spaces >= 2:\n                result.append('-')\n            result.append(c)\n            consecutive_spaces = 0\n\n    return ''.join(result)", "is_solved": false, "iteration": 6, "prompt_tokens": 4691, "completion_tokens": 1015, "duration": 24.853922367095947}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n                consecutive_spaces = 0\n            elif consecutive_spaces == 2:\n                result.append('_')\n        else:\n            if consecutive_spaces >= 2:\n                result.append('-')\n            result.append(c)\n            consecutive_spaces = 0\n\n    return ''.join(result)", "is_solved": false, "iteration": 7, "prompt_tokens": 5453, "completion_tokens": 1169, "duration": 29.10790705680847}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n                consecutive_spaces = 0\n            elif consecutive_spaces == 2:\n                result.append('_')\n        else:\n            if consecutive_spaces >= 2:\n                result.append('-')\n            result.append(c)\n            consecutive_spaces = 0\n\n    if consecutive_spaces >= 2:\n        result.append('-')\n\n    return ''.join(result)", "is_solved": false, "iteration": 8, "prompt_tokens": 6242, "completion_tokens": 1349, "duration": 32.50415325164795}, {"generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n\n    for c in text:\n        if c == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n                consecutive_spaces = 0\n            else:\n                result.append(c)\n        else:\n            if consecutive_spaces > 2:\n                result.append('-')\n            elif consecutive_spaces > 1:\n                result.append('_')\n            result.append(c)\n            consecutive_spaces = 0\n\n    if consecutive_spaces > 2:\n        result.append('-')\n\n    return ''.join(result)", "is_solved": false, "iteration": 9, "prompt_tokens": 7057, "completion_tokens": 1537, "duration": 35.92766857147217}]}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if intersection_length <= 0:\n        return \"NO\"\n    \n    if intersection_length < 2:\n        return \"NO\"\n    \n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "is_solved": true, "iterations": 6, "prompt_tokens": 6630, "completion_tokens": 1316, "duration": 75.38384485244751, "iteration_states": [{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    length = intersection_end - intersection_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 0, "prompt_tokens": 304, "completion_tokens": 159, "duration": 5.277536869049072}, {"generated_code": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start == intersection_end:\n        return \"NO\"\n    \n    for i in range(2, intersection_end):\n        if intersection_start % i == 0 and intersection_end % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "is_solved": false, "iteration": 1, "prompt_tokens": 1409, "completion_tokens": 344, "duration": 9.794571161270142}, {"generated_code": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    for i in range(2, int(intersection_end**0.5) + 1):\n        if intersection_start % i == 0 or intersection_end % i == 0:\n            return \"NO\"\n    \n    return \"YES\" if intersection_end > 1 else \"NO\"", "is_solved": false, "iteration": 2, "prompt_tokens": 2469, "completion_tokens": 544, "duration": 13.972624778747559}, {"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    if is_prime(intersection_end - intersection_start + 1):\n        return \"YES\"\n    \n    return \"NO\"", "is_solved": false, "iteration": 3, "prompt_tokens": 3537, "completion_tokens": 769, "duration": 17.8002188205719}, {"generated_code": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    return \"YES\" if intersection_end - intersection_start >= 0 else \"NO\"", "is_solved": false, "iteration": 4, "prompt_tokens": 4624, "completion_tokens": 920, "duration": 21.31893491744995}, {"generated_code": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if intersection_length <= 0:\n        return \"NO\"\n    \n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "is_solved": false, "iteration": 5, "prompt_tokens": 5600, "completion_tokens": 1126, "duration": 71.64499998092651}, {"generated_code": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if intersection_length <= 0:\n        return \"NO\"\n    \n    if intersection_length < 2:\n        return \"NO\"\n    \n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "is_solved": true, "iteration": 6, "prompt_tokens": 6630, "completion_tokens": 1316, "duration": 75.38384485244751}]}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    visited = set()\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    \n    heap = [(grid[0][0], 0, 0, [grid[0][0]])]\n    while heap:\n        _, x, y, path = heappop(heap)\n        visited.add((x, y))\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                next_cell = grid[nx][ny]\n                new_path = path + [next_cell]\n                heappush(heap, (next_cell, nx, ny, new_path))", "is_solved": false, "iterations": 9, "prompt_tokens": 19099, "completion_tokens": 4611, "duration": 75.68851852416992, "iteration_states": [{"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            result = dfs(i, j, 1, [grid[i][j]])\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 0, "prompt_tokens": 446, "completion_tokens": 263, "duration": 4.281391620635986}, {"generated_code": "def minPath(grid, k):\n    def dfs(x, y, path_len, path):\n        if path_len == k:\n            return path\n\n        min_path = []\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny]:\n                visited[nx][ny] = True\n                new_path = dfs(nx, ny, path_len + 1, path + [grid[nx][ny]])\n                if not min_path or sum(new_path) < sum(min_path):\n                    min_path = new_path\n                visited[nx][ny] = False\n\n        return min_path\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    result = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            result = dfs(i, j, 1, [grid[i][j]])\n            visited[i][j] = False\n\n    return result", "is_solved": false, "iteration": 1, "prompt_tokens": 1899, "completion_tokens": 595, "duration": 10.41877031326294}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n    heap = [(grid[i][j], i, j, [grid[i][j]]) for i in range(n) for j in range(n)]\n    for _ in range(k):\n        _, x, y, path = heappop(heap)\n        visited[x][y] = True\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                heappush(heap, (grid[nx][ny], nx, ny, path + [grid[nx][ny]]))\n\n    return path", "is_solved": false, "iteration": 2, "prompt_tokens": 4079, "completion_tokens": 1090, "duration": 18.24448847770691}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n    heap = [(grid[i][j], i, j, [grid[i][j]]) for i in range(n) for j in range(n)]\n    while heap:\n        _, x, y, path = heappop(heap)\n        if len(path) == k:\n            return path\n        visited[x][y] = True\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                heappush(heap, (grid[nx][ny], nx, ny, path + [grid[nx][ny]]))", "is_solved": false, "iteration": 3, "prompt_tokens": 6101, "completion_tokens": 1550, "duration": 25.253021955490112}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    visited = set()\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    \n    heap = [(grid[0][0], 0, 0, [grid[0][0]])]\n    while heap:\n        _, x, y, path = heappop(heap)\n        if len(path) == k:\n            return path\n        visited.add((x, y))\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                heappush(heap, (grid[nx][ny], nx, ny, path + [grid[nx][ny]]))", "is_solved": false, "iteration": 4, "prompt_tokens": 8131, "completion_tokens": 1991, "duration": 32.57066059112549}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    visited = set()\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    \n    heap = [(grid[0][0], 0, 0, [grid[0][0]])]\n    while heap:\n        _, x, y, path = heappop(heap)\n        visited.add((x, y))\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                next_cell = grid[nx][ny]\n                new_path = path + [next_cell]\n                new_path.sort()\n                heappush(heap, (next_cell, nx, ny, new_path[:k]))", "is_solved": false, "iteration": 5, "prompt_tokens": 10862, "completion_tokens": 2678, "duration": 43.91574692726135}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    visited = set()\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    \n    heap = [(grid[0][0], 0, 0, [grid[0][0]])]\n    while heap:\n        _, x, y, path = heappop(heap)\n        visited.add((x, y))\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                next_cell = grid[nx][ny]\n                new_path = path + [next_cell]\n                heappush(heap, (next_cell, nx, ny, new_path[:k]))", "is_solved": false, "iteration": 6, "prompt_tokens": 12903, "completion_tokens": 3142, "duration": 51.12227010726929}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    visited = set()\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    \n    heap = [(grid[0][0], 0, 0, [grid[0][0]])]\n    while heap:\n        _, x, y, path = heappop(heap)\n        visited.add((x, y))\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                next_cell = grid[nx][ny]\n                new_path = path + [next_cell]\n                heappush(heap, (next_cell, nx, ny, new_path))", "is_solved": false, "iteration": 7, "prompt_tokens": 14934, "completion_tokens": 3604, "duration": 59.19890093803406}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    visited = set()\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    \n    heap = [(grid[0][0], 0, 0, [grid[0][0]], grid[0][0])]\n    while heap:\n        _, x, y, path, path_sum = heappop(heap)\n        visited.add((x, y))\n        if len(path) == k and path_sum == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                next_cell = grid[nx][ny]\n                new_path = path + [next_cell]\n                new_path_sum = path_sum + next_cell\n                heappush(heap, (next_cell, nx, ny, new_path, new_path_sum))", "is_solved": false, "iteration": 8, "prompt_tokens": 17002, "completion_tokens": 4135, "duration": 68.00445652008057}, {"generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    visited = set()\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    \n    heap = [(grid[0][0], 0, 0, [grid[0][0]])]\n    while heap:\n        _, x, y, path = heappop(heap)\n        visited.add((x, y))\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                next_cell = grid[nx][ny]\n                new_path = path + [next_cell]\n                heappush(heap, (next_cell, nx, ny, new_path))", "is_solved": false, "iteration": 9, "prompt_tokens": 19099, "completion_tokens": 4611, "duration": 75.68851852416992}]}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    precedence = {'**': 4, '*': 3, '/': 3, '+': 2, '-': 2, '//': 3}\n    \n    def infix_to_postfix(expression):\n        stack = []\n        postfix = []\n        for token in expression:\n            if token.isdigit():\n                postfix.append(token)\n            elif token == '(':\n                stack.append(token)\n            elif token == ')':\n                while stack and stack[-1] != '(':\n                    postfix.append(stack.pop())\n                stack.pop()\n            else:\n                while stack and stack[-1] != '(' and precedence.get(stack[-1], 0) >= precedence.get(token, 0):\n                    postfix.append(stack.pop())\n                stack.append(token)\n        \n        while stack:\n            postfix.append(stack.pop())\n        \n        return postfix\n    \n    def evaluate_postfix(postfix):\n        stack = []\n        for token in postfix:\n            if token.isdigit():\n                stack.append(int(token))\n            else:\n                operand2 = stack.pop()\n                operand1 = stack.pop()\n                if token == '+':\n                    stack.append(operand1 + operand2)\n                elif token == '-':\n                    stack.append(operand1 - operand2)\n                elif token == '*':\n                    stack.append(operand1 * operand2)\n                elif token == '/':\n                    stack.append(operand1 // operand2)  # Perform floor division\n                elif token == '//':\n                    stack.append(operand1 // operand2)  # Perform floor division\n                elif token == '**':\n                    stack.append(operand1 ** operand2)\n        \n        return stack[-1]\n    \n    expression = []\n    for i in range(len(operators)):\n        expression.append(str(operands[i]))\n        expression.append(operators[i])\n    expression.append(str(operands[-1]))\n    \n    postfix_expr = infix_to_postfix(expression)\n    return evaluate_postfix(postfix_expr)", "is_solved": false, "iterations": 9, "prompt_tokens": 13833, "completion_tokens": 4442, "duration": 76.68342661857605, "iteration_states": [{"generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "is_solved": false, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'**': 4, '*': 3, '/': 3, '+': 2, '-': 2}\n    \n    def infix_to_postfix(expression):\n        stack = []\n        postfix = []\n        for token in expression:\n            if token.isdigit():\n                postfix.append(token)\n            elif token == '(':\n                stack.append(token)\n            elif token == ')':\n                while stack and stack[-1] != '(':\n                    postfix.append(stack.pop())\n                stack.pop()\n            else:\n                while stack and precedence.get(stack[-1], 0) >= precedence.get(token, 0):\n                    postfix.append(stack.pop())\n                stack.append(token)\n        \n        while stack:\n            postfix.append(stack.pop())\n        \n        return postfix\n    \n    def evaluate_postfix(postfix):\n        stack = []\n        for token in postfix:\n            if token.isdigit():\n                stack.append(int(token))\n            else:\n                operand2 = stack.pop()\n                operand1 = stack.pop()\n                if token == '+':\n                    stack.append(operand1 + operand2)\n                elif token == '-':\n                    stack.append(operand1 - operand2)\n                elif token == '*':\n                    stack.append(operand1 * operand2)\n                elif token == '/':\n                    stack.append(operand1 // operand2)\n                elif token == '**':\n                    stack.append(operand1 ** operand2)\n        \n        return stack.pop()\n    \n    expression = []\n    for i in range(len(operators)):\n        expression.append(str(operands[i]))\n        expression.append(operators[i])\n    expression.append(str(operands[-1]))\n    \n    postfix_expr = infix_to_postfix(expression)\n    return evaluate_postfix(postfix_expr)", "is_solved": false, "iteration": 1, "prompt_tokens": 1752, "completion_tokens": 810, "duration": 15.654104471206665}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'**': 4, '*': 3, '/': 3, '+': 2, '-': 2}\n    \n    def infix_to_postfix(expression):\n        stack = []\n        postfix = []\n        for token in expression:\n            if token.isdigit():\n                postfix.append(token)\n            elif token == '(':\n                stack.append(token)\n            elif token == ')':\n                while stack and stack[-1] != '(':\n                    postfix.append(stack.pop())\n                stack.pop()\n            else:\n                while stack and precedence.get(stack[-1], 0) >= precedence.get(token, 0):\n                    postfix.append(stack.pop())\n                stack.append(token)\n        \n        while stack:\n            postfix.append(stack.pop())\n        \n        return postfix\n    \n    def evaluate_postfix(postfix):\n        stack = []\n        for token in postfix:\n            if token.isdigit():\n                stack.append(int(token))\n            else:\n                operand2 = stack.pop()\n                operand1 = stack.pop()\n                if token == '+':\n                    stack.append(operand1 + operand2)\n                elif token == '-':\n                    stack.append(operand1 - operand2)\n                elif token == '*':\n                    stack.append(operand1 * operand2)\n                elif token == '/':\n                    stack.append(operand1 // operand2)\n                elif token == '**':\n                    stack.append(operand1 ** operand2)\n        \n        return stack.pop()\n    \n    expression = []\n    for i in range(len(operators)):\n        expression.append(str(operands[i]))\n        expression.append(operators[i])\n    expression.append(str(operands[-1]))\n    \n    postfix_expr = infix_to_postfix(expression)\n    return evaluate_postfix(postfix_expr)", "is_solved": false, "iteration": 2, "prompt_tokens": 3236, "completion_tokens": 1244, "duration": 24.668442487716675}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'**': 4, '*': 3, '/': 3, '+': 2, '-': 2}\n    \n    def infix_to_postfix(expression):\n        stack = []\n        postfix = []\n        for token in expression:\n            if token.isdigit():\n                postfix.append(token)\n            elif token == '(':\n                stack.append(token)\n            elif token == ')':\n                while stack and stack[-1] != '(':\n                    postfix.append(stack.pop())\n                stack.pop()\n            else:\n                while stack and precedence.get(stack[-1], 0) >= precedence.get(token, 0):\n                    postfix.append(stack.pop())\n                stack.append(token)\n        \n        while stack:\n            postfix.append(stack.pop())\n        \n        return postfix\n    \n    def evaluate_postfix(postfix):\n        stack = []\n        for token in postfix:\n            if token.isdigit():\n                stack.append(int(token))\n            else:\n                operand2 = stack.pop()\n                operand1 = stack.pop()\n                if token == '+':\n                    stack.append(operand1 + operand2)\n                elif token == '-':\n                    stack.append(operand1 - operand2)\n                elif token == '*':\n                    stack.append(operand1 * operand2)\n                elif token == '/':\n                    stack.append(operand1 // operand2)\n                elif token == '**':\n                    stack.append(operand1 ** operand2)\n        \n        return stack[-1]\n    \n    expression = []\n    for i in range(len(operators)):\n        expression.append(str(operands[i]))\n        expression.append(operators[i])\n    expression.append(str(operands[-1]))\n    \n    postfix_expr = infix_to_postfix(expression)\n    return evaluate_postfix(postfix_expr)", "is_solved": false, "iteration": 3, "prompt_tokens": 4763, "completion_tokens": 1722, "duration": 31.638874530792236}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'**': 4, '*': 3, '/': 3, '+': 2, '-': 2}\n    \n    def infix_to_postfix(expression):\n        stack = []\n        postfix = []\n        for token in expression:\n            if token.isdigit():\n                postfix.append(token)\n            elif token == '(':\n                stack.append(token)\n            elif token == ')':\n                while stack and stack[-1] != '(':\n                    postfix.append(stack.pop())\n                stack.pop()\n            else:\n                while stack and precedence.get(stack[-1], 0) >= precedence.get(token, 0):\n                    postfix.append(stack.pop())\n                stack.append(token)\n        \n        while stack:\n            postfix.append(stack.pop())\n        \n        return postfix\n    \n    def evaluate_postfix(postfix):\n        stack = []\n        for token in postfix:\n            if token.isdigit():\n                stack.append(int(token))\n            else:\n                operand2 = stack.pop()\n                operand1 = stack.pop()\n                if token == '+':\n                    stack.append(operand1 + operand2)\n                elif token == '-':\n                    stack.append(operand1 - operand2)\n                elif token == '*':\n                    stack.append(operand1 * operand2)\n                elif token == '/':\n                    stack.append(operand1 / operand2)  # Perform regular division\n                elif token == '**':\n                    stack.append(operand1 ** operand2)\n        \n        return stack[-1]\n    \n    expression = []\n    for i in range(len(operators)):\n        expression.append(str(operands[i]))\n        expression.append(operators[i])\n    expression.append(str(operands[-1]))\n    \n    postfix_expr = infix_to_postfix(expression)\n    return evaluate_postfix(postfix_expr)", "is_solved": false, "iteration": 4, "prompt_tokens": 6254, "completion_tokens": 2166, "duration": 39.15327715873718}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'**': 4, '*': 3, '/': 3, '+': 2, '-': 2, '//': 3}\n    \n    def infix_to_postfix(expression):\n        stack = []\n        postfix = []\n        for token in expression:\n            if token.isdigit():\n                postfix.append(token)\n            elif token == '(':\n                stack.append(token)\n            elif token == ')':\n                while stack and stack[-1] != '(':\n                    postfix.append(stack.pop())\n                stack.pop()\n            else:\n                while stack and precedence.get(stack[-1], 0) >= precedence.get(token, 0):\n                    postfix.append(stack.pop())\n                stack.append(token)\n        \n        while stack:\n            postfix.append(stack.pop())\n        \n        return postfix\n    \n    def evaluate_postfix(postfix):\n        stack = []\n        for token in postfix:\n            if token.isdigit():\n                stack.append(int(token))\n            else:\n                operand2 = stack.pop()\n                operand1 = stack.pop()\n                if token == '+':\n                    stack.append(operand1 + operand2)\n                elif token == '-':\n                    stack.append(operand1 - operand2)\n                elif token == '*':\n                    stack.append(operand1 * operand2)\n                elif token == '/':\n                    stack.append(operand1 / operand2)  # Perform regular division\n                elif token == '//':\n                    stack.append(operand1 // operand2)  # Perform floor division\n                elif token == '**':\n                    stack.append(operand1 ** operand2)\n        \n        return stack[-1]\n    \n    expression = []\n    for i in range(len(operators)):\n        expression.append(str(operands[i]))\n        expression.append(operators[i])\n    expression.append(str(operands[-1]))\n    \n    postfix_expr = infix_to_postfix(expression)\n    return evaluate_postfix(postfix_expr)", "is_solved": false, "iteration": 5, "prompt_tokens": 7754, "completion_tokens": 2634, "duration": 47.126177072525024}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'**': 4, '*': 3, '/': 3, '+': 2, '-': 2, '//': 3}\n    \n    def infix_to_postfix(expression):\n        stack = []\n        postfix = []\n        for token in expression:\n            if token.isdigit():\n                postfix.append(token)\n            elif token == '(':\n                stack.append(token)\n            elif token == ')':\n                while stack and stack[-1] != '(':\n                    postfix.append(stack.pop())\n                stack.pop()\n            else:\n                while stack and precedence.get(stack[-1], 0) >= precedence.get(token, 0):\n                    postfix.append(stack.pop())\n                stack.append(token)\n        \n        while stack:\n            postfix.append(stack.pop())\n        \n        return postfix\n    \n    def evaluate_postfix(postfix):\n        stack = []\n        for token in postfix:\n            if token.isdigit():\n                stack.append(int(token))\n            else:\n                operand2 = stack.pop()\n                operand1 = stack.pop()\n                if token == '+':\n                    stack.append(operand1 + operand2)\n                elif token == '-':\n                    stack.append(operand1 - operand2)\n                elif token == '*':\n                    stack.append(operand1 * operand2)\n                elif token == '/':\n                    stack.append(operand1 / operand2)  # Perform regular division\n                elif token == '//':\n                    stack.append(operand1 // operand2)  # Perform floor division\n                elif token == '**':\n                    stack.append(operand1 ** operand2)\n        \n        return stack[-1]\n    \n    expression = []\n    for i in range(len(operators)):\n        expression.append(str(operands[i]))\n        expression.append(operators[i])\n    expression.append(str(operands[-1]))\n    \n    postfix_expr = infix_to_postfix(expression)\n    return evaluate_postfix(postfix_expr)", "is_solved": false, "iteration": 6, "prompt_tokens": 9300, "completion_tokens": 3114, "duration": 54.69339418411255}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'**': 4, '*': 3, '/': 3, '+': 2, '-': 2, '//': 3}\n    \n    def infix_to_postfix(expression):\n        stack = []\n        postfix = []\n        for token in expression:\n            if token.isdigit():\n                postfix.append(token)\n            elif token == '(':\n                stack.append(token)\n            elif token == ')':\n                while stack and stack[-1] != '(':\n                    postfix.append(stack.pop())\n                stack.pop()\n            else:\n                while stack and stack[-1] != '(' and precedence.get(stack[-1], 0) >= precedence.get(token, 0):\n                    postfix.append(stack.pop())\n                stack.append(token)\n        \n        while stack:\n            postfix.append(stack.pop())\n        \n        return postfix\n    \n    def evaluate_postfix(postfix):\n        stack = []\n        for token in postfix:\n            if token.isdigit():\n                stack.append(int(token))\n            else:\n                operand2 = stack.pop()\n                operand1 = stack.pop()\n                if token == '+':\n                    stack.append(operand1 + operand2)\n                elif token == '-':\n                    stack.append(operand1 - operand2)\n                elif token == '*':\n                    stack.append(operand1 * operand2)\n                elif token == '/':\n                    stack.append(operand1 / operand2)  # Perform regular division\n                elif token == '//':\n                    stack.append(operand1 // operand2)  # Perform floor division\n                elif token == '**':\n                    stack.append(operand1 ** operand2)\n        \n        return stack[-1]\n    \n    expression = []\n    for i in range(len(operators)):\n        expression.append(str(operands[i]))\n        expression.append(operators[i])\n    expression.append(str(operands[-1]))\n    \n    postfix_expr = infix_to_postfix(expression)\n    return evaluate_postfix(postfix_expr)", "is_solved": false, "iteration": 7, "prompt_tokens": 10833, "completion_tokens": 3588, "duration": 61.30203199386597}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'**': 4, '*': 3, '/': 3, '+': 2, '-': 2, '//': 3}\n    \n    def infix_to_postfix(expression):\n        stack = []\n        postfix = []\n        for token in expression:\n            if token.isdigit():\n                postfix.append(token)\n            elif token == '(':\n                stack.append(token)\n            elif token == ')':\n                while stack and stack[-1] != '(':\n                    postfix.append(stack.pop())\n                stack.pop()\n            else:\n                while stack and stack[-1] != '(' and precedence.get(stack[-1], 0) >= precedence.get(token, 0):\n                    postfix.append(stack.pop())\n                stack.append(token)\n        \n        while stack:\n            postfix.append(stack.pop())\n        \n        return postfix\n    \n    def evaluate_postfix(postfix):\n        stack = []\n        for token in postfix:\n            if token.isdigit():\n                stack.append(int(token))\n            else:\n                operand2 = stack.pop()\n                operand1 = stack.pop()\n                if token == '+':\n                    stack.append(operand1 + operand2)\n                elif token == '-':\n                    stack.append(operand1 - operand2)\n                elif token == '*':\n                    stack.append(operand1 * operand2)\n                elif token == '/':\n                    stack.append(operand1 // operand2)  # Perform floor division\n                elif token == '//':\n                    stack.append(operand1 // operand2)  # Perform floor division\n                elif token == '**':\n                    stack.append(operand1 ** operand2)\n        \n        return stack[-1]\n    \n    expression = []\n    for i in range(len(operators)):\n        expression.append(str(operands[i]))\n        expression.append(operators[i])\n    expression.append(str(operands[-1]))\n    \n    postfix_expr = infix_to_postfix(expression)\n    return evaluate_postfix(postfix_expr)", "is_solved": false, "iteration": 8, "prompt_tokens": 12332, "completion_tokens": 4014, "duration": 70.90370106697083}, {"generated_code": "def do_algebra(operators, operands):\n    precedence = {'**': 4, '*': 3, '/': 3, '+': 2, '-': 2, '//': 3}\n    \n    def infix_to_postfix(expression):\n        stack = []\n        postfix = []\n        for token in expression:\n            if token.isdigit():\n                postfix.append(token)\n            elif token == '(':\n                stack.append(token)\n            elif token == ')':\n                while stack and stack[-1] != '(':\n                    postfix.append(stack.pop())\n                stack.pop()\n            else:\n                while stack and stack[-1] != '(' and precedence.get(stack[-1], 0) >= precedence.get(token, 0):\n                    postfix.append(stack.pop())\n                stack.append(token)\n        \n        while stack:\n            postfix.append(stack.pop())\n        \n        return postfix\n    \n    def evaluate_postfix(postfix):\n        stack = []\n        for token in postfix:\n            if token.isdigit():\n                stack.append(int(token))\n            else:\n                operand2 = stack.pop()\n                operand1 = stack.pop()\n                if token == '+':\n                    stack.append(operand1 + operand2)\n                elif token == '-':\n                    stack.append(operand1 - operand2)\n                elif token == '*':\n                    stack.append(operand1 * operand2)\n                elif token == '/':\n                    stack.append(operand1 // operand2)  # Perform floor division\n                elif token == '//':\n                    stack.append(operand1 // operand2)  # Perform floor division\n                elif token == '**':\n                    stack.append(operand1 ** operand2)\n        \n        return stack[-1]\n    \n    expression = []\n    for i in range(len(operators)):\n        expression.append(str(operands[i]))\n        expression.append(operators[i])\n    expression.append(str(operands[-1]))\n    \n    postfix_expr = infix_to_postfix(expression)\n    return evaluate_postfix(postfix_expr)", "is_solved": false, "iteration": 9, "prompt_tokens": 13833, "completion_tokens": 4442, "duration": 76.68342661857605}]}
