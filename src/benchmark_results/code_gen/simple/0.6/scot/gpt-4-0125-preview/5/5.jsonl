{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False", "prompt_tokens": 592, "completion_tokens": 148, "duration": 5.93319034576416}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_braces_count += 1\n        elif char == ')':\n            open_braces_count -= 1\n        current_group += char\n        if open_braces_count == 0 and current_group:\n            groups.append(current_group)\n            current_group = \"\"\n    return groups", "prompt_tokens": 650, "completion_tokens": 286, "duration": 15.326392889022827}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)", "prompt_tokens": 502, "completion_tokens": 146, "duration": 6.918517112731934}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 585, "completion_tokens": 139, "duration": 6.885287761688232}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 658, "completion_tokens": 273, "duration": 11.45677924156189}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 531, "completion_tokens": 151, "duration": 8.03194522857666}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 691, "completion_tokens": 310, "duration": 11.641516208648682}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 122, "duration": 6.040774822235107}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_ = 0\n    product = 1\n    \n    for number in numbers:\n        sum_ += number\n        product *= number\n        \n    return (sum_, product)", "prompt_tokens": 549, "completion_tokens": 145, "duration": 6.9777796268463135}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    rolling_max_list = [numbers[0]]\n    for num in numbers[1:]:\n        rolling_max_list.append(max(rolling_max_list[-1], num))\n    return rolling_max_list", "prompt_tokens": 611, "completion_tokens": 219, "duration": 9.871952056884766}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 661, "completion_tokens": 252, "duration": 10.385205030441284}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 502, "completion_tokens": 147, "duration": 7.1578381061553955}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 561, "completion_tokens": 204, "duration": 10.068822860717773}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 142, "duration": 9.167874574661255}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    current_prefix = \"\"\n    for ch in string:\n        current_prefix += ch\n        prefixes.append(current_prefix)\n    return prefixes", "prompt_tokens": 480, "completion_tokens": 154, "duration": 6.65015721321106}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 450, "completion_tokens": 102, "duration": 6.790760040283203}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 491, "completion_tokens": 145, "duration": 6.997009515762329}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 733, "completion_tokens": 216, "duration": 9.22804069519043}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 515, "completion_tokens": 142, "duration": 5.73327898979187}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    numeral_to_number = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    words = numbers.split()\n    sorted_numbers = sorted(words, key=lambda word: numeral_to_number[word])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 587, "completion_tokens": 230, "duration": 10.18762731552124}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    return closest_pair", "prompt_tokens": 721, "completion_tokens": 232, "duration": 10.42645788192749}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    rescaled_numbers = [(number - min_val) / range_val for number in numbers]\n    return rescaled_numbers", "prompt_tokens": 616, "completion_tokens": 182, "duration": 7.108175039291382}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 498, "completion_tokens": 158, "duration": 8.872211694717407}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for _ in string:\n        length += 1\n    return length", "prompt_tokens": 401, "completion_tokens": 89, "duration": 4.470649003982544}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 438, "completion_tokens": 150, "duration": 7.93250846862793}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 609, "completion_tokens": 168, "duration": 6.857187271118164}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n    return result", "prompt_tokens": 500, "completion_tokens": 126, "duration": 5.939338684082031}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \"\"\"\n    result = \"\"\n    for ch in string:\n        if ch.islower():\n            result += ch.upper()\n        else:\n            result += ch.lower()\n    return result", "prompt_tokens": 440, "completion_tokens": 151, "duration": 6.827192544937134}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 427, "completion_tokens": 129, "duration": 5.951784610748291}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 128, "duration": 6.1672539710998535}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positive_nums = [num for num in l if num > 0]\n    return positive_nums", "prompt_tokens": 540, "completion_tokens": 185, "duration": 9.79745864868164}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 544, "completion_tokens": 184, "duration": 9.577289819717407}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 == 0 and xs[-1] != 0:\n        x = 0\n        for _ in range(100):  # Iteration limit to prevent infinite loops\n            f_x = poly(xs, x)\n            if abs(f_x) < 1e-6:  # Close enough to zero\n                return x\n            derivative_xs = [i*coeff for i, coeff in enumerate(xs)][1:]  # Derivative of the polynomial\n            f_prime_x = poly(derivative_xs, x)\n            if f_prime_x == 0:  # Avoid division by zero\n                return x\n            x -= f_x / f_prime_x  # Newton-Raphson step\n    return x", "prompt_tokens": 897, "completion_tokens": 441, "duration": 20.98931860923767}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    temp = [l[i] for i in range(len(l)) if i % 3 == 0]\n    temp.sort()\n    result = []\n    temp_index = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(l[i])\n    return result", "prompt_tokens": 715, "completion_tokens": 315, "duration": 16.210044860839844}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n    l.sort()\n    for ele in l:\n        if ele not in unique_list:\n            unique_list.append(ele)\n    return unique_list", "prompt_tokens": 479, "completion_tokens": 177, "duration": 8.403584957122803}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 500, "completion_tokens": 132, "duration": 5.692237138748169}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 522, "completion_tokens": 171, "duration": 8.912018060684204}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    even_indices_values = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices_values.sort()\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_indices_values[even_index]\n            even_index += 1\n    return l", "prompt_tokens": 613, "completion_tokens": 255, "duration": 12.70240831375122}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group in reverse. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 676, "completion_tokens": 238, "duration": 10.152348756790161}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    fib1 = 1\n    fib2 = 1\n\n    while count < n:\n        if num == 2:  # Special case for the first prime number\n            count += 1\n            if count == n:\n                break\n        next_fib = fib1 + fib2\n        fib1 = fib2\n        fib2 = next_fib\n\n        if is_prime(next_fib):\n            num = next_fib\n            count += 1\n\n    return num", "prompt_tokens": 607, "completion_tokens": 335, "duration": 13.536486148834229}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        j, k = i + 1, n - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 735, "completion_tokens": 263, "duration": 9.983834981918335}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculates the number of collisions between two sets of n cars driving towards each other.\n    \"\"\"\n    # Since all cars move at the same speed and start at the same time, each pair will collide.\n    # Therefore, the number of collisions is simply n.\n    return n", "prompt_tokens": 717, "completion_tokens": 228, "duration": 10.787038326263428}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [num + 1 for num in l]", "prompt_tokens": 533, "completion_tokens": 93, "duration": 4.525258779525757}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 666, "completion_tokens": 136, "duration": 8.138922214508057}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result", "prompt_tokens": 540, "completion_tokens": 179, "duration": 11.243024349212646}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    return 0.5 * a * h", "prompt_tokens": 394, "completion_tokens": 78, "duration": 6.582981586456299}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for _ in range(4, n + 1):\n        next_element = sum(fib4_list)\n        fib4_list.pop(0)\n        fib4_list.append(next_element)\n    return fib4_list[-1]", "prompt_tokens": 729, "completion_tokens": 219, "duration": 8.336575984954834}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 494, "completion_tokens": 210, "duration": 13.309489011764526}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 502, "completion_tokens": 130, "duration": 7.145107269287109}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = 1\n    if n == 0:\n        return result\n    base = 2\n    exponent = n\n    modulus = p\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % modulus\n        base = (base * base) % modulus\n        exponent = exponent // 2\n    return result", "prompt_tokens": 606, "completion_tokens": 325, "duration": 17.570414066314697}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 524, "completion_tokens": 149, "duration": 7.48167610168457}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 592, "completion_tokens": 150, "duration": 9.832799434661865}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 494, "completion_tokens": 129, "duration": 4.9199910163879395}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    result = x + y\n    return result", "prompt_tokens": 398, "completion_tokens": 96, "duration": 6.371293067932129}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    if len(set(s0)) != len(set(s1)):\n        return False\n    return set(s0) == set(s1)", "prompt_tokens": 731, "completion_tokens": 239, "duration": 11.007047414779663}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    for i in range(2, n + 1):\n        result = a + b\n        a = b\n        b = result\n\n    return result", "prompt_tokens": 444, "completion_tokens": 201, "duration": 9.556596279144287}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "prompt_tokens": 563, "completion_tokens": 186, "duration": 9.553390741348267}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 484, "completion_tokens": 184, "duration": 11.117375373840332}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    common_elements = list(set(l1) & set(l2))\n    common_elements.sort()\n    return common_elements", "prompt_tokens": 578, "completion_tokens": 143, "duration": 6.2702295780181885}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n = n // factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 487, "completion_tokens": 174, "duration": 9.820390701293945}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n + 1))", "prompt_tokens": 492, "completion_tokens": 87, "duration": 6.695858001708984}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 611, "completion_tokens": 235, "duration": 9.254882097244263}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    \"\"\"Return the derivative of a polynomial represented by its coefficients.\"\"\"\n    return [coefficient * power for power, coefficient in enumerate(xs[1:], start=1)]", "prompt_tokens": 563, "completion_tokens": 133, "duration": 4.9191694259643555}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n + 1):\n        next_element = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(next_element)\n\n    return fibfib_list[n]", "prompt_tokens": 677, "completion_tokens": 238, "duration": 17.69690203666687}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"Returns the number of vowels in the string s, considering 'y' as a vowel only if it is at the end.\"\"\"\n    count = 0\n    s = s.lower()\n    for i, ch in enumerate(s):\n        if ch in 'aeiou':\n            count += 1\n        if ch == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "prompt_tokens": 600, "completion_tokens": 185, "duration": 7.379474401473999}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x_str = str(x)\n    length = len(x_str)\n    shift = shift % length\n    if shift == 0:\n        return x_str\n    shifted_str = x_str[-shift:] + x_str[:length - shift]\n    return shifted_str", "prompt_tokens": 547, "completion_tokens": 229, "duration": 12.77724575996399}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 82, "duration": 3.8409488201141357}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 780, "completion_tokens": 147, "duration": 8.14242148399353}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = None\n    smallest_index = None\n    for index, node in enumerate(arr):\n        if node % 2 == 0:\n            if smallest_even is None or node < smallest_even:\n                smallest_even = node\n                smallest_index = index\n            elif node == smallest_even and index < smallest_index:\n                smallest_index = index\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []", "prompt_tokens": 1038, "completion_tokens": 260, "duration": 14.328415870666504}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n    for num, freq in freq_map.items():\n        if num > 0 and freq >= num:\n            if greatest_int == -1 or num > greatest_int:\n                greatest_int = num\n\n    return greatest_int", "prompt_tokens": 730, "completion_tokens": 239, "duration": 10.554882526397705}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 615, "completion_tokens": 150, "duration": 10.381298065185547}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 239, "duration": 16.78837561607361}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    '''\n    Returns True if the object q will fly, and False otherwise.\n    '''\n    # Check if q is a palindrome\n    is_palindrome = q == q[::-1]\n    \n    # Check if sum of elements in q is less than or equal to w\n    sum_elements = sum(q)\n    \n    return is_palindrome and sum_elements <= w", "prompt_tokens": 910, "completion_tokens": 277, "duration": 12.749815225601196}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    min_changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    return min_changes", "prompt_tokens": 746, "completion_tokens": 242, "duration": 12.911876201629639}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 765, "completion_tokens": 188, "duration": 9.280050992965698}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for p1 in primes:\n        for p2 in primes:\n            for p3 in primes:\n                if p1 * p2 * p3 == a:\n                    return True\n    return False", "prompt_tokens": 576, "completion_tokens": 281, "duration": 12.021925210952759}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    \"\"\"Returns true if x is a simple power of n, otherwise false.\"\"\"\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False", "prompt_tokens": 618, "completion_tokens": 132, "duration": 5.816310167312622}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    '''\n    cube_root = abs(a) ** (1/3)\n    return round(cube_root) ** 3 == abs(a)", "prompt_tokens": 578, "completion_tokens": 162, "duration": 6.757806301116943}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    return sum(c in '2357BD' for c in num)", "prompt_tokens": 926, "completion_tokens": 91, "duration": 5.69404935836792}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"  # Initialize the binary string with the prefix\n    if decimal == 0:\n        return \"db0db\"\n    while decimal > 0:\n        remainder = decimal % 2  # Get the remainder when dividing by 2\n        binary_str = \"db\" + str(remainder) + binary_str[2:]  # Add the remainder to the beginning of the binary string\n        decimal = decimal // 2  # Update the decimal number by integer division by 2\n    binary_str = binary_str + \"db\"  # Add the suffix to the binary string\n    return binary_str", "prompt_tokens": 672, "completion_tokens": 275, "duration": 11.076435565948486}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    \"\"\"Check if the string is happy.\"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 596, "completion_tokens": 178, "duration": 8.993558883666992}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1096, "completion_tokens": 560, "duration": 27.66627311706543}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    length = len(string)\n    if length <= 1:\n        return False\n    if length == 2:\n        return True\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True", "prompt_tokens": 560, "completion_tokens": 237, "duration": 55.45384860038757}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)  # numbers starting with 1\n        else:\n            count += 2 * 10 ** (n - 2)  # numbers ending with 1\n\n    return count", "prompt_tokens": 445, "completion_tokens": 212, "duration": 10.298283576965332}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_digits)[2:]", "prompt_tokens": 601, "completion_tokens": 123, "duration": 7.938260316848755}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum_even_odd_index = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_index += lst[i]\n    return sum_even_odd_index", "prompt_tokens": 453, "completion_tokens": 185, "duration": 14.828871726989746}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Reorders each word in the string such that the characters are in ascending ASCII order.\n    \"\"\"\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 624, "completion_tokens": 185, "duration": 7.108084201812744}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list and an integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order,\n    and then coordinates of the row by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 929, "completion_tokens": 307, "duration": 19.619260787963867}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:  # Check if the array is empty\n        return []\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:  # Check if the sum is even\n        return sorted(array, reverse=True)\n    else:  # If the sum is odd\n        return sorted(array)", "prompt_tokens": 804, "completion_tokens": 223, "duration": 8.961439847946167}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 201, "duration": 10.588818788528442}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    return second_smallest", "prompt_tokens": 651, "completion_tokens": 239, "duration": 10.178105354309082}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with the word \"I\".\n    \"\"\"\n    import re\n    sentences = re.split(r'[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 546, "completion_tokens": 145, "duration": 7.264373779296875}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 592, "completion_tokens": 165, "duration": 11.333754062652588}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping case of all letters and replacing all vowels with the letter that appears 2 places ahead of that vowel in the English alphabet.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    vowel_replacement = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 's', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'S'}\n    encoded_message = ''\n    \n    for ch in message:\n        if ch.isalpha():\n            if ch in vowels:\n                encoded_message += vowel_replacement[ch]\n            else:\n                encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 650, "completion_tokens": 348, "duration": 13.244224071502686}
{"task_id": "HumanEval/94", "generated_code": "def find_largest_prime_sum_of_digits(lst):\n    \"\"\"\n    Finds the largest prime value in the list and returns the sum of its digits.\n    \"\"\"\n    from math import sqrt\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def calculate_sum_of_digits(num):\n        sum_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_digits += digit\n            num //= 10\n        return sum_digits\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n\n    if largest_prime is not None:\n        return calculate_sum_of_digits(largest_prime)\n    else:\n        return None", "prompt_tokens": 1017, "completion_tokens": 384, "duration": 15.481161117553711}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    is_lower = False\n    is_upper = False\n    for key in dict.keys():\n        if isinstance(key, str):\n            if key.islower():\n                is_lower = True\n            elif key.isupper():\n                is_upper = True\n        if is_lower and is_upper:\n            return False\n    return is_lower or is_upper", "prompt_tokens": 736, "completion_tokens": 227, "duration": 8.534889698028564}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    \"\"\"Returns an array of the first n integers that are prime numbers and less than n.\"\"\"\n    prime_numbers = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n    return prime_numbers", "prompt_tokens": 661, "completion_tokens": 214, "duration": 8.994571208953857}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\"\"\"\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    product = unit_a * unit_b\n    return product", "prompt_tokens": 530, "completion_tokens": 138, "duration": 9.16127872467041}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    \n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n            \n    return count", "prompt_tokens": 484, "completion_tokens": 165, "duration": 19.204392433166504}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = floor_num if num == floor_num else floor_num + 1\n    if num - floor_num < 0.5:\n        return floor_num\n    elif num - floor_num > 0.5:\n        return ceil_num\n    else:  # num is equidistant between floor_num and ceil_num\n        return ceil_num if num > 0 else floor_num - 1", "prompt_tokens": 687, "completion_tokens": 269, "duration": 15.800454139709473}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n    for i in range(n):\n        stones_list.append(stones)\n        if n % 2 == 0:\n            stones += 2\n        else:\n            stones += 2\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 143, "duration": 7.947696685791016}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words and return an array of the words.\n    \"\"\"\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in \", \":\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 637, "completion_tokens": 231, "duration": 9.309433937072754}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    max_even = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even", "prompt_tokens": 517, "completion_tokens": 205, "duration": 7.904868841171265}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total_sum = sum(range(n, m+1))\n        count = m - n + 1\n        avg = round(total_sum / count)\n        binary_avg = bin(avg)\n        return binary_avg", "prompt_tokens": 635, "completion_tokens": 162, "duration": 7.80217981338501}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    result.sort()\n    return result", "prompt_tokens": 577, "completion_tokens": 203, "duration": 7.269523859024048}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort(reverse=True)\n    result = [num_to_word[num] for num in filtered_arr]\n    return result", "prompt_tokens": 987, "completion_tokens": 357, "duration": 13.773258447647095}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    return result", "prompt_tokens": 600, "completion_tokens": 196, "duration": 8.23157286643982}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)", "prompt_tokens": 784, "completion_tokens": 202, "duration": 8.281063079833984}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num < 0:\n            sum_digits = sum(int(d) for d in str(num)[1:]) - 2*int(str(num)[1])\n        else:\n            sum_digits = sum(int(d) for d in str(num))\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 594, "completion_tokens": 243, "duration": 15.079571723937988}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_index = arr.index(min(arr))\n    arr = arr[min_index:] + arr[:min_index]\n    return arr == sorted(arr)", "prompt_tokens": 956, "completion_tokens": 145, "duration": 6.116304874420166}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    \"\"\"Determines whether it is possible to exchange elements between two lists to make the first list all even numbers.\"\"\"\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    for num in lst2:\n        if num % 2 == 0:\n            count_odd -= 1\n    return \"YES\" if count_odd <= 0 else \"NO\"", "prompt_tokens": 759, "completion_tokens": 210, "duration": 12.71348237991333}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    hist_dict = {}\n    max_count = 0\n    for letter in letters:\n        if letter in hist_dict:\n            hist_dict[letter] += 1\n        else:\n            hist_dict[letter] = 1\n        if hist_dict[letter] > max_count:\n            max_count = hist_dict[letter]\n    result_dict = {letter: count for letter, count in hist_dict.items() if count == max_count}\n    return result_dict", "prompt_tokens": 758, "completion_tokens": 305, "duration": 10.316442966461182}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    palindrome = result == result[::-1]\n    return (result, palindrome)", "prompt_tokens": 692, "completion_tokens": 150, "duration": 5.552422761917114}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result_lst = []\n    for s in lst:\n        count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        result_lst.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result_lst", "prompt_tokens": 732, "completion_tokens": 207, "duration": 8.066135168075562}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 198, "duration": 9.294965505599976}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1048, "completion_tokens": 179, "duration": 7.991102695465088}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 711, "completion_tokens": 153, "duration": 5.717550039291382}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\"\"\"\n    if not s:\n        return []\n    \n    words = s.split()\n    selected_words = []\n    \n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.lower() in \"bcdfghjklmnpqrstvwxyz\":\n                consonant_count += 1\n        if consonant_count == n:\n            selected_words.append(word)\n    \n    return selected_words", "prompt_tokens": 754, "completion_tokens": 257, "duration": 9.450754165649414}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    last_consonant_index = -1\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels:\n            last_consonant_index = i\n        elif word[i] in vowels and last_consonant_index != -1:\n            closest_vowel = word[i]\n            break\n    return closest_vowel", "prompt_tokens": 725, "completion_tokens": 297, "duration": 11.256144285202026}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    Input: lst: a list of two strings\n    Output: result: a string ('Yes' or 'No')\n    '''\n    open_count_first = lst[0].count('(')\n    close_count_first = lst[0].count(')')\n    open_count_second = lst[1].count('(')\n    close_count_second = lst[1].count(')')\n\n    # Check if the first string has more closing parentheses than opening ones\n    if close_count_first > open_count_first:\n        return 'No'\n    # Check if the second string can close all open parentheses from the first string and itself\n    if open_count_first + open_count_second >= close_count_first + close_count_second:\n        return 'Yes'\n    return 'No'", "prompt_tokens": 774, "completion_tokens": 344, "duration": 12.38218879699707}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k][::-1]", "prompt_tokens": 776, "completion_tokens": 139, "duration": 5.87934684753418}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 527, "completion_tokens": 137, "duration": 6.631157636642456}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 615, "completion_tokens": 205, "duration": 8.944495916366577}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n\n    odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 229, "duration": 9.468047618865967}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Split the date string by '-' and store the parts in variables: month, day, year.\n    parts = date.split('-')\n    # Check if the date string contains exactly 3 parts after splitting. If not, return False.\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    # Check if month, day, and year are all numeric. If not, return False.\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    # Convert month, day, and year to integers.\n    month, day, year = int(month), int(day), int(year)\n    # Check if month is between 1 and 12 (inclusive). If not, return False.\n    if month < 1 or month > 12:\n        return False\n    # Check if day is between 1 and 31 for months 1, 3, 5, 7, 8, 10, 12; between 1 and 30 for months 4, 6, 9, 11; and between 1 and 29 for February. If not, return False.\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:  # February\n        if day < 1 or day > 29:\n            return False\n    # Check if the date string matches the format 'mm-dd-yyyy'. If not, return False.\n    # This is implicitly checked by the previous conditions.\n    return True", "prompt_tokens": 1006, "completion_tokens": 607, "duration": 25.51046586036682}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((ord(c) - ord('a')) % 2 == 0 for c in txt if c.islower())", "prompt_tokens": 742, "completion_tokens": 263, "duration": 12.443260908126831}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicate_count = 0\n    for num in lst:\n        if prev is not None and num < prev:\n            return False\n        if prev is not None and num == prev:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                return False\n        else:\n            duplicate_count = 0\n        prev = num\n    return True", "prompt_tokens": 933, "completion_tokens": 266, "duration": 11.945707559585571}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n    \n    if max_start > min_end:\n        return \"NO\"\n    \n    length = min_end - max_start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 931, "completion_tokens": 304, "duration": 15.561119556427002}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sum_magnitude = 0\n    product_sign = 1\n    for num in arr:\n        sum_magnitude += abs(num)\n        product_sign *= (1 if num > 0 else -1 if num < 0 else 0)\n    return sum_magnitude * product_sign", "prompt_tokens": 648, "completion_tokens": 224, "duration": 7.877401113510132}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n\n    N = len(grid)\n    path = []\n    visited = set()\n    heap = []\n\n    # Convert grid to a list of (value, x, y) tuples\n    for i in range(N):\n        for j in range(N):\n            heappush(heap, (grid[i][j], i, j))\n\n    while k > 0:\n        val, x, y = heappop(heap)\n        if (x, y) not in visited:\n            path.append(val)\n            visited.add((x, y))\n            k -= 1\n            # Add neighbors to the heap\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited:\n                    heappush(heap, (grid[nx][ny], nx, ny))\n\n    return path[:k]", "prompt_tokens": 1280, "completion_tokens": 467, "duration": 67.1545877456665}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    seq = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            seq.append(1 + i // 2)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + seq[i - 3])\n    return seq", "prompt_tokens": 902, "completion_tokens": 282, "duration": 9.27760648727417}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n\n    if not has_odd:\n        return 0\n    else:\n        return product", "prompt_tokens": 482, "completion_tokens": 220, "duration": 8.859957933425903}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) > 0", "prompt_tokens": 642, "completion_tokens": 176, "duration": 8.322909832000732}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 643, "completion_tokens": 95, "duration": 7.565077543258667}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    '''\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or txt[-2].isspace()):\n        return True\n    return False", "prompt_tokens": 634, "completion_tokens": 187, "duration": 8.289366722106934}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index", "prompt_tokens": 559, "completion_tokens": 233, "duration": 10.8086416721344}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    '''\n    if not lst:\n        return (None, None)\n\n    max_neg = float('-inf')\n    min_pos = float('inf')\n\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n        if num > 0 and num < min_pos:\n            min_pos = num\n\n    if max_neg == float('-inf'):\n        max_neg = None\n    if min_pos == float('inf'):\n        min_pos = None\n\n    return (max_neg, min_pos)", "prompt_tokens": 687, "completion_tokens": 333, "duration": 16.390944480895996}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        try:\n            return float(x.replace(',', '.'))\n        except ValueError:\n            return None\n    \n    if type(a) != type(b):\n        return None\n    \n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        a_float = convert_to_float(a)\n        b_float = convert_to_float(b)\n        if a_float is None or b_float is None:\n            return None\n        if a_float > b_float:\n            return a\n        elif b_float > a_float:\n            return b\n        else:\n            return None\n    else:\n        return None", "prompt_tokens": 745, "completion_tokens": 383, "duration": 19.581075191497803}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n < 8:\n        return False\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        count += 1\n        if count == 4 and (n - 2*i) % 2 == 0 and (n - 2*i) >= 2:\n            return True\n    return False", "prompt_tokens": 536, "completion_tokens": 236, "duration": 9.839088678359985}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of a number.\"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 512, "completion_tokens": 133, "duration": 9.64853286743164}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    new_text = ''\n    count = 0\n    for i, ch in enumerate(text):\n        if ch == ' ':\n            count += 1\n            if i == len(text) - 1 or text[i+1] != ' ':  # Check if it's the last space in a sequence\n                if count > 2:\n                    new_text += '-'\n                else:\n                    new_text += '_' * count\n                count = 0\n        else:\n            if count > 2:\n                new_text += '-'\n            elif count > 0:\n                new_text += '_' * count\n            new_text += ch\n            count = 0\n    return new_text", "prompt_tokens": 624, "completion_tokens": 345, "duration": 16.373030185699463}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    count_digits = 0\n    count_dots = 0\n    valid_extension = False\n    for ch in file_name:\n        if ch.isdigit():\n            count_digits += 1\n        if ch == '.':\n            count_dots += 1\n    if count_digits > 3 or count_dots != 1:\n        return 'No'\n    name_part, extension_part = file_name.split('.')\n    if not name_part or not name_part[0].isalpha():\n        return 'No'\n    if extension_part not in ['txt', 'exe', 'dll']:\n        return 'No'\n    valid_extension = True\n    if valid_extension:\n        return 'Yes'", "prompt_tokens": 923, "completion_tokens": 386, "duration": 14.02264952659607}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of integers, squares the integer entry if its index is a multiple of 3, cubes the integer entry if its index is a multiple of 4 and not a multiple of 3, and leaves the entry unchanged otherwise. It then returns the sum of all entries.\n    \"\"\"\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum", "prompt_tokens": 699, "completion_tokens": 244, "duration": 13.718241691589355}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 681, "completion_tokens": 232, "duration": 12.852187156677246}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    return product_num % product_den == 0", "prompt_tokens": 643, "completion_tokens": 141, "duration": 6.8269124031066895}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 641, "completion_tokens": 240, "duration": 8.142683982849121}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        num_str = str(abs(num))\n        if int(num_str) > 10 and int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 598, "completion_tokens": 174, "duration": 7.7009546756744385}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    count = 0\n    for i in range(1, n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n+1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 317, "duration": 14.99819827079773}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet_positions = {planet: position for position, planet in enumerate(planets)}\n    \n    if planet1 not in planet_positions or planet2 not in planet_positions:\n        return ()\n    \n    pos1, pos2 = planet_positions[planet1], planet_positions[planet2]\n    lower, upper = sorted([pos1, pos2])\n    \n    return tuple(planets[lower+1:upper])", "prompt_tokens": 847, "completion_tokens": 296, "duration": 17.0871479511261}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 747, "completion_tokens": 187, "duration": 11.773242950439453}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 150, "duration": 10.327554702758789}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(num**2 for num in lst if isinstance(num, int) and num > 0 and num % 2 != 0)", "prompt_tokens": 612, "completion_tokens": 117, "duration": 8.337495803833008}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 806, "completion_tokens": 120, "duration": 6.152453422546387}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension", "prompt_tokens": 950, "completion_tokens": 235, "duration": 10.84448528289795}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    a_concat = a + a\n    for i in range(n):\n        if a_concat[i:i+m] == b:\n            return True\n    return False", "prompt_tokens": 642, "completion_tokens": 191, "duration": 10.110653400421143}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if not digit.isdigit():\n            continue\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 508, "completion_tokens": 197, "duration": 10.512979507446289}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    mini_roman = \"\"\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            mini_roman += numeral\n            number -= value\n    return mini_roman", "prompt_tokens": 566, "completion_tokens": 294, "duration": 13.885676622390747}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    '''\n    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n\n    if a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared:\n        return True\n    else:\n        return False", "prompt_tokens": 610, "completion_tokens": 245, "duration": 9.001821994781494}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars or (len(unique_chars) == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = len(unique_chars)\n\n    return max_word", "prompt_tokens": 593, "completion_tokens": 173, "duration": 10.019692420959473}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Returns an array of [total number of eaten carrots after meals, number of carrots left after meals]\n    \"\"\"\n    total_eaten = number + min(need, remaining)\n    left_after_meals = max(0, remaining - need)\n    return [total_eaten, left_after_meals]", "prompt_tokens": 932, "completion_tokens": 194, "duration": 11.559344053268433}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i+1]\n        elif op == '-':\n            result -= operand[i+1]\n        elif op == '*':\n            result *= operand[i+1]\n        elif op == '//':\n            result //= operand[i+1]\n        elif op == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 856, "completion_tokens": 340, "duration": 17.49858045578003}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(c.isalpha() for c in result):\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 191, "duration": 8.823599576950073}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    else:\n        md5_hash = hashlib.md5(text.encode()).hexdigest()\n        return md5_hash", "prompt_tokens": 468, "completion_tokens": 132, "duration": 13.371430158615112}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits = []\n    start, end = (a, b) if a < b else (b, a)\n    for number in range(start, end + 1):\n        if number % 2 == 0:\n            even_digits.append(number)\n    return even_digits", "prompt_tokens": 607, "completion_tokens": 237, "duration": 21.10168766975403}
