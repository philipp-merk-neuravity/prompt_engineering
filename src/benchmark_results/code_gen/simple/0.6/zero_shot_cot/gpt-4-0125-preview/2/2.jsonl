{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list of numbers to make it easier to find close elements\n    numbers.sort()\n    # Iterate through the list of numbers except the last one\n    for i in range(len(numbers) - 1):\n        # Check if the difference between the current number and the next one is less than the threshold\n        if numbers[i + 1] - numbers[i] < threshold:\n            # If a pair of numbers closer than the threshold is found, return True\n            return True\n    # If no such pair is found, return False\n    return False", "prompt_tokens": 163, "completion_tokens": 142, "duration": 19.306781768798828}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string to simplify processing\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to hold the groups of parentheses\n    groups = []\n    \n    # Initialize a variable to keep track of the depth of nested parentheses\n    depth = 0\n    \n    # Initialize an empty string to build the current group of parentheses\n    current_group = \"\"\n    \n    # Loop through each character in the input string\n    for char in paren_string:\n        # If the character is an opening parenthesis\n        if char == \"(\":\n            # Increase the depth of nesting\n            depth += 1\n            # Add the character to the current group\n            current_group += char\n        # If the character is a closing parenthesis\n        elif char == \")\":\n            # Decrease the depth of nesting\n            depth -= 1\n            # Add the character to the current group\n            current_group += char\n            # If the depth reaches 0, it means the current group is complete\n            if depth == 0:\n                # Add the current group to the list of groups\n                groups.append(current_group)\n                # Reset the current group to an empty string for the next group\n                current_group = \"\"\n    \n    # Return the list of separated groups of parentheses\n    return groups", "prompt_tokens": 154, "completion_tokens": 294, "duration": 10.447288513183594}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    # Subtract the integer part from the original number to get the decimal part\n    return number - int(number)", "prompt_tokens": 125, "completion_tokens": 37, "duration": 2.551673650741577}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    # Initialize the balance to 0\n    balance = 0\n    # Iterate over each operation in the list\n    for operation in operations:\n        # Update the balance by adding the current operation\n        balance += operation\n        # If the balance falls below zero, return True\n        if balance < 0:\n            return True\n    # If the loop completes without the balance falling below zero, return False\n    return False", "prompt_tokens": 158, "completion_tokens": 111, "duration": 4.925734519958496}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # First, calculate the mean of the numbers\n    mean_value = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences from the mean for each number\n    absolute_differences = [abs(x - mean_value) for x in numbers]\n    \n    # Finally, calculate the mean of these absolute differences\n    mad = sum(absolute_differences) / len(absolute_differences)\n    \n    return mad", "prompt_tokens": 156, "completion_tokens": 109, "duration": 4.845256567001343}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    # Initialize an empty list to store the result\n    result = []\n    # Loop over the list of numbers\n    for i in range(len(numbers)):\n        # Append the current number to the result\n        result.append(numbers[i])\n        # Check if it's not the last element to avoid adding the delimiter at the end\n        if i < len(numbers) - 1:\n            # Append the delimiter after the current number\n            result.append(delimeter)\n    return result", "prompt_tokens": 131, "completion_tokens": 124, "duration": 5.650768041610718}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Initialize an empty list to store the maximum depth of each group\n    max_depths = []\n    # Split the input string by spaces to separate each group\n    groups = paren_string.split()\n    # Iterate over each group to calculate its maximum depth\n    for group in groups:\n        # Initialize a variable to keep track of current depth\n        current_depth = 0\n        # Initialize a variable to keep track of maximum depth\n        max_depth = 0\n        # Iterate over each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increase current depth\n            if char == '(':\n                current_depth += 1\n                # Update max_depth if current_depth is greater than max_depth\n                max_depth = max(max_depth, current_depth)\n            # If the character is a closing parenthesis, decrease current depth\n            elif char == ')':\n                current_depth -= 1\n        # Append the max_depth of the current group to the list\n        max_depths.append(max_depth)\n    # Return the list of maximum depths\n    return max_depths", "prompt_tokens": 151, "completion_tokens": 253, "duration": 9.695898532867432}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Create an empty list to store strings that contain the substring\n    filtered_strings = []\n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the current string contains the given substring\n        if substring in string:\n            # If it does, append it to the filtered_strings list\n            filtered_strings.append(string)\n    # Return the list of filtered strings\n    return filtered_strings", "prompt_tokens": 132, "completion_tokens": 115, "duration": 4.80685567855835}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Initialize sum and product variables\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Add the current number to the sum\n        sum_of_numbers += number\n        # Multiply the current number with the product\n        product_of_numbers *= number\n    \n    # Return the sum and product as a tuple\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 149, "completion_tokens": 121, "duration": 4.28741979598999}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store the rolling max values\n    rolling_max_values = []\n    # Initialize current max value to negative infinity to ensure any number will be larger\n    current_max = float('-inf')\n    # Iterate through each number in the input list\n    for number in numbers:\n        # Update current max if the current number is greater than the current max\n        current_max = max(current_max, number)\n        # Append the current max to the rolling max values list\n        rolling_max_values.append(current_max)\n    # Return the list of rolling max values\n    return rolling_max_values", "prompt_tokens": 139, "completion_tokens": 145, "duration": 4.8367087841033936}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    # Check if the string is equal to its reverse\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    # If the string is already a palindrome, return it as is\n    if is_palindrome(string):\n        return string\n    \n    # Start from the end of the string and move towards the start\n    for i in range(len(string), -1, -1):\n        # Check if the substring is a palindrome\n        if is_palindrome(string[:i]):\n            # If it is, append the reverse of the remaining prefix to the end of the string\n            return string + string[:len(string)-i][::-1]\n    # If no palindromic postfix found, return the reversed string appended to original (handles empty string case as well)\n    return string + string[::-1]", "prompt_tokens": 182, "completion_tokens": 188, "duration": 7.850175857543945}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    # Convert the input strings to integer with base 2 to perform bitwise XOR\n    xor_result = int(a, 2) ^ int(b, 2)\n    # Convert the result back to binary and remove the '0b' prefix\n    return bin(xor_result)[2:]", "prompt_tokens": 115, "completion_tokens": 78, "duration": 3.1313982009887695}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    # Check if the input list is empty and return None if true\n    if not strings:\n        return None\n    \n    # Initialize a variable to keep track of the longest string found so far\n    longest_string = strings[0]\n    \n    # Iterate through each string in the list\n    for string in strings:\n        # Check if the current string is longer than the longest string found so far\n        if len(string) > len(longest_string):\n            # Update the longest string found so far\n            longest_string = string\n    \n    # Return the longest string found\n    return longest_string", "prompt_tokens": 141, "completion_tokens": 144, "duration": 6.046813249588013}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Step 1: Check if b equals 0, if so, return a as the GCD\n    if b == 0:\n        return a\n    # Step 2: Otherwise, recursively call the function with b and a % b\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 110, "completion_tokens": 88, "duration": 3.22754168510437}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    # Initialize an empty list to store the prefixes\n    prefixes = []\n    # Iterate over the string using a range to get all possible prefix lengths\n    for i in range(len(string)):\n        # Add the substring from the start to the current index + 1 (to include the character at the current index)\n        prefixes.append(string[:i+1])\n    # Return the list of prefixes\n    return prefixes", "prompt_tokens": 98, "completion_tokens": 106, "duration": 4.6585588455200195}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    # Create a list of numbers from 0 to n using range and convert each number to string\n    numbers_as_strings = [str(i) for i in range(n + 1)]\n    # Join the list of strings with spaces and return the result\n    return ' '.join(numbers_as_strings)", "prompt_tokens": 108, "completion_tokens": 76, "duration": 3.1535351276397705}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to ignore case difference\n    lower_case_string = string.lower()\n    # Use set to find distinct characters since set stores unique elements\n    distinct_characters = set(lower_case_string)\n    # Return the number of distinct characters\n    return len(distinct_characters)", "prompt_tokens": 110, "completion_tokens": 75, "duration": 3.080570936203003}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Split the input string by spaces to process each note separately\n    notes = music_string.split()\n    # Initialize an empty list to store the duration of each note\n    durations = []\n    # Iterate over each note in the list\n    for note in notes:\n        # Check if the note is a whole note\n        if note == 'o':\n            durations.append(4)  # Add 4 to the list since it lasts 4 beats\n        # Check if the note is a half note\n        elif note == 'o|':\n            durations.append(2)  # Add 2 to the list since it lasts 2 beats\n        # Check if the note is a quarter note\n        elif note == '.|':\n            durations.append(1)  # Add 1 to the list since it lasts 1 beat\n    # Return the list of durations\n    return durations", "prompt_tokens": 211, "completion_tokens": 207, "duration": 7.41545033454895}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    # Initialize a count variable to 0, to keep track of occurrences\n    count = 0\n    # Initialize a start variable to 0, to keep track of where to start searching for the substring\n    start = 0\n    \n    while True:\n        # Use the find method to search for the substring in the string starting from 'start'\n        start = string.find(substring, start)\n        # If the substring is not found, break out of the loop\n        if start == -1: \n            break\n        # If the substring is found, increment count by 1\n        count += 1\n        # Increment start by 1 to search for the next possible overlapping occurrence\n        start += 1\n    \n    # Return the total count of occurrences\n    return count", "prompt_tokens": 128, "completion_tokens": 183, "duration": 8.183092832565308}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    # Create a mapping of words to their numerical equivalents\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                   'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Split the input string into a list of words\n    words = numbers.split()\n    \n    # Convert the list of words to a list of numbers using the mapping\n    nums = [word_to_num[word] for word in words]\n    \n    # Sort the list of numbers\n    nums.sort()\n    \n    # Convert the sorted list of numbers back to a list of words\n    sorted_words = [list(word_to_num.keys())[list(word_to_num.values()).index(num)] for num in nums]\n    \n    # Join the list of words back into a single string\n    return ' '.join(sorted_words)", "prompt_tokens": 144, "completion_tokens": 223, "duration": 8.327171802520752}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the list to ensure elements are in ascending order\n    numbers.sort()\n    # Initialize variables to track the closest pair of elements and the smallest difference found\n    closest_pair = (numbers[0], numbers[1])\n    smallest_difference = abs(numbers[1] - numbers[0])\n    # Iterate over the list, comparing each element with its next neighbor\n    for i in range(len(numbers) - 1):\n        # Calculate the difference between the current pair\n        difference = abs(numbers[i+1] - numbers[i])\n        # If the current difference is smaller than the smallest found so far, update variables\n        if difference < smallest_difference:\n            smallest_difference = difference\n            closest_pair = (numbers[i], numbers[i+1])\n    # Return the pair of elements that are closest to each other\n    return closest_pair", "prompt_tokens": 205, "completion_tokens": 201, "duration": 7.324848413467407}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Calculate the range of the numbers\n    range_val = max_val - min_val\n    \n    # Apply linear transformation to each number\n    # Subtract the minimum and divide by the range\n    transformed_numbers = [(num - min_val) / range_val for num in numbers]\n    \n    return transformed_numbers", "prompt_tokens": 162, "completion_tokens": 113, "duration": 5.5669496059417725}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Initialize an empty list to store the integers\n    integers_only = []\n    # Iterate through each element in the input list\n    for value in values:\n        # Check if the element is of type int\n        if isinstance(value, int):\n            # If it is an integer, append it to the integers_only list\n            integers_only.append(value)\n    # Return the list containing only integers\n    return integers_only", "prompt_tokens": 130, "completion_tokens": 111, "duration": 3.973938465118408}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    # Initialize a variable to hold the count of characters\n    count = 0\n    # Iterate over each character in the string\n    for char in string:\n        # For each character, increase the count by 1\n        count += 1\n    # Return the total count of characters as the length of the string\n    return count", "prompt_tokens": 83, "completion_tokens": 85, "duration": 3.5145344734191895}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    # Start from n-1 and go down to 2 (1 will divide any number so it's not considered)\n    for i in range(n-1, 1, -1):\n        # Check if the current number divides n evenly\n        if n % i == 0:\n            # If it does, return this number as it is the largest divisor less than n\n            return i\n    # If no divisor found (which happens for prime numbers), return 1\n    return 1", "prompt_tokens": 92, "completion_tokens": 120, "duration": 6.968114852905273}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    # Initialize an empty list to store the prime factors\n    factors = []\n    # Start dividing n by 2 to find the number of 2s that divide it\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    # After factorizing out all 2s, we start with 3 and only go up to the square root of n\n    # because a larger factor would have already been identified as a multiple of a smaller factor\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    # If n is a prime number greater than 2, it won't be factorized in the loop\n    # So, we need to add it to the list as it is a factor of itself\n    if n > 2:\n        factors.append(n)\n    return factors", "prompt_tokens": 165, "completion_tokens": 241, "duration": 8.023438215255737}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Create a dictionary to count occurrences of each number\n    count_dict = {}\n    # Iterate through the list of numbers\n    for num in numbers:\n        # If the number is in the dictionary, increment its count\n        if num in count_dict:\n            count_dict[num] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            count_dict[num] = 1\n            \n    # Create a list to store the result\n    result = []\n    # Iterate through the list of numbers again\n    for num in numbers:\n        # If the count of the number is 1 (meaning it is unique), add it to the result list\n        if count_dict[num] == 1:\n            result.append(num)\n    # Return the result list\n    return result", "prompt_tokens": 123, "completion_tokens": 191, "duration": 8.22638988494873}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    # Initialize an empty string to store the result\n    result = ''\n    # Iterate through each character in the input string\n    for char in string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Convert to lowercase and add to result\n            result += char.lower()\n        else:\n            # Convert to uppercase and add to result\n            result += char.upper()\n    # Return the resulting string\n    return result", "prompt_tokens": 88, "completion_tokens": 107, "duration": 4.826351881027222}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    # Initialize an empty string to hold the result\n    result = \"\"\n    # Iterate through each string in the list\n    for string in strings:\n        # Concatenate the current string to the result string\n        result += string\n    # Return the concatenated result\n    return result", "prompt_tokens": 96, "completion_tokens": 78, "duration": 3.6353580951690674}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Initialize an empty list to hold strings that start with the prefix\n    filtered_strings = []\n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the current string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, append it to the filtered_strings list\n            filtered_strings.append(string)\n    # Return the list of filtered strings\n    return filtered_strings", "prompt_tokens": 126, "completion_tokens": 116, "duration": 6.033889055252075}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    # Initialize an empty list to store positive numbers\n    positive_numbers = []\n    # Iterate through each number in the input list\n    for number in l:\n        # Check if the current number is greater than 0\n        if number > 0:\n            # If it is, append it to the list of positive numbers\n            positive_numbers.append(number)\n    # Return the list of positive numbers\n    return positive_numbers", "prompt_tokens": 153, "completion_tokens": 99, "duration": 4.511337757110596}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    # Check if n is less than 2, which are not prime\n    if n < 2:\n        return False\n    # Check for factors of n from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        # If n is divisible by any number other than 1 and itself, it's not prime\n        if n % i == 0:\n            return False\n    # If no factors were found, n is prime\n    return True", "prompt_tokens": 139, "completion_tokens": 122, "duration": 5.14207124710083}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef find_zero(xs: list) -> float:\n    # Define the polynomial function as described\n    def poly(x):\n        return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n    \n    # Define an initial guess for the root\n    x0 = 0.0\n    \n    # Use Newton's method to find a root\n    for _ in range(100):  # Limit iterations to prevent infinite loop\n        # Calculate the value of the polynomial at x0\n        y = poly(x0)\n        # Calculate the derivative of the polynomial at x0\n        dy = sum(i * coeff * math.pow(x0, i-1) for i, coeff in enumerate(xs) if i > 0)\n        # Calculate the next approximation of the root\n        x0 -= y / dy\n    \n    return x0", "prompt_tokens": 298, "completion_tokens": 183, "duration": 7.7095396518707275}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3 (0-based indexing: indices divisible by 3 are 2, 5, 8, ...)\n    elements_at_divisible_indices = [l[i] for i in range(len(l)) if (i + 1) % 3 == 0]\n    \n    # Sort the extracted elements\n    sorted_elements = sorted(elements_at_divisible_indices)\n    \n    # Replace the elements at indices divisible by 3 in the original list with the sorted elements\n    for i in range(len(l)):\n        if (i + 1) % 3 == 0:\n            l[i] = sorted_elements.pop(0)  # Pop the first element from the sorted list and replace\n    \n    return l", "prompt_tokens": 190, "completion_tokens": 168, "duration": 5.706691741943359}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    # Convert the list to a set to remove duplicates\n    unique_set = set(l)\n    # Convert the set back to a list\n    unique_list = list(unique_set)\n    # Sort the list\n    unique_list.sort()\n    return unique_list", "prompt_tokens": 113, "completion_tokens": 63, "duration": 2.7135257720947266}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    # Initialize max_element as the first element of the list\n    max_element = l[0]\n    # Loop through each element in the list starting from the second element\n    for element in l[1:]:\n        # If the current element is greater than max_element, update max_element\n        if element > max_element:\n            max_element = element\n    # Return the maximum element found\n    return max_element", "prompt_tokens": 122, "completion_tokens": 97, "duration": 5.783877849578857}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    # Initialize a counter for the appearances of digit 7\n    count_sevens = 0\n    # Loop through numbers from 1 to n-1\n    for i in range(1, n):\n        # Check if the number is divisible by 11 or 13\n        if i % 11 == 0 or i % 13 == 0:\n            # Convert the number to a string to check for digit '7'\n            num_str = str(i)\n            # Count how many '7's are in the number\n            count_sevens += num_str.count('7')\n    # Return the total count of '7's found\n    return count_sevens", "prompt_tokens": 119, "completion_tokens": 156, "duration": 6.227009296417236}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Extract even-indexed elements (considering 0 as an even index)\n    even_indexed_elements = [l[i] for i in range(len(l)) if i % 2 == 0]\n    # Sort the extracted elements\n    even_indexed_elements_sorted = sorted(even_indexed_elements)\n    # Re-insert the sorted elements back into their original positions\n    for i in range(0, len(l), 2):\n        l[i] = even_indexed_elements_sorted[i // 2]\n    return l", "prompt_tokens": 163, "completion_tokens": 121, "duration": 4.9331748485565186}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # undo the cycle in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 198, "completion_tokens": 134, "duration": 5.504732847213745}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Define a function to generate the next Fibonacci number\n    def next_fib(a, b):\n        return a + b\n\n    # Initialize variables\n    count = 0  # To keep track of how many prime Fibonacci numbers have been found\n    a, b = 0, 1  # Starting values for Fibonacci sequence\n\n    # Loop until we find the n-th prime Fibonacci number\n    while True:\n        fib = next_fib(a, b)  # Get the next Fibonacci number\n        a, b = b, fib  # Update the values for the next iteration\n\n        # Check if the Fibonacci number is prime\n        if is_prime(fib):\n            count += 1  # Increment the count of prime Fibonacci numbers found\n            if count == n:  # If we've found the n-th prime Fibonacci, return it\n                return fib", "prompt_tokens": 137, "completion_tokens": 262, "duration": 9.889034986495972}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    # Sort the list to make it easier to work with\n    l.sort()\n    # Loop through the list to use each element as a potential start of a triple\n    for i in range(len(l) - 2):\n        # Use two pointers, starting right after the current element and at the end of the list\n        left, right = i + 1, len(l) - 1\n        # Move the two pointers towards each other to find a potential triple that sums to zero\n        while left < right:\n            # Calculate the sum of the current triple\n            total = l[i] + l[left] + l[right]\n            # If the sum is zero, we've found a triple\n            if total == 0:\n                return True\n            # If the sum is less than zero, move the left pointer to the right\n            elif total < 0:\n                left += 1\n            # If the sum is greater than zero, move the right pointer to the left\n            else:\n                right -= 1\n    # If we exit the loop without returning True, no triple sums to zero\n    return False", "prompt_tokens": 199, "completion_tokens": 250, "duration": 9.518141508102417}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    # The number of collisions is simply the total number of pairwise interactions between the two sets of cars.\n    # Since each car moving left to right will eventually collide with each car moving right to left, and there are n cars in each set,\n    # the total number of collisions is n * n.\n    return n * n", "prompt_tokens": 191, "completion_tokens": 83, "duration": 4.478274345397949}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    # Create a new list to store the incremented values\n    incremented_list = []\n    # Loop through each element in the input list\n    for element in l:\n        # Increment the current element by 1 and append it to the new list\n        incremented_list.append(element + 1)\n    # Return the new list with all elements incremented by 1\n    return incremented_list", "prompt_tokens": 148, "completion_tokens": 90, "duration": 4.138532638549805}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    # Create an empty set to store unique elements from the list\n    seen = set()\n    # Iterate through each element in the list\n    for num in l:\n        # If the negative of the current element is in the seen set, return True\n        if -num in seen:\n            return True\n        # Add the current element to the seen set\n        seen.add(num)\n    # If no pairs sum to zero, return False\n    return False", "prompt_tokens": 197, "completion_tokens": 107, "duration": 3.811953544616699}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop until x is greater than 0\n    while x > 0:\n        # Find the remainder of x divided by base, convert it to string, and add it to the result string\n        result = str(x % base) + result\n        # Update x to be the quotient of x divided by base\n        x = x // base\n    # Return the result string\n    return result", "prompt_tokens": 131, "completion_tokens": 118, "duration": 5.3858482837677}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    # Calculate the area of a triangle\n    area = (a * h) / 2\n    return area", "prompt_tokens": 86, "completion_tokens": 36, "duration": 2.0325143337249756}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    # Base cases for the sequence\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    # Initialize the first four values of the sequence\n    a, b, c, d = 0, 0, 2, 0\n    \n    # Loop from 4 to n (inclusive) to calculate the n-th value\n    for _ in range(4, n + 1):\n        # Calculate the next value in the sequence\n        temp = a + b + c + d\n        # Update the values for the next iteration\n        a, b, c, d = b, c, d, temp\n    \n    # Return the n-th value of the sequence\n    return d", "prompt_tokens": 211, "completion_tokens": 196, "duration": 8.007939100265503}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    # First, sort the list to get the elements in order\n    l.sort()\n    # Check if the number of elements in the list is odd\n    if len(l) % 2 != 0:\n        # If odd, return the middle element\n        return l[len(l) // 2]\n    else:\n        # If even, return the average of the two middle elements\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "prompt_tokens": 115, "completion_tokens": 118, "duration": 3.738959312438965}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    # Convert the string to lowercase to ensure the function is case-insensitive\n    text = text.lower()\n    # Remove all non-alphanumeric characters to ensure the function only considers letters and numbers\n    cleaned_text = ''.join(char for char in text if char.isalnum())\n    # Compare the cleaned text to its reverse. If they are the same, it's a palindrome\n    return cleaned_text == cleaned_text[::-1]", "prompt_tokens": 111, "completion_tokens": 102, "duration": 4.493507623672485}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    # Initialize the result to 1 as any number power 0 is 1\n    result = 1\n    # Base which is 2 in our case\n    base = 2\n    \n    # Loop until n becomes 0\n    while n > 0:\n        # If n is odd, multiply base with result and take modulo p\n        if n % 2 == 1:\n            result = (result * base) % p\n        # Divide n by 2\n        n = n // 2\n        # Multiply base by itself and take modulo p\n        base = (base * base) % p\n    \n    # Return the final result\n    return result", "prompt_tokens": 145, "completion_tokens": 161, "duration": 8.630404949188232}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    # Create an empty string to hold the decoded characters\n    decoded_string = \"\"\n    \n    # Loop through each character in the input string\n    for ch in s:\n        # Convert the character to its corresponding ASCII value, then shift it back by 5\n        # Using modulo 26 to ensure it wraps around the alphabet correctly\n        # Finally, convert it back to a character and add it to the decoded string\n        decoded_string += chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a'))\n    \n    # Return the fully decoded string\n    return decoded_string", "prompt_tokens": 130, "completion_tokens": 138, "duration": 6.164795875549316}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    # Define the vowels in both uppercase and lowercase to ensure the function is case-insensitive\n    vowels = \"aeiouAEIOU\"\n    # Use a generator expression to iterate through each character in the input string\n    # and filter out the characters if they are not in the vowels string\n    result = ''.join(char for char in text if char not in vowels)\n    # Return the resulting string which excludes the vowels\n    return result", "prompt_tokens": 162, "completion_tokens": 103, "duration": 4.515118837356567}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    # Iterate through each element in the list\n    for element in l:\n        # Check if the current element is greater than or equal to the threshold\n        if element >= t:\n            # If so, return False immediately\n            return False\n    # If the loop completes without returning False, all elements are below the threshold\n    return True", "prompt_tokens": 119, "completion_tokens": 90, "duration": 3.931217670440674}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    # Return the sum of x and y\n    return x + y", "prompt_tokens": 93, "completion_tokens": 33, "duration": 2.208934783935547}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    # Convert both strings into sets to remove duplicates and compare unique characters only\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n    \n    # Compare the sets directly; if they are equal, it means both strings have the same unique characters\n    return set_s0 == set_s1", "prompt_tokens": 180, "completion_tokens": 87, "duration": 3.2920777797698975}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    # Base case: if n is 0 or 1, return n itself\n    if n <= 1:\n        return n\n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    # Iterate from 2 to n (inclusive)\n    for _ in range(2, n + 1):\n        # Calculate the next Fibonacci number\n        a, b = b, a + b\n    # Return the n-th Fibonacci number\n    return b", "prompt_tokens": 92, "completion_tokens": 118, "duration": 5.095452070236206}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a counter to track the number of open brackets\n    open_brackets = 0\n    \n    # Iterate through each character in the input string\n    for char in brackets:\n        # If an open bracket is found, increment the counter\n        if char == \"<\":\n            open_brackets += 1\n        # If a close bracket is found, decrement the counter\n        elif char == \">\":\n            open_brackets -= 1\n            # If the counter goes negative, it means a closing bracket came before an opening one\n            if open_brackets < 0:\n                return False\n    \n    # If the counter is zero, all open brackets have been closed\n    return open_brackets == 0", "prompt_tokens": 132, "completion_tokens": 165, "duration": 4.863015174865723}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    # Check if the list is empty or has a single element, which is trivially monotonic\n    if len(l) <= 1:\n        return True\n    # Determine if the list is increasing by comparing the first two elements\n    is_increasing = l[1] > l[0]\n    # Loop through the list starting from the second element\n    for i in range(1, len(l)):\n        # If the list was initially increasing but now decreases, return False\n        if is_increasing and l[i] < l[i - 1]:\n            return False\n        # If the list was initially decreasing but now increases, return False\n        if not is_increasing and l[i] > l[i - 1]:\n            return False\n    # If none of the above conditions were met, the list is monotonic\n    return True", "prompt_tokens": 127, "completion_tokens": 192, "duration": 5.990931987762451}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    # Convert both lists to sets to remove duplicates and allow set operations\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of both sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set of common elements back to a list and sort it\n    sorted_common_elements = sorted(list(common_elements))\n    \n    return sorted_common_elements", "prompt_tokens": 154, "completion_tokens": 105, "duration": 5.335487604141235}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    # Initialize the largest prime factor variable\n    largest_prime = -1\n    \n    # Divide n by 2 to remove all the even factors if any\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Start checking for factors from 3 onwards\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, remove i and update largest_prime\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n    \n    # If n becomes a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime", "prompt_tokens": 103, "completion_tokens": 168, "duration": 5.625177383422852}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    # Calculate the sum using the formula for the sum of the first n natural numbers\n    return n * (n + 1) // 2", "prompt_tokens": 134, "completion_tokens": 47, "duration": 2.362154245376587}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a counter for open brackets\n    open_brackets = 0\n    \n    # Iterate through each character in the string\n    for char in brackets:\n        # If the character is an opening bracket, increment the counter\n        if char == '(':\n            open_brackets += 1\n        # If it's a closing bracket\n        elif char == ')':\n            # If there are no open brackets to match, return False\n            if open_brackets == 0:\n                return False\n            # Otherwise, decrement the counter as we found a match\n            open_brackets -= 1\n    \n    # If all open brackets have been closed, the counter should be 0\n    return open_brackets == 0", "prompt_tokens": 129, "completion_tokens": 167, "duration": 6.815424680709839}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    # Initialize an empty list to store the coefficients of the derivative\n    derivative_coeffs = []\n    \n    # Iterate over the list of coefficients, skipping the first element (constant term)\n    for i in range(1, len(xs)):\n        # Calculate the derivative of each term and append it to the derivative_coeffs list\n        # The derivative of a*x^n is n*a*x^(n-1), so we multiply the coefficient by its index\n        derivative_coeffs.append(i * xs[i])\n    \n    # Return the list of coefficients for the derivative polynomial\n    return derivative_coeffs", "prompt_tokens": 148, "completion_tokens": 128, "duration": 5.2530434131622314}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initialize the first three numbers of the FibFib sequence\n    a, b, c = 0, 0, 1\n    \n    # Iterate from 3 to n to calculate the nth FibFib number\n    for _ in range(3, n + 1):\n        # The next number is the sum of the previous three\n        next_number = a + b + c\n        # Shift the previous two numbers and the current number for the next iteration\n        a, b, c = b, c, next_number\n    \n    # Return the nth FibFib number\n    return c", "prompt_tokens": 189, "completion_tokens": 182, "duration": 7.036089181900024}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    # Convert the input string to lowercase to make the function case-insensitive\n    s = s.lower()\n    # Initialize a count variable to 0 to keep track of the number of vowels\n    count = 0\n    # Loop through each character in the string\n    for char in s:\n        # Check if the character is a vowel (a, e, i, o, u)\n        if char in 'aeiou':\n            # If it is, increment the count by 1\n            count += 1\n    # Check if the last character in the string is 'y'\n    if s.endswith('y'):\n        # If it is, increment the count by 1 as 'y' is considered a vowel when it's at the end\n        count += 1\n    # Return the total count of vowels\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # Expected: 2\nprint(vowels_count(\"ACEDY\"))  # Expected: 3\nprint(vowels_count(\"rhythm\"))  # Expected: 0\nprint(vowels_count(\"Pythonly\"))  # Expected: 2\nprint(vowels_count(\"quickly\"))  # Expected: 2\nprint(vowels_count(\"qwrtypsdfghjklzxcvbnm\"))  # Expected: 0", "prompt_tokens": 166, "completion_tokens": 298, "duration": 9.52217721939087}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    # Convert the integer x into a string to work with individual digits\n    x_str = str(x)\n    # Calculate the length of the string\n    length = len(x_str)\n    \n    # If shift is greater than the number of digits, reverse the string\n    if shift > length:\n        return x_str[::-1]\n    else:\n        # Perform the circular shift\n        # Calculate the effective shift needed, as shifting more than the length results in the same array\n        effective_shift = shift % length\n        # Shift the digits to the right by taking the substring from the end and adding it to the start\n        return x_str[-effective_shift:] + x_str[:-effective_shift]", "prompt_tokens": 122, "completion_tokens": 154, "duration": 5.221316814422607}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    # Initialize a variable to store the sum of ASCII codes\n    total = 0\n    # Loop through each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII value of the uppercase letter to the total\n            total += ord(char)\n    # Return the total sum of ASCII codes of uppercase letters\n    return total", "prompt_tokens": 152, "completion_tokens": 98, "duration": 3.763262987136841}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    # Split the input string to extract numbers\n    fruits = s.split()\n    # Convert the first and third number in the list to integers (apple and orange counts)\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    # Calculate the number of mangoes by subtracting apples and oranges from total fruit count\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 250, "completion_tokens": 98, "duration": 3.8176047801971436}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    # Initialize a variable to store the smallest even value and its index\n    smallest_even = None\n    smallest_index = None\n    \n    # Iterate over each element in the array with its index\n    for index, value in enumerate(arr):\n        # Check if the current value is even\n        if value % 2 == 0:\n            # If smallest_even is None or the current value is smaller than the smallest_even\n            if smallest_even is None or value < smallest_even:\n                # Update the smallest_even and smallest_index with the current value and index\n                smallest_even = value\n                smallest_index = index\n    \n    # If there was no even number, return an empty list\n    if smallest_even is None:\n        return []\n    else:\n        # Return the smallest even value and its index in a list\n        return [smallest_even, smallest_index]", "prompt_tokens": 352, "completion_tokens": 187, "duration": 7.523535490036011}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    # Count the frequency of each number in the list\n    frequency = {}\n    for number in lst:\n        if number in frequency:\n            frequency[number] += 1\n        else:\n            frequency[number] = 1\n    \n    # Initialize the result variable to -1 (assuming no such number is found)\n    result = -1\n    \n    # Iterate through the frequency dictionary\n    for number, freq in frequency.items():\n        # Check if the frequency is greater than or equal to the number itself\n        if freq >= number:\n            # Update the result if the current number is greater than the current result\n            result = max(result, number)\n    \n    return result", "prompt_tokens": 205, "completion_tokens": 146, "duration": 5.045707702636719}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    # First, sort the list in ascending order to easily find min/max values\n    sorted_lst = sorted(lst)\n    # Initialize an empty list to store the result\n    result = []\n    # Use a loop to alternately select the smallest and largest remaining values\n    while sorted_lst:\n        # Append the smallest value (first element) from the sorted list to the result list\n        result.append(sorted_lst.pop(0))\n        # Check if there are still elements in the list before trying to append the largest value\n        if sorted_lst:\n            # Append the largest value (last element) from the sorted list to the result list\n            result.append(sorted_lst.pop(-1))\n    # Return the result list\n    return result", "prompt_tokens": 164, "completion_tokens": 161, "duration": 5.274463653564453}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # Check if the given sides form a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if it's not a valid triangle\n        return -1", "prompt_tokens": 161, "completion_tokens": 153, "duration": 6.464029312133789}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    # Check if the list is a palindrome by comparing it with its reverse\n    is_balanced = q == q[::-1]\n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n    # Return True if it is balanced and the total weight is less than or equal to the maximum possible weight\n    return is_balanced and total_weight <= w", "prompt_tokens": 270, "completion_tokens": 93, "duration": 3.7694506645202637}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    # Initialize a counter to keep track of the number of changes needed\n    changes = 0\n    \n    # Calculate the length of the array\n    n = len(arr)\n    \n    # Loop through the first half of the array\n    for i in range(n // 2):\n        # If the element at the current index is not equal to its corresponding element from the end,\n        # increment the changes counter\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    \n    # Return the total number of changes needed to make the array palindromic\n    return changes", "prompt_tokens": 197, "completion_tokens": 136, "duration": 6.048830986022949}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    # Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the total number of characters in both lists\n    # Return the list with fewer characters, or lst1 if they have the same number of characters\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 233, "completion_tokens": 116, "duration": 5.662714719772339}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Initialize a counter for prime factors\n    prime_factors_count = 0\n    \n    # Loop through numbers from 2 to a to find prime factors\n    for i in range(2, a + 1):\n        # Check if i is a prime factor of a\n        if a % i == 0 and is_prime(i):\n            prime_factors_count += 1\n            # Divide a by the prime factor i\n            a //= i\n            # Reset the loop to check the new value of a for prime factors again\n            # This step ensures we account for prime factors appearing more than once\n            # Example: For a = 8, 2 is a prime factor that appears 3 times\n            # Without resetting, the loop would count it only once\n            # Resetting allows the loop to count each occurrence of a prime factor\n            if is_prime(a):\n                prime_factors_count += 1\n                break\n            else:\n                continue\n    \n    # Return true if exactly three prime factors were found, false otherwise\n    return prime_factors_count == 3", "prompt_tokens": 119, "completion_tokens": 299, "duration": 12.269123077392578}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    # Check for edge case where n is 1, as any non-zero x to the power of 1 is x itself.\n    if n == 1:\n        return x == 1\n    # Initialize a variable to store the current power of n\n    current_power = n\n    # Loop until current_power exceeds x\n    while current_power <= x:\n        # Check if the current power of n is equal to x\n        if current_power == x:\n            return True\n        # Update the current power of n for the next iteration\n        current_power *= n\n    # If no power of n equals x, return False\n    return False", "prompt_tokens": 182, "completion_tokens": 149, "duration": 5.556329727172852}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    # Take the cube root of the absolute value of the input number. \n    # The absolute value is used to handle negative inputs as well.\n    cube_root = abs(a) ** (1/3)\n    \n    # Round the cube root to the nearest whole number to handle floating point arithmetic issues.\n    rounded_cube_root = round(cube_root)\n    \n    # Check if the cube of the rounded cube root equals the original number.\n    # Return True if they match, indicating the original number is a perfect cube.\n    return rounded_cube_root ** 3 == a", "prompt_tokens": 150, "completion_tokens": 125, "duration": 5.533832550048828}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Initialize a counter for prime hex digits\n    prime_count = 0\n    # Iterate through each character in the input string\n    for digit in num:\n        # If the digit is in the set of prime hex digits, increment the counter\n        if digit in prime_hex_digits:\n            prime_count += 1\n    # Return the count of prime hex digits\n    return prime_count", "prompt_tokens": 339, "completion_tokens": 122, "duration": 4.318683624267578}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    # Convert the decimal number to binary format using bin() function and slicing to remove the '0b' prefix\n    binary_str = bin(decimal)[2:]\n    # Add 'db' at the beginning and at the end of the binary string\n    formatted_binary = \"db\" + binary_str + \"db\"\n    # Return the formatted binary string\n    return formatted_binary", "prompt_tokens": 179, "completion_tokens": 88, "duration": 4.993779182434082}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    # First, check if the string length is less than 3, return False if it is\n    if len(s) < 3:\n        return False\n    # Iterate through the string except for the last two characters\n    for i in range(len(s)-2):\n        # Check if the current character, the next one, and the one after that are distinct\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            # If they are not distinct, return False\n            return False\n    # If the loop completes without returning False, it means every 3 consecutive letters are distinct, return True\n    return True", "prompt_tokens": 161, "completion_tokens": 162, "duration": 6.7556397914886475}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n    \n    # Loop through each grade in the input list\n    for grade in grades:\n        # Check the grade and assign the corresponding letter grade based on the given table\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    # Return the list of letter grades\n    return letter_grades", "prompt_tokens": 310, "completion_tokens": 303, "duration": 10.489716053009033}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    # Define a helper function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Get the length of the string\n    length = len(string)\n    \n    # Use the helper function to check if the length is prime\n    return is_prime(length)", "prompt_tokens": 121, "completion_tokens": 112, "duration": 4.841454982757568}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    # Calculate the total number of n-digit numbers\n    total_n_digit_numbers = 9 * (10 ** (n - 1))\n    \n    # Calculate the number of n-digit numbers that start with 1\n    start_with_1 = 10 ** (n - 1)\n    \n    # Calculate the number of n-digit numbers that end with 1\n    end_with_1 = 9 * (10 ** (n - 2))\n    \n    # Calculate the number of n-digit numbers that both start and end with 1\n    # This is needed to avoid double-counting those numbers\n    start_and_end_with_1 = 10 ** (n - 2)\n    \n    # Calculate the total count by adding those that start or end with 1\n    # and subtracting those that both start and end with 1 to avoid double counting\n    total_count = start_with_1 + end_with_1 - start_and_end_with_1\n    \n    return total_count", "prompt_tokens": 84, "completion_tokens": 216, "duration": 7.360269546508789}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Convert the number to a string to easily iterate through its digits\n    str_N = str(N)\n    # Initialize sum_of_digits to 0\n    sum_of_digits = 0\n    # Iterate through each character in the string representation of N\n    for digit in str_N:\n        # Convert the character back to an integer and add it to sum_of_digits\n        sum_of_digits += int(digit)\n    # Convert the final sum of digits to binary and return it\n    # The bin function returns a binary string prefixed with '0b', hence [2:] is used to remove the prefix\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 173, "completion_tokens": 143, "duration": 8.132631063461304}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    # Initialize a variable to store the sum of even elements at odd indices\n    sum_even_odd_indices = 0\n    # Loop through the list, index starts from 0 which is even, so we check for odd index by adding 1\n    for i in range(len(lst)):\n        # Check if the index is odd and the element at that index is even\n        if (i + 1) % 2 == 1 and lst[i] % 2 == 0:\n            # Add the even element at the odd index to the sum\n            sum_even_odd_indices += lst[i]\n    # Return the sum\n    return sum_even_odd_indices", "prompt_tokens": 95, "completion_tokens": 146, "duration": 6.027987957000732}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    # Split the input string into words based on spaces\n    words = s.split(' ')\n    # Initialize an empty list to store the reordered words\n    ordered_words = []\n    # Loop through each word in the list of words\n    for word in words:\n        # For each word, convert it into a list of characters\n        chars = list(word)\n        # Sort the list of characters based on their ASCII value\n        chars.sort()\n        # Join the sorted list of characters back into a string\n        ordered_word = ''.join(chars)\n        # Append the reordered word to the list of ordered words\n        ordered_words.append(ordered_word)\n    # Join the list of ordered words back into a single string with spaces\n    ordered_string = ' '.join(ordered_words)\n    # Return the ordered string\n    return ordered_string", "prompt_tokens": 170, "completion_tokens": 181, "duration": 6.065577745437622}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n    \n    # Loop through each row in the list\n    for row_idx, row in enumerate(lst):\n        # Loop through each element in the row\n        for col_idx, val in enumerate(row):\n            # If the element matches x, append its coordinate to the list\n            if val == x:\n                coordinates.append((row_idx, col_idx))\n    \n    # Sort the coordinates first by row in ascending order, then by column in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates", "prompt_tokens": 299, "completion_tokens": 140, "duration": 6.442322492599487}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    # Create a copy of the input array to avoid mutating the original array\n    array_copy = array[:]\n    # Check if the array is empty or contains only one element, in which case it is already sorted\n    if len(array_copy) <= 1:\n        return array_copy\n    # Calculate the sum of the first and last element\n    sum_of_edges = array_copy[0] + array_copy[-1]\n    # Check if the sum is odd\n    if sum_of_edges % 2 == 1:\n        # Sort the copy of the array in ascending order\n        array_copy.sort()\n    else:\n        # Sort the copy of the array in descending order\n        array_copy.sort(reverse=True)\n    # Return the sorted copy of the array\n    return array_copy", "prompt_tokens": 243, "completion_tokens": 171, "duration": 6.455302715301514}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    # Create a string of lowercase alphabet letters\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # Initialize an empty string for the encrypted result\n    encrypted = ''\n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is in the alphabet (ignoring case)\n        if char.lower() in alphabet:\n            # Find the index of the character in the alphabet\n            index = alphabet.index(char.lower())\n            # Calculate the new index by shifting down by 2*2 = 4 places\n            new_index = (index + 4) % 26\n            # Append the encrypted character to the result string\n            encrypted += alphabet[new_index]\n        else:\n            # If the character is not in the alphabet, just append it as is\n            encrypted += char\n    # Return the encrypted string\n    return encrypted", "prompt_tokens": 150, "completion_tokens": 186, "duration": 8.157594442367554}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    # Remove duplicates from the list by converting it to a set\n    unique_elements = set(lst)\n    \n    # Convert the set back to a list and sort it\n    sorted_list = sorted(unique_elements)\n    \n    # Check if the sorted list has at least 2 elements\n    if len(sorted_list) >= 2:\n        # Return the 2nd element in the sorted list\n        return sorted_list[1]\n    else:\n        # Return None if there are less than 2 unique elements\n        return None", "prompt_tokens": 164, "completion_tokens": 119, "duration": 5.809736967086792}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Split the input string into sentences based on '.', '?', and '!'\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    \n    # Initialize a counter for the number of boredoms\n    boredom_count = 0\n    \n    # Iterate through each sentence\n    for sentence in sentences:\n        # Check if the sentence starts with \"I\" followed by a space or \"I\" is the whole sentence\n        if sentence.startswith(\"I \") or sentence == \"I\":\n            # If so, increment the boredom count\n            boredom_count += 1\n            \n    # Return the total count of boredoms\n    return boredom_count", "prompt_tokens": 147, "completion_tokens": 149, "duration": 6.044997453689575}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(i, int) for i in [x, y, z]):\n        # Check if any number is equal to the sum of the other two\n        return x == y + z or y == x + z or z == x + y\n    else:\n        # Return False if not all numbers are integers\n        return False", "prompt_tokens": 175, "completion_tokens": 94, "duration": 3.5143513679504395}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    # Create a dictionary to map vowels to their corresponding character\n    # that appears 2 places ahead in the English alphabet\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n                 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    # Initialize an empty string to store the encoded message\n    encoded_message = ''\n    \n    # Iterate over each character in the message\n    for char in message:\n        # If the character is a vowel, replace it using the vowel_map\n        if char in vowel_map:\n            encoded_message += vowel_map[char]\n        # If the character is not a vowel, swap its case and add it to the encoded message\n        else:\n            encoded_message += char.swapcase()\n    \n    # Return the encoded message\n    return encoded_message", "prompt_tokens": 149, "completion_tokens": 210, "duration": 5.792941570281982}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_digit_sum(lst):\n    # Check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Initialize a variable to store the largest prime found\n    largest_prime = 0\n    \n    # Iterate through the list to find the largest prime number\n    for number in lst:\n        if is_prime(number) and number > largest_prime:\n            largest_prime = number\n            \n    # Calculate the sum of digits of the largest prime number\n    sum_of_digits = sum([int(digit) for digit in str(largest_prime)])\n    \n    return sum_of_digits", "prompt_tokens": 326, "completion_tokens": 168, "duration": 7.019155263900757}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    # Check if the dictionary is empty\n    if not dict:\n        return False\n    \n    # Initialize variables to keep track of case consistency\n    all_lower = True\n    all_upper = True\n    \n    # Loop through each key in the dictionary\n    for key in dict.keys():\n        # Check if the key is a string\n        if isinstance(key, str):\n            # If the key is not all lower case, set all_lower to False\n            if not key.islower():\n                all_lower = False\n            # If the key is not all upper case, set all_upper to False\n            if not key.isupper():\n                all_upper = False\n        else:\n            # If the key is not a string, return False\n            return False\n            \n    # Return True if either all keys are lower case or all keys are upper case\n    return all_lower or all_upper", "prompt_tokens": 209, "completion_tokens": 191, "duration": 8.377012252807617}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    \"\"\"\n    Implement a function that takes an non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n    \"\"\"\n    # Define a helper function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize an empty list to hold prime numbers\n    prime_numbers = []\n\n    # Iterate through numbers from 2 to n-1\n    for i in range(2, n):\n        # Check if the current number is prime\n        if is_prime(i):\n            # If it is prime, append it to the list\n            prime_numbers.append(i)\n\n    # Return the list of prime numbers\n    return prime_numbers", "prompt_tokens": 185, "completion_tokens": 198, "duration": 10.21339201927185}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    # Get the unit digit of the first number by taking the modulus of 10\n    unit_digit_a = abs(a) % 10\n    # Get the unit digit of the second number by taking the modulus of 10\n    unit_digit_b = abs(b) % 10\n    # Multiply the unit digits\n    product = unit_digit_a * unit_digit_b\n    # Return the product\n    return product", "prompt_tokens": 138, "completion_tokens": 98, "duration": 4.702155590057373}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    # Initialize the count of uppercase vowels in even indices to 0\n    count = 0\n    \n    # Define a set of uppercase vowels for easy checking\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    # Iterate through the string, checking only even indices\n    for i in range(0, len(s), 2):\n        # If the character at the even index is an uppercase vowel, increment the count\n        if s[i] in uppercase_vowels:\n            count += 1\n            \n    # Return the final count\n    return count", "prompt_tokens": 112, "completion_tokens": 136, "duration": 4.910128355026245}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    # Convert the string value to a float\n    float_val = float(value)\n    \n    # Check if the decimal part is exactly 0.5 or -0.5 to round away from zero\n    if float_val - int(float_val) == 0.5:\n        # If positive and decimal part is 0.5, use ceiling to round away from zero\n        return int(float_val) + 1\n    elif float_val - int(float_val) == -0.5:\n        # If negative and decimal part is -0.5, subtract 1 to round away from zero\n        return int(float_val) - 1\n    else:\n        # In other cases, use the round function which rounds to the nearest integer\n        return round(float_val)", "prompt_tokens": 196, "completion_tokens": 170, "duration": 5.4045891761779785}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    # Initialize an empty list to store the number of stones in each level\n    pile = []\n    # The first level has n stones\n    current_stones = n\n    # Loop n times to fill each level\n    for _ in range(n):\n        # Add the current number of stones to the pile\n        pile.append(current_stones)\n        # Determine the next number of stones based on the parity of the current number\n        # If current_stones is odd, add 2 to get the next odd number\n        # If current_stones is even, add 2 to get the next even number\n        current_stones += 2\n    # Return the list representing the pile\n    return pile", "prompt_tokens": 172, "completion_tokens": 159, "duration": 5.779073238372803}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    # Replace commas with spaces to unify the separators\n    s = s.replace(',', ' ')\n    # Split the string into words based on spaces\n    words = s.split()\n    # Return the list of words\n    return words", "prompt_tokens": 156, "completion_tokens": 57, "duration": 2.5373756885528564}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    # Check if x is greater than y, if so, return -1 because the range is invalid\n    if x > y:\n        return -1\n    \n    # Start from y and decrement until we find an even number or reach x\n    for num in range(y, x - 1, -1):\n        # Check if the current number is even\n        if num % 2 == 0:\n            # Return the first even number found\n            return num\n    \n    # If no even number is found in the range, return -1\n    return -1", "prompt_tokens": 134, "completion_tokens": 130, "duration": 5.208510875701904}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    # Check if n is greater than m, if so, return -1\n    if n > m:\n        return -1\n    # Calculate the sum of integers from n to m using the formula for the sum of an arithmetic series\n    total_sum = (m - n + 1) * (n + m) // 2\n    # Calculate the number of integers between n and m, inclusive\n    count = m - n + 1\n    # Calculate the average and round it to the nearest integer\n    average = round(total_sum / count)\n    # Convert the rounded average to binary\n    return bin(average)", "prompt_tokens": 180, "completion_tokens": 144, "duration": 6.368028879165649}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    # Initialize an empty list to store numbers with all odd digits\n    result = []\n    # Iterate through each number in the input list\n    for num in x:\n        # Convert the number to a string to check each digit\n        str_num = str(num)\n        # Initialize a flag to check if all digits are odd\n        all_odd = True\n        # Iterate through each digit of the string representation of the number\n        for digit in str_num:\n            # If the digit is even, set the flag to False and break the loop\n            if int(digit) % 2 == 0:\n                all_odd = False\n                break\n        # If all digits are odd, add the number to the result list\n        if all_odd:\n            result.append(num)\n    # Sort the result list in increasing order\n    result.sort()\n    # Return the sorted list\n    return result", "prompt_tokens": 142, "completion_tokens": 195, "duration": 15.006361484527588}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # Dictionary to map digits to their word representation\n    digit_to_word = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter the array to include only numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Replace each digit with its word representation\n    result = [digit_to_word[num] for num in reversed_arr]\n    \n    return result", "prompt_tokens": 316, "completion_tokens": 184, "duration": 7.393896579742432}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    # Define a helper function to calculate factorial\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    # Define a helper function to calculate the sum from 1 to x\n    def sum_to_x(x):\n        return sum(range(1, x + 1))\n    \n    result = []  # Initialize an empty list to store the results\n    for i in range(1, n + 1):  # Iterate from 1 to n\n        if i % 2 == 0:  # Check if i is even\n            result.append(factorial(i))  # Append the factorial of i to the result list\n        else:\n            result.append(sum_to_x(i))  # Append the sum from 1 to i to the result list\n    return result  # Return the result list", "prompt_tokens": 164, "completion_tokens": 199, "duration": 6.769577741622925}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    # Initialize counters for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through numbers from 1 to n\n    for i in range(1, n + 1):\n        # Convert the number to string to check if it's a palindrome\n        str_i = str(i)\n        # Check if the number is a palindrome\n        if str_i == str_i[::-1]:\n            # Check if the palindrome is even or odd and increment the respective counter\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    # Return the count of even and odd palindromes\n    return (even_count, odd_count)", "prompt_tokens": 251, "completion_tokens": 170, "duration": 8.924628257751465}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    # Initialize a counter to keep track of numbers with sum of digits > 0\n    count = 0\n    \n    # Loop through each number in the array\n    for num in arr:\n        # Initialize the sum of digits for the current number\n        sum_of_digits = 0\n        \n        # Check if the number is negative\n        if num < 0:\n            # If negative, make it positive and remember that it was negative\n            num = -num\n            is_negative = True\n        else:\n            is_negative = False\n        \n        # Convert the number to a string to iterate over each digit\n        num_str = str(num)\n        \n        # Loop through each digit of the number\n        for digit in num_str:\n            # Add the digit to the sum. Subtract 1 if the original number was negative and this is the first digit\n            if is_negative and sum_of_digits == 0:\n                sum_of_digits += int(digit) - 1\n            else:\n                sum_of_digits += int(digit)\n        \n        # Check if the sum of digits is greater than 0\n        if sum_of_digits > 0:\n            # If yes, increment the counter\n            count += 1\n    \n    # Return the final count\n    return count", "prompt_tokens": 164, "completion_tokens": 272, "duration": 9.59898567199707}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    # Check if the array is empty\n    if not arr:\n        return True\n    \n    # Count the number of times an element is greater than the next element\n    count = 0\n    for i in range(len(arr)):\n        # Use modulo for cyclic comparison\n        if arr[i] > arr[(i + 1) % len(arr)]:\n            count += 1\n    \n    # If this happens only once, it means we can sort it with shifts\n    # Otherwise, it's not possible\n    return count <= 1", "prompt_tokens": 339, "completion_tokens": 123, "duration": 6.876013278961182}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Count the number of even numbers in lst1\n    even_count_lst1 = sum(1 for x in lst1 if x % 2 == 0)\n    # Count the number of odd numbers in lst1\n    odd_count_lst1 = len(lst1) - even_count_lst1\n    # Count the number of even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2,\n    # then it is possible to exchange the odd numbers in lst1 with even numbers in lst2\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 237, "completion_tokens": 183, "duration": 6.886940956115723}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    # Split the input string into a list of letters\n    letters = test.split()\n    # Initialize a dictionary to store the frequency of each letter\n    frequency = {}\n    # Loop through each letter in the list\n    for letter in letters:\n        # If the letter is already in the frequency dictionary, increment its count\n        if letter in frequency:\n            frequency[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            frequency[letter] = 1\n    # Find the maximum frequency among all letters\n    max_freq = max(frequency.values(), default=0)\n    # Initialize a dictionary to store letters with the maximum frequency\n    max_freq_letters = {}\n    # Loop through the frequency dictionary\n    for letter, freq in frequency.items():\n        # If the frequency of a letter matches the maximum frequency, add it to the result dictionary\n        if freq == max_freq:\n            max_freq_letters[letter] = freq\n    # Return the dictionary of letters with the maximum frequency\n    return max_freq_letters", "prompt_tokens": 191, "completion_tokens": 233, "duration": 9.858769416809082}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    # Remove all characters in 's' that are present in 'c'\n    result_string = ''.join([char for char in s if char not in c])\n    # Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    # Return the tuple containing the result string and the boolean value\n    return (result_string, is_palindrome)", "prompt_tokens": 202, "completion_tokens": 93, "duration": 3.845989227294922}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through each string in the input list\n    for s in lst:\n        # Count the number of odd digits in the current string\n        odd_digits_count = sum(1 for char in s if int(char) % 2 != 0)\n        \n        # Format the output string by replacing i's with the count of odd digits\n        output = f\"the number of odd elements {odd_digits_count}n the str{odd_digits_count}ng {odd_digits_count} of the {odd_digits_count}nput.\"\n        \n        # Append the formatted string to the result list\n        result.append(output)\n    \n    # Return the result list\n    return result", "prompt_tokens": 213, "completion_tokens": 164, "duration": 6.299933195114136}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    # Initialize the current sum and minimum sum to the first element\n    current_sum = min_sum = nums[0]\n    # Iterate through the array starting from the second element\n    for num in nums[1:]:\n        # If current sum is positive, discard it since it will only increase the sum\n        if current_sum > 0:\n            current_sum = num\n        else:\n            # Otherwise, add the current number to the current sum\n            current_sum += num\n        # Update the minimum sum if the current sum is smaller\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 128, "completion_tokens": 139, "duration": 5.232077598571777}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    # Import the math module for mathematical operations\n    import math\n    \n    # Initialize the variable to count the total number of times the buckets are lowered\n    total_buckets = 0\n    \n    # Iterate through each row in the grid (each well)\n    for row in grid:\n        # Count the number of units of water (1s) in the current row\n        water_units = sum(row)\n        \n        # Calculate the number of buckets needed to empty this well using math.ceil for upward rounding\n        buckets_needed = math.ceil(water_units / capacity)\n        \n        # Add the number of buckets needed for the current well to the total count\n        total_buckets += buckets_needed\n    \n    # Return the total number of times the buckets are lowered\n    return total_buckets", "prompt_tokens": 363, "completion_tokens": 168, "duration": 8.6526517868042}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    # Sort the array first based on the number of ones in their binary representation\n    # Then, for similar number of ones, sort based on decimal value\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 210, "completion_tokens": 61, "duration": 2.720890760421753}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    # Define a function to count the number of consonants in a word\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Filter words that have exactly n consonants\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result", "prompt_tokens": 221, "completion_tokens": 119, "duration": 5.629379510879517}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    # Define vowels (both lowercase and uppercase)\n    vowels = \"aeiouAEIOU\"\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop through the word from right to left\n    for i in range(len(word) - 1, -1, -1):\n        # Check if the current character is a vowel and it's not the first or last character in the word\n        if word[i] in vowels and i != 0 and i != len(word) - 1:\n            # Check if both the characters before and after the current character are not vowels\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                # If conditions met, store the current vowel and break the loop\n                result = word[i]\n                break\n    # Return the result\n    return result", "prompt_tokens": 189, "completion_tokens": 192, "duration": 10.41221833229065}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    # Count the number of open and close parentheses in both strings\n    open_parentheses = close_parentheses = 0\n    for string in lst:\n        open_parentheses += string.count('(')\n        close_parentheses += string.count(')')\n\n    # If the total number of open and close parentheses is not equal, it's impossible to form a good string\n    if open_parentheses != close_parentheses:\n        return 'No'\n\n    # Check if the first string can be placed before the second one\n    balance = 0\n    for char in lst[0]:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        # If balance is negative, it means there are more closing parentheses than opening ones, which is invalid\n        if balance < 0:\n            break\n\n    # If the balance is non-negative for the first string, check the same for the concatenated string\n    if balance >= 0:\n        for char in lst[1]:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            # If balance is negative at any point, it's not possible to form a good string\n            if balance < 0:\n                return 'No'\n        # If we pass through the entire concatenated string without balance going negative, it's a good string\n        return 'Yes'\n    else:\n        # If the first string failed the balance test, try reversing the order\n        balance = 0\n        for char in lst[1]:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return 'No'\n        # Since the first string was not balanced, check the balance with the second string at the start\n        for char in lst[0]:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return 'No'\n        return 'Yes'", "prompt_tokens": 208, "completion_tokens": 437, "duration": 20.168434143066406}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return sorted(arr[:k])", "prompt_tokens": 257, "completion_tokens": 44, "duration": 2.4593212604522705}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    # Initialize sum of odd elements in even positions\n    sum_odd_even_pos = 0\n    \n    # Iterate through the list, considering only even positions (0-indexed)\n    for i in range(0, len(lst), 2):\n        # Check if the current element at even position is odd\n        if lst[i] % 2 != 0:\n            # Add the odd element to the sum\n            sum_odd_even_pos += lst[i]\n    \n    # Return the final sum\n    return sum_odd_even_pos", "prompt_tokens": 137, "completion_tokens": 117, "duration": 5.151989221572876}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    # Initialize the sum to 0\n    sum_of_elements = 0\n    \n    # Iterate through the first k elements of the array\n    for i in range(k):\n        # Check if the current element has at most two digits\n        if 10 <= arr[i] < 100:\n            # Add the element to the sum if it meets the condition\n            sum_of_elements += arr[i]\n    \n    # Return the computed sum\n    return sum_of_elements", "prompt_tokens": 168, "completion_tokens": 108, "duration": 4.138284206390381}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    # Initialize an empty list to store odd numbers\n    odd_numbers = []\n    \n    # Loop until n becomes 1\n    while n != 1:\n        # Check if n is odd\n        if n % 2 != 0:\n            # Add the odd number to the list\n            odd_numbers.append(n)\n        # Apply the Collatz operation\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    \n    # Add 1 to the list, as it is the last number in the sequence and it is odd\n    odd_numbers.append(1)\n    \n    # Return the sorted list of odd numbers\n    return sorted(odd_numbers)", "prompt_tokens": 271, "completion_tokens": 158, "duration": 5.67565393447876}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is not empty\n    if not date:\n        return False\n    \n    # Check if the date string is in the correct format mm-dd-yyyy\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    # Check if the month is valid (1-12)\n    if month < 1 or month > 12:\n        return False\n    \n    # Define the maximum days in each month\n    max_days = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, \n                7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    \n    # Check if the day is valid according to the month\n    if day < 1 or day > max_days.get(month, 0):\n        return False\n    \n    return True", "prompt_tokens": 303, "completion_tokens": 226, "duration": 10.332450866699219}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    # Check if there are whitespaces in the text\n    if ' ' in txt:\n        return txt.split()  # Split on whitespace and return\n    # Check if there are commas in the text\n    elif ',' in txt:\n        return txt.split(',')  # Split on comma and return\n    else:\n        # Initialize a counter for lowercase letters with odd order\n        odd_lower_count = 0\n        for char in txt:\n            # Check if the character is a lowercase letter\n            if char.islower():\n                # Calculate the order and check if it is odd\n                if (ord(char) - ord('a')) % 2 == 0:\n                    odd_lower_count += 1\n        return odd_lower_count", "prompt_tokens": 180, "completion_tokens": 161, "duration": 12.967397451400757}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    # Check if there are more than 1 duplicate of the same number\n    if len(lst) != len(set(lst)):\n        # Check each element in the list\n        for i in set(lst):\n            # If any element appears more than twice, return False\n            if lst.count(i) > 2:\n                return False\n    # Iterate through the list to check if it is sorted in ascending order\n    for i in range(len(lst) - 1):\n        # If the current element is greater than the next one, the list is not sorted\n        if lst[i] > lst[i + 1]:\n            return False\n    # If no duplicates of more than 2 and the list is in ascending order, return True\n    return True", "prompt_tokens": 289, "completion_tokens": 166, "duration": 7.759259462356567}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    # Find the maximum start point and minimum end point of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # Calculate the length of the intersection\n    length = end - start\n\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if the length of the intersection is prime\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 294, "completion_tokens": 172, "duration": 5.935305833816528}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    # Check if the array is empty, return None if true\n    if not arr:\n        return None\n    \n    # Initialize variables to store sum of magnitudes and product of signs\n    sum_magnitudes = 0\n    product_signs = 1\n    \n    # Iterate through each number in the array\n    for num in arr:\n        # Add the absolute value of the number to sum_magnitudes\n        sum_magnitudes += abs(num)\n        # Multiply product_signs by 0 if the number is 0, -1 if it's negative, and 1 if it's positive\n        product_signs *= 0 if num == 0 else (-1 if num < 0 else 1)\n    \n    # Multiply the sum of magnitudes by the product of signs and return the result\n    return sum_magnitudes * product_signs", "prompt_tokens": 162, "completion_tokens": 190, "duration": 6.978088140487671}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    \"\"\"\n    Find the minimum path of length k in the grid.\n    \"\"\"\n    # Initialize variables\n    N = len(grid)  # Size of the grid\n    moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Possible moves (right, down, left, up)\n    visited = set()  # Set to keep track of visited positions\n    heap = []  # Min heap for BFS\n\n    # Convert grid to a dictionary for faster access\n    value_to_pos = {grid[i][j]: (i, j) for i in range(N) for j in range(N)}\n\n    # Initialize the heap with all possible starting positions and the corresponding value\n    for val, (i, j) in value_to_pos.items():\n        heappush(heap, ([val], i, j, 1))  # ([path], x, y, path_length)\n\n    # BFS with priority queue (min heap)\n    while heap:\n        path, x, y, path_length = heappop(heap)\n        # If path length equals k, return the path\n        if path_length == k:\n            return path\n        # Mark the current cell as visited\n        visited.add((x, y, path_length))\n        # Explore all possible moves\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            # Check if the new position is within the grid and not visited\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny, path_length + 1) not in visited:\n                # Add the new position to the heap\n                heappush(heap, (path + [grid[nx][ny]], nx, ny, path_length + 1))", "prompt_tokens": 436, "completion_tokens": 401, "duration": 20.61764407157898}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # Initialize a list to store Tribonacci sequence with base cases\n    tribonacci = [1, 3]  # tri(0) is defined as 1 for this implementation, and tri(1) is 3 as per the problem statement\n    \n    # Since we need the first n + 1 numbers, iterate from 2 to n\n    for i in range(2, n + 1):\n        # Check if the current index is even\n        if i % 2 == 0:\n            # Apply the formula for even indices\n            tribonacci.append(1 + i // 2)\n        else:\n            # For odd indices, calculate the sum as per the given formula\n            # Ensure that we are not accessing index out of range by checking if the list has enough elements\n            # If it doesn't, append 0 for the missing indices\n            while len(tribonacci) <= i:\n                tribonacci.append(0)\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]\n    \n    # Return the Tribonacci sequence list\n    return tribonacci", "prompt_tokens": 275, "completion_tokens": 250, "duration": 8.610511302947998}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    # Convert the number to a string to easily iterate over each digit\n    str_n = str(n)\n    # Initialize the product as 1 (neutral element for multiplication)\n    product = 1\n    # Initialize a flag to check if there are odd digits\n    has_odd = False\n    # Iterate over each character in the string representation of n\n    for char in str_n:\n        # Convert the character back to an integer\n        digit = int(char)\n        # Check if the digit is odd\n        if digit % 2 != 0:\n            # Multiply the product by the odd digit\n            product *= digit\n            # Set the flag to True since we found an odd digit\n            has_odd = True\n    # If there were no odd digits, return 0\n    if not has_odd:\n        return 0\n    # Otherwise, return the product of the odd digits\n    return product", "prompt_tokens": 111, "completion_tokens": 199, "duration": 10.58895468711853}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    # Initialize a counter for open brackets\n    open_brackets = 0\n    # Initialize a flag to check for nested brackets\n    nested = False\n\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is an open bracket, increment the counter\n        if char == '[':\n            open_brackets += 1\n        # If the character is a close bracket\n        elif char == ']':\n            # Decrement the counter for open brackets\n            open_brackets -= 1\n            # If after decrementing, the counter is still more than 0, it means there is a nested bracket\n            if open_brackets > 0:\n                nested = True\n            # If the counter goes negative, it means brackets are not properly nested or are extra, return False\n            if open_brackets < 0:\n                return False\n    \n    # Return True if nested is True and open_brackets is 0 (properly closed brackets), else False\n    return nested and open_brackets == 0", "prompt_tokens": 173, "completion_tokens": 228, "duration": 8.477630376815796}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    # Round each element in the list to the upper int (Ceiling)\n    rounded_lst = [math.ceil(num) for num in lst]\n    # Square each rounded number\n    squared_lst = [num**2 for num in rounded_lst]\n    # Sum the squared numbers\n    sum_of_squares = sum(squared_lst)\n    return sum_of_squares", "prompt_tokens": 197, "completion_tokens": 89, "duration": 5.168118476867676}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty or ends with a space, return False in these cases\n    if not txt or txt.endswith(' '):\n        return False\n    # Check if the last character is an alphabetical character\n    if txt[-1].isalpha():\n        # Check if the character before the last one is a space or if the last character is the only character in the string\n        if len(txt) == 1 or txt[-2] == ' ':\n            return True\n    return False", "prompt_tokens": 177, "completion_tokens": 120, "duration": 4.35493540763855}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    # Initialize the largest index to -1 as the default return value\n    largest_index = -1\n    \n    # Loop through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than or equal to the previous element\n        if arr[i] < arr[i-1]:\n            # Update the largest index to the current index\n            largest_index = i\n    \n    # Return the largest index found or -1 if no such element exists\n    return largest_index", "prompt_tokens": 143, "completion_tokens": 122, "duration": 4.82690954208374}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    # Filter out negative numbers and store them in a list\n    negatives = [num for num in lst if num < 0]\n    # Filter out positive numbers and store them in a list\n    positives = [num for num in lst if num > 0]\n\n    # Check if there are negative numbers, if so find the largest, otherwise set to None\n    largest_negative = max(negatives) if negatives else None\n    # Check if there are positive numbers, if so find the smallest, otherwise set to None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 178, "completion_tokens": 146, "duration": 6.667068243026733}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    # Convert inputs to floats, handling both dot and comma as decimal separators\n    def to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n    \n    # Convert both inputs to floats\n    a_float = to_float(a)\n    b_float = to_float(b)\n    \n    # Check if the inputs are equal after conversion\n    if a_float == b_float:\n        return None\n    \n    # Determine the larger value\n    larger = a if a_float > b_float else b\n    \n    # Return the original type of the larger value\n    return larger", "prompt_tokens": 181, "completion_tokens": 137, "duration": 7.161295413970947}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    # Check if n is less than the smallest possible sum of four even numbers (2+2+2+2=8)\n    if n < 8:\n        return False\n    # Check if n is even, because the sum of even numbers is always even\n    if n % 2 != 0:\n        return False\n    # Since any even number greater than or equal to 8 can be expressed as the sum of four even numbers,\n    # return True for all even n >= 8\n    return True", "prompt_tokens": 117, "completion_tokens": 122, "duration": 4.208176136016846}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    # Initialize result to 1 because we are going to multiply it with factorials\n    result = 1\n    # Loop from n down to 1\n    for i in range(n, 0, -1):\n        # Initialize factorial of the current number to 1\n        factorial = 1\n        # Calculate factorial of the current number\n        for j in range(1, i + 1):\n            factorial *= j\n        # Multiply the result with the current factorial\n        result *= factorial\n    # Return the final result\n    return result", "prompt_tokens": 135, "completion_tokens": 128, "duration": 11.024261951446533}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    # Import the regular expression module\n    import re\n    \n    # First, replace more than two consecutive spaces with a dash\n    text = re.sub(r' {3,}', '-', text)\n    \n    # Next, replace all remaining single and double spaces with underscores\n    text = text.replace(' ', '_')\n    \n    return text", "prompt_tokens": 146, "completion_tokens": 78, "duration": 3.445721387863159}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Split the file name by the dot\n    parts = file_name.split('.')\n    \n    # Check if the file name contains exactly one dot\n    if len(parts) != 2:\n        return 'No'\n    \n    name, extension = parts\n    \n    # Check if the name starts with a letter and is not empty\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Count the digits in the name part\n    digit_count = sum(c.isdigit() for c in name)\n    \n    # Check if there are more than three digits\n    if digit_count > 3:\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # If all checks passed, return 'Yes'\n    return 'Yes'", "prompt_tokens": 254, "completion_tokens": 195, "duration": 14.431035280227661}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    # Initialize sum to 0\n    total = 0\n    \n    # Iterate through the list with index\n    for i, num in enumerate(lst):\n        # Check if index is a multiple of 3\n        if i % 3 == 0:\n            # Square the number and add to total\n            total += num ** 2\n        # Check if index is a multiple of 4 but not a multiple of 3\n        elif i % 4 == 0:\n            # Cube the number and add to total\n            total += num ** 3\n        # For indexes not multiple of 3 or 4, add the number itself\n        else:\n            total += num\n            \n    # Return the final sum\n    return total", "prompt_tokens": 209, "completion_tokens": 166, "duration": 7.479330062866211}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    \"\"\"\n    Function to filter words in a sentence based on prime number length.\n    \"\"\"\n    \n    # Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Filter words where length is a prime number\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    \n    # Join the filtered words back into a string\n    result = ' '.join(prime_length_words)\n    \n    return result", "prompt_tokens": 187, "completion_tokens": 164, "duration": 5.469643831253052}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    # Split the string fractions into numerator and denominator for x\n    num_x, den_x = map(int, x.split('/'))\n    # Split the string fractions into numerator and denominator for n\n    num_n, den_n = map(int, n.split('/'))\n    \n    # Multiply the numerators together and the denominators together\n    num_product = num_x * num_n\n    den_product = den_x * den_n\n    \n    # Check if the product of the numerators divided by the product of the denominators is a whole number\n    # This is done by checking if the remainder of the division is 0\n    return num_product % den_product == 0", "prompt_tokens": 195, "completion_tokens": 149, "duration": 5.563943386077881}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    # Define a function to calculate the sum of digits of a number\n    def sum_of_digits(n):\n        # Make sure the number is positive\n        n = abs(n)\n        # Calculate the sum of digits\n        return sum(int(digit) for digit in str(n))\n\n    # Sort the list using the sum of digits as the key, maintaining the original order for similar sums\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 155, "completion_tokens": 109, "duration": 4.771192789077759}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    # Initialize a counter to keep track of numbers that meet the criteria\n    count = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Convert the number to its absolute value to handle negative numbers\n        num = abs(num)\n        \n        # Check if the number is greater than 10\n        if num > 10:\n            # Convert the number to string to easily access first and last digits\n            num_str = str(num)\n            \n            # Get the first and last digits of the number\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            \n            # Check if both first and last digits are odd\n            if first_digit % 2 == 1 and last_digit % 2 == 1:\n                # If the conditions are met, increment the counter\n                count += 1\n                \n    # Return the total count of numbers that met the criteria\n    return count", "prompt_tokens": 159, "completion_tokens": 209, "duration": 7.7582316398620605}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    # Create an array a of length n with the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    # Initialize a counter for valid triples\n    count = 0\n    # Iterate through the array to find triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if the sum of the triple is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    # If so, increment the counter\n                    count += 1\n    # Return the total count of valid triples\n    return count", "prompt_tokens": 205, "completion_tokens": 171, "duration": 6.699172019958496}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    # Define the order of the planets from the Sun\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    # Check if both planet1 and planet2 are in the planets tuple\n    if planet1 not in planets or planet2 not in planets:\n        return ()  # Return an empty tuple if either is not a planet\n    \n    # Get the indexes of planet1 and planet2\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Ensure index1 is less than index2 for correct slicing\n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    # Return the planets between planet1 and planet2, exclusive\n    return planets[index1 + 1:index2]", "prompt_tokens": 251, "completion_tokens": 200, "duration": 8.699815511703491}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter the list to remove strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the filtered list first by length of the strings, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda s: (len(s), s))\n    return sorted_lst", "prompt_tokens": 227, "completion_tokens": 83, "duration": 4.9417948722839355}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        # Return False for numbers less than 2\n        if num < 2:\n            return False\n        # Check divisibility for numbers from 2 to the square root of num\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Check if n is a prime number\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 126, "completion_tokens": 135, "duration": 4.906553268432617}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    # Initialize sum to 0\n    total_sum = 0\n    # Iterate through each number in the list\n    for num in lst:\n        # Check if the number is odd, positive, and an integer\n        if num % 2 != 0 and num > 0 and isinstance(num, int):\n            # Square the number and add it to the total sum\n            total_sum += num ** 2\n    # Return the final sum\n    return total_sum", "prompt_tokens": 177, "completion_tokens": 110, "duration": 4.8560473918914795}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate over the zip of game and guess to access pairs of scores and guesses\n    for g, gs in zip(game, guess):\n        # Calculate the absolute difference between the score and the guess and append it to the result list\n        result.append(abs(g - gs))\n    # Return the result list\n    return result", "prompt_tokens": 270, "completion_tokens": 93, "duration": 4.246592044830322}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    # Define a function to calculate the strength of an extension\n    def calculate_strength(extension):\n        # Count uppercase (CAP) and lowercase (SM) letters\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        # Return the strength\n        return CAP - SM\n\n    # Initialize variables to keep track of the strongest extension and its strength\n    strongest_extension = None\n    max_strength = float('-inf')  # Start with the lowest possible value\n    \n    # Iterate through each extension in the list\n    for extension in extensions:\n        # Calculate the strength of the current extension\n        strength = calculate_strength(extension)\n        # If the current extension's strength is greater than the max_strength found so far\n        if strength > max_strength:\n            # Update the max_strength and the strongest_extension\n            max_strength = strength\n            strongest_extension = extension\n            \n    # Return the class name and the strongest extension in the required format\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 317, "completion_tokens": 234, "duration": 10.647261381149292}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    # Check if the length of b is greater than a, if so, no rotation of b can be a substring of a\n    if len(b) > len(a):\n        return False\n    \n    # Concatenate a with itself. Any rotation of b that is a substring of a will be found in this new string\n    double_a = a + a\n    \n    # Check if b is a substring of the concatenated string\n    return b in double_a", "prompt_tokens": 169, "completion_tokens": 106, "duration": 5.164297580718994}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    # Convert the number to a string to iterate over each digit\n    num_str = str(abs(num))\n    # Initialize counters for even and odd digits\n    even_count, odd_count = 0, 0\n    # Iterate over each character in the string\n    for char in num_str:\n        # Convert the character back to an integer\n        digit = int(char)\n        # Check if the digit is even\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    # Return a tuple containing the counts of even and odd digits\n    return (even_count, odd_count)", "prompt_tokens": 105, "completion_tokens": 147, "duration": 11.251377820968628}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    # Define a dictionary mapping integer values to their respective Roman numeral representations\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''  # Initialize an empty string for the Roman numeral\n    i = 0  # Initialize index for looping through the value list\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]  # Append the corresponding Roman numeral symbols\n            number -= val[i]  # Decrease the number by the value of the Roman numeral added\n        i += 1  # Move to the next Roman numeral\n    return roman_num", "prompt_tokens": 141, "completion_tokens": 233, "duration": 8.629104375839233}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    # First, sort the sides to ensure the longest side is last. This helps in applying the Pythagorean theorem.\n    sides = sorted([a, b, c])\n\n    # Apply the Pythagorean theorem: for a right-angled triangle, the square of the longest side (hypotenuse)\n    # should be equal to the sum of squares of the other two sides.\n    # Check if the square of the largest side (sides[2]) is equal to the sum of squares of the other two sides (sides[0] and sides[1]).\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 148, "completion_tokens": 152, "duration": 7.889907360076904}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # Initialize a variable to keep track of the word with the maximum number of unique characters\n    max_unique_word = \"\"\n    # Initialize a variable to keep the maximum number of unique characters found so far\n    max_unique_count = 0\n\n    for word in words:\n        # Use a set to count the number of unique characters in the current word\n        unique_chars = len(set(word))\n        # Check if the current word has more unique characters than the previous maximum\n        if unique_chars > max_unique_count:\n            # Update the maximum unique character count and the word itself\n            max_unique_count = unique_chars\n            max_unique_word = word\n        # If the current word has the same number of unique characters as the previous maximum,\n        # but comes before it lexicographically, update the maximum word\n        elif unique_chars == max_unique_count and word < max_unique_word:\n            max_unique_word = word\n\n    return max_unique_word", "prompt_tokens": 160, "completion_tokens": 204, "duration": 8.800761699676514}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    # Calculate the actual number of carrots that can be eaten, which is the minimum between need and remaining\n    eaten = min(need, remaining)\n    # Update the total number of eaten carrots by adding the newly eaten carrots\n    total_eaten = number + eaten\n    # Calculate the new number of remaining carrots after eating\n    new_remaining = remaining - eaten\n    # Return the total number of eaten carrots and the number of carrots left\n    return [total_eaten, new_remaining]", "prompt_tokens": 317, "completion_tokens": 114, "duration": 4.926855564117432}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    # Initialize the expression with the first operand\n    expression = str(operand[0])\n    \n    # Loop through the operators and operands to build the expression string\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    \n    # Evaluate the built expression string and return the result\n    return eval(expression)", "prompt_tokens": 247, "completion_tokens": 89, "duration": 4.076627254486084}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    # Check if the string contains any letters\n    if not any(c.isalpha() for c in s):\n        # If no letters are found, reverse the string\n        return s[::-1]\n    else:\n        # Initialize an empty string to store the result\n        result = \"\"\n        # Iterate through each character in the input string\n        for char in s:\n            # Check if the current character is a letter\n            if char.isalpha():\n                # If it is a letter, reverse its case and add it to the result\n                result += char.swapcase()\n            else:\n                # If it's not a letter, keep it as it is and add it to the result\n                result += char\n        # Return the resulting string\n        return result", "prompt_tokens": 147, "completion_tokens": 166, "duration": 7.03221321105957}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    # Check if the text is an empty string\n    if text == \"\":\n        return None\n    else:\n        # Encode the text to bytes\n        encoded_text = text.encode()\n        # Create an md5 hash object\n        hash_object = hashlib.md5(encoded_text)\n        # Get the hexadecimal representation of the digest\n        hex_dig = hash_object.hexdigest()\n        return hex_dig", "prompt_tokens": 116, "completion_tokens": 97, "duration": 4.368560314178467}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    # Ensure a is less than b, swap if not\n    if a > b:\n        a, b = b, a\n    # Create a list to store even numbers\n    even_numbers = []\n    # Loop from a to b (inclusive)\n    for i in range(a, b + 1):\n        # Check if the current number is even\n        if i % 2 == 0:\n            # Add the even number to the list\n            even_numbers.append(i)\n    # Return the list of even numbers\n    return even_numbers", "prompt_tokens": 144, "completion_tokens": 127, "duration": 5.012144088745117}
