{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 828, "completion_tokens": 341, "duration": 12.425079107284546}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:  # When stack is empty, a group is complete\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 928, "completion_tokens": 516, "duration": 20.091155290603638}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 741, "completion_tokens": 301, "duration": 10.814149379730225}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 971, "completion_tokens": 481, "duration": 16.232628345489502}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 980, "completion_tokens": 490, "duration": 14.476836919784546}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for num in numbers[:-1]:\n        result.append(num)\n        result.append(delimiter)\n    result.append(numbers[-1])\n    return result", "prompt_tokens": 832, "completion_tokens": 410, "duration": 11.412457942962646}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ' and max_depth > 0:\n            depths.append(max_depth)\n            max_depth = 0\n    if max_depth > 0:  # For the last group if there's no trailing space\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 974, "completion_tokens": 583, "duration": 20.06533718109131}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 767, "completion_tokens": 332, "duration": 10.233806848526001}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    return sum_numbers, product_numbers", "prompt_tokens": 864, "completion_tokens": 398, "duration": 11.833014965057373}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        max_list.append(current_max)\n    return max_list", "prompt_tokens": 981, "completion_tokens": 538, "duration": 16.98696732521057}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 920, "completion_tokens": 401, "duration": 11.533567190170288}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for x, y in zip(a, b):\n        result += str(int(x) ^ int(y))\n    return result", "prompt_tokens": 797, "completion_tokens": 388, "duration": 13.103434801101685}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 840, "completion_tokens": 398, "duration": 14.068236351013184}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 818, "completion_tokens": 412, "duration": 17.226667165756226}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 783, "completion_tokens": 397, "duration": 12.963458061218262}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 725, "completion_tokens": 315, "duration": 11.18562936782837}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 815, "completion_tokens": 393, "duration": 13.191040992736816}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = []\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations", "prompt_tokens": 975, "completion_tokens": 409, "duration": 14.245003461837769}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 788, "completion_tokens": 371, "duration": 12.386995077133179}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    num_to_word = {v: k for k, v in num_dict.items()}\n    return ' '.join(num_to_word[num] for num in sorted(num_dict[word] for word in num_list))", "prompt_tokens": 839, "completion_tokens": 463, "duration": 16.31477952003479}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 975, "completion_tokens": 455, "duration": 20.409607887268066}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 862, "completion_tokens": 374, "duration": 12.80208706855774}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 767, "completion_tokens": 318, "duration": 11.905110359191895}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 723, "completion_tokens": 350, "duration": 10.93053936958313}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 771, "completion_tokens": 405, "duration": 13.999937534332275}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 954, "completion_tokens": 532, "duration": 20.89141821861267}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 859, "completion_tokens": 482, "duration": 16.02775812149048}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 707, "completion_tokens": 341, "duration": 11.923942565917969}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 741, "completion_tokens": 342, "duration": 10.576126098632812}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 775, "completion_tokens": 394, "duration": 11.878947257995605}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 819, "completion_tokens": 313, "duration": 8.81022310256958}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 1078, "completion_tokens": 646, "duration": 20.67260193824768}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(ys):\n        return [coeff * i for i, coeff in enumerate(ys)][1:]\n\n    def newton_method(ys, initial_guess=0.0, tolerance=1e-7, max_iterations=1000):\n        x0 = initial_guess\n        for _ in range(max_iterations):\n            y = poly(ys, x0)\n            y_prime = poly(derivative(ys), x0)\n            if y_prime == 0:\n                return x0\n            x1 = x0 - y / y_prime\n            if abs(x1 - x0) < tolerance:\n                return x1\n            x0 = x1\n        return x0\n\n    return newton_method(xs)", "prompt_tokens": 1131, "completion_tokens": 624, "duration": 23.445339918136597}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3 (1-based indexing)\n    divisible_by_three = [l[i] for i in range(len(l)) if (i + 1) % 3 == 0]\n    divisible_by_three.sort()\n    \n    # Merge the sorted elements back into the original list\n    result = [divisible_by_three.pop(0) if (i + 1) % 3 == 0 else l[i] for i in range(len(l))]\n    \n    return result", "prompt_tokens": 1028, "completion_tokens": 606, "duration": 17.510283708572388}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))", "prompt_tokens": 730, "completion_tokens": 306, "duration": 11.009777784347534}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 718, "completion_tokens": 265, "duration": 9.438829183578491}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "prompt_tokens": 789, "completion_tokens": 404, "duration": 14.11192274093628}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted(l[::2])\n    for i in range(0, len(l), 2):\n        l[i] = even_indices.pop(0)\n    return l", "prompt_tokens": 945, "completion_tokens": 444, "duration": 10.652951717376709}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 961, "completion_tokens": 474, "duration": 16.403398036956787}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n: int):\n    count, num = 0, 0\n    while True:\n        if is_prime(fibonacci(num)):\n            count += 1\n            if count == n:\n                return fibonacci(num)\n        num += 1", "prompt_tokens": 905, "completion_tokens": 555, "duration": 17.010175228118896}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 1244, "completion_tokens": 744, "duration": 20.168750762939453}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since all cars are moving at the same speed and there are equal numbers of cars moving in opposite directions,\n    each car moving left to right will eventually collide with each car moving right to left. Therefore, the total\n    number of collisions is simply the product of the number of cars in each direction.\n    \"\"\"\n    return n * n", "prompt_tokens": 878, "completion_tokens": 358, "duration": 11.854960441589355}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]", "prompt_tokens": 749, "completion_tokens": 254, "duration": 6.951097249984741}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1116, "completion_tokens": 539, "duration": 15.561231851577759}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 762, "completion_tokens": 334, "duration": 12.026240587234497}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 744, "completion_tokens": 369, "duration": 9.824031114578247}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    dp = [0] * (n + 1)\n    dp[0], dp[1], dp[2], dp[3] = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "prompt_tokens": 1103, "completion_tokens": 611, "duration": 23.0274555683136}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 799, "completion_tokens": 405, "duration": 12.755794763565063}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 762, "completion_tokens": 338, "duration": 8.366413831710815}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "prompt_tokens": 837, "completion_tokens": 350, "duration": 10.665631771087646}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 801, "completion_tokens": 381, "duration": 14.166067600250244}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 873, "completion_tokens": 360, "duration": 14.437326431274414}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 785, "completion_tokens": 360, "duration": 15.651940822601318}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 649, "completion_tokens": 261, "duration": 11.207713603973389}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 951, "completion_tokens": 397, "duration": 9.917707443237305}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 827, "completion_tokens": 471, "duration": 13.745881795883179}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 880, "completion_tokens": 453, "duration": 15.186791181564331}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 795, "completion_tokens": 377, "duration": 10.995952606201172}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 841, "completion_tokens": 351, "duration": 12.73766827583313}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n    last_factor = 1\n    while n > 1:\n        if n % factor == 0:\n            last_factor = factor\n            n = n / factor\n            while n % factor == 0:\n                n = n / factor\n        factor = factor + 1\n    return last_factor", "prompt_tokens": 860, "completion_tokens": 561, "duration": 18.777526140213013}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 873, "completion_tokens": 409, "duration": 13.701697826385498}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 1152, "completion_tokens": 731, "duration": 21.31122660636902}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 836, "completion_tokens": 343, "duration": 11.175362586975098}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int, memo={}):\n    \"\"\"Compute the n-th element of the FibFib sequence.\"\"\"\n    if n in memo:\n        return memo[n]\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    return memo[n]", "prompt_tokens": 1002, "completion_tokens": 510, "duration": 13.800147533416748}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "prompt_tokens": 868, "completion_tokens": 377, "duration": 12.214884042739868}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)  # Handle shift larger than the length of the number\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 746, "completion_tokens": 341, "duration": 15.60427474975586}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 846, "completion_tokens": 341, "duration": 9.478240251541138}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 1064, "completion_tokens": 374, "duration": 11.142571687698364}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 1251, "completion_tokens": 402, "duration": 11.634066820144653}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    result = -1\n    for key, value in frequency.items():\n        if key <= value:\n            result = max(result, key)\n    return result", "prompt_tokens": 911, "completion_tokens": 352, "duration": 15.98461365699768}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))  # Append the minimum\n        if sorted_lst:\n            result.append(sorted_lst.pop())  # Append the maximum\n    return result", "prompt_tokens": 910, "completion_tokens": 420, "duration": 12.642925024032593}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 865, "completion_tokens": 516, "duration": 21.71242046356201}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1042, "completion_tokens": 305, "duration": 10.571674108505249}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 1290, "completion_tokens": 738, "duration": 24.284257173538208}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 985, "completion_tokens": 421, "duration": 14.660943746566772}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    if a < 2:\n        return False\n    prime_factors = []\n    for i in range(2, a + 1):\n        while is_prime(i) and a % i == 0:\n            prime_factors.append(i)\n            a = a // i\n    return len(prime_factors) == 3", "prompt_tokens": 930, "completion_tokens": 597, "duration": 22.240516185760498}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if x == 0 or n == 0:\n        return False\n    log_result = math.log(x, n)\n    return log_result.is_integer()", "prompt_tokens": 883, "completion_tokens": 356, "duration": 12.310152053833008}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    root = a ** (1/3)\n    return round(root) ** 3 == a", "prompt_tokens": 886, "completion_tokens": 394, "duration": 11.500508785247803}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = '2357BD'\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1364, "completion_tokens": 510, "duration": 14.854604005813599}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"", "prompt_tokens": 899, "completion_tokens": 345, "duration": 8.247647047042847}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 996, "completion_tokens": 525, "duration": 19.145977020263672}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1130, "completion_tokens": 537, "duration": 22.1011700630188}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 858, "completion_tokens": 460, "duration": 13.268396377563477}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 859, "completion_tokens": 530, "duration": 16.698261260986328}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    # Calculate the sum of digits\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    # Convert the sum to binary and return\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 875, "completion_tokens": 373, "duration": 12.81948447227478}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 1 and num % 2 == 0)", "prompt_tokens": 902, "completion_tokens": 524, "duration": 18.167396306991577}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 942, "completion_tokens": 523, "duration": 17.527588844299316}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1138, "completion_tokens": 383, "duration": 10.167004823684692}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = array[0] + array[-1] if array else 0\n    sorted_array = array.copy()\n    if sum_first_last % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "prompt_tokens": 1271, "completion_tokens": 626, "duration": 26.183576345443726}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr(((ord(c) - ord('a') + 4) % 26) + ord('a')) if c.islower() else chr(((ord(c) - ord('A') + 4) % 26) + ord('A')) if c.isupper() else c for c in s)", "prompt_tokens": 829, "completion_tokens": 380, "duration": 11.323581218719482}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    return lst[1]", "prompt_tokens": 898, "completion_tokens": 424, "duration": 12.67728590965271}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Count the number of sentences that start with 'I' in a given string.\n    \"\"\"\n    # Split the string into sentences using '.', '?', and '!' as delimiters\n    sentences = S.replace('?', '.').replace('!', '.').split('. ')\n    count = 0\n    for sentence in sentences:\n        # Check if the sentence starts with 'I'\n        if sentence.startswith('I'):\n            count += 1\n    return count", "prompt_tokens": 935, "completion_tokens": 522, "duration": 18.060357809066772}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 893, "completion_tokens": 419, "duration": 12.448943138122559}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n    \n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            return chr(((ord(char.lower()) - 97 + 2) % 26) + 97).upper() if char.isupper() else chr(((ord(char) - 97 + 2) % 26) + 97)\n        else:\n            return char\n    \n    return ''.join(replace_vowel(swap_case(char)) for char in message)", "prompt_tokens": 833, "completion_tokens": 443, "duration": 11.912891864776611}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_digits_of_largest_prime(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    if largest_prime is None:\n        return 0\n\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 1522, "completion_tokens": 776, "duration": 20.602217435836792}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 912, "completion_tokens": 338, "duration": 11.427797317504883}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    if n <= 2:\n        return []\n    primes = [2]\n    for num in range(3, n, 2):\n        if all(num % prime != 0 for prime in primes):\n            primes.append(num)\n    return primes", "prompt_tokens": 1078, "completion_tokens": 576, "duration": 20.671003103256226}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 811, "completion_tokens": 339, "duration": 10.152233362197876}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in vowels)", "prompt_tokens": 797, "completion_tokens": 411, "duration": 13.536507606506348}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    lower = int(num)\n    upper = lower + 1 if num > 0 else lower - 1\n    if abs(num - lower) < abs(num - upper):\n        return lower\n    else:\n        return upper", "prompt_tokens": 1031, "completion_tokens": 524, "duration": 14.66513729095459}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones = []\n    current_stone_count = n\n    for i in range(n):\n        stones.append(current_stone_count)\n        if current_stone_count % 2 == 0:\n            current_stone_count += 2\n        else:\n            current_stone_count += 2\n    return stones", "prompt_tokens": 886, "completion_tokens": 490, "duration": 19.906877994537354}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    return [word.strip() for word in s.replace(',', ' ').split() if word.strip()]", "prompt_tokens": 805, "completion_tokens": 320, "duration": 19.638939380645752}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    largest_even = -1\n    for num in range(y, x-1, -1):  # Iterate backwards to find the largest even number more efficiently\n        if num % 2 == 0:\n            largest_even = num\n            break  # Break as soon as the first even number is found since we are iterating backwards\n    return largest_even", "prompt_tokens": 883, "completion_tokens": 557, "duration": 23.023535013198853}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 945, "completion_tokens": 408, "duration": 12.864391326904297}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted([num for num in x if has_no_even_digit(num)])", "prompt_tokens": 811, "completion_tokens": 355, "duration": 13.0514554977417}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort(reverse=True)\n    return [digit_names[num] for num in filtered_arr]", "prompt_tokens": 1136, "completion_tokens": 385, "duration": 15.531764030456543}
{"task_id": "HumanEval/106", "generated_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef sum_up_to_index(lst, index):\n    return sum(lst[:index+1])\n\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # If i is even\n            result.append(factorial(i))\n        else:\n            # Generate a list from 1 to i and sum it up\n            nums = list(range(1, i+1))\n            result.append(sum_up_to_index(nums, len(nums)-1))\n    return result", "prompt_tokens": 906, "completion_tokens": 495, "duration": 15.538289546966553}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1080, "completion_tokens": 452, "duration": 28.71992015838623}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count", "prompt_tokens": 892, "completion_tokens": 403, "duration": 10.240142822265625}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i - 1] > arr[i]:\n            count += 1\n    if arr[n - 1] > arr[0]:\n        count += 1\n    return count <= 1", "prompt_tokens": 1359, "completion_tokens": 541, "duration": 16.455816745758057}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    return \"YES\" if odd_in_lst1 <= even_in_lst2 else \"NO\"", "prompt_tokens": 1027, "completion_tokens": 405, "duration": 11.566832780838013}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    words = test.split()\n    letter_count = {}\n    for word in words:\n        letter_count[word] = letter_count.get(word, 0) + 1\n    max_count = max(letter_count.values(), default=0)\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "prompt_tokens": 944, "completion_tokens": 460, "duration": 16.23734188079834}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 1365, "completion_tokens": 775, "duration": 18.520089864730835}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 957, "completion_tokens": 386, "duration": 12.552977323532104}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "prompt_tokens": 1053, "completion_tokens": 641, "duration": 22.299140691757202}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_fills = 0\n    for row in grid:\n        water_in_row = sum(row)\n        total_fills += math.ceil(water_in_row / capacity)\n    return total_fills", "prompt_tokens": 1475, "completion_tokens": 577, "duration": 17.911171197891235}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 950, "completion_tokens": 333, "duration": 10.422679424285889}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 985, "completion_tokens": 395, "duration": 16.228094577789307}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 913, "completion_tokens": 384, "duration": 19.57102608680725}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    open_count = 0\n    close_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                close_count += 1\n                if open_count > 0:\n                    open_count -= 1\n                    close_count -= 1\n    return 'Yes' if open_count == 0 and close_count == 0 else 'No'", "prompt_tokens": 1119, "completion_tokens": 736, "duration": 25.062303066253662}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1066, "completion_tokens": 349, "duration": 13.879879474639893}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even_pos = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even_pos += lst[i]\n    return sum_odd_even_pos", "prompt_tokens": 868, "completion_tokens": 430, "duration": 12.670829772949219}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(num for num in arr[:k] if 0 < num < 100 or -100 < num < 0)", "prompt_tokens": 987, "completion_tokens": 504, "duration": 16.912065744400024}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)  # Add 1 as it's always the last number and is odd\n    return sorted(odd_numbers)", "prompt_tokens": 1303, "completion_tokens": 662, "duration": 22.63611912727356}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date or \"-\" not in date:\n        return False\n    \n    parts = date.split(\"-\")\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month, day, year = int(month), int(day), int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    elif month == 2:\n        if day > 29:\n            return False\n    \n    return True", "prompt_tokens": 1165, "completion_tokens": 534, "duration": 21.529358386993408}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 935, "completion_tokens": 416, "duration": 11.65817379951477}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if i > 0 and lst[i] == lst[i - 1] and lst[i] == lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 1172, "completion_tokens": 442, "duration": 11.135753870010376}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    import math\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        if is_prime(end - start):\n            return \"YES\"\n    return \"NO\"", "prompt_tokens": 1257, "completion_tokens": 563, "duration": 17.831583976745605}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "prompt_tokens": 942, "completion_tokens": 475, "duration": 11.326250076293945}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    pq = []\n    for i in range(N):\n        for j in range(N):\n            heappush(pq, (grid[i][j], 1, [(i, j)], grid[i][j]))\n\n    visited = set()\n\n    while pq:\n        _, length, path, val = heappop(pq)\n        if length == k:\n            return [grid[x][y] for x, y in path]\n        \n        if tuple(path) in visited:\n            continue\n        visited.add(tuple(path))\n\n        x, y = path[-1]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                newPath = path + [(nx, ny)]\n                newVal = val * (N*N) + grid[nx][ny]\n                heappush(pq, (newVal, length + 1, newPath, newVal))", "prompt_tokens": 1936, "completion_tokens": 1092, "duration": 27.977567434310913}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    def helper(n, memo):\n        if n in memo:\n            return memo[n]\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            result = 1 + n // 2\n        else:\n            result = helper(n - 1, memo) + helper(n - 2, memo) + helper(n + 1, memo)\n        memo[n] = result\n        return result\n    \n    memo = {}\n    for i in range(1, n + 2):\n        if i not in memo:\n            helper(i, memo)\n    \n    return [memo[i] for i in range(1, n + 2)]", "prompt_tokens": 1133, "completion_tokens": 509, "duration": 19.400611400604248}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 726, "completion_tokens": 403, "duration": 22.871328353881836}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                return True\n    return False", "prompt_tokens": 1158, "completion_tokens": 764, "duration": 26.588723182678223}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 904, "completion_tokens": 311, "duration": 10.848382234573364}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' ')", "prompt_tokens": 884, "completion_tokens": 361, "duration": 9.197561025619507}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 886, "completion_tokens": 424, "duration": 16.79657793045044}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 882, "completion_tokens": 391, "duration": 12.108383417129517}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    def parse_value(value):\n        if isinstance(value, str):\n            return float(value.replace(',', '.'))\n        return value\n\n    val_a = parse_value(a)\n    val_b = parse_value(b)\n\n    if val_a > val_b:\n        return a\n    elif val_b > val_a:\n        return b\n    else:\n        return None", "prompt_tokens": 962, "completion_tokens": 521, "duration": 15.053168296813965}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # The smallest sum of 4 positive even numbers is 2+2+2+2 = 8\n    if n < 8:\n        return False\n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers\n    return n % 2 == 0", "prompt_tokens": 834, "completion_tokens": 483, "duration": 18.465728282928467}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of n.\"\"\"\n    if n == 1:\n        return 1\n    return factorial(n) * special_factorial(n-1)\n\ndef factorial(n):\n    \"\"\"Calculate the factorial of n.\"\"\"\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "prompt_tokens": 820, "completion_tokens": 402, "duration": 12.171314239501953}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # Replace more than 2 consecutive spaces with '-'\n    text = text.replace(\"   \", \"-\")\n    # Replace remaining spaces with '_'\n    text = text.replace(\" \", \"_\")\n    return text", "prompt_tokens": 839, "completion_tokens": 416, "duration": 15.109731674194336}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1056, "completion_tokens": 420, "duration": 17.352455139160156}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 == 0:\n            total += lst[i] ** 2\n        elif i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1092, "completion_tokens": 552, "duration": 13.834896087646484}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "prompt_tokens": 1000, "completion_tokens": 481, "duration": 15.055426836013794}
{"task_id": "HumanEval/144", "generated_code": "import math\n\ndef simplify(x, n):\n    \"\"\"Check if the multiplication of two fractions results in a whole number.\"\"\"\n    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n    \n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n    \n    gcd = math.gcd(result_numerator, result_denominator)\n    \n    simplified_numerator = result_numerator // gcd\n    simplified_denominator = result_denominator // gcd\n    \n    return simplified_denominator == 1", "prompt_tokens": 976, "completion_tokens": 494, "duration": 32.17692708969116}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 853, "completion_tokens": 353, "duration": 21.810948610305786}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_special(num):\n        num_str = str(abs(num))\n        return num > 10 and int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0\n    \n    return sum(1 for num in nums if is_special(num))", "prompt_tokens": 930, "completion_tokens": 457, "duration": 16.985097408294678}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Create the array based on the given formula\n    arr = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    count = 0\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if their sum is a multiple of 3\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1302, "completion_tokens": 901, "duration": 30.057181358337402}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])", "prompt_tokens": 1028, "completion_tokens": 420, "duration": 16.569290161132812}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the strings first by length, then alphabetically\n    sorted_strings = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_strings", "prompt_tokens": 1154, "completion_tokens": 553, "duration": 17.33056092262268}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 870, "completion_tokens": 471, "duration": 17.80506682395935}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x > 0)", "prompt_tokens": 877, "completion_tokens": 332, "duration": 8.501408338546753}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for s, g in zip(game, guess)]", "prompt_tokens": 1101, "completion_tokens": 371, "duration": 13.514699220657349}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        return CAP - SM\n\n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 1259, "completion_tokens": 478, "duration": 18.46279215812683}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    \"\"\"Check if the second word or any of its rotations is a substring in the first word.\"\"\"\n    if len(b) > len(a):\n        return False\n    a_concat = a + a\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a_concat:\n            return True\n    return False", "prompt_tokens": 972, "completion_tokens": 498, "duration": 16.61063551902771}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 795, "completion_tokens": 435, "duration": 16.583886861801147}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 959, "completion_tokens": 705, "duration": 30.17703080177307}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 928, "completion_tokens": 452, "duration": 14.995237112045288}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "prompt_tokens": 966, "completion_tokens": 490, "duration": 15.848752498626709}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    return [number + eaten, remaining - eaten]", "prompt_tokens": 1117, "completion_tokens": 290, "duration": 9.339586973190308}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result", "prompt_tokens": 1123, "completion_tokens": 520, "duration": 18.481879472732544}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if all(not char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)", "prompt_tokens": 858, "completion_tokens": 389, "duration": 21.704198360443115}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 781, "completion_tokens": 390, "duration": 12.975120782852173}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    return [num for num in range(min(a, b), max(a, b) + 1) if num % 2 == 0]", "prompt_tokens": 814, "completion_tokens": 434, "duration": 16.122827529907227}
