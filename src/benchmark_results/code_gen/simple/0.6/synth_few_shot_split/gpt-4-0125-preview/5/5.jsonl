{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 840, "completion_tokens": 351, "duration": 12.31878399848938}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:  # When stack is empty, a group is complete\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 968, "completion_tokens": 556, "duration": 20.534539222717285}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 752, "completion_tokens": 366, "duration": 13.220543622970581}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 1013, "completion_tokens": 523, "duration": 19.32427215576172}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(numbers)\n    return mad", "prompt_tokens": 936, "completion_tokens": 458, "duration": 14.948158979415894}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 812, "completion_tokens": 387, "duration": 11.121635913848877}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 932, "completion_tokens": 517, "duration": 19.135207414627075}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 767, "completion_tokens": 332, "duration": 9.744037389755249}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\nfrom functools import reduce\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = reduce(lambda x, y: x*y, numbers, 1)\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 818, "completion_tokens": 409, "duration": 20.257359504699707}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = []\n    current_max = numbers[0]\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    \n    return result", "prompt_tokens": 1090, "completion_tokens": 654, "duration": 16.843612670898438}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 1027, "completion_tokens": 508, "duration": 18.648138284683228}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 808, "completion_tokens": 442, "duration": 14.173264026641846}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 832, "completion_tokens": 390, "duration": 17.707916975021362}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 800, "completion_tokens": 394, "duration": 11.913873195648193}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 720, "completion_tokens": 370, "duration": 14.358830213546753}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 742, "completion_tokens": 332, "duration": 10.274164915084839}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 767, "completion_tokens": 345, "duration": 10.839877843856812}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 920, "completion_tokens": 354, "duration": 13.900038957595825}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count", "prompt_tokens": 821, "completion_tokens": 419, "duration": 12.127188444137573}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 799, "completion_tokens": 394, "duration": 13.022883892059326}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_numbers = sorted(numbers)\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    min_diff = sorted_numbers[1] - sorted_numbers[0]\n    for i in range(1, len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] < min_diff:\n            min_diff = sorted_numbers[i + 1] - sorted_numbers[i]\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    return closest_pair", "prompt_tokens": 1028, "completion_tokens": 526, "duration": 18.525330305099487}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 933, "completion_tokens": 440, "duration": 13.940496921539307}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 806, "completion_tokens": 357, "duration": 9.20568323135376}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 734, "completion_tokens": 361, "duration": 8.930962324142456}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 772, "completion_tokens": 406, "duration": 12.555535316467285}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 937, "completion_tokens": 515, "duration": 16.783533811569214}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    count_dict = {}\n    for num in numbers:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    return [num for num in numbers if count_dict[num] == 1]", "prompt_tokens": 893, "completion_tokens": 519, "duration": 16.577759265899658}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 697, "completion_tokens": 331, "duration": 11.770473957061768}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 726, "completion_tokens": 368, "duration": 11.164644002914429}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 767, "completion_tokens": 327, "duration": 9.623721599578857}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 838, "completion_tokens": 332, "duration": 10.39900255203247}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 1038, "completion_tokens": 606, "duration": 19.72574758529663}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(ys):\n        return [coeff * i for i, coeff in enumerate(ys)][1:]\n\n    def newton_method(ys, guess=0.0, max_iter=1000, tol=1e-6):\n        for _ in range(max_iter):\n            f_val = poly(ys, guess)\n            f_deriv_val = poly(derivative(ys), guess)\n            if abs(f_val) < tol:\n                return guess\n            guess -= f_val / f_deriv_val\n        return guess\n\n    return newton_method(xs)", "prompt_tokens": 1186, "completion_tokens": 644, "duration": 20.806380033493042}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three.sort()\n    \n    # Create a new list to store the result\n    result = []\n    j = 0  # Index for sorted divisible_by_three list\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(divisible_by_three[j])\n            j += 1\n        else:\n            result.append(l[i])\n    return result", "prompt_tokens": 981, "completion_tokens": 579, "duration": 17.977378606796265}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))", "prompt_tokens": 721, "completion_tokens": 297, "duration": 10.191342115402222}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 718, "completion_tokens": 265, "duration": 8.711400032043457}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 786, "completion_tokens": 383, "duration": 12.355583429336548}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even_indices.pop(0)\n    return l", "prompt_tokens": 901, "completion_tokens": 419, "duration": 10.943259000778198}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 935, "completion_tokens": 448, "duration": 19.758170127868652}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    count = 0\n    a, b = 0, 1\n    while True:\n        if a != 0 and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b", "prompt_tokens": 917, "completion_tokens": 542, "duration": 14.752284049987793}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 1209, "completion_tokens": 709, "duration": 21.760292053222656}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the total number of collisions between two sets of n cars moving in opposite directions.\n    \"\"\"\n    return n * n", "prompt_tokens": 939, "completion_tokens": 375, "duration": 12.263005018234253}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 769, "completion_tokens": 271, "duration": 12.290392875671387}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1147, "completion_tokens": 570, "duration": 17.521268129348755}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 748, "completion_tokens": 320, "duration": 8.95359182357788}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 738, "completion_tokens": 363, "duration": 11.276227474212646}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 1259, "completion_tokens": 735, "duration": 23.18376135826111}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 796, "completion_tokens": 402, "duration": 11.04397702217102}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 814, "completion_tokens": 390, "duration": 12.295174598693848}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 886, "completion_tokens": 415, "duration": 15.884784460067749}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 802, "completion_tokens": 382, "duration": 14.93668270111084}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 876, "completion_tokens": 363, "duration": 10.163756608963013}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 785, "completion_tokens": 360, "duration": 10.932245254516602}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 611, "completion_tokens": 223, "duration": 7.458551645278931}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 890, "completion_tokens": 336, "duration": 9.05632209777832}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 837, "completion_tokens": 481, "duration": 14.633238792419434}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack or stack.pop() != '<':\n                return False\n    return not stack", "prompt_tokens": 904, "completion_tokens": 479, "duration": 17.371464729309082}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 867, "completion_tokens": 458, "duration": 12.282098054885864}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1).intersection(set(l2))))", "prompt_tokens": 839, "completion_tokens": 349, "duration": 8.717174768447876}
{"task_id": "HumanEval/59", "generated_code": "import math\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    largest_factor = -1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 2:\n        largest_factor = n\n    return largest_factor", "prompt_tokens": 890, "completion_tokens": 583, "duration": 15.247541904449463}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 850, "completion_tokens": 386, "duration": 12.879117727279663}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 978, "completion_tokens": 558, "duration": 18.32831311225891}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 886, "completion_tokens": 393, "duration": 14.921637296676636}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    memo = {0: 0, 1: 0, 2: 1}\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        memo[n] = helper(n-1) + helper(n-2) + helper(n-3)\n        return memo[n]\n    return helper(n)", "prompt_tokens": 962, "completion_tokens": 442, "duration": 14.820658445358276}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = sum(1 for char in s if char.lower() in vowels)\n    if s and s[-1].lower() == 'y':  # Check if 'y' is at the end\n        count += 1\n    return count", "prompt_tokens": 880, "completion_tokens": 392, "duration": 14.07558298110962}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift > length:\n        return x_str[::-1]\n    shift %= length\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 849, "completion_tokens": 436, "duration": 16.210139513015747}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 854, "completion_tokens": 349, "duration": 13.903608083724976}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 1063, "completion_tokens": 373, "duration": 9.914631843566895}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 1245, "completion_tokens": 396, "duration": 13.370753049850464}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    result = -1\n    for key, value in count.items():\n        if key <= value:\n            result = max(result, key)\n    return result", "prompt_tokens": 943, "completion_tokens": 361, "duration": 15.903249263763428}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 854, "completion_tokens": 352, "duration": 13.388742685317993}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)", "prompt_tokens": 923, "completion_tokens": 465, "duration": 15.476720809936523}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1032, "completion_tokens": 295, "duration": 9.97296667098999}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 1288, "completion_tokens": 882, "duration": 26.429893016815186}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1002, "completion_tokens": 438, "duration": 12.701754808425903}
{"task_id": "HumanEval/75", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    prime_factors = []\n    for i in range(2, a + 1):\n        while a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n            a //= i\n    return len(prime_factors) == 3", "prompt_tokens": 905, "completion_tokens": 557, "duration": 16.801954984664917}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False", "prompt_tokens": 919, "completion_tokens": 387, "duration": 14.262452125549316}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    cube_root = round(abs_a ** (1/3))\n    return cube_root ** 3 == abs_a", "prompt_tokens": 827, "completion_tokens": 353, "duration": 12.440820932388306}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = '2357BD'\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1361, "completion_tokens": 507, "duration": 18.16672706604004}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"", "prompt_tokens": 888, "completion_tokens": 334, "duration": 12.341923475265503}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 1112, "completion_tokens": 645, "duration": 16.906103372573853}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1131, "completion_tokens": 551, "duration": 23.528002977371216}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 990, "completion_tokens": 593, "duration": 15.204989910125732}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    start = 10**(n-1)\n    end = 10**n - 1\n    for i in range(start, end + 1):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 800, "completion_tokens": 519, "duration": 16.7098171710968}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    # Calculate the sum of digits\n    sum_of_digits = 0\n    while N > 0:\n        sum_of_digits += N % 10\n        N //= 10\n    \n    # Convert the sum to binary\n    binary_representation = bin(sum_of_digits)[2:]\n    \n    return binary_representation", "prompt_tokens": 933, "completion_tokens": 452, "duration": 15.013454675674438}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 726, "completion_tokens": 370, "duration": 12.646349668502808}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 1010, "completion_tokens": 591, "duration": 19.02171540260315}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    # Sort by row in ascending order and then by column in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1122, "completion_tokens": 469, "duration": 18.164998292922974}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 1174, "completion_tokens": 720, "duration": 20.799991846084595}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.islower() else 4\n            if char.islower():\n                encrypted += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                encrypted += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 861, "completion_tokens": 443, "duration": 14.390419006347656}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]", "prompt_tokens": 856, "completion_tokens": 385, "duration": 12.078463792800903}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences that start with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    # Split the string into sentences using the specified delimiters\n    sentences = [sentence.strip() for sentence in re.split(r'[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    count = sum(sentence.startswith(\"I \") or sentence == \"I\" for sentence in sentences)\n    return count", "prompt_tokens": 840, "completion_tokens": 429, "duration": 11.283060312271118}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 895, "completion_tokens": 375, "duration": 12.758473873138428}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'AEIOUaeiou'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            # Find the position of the vowel in the alphabet and add 2\n            if char.isupper():\n                encoded_message += chr(((ord(char) - 65 + 2) % 26) + 65)\n            else:\n                encoded_message += chr(((ord(char) - 97 + 2) % 26) + 97)\n        elif char.isalpha():\n            if char.isupper():\n                encoded_message += char.lower()\n            else:\n                encoded_message += char.upper()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 923, "completion_tokens": 551, "duration": 17.87759232521057}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num):\n            largest_prime = max(largest_prime, num)\n    \n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 1494, "completion_tokens": 728, "duration": 20.672868490219116}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(key.islower() for key in dict if isinstance(key, str))\n    all_upper = all(key.isupper() for key in dict if isinstance(key, str))\n    return all_lower or all_upper", "prompt_tokens": 929, "completion_tokens": 351, "duration": 10.058778524398804}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "prompt_tokens": 1101, "completion_tokens": 631, "duration": 23.004664421081543}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 817, "completion_tokens": 345, "duration": 9.107328176498413}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):  # Iterate over even indices\n        if s[i] in 'AEIOU':  # Check if the character is an uppercase vowel\n            count += 1\n    return count", "prompt_tokens": 755, "completion_tokens": 435, "duration": 17.370666980743408}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 951, "completion_tokens": 379, "duration": 15.266508340835571}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 954, "completion_tokens": 553, "duration": 20.885334491729736}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.split(r'[,\\s]\\s*', s)", "prompt_tokens": 812, "completion_tokens": 324, "duration": 14.772833585739136}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 871, "completion_tokens": 503, "duration": 17.043317079544067}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m - n + 1)\n    return bin(round(avg))", "prompt_tokens": 954, "completion_tokens": 417, "duration": 12.929685115814209}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n    \n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 812, "completion_tokens": 355, "duration": 10.791097402572632}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort(reverse=True)\n    return [digit_names[num] for num in filtered_arr]", "prompt_tokens": 1160, "completion_tokens": 409, "duration": 13.317562818527222}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_of_numbers(x):\n        return x * (x + 1) // 2\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # even\n            result.append(factorial(i))\n        else:  # odd\n            result.append(sum_of_numbers(i))\n    return result", "prompt_tokens": 863, "completion_tokens": 425, "duration": 15.25278091430664}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1075, "completion_tokens": 447, "duration": 15.69413447380066}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 1469, "completion_tokens": 965, "duration": 20.67437219619751}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    count = 0\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            count += 1\n            index = i\n    if count == 0:\n        return True\n    if count > 1:\n        return False\n    if arr[0] >= arr[-1]:\n        return False\n    return True", "prompt_tokens": 1338, "completion_tokens": 539, "duration": 17.673784017562866}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    return \"YES\" if odd_count_lst1 <= even_count_lst2 else \"NO\"", "prompt_tokens": 1009, "completion_tokens": 387, "duration": 15.574380159378052}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values(), default=0)\n    most_common_letters = {letter: count for letter, count in letter_count.items() if count == max_count}\n    return most_common_letters", "prompt_tokens": 983, "completion_tokens": 463, "duration": 15.799674272537231}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 1350, "completion_tokens": 760, "duration": 17.892082691192627}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 1108, "completion_tokens": 537, "duration": 16.324443817138672}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 983, "completion_tokens": 562, "duration": 19.519996166229248}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 1646, "completion_tokens": 734, "duration": 20.55654215812683}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 995, "completion_tokens": 378, "duration": 11.325308561325073}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def is_consonant(char):\n        return char.lower() not in 'aeiou' and char.isalpha()\n\n    def consonant_count(word):\n        return sum(1 for char in word if is_consonant(char))\n\n    return [word for word in s.split() if consonant_count(word) == n]", "prompt_tokens": 986, "completion_tokens": 396, "duration": 13.32876205444336}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 907, "completion_tokens": 378, "duration": 12.959885358810425}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Check both possible concatenations\n    for order in [lst, lst[::-1]]:\n        stack = []\n        for s in order:\n            for char in s:\n                if char == '(':\n                    stack.append(char)\n                elif char == ')':\n                    if not stack:\n                        break\n                    stack.pop()\n            else:\n                continue\n            break\n        else:\n            if not stack:\n                return 'Yes'\n    return 'No'", "prompt_tokens": 1165, "completion_tokens": 781, "duration": 23.549668788909912}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1058, "completion_tokens": 341, "duration": 8.683133602142334}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 956, "completion_tokens": 495, "duration": 17.336336851119995}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(num for num in arr[:k] if 0 < abs(num) < 100)", "prompt_tokens": 1010, "completion_tokens": 521, "duration": 17.808720350265503}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    def collatz_sequence(x):\n        seq = [x]\n        while x > 1:\n            if x % 2 == 0:\n                x = x // 2\n            else:\n                x = 3 * x + 1\n            seq.append(x)\n        return seq\n\n    sequence = collatz_sequence(n)\n    odd_numbers = [num for num in sequence if num % 2 != 0]\n    return sorted(odd_numbers)", "prompt_tokens": 1223, "completion_tokens": 587, "duration": 24.16918969154358}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into month, day, and year\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if month, day, and year are digits\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month, day, year = int(month), int(day), int(year)\n    \n    # Check the range of month and day\n    if month < 1 or month > 12 or day < 1:\n        return False\n    \n    # Check the number of days in each month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    elif month == 2:\n        if day > 29:\n            return False\n    \n    return True", "prompt_tokens": 1173, "completion_tokens": 606, "duration": 24.43294858932495}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 936, "completion_tokens": 417, "duration": 15.030197381973267}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if i > 0 and lst[i] == lst[i - 1] and lst[i] == lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 1173, "completion_tokens": 443, "duration": 12.482141733169556}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    import math\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        if is_prime(end - start):\n            return \"YES\"\n    return \"NO\"", "prompt_tokens": 1269, "completion_tokens": 575, "duration": 20.49058747291565}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        product_of_signs *= (1 if num > 0 else -1 if num < 0 else 0)\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * product_of_signs", "prompt_tokens": 927, "completion_tokens": 470, "duration": 17.780036449432373}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    pq = [(grid[i][j], i, j, 1, [grid[i][j]]) for i in range(N) for j in range(N)]\n    visited = {(i, j, 1): [grid[i][j]] for i in range(N) for j in range(N)}\n\n    while pq:\n        cost, x, y, steps, path = heappop(pq)\n        if steps == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_cost = cost + grid[nx][ny]\n                new_path = path + [grid[nx][ny]]\n                if (nx, ny, steps + 1) not in visited or visited[(nx, ny, steps + 1)] > new_path:\n                    visited[(nx, ny, steps + 1)] = new_path\n                    heappush(pq, (new_cost, nx, ny, steps + 1, new_path))", "prompt_tokens": 1919, "completion_tokens": 1104, "duration": 45.85069441795349}
{"task_id": "HumanEval/130", "generated_code": "def tri(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        memo[n] = [1, 3, 2]\n        return memo[n]\n    if n % 2 == 0:\n        memo[n] = tri(n-1) + [1 + n / 2]\n    else:\n        prev = tri(n-1)\n        memo[n] = prev + [prev[-1] + prev[-2] + tri(n+1, memo)[0]]\n    return memo[n]", "prompt_tokens": 1115, "completion_tokens": 475, "duration": 16.336846113204956}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 774, "completion_tokens": 399, "duration": 14.684661865234375}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if not stack:\n                return False\n    return False", "prompt_tokens": 1066, "completion_tokens": 557, "duration": 17.855326890945435}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    import math\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 948, "completion_tokens": 357, "duration": 8.562644720077515}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) == 1 or txt[-2] == ' ':\n        return True\n    return False", "prompt_tokens": 882, "completion_tokens": 359, "duration": 11.957621574401855}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 967, "completion_tokens": 505, "duration": 14.800552368164062}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 863, "completion_tokens": 372, "duration": 12.438030481338501}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n            return float(x)\n        return x\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float > b_float:\n        return a\n    elif a_float < b_float:\n        return b\n    else:\n        return None", "prompt_tokens": 910, "completion_tokens": 477, "duration": 22.24635076522827}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    if n % 2 == 0:\n        return True\n    return False", "prompt_tokens": 917, "completion_tokens": 499, "duration": 12.698400259017944}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of n.\"\"\"\n    if n == 1:\n        return 1\n    return factorial(n) * special_factorial(n-1)\n\ndef factorial(n):\n    \"\"\"Calculate the factorial of n.\"\"\"\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "prompt_tokens": 886, "completion_tokens": 468, "duration": 17.11759114265442}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # Replace more than 2 consecutive spaces with '-'\n    text = text.replace(\"   \", \"-\")\n    # Replace remaining spaces with '_'\n    text = text.replace(\" \", \"_\")\n    return text", "prompt_tokens": 819, "completion_tokens": 396, "duration": 20.44163155555725}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check for exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check for more than three digits in the name\n    digit_count = sum(c.isdigit() for c in name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1060, "completion_tokens": 495, "duration": 19.280959367752075}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1097, "completion_tokens": 529, "duration": 16.38211679458618}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "prompt_tokens": 950, "completion_tokens": 432, "duration": 17.641299962997437}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    num1, denom1 = map(int, x.split('/'))\n    num2, denom2 = map(int, n.split('/'))\n    \n    new_num = num1 * num2\n    new_denom = denom1 * denom2\n    \n    return new_num % new_denom == 0", "prompt_tokens": 1046, "completion_tokens": 503, "duration": 21.48467516899109}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 851, "completion_tokens": 351, "duration": 12.335042715072632}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd_first_last_digit(num):\n        num_str = str(abs(num))\n        return int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0\n    \n    return sum(1 for num in nums if num > 10 and is_odd_first_last_digit(num))", "prompt_tokens": 827, "completion_tokens": 360, "duration": 11.975461483001709}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Generate the array based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    # Iterate through the array to find valid triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1224, "completion_tokens": 812, "duration": 24.22326636314392}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])", "prompt_tokens": 1019, "completion_tokens": 411, "duration": 12.644794702529907}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    \"\"\"Sorts a list of strings by their length and alphabetically if lengths are equal, removing odd-length strings.\"\"\"\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length first, then alphabetically\n    return sorted(filtered_lst, key=lambda x: (len(x), x))", "prompt_tokens": 1103, "completion_tokens": 516, "duration": 19.243962287902832}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 869, "completion_tokens": 470, "duration": 15.476995468139648}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x > 0)", "prompt_tokens": 882, "completion_tokens": 337, "duration": 12.897183179855347}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 1078, "completion_tokens": 348, "duration": 13.497280836105347}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1211, "completion_tokens": 430, "duration": 12.555788516998291}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 890, "completion_tokens": 348, "duration": 10.323754072189331}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 902, "completion_tokens": 538, "duration": 20.397240161895752}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    value_map = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = ''\n    for value, numeral in value_map:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral", "prompt_tokens": 948, "completion_tokens": 581, "duration": 16.62751579284668}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 933, "completion_tokens": 457, "duration": 16.315919876098633}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "prompt_tokens": 910, "completion_tokens": 434, "duration": 10.909720659255981}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 1115, "completion_tokens": 298, "duration": 9.597390413284302}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i + 1])\n    return eval(expression)", "prompt_tokens": 1115, "completion_tokens": 638, "duration": 23.229676723480225}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)", "prompt_tokens": 867, "completion_tokens": 406, "duration": 16.96969699859619}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    import hashlib\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()", "prompt_tokens": 801, "completion_tokens": 387, "duration": 11.853225469589233}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 897, "completion_tokens": 462, "duration": 14.191647052764893}
