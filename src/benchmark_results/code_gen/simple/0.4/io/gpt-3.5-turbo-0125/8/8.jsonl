{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 62, "duration": 2.9771618843078613}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current_group += char\n        elif char == ')':\n            count -= 1\n            current_group += char\n            if count == 0:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 165, "completion_tokens": 98, "duration": 3.1547493934631348}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.077003240585327}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 48, "duration": 2.3702075481414795}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.5418126583099365}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 142, "completion_tokens": 57, "duration": 2.422464609146118}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "prompt_tokens": 162, "completion_tokens": 98, "duration": 3.065603494644165}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.191286087036133}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 160, "completion_tokens": 74, "duration": 3.688157558441162}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "prompt_tokens": 150, "completion_tokens": 62, "duration": 2.7472779750823975}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return ''", "prompt_tokens": 192, "completion_tokens": 67, "duration": 2.6602914333343506}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(['1' if x != y else '0' for x, y in zip(a, b)])", "prompt_tokens": 126, "completion_tokens": 43, "duration": 2.1772515773773193}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.240973949432373}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.2841296195983887}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 109, "completion_tokens": 37, "duration": 2.1215522289276123}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 118, "completion_tokens": 28, "duration": 2.2058987617492676}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.22524094581604}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    duration_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [duration_map[note] for note in notes]", "prompt_tokens": 222, "completion_tokens": 60, "duration": 2.7987000942230225}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count", "prompt_tokens": 138, "completion_tokens": 76, "duration": 2.471714735031128}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numberals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    number_dict = {number: idx for idx, number in enumerate(numberals)}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 90, "duration": 2.848881483078003}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 216, "completion_tokens": 97, "duration": 3.0704848766326904}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 53, "duration": 2.420546293258667}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 31, "duration": 1.9962410926818848}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.8379998207092285}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.2083613872528076}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 70, "duration": 2.3900504112243652}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 33, "duration": 1.8559796810150146}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 2.03495192527771}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.7621281147003174}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.316107988357544}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.9744253158569336}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 2.22568416595459}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    n = len(xs)\n    if n % 2 != 0:\n        return None\n    \n    a = xs[0]\n    b = xs[-1]\n    \n    return -b / a\n\n# Test cases\nprint(round(find_zero([1, 2]), 2)) # -0.5\nprint(round(find_zero([-6, 11, -6, 1]), 2)) # 1.0", "prompt_tokens": 309, "completion_tokens": 101, "duration": 2.7412006855010986}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    return [sorted(l[i]) if i % 3 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 200, "completion_tokens": 37, "duration": 2.0081281661987305}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.6229610443115234}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.6371443271636963}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 129, "completion_tokens": 62, "duration": 3.648120403289795}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_values = sorted([x for x in l[::2]])\n    result = [val if i % 2 == 0 else even_values.pop(0) for i, val in enumerate(l)]\n    return result", "prompt_tokens": 173, "completion_tokens": 58, "duration": 4.992400407791138}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 6.236968994140625}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n    return fibonacci(i)", "prompt_tokens": 147, "completion_tokens": 165, "duration": 13.227686882019043}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    from itertools import combinations\n    return any(sum(comb) == 0 for comb in combinations(l, 3))", "prompt_tokens": 209, "completion_tokens": 37, "duration": 2.016956090927124}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1)", "prompt_tokens": 201, "completion_tokens": 22, "duration": 1.7723212242126465}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 3.2467658519744873}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.384168386459351}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    return str(base) if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 40, "duration": 1.7915756702423096}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 22, "duration": 3.147357940673828}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 4.218928098678589}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 3.64640474319458}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 3.0641064643859863}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 3.0949056148529053}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 676, "completion_tokens": 246, "duration": 6.624166488647461}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "prompt_tokens": 172, "completion_tokens": 42, "duration": 3.2057862281799316}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 3.050676107406616}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 4.030535697937012}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 3.045121192932129}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 38, "duration": 3.222080707550049}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 64, "duration": 4.6511969566345215}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 4.559585809707642}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 2.9528934955596924}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_factors(num):\n        factors = []\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                factors.append(num // i)\n        return factors\n\n    factors = get_factors(n)\n    prime_factors = [factor for factor in factors if is_prime(factor)]\n    return max(prime_factors)\n\nprint(largest_prime_factor(13195))\nprint(largest_prime_factor(2048))", "prompt_tokens": 113, "completion_tokens": 166, "duration": 4.930313348770142}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 144, "completion_tokens": 22, "duration": 2.8702218532562256}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 67, "duration": 3.4174935817718506}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 26, "duration": 4.0204784870147705}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 199, "completion_tokens": 72, "duration": 4.594135999679565}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count", "prompt_tokens": 176, "completion_tokens": 80, "duration": 3.6272218227386475}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 50, "duration": 3.609389066696167}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.8359012603759766}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[-2])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 38, "duration": 4.156253337860107}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values)\n    min_even_value_index = arr.index(min_even_value)\n    return [min_even_value, min_even_value_index]", "prompt_tokens": 362, "completion_tokens": 71, "duration": 3.2421181201934814}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 37, "duration": 3.025062322616577}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 2.991507053375244}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 3.8243181705474854}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.836962938308716}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 207, "completion_tokens": 55, "duration": 3.280653953552246}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 4.690538167953491}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3", "prompt_tokens": 129, "completion_tokens": 106, "duration": 5.106283187866211}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))", "prompt_tokens": 192, "completion_tokens": 24, "duration": 2.844545364379883}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 160, "completion_tokens": 33, "duration": 2.9189348220825195}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 58, "duration": 4.394531965255737}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 189, "completion_tokens": 29, "duration": 2.7571985721588135}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s) - 2))", "prompt_tokens": 171, "completion_tokens": 62, "duration": 4.223665952682495}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 235, "duration": 4.988820552825928}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.196068286895752}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * 9 * 10**(n-2) + 10**(n-1)", "prompt_tokens": 94, "completion_tokens": 33, "duration": 2.4812450408935547}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 2.3209588527679443}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.7619986534118652}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 180, "completion_tokens": 26, "duration": 2.3696837425231934}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.500901460647583}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 57, "duration": 2.218701124191284}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * ord(char) - 2\n            if char.islower():\n                result += chr((ord('a') + (ord(char) - ord('a') + shift) % 26))\n            else:\n                result += chr((ord('A') + (ord(char) - ord('A') + shift) % 26))\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 110, "duration": 3.0036494731903076}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 38, "duration": 2.2459869384765625}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 62, "duration": 2.543992280960083}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (x == y + z) or (y == x + z) or (z == x + y) if all(isinstance(num, int) for num in [x, y, z]) else False", "prompt_tokens": 185, "completion_tokens": 58, "duration": 2.2474606037139893}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char) + 2 - ord('a')) % 26 + ord('A')) if char.isupper() else chr((ord(char) + 2 - ord('a')) % 26 + ord('a'))\n            else:\n                encoded_char = char.swapcase()\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message\n\n# Test cases\nprint(encode('test'))\nprint(encode('This is a message'))", "prompt_tokens": 159, "completion_tokens": 146, "duration": 3.941112756729126}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    if not prime_numbers:\n        return 0\n    max_prime = max(prime_numbers)\n    return sum_of_digits(max_prime)", "prompt_tokens": 336, "completion_tokens": 126, "duration": 3.194920301437378}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 53, "duration": 2.2260007858276367}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 195, "completion_tokens": 87, "duration": 2.7725985050201416}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 29, "duration": 1.7164859771728516}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 1.8504669666290283}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.2560009956359863}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    pile = []\n    for i in range(n):\n        if n % 2 == 0:\n            pile.append(n + 2*i)\n        else:\n            pile.append(n + 2*i + 1)\n    return pile", "prompt_tokens": 182, "completion_tokens": 60, "duration": 2.1942598819732666}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.8576602935791016}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "prompt_tokens": 144, "completion_tokens": 55, "duration": 2.1946091651916504}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.045437812805176}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 33, "duration": 1.8381683826446533}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digits = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_arr = sorted([x for x in arr if 1 <= x <= 9])\n    filtered_arr.reverse()\n    return [digits[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 103, "duration": 3.183058977127075}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.423431873321533}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n    \n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 107, "duration": 4.371968984603882}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)", "prompt_tokens": 174, "completion_tokens": 31, "duration": 1.9794375896453857}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 349, "completion_tokens": 62, "duration": 2.0068600177764893}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 for x in lst1) <= len(lst2) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 38, "duration": 1.8107566833496094}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    count_dict = {}\n    for letter in letters:\n        count_dict[letter] = count_dict.get(letter, 0) + 1\n    max_count = max(count_dict.values())\n    return {k: v for k, v in count_dict.items() if v == max_count}", "prompt_tokens": 201, "completion_tokens": 74, "duration": 2.723536252975464}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 508, "completion_tokens": 78, "duration": 5.837700843811035}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in s), i, i, i) for i, s in enumerate(lst, 1)]", "prompt_tokens": 223, "completion_tokens": 64, "duration": 2.4152579307556152}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.793105125427246}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 373, "completion_tokens": 33, "duration": 1.8564438819885254}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.5854110717773438}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = [word for word in words if sum(1 for char in word if char in consonants) == n]\n    return result", "prompt_tokens": 231, "completion_tokens": 79, "duration": 2.2083683013916016}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 97, "duration": 2.9199976921081543}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        count += s.count('(') - s.count(')')\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 52, "duration": 1.909454584121704}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.5056846141815186}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 3.4066035747528076}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 1.5702993869781494}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted(list(set(filter(lambda x: x % 2 != 0, collatz))))", "prompt_tokens": 281, "completion_tokens": 83, "duration": 2.3858110904693604}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True", "prompt_tokens": 313, "completion_tokens": 230, "duration": 3.9215219020843506}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 2.022700071334839}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 44, "duration": 3.131215810775757}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 146, "duration": 3.1545817852020264}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= 1 if num >= 0 else -1\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "prompt_tokens": 172, "completion_tokens": 72, "duration": 3.8354077339172363}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    start = min(min(row) for row in grid)\n    path = [start]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = set([(i, j) for i in range(n) for j in range(n) if grid[i][j] == start])\n\n    while len(path) < k:\n        current = path[-1]\n        next_cell = None\n        for di, dj in directions:\n            new_i, new_j = i + di, j + dj\n            if 0 <= new_i < n and 0 <= new_j < n and (new_i, new_j) not in visited:\n                if next_cell is None or grid[new_i][new_j] < grid[next_cell[0]][next_cell[1]]:\n                    next_cell = (new_i, new_j)\n        path.append(grid[next_cell[0]][next_cell[1]])\n        visited.add(next_cell)\n\n    return path", "prompt_tokens": 446, "completion_tokens": 226, "duration": 5.946332931518555}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 1, 1]\n    else:\n        sequence = [1, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n        return sequence", "prompt_tokens": 285, "completion_tokens": 132, "duration": 2.82303524017334}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0", "prompt_tokens": 121, "completion_tokens": 53, "duration": 1.966221809387207}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < len(string) and len(stack) > 0", "prompt_tokens": 183, "completion_tokens": 60, "duration": 1.849933385848999}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum([int(x) ** 2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 25, "duration": 3.011388063430786}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())", "prompt_tokens": 187, "completion_tokens": 49, "duration": 3.1477725505828857}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i - 1\n    return index", "prompt_tokens": 153, "completion_tokens": 50, "duration": 3.2002663612365723}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [num for num in lst if num < 0]\n    pos_ints = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_ints) if neg_ints else None\n    smallest_pos = min(pos_ints) if pos_ints else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 188, "completion_tokens": 90, "duration": 3.769216299057007}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    elif (isinstance(a, int) or isinstance(a, float)) and (isinstance(b, int) or isinstance(b, float)):\n        if float(str(a).replace(',', '.')) == b:\n            return None\n        elif float(str(a).replace(',', '.')) > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and (isinstance(b, int) or isinstance(b, float)):\n        if float(a.replace(',', '.')) == b:\n            return None\n        elif float(a.replace(',', '.')) > b:\n            return a\n        else:\n            return b\n    elif (isinstance(a, int) or isinstance(a, float)) and isinstance(b, str):\n        if a == float(b.replace(',', '.')):\n            return None\n        elif a > float(b.replace(',', '.')):\n            return a\n        else:\n            return b", "prompt_tokens": 191, "completion_tokens": 231, "duration": 5.473324298858643}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n > 0", "prompt_tokens": 127, "completion_tokens": 27, "duration": 4.382933855056763}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 145, "completion_tokens": 55, "duration": 3.4386022090911865}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result = result[:-1] + \"-\"\n        else:\n            count = 0\n        if count <= 2:\n            result += char.replace(\" \", \"_\")\n    return result", "prompt_tokens": 156, "completion_tokens": 83, "duration": 6.138876914978027}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 111, "duration": 4.064980983734131}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 5.599884748458862}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.6500301361083984}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_denom * n_denom)\n    \n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 66, "duration": 3.246229887008667}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 2.958113431930542}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579')", "prompt_tokens": 169, "completion_tokens": 45, "duration": 3.041900396347046}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 95, "duration": 3.6827476024627686}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    return tuple(planets[start_idx+1:end_idx])", "prompt_tokens": 261, "completion_tokens": 118, "duration": 3.9309396743774414}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 2.871668577194214}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 79, "duration": 3.6156535148620605}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 2.9094841480255127}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 39, "duration": 4.222006320953369}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        return cap - sm\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 327, "completion_tokens": 78, "duration": 3.4004015922546387}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "prompt_tokens": 179, "completion_tokens": 136, "duration": 4.313073396682739}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(num) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(num) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 75, "duration": 3.309821367263794}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 143, "duration": 5.763890743255615}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 158, "completion_tokens": 52, "duration": 2.945464611053467}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique = unique_chars(word)\n        if unique > max_unique or (unique == max_unique and word < max_word):\n            max_unique = unique\n            max_word = word\n\n    return max_word", "prompt_tokens": 170, "completion_tokens": 81, "duration": 3.7312848567962646}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 327, "completion_tokens": 47, "duration": 2.924459218978882}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.416485786437988}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return s.swapcase() if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.482682943344116}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.7385189533233643}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 35, "duration": 2.790235996246338}
