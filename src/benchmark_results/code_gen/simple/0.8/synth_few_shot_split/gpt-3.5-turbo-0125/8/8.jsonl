{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 851, "completion_tokens": 359, "duration": 6.8711934089660645}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = ''\n    open_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            current_group += char\n        elif char == ')':\n            open_count -= 1\n            current_group += char\n            if open_count == 0:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 955, "completion_tokens": 522, "duration": 11.28114628791809}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 756, "completion_tokens": 302, "duration": 10.635491609573364}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 906, "completion_tokens": 405, "duration": 7.693633794784546}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 991, "completion_tokens": 501, "duration": 57.35802936553955}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers, delimiter):\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 807, "completion_tokens": 364, "duration": 10.927922248840332}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    depths.append(max_depth)\n    return depths", "prompt_tokens": 1012, "completion_tokens": 601, "duration": 13.341012239456177}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 794, "completion_tokens": 329, "duration": 8.641777992248535}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 875, "completion_tokens": 422, "duration": 8.902282953262329}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\nfrom collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    deq = deque()\n    result = []\n    \n    for i, num in enumerate(numbers):\n        while deq and numbers[deq[-1]] < num:\n            deq.pop()\n        deq.append(i)\n        \n        if deq[0] == i - len(deq):\n            deq.popleft()\n        \n        result.append(numbers[deq[0]])\n    \n    return result", "prompt_tokens": 1292, "completion_tokens": 896, "duration": 15.741564750671387}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 1334, "completion_tokens": 521, "duration": 10.351515531539917}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))", "prompt_tokens": 800, "completion_tokens": 386, "duration": 8.718681573867798}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 815, "completion_tokens": 331, "duration": 6.500067710876465}
{"task_id": "HumanEval/13", "generated_code": "def least_common_multiple(a: int, b: int) -> int:\n    return (a * b) // greatest_common_divisor(a, b)", "prompt_tokens": 820, "completion_tokens": 410, "duration": 17.316657781600952}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 753, "completion_tokens": 362, "duration": 9.094719648361206}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 745, "completion_tokens": 334, "duration": 8.743422031402588}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 766, "completion_tokens": 340, "duration": 11.308046579360962}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in music_string.split()]", "prompt_tokens": 969, "completion_tokens": 374, "duration": 8.375970602035522}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 817, "completion_tokens": 401, "duration": 7.700183153152466}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: number_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 854, "completion_tokens": 448, "duration": 9.899730682373047}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers):\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i+1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (sorted_numbers[i], sorted_numbers[i+1])\n    return result", "prompt_tokens": 1006, "completion_tokens": 457, "duration": 11.25908637046814}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 891, "completion_tokens": 386, "duration": 7.336031675338745}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 772, "completion_tokens": 316, "duration": 7.198170900344849}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 738, "completion_tokens": 365, "duration": 7.890894889831543}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 772, "completion_tokens": 406, "duration": 7.8553924560546875}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 906, "completion_tokens": 428, "duration": 10.539076328277588}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 760, "completion_tokens": 304, "duration": 6.35553765296936}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 705, "completion_tokens": 335, "duration": 6.327042579650879}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings):\n    return ''.join(strings)", "prompt_tokens": 729, "completion_tokens": 324, "duration": 7.082663536071777}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 780, "completion_tokens": 326, "duration": 8.173586130142212}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 822, "completion_tokens": 316, "duration": 8.563653469085693}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 1060, "completion_tokens": 613, "duration": 13.525569200515747}
{"task_id": "HumanEval/32", "generated_code": "def derivative(xs):\n    return [coeff * i for i, coeff in enumerate(xs)][1:]", "prompt_tokens": 1150, "completion_tokens": 351, "duration": 7.13855504989624}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = sorted([l[i] for i in sorted_indices])\n    result = l.copy()\n    for i, j in zip(sorted_indices, sorted_values):\n        result[i] = j\n    return result", "prompt_tokens": 1010, "completion_tokens": 491, "duration": 10.104620456695557}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 718, "completion_tokens": 284, "duration": 7.7205915451049805}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 718, "completion_tokens": 265, "duration": 10.332626342773438}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    return sum(str(x).count('7') for x in range(n) if x % 11 == 0 or x % 13 == 0)", "prompt_tokens": 794, "completion_tokens": 376, "duration": 7.783440113067627}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else elem for i, elem in enumerate(l)]", "prompt_tokens": 852, "completion_tokens": 343, "duration": 6.771439552307129}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 949, "completion_tokens": 490, "duration": 10.93010950088501}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n    count = 0\n    num = 1\n    while count < n:\n        num = fibonacci(num)\n        if is_prime(num):\n            count += 1\n    return num", "prompt_tokens": 908, "completion_tokens": 569, "duration": 11.290144205093384}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 1466, "completion_tokens": 944, "duration": 21.631107807159424}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 1097, "completion_tokens": 516, "duration": 13.969250440597534}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [num + 1 for num in l]", "prompt_tokens": 809, "completion_tokens": 311, "duration": 10.982622385025024}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1169, "completion_tokens": 587, "duration": 12.311769008636475}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 758, "completion_tokens": 317, "duration": 11.58089017868042}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(base, height):\n    return 0.5 * base * height", "prompt_tokens": 687, "completion_tokens": 312, "duration": 9.233631610870361}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n <= 3:\n        return [0, 0, 2, 0][n]\n    fib_nums = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_nums.append(fib_nums[i-1] + fib_nums[i-2] + fib_nums[i-3] + fib_nums[i-4])\n    return fib_nums[n]", "prompt_tokens": 1145, "completion_tokens": 598, "duration": 12.185139656066895}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "prompt_tokens": 836, "completion_tokens": 449, "duration": 11.179348707199097}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 800, "completion_tokens": 373, "duration": 13.474344491958618}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 899, "completion_tokens": 409, "duration": 10.386179447174072}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 771, "completion_tokens": 368, "duration": 10.726253032684326}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 870, "completion_tokens": 357, "duration": 12.66877031326294}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 794, "completion_tokens": 366, "duration": 7.859089374542236}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 626, "completion_tokens": 235, "duration": 7.257177829742432}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return collections.Counter(s0) == collections.Counter(s1)", "prompt_tokens": 883, "completion_tokens": 328, "duration": 8.141651391983032}
{"task_id": "HumanEval/55", "generated_code": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 818, "completion_tokens": 444, "duration": 14.287124395370483}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 977, "completion_tokens": 553, "duration": 14.853693008422852}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 805, "completion_tokens": 384, "duration": 10.848777770996094}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 841, "completion_tokens": 333, "duration": 11.91413140296936}
{"task_id": "HumanEval/59", "generated_code": "import math\n\ndef largest_prime_factor(n):\n    def smallest_prime_factor(num):\n        for i in range(2, math.isqrt(num) + 1):\n            if num % i == 0:\n                return i\n        return num\n\n    while True:\n        factor = smallest_prime_factor(n)\n        if factor < n:\n            n //= factor\n        else:\n            return n", "prompt_tokens": 874, "completion_tokens": 527, "duration": 11.669894933700562}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 878, "completion_tokens": 407, "duration": 10.796282052993774}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 914, "completion_tokens": 494, "duration": 18.475365161895752}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 920, "completion_tokens": 421, "duration": 15.156645059585571}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 948, "completion_tokens": 415, "duration": 12.148837804794312}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            if i == len(s) - 1 or (i == len(s) - 2 and s[i+1].lower() == 'y'):\n                count += 1\n    return count", "prompt_tokens": 870, "completion_tokens": 395, "duration": 9.64321255683899}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift] if shift > 0 else x_str", "prompt_tokens": 776, "completion_tokens": 349, "duration": 11.250259160995483}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 850, "completion_tokens": 345, "duration": 10.176159381866455}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 1063, "completion_tokens": 375, "duration": 11.685052156448364}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n    min_even = min(even_values)\n    min_even_index = arr.index(min_even)\n    return [min_even, min_even_index]", "prompt_tokens": 1250, "completion_tokens": 387, "duration": 10.109798669815063}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for key, value in freq.items():\n        if value >= key and key > 0:\n            return key\n    return -1", "prompt_tokens": 1001, "completion_tokens": 429, "duration": 13.767662525177002}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 905, "completion_tokens": 396, "duration": 9.890034675598145}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    def is_triangle(a, b, c):\n        return a + b > c and a + c > b and b + c > a\n    \n    if not is_triangle(a, b, c):\n        return -1\n    \n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)", "prompt_tokens": 912, "completion_tokens": 475, "duration": 11.580389499664307}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1119, "completion_tokens": 382, "duration": 13.806324243545532}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "prompt_tokens": 1343, "completion_tokens": 849, "duration": 16.315521001815796}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 1115, "completion_tokens": 512, "duration": 12.481183767318726}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 869, "completion_tokens": 433, "duration": 9.415833473205566}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and x == n ** int(round(math.log(x, n)))", "prompt_tokens": 928, "completion_tokens": 375, "duration": 8.611970663070679}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "prompt_tokens": 859, "completion_tokens": 365, "duration": 8.614374876022339}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1312, "completion_tokens": 471, "duration": 12.190598964691162}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 983, "completion_tokens": 429, "duration": 10.673658847808838}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 896, "completion_tokens": 425, "duration": 12.46565866470337}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1160, "completion_tokens": 561, "duration": 15.950502157211304}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True", "prompt_tokens": 894, "completion_tokens": 490, "duration": 11.520934343338013}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    total_numbers = 9 * 10**(n-1)  # Total number of n-digit positive integers\n    not_start_end_one = 8 * 9**(n-1)  # Number of n-digit positive integers that do not start or end with 1\n    return total_numbers - not_start_end_one", "prompt_tokens": 813, "completion_tokens": 498, "duration": 16.341817617416382}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    total_sum = 0\n    while N > 0:\n        total_sum += N % 10\n        N //= 10\n    return bin(total_sum)[2:]", "prompt_tokens": 922, "completion_tokens": 396, "duration": 11.606637239456177}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum([num for idx, num in enumerate(lst) if idx % 2 != 0 and num % 2 == 0])", "prompt_tokens": 688, "completion_tokens": 311, "duration": 10.523106098175049}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 898, "completion_tokens": 359, "duration": 7.085836172103882}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in sorted(enumerate(row), key=lambda x: x[1], reverse=True):\n            if val == x:\n                coordinates.append((i, j))\n    return coordinates", "prompt_tokens": 1133, "completion_tokens": 374, "duration": 11.672316551208496}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    return sorted(array, reverse=(array[0] + array[-1]) % 2 == 0)", "prompt_tokens": 1088, "completion_tokens": 409, "duration": 9.791760444641113}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        encrypted += chr((ord(char) - 97 + 2*2) % 26 + 97)\n    return encrypted", "prompt_tokens": 856, "completion_tokens": 377, "duration": 8.26621127128601}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(lst)\n    return sorted_lst[1]", "prompt_tokens": 894, "completion_tokens": 378, "duration": 9.648399829864502}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('. ') + S.split('? ') + S.split('! ')\n    return sum(1 for sentence in sentences if sentence.startswith('I'))", "prompt_tokens": 849, "completion_tokens": 373, "duration": 9.522505521774292}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (x == y + z) or (y == x + z) or (z == x + y)", "prompt_tokens": 870, "completion_tokens": 333, "duration": 8.001281261444092}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 892, "completion_tokens": 441, "duration": 12.144607543945312}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sum_of_digits(largest_prime)", "prompt_tokens": 1360, "completion_tokens": 607, "duration": 11.416831016540527}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lower_keys = all(key.islower() for key in dict if isinstance(key, str))\n    upper_keys = all(key.isupper() for key in dict if isinstance(key, str))\n    return lower_keys or upper_keys", "prompt_tokens": 923, "completion_tokens": 345, "duration": 7.863196611404419}
{"task_id": "HumanEval/96", "generated_code": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes", "prompt_tokens": 996, "completion_tokens": 493, "duration": 11.42358684539795}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 872, "completion_tokens": 400, "duration": 9.428557872772217}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in 'AEIOU')", "prompt_tokens": 765, "completion_tokens": 354, "duration": 6.7822582721710205}
{"task_id": "HumanEval/99", "generated_code": "import math\n\ndef closest_integer(value):\n    num = float(value)\n    ceil_val = math.ceil(num)\n    floor_val = math.floor(num)\n    if abs(num - ceil_val) >= abs(num - floor_val):\n        return ceil_val\n    else:\n        return floor_val", "prompt_tokens": 970, "completion_tokens": 415, "duration": 10.779478549957275}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i + 1)\n    return stones", "prompt_tokens": 895, "completion_tokens": 391, "duration": 8.648820161819458}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.findall(r'\\w+', s)", "prompt_tokens": 818, "completion_tokens": 300, "duration": 5.7784199714660645}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "prompt_tokens": 866, "completion_tokens": 428, "duration": 10.912450551986694}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 886, "completion_tokens": 341, "duration": 9.627188205718994}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 831, "completion_tokens": 359, "duration": 8.535396814346313}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9])\n    reversed_arr = filtered_arr[::-1]\n    return [digit_names[num] for num in reversed_arr]", "prompt_tokens": 1162, "completion_tokens": 414, "duration": 10.712818384170532}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "prompt_tokens": 845, "completion_tokens": 380, "duration": 11.40540361404419}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 1091, "completion_tokens": 463, "duration": 9.499792337417603}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 884, "completion_tokens": 379, "duration": 10.59020471572876}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 1318, "completion_tokens": 482, "duration": 11.97461462020874}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 != 0 for x in lst1) <= len(lst2) else \"NO\"", "prompt_tokens": 994, "completion_tokens": 336, "duration": 6.8461785316467285}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    counts = {}\n    for char in test.split():\n        counts[char] = counts.get(char, 0) + 1\n    max_count = max(counts.values(), default=0)\n    return {char: count for char, count in counts.items() if count == max_count}", "prompt_tokens": 994, "completion_tokens": 455, "duration": 12.274015188217163}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(char for char in s if char not in c)\n    return result, result == result[::-1]", "prompt_tokens": 1651, "completion_tokens": 788, "duration": 19.022305250167847}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(d) % 2 != 0 for d in s), i, i, i) for i, s in enumerate(lst, 1)]", "prompt_tokens": 966, "completion_tokens": 378, "duration": 7.7345805168151855}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 987, "completion_tokens": 566, "duration": 13.960083961486816}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    def ceil_division(a, b):\n        return -(-a // b)\n    \n    wells = sum(sum(row) for row in grid)\n    return ceil_division(wells, capacity)\n\n# Test the function with the provided examples\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0", "prompt_tokens": 1583, "completion_tokens": 812, "duration": 16.748914003372192}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 971, "completion_tokens": 354, "duration": 8.342729806900024}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for char in word if char in consonants)\n\n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 1011, "completion_tokens": 422, "duration": 11.040234088897705}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\"", "prompt_tokens": 950, "completion_tokens": 443, "duration": 13.333362102508545}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack and stack[-1] == '(':\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes' if len(stack) == 0 else 'No'", "prompt_tokens": 1317, "completion_tokens": 758, "duration": 16.236987829208374}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1096, "completion_tokens": 379, "duration": 7.932649612426758}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 1028, "completion_tokens": 567, "duration": 12.25050401687622}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "prompt_tokens": 921, "completion_tokens": 393, "duration": 10.80337905883789}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    def collatz_sequence(num):\n        sequence = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = 3 * num + 1\n            sequence.append(num)\n        return sequence\n\n    sequence = collatz_sequence(n)\n    return sorted([num for num in sequence if num % 2 != 0])", "prompt_tokens": 1272, "completion_tokens": 601, "duration": 13.405067682266235}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month = int(parts[0])\n    day = int(parts[1])\n    year = parts[2]\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 1199, "completion_tokens": 546, "duration": 11.032538175582886}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([char for char in txt if char.islower() and ord(char) % 2 != 0])", "prompt_tokens": 893, "completion_tokens": 368, "duration": 12.008761167526245}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] < lst[i+1] for i in range(len(lst)-1) if lst.count(lst[i]) == 1)", "prompt_tokens": 1149, "completion_tokens": 386, "duration": 8.324490308761597}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"", "prompt_tokens": 1262, "completion_tokens": 532, "duration": 13.408746480941772}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            sum_magnitudes += num\n        elif num < 0:\n            product *= -1\n            sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "prompt_tokens": 957, "completion_tokens": 494, "duration": 10.34912657737732}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    visited = set()\n    path = []\n\n    def dfs(i, j, steps):\n        if steps == k:\n            path.append(grid[i][j])\n            return True\n\n        visited.add((i, j))\n        for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                if dfs(ni, nj, steps + 1):\n                    return True\n\n        visited.remove((i, j))\n        return False\n\n    for i in range(n):\n        for j in range(n):\n            if dfs(i, j, 1):\n                return path", "prompt_tokens": 1998, "completion_tokens": 1088, "duration": 20.503517389297485}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tribonacci = [0, 1, 3]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i+1])\n        return tribonacci", "prompt_tokens": 1131, "completion_tokens": 474, "duration": 14.471335887908936}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd_digit = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd_digit = True\n        n //= 10\n    return product if has_odd_digit else 0", "prompt_tokens": 811, "completion_tokens": 439, "duration": 7.843192100524902}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < len(string) - 1", "prompt_tokens": 1043, "completion_tokens": 528, "duration": 14.492577075958252}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 978, "completion_tokens": 385, "duration": 9.817651987075806}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt.strip() == '':\n        return False\n    return txt.strip()[-1].isalpha() and (len(txt.split()[-1]) == 1)\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))  # \u279e False", "prompt_tokens": 869, "completion_tokens": 414, "duration": 9.035698413848877}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 925, "completion_tokens": 467, "duration": 11.411434412002563}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 850, "completion_tokens": 359, "duration": 10.909229755401611}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str):\n        a_val = float(a.replace(',', '.'))\n    else:\n        a_val = a\n\n    if isinstance(b, str):\n        b_val = float(b.replace(',', '.'))\n    else:\n        b_val = b\n\n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None", "prompt_tokens": 1067, "completion_tokens": 574, "duration": 11.060140371322632}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for a in range(1, n//2 + 1, 2):\n        for b in range(1, n//2 + 1, 2):\n            for c in range(1, n//2 + 1, 2):\n                d = n - a - b - c\n                if d % 2 == 0 and d >= 2:\n                    return True\n    return False", "prompt_tokens": 862, "completion_tokens": 503, "duration": 15.208364963531494}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)", "prompt_tokens": 858, "completion_tokens": 401, "duration": 13.491294860839844}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result[:-2] + '-'\n        else:\n            if consecutive_spaces > 2:\n                result += '-'\n            elif consecutive_spaces > 0:\n                result += '_'\n            result += char\n            consecutive_spaces = 0\n    if consecutive_spaces > 2:\n        result = result[:-2] + '-'\n    elif consecutive_spaces > 0:\n        result += '_'\n    return result", "prompt_tokens": 813, "completion_tokens": 430, "duration": 10.412091493606567}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3:\n        return 'No'\n    \n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name_parts = file_name.split('.')\n    if len(name_parts) != 2 or not name_parts[0] or not name_parts[0][0].isalpha():\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if name_parts[1] not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1052, "completion_tokens": 454, "duration": 10.871078729629517}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1107, "completion_tokens": 539, "duration": 11.037880420684814}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    def is_prime_length(word):\n        return is_prime(len(word))\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime_length(word)]\n    return ' '.join(prime_words)", "prompt_tokens": 1000, "completion_tokens": 509, "duration": 12.600175142288208}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    common_divisor = gcd(x_num * n_den, x_den * n_num)\n\n    return x_num * n_den // common_divisor == 1 and x_den * n_num // common_divisor == 1", "prompt_tokens": 993, "completion_tokens": 489, "duration": 10.29148554801941}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 833, "completion_tokens": 329, "duration": 7.211903095245361}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579')", "prompt_tokens": 813, "completion_tokens": 315, "duration": 6.834018707275391}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1169, "completion_tokens": 633, "duration": 15.274942874908447}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    return tuple(p for p in planets[start_idx+1:end_idx] if p != planet1 and p != planet2)", "prompt_tokens": 1038, "completion_tokens": 443, "duration": 9.935952425003052}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    return sorted(filter(lambda x: len(x) % 2 == 0, lst), key=lambda x: (len(x), x))", "prompt_tokens": 1070, "completion_tokens": 429, "duration": 9.071087121963501}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 871, "completion_tokens": 478, "duration": 12.355926275253296}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum((x**2) for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 950, "completion_tokens": 412, "duration": 7.4071900844573975}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 1225, "completion_tokens": 488, "duration": 10.132096767425537}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 1213, "completion_tokens": 430, "duration": 9.061679363250732}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    return b in a + a", "prompt_tokens": 977, "completion_tokens": 447, "duration": 10.229871988296509}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 789, "completion_tokens": 425, "duration": 8.529993772506714}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_dict = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    result = ''\n    for val in values:\n        while number >= val:\n            result += roman_dict[val]\n            number -= val\n    return result", "prompt_tokens": 915, "completion_tokens": 578, "duration": 14.263728618621826}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 927, "completion_tokens": 454, "duration": 9.930677652359009}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique_count = 0\n    max_unique_word = ''\n    \n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n        \n        if unique_count > max_unique_count or (unique_count == max_unique_count and word < max_unique_word):\n            max_unique_count = unique_count\n            max_unique_word = word\n    \n    return max_unique_word", "prompt_tokens": 920, "completion_tokens": 465, "duration": 8.178714513778687}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 1115, "completion_tokens": 307, "duration": 8.63957953453064}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1082, "completion_tokens": 480, "duration": 9.588919401168823}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    has_letter = any(char.isalpha() for char in s)\n    if not has_letter:\n        return s[::-1]\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result", "prompt_tokens": 865, "completion_tokens": 415, "duration": 10.077384948730469}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 784, "completion_tokens": 360, "duration": 13.079236268997192}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if any(int(digit) % 2 == 0 for digit in str(num))]", "prompt_tokens": 818, "completion_tokens": 349, "duration": 7.623208999633789}
