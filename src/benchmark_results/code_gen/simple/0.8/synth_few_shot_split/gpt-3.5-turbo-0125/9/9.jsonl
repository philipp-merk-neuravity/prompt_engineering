{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 808, "completion_tokens": 316, "duration": 7.508431911468506}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current_group += char\n        elif char == ')':\n            count -= 1\n            current_group += char\n            if count == 0:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 966, "completion_tokens": 529, "duration": 11.341079235076904}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 744, "completion_tokens": 290, "duration": 9.528671264648438}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 948, "completion_tokens": 458, "duration": 8.556697368621826}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 933, "completion_tokens": 443, "duration": 8.72779130935669}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers, delimiter):\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 909, "completion_tokens": 470, "duration": 10.741281509399414}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            depths.append(current_depth)\n        elif char == ')':\n            current_depth -= 1\n    return depths", "prompt_tokens": 1018, "completion_tokens": 562, "duration": 11.477927446365356}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 790, "completion_tokens": 325, "duration": 6.521394729614258}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return total_sum, total_product", "prompt_tokens": 886, "completion_tokens": 433, "duration": 8.57357382774353}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef sliding_window_min(nums: List[int], k: int) -> List[int]:\n    result = []\n    window = deque()\n    for i, num in enumerate(nums):\n        while window and nums[window[-1]] >= num:\n            window.pop()\n        window.append(i)\n        if i - window[0] >= k:\n            window.popleft()\n        if i >= k - 1:\n            result.append(nums[window[0]])\n    return result", "prompt_tokens": 979, "completion_tokens": 578, "duration": 10.928388833999634}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 1359, "completion_tokens": 546, "duration": 13.256227970123291}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 803, "completion_tokens": 386, "duration": 9.31389570236206}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 890, "completion_tokens": 434, "duration": 9.585724115371704}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 820, "completion_tokens": 414, "duration": 7.969781160354614}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 794, "completion_tokens": 406, "duration": 9.588745832443237}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 724, "completion_tokens": 313, "duration": 8.627822875976562}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 726, "completion_tokens": 304, "duration": 6.8016297817230225}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    legend = {'o': 4, 'o|': 2, '.|': 1}\n    return [legend[note] for note in music_string.split()]", "prompt_tokens": 969, "completion_tokens": 373, "duration": 7.1922032833099365}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 854, "completion_tokens": 438, "duration": 10.352912902832031}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 851, "completion_tokens": 445, "duration": 8.579654932022095}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "prompt_tokens": 1032, "completion_tokens": 476, "duration": 12.66709566116333}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 921, "completion_tokens": 416, "duration": 9.586838006973267}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "prompt_tokens": 817, "completion_tokens": 361, "duration": 9.46724796295166}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 733, "completion_tokens": 360, "duration": 9.009237289428711}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 768, "completion_tokens": 408, "duration": 9.55668306350708}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 950, "completion_tokens": 472, "duration": 10.295997858047485}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "prompt_tokens": 853, "completion_tokens": 425, "duration": 11.488817691802979}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 719, "completion_tokens": 353, "duration": 8.383662462234497}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings):\n    return ''.join(strings)", "prompt_tokens": 717, "completion_tokens": 312, "duration": 7.405316591262817}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 801, "completion_tokens": 347, "duration": 7.33909273147583}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 823, "completion_tokens": 317, "duration": 6.205419301986694}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 1044, "completion_tokens": 598, "duration": 10.65451192855835}
{"task_id": "HumanEval/32", "generated_code": "def find_all_roots(xs):\n    roots = []\n    # Implement root finding algorithm here\n    return roots", "prompt_tokens": 1135, "completion_tokens": 339, "duration": 7.829857110977173}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in sorted_indices]\n    sorted_values.sort()\n    result = l.copy()\n    for i, val in zip(sorted_indices, sorted_values):\n        result[i] = val\n    return result", "prompt_tokens": 1009, "completion_tokens": 486, "duration": 9.745651960372925}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 720, "completion_tokens": 282, "duration": 6.384208917617798}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 717, "completion_tokens": 264, "duration": 5.452811241149902}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "prompt_tokens": 835, "completion_tokens": 417, "duration": 9.288126945495605}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    sorted_even_indices = sorted(l[::2])\n    result = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(sorted_even_indices[even_index])\n            even_index += 1\n        else:\n            result.append(l[i])\n    return result", "prompt_tokens": 954, "completion_tokens": 479, "duration": 11.482224225997925}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 936, "completion_tokens": 477, "duration": 12.051895380020142}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\ndef next_prime(n):\n    prime = n + 1\n    while True:\n        if is_prime(prime):\n            return prime\n        prime += 1\n\ndef prime_fib(n):\n    count = 0\n    i = 1\n    while count < n:\n        i = next_prime(i)\n        if is_prime(fibonacci(i)):\n            count += 1\n    return fibonacci(i)", "prompt_tokens": 921, "completion_tokens": 618, "duration": 12.110376358032227}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 1228, "completion_tokens": 701, "duration": 12.395028591156006}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 915, "completion_tokens": 334, "duration": 7.5506486892700195}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 773, "completion_tokens": 275, "duration": 7.348972797393799}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1169, "completion_tokens": 587, "duration": 14.00358271598816}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 758, "completion_tokens": 317, "duration": 9.851993083953857}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 671, "completion_tokens": 291, "duration": 9.108330488204956}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_nums = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_nums.append(fib_nums[i-1] + fib_nums[i-2] + fib_nums[i-3] + fib_nums[i-4])\n    \n    return fib_nums[n]", "prompt_tokens": 1091, "completion_tokens": 570, "duration": 13.568592548370361}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "prompt_tokens": 807, "completion_tokens": 420, "duration": 10.152616024017334}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 799, "completion_tokens": 372, "duration": 8.479614973068237}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 1040, "completion_tokens": 550, "duration": 12.106942415237427}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 813, "completion_tokens": 410, "duration": 16.011409521102905}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 874, "completion_tokens": 361, "duration": 10.872055530548096}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 778, "completion_tokens": 350, "duration": 10.408432006835938}
{"task_id": "HumanEval/53", "generated_code": "def add(x, y):\n    return x + y", "prompt_tokens": 645, "completion_tokens": 250, "duration": 7.308928728103638}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return collections.Counter(s0) == collections.Counter(s1)", "prompt_tokens": 896, "completion_tokens": 337, "duration": 11.196032524108887}
{"task_id": "HumanEval/55", "generated_code": "def fib(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b", "prompt_tokens": 872, "completion_tokens": 520, "duration": 14.514549255371094}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 983, "completion_tokens": 558, "duration": 10.80311369895935}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing", "prompt_tokens": 834, "completion_tokens": 422, "duration": 12.780265808105469}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 843, "completion_tokens": 335, "duration": 13.475258827209473}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 944, "completion_tokens": 616, "duration": 14.483024597167969}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 869, "completion_tokens": 398, "duration": 8.535398483276367}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return len(stack) == 0", "prompt_tokens": 884, "completion_tokens": 462, "duration": 11.481714963912964}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result", "prompt_tokens": 907, "completion_tokens": 422, "duration": 8.946582555770874}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 973, "completion_tokens": 440, "duration": 16.223154067993164}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    return sum(1 for char in s if char.lower() in 'aeiouy' or (char.lower() == 'y' and s.index(char) == len(s) - 1))", "prompt_tokens": 855, "completion_tokens": 348, "duration": 10.262531757354736}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift <= len(x_str) else x_str[::-1]", "prompt_tokens": 754, "completion_tokens": 351, "duration": 9.59687066078186}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 849, "completion_tokens": 344, "duration": 11.600373983383179}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[3])\n    return n - apples - oranges", "prompt_tokens": 1035, "completion_tokens": 349, "duration": 9.155488967895508}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest = float('inf')\n    smallest_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest:\n            smallest = arr[i]\n            smallest_index = i\n    if smallest_index != -1:\n        return [smallest, smallest_index]\n    else:\n        return []", "prompt_tokens": 1306, "completion_tokens": 461, "duration": 13.358894109725952}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for num, f in freq.items():\n        if num > 0 and f >= num:\n            return num\n    return -1", "prompt_tokens": 938, "completion_tokens": 366, "duration": 8.243369102478027}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 829, "completion_tokens": 320, "duration": 7.224690914154053}
{"task_id": "HumanEval/71", "generated_code": "import math\ndef triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2) if a + b > c and a + c > b and b + c > a else -1", "prompt_tokens": 906, "completion_tokens": 443, "duration": 15.236502408981323}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1159, "completion_tokens": 422, "duration": 9.272243022918701}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "prompt_tokens": 1428, "completion_tokens": 941, "duration": 21.519017457962036}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1002, "completion_tokens": 382, "duration": 8.464812278747559}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, 100):\n        if is_prime(i) and a % i == 0:\n            count += 1\n            if count == 3:\n                return True\n    return False", "prompt_tokens": 894, "completion_tokens": 541, "duration": 11.468770503997803}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    while x % n == 0:\n        x /= n\n    return x == 1", "prompt_tokens": 939, "completion_tokens": 383, "duration": 9.274637699127197}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    cube_root = round(a**(1/3))\n    return cube_root**3 == a", "prompt_tokens": 856, "completion_tokens": 363, "duration": 9.746543645858765}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    def is_prime_digit(digit):\n        primes = ['2', '3', '5', '7', 'B', 'D']\n        return digit in primes\n\n    count = 0\n    for digit in num:\n        if is_prime_digit(digit):\n            count += 1\n    return count", "prompt_tokens": 1292, "completion_tokens": 463, "duration": 10.336457252502441}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'", "prompt_tokens": 1003, "completion_tokens": 472, "duration": 11.483490705490112}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 980, "completion_tokens": 490, "duration": 13.291396379470825}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1343, "completion_tokens": 744, "duration": 15.80647349357605}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 1074, "completion_tokens": 676, "duration": 16.19625735282898}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 853, "completion_tokens": 524, "duration": 16.047837018966675}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    total = 0\n    while N > 0:\n        total += N % 10\n        N //= 10\n    return bin(total)[2:]", "prompt_tokens": 892, "completion_tokens": 363, "duration": 11.95514965057373}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 703, "completion_tokens": 326, "duration": 10.230846405029297}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "prompt_tokens": 862, "completion_tokens": 323, "duration": 7.528458833694458}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    return sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))", "prompt_tokens": 1104, "completion_tokens": 347, "duration": 8.493138790130615}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    return sorted(array, reverse=(array[0] + array[-1]) % 2 == 0)", "prompt_tokens": 1195, "completion_tokens": 516, "duration": 12.844568729400635}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr((ord(c) + 2) % 256) for c in s)", "prompt_tokens": 853, "completion_tokens": 358, "duration": 7.006504535675049}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 889, "completion_tokens": 388, "duration": 8.536229372024536}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = [sentence.strip() for sentence in re.split(r'[.!?]', S) if sentence.strip()]\n    return sum(1 for sentence in sentences if sentence.startswith('I'))", "prompt_tokens": 864, "completion_tokens": 393, "duration": 10.687363386154175}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 910, "completion_tokens": 368, "duration": 6.766401767730713}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiou'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a')).upper()\n            else:\n                if char.isupper():\n                    encoded_message += char.lower()\n                else:\n                    encoded_message += char.upper()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 919, "completion_tokens": 505, "duration": 14.26923131942749}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n    \n    largest_prime_sum = 0\n    for num in lst:\n        if is_prime(num):\n            if num > largest_prime_sum:\n                largest_prime_sum = digit_sum(num)\n    \n    return largest_prime_sum", "prompt_tokens": 1488, "completion_tokens": 741, "duration": 15.35661244392395}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lower_case_keys = all(key.islower() for key in dict.keys())\n    upper_case_keys = all(key.isupper() for key in dict.keys())\n    return lower_case_keys or upper_case_keys", "prompt_tokens": 918, "completion_tokens": 336, "duration": 6.6154186725616455}
{"task_id": "HumanEval/96", "generated_code": "import math\n\ndef count_up_to(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 1101, "completion_tokens": 593, "duration": 13.98250675201416}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "prompt_tokens": 790, "completion_tokens": 314, "duration": 7.550580263137817}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if char in 'AEIOU' and i % 2 == 0)", "prompt_tokens": 827, "completion_tokens": 417, "duration": 8.339300632476807}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)", "prompt_tokens": 1044, "completion_tokens": 466, "duration": 11.37371301651001}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i + 1)\n    return stones", "prompt_tokens": 887, "completion_tokens": 383, "duration": 9.3002290725708}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "prompt_tokens": 826, "completion_tokens": 314, "duration": 7.077269554138184}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "prompt_tokens": 878, "completion_tokens": 440, "duration": 9.658960103988647}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(round(avg))[2:]", "prompt_tokens": 962, "completion_tokens": 419, "duration": 10.05098009109497}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 1082, "completion_tokens": 397, "duration": 7.513115882873535}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    filtered_arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    reversed_arr = filtered_arr[::-1]\n    \n    return [num_to_name[num] for num in reversed_arr]", "prompt_tokens": 1196, "completion_tokens": 463, "duration": 10.871374130249023}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(i * (i + 1) // 2)\n    return result", "prompt_tokens": 881, "completion_tokens": 413, "duration": 11.255556344985962}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 1075, "completion_tokens": 447, "duration": 10.086610794067383}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count", "prompt_tokens": 964, "completion_tokens": 474, "duration": 10.63123869895935}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    n = len(arr)\n    sorted_arr = sorted(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 1348, "completion_tokens": 503, "duration": 11.976234197616577}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= len(lst2) else \"NO\"", "prompt_tokens": 984, "completion_tokens": 326, "duration": 7.599989891052246}
{"task_id": "HumanEval/111", "generated_code": "from collections import Counter\n\ndef histogram(test):\n    letters = test.split()\n    letter_counts = Counter(letters)\n    max_count = max(letter_counts.values())\n    most_repeated_letters = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    return most_repeated_letters", "prompt_tokens": 983, "completion_tokens": 444, "duration": 12.064434051513672}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    s = ''.join(char for char in s if char not in c)\n    return s, s == s[::-1]", "prompt_tokens": 1042, "completion_tokens": 450, "duration": 9.193943977355957}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{s}ng {s} of the {s}nput.\" for s in lst]", "prompt_tokens": 963, "completion_tokens": 370, "duration": 7.182767152786255}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 1012, "completion_tokens": 591, "duration": 13.09506869316101}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_lowerings = 0\n    for row in grid:\n        for well in row:\n            if well == 1:\n                total_lowerings += math.ceil(1 / capacity)\n    return total_lowerings", "prompt_tokens": 1677, "completion_tokens": 782, "duration": 19.45502519607544}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 984, "completion_tokens": 367, "duration": 6.987736463546753}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for char in word if char in consonants)\n\n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 954, "completion_tokens": 365, "duration": 7.805755615234375}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 982, "completion_tokens": 477, "duration": 10.907137632369995}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack or stack[-1] != '(':\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 1019, "completion_tokens": 455, "duration": 8.669493436813354}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1099, "completion_tokens": 382, "duration": 7.363409042358398}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 1004, "completion_tokens": 543, "duration": 9.511814594268799}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) <= 99)", "prompt_tokens": 1033, "completion_tokens": 505, "duration": 10.181148052215576}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    def collatz(num):\n        if num == 1:\n            return [1]\n        elif num % 2 == 0:\n            return [num] + collatz(num // 2)\n        else:\n            return [num] + collatz(3 * num + 1)\n\n    return sorted([x for x in collatz(n) if x % 2 != 0])", "prompt_tokens": 1223, "completion_tokens": 548, "duration": 10.413949012756348}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 1173, "completion_tokens": 520, "duration": 9.77882719039917}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 915, "completion_tokens": 390, "duration": 7.015155553817749}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] < lst[i+1] for i in range(len(lst)-1)) and len(set(lst)) == len(lst)", "prompt_tokens": 1172, "completion_tokens": 408, "duration": 7.814655542373657}
{"task_id": "HumanEval/127", "generated_code": "import math\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True", "prompt_tokens": 1267, "completion_tokens": 584, "duration": 12.10741662979126}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n            magnitude_sum += abs(num)\n        elif num < 0:\n            sign_product *= -1\n            magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "prompt_tokens": 1095, "completion_tokens": 635, "duration": 12.115297555923462}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def dfs(row, col, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for dr, dc in directions:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < n and 0 <= new_col < n:\n                new_path = dfs(new_row, new_col, path + [grid[new_row][new_col]])\n                if new_path is not None:\n                    if min_path is None or new_path < min_path:\n                        min_path = new_path\n        \n        return min_path\n    \n    return dfs(0, 0, [grid[0][0]])", "prompt_tokens": 1927, "completion_tokens": 1013, "duration": 18.94150400161743}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    else:\n        trib = [0, 1, 3]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                trib.append(1 + i // 2)\n            else:\n                trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])\n        return trib", "prompt_tokens": 1114, "completion_tokens": 454, "duration": 10.142769575119019}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    return 0 if all(int(d) % 2 == 0 for d in str(n)) else 1 if any(int(d) % 2 != 0 for d in str(n)) else 0", "prompt_tokens": 746, "completion_tokens": 352, "duration": 6.58111047744751}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    return len(stack) < len(string) and len(stack) > 0", "prompt_tokens": 1140, "completion_tokens": 636, "duration": 15.445850849151611}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 899, "completion_tokens": 306, "duration": 6.075668811798096}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and (len(txt.strip()) == 1 or txt.strip()[-2] == ' ')", "prompt_tokens": 882, "completion_tokens": 347, "duration": 8.220362901687622}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 787, "completion_tokens": 329, "duration": 7.012073993682861}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [num for num in lst if num < 0]\n    pos_ints = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_ints) if neg_ints else None\n    smallest_pos = min(pos_ints) if pos_ints else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 857, "completion_tokens": 366, "duration": 8.342597484588623}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    else:\n        return a if type(a) == str else b", "prompt_tokens": 858, "completion_tokens": 333, "duration": 7.208096265792847}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1, 2):\n        for j in range(i, n//2 + 1, 2):\n            for k in range(j, n//2 + 1, 2):\n                for l in range(k, n//2 + 1, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False", "prompt_tokens": 914, "completion_tokens": 556, "duration": 11.498579025268555}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    return n * special_factorial(n-1) * special_factorial(n-1)", "prompt_tokens": 846, "completion_tokens": 392, "duration": 9.127095937728882}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n        else:\n            if consecutive_spaces > 2:\n                result.append('-')\n            elif consecutive_spaces > 0:\n                result.append('_')\n            result.append(char)\n            consecutive_spaces = 0\n    if consecutive_spaces > 2:\n        result.append('-')\n    elif consecutive_spaces > 0:\n        result.append('_')\n    return ''.join(result)", "prompt_tokens": 796, "completion_tokens": 405, "duration": 10.343219518661499}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name_parts = file_name.split('.')\n    if len(name_parts) != 2:\n        return 'No'\n    if not name_parts[0] or not name_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in name_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1059, "completion_tokens": 455, "duration": 9.482669115066528}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 939, "completion_tokens": 340, "duration": 7.652362108230591}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    def count_primes(n):\n        count = 0\n        for i in range(2, n + 1):\n            if is_prime(i):\n                count += 1\n        return count\n\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)", "prompt_tokens": 900, "completion_tokens": 433, "duration": 9.264902830123901}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    return (num_x * num_n) % (den_x * den_n) == 0", "prompt_tokens": 1024, "completion_tokens": 468, "duration": 9.73322868347168}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 857, "completion_tokens": 370, "duration": 11.086964130401611}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd_digit(n):\n        n_str = str(abs(n))\n        return int(n_str[0]) % 2 != 0 and int(n_str[-1]) % 2 != 0\n\n    return sum(1 for num in nums if num > 10 and is_odd_digit(num))", "prompt_tokens": 894, "completion_tokens": 423, "duration": 9.320412874221802}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    arr = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1171, "completion_tokens": 638, "duration": 13.261197328567505}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    return tuple(p for p in planets if start_idx < planets.index(p) < end_idx)", "prompt_tokens": 1037, "completion_tokens": 436, "duration": 8.889384746551514}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 1043, "completion_tokens": 394, "duration": 11.231298208236694}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 871, "completion_tokens": 428, "duration": 12.562411069869995}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 874, "completion_tokens": 334, "duration": 8.656741857528687}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(s - g) if s != g else 0 for s, g in zip(game, guess)]", "prompt_tokens": 1111, "completion_tokens": 381, "duration": 10.150108575820923}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return extension.count('A') + extension.count('B') + extension.count('C') - extension.count('a') - extension.count('b') - extension.count('c')\n    \n    strongest = max(extensions, key=lambda x: (strength(x), extensions.index(x)))\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 1190, "completion_tokens": 417, "duration": 8.591015815734863}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 902, "completion_tokens": 360, "duration": 11.541618824005127}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 790, "completion_tokens": 426, "duration": 9.305896282196045}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 982, "completion_tokens": 604, "duration": 12.883358478546143}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 1011, "completion_tokens": 542, "duration": 14.57817268371582}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    max_word = ''\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n\n    return max_word", "prompt_tokens": 912, "completion_tokens": 458, "duration": 11.643036127090454}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    return [number + need, max(0, remaining - need)]", "prompt_tokens": 1233, "completion_tokens": 401, "duration": 7.206060886383057}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1072, "completion_tokens": 470, "duration": 12.045027256011963}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)[::-1] if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 881, "completion_tokens": 417, "duration": 8.185272216796875}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "prompt_tokens": 762, "completion_tokens": 347, "duration": 8.81000304222107}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [int(digit) for digit in range(a, b+1) if int(digit) % 2 == 0]", "prompt_tokens": 810, "completion_tokens": 338, "duration": 5.841184854507446}
