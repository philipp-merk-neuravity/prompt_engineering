{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    result = False\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                result = True\n                break\n        if result:\n            break\n    return result", "prompt_tokens": 636, "completion_tokens": 210, "duration": 6.376991271972656}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    separate_groups = []\n    current_group = \"\"\n    balance = 0\n\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n            current_group += char\n        elif char == ')':\n            balance -= 1\n            current_group += char\n\n        if balance == 0 and current_group:\n            separate_groups.append(current_group)\n            current_group = \"\"\n\n    return separate_groups", "prompt_tokens": 651, "completion_tokens": 269, "duration": 7.909946918487549}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 3.557555913925171}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 569, "completion_tokens": 123, "duration": 4.493557691574097}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 642, "completion_tokens": 201, "duration": 7.6919920444488525}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 528, "completion_tokens": 147, "duration": 6.96806001663208}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 680, "completion_tokens": 305, "duration": 8.153812646865845}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 4.7216668128967285}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum = 0\n    product = 1\n\n    for number in numbers:\n        sum += number\n        product *= number\n\n    return (sum, product)", "prompt_tokens": 550, "completion_tokens": 144, "duration": 4.407012462615967}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\nfrom collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    max_deque = deque()\n\n    for number in numbers:\n        while max_deque and max_deque[-1] < number:\n            max_deque.pop()\n        \n        max_deque.append(number)\n        rolling_max_list.append(max_deque[0])\n\n    return rolling_max_list", "prompt_tokens": 565, "completion_tokens": 195, "duration": 5.365058422088623}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 626, "completion_tokens": 105, "duration": 6.677182912826538}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 510, "completion_tokens": 155, "duration": 5.553218841552734}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str) or (len(string) == len(longest_str) and string < longest_str):\n            longest_str = string\n\n    return longest_str", "prompt_tokens": 561, "completion_tokens": 180, "duration": 5.445969581604004}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 94, "duration": 4.6642842292785645}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    prefix = ''\n    for ch in string:\n        prefix += ch\n        prefixes.append(prefix)\n    return prefixes", "prompt_tokens": 462, "completion_tokens": 132, "duration": 3.907388925552368}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 458, "completion_tokens": 109, "duration": 4.122391700744629}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 485, "completion_tokens": 131, "duration": 4.607311487197876}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats_list = []\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 726, "completion_tokens": 209, "duration": 5.349542140960693}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 143, "duration": 4.123765468597412}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    numeral_values = [numeral_dict[num] for num in numeral_list]\n    sorted_numerals = [key for key, value in sorted(numeral_dict.items(), key=lambda item: item[1]) if value in numeral_values]\n    return ' '.join(sorted_numerals)", "prompt_tokens": 578, "completion_tokens": 254, "duration": 5.953656435012817}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 716, "completion_tokens": 224, "duration": 10.924373388290405}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(num - min_value) / range_value for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 621, "completion_tokens": 187, "duration": 4.838588237762451}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers", "prompt_tokens": 498, "completion_tokens": 105, "duration": 7.606402635574341}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for ch in string:\n        length = length + 1\n    return length", "prompt_tokens": 442, "completion_tokens": 132, "duration": 3.9332540035247803}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 438, "completion_tokens": 127, "duration": 4.673597812652588}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 611, "completion_tokens": 168, "duration": 5.850026369094849}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    count = {}\n\n    for number in numbers:\n        if number not in count:\n            count[number] = 1\n        else:\n            count[number] += 1\n\n    for number in numbers:\n        if count[number] == 1:\n            result.append(number)\n\n    return result", "prompt_tokens": 518, "completion_tokens": 174, "duration": 4.415703058242798}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 141, "duration": 4.468891382217407}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 427, "completion_tokens": 93, "duration": 6.336193084716797}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 7.529408931732178}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    positive_nums = [num for num in l if num > 0]\n    return positive_nums", "prompt_tokens": 533, "completion_tokens": 78, "duration": 3.494612693786621}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 520, "completion_tokens": 118, "duration": 3.761273145675659}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        return \"Error: List must have an even number of coefficients\"\n    \n    max_coeff_index = max(range(len(xs)), key=lambda i: abs(xs[i]))\n    degree = max_coeff_index\n    \n    def poly(x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n    \n    zero_point = round(next(x for x in range(-1000, 1000) if abs(poly(x)) < 0.0001), 2)\n    \n    return zero_point", "prompt_tokens": 885, "completion_tokens": 238, "duration": 5.448017120361328}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    for i, val in enumerate(l):\n        if i % 3 == 0:\n            result.append(sorted(l[i]))\n        else:\n            result.append(val)\n    return result", "prompt_tokens": 653, "completion_tokens": 146, "duration": 4.138951778411865}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n\n    unique_list.sort()\n    return unique_list", "prompt_tokens": 460, "completion_tokens": 98, "duration": 7.22820782661438}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 534, "completion_tokens": 152, "duration": 3.613391637802124}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 526, "completion_tokens": 172, "duration": 6.089594841003418}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            temp.append(v)\n    temp.sort()\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.append(temp[0])\n            temp = temp[1:]\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 641, "completion_tokens": 227, "duration": 6.187095880508423}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 669, "completion_tokens": 176, "duration": 6.0708677768707275}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_list = [0, 1]\n    count = 2\n    num = 0\n\n    while count < n:\n        next_fib = fib_list[-1] + fib_list[-2]\n        fib_list.append(next_fib)\n        count += 1\n\n    for number in fib_list[::-1]:\n        if is_prime(number):\n            num = number\n            break\n\n    return num", "prompt_tokens": 575, "completion_tokens": 270, "duration": 5.2032952308654785}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 739, "completion_tokens": 266, "duration": 5.413661956787109}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return (n * n) // 2", "prompt_tokens": 637, "completion_tokens": 97, "duration": 9.62145185470581}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    new_list = []\n    for num in l:\n        new_num = num + 1\n        new_list.append(new_num)\n    return new_list", "prompt_tokens": 533, "completion_tokens": 99, "duration": 3.5735726356506348}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_numbers = set()\n    for num in l:\n        if -num in seen_numbers:\n            return True\n        seen_numbers.add(num)\n    return False", "prompt_tokens": 658, "completion_tokens": 128, "duration": 2.869791030883789}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 541, "completion_tokens": 144, "duration": 4.924888610839844}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 394, "completion_tokens": 63, "duration": 21.940230131149292}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        next_element = sum(fib4_list)\n        fib4_list.pop(0)\n        fib4_list.append(next_element)\n    return fib4_list[-1]", "prompt_tokens": 730, "completion_tokens": 216, "duration": 7.133304119110107}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 != 0:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 493, "completion_tokens": 146, "duration": 11.836814165115356}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 500, "completion_tokens": 124, "duration": 4.882314205169678}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 500, "completion_tokens": 54, "duration": 4.032924652099609}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 597, "completion_tokens": 238, "duration": 7.592600107192993}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 570, "completion_tokens": 107, "duration": 4.19210958480835}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 471, "completion_tokens": 82, "duration": 2.7796881198883057}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    result = x + y\n    return result", "prompt_tokens": 398, "completion_tokens": 51, "duration": 2.1987531185150146}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    char_count = {}\n    for ch in s0:\n        if ch not in char_count:\n            char_count[ch] = 1\n        else:\n            char_count[ch] += 1\n\n    for ch in s1:\n        if ch not in char_count or char_count[ch] == 0:\n            return False\n        char_count[ch] -= 1\n\n    return all(value == 0 for value in char_count.values())", "prompt_tokens": 736, "completion_tokens": 307, "duration": 8.129437446594238}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    result = 0\n\n    for i in range(2, n+1):\n        result = a + b\n        a, b = b, result\n\n    return result", "prompt_tokens": 450, "completion_tokens": 168, "duration": 4.316298007965088}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "prompt_tokens": 559, "completion_tokens": 179, "duration": 6.797789812088013}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 497, "completion_tokens": 120, "duration": 3.4064807891845703}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for e in l1:\n        if e in l2 and e not in common_elements:\n            common_elements.append(e)\n    return sorted(common_elements)", "prompt_tokens": 580, "completion_tokens": 144, "duration": 5.222197532653809}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            n //= i\n            largest_prime_factor = i\n        else:\n            i += 1\n    return largest_prime_factor", "prompt_tokens": 489, "completion_tokens": 171, "duration": 5.657769680023193}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 5.563994884490967}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 543, "completion_tokens": 168, "duration": 3.9105448722839355}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))\nprint(derivative([1, 2, 3]))", "prompt_tokens": 532, "completion_tokens": 118, "duration": 3.64492130279541}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        next_fibfib = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(next_fibfib)\n\n    return fibfib_list[n]", "prompt_tokens": 682, "completion_tokens": 243, "duration": 8.62964391708374}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"python\"))  # 1", "prompt_tokens": 606, "completion_tokens": 238, "duration": 5.887240409851074}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift > length:\n        shift = shift % length\n    if shift == 0:\n        return x_str\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str", "prompt_tokens": 544, "completion_tokens": 189, "duration": 4.406188011169434}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 536, "completion_tokens": 75, "duration": 3.741593360900879}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 836, "completion_tokens": 194, "duration": 4.560436010360718}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even_value:\n            smallest_even_value = node\n            smallest_even_index = i\n        elif node % 2 == 0 and node == smallest_even_value:\n            smallest_even_index = min(smallest_even_index, i)\n    \n    if smallest_even_index != -1:\n        return [smallest_even_value, smallest_even_index]\n    else:\n        return []", "prompt_tokens": 1054, "completion_tokens": 292, "duration": 6.878138542175293}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n\n    greatest_int = -1\n\n    for num, freq in freq_map.items():\n        if num > 0 and freq >= num and num > greatest_int:\n            greatest_int = num\n\n    return greatest_int", "prompt_tokens": 732, "completion_tokens": 232, "duration": 8.452452659606934}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst", "prompt_tokens": 611, "completion_tokens": 150, "duration": 3.950101852416992}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 191, "duration": 5.943930387496948}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_palindrome = True\n    left, right = 0, len(q) - 1\n    \n    while left < right:\n        if q[left] != q[right]:\n            is_palindrome = False\n            break\n        left += 1\n        right -= 1\n    \n    if is_palindrome:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 895, "completion_tokens": 278, "duration": 5.720966815948486}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n            if arr[left] < arr[right]:\n                arr[left] = arr[right]\n            else:\n                arr[right] = arr[left]\n        left += 1\n        right -= 1\n    \n    return min_changes", "prompt_tokens": 726, "completion_tokens": 250, "duration": 9.894085168838501}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2 or total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 765, "completion_tokens": 199, "duration": 4.1368632316589355}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2 or a > 100:\n        return False\n\n    prime_count = 0\n    prime_factors = []\n\n    for i in range(2, a):\n        if a % i == 0:\n            if is_prime(i):\n                prime_factors.append(i)\n                prime_count += 1\n\n    return prime_count == 3", "prompt_tokens": 577, "completion_tokens": 295, "duration": 9.73422360420227}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1:\n        if n == 1:\n            return True\n        else:\n            return False\n    if x < n:\n        return False\n\n    power = 1\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power = power + 1\n\n    return False", "prompt_tokens": 638, "completion_tokens": 178, "duration": 7.1255714893341064}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (abs(a) ** (1/3)).is_integer()", "prompt_tokens": 565, "completion_tokens": 109, "duration": 6.637127637863159}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for d in num:\n        if d in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 7.957622528076172}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = 'db'\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_str += str(remainder)\n        decimal //= 2\n    return binary_str[::-1] + 'db'", "prompt_tokens": 671, "completion_tokens": 189, "duration": 8.041976928710938}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 596, "completion_tokens": 169, "duration": 5.617703676223755}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 1087, "completion_tokens": 533, "duration": 10.839491605758667}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 550, "completion_tokens": 201, "duration": 4.45439600944519}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10**(n-1)\n        else:\n            count += 2 * 10**(n-2)\n    return count", "prompt_tokens": 441, "completion_tokens": 156, "duration": 6.062939882278442}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    total_sum = sum(int(digit) for digit in str(N))\n    return bin(total_sum)[2:]", "prompt_tokens": 607, "completion_tokens": 111, "duration": 6.023615837097168}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for index in range(1, len(lst), 2):\n        if lst[index] % 2 == 0:\n            sum_even_odd_idx += lst[index]\n    return sum_even_odd_idx", "prompt_tokens": 448, "completion_tokens": 136, "duration": 5.088280439376831}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)", "prompt_tokens": 613, "completion_tokens": 144, "duration": 3.991285800933838}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, val in reversed(list(enumerate(row))):\n                result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "prompt_tokens": 909, "completion_tokens": 210, "duration": 9.338116645812988}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    return sorted_array", "prompt_tokens": 788, "completion_tokens": 184, "duration": 7.093217134475708}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        idx = alphabet.index(ch)\n        new_idx = (idx + 2 * 2) % len(alphabet)\n        encrypted_s += alphabet[new_idx]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 202, "duration": 6.067945241928101}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(lst)\n    second_smallest = None\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] != sorted_lst[i-1]:\n            second_smallest = sorted_lst[i]\n            break\n    return second_smallest", "prompt_tokens": 618, "completion_tokens": 189, "duration": 6.027439832687378}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 540, "completion_tokens": 122, "duration": 7.962588787078857}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    total = x + y + z\n    return x == y + z or y == x + z or z == x + y\n\n# Test cases\nprint(any_int(5, 2, 7))  # True\nprint(any_int(3, 2, 2))  # False\nprint(any_int(3, -2, 1))  # True\nprint(any_int(3.6, -2.2, 2))  # False", "prompt_tokens": 628, "completion_tokens": 235, "duration": 7.104789972305298}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for ch in message:\n        if ch.isalpha():\n            if ch.lower() in vowels:\n                index = ord(ch.lower()) - ord('a')\n                new_ch = chr((index + 2) % 26 + ord('A') if ch.isupper() else ord('a'))\n            else:\n                new_ch = ch.swapcase()\n        else:\n            new_ch = ch\n        encoded_message += new_ch\n    return encoded_message\n\n# Test cases\nprint(encode('test'))  # 'TGST'\nprint(encode('This is a message'))  # 'tHKS KS C MGSSCGG'", "prompt_tokens": 608, "completion_tokens": 283, "duration": 8.347395658493042}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    largest_prime = 0\n    sum_digits = 0\n\n    for num in lst:\n        if num > 1:\n            is_prime = True\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime and num > largest_prime:\n                largest_prime = num\n\n    if largest_prime == 0:\n        return 0\n\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 981, "completion_tokens": 289, "duration": 10.487165927886963}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if isinstance(key, str) and key.islower():\n            is_lower = True\n        elif isinstance(key, str) and key.isupper():\n            is_upper = True\n        \n        if is_lower and is_upper:\n            return False\n    \n    return is_lower or is_upper", "prompt_tokens": 739, "completion_tokens": 235, "duration": 6.73490309715271}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 634, "completion_tokens": 155, "duration": 5.443256139755249}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 525, "completion_tokens": 98, "duration": 6.5532519817352295}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 110, "duration": 7.939717054367065}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = int(num) + 1\n    diff_floor = abs(num - floor_num)\n    diff_ceil = abs(num - ceil_num)\n    \n    if diff_floor <= diff_ceil:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 679, "completion_tokens": 184, "duration": 5.584461688995361}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(n):\n        stones_list.append(stones)\n\n        if stones % 2 == 0:\n            stones += 1\n        else:\n            stones += 2\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 143, "duration": 4.62390398979187}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in (',', ' '):\n            current_word += c\n        else:\n            if current_word:\n                words.append(current_word)\n                current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 625, "completion_tokens": 207, "duration": 55.51340961456299}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even if max_even != -1 else -1", "prompt_tokens": 560, "completion_tokens": 176, "duration": 4.221925735473633}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 620, "completion_tokens": 119, "duration": 7.5695531368255615}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    \n    return sorted(result)", "prompt_tokens": 586, "completion_tokens": 195, "duration": 6.102115631103516}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = []\n    for num in filtered_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 996, "completion_tokens": 354, "duration": 10.42526912689209}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 600, "completion_tokens": 173, "duration": 8.708776473999023}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 187, "duration": 3.850065231323242}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= int(str(num)[1])\n            for digit in str(num)[2:]:\n                sum_digits += int(digit)\n        else:\n            for digit in str(num):\n                sum_digits += int(digit)\n        \n        if sum_digits > 0:\n            count += 1\n\n    return count", "prompt_tokens": 620, "completion_tokens": 210, "duration": 5.455563306808472}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    arr = arr[min_idx:] + arr[:min_idx]\n    return arr == sorted(arr)", "prompt_tokens": 964, "completion_tokens": 160, "duration": 4.01318359375}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = sum(1 for num in lst1 if num % 2 != 0)\n    if count_odd == 0:\n        return \"YES\"\n    for num in lst2:\n        if num % 2 != 0:\n            count_odd -= 1\n            if count_odd < 0:\n                return \"NO\"\n    return \"YES\"", "prompt_tokens": 787, "completion_tokens": 221, "duration": 7.871028661727905}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    hist_dict = {}\n    for letter in letters:\n        if letter in hist_dict:\n            hist_dict[letter] += 1\n        else:\n            hist_dict[letter] = 1\n    max_count = max(hist_dict.values())\n    max_dict = {k: v for k, v in hist_dict.items() if v == max_count}\n    return max_dict", "prompt_tokens": 713, "completion_tokens": 242, "duration": 7.9302544593811035}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    is_palindrome = True\n    start, end = 0, len(result) - 1\n    while start < end:\n        if result[start] != result[end]:\n            is_palindrome = False\n            break\n        start += 1\n        end -= 1\n    return (result, is_palindrome)", "prompt_tokens": 743, "completion_tokens": 259, "duration": 11.612468719482422}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    res_lst = []\n    for s in lst:\n        odd_count = 0\n        for c in s:\n            if c.isdigit() and int(c) % 2 != 0:\n                odd_count += 1\n        res_lst.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + str(lst.index(s) + 1) + \"ng \" + str(lst.index(s) + 1) + \" of the \" + str(lst.index(s) + 1) + \"nput.\")\n    return res_lst", "prompt_tokens": 766, "completion_tokens": 287, "duration": 7.258925676345825}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 171, "duration": 7.557124137878418}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    total_water = sum(sum(row) for row in grid)\n    times = math.ceil(total_water / capacity)\n    \n    return times", "prompt_tokens": 981, "completion_tokens": 117, "duration": 8.55326533317566}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 711, "completion_tokens": 154, "duration": 8.024902105331421}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    for word in s.split():\n        consonant_count = 0\n        for ch in word:\n            if ch.lower() not in \"aeiou\" and ch.isalpha():\n                consonant_count += 1\n        if consonant_count == n:\n            words.append(word)\n    return words", "prompt_tokens": 764, "completion_tokens": 218, "duration": 7.0682291984558105}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    found_vowel = False\n    consonant_count = 0\n    vowels = \"aeiouAEIOU\"\n    \n    for char in word[::-1]:\n        if char.isalpha():\n            if char not in vowels:\n                consonant_count += 1\n            else:\n                if consonant_count > 0 and not found_vowel:\n                    closest_vowel = char\n                    found_vowel = True\n                    break\n    \n    return closest_vowel", "prompt_tokens": 719, "completion_tokens": 273, "duration": 10.6350417137146}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    \n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    \n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    \n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 772, "completion_tokens": 308, "duration": 7.152438163757324}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    res = []\n    for i in range(k):\n        res.append(arr[i])\n    return res", "prompt_tokens": 775, "completion_tokens": 118, "duration": 5.659008741378784}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 529, "completion_tokens": 132, "duration": 6.277292966842651}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 611, "completion_tokens": 162, "duration": 6.656434774398804}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 835, "completion_tokens": 213, "duration": 7.885303258895874}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not (1 <= int(month) <= 12):\n        return False\n    \n    if month in ['1', '3', '5', '7', '8', '10', '12']:\n        if not (1 <= int(day) <= 31):\n            return False\n    elif month in ['4', '6', '9', '11']:\n        if not (1 <= int(day) <= 30):\n            return False\n    elif month == '2':\n        if not (1 <= int(day) <= 29):\n            return False\n    else:\n        return False\n    \n    if len(year) != 4:\n        return False\n    \n    return True", "prompt_tokens": 986, "completion_tokens": 370, "duration": 6.182483911514282}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        words_list = count\n    return words_list", "prompt_tokens": 749, "completion_tokens": 289, "duration": 8.751160383224487}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicate_count = 0\n    sorted = True\n    \n    for num in lst:\n        if num < prev:\n            sorted = False\n            break\n        if num == prev:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                sorted = False\n                break\n        prev = num\n    \n    return sorted", "prompt_tokens": 922, "completion_tokens": 247, "duration": 7.435222625732422}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n\n    if max_start > min_end:\n        return \"NO\"\n\n    length = min_end - max_start\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 989, "completion_tokens": 356, "duration": 10.187160968780518}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum = 0\n    product = 1\n    \n    for num in arr:\n        sum += abs(num) if num >= 0 else -abs(num)\n        product *= 1 if num >= 0 else -1 if num < 0 else 0\n    \n    return sum * product", "prompt_tokens": 617, "completion_tokens": 194, "duration": 6.332318305969238}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def isValidCell(row, col):\n        return 0 <= row < len(grid) and 0 <= col < len(grid[0]) and not visited[row][col]\n\n    def dfs(row, col, currPath):\n        visited[row][col] = True\n        currPath.append(grid[row][col])\n        if len(currPath) == k:\n            path.extend(currPath)\n            return\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_row, new_col = row + dr, col + dc\n            if isValidCell(new_row, new_col):\n                dfs(new_row, new_col, currPath)\n        visited[row][col] = False\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    path = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            dfs(i, j, [])\n    return path[:k]", "prompt_tokens": 1353, "completion_tokens": 527, "duration": 12.03089427947998}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    sequence = [1, 3]\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sum(sequence[-3:]))\n    return sequence", "prompt_tokens": 898, "completion_tokens": 274, "duration": 8.7275710105896}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0", "prompt_tokens": 483, "completion_tokens": 142, "duration": 9.217714071273804}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n    return bool(stack)", "prompt_tokens": 656, "completion_tokens": 192, "duration": 7.730978488922119}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 3.605164051055908}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_alphabetical = False\n    if txt == \"\":\n        return False\n    else:\n        txt = txt.rstrip()\n        last_char = txt[-1]\n        if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n            is_last_char_alphabetical = True\n    return is_last_char_alphabetical", "prompt_tokens": 662, "completion_tokens": 220, "duration": 4.296495199203491}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 568, "completion_tokens": 154, "duration": 7.481680870056152}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    max_neg = None\n    min_pos = None\n    \n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        if num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    \n    return (max_neg, min_pos)", "prompt_tokens": 661, "completion_tokens": 225, "duration": 4.70233416557312}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif type(a) == int and type(b) == float:\n        return b\n    elif type(a) == float and type(b) == int:\n        return a\n    elif type(a) == str and type(b) == int:\n        return a\n    elif type(a) == int and type(b) == str:\n        return b\n    elif type(a) == str and type(b) == float:\n        return b\n    elif type(a) == float and type(b) == str:\n        return a", "prompt_tokens": 697, "completion_tokens": 309, "duration": 8.513134479522705}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    even_count = 0\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_count += 1\n        even_sum += i\n        if even_count == 4 and even_sum == n:\n            return True\n    return False", "prompt_tokens": 563, "completion_tokens": 223, "duration": 4.093355655670166}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 526, "completion_tokens": 137, "duration": 5.444758892059326}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    modified_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                if modified_text.endswith(\"-\"):\n                    modified_text = modified_text[:-1] + \"-\"\n                else:\n                    modified_text += \"-\"\n        else:\n            if count > 0:\n                if modified_text.endswith(\"-\"):\n                    modified_text = modified_text[:-1] + \"_\"\n                else:\n                    modified_text += \"_\"\n                count = 0\n            modified_text += ch\n    return modified_text", "prompt_tokens": 634, "completion_tokens": 288, "duration": 9.050966501235962}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    counter = 0\n    dot_count = 0\n    valid_start = False\n    valid_extension = False\n    \n    for ch in file_name:\n        if ch.isdigit():\n            counter += 1\n        elif ch == '.':\n            dot_count += 1\n        elif ch.isalpha():\n            valid_start = True\n        elif file_name.endswith('.txt') or file_name.endswith('.exe') or file_name.endswith('.dll'):\n            valid_extension = True\n    \n    if counter > 3 or dot_count != 1 or not valid_start or not valid_extension:\n        return 'No'\n    else:\n        return 'Yes'", "prompt_tokens": 925, "completion_tokens": 377, "duration": 10.71251130104065}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 699, "completion_tokens": 184, "duration": 5.879130125045776}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 679, "completion_tokens": 221, "duration": 7.862503290176392}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    product = x_num * n_num * x_denom * n_denom\n    return product % (x_denom * n_denom) == 0", "prompt_tokens": 675, "completion_tokens": 179, "duration": 7.648371934890747}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums.sort(key=lambda x: (sum_of_digits(x), nums.index(x)))\n    return nums", "prompt_tokens": 617, "completion_tokens": 178, "duration": 9.545153617858887}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "prompt_tokens": 609, "completion_tokens": 196, "duration": 6.824813604354858}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 244, "duration": 7.460894823074341}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        \n        if index1 < index2:\n            result = planets[index1+1:index2]\n            return tuple(result)\n        else:\n            result = planets[index2+1:index1]\n            return tuple(reversed(result))\n    else:\n        return ()", "prompt_tokens": 828, "completion_tokens": 278, "duration": 10.185388326644897}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 721, "completion_tokens": 136, "duration": 4.930646896362305}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 119, "duration": 6.782893419265747}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 610, "completion_tokens": 139, "duration": 6.415651798248291}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 821, "completion_tokens": 155, "duration": 5.3989667892456055}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 947, "completion_tokens": 235, "duration": 7.095845460891724}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    aa = a + a\n    for i in range(n):\n        sub = aa[i:i+n]\n        if sub == b:\n            return True\n    return False", "prompt_tokens": 648, "completion_tokens": 184, "duration": 7.223369598388672}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 4.8844640254974365}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    roman_numeral = ''\n    roman_values = [(value, numeral) for value, numeral in sorted(roman_numerals.items(), reverse=True)]\n    \n    for value, numeral in roman_values:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    \n    return roman_numeral", "prompt_tokens": 590, "completion_tokens": 294, "duration": 6.134992361068726}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n\n    max_side = max(a_squared, b_squared, c_squared)\n\n    if max_side == a_squared:\n        is_right_angle = (b_squared + c_squared == a_squared)\n    elif max_side == b_squared:\n        is_right_angle = (a_squared + c_squared == b_squared)\n    else:\n        is_right_angle = (a_squared + b_squared == c_squared)\n\n    return is_right_angle", "prompt_tokens": 663, "completion_tokens": 309, "duration": 7.276432037353516}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = set(word)\n\n        if len(unique_chars) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(unique_chars)\n\n        elif len(unique_chars) == max_unique_chars and word < max_word:\n            max_word = word\n\n    return max_word", "prompt_tokens": 600, "completion_tokens": 187, "duration": 7.262150049209595}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    remaining_carrots = remaining - total_eaten_carrots if remaining >= total_eaten_carrots else 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 920, "completion_tokens": 166, "duration": 5.049717664718628}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 774, "completion_tokens": 211, "duration": 5.14583945274353}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(char.isalpha() for char in result):\n        return result[::-1]\n    return result", "prompt_tokens": 586, "completion_tokens": 187, "duration": 7.0084147453308105}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    if not text:\n        return None\n\n    import hashlib\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 96, "duration": 4.7767415046691895}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    start = min(a, b)\n    end = max(a, b)\n    for i in range(start, end+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits", "prompt_tokens": 591, "completion_tokens": 188, "duration": 6.515177488327026}
