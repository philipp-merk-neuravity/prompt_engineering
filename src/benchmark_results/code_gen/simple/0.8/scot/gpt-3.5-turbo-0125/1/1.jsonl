{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    result = False\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                result = True\n                break\n        if result:\n            break\n    return result", "prompt_tokens": 643, "completion_tokens": 217, "duration": 7.183560609817505}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n\n    for ch in paren_string:\n        if ch == '(':\n            open_braces_count += 1\n            current_group += ch\n        elif ch == ')':\n            if open_braces_count > 0:\n                open_braces_count -= 1\n                current_group += ch\n                if open_braces_count == 0:\n                    groups.append(current_group)\n                    current_group = \"\"\n    \n    return groups", "prompt_tokens": 650, "completion_tokens": 285, "duration": 9.8778555393219}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 492, "completion_tokens": 96, "duration": 6.736852407455444}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 583, "completion_tokens": 137, "duration": 6.450250864028931}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_abs_diff = sum(abs(num - mean) for num in numbers)\n    mad = sum_abs_diff / len(numbers)\n    return mad", "prompt_tokens": 666, "completion_tokens": 234, "duration": 7.612094402313232}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 533, "completion_tokens": 152, "duration": 6.064971208572388}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 683, "completion_tokens": 308, "duration": 9.18819808959961}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 5.598246812820435}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 552, "completion_tokens": 152, "duration": 6.040181398391724}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for num in numbers:\n        if not rolling_max_list or num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list", "prompt_tokens": 596, "completion_tokens": 212, "duration": 7.119022369384766}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 630, "completion_tokens": 109, "duration": 5.26535701751709}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result", "prompt_tokens": 531, "completion_tokens": 176, "duration": 6.495096921920776}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    \n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    \n    return longest_str", "prompt_tokens": 554, "completion_tokens": 159, "duration": 6.385959625244141}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 451, "completion_tokens": 97, "duration": 4.790705442428589}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "prompt_tokens": 461, "completion_tokens": 133, "duration": 5.408796787261963}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 451, "completion_tokens": 103, "duration": 4.914895534515381}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    unique_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in unique_chars:\n            unique_chars.add(char)\n    return len(unique_chars)", "prompt_tokens": 489, "completion_tokens": 142, "duration": 5.5801098346710205}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats_list = []\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 733, "completion_tokens": 216, "duration": 7.154277563095093}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 514, "completion_tokens": 142, "duration": 5.946964502334595}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    sorted_numerals = sorted(numeral_list, key=lambda x: numeral_dict[x])\n    return ' '.join(sorted_numerals)", "prompt_tokens": 590, "completion_tokens": 237, "duration": 7.461097717285156}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n    \n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 717, "completion_tokens": 233, "duration": 6.993157386779785}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    rescaled_numbers = [(num - min_num) / range_num for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 620, "completion_tokens": 186, "duration": 6.146928071975708}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers", "prompt_tokens": 494, "completion_tokens": 101, "duration": 6.6636738777160645}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 401, "completion_tokens": 89, "duration": 4.606131553649902}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 420, "completion_tokens": 99, "duration": 4.683546781539917}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 611, "completion_tokens": 168, "duration": 6.0644142627716064}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n    return result", "prompt_tokens": 485, "completion_tokens": 106, "duration": 5.030752897262573}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 141, "duration": 5.815114259719849}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = \"\"\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 414, "completion_tokens": 80, "duration": 4.736085891723633}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 497, "completion_tokens": 96, "duration": 4.783401250839233}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums", "prompt_tokens": 540, "completion_tokens": 93, "duration": 4.4783666133880615}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True", "prompt_tokens": 544, "completion_tokens": 170, "duration": 5.5786004066467285}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        return None\n    \n    zero_point = None\n    for x in range(-100, 101):\n        if math.isclose(poly(xs, x), 0, abs_tol=0.0001):\n            zero_point = x\n            break\n    \n    return zero_point", "prompt_tokens": 930, "completion_tokens": 270, "duration": 8.817868709564209}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            result.append(v)\n    temp.sort()\n    temp_index = 0\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 742, "completion_tokens": 289, "duration": 7.944775819778442}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for e in l:\n        if e not in unique_list:\n            unique_list.append(e)\n    return sorted(unique_list)", "prompt_tokens": 477, "completion_tokens": 111, "duration": 19.249945640563965}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 497, "completion_tokens": 117, "duration": 5.151700735092163}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 511, "completion_tokens": 157, "duration": 8.4095299243927}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.extend(sorted(l[i: i+1]))\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 619, "completion_tokens": 170, "duration": 9.258842945098877}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 672, "completion_tokens": 179, "duration": 4.7373456954956055}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_perfect_square(num):\n        square_root = int(math.sqrt(num))\n        return square_root * square_root == num\n\n    def is_fibonacci(num):\n        return is_perfect_square(5*num*num + 4) or is_perfect_square(5*num*num - 4)\n\n    def find_next_prime_fibonacci(num):\n        num = num + 1\n        while True:\n            if is_prime(num) and is_fibonacci(num):\n                return num\n            num = num + 1\n\n    count = 0\n    num = 1\n    while count < n:\n        num = find_next_prime_fibonacci(num)\n        count = count + 1\n\n    return num\n\nprint(prime_fib(1))\nprint(prime_fib(2))\nprint(prime_fib(3))\nprint(prime_fib(4))\nprint(prime_fib(5))", "prompt_tokens": 664, "completion_tokens": 465, "duration": 12.6342613697052}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 728, "completion_tokens": 253, "duration": 10.401310443878174}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    for i in range(1, n+1):\n        collisions += i\n    return collisions", "prompt_tokens": 643, "completion_tokens": 119, "duration": 4.940309047698975}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    new_list = []\n    for num in l:\n        new_num = num + 1\n        new_list.append(new_num)\n    return new_list", "prompt_tokens": 533, "completion_tokens": 99, "duration": 6.279994964599609}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        complement = -num\n        if complement in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 677, "completion_tokens": 153, "duration": 8.231300592422485}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 541, "completion_tokens": 144, "duration": 8.468075513839722}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 394, "completion_tokens": 63, "duration": 6.9709930419921875}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        next_element = sum(fib4_list)\n        fib4_list.pop(0)\n        fib4_list.append(next_element)\n    return fib4_list[-1]", "prompt_tokens": 729, "completion_tokens": 215, "duration": 8.464184761047363}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 492, "completion_tokens": 145, "duration": 8.393677234649658}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 507, "completion_tokens": 131, "duration": 10.068448066711426}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    for i in range(1, n+1):\n        result = (result * 2) % p\n    return result", "prompt_tokens": 524, "completion_tokens": 102, "duration": 6.326677083969116}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    decoded_string = \"\"\n    for ch in s:\n        decoded_char = chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\"))\n        decoded_string += decoded_char\n    return decoded_string", "prompt_tokens": 524, "completion_tokens": 144, "duration": 9.176758766174316}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 606, "completion_tokens": 143, "duration": 8.7490816116333}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 472, "completion_tokens": 79, "duration": 7.769758939743042}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    sum = x + y\n    return sum", "prompt_tokens": 398, "completion_tokens": 51, "duration": 7.736727476119995}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    char_freq = {}\n    for char in s0:\n        if char not in char_freq:\n            char_freq[char] = 1\n        else:\n            char_freq[char] += 1\n    \n    for char in s1:\n        if char not in char_freq:\n            return False\n        else:\n            char_freq[char] -= 1\n            if char_freq[char] == 0:\n                del char_freq[char]\n    \n    return not char_freq", "prompt_tokens": 699, "completion_tokens": 270, "duration": 10.07138180732727}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    fib_sequence = [0, 1]\n\n    for i in range(2, n+1):\n        next_fib = fib_sequence[i-1] + fib_sequence[i-2]\n        fib_sequence.append(next_fib)\n\n    return fib_sequence[n]", "prompt_tokens": 454, "completion_tokens": 178, "duration": 5.953885078430176}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "prompt_tokens": 561, "completion_tokens": 181, "duration": 9.712087869644165}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if not l:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            is_increasing = False\n        if l[i] < l[i+1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing", "prompt_tokens": 539, "completion_tokens": 196, "duration": 5.977038145065308}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for ele in l1:\n        if ele in l2 and ele not in common_elements:\n            common_elements.append(ele)\n    return sorted(common_elements)", "prompt_tokens": 580, "completion_tokens": 144, "duration": 9.18131709098816}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            if all(factor % i != 0 for i in range(2, int(factor ** 0.5) + 1)):\n                largest_prime_factor = factor\n        factor += 1\n    return largest_prime_factor", "prompt_tokens": 499, "completion_tokens": 206, "duration": 9.008180618286133}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 4.327701807022095}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 536, "completion_tokens": 160, "duration": 10.870551586151123}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "prompt_tokens": 530, "completion_tokens": 142, "duration": 9.224936246871948}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        fibfib_i = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(fibfib_i)\n\n    return fibfib_list[n]", "prompt_tokens": 682, "completion_tokens": 242, "duration": 12.03084659576416}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"python\"))  # 1", "prompt_tokens": 606, "completion_tokens": 238, "duration": 12.330225229263306}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    num_str = str(x)\n    length = len(num_str)\n    \n    if shift > length:\n        result = num_str[::-1]\n        return result\n    else:\n        new_index = shift % length\n        result = num_str[new_index:] + num_str[:new_index]\n        return result", "prompt_tokens": 590, "completion_tokens": 240, "duration": 8.618862390518188}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 77, "duration": 6.867517709732056}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, [x.split()[0] for x in s.split() if x.isdigit()])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 817, "completion_tokens": 186, "duration": 8.224671363830566}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n            found_even = True\n        elif node % 2 == 0 and node == smallest_value:\n            smallest_index = min(smallest_index, i)\n        elif found_even and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n    \n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1087, "completion_tokens": 344, "duration": 10.950971364974976}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n    for key, value in freq_map.items():\n        if key > 0 and value >= key and key > greatest_int:\n            greatest_int = key\n\n    return greatest_int", "prompt_tokens": 725, "completion_tokens": 226, "duration": 11.243441820144653}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result_lst = []\n    while lst:\n        result_lst.append(lst.pop(0))\n        if len(lst) > 1:\n            result_lst.append(lst.pop())\n        else:\n            break\n    return result_lst", "prompt_tokens": 630, "completion_tokens": 180, "duration": 8.882842063903809}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 602, "completion_tokens": 189, "duration": 8.333760023117065}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_palindrome = True\n    left = 0\n    right = len(q) - 1\n    \n    while left < right:\n        if q[left] != q[right]:\n            is_palindrome = False\n            break\n        left += 1\n        right -= 1\n    \n    if is_palindrome:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 895, "completion_tokens": 279, "duration": 10.742411375045776}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n\n    while left < right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n            if arr[left] < arr[right]:\n                arr[right] = arr[left]\n            else:\n                arr[left] = arr[right]\n        left += 1\n        right -= 1\n\n    return min_changes", "prompt_tokens": 706, "completion_tokens": 230, "duration": 9.244953155517578}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2 or total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 775, "completion_tokens": 208, "duration": 11.546189069747925}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    count = 0\n    for p in range(2, 100):\n        while a % p == 0:\n            a //= p\n            count += 1\n        if count == 3:\n            return True\n    return False", "prompt_tokens": 516, "completion_tokens": 159, "duration": 7.368374347686768}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False", "prompt_tokens": 617, "completion_tokens": 115, "duration": 8.5433030128479}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    a = abs(a)\n    cube_root = 0\n    for i in range(1, a+1):\n        if i**3 == a:\n            cube_root = i\n            break\n    return cube_root != 0", "prompt_tokens": 595, "completion_tokens": 174, "duration": 9.038493394851685}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for d in num:\n        if d in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 9.724230766296387}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_str = str(remainder) + binary_str\n        decimal = decimal // 2\n    binary_str = binary_str + \"db\"\n    return binary_str", "prompt_tokens": 670, "completion_tokens": 198, "duration": 9.840562582015991}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 598, "completion_tokens": 171, "duration": 5.39320182800293}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 531, "duration": 14.796185493469238}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 530, "completion_tokens": 168, "duration": 7.98073148727417}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10**(n-1)\n        else:\n            count += 2 * 10**(n-1)\n    return count", "prompt_tokens": 446, "completion_tokens": 161, "duration": 7.393248081207275}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum = 0\n    for digit in str(N):\n        sum += int(digit)\n    return bin(sum)[2:]", "prompt_tokens": 607, "completion_tokens": 115, "duration": 6.474208116531372}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 453, "completion_tokens": 141, "duration": 6.788534879684448}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    \n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_words.append(sorted_word)\n    \n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 629, "completion_tokens": 168, "duration": 6.041985273361206}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "prompt_tokens": 929, "completion_tokens": 226, "duration": 9.190724849700928}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "prompt_tokens": 846, "completion_tokens": 230, "duration": 9.85428500175476}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2 * 2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 202, "duration": 6.417766332626343}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 620, "completion_tokens": 211, "duration": 7.170332908630371}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count", "prompt_tokens": 543, "completion_tokens": 125, "duration": 5.087404012680054}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 598, "completion_tokens": 137, "duration": 5.225245475769043}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for ch in message:\n        if ch.isalpha():\n            if ch.lower() in vowels:\n                index = ord(ch.lower()) - ord('a')\n                new_ch = chr((index + 2) % 26 + ord('A')) if ch.isupper() else chr((index + 2) % 26 + ord('a'))\n            else:\n                new_ch = ch.swapcase()\n            encoded_message += new_ch\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 598, "completion_tokens": 246, "duration": 10.425498962402344}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 983, "completion_tokens": 283, "duration": 8.599056243896484}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if isinstance(key, str) and key.islower():\n            is_lower = True\n        elif isinstance(key, str) and key.isupper():\n            is_upper = True\n        \n        if is_lower and is_upper:\n            return False\n    \n    return is_lower or is_upper", "prompt_tokens": 740, "completion_tokens": 236, "duration": 7.664423942565918}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    prime_numbers = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n            if len(prime_numbers) == n:\n                break\n    return prime_numbers", "prompt_tokens": 654, "completion_tokens": 191, "duration": 8.134186267852783}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    product = unit_digit_a * unit_digit_b\n    return product", "prompt_tokens": 579, "completion_tokens": 171, "duration": 8.148329973220825}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 115, "duration": 4.70204758644104}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    floor_val = int(value)\n    ceil_val = int(value) + 1\n    diff_floor = abs(value - floor_val)\n    diff_ceil = abs(value - ceil_val)\n    \n    if diff_floor <= diff_ceil:\n        return floor_val\n    else:\n        return ceil_val", "prompt_tokens": 687, "completion_tokens": 192, "duration": 7.7764952182769775}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n    for i in range(n):\n        stones_list.append(stones)\n        if n % 2 == 1:\n            stones += 2\n        else:\n            stones += 1\n    return stones_list", "prompt_tokens": 602, "completion_tokens": 142, "duration": 7.101842403411865}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in (',', ' '):\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 616, "completion_tokens": 195, "duration": 6.6415183544158936}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even_num = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0 and num > biggest_even_num:\n            biggest_even_num = num\n    return biggest_even_num", "prompt_tokens": 507, "completion_tokens": 120, "duration": 7.6723151206970215}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        count = 0\n        for i in range(n, m+1):\n            sum += i\n            count += 1\n        avg = round(sum / count)\n        binary_avg = bin(avg)\n        return binary_avg", "prompt_tokens": 631, "completion_tokens": 169, "duration": 7.267750263214111}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 577, "completion_tokens": 160, "duration": 5.580322980880737}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = []\n    for num in filtered_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 996, "completion_tokens": 354, "duration": 10.737722635269165}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            sum_val = sum(range(1, i+1))\n            result.append(sum_val)\n    return result", "prompt_tokens": 617, "completion_tokens": 197, "duration": 8.757534265518188}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 779, "completion_tokens": 185, "duration": 5.686341762542725}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 10.040840148925781}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    arr = arr[-min_idx:] + arr[:-min_idx]\n    return arr == sorted(arr)", "prompt_tokens": 954, "completion_tokens": 151, "duration": 7.475046634674072}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n    if even_count == len(lst1):\n        return \"YES\"\n    for num in lst2:\n        if num % 2 == 0:\n            even_count += 1\n    if even_count == len(lst1):\n        return \"YES\"\n    return \"NO\"", "prompt_tokens": 786, "completion_tokens": 232, "duration": 6.387203693389893}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    max_count = max(counts.values())\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    return result", "prompt_tokens": 726, "completion_tokens": 249, "duration": 8.46573805809021}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    palindrome_check = result == result[::-1]\n    return (result, palindrome_check)", "prompt_tokens": 719, "completion_tokens": 186, "duration": 8.899869441986084}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if c.isdigit() and int(c) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(lst.index(s)+1) + \"ng \" + s + \" of the \" + str(lst.index(s)+1) + \"nput.\")\n    return result", "prompt_tokens": 756, "completion_tokens": 258, "duration": 7.340878248214722}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 171, "duration": 8.443040609359741}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    total_water = sum(sum(row) for row in grid)\n    times = math.ceil(total_water / capacity)\n    return times", "prompt_tokens": 1032, "completion_tokens": 174, "duration": 10.585772275924683}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 719, "completion_tokens": 162, "duration": 5.3196868896484375}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result", "prompt_tokens": 730, "completion_tokens": 194, "duration": 8.326245546340942}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    last_consonant_index = -1\n    \n    for i in range(len(word)-1, -1, -1):\n        if word[i].lower() not in vowels:\n            last_consonant_index = i\n        elif word[i].lower() in vowels:\n            if last_consonant_index != -1:\n                closest_vowel = word[i]\n                break\n                \n    return closest_vowel", "prompt_tokens": 724, "completion_tokens": 285, "duration": 11.048164367675781}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    \n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    \n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    \n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 772, "completion_tokens": 308, "duration": 8.405280351638794}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    result = []\n    for i in range(k):\n        result.append(arr[i])\n    return result", "prompt_tokens": 776, "completion_tokens": 119, "duration": 7.532916307449341}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 527, "completion_tokens": 130, "duration": 6.369812250137329}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 611, "completion_tokens": 161, "duration": 5.268137454986572}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 835, "completion_tokens": 213, "duration": 10.992625713348389}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not (1 <= int(month) <= 12):\n        return False\n    \n    if month in ['01', '03', '05', '07', '08', '10', '12']:\n        if not (1 <= int(day) <= 31):\n            return False\n    elif month in ['04', '06', '09', '11']:\n        if not (1 <= int(day) <= 30):\n            return False\n    elif month == '02':\n        if not (1 <= int(day) <= 29):\n            return False\n    else:\n        return False\n    \n    if len(year) != 4:\n        return False\n    \n    if not date[2] == date[5] == '-':\n        return False\n    \n    return True", "prompt_tokens": 975, "completion_tokens": 378, "duration": 12.64316701889038}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        return count if count > 0 else None\n    return words_list", "prompt_tokens": 753, "completion_tokens": 298, "duration": 10.234142780303955}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev_num = None\n    has_duplicate = False\n    for num in lst:\n        if num == prev_num:\n            has_duplicate = True\n        if prev_num is not None and num < prev_num:\n            return False\n        prev_num = num\n    return not has_duplicate", "prompt_tokens": 884, "completion_tokens": 194, "duration": 7.554407835006714}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n\n    if max_start > min_end:\n        return \"NO\"\n\n    length = min_end - max_start + 1\n\n    if length < 2:\n        return \"NO\"\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 947, "completion_tokens": 331, "duration": 12.905360698699951}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_magnitude = 0\n    product_sign = 1\n    \n    for num in arr:\n        sum_magnitude += abs(num)\n        product_sign *= 1 if num > 0 else -1 if num < 0 else 0\n    \n    return sum_magnitude * product_sign", "prompt_tokens": 615, "completion_tokens": 191, "duration": 5.036545515060425}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def isValidCell(row, col):\n        return 0 <= row < len(grid) and 0 <= col < len(grid[0])\n\n    def dfs(row, col, length, currentPath):\n        if length == k:\n            nonlocal minPath\n            if not minPath or currentPath < minPath:\n                minPath = currentPath[:]\n            return\n\n        visited[row][col] = True\n        currentPath.append(grid[row][col])\n\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            new_row, new_col = row + dr, col + dc\n            if isValidCell(new_row, new_col) and not visited[new_row][new_col]:\n                dfs(new_row, new_col, length + 1, currentPath)\n\n        visited[row][col] = False\n        currentPath.pop()\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    minPath = []\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            dfs(i, j, 1, [])\n\n    return minPath", "prompt_tokens": 1297, "completion_tokens": 504, "duration": 12.823254585266113}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    seq = []\n    if n == 0:\n        seq.append(0)\n    elif n == 1:\n        seq.append(1)\n    elif n == 2:\n        seq.extend([1, 1])\n    else:\n        seq.extend([0, 1, 1])\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                seq.append(1 + i // 2)\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i - 3])\n    return seq", "prompt_tokens": 889, "completion_tokens": 291, "duration": 12.326824426651001}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n != 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    if product == 1:\n        return 0\n    else:\n        return product", "prompt_tokens": 485, "completion_tokens": 151, "duration": 7.270780563354492}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n    return bool(stack)", "prompt_tokens": 657, "completion_tokens": 193, "duration": 9.408217430114746}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares = sum_squares + squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 127, "duration": 7.667160987854004}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_alphabetical = False\n    if txt:\n        last_char = txt[-1]\n        if last_char.isalpha() and last_char != ' ':\n            is_last_char_alphabetical = True\n    return is_last_char_alphabetical", "prompt_tokens": 640, "completion_tokens": 174, "duration": 7.040568828582764}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            index = i\n    return index", "prompt_tokens": 535, "completion_tokens": 115, "duration": 8.230712413787842}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    largest_neg = None\n    smallest_pos = None\n\n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        if num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n\n    return (largest_neg, smallest_pos)", "prompt_tokens": 657, "completion_tokens": 224, "duration": 12.009346723556519}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None", "prompt_tokens": 749, "completion_tokens": 319, "duration": 6.924177646636963}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        count += 1\n        if count == 4 and (n - 2*i) % 2 == 0 and n - 2*i > 0:\n            return True\n    return False", "prompt_tokens": 530, "completion_tokens": 206, "duration": 8.373971223831177}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 526, "completion_tokens": 137, "duration": 5.183630704879761}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    new_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                new_text = new_text.rstrip() + \"-\"\n            else:\n                new_text += \"_\"\n                count = 0\n        else:\n            new_text += ch\n            count = 0\n    return new_text", "prompt_tokens": 615, "completion_tokens": 233, "duration": 5.284398794174194}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digit_count = 0\n    valid_extensions = ['txt', 'exe', 'dll']\n    valid_start_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    dot_count = 0\n    before_dot = ''\n    after_dot = ''\n    \n    for ch in file_name:\n        if ch.isdigit():\n            digit_count += 1\n        elif ch == '.':\n            dot_count += 1\n            before_dot = file_name.split('.')[0]\n            after_dot = file_name.split('.')[1] if len(file_name.split('.')) > 1 else ''\n    \n    if digit_count > 3 or dot_count != 1 or not before_dot or before_dot[0] not in valid_start_chars or after_dot not in valid_extensions:\n        result = 'No'\n    else:\n        result = 'Yes'\n    \n    return result", "prompt_tokens": 944, "completion_tokens": 435, "duration": 13.233089685440063}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 700, "completion_tokens": 185, "duration": 9.179734945297241}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 683, "completion_tokens": 223, "duration": 7.6690051555633545}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    product = x_num * n_num\n    return product % x_denom == 0 and product % n_denom == 0", "prompt_tokens": 680, "completion_tokens": 178, "duration": 7.441579818725586}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    sum_dict = {i: digit_sum(num) for i, num in enumerate(nums)}\n    sorted_indices = sorted(sum_dict, key=lambda x: (sum_dict[x], x))\n    return [nums[i] for i in sorted_indices]", "prompt_tokens": 639, "completion_tokens": 228, "duration": 7.6738598346710205}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 605, "completion_tokens": 197, "duration": 7.16401481628418}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        a_i = i * i - i + 1\n        for j in range(i+1, n):\n            a_j = j * j - j + 1\n            for k in range(j+1, n):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count = count + 1\n    return count", "prompt_tokens": 742, "completion_tokens": 270, "duration": 8.51718783378601}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        \n        if index1 < index2:\n            result = planets[index1+1:index2]\n        else:\n            result = planets[index2+1:index1]\n            result.reverse()\n        \n        return tuple(result)\n    else:\n        return ()", "prompt_tokens": 827, "completion_tokens": 275, "duration": 9.086148738861084}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 722, "completion_tokens": 137, "duration": 5.959472179412842}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 119, "duration": 6.136435031890869}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 612, "completion_tokens": 143, "duration": 6.7691850662231445}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 5.942113399505615}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return class_name + \".\" + strongest_extension", "prompt_tokens": 946, "completion_tokens": 232, "duration": 5.406497240066528}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s1 in s2 + s2\n\n    for i in range(len(b)):\n        if is_rotation(b, a[i:] + a[:i]):\n            return True\n    return False", "prompt_tokens": 575, "completion_tokens": 129, "duration": 6.271657228469849}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 483, "completion_tokens": 164, "duration": 6.415409564971924}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    mini_roman = ''\n    \n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            mini_roman += numeral\n            number -= value\n    \n    return mini_roman", "prompt_tokens": 568, "completion_tokens": 250, "duration": 7.819406986236572}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    side_a_squared = a * a\n    side_b_squared = b * b\n    side_c_squared = c * c\n    \n    if side_a_squared + side_b_squared == side_c_squared or side_a_squared + side_c_squared == side_b_squared or side_b_squared + side_c_squared == side_a_squared:\n        return True\n    else:\n        return False", "prompt_tokens": 626, "completion_tokens": 239, "duration": 5.841665267944336}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 588, "completion_tokens": 164, "duration": 5.92866587638855}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_needed = number + need\n    if remaining >= total_needed:\n        total_eaten_carrots = number + need\n        remaining_carrots = remaining - need\n    else:\n        total_eaten_carrots = remaining + number\n        remaining_carrots = 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 927, "completion_tokens": 195, "duration": 4.016172409057617}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 849, "completion_tokens": 286, "duration": 9.233059883117676}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        return result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 195, "duration": 5.6998114585876465}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    \n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    \n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 96, "duration": 5.350121974945068}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    start = min(a, b)\n    end = max(a, b)\n    for i in range(start, end+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits", "prompt_tokens": 582, "completion_tokens": 179, "duration": 9.642117977142334}
