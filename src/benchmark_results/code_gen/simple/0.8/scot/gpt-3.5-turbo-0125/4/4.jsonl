{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 594, "completion_tokens": 156, "duration": 4.91956353187561}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    separate_groups = []\n    current_group = \"\"\n    balance = 0\n    \n    for char in paren_string:\n        if char == '(':\n            balance += 1\n            current_group += char\n        elif char == ')':\n            balance -= 1\n            current_group += char\n            \n        if balance == 0:\n            separate_groups.append(current_group)\n            current_group = \"\"\n    \n    return separate_groups", "prompt_tokens": 644, "completion_tokens": 260, "duration": 5.7337188720703125}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 51.663491010665894}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 585, "completion_tokens": 139, "duration": 4.4272141456604}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_of_absolute_diff = sum(abs(x - mean) for x in numbers)\n    mad = sum_of_absolute_diff / len(numbers)\n    return mad", "prompt_tokens": 666, "completion_tokens": 235, "duration": 7.112070560455322}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 527, "completion_tokens": 147, "duration": 5.763195514678955}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 689, "completion_tokens": 314, "duration": 7.48541784286499}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 101, "duration": 4.061604022979736}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 145, "duration": 5.233131647109985}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for num in numbers:\n        if not rolling_max_list:\n            rolling_max_list.append(num)\n        elif num >= rolling_max_list[-1]:\n            rolling_max_list.append(num)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list", "prompt_tokens": 592, "completion_tokens": 217, "duration": 6.038506984710693}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 632, "completion_tokens": 110, "duration": 4.269609689712524}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 502, "completion_tokens": 147, "duration": 4.702597379684448}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str) or (len(string) == len(longest_str) and string < longest_str):\n            longest_str = string\n\n    return longest_str", "prompt_tokens": 583, "completion_tokens": 202, "duration": 5.765356063842773}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 90, "duration": 3.7417712211608887}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    prefixes.append(string)\n    return prefixes", "prompt_tokens": 481, "completion_tokens": 158, "duration": 4.291517496109009}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 455, "completion_tokens": 101, "duration": 4.180405139923096}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 491, "completion_tokens": 145, "duration": 4.962226152420044}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    \n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    \n    return beats_list", "prompt_tokens": 720, "completion_tokens": 205, "duration": 5.922952890396118}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 515, "completion_tokens": 143, "duration": 4.708606958389282}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numerals = numbers.split()\n    numbers = [num_dict[numeral] for numeral in numerals]\n    sorted_numbers = sorted(numbers)\n    sorted_numerals = [key for value in sorted_numbers for key, num in num_dict.items() if num == value]\n    return ' '.join(sorted_numerals)", "prompt_tokens": 588, "completion_tokens": 265, "duration": 7.5679216384887695}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 721, "completion_tokens": 229, "duration": 5.168859243392944}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    minimum = min(numbers)\n    maximum = max(numbers)\n    range_val = maximum - minimum\n    rescaled_numbers = [(num - minimum) / range_val for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 630, "completion_tokens": 191, "duration": 5.3534324169158936}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers", "prompt_tokens": 497, "completion_tokens": 104, "duration": 4.826690912246704}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 400, "completion_tokens": 88, "duration": 3.620826244354248}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 420, "completion_tokens": 99, "duration": 4.107605457305908}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 616, "completion_tokens": 173, "duration": 4.943999528884888}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n    \n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    \n    return result", "prompt_tokens": 494, "completion_tokens": 124, "duration": 4.245501756668091}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 136, "duration": 4.632277965545654}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for s in strings:\n        concatenated_string += s\n    return concatenated_string", "prompt_tokens": 426, "completion_tokens": 92, "duration": 3.8373284339904785}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 4.547562122344971}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 540, "completion_tokens": 78, "duration": 3.3640975952148438}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 518, "completion_tokens": 116, "duration": 4.470333099365234}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0 or len(xs) == 0:\n        return None\n    \n    largest_non_zero_coeff = max([abs(coeff) for coeff in xs if coeff != 0])\n    \n    for x in range(-1000, 1001):\n        result = poly(xs, x)\n        if abs(result) < 0.0001:\n            return x / 100.0\n    \n    return None", "prompt_tokens": 893, "completion_tokens": 249, "duration": 5.996089458465576}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            result.append(v)\n    temp.sort()\n    temp_index = 0\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 724, "completion_tokens": 271, "duration": 7.416188716888428}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    return sorted(unique_list)", "prompt_tokens": 461, "completion_tokens": 95, "duration": 3.9047911167144775}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 496, "completion_tokens": 116, "duration": 4.493762493133545}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for digit in str(i):\n                if digit == '7':\n                    count += 1\n    return count", "prompt_tokens": 522, "completion_tokens": 173, "duration": 6.246347904205322}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            temp.append(v)\n        if i % 2 != 0 or i == len(l) - 1:\n            result.extend(sorted(temp))\n            temp = []\n    return result", "prompt_tokens": 623, "completion_tokens": 193, "duration": 6.013986110687256}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 750, "completion_tokens": 257, "duration": 6.290401220321655}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_list = [0, 1]\n    count = 2\n    num = 0\n\n    while count < n:\n        next_fib = fib_list[-1] + fib_list[-2]\n        fib_list.append(next_fib)\n        count += 1\n\n    for i in range(len(fib_list) - 1, -1, -1):\n        if is_prime(fib_list[i]):\n            num = fib_list[i]\n            break\n\n    return num", "prompt_tokens": 575, "completion_tokens": 287, "duration": 11.658894777297974}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 734, "completion_tokens": 259, "duration": 6.988856077194214}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    left_to_right_cars = [random.random() for _ in range(n)]\n    right_to_left_cars = [random.random() for _ in range(n)]\n    left_to_right_cars.sort()\n    right_to_left_cars.sort(reverse=True)\n    \n    for i in range(n):\n        if left_to_right_cars[i] < right_to_left_cars[i]:\n            collisions += 1\n    \n    return collisions", "prompt_tokens": 742, "completion_tokens": 284, "duration": 8.782756328582764}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    new_l = []\n    for num in l:\n        new_num = num + 1\n        new_l.append(new_num)\n    return new_l", "prompt_tokens": 533, "completion_tokens": 99, "duration": 4.317986249923706}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        complement = -num\n        if complement in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 679, "completion_tokens": 155, "duration": 4.871266841888428}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 541, "completion_tokens": 144, "duration": 5.6255176067352295}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 391, "completion_tokens": 60, "duration": 4.3902716636657715}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        next_element = sum(fib4_list[-4:])\n        fib4_list.append(next_element)\n    return fib4_list[-1]", "prompt_tokens": 724, "completion_tokens": 204, "duration": 9.785308361053467}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 493, "completion_tokens": 146, "duration": 4.322832345962524}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 506, "completion_tokens": 131, "duration": 7.456548452377319}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 547, "completion_tokens": 101, "duration": 3.960958242416382}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 621, "completion_tokens": 263, "duration": 10.058894157409668}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 570, "completion_tokens": 107, "duration": 5.727717161178589}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 474, "completion_tokens": 81, "duration": 1.8834302425384521}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    result = x + y\n    return result", "prompt_tokens": 398, "completion_tokens": 51, "duration": 4.558561086654663}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    char_count = {}\n    \n    for char in s0:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    \n    for char in s1:\n        if char not in char_count or char_count[char] == 0:\n            return False\n        char_count[char] -= 1\n    \n    return all(count == 0 for count in char_count.values())", "prompt_tokens": 699, "completion_tokens": 267, "duration": 8.779561758041382}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    for i in range(2, n+1):\n        result = a + b\n        a, b = b, result\n\n    return result", "prompt_tokens": 444, "completion_tokens": 156, "duration": 6.970234632492065}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "prompt_tokens": 565, "completion_tokens": 185, "duration": 8.336809396743774}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 493, "completion_tokens": 116, "duration": 9.286455631256104}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for e in l1:\n        if e in l2 and e not in common_elements:\n            common_elements.append(e)\n    return sorted(common_elements)", "prompt_tokens": 578, "completion_tokens": 142, "duration": 6.399100303649902}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 491, "completion_tokens": 173, "duration": 9.567576169967651}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 5.980905771255493}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0", "prompt_tokens": 531, "completion_tokens": 158, "duration": 7.4610021114349365}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    derivative = []\n    for i in range(1, len(xs)):\n        derivative.append(xs[i] * i)\n    return derivative", "prompt_tokens": 554, "completion_tokens": 115, "duration": 4.196539640426636}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        fibfib_i = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(fibfib_i)\n\n    return fibfib_list[n]", "prompt_tokens": 679, "completion_tokens": 239, "duration": 7.28963041305542}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n\n    for i, ch in enumerate(s):\n        if ch in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if ch == 'y' and i == len(s) - 1:\n            count += 1\n\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"python\"))  # 1", "prompt_tokens": 610, "completion_tokens": 239, "duration": 7.414624929428101}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    num_str = str(x)\n    length = len(num_str)\n    \n    if shift > length:\n        result = num_str[::-1]\n    else:\n        split_index = length - shift\n        result = num_str[split_index:] + num_str[:split_index]\n    \n    return result", "prompt_tokens": 585, "completion_tokens": 233, "duration": 6.901093482971191}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 77, "duration": 5.901568651199341}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 811, "completion_tokens": 174, "duration": 7.144964694976807}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n            found_even = True\n        elif node % 2 == 0 and node == smallest_value:\n            smallest_index = min(i, smallest_index)\n    \n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1048, "completion_tokens": 283, "duration": 8.271170616149902}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    max_val = -1\n    for num in lst:\n        freq_map[num] = freq_map.get(num, 0) + 1\n        if num > 0 and freq_map[num] >= num:\n            max_val = max(max_val, num)\n    return max_val", "prompt_tokens": 735, "completion_tokens": 217, "duration": 8.527355432510376}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result_lst = []\n    min_ptr = 0\n    max_ptr = len(lst) - 1\n    while min_ptr <= max_ptr:\n        result_lst.append(lst[min_ptr])\n        if min_ptr != max_ptr:\n            result_lst.append(lst[max_ptr])\n        min_ptr += 1\n        max_ptr -= 1\n    return result_lst", "prompt_tokens": 643, "completion_tokens": 222, "duration": 13.05530858039856}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 191, "duration": 6.674649715423584}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_palindrome = True\n    left, right = 0, len(q) - 1\n    \n    while left < right:\n        if q[left] != q[right]:\n            is_palindrome = False\n            break\n        left += 1\n        right -= 1\n    \n    if is_palindrome:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 895, "completion_tokens": 278, "duration": 5.975691080093384}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n            left += 1\n        else:\n            left += 1\n            right -= 1\n    \n    return min_changes", "prompt_tokens": 715, "completion_tokens": 221, "duration": 8.966758966445923}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2 or total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 765, "completion_tokens": 199, "duration": 9.658582210540771}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for p in range(2, a):\n        if is_prime(p) and a % p == 0:\n            a //= p\n            count += 1\n        if count == 3:\n            return True\n    return False", "prompt_tokens": 517, "completion_tokens": 217, "duration": 5.831201791763306}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False", "prompt_tokens": 614, "completion_tokens": 112, "duration": 9.679574489593506}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    cube_root = int(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 550, "completion_tokens": 103, "duration": 7.368892431259155}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 926, "completion_tokens": 120, "duration": 5.1055357456207275}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_str = str(remainder) + binary_str\n        decimal = decimal // 2\n    binary_str = binary_str + \"db\"\n    return binary_str", "prompt_tokens": 672, "completion_tokens": 200, "duration": 5.564323663711548}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 592, "completion_tokens": 165, "duration": 3.519352674484253}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 531, "duration": 13.155153036117554}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 549, "completion_tokens": 200, "duration": 5.343882083892822}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 422, "completion_tokens": 137, "duration": 5.525898218154907}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum = 0\n    while N > 0:\n        sum += N % 10\n        N //= 10\n    return bin(sum)[2:]", "prompt_tokens": 613, "completion_tokens": 128, "duration": 4.580447673797607}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 448, "completion_tokens": 136, "duration": 6.54119610786438}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    \n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    \n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 626, "completion_tokens": 166, "duration": 6.784099578857422}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, v in sorted(enumerate(row), key=lambda x: x[0], reverse=True):\n                if v == x:\n                    result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "prompt_tokens": 913, "completion_tokens": 230, "duration": 10.814305305480957}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = array[0] + array[-1]\n    sorted_array = array.copy()\n    if sum_first_last % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    return sorted_array", "prompt_tokens": 885, "completion_tokens": 281, "duration": 5.729260683059692}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2 * 2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 623, "completion_tokens": 206, "duration": 6.989534378051758}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        smallest = second_smallest = float('inf')\n        for num in lst:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num != smallest:\n                second_smallest = num\n        if second_smallest == float('inf'):\n            return None\n        else:\n            return second_smallest", "prompt_tokens": 625, "completion_tokens": 219, "duration": 7.189769268035889}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 543, "completion_tokens": 125, "duration": 5.15781569480896}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 608, "completion_tokens": 147, "duration": 5.224349737167358}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for ch in message:\n        if ch.isalpha():\n            if ch.lower() in vowels:\n                index = (ord(ch.lower()) - ord('a') + 2) % 26\n                new_ch = chr(ord('a') + index)\n                encoded_message += new_ch.swapcase()\n            else:\n                encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message\n\n# Test cases\nprint(encode('test'))  # 'TGST'\nprint(encode('This is a message'))  # 'tHKS KS C MGSSCGG'", "prompt_tokens": 630, "completion_tokens": 299, "duration": 9.346577644348145}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def calculate_sum_of_digits(num):\n        sum_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_digits += digit\n            num = num // 10\n        return sum_digits\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n\n    if largest_prime is None:\n        return 0\n\n    sum_digits = calculate_sum_of_digits(largest_prime)\n    return sum_digits", "prompt_tokens": 1010, "completion_tokens": 357, "duration": 10.612030506134033}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if isinstance(key, str) and key.islower():\n            is_lower = True\n        elif isinstance(key, str) and key.isupper():\n            is_upper = True\n        \n        if is_lower and is_upper:\n            return False\n    \n    return is_lower or is_upper", "prompt_tokens": 739, "completion_tokens": 235, "duration": 7.414623498916626}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 634, "completion_tokens": 155, "duration": 5.366224050521851}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 525, "completion_tokens": 98, "duration": 3.9320497512817383}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 117, "duration": 3.4213221073150635}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = floor_num + 1\n    diff_floor = abs(num - floor_num)\n    diff_ceil = abs(num - ceil_num)\n    \n    if diff_floor <= diff_ceil:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 687, "completion_tokens": 191, "duration": 8.260610580444336}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(n):\n        stones_list.append(stones)\n\n        if stones % 2 == 1:\n            stones += 2\n        else:\n            stones += 1\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 143, "duration": 9.353951930999756}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in (',', ' '):\n            current_word += c\n        else:\n            if current_word:\n                words.append(current_word)\n                current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 622, "completion_tokens": 204, "duration": 5.094830751419067}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    else:\n        largest_even = -1\n        for num in range(y, x-1, -1):\n            if num % 2 == 0:\n                largest_even = num\n                break\n        return largest_even", "prompt_tokens": 524, "completion_tokens": 145, "duration": 5.979604005813599}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        count = 0\n        for i in range(n, m+1):\n            sum += i\n            count += 1\n        avg = round(sum / count)\n        binary_avg = bin(avg)\n        return binary_avg", "prompt_tokens": 633, "completion_tokens": 171, "duration": 6.11946439743042}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        for ch in str(num):\n            if int(ch) % 2 == 0:\n                break\n        else:\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 600, "completion_tokens": 189, "duration": 6.134400367736816}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    result = []\n    arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    arr.reverse()\n    for num in arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 955, "completion_tokens": 305, "duration": 9.855578422546387}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 581, "completion_tokens": 154, "duration": 6.634573459625244}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 187, "duration": 8.999771118164062}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 8.13324522972107}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    \n    for _ in range(len(arr)):\n        arr = arr[-1:] + arr[:-1]\n        if arr == sorted(arr):\n            return True\n    \n    return False", "prompt_tokens": 987, "completion_tokens": 199, "duration": 8.803287506103516}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    for num in lst2:\n        if num % 2 != 0:\n            count_odd += 1\n    if count_odd % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 789, "completion_tokens": 226, "duration": 6.773572206497192}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values(), default=0)\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    return result", "prompt_tokens": 733, "completion_tokens": 250, "duration": 6.861614942550659}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    palindrome_check = result == result[::-1]\n    return (result, palindrome_check)", "prompt_tokens": 701, "completion_tokens": 167, "duration": 6.0306737422943115}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, s, s, s))\n    return result", "prompt_tokens": 728, "completion_tokens": 200, "duration": 5.291006803512573}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 171, "duration": 5.3846375942230225}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    count = 0\n    total_water = sum(sum(row) for row in grid)\n    count = math.ceil(total_water / capacity)\n    return count", "prompt_tokens": 1033, "completion_tokens": 174, "duration": 7.933289051055908}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 741, "completion_tokens": 184, "duration": 4.711436033248901}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for word in s.split():\n        count = sum(1 for char in word if char in consonants)\n        if count == n:\n            words.append(word)\n    \n    return words", "prompt_tokens": 770, "completion_tokens": 226, "duration": 9.30891752243042}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    found_consonant = False\n    vowels = \"aeiouAEIOU\"\n    \n    for i in range(len(word) - 1, 1, -1):\n        if word[i] not in vowels and found_consonant:\n            if word[i-1] in vowels:\n                closest_vowel = word[i-1]\n                break\n        if word[i] not in vowels:\n            found_consonant = True\n    \n    return closest_vowel", "prompt_tokens": 710, "completion_tokens": 266, "duration": 6.6567158699035645}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 772, "completion_tokens": 305, "duration": 7.457734823226929}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 776, "completion_tokens": 104, "duration": 6.488182544708252}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 529, "completion_tokens": 132, "duration": 7.538103103637695}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if arr[i] >= 10 and arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 619, "completion_tokens": 174, "duration": 7.64709210395813}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 211, "duration": 7.241335391998291}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == \"\":\n        return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    if year < 1 or year > 9999:\n        return False\n\n    if len(str(year)) != 4:\n        return False\n\n    return True", "prompt_tokens": 974, "completion_tokens": 402, "duration": 10.212189197540283}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words = []\n    if ' ' in txt:\n        words = txt.split(' ')\n    elif ',' in txt:\n        words = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        if count > 0:\n            return count\n    return words", "prompt_tokens": 751, "completion_tokens": 293, "duration": 10.070661544799805}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicates = 0\n    for num in lst:\n        if num <= prev:\n            duplicates += 1\n        if duplicates > 1:\n            return False\n        prev = num\n    return True", "prompt_tokens": 910, "completion_tokens": 209, "duration": 7.108954191207886}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n\n    if max_start > min_end:\n        return \"NO\"\n\n    length = min_end - max_start\n\n    if length < 2:\n        return \"NO\"\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 993, "completion_tokens": 373, "duration": 11.359389305114746}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_magnitude = 0\n    product_sign = 1\n    \n    for num in arr:\n        if num > 0:\n            sum_magnitude += abs(num)\n        elif num < 0:\n            sum_magnitude -= abs(num)\n        \n        product_sign *= num // abs(num) if num != 0 else 1\n    \n    return sum_magnitude * product_sign", "prompt_tokens": 651, "completion_tokens": 245, "duration": 11.246510982513428}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def get_neighbors(grid, cell):\n        neighbors = []\n        row, col = cell\n        if row > 0:\n            neighbors.append((row - 1, col))\n        if row < len(grid) - 1:\n            neighbors.append((row + 1, col))\n        if col > 0:\n            neighbors.append((row, col - 1))\n        if col < len(grid[0]) - 1:\n            neighbors.append((row, col + 1))\n        return neighbors\n\n    current_cell = (0, 0)\n    path = []\n    visited_cells = set()\n\n    while len(path) < k:\n        path.append(grid[current_cell[0]][current_cell[1]])\n        visited_cells.add(current_cell)\n        neighbors = get_neighbors(grid, current_cell)\n        next_cell = min(neighbors, key=lambda x: grid[x[0]][x[1]] if x not in visited_cells else float('inf'))\n        current_cell = next_cell\n\n    return path", "prompt_tokens": 1402, "completion_tokens": 567, "duration": 10.971845149993896}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    sequence = [1, 3]\n    if n <= 1:\n        return sequence[:n+1]\n    if n == 2:\n        return sequence\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n    return sequence", "prompt_tokens": 920, "completion_tokens": 293, "duration": 10.77800989151001}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0", "prompt_tokens": 483, "completion_tokens": 142, "duration": 7.077935457229614}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)\n\n# Test cases\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True", "prompt_tokens": 663, "completion_tokens": 277, "duration": 11.414725542068481}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 7.811894655227661}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_alphabetical = False\n    if txt:\n        last_char = txt[-1]\n        if last_char.isalpha() and last_char != ' ':\n            is_last_char_alphabetical = True\n    return is_last_char_alphabetical", "prompt_tokens": 640, "completion_tokens": 174, "duration": 3.861126184463501}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 560, "completion_tokens": 146, "duration": 5.319288015365601}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    a = None\n    b = None\n    for num in lst:\n        if num < 0 and (a is None or num > a):\n            a = num\n        elif num > 0 and (b is None or num < b):\n            b = num\n    return (a, b)", "prompt_tokens": 644, "completion_tokens": 185, "duration": 6.228416204452515}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    else:\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n        \n        if a > b:\n            return str(a).replace('.', ',')\n        elif b > a:\n            return str(b).replace('.', ',')\n        else:\n            return None", "prompt_tokens": 700, "completion_tokens": 303, "duration": 13.760346412658691}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    even_count = 0\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_count += 1\n        even_sum += i\n        if even_count == 4:\n            if even_sum == n:\n                return True\n    return False", "prompt_tokens": 545, "completion_tokens": 207, "duration": 6.987517356872559}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 6.561175346374512}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    updated_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                if updated_text.endswith(\"-\"):\n                    updated_text = updated_text[:-1] + \"-\"\n                else:\n                    updated_text += \"-\"\n        else:\n            if count > 2:\n                updated_text = updated_text.replace(\" \" * (count - 1), \"-\")\n                count = 0\n            if ch == \" \":\n                updated_text += \"_\"\n            else:\n                updated_text += ch\n    return updated_text", "prompt_tokens": 640, "completion_tokens": 300, "duration": 8.990325927734375}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digit_count = 0\n    dot_found = False\n    valid_extension = False\n    \n    for char in file_name:\n        if char.isdigit():\n            digit_count += 1\n        elif char == '.':\n            if dot_found or file_name.index(char) == 0 or file_name.index(char) == len(file_name) - 1:\n                valid_extension = False\n                break\n            dot_found = True\n        elif char.isalpha():\n            if not dot_found:\n                valid_extension = True\n        else:\n            valid_extension = False\n            break\n    \n    if digit_count > 3 or not dot_found or not valid_extension:\n        return 'No'\n    else:\n        return 'Yes'", "prompt_tokens": 926, "completion_tokens": 394, "duration": 9.805090427398682}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 699, "completion_tokens": 184, "duration": 10.15857744216919}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 668, "completion_tokens": 210, "duration": 6.212286472320557}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    product = x_num * n_num / (x_denom * n_denom)\n    \n    return product.is_integer()", "prompt_tokens": 674, "completion_tokens": 169, "duration": 7.251677513122559}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    digit_sums = {num: sum(int(digit) for digit in str(abs(num))) for num in nums}\n    return sorted(nums, key=lambda x: (digit_sums[x], nums.index(x)))", "prompt_tokens": 595, "completion_tokens": 158, "duration": 3.1915698051452637}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 605, "completion_tokens": 197, "duration": 8.350568532943726}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 731, "completion_tokens": 245, "duration": 10.315535068511963}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet_order = {planet: index for index, planet in enumerate(planets)}\n    \n    if planet1 not in planet_order or planet2 not in planet_order:\n        return ()\n    \n    start = min(planet_order[planet1], planet_order[planet2])\n    end = max(planet_order[planet1], planet_order[planet2])\n    \n    result = [planet for planet in planets if start < planet_order[planet] < end]\n    \n    return tuple(result)", "prompt_tokens": 830, "completion_tokens": 295, "duration": 9.169644832611084}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 758, "completion_tokens": 178, "duration": 6.273123741149902}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 119, "duration": 6.178083896636963}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 612, "completion_tokens": 143, "duration": 5.509126663208008}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 851, "completion_tokens": 185, "duration": 11.01564073562622}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 965, "completion_tokens": 253, "duration": 9.247348546981812}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if n != m:\n        return False\n    concat_a = a + a\n    for i in range(m):\n        sub_a = concat_a[i:i+m]\n        if sub_a == b:\n            return True\n    return False", "prompt_tokens": 677, "completion_tokens": 232, "duration": 7.9993133544921875}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 459, "completion_tokens": 140, "duration": 5.571279764175415}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    mini_roman = ''\n    roman_values = [(k, v) for k, v in roman_numerals.items()]\n    \n    for value, numeral in roman_values:\n        while number >= value:\n            mini_roman += numeral\n            number -= value\n    \n    return mini_roman", "prompt_tokens": 600, "completion_tokens": 300, "duration": 9.868966579437256}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    side_a_squared = a * a\n    side_b_squared = b * b\n    side_c_squared = c * c\n\n    longest_side = max(side_a_squared, side_b_squared, side_c_squared)\n\n    if longest_side == side_a_squared + side_b_squared:\n        return True\n    elif longest_side == side_a_squared + side_c_squared:\n        return True\n    elif longest_side == side_b_squared + side_c_squared:\n        return True\n    else:\n        return False", "prompt_tokens": 675, "completion_tokens": 314, "duration": 7.4550793170928955}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars or (len(unique_chars) == max_unique_chars and word < max_word):\n            max_unique_chars = len(unique_chars)\n            max_word = word\n\n    return max_word", "prompt_tokens": 592, "completion_tokens": 172, "duration": 4.818901300430298}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    if remaining >= total_eaten_carrots:\n        remaining_carrots = remaining - total_eaten_carrots\n        total_eaten_carrots = total_eaten_carrots\n    else:\n        total_eaten_carrots = remaining + number\n        remaining_carrots = 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 950, "completion_tokens": 230, "duration": 4.539747476577759}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 773, "completion_tokens": 210, "duration": 8.481446027755737}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(char.isalpha() for char in result):\n        result = result[::-1]\n    return result", "prompt_tokens": 585, "completion_tokens": 188, "duration": 6.071267127990723}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    if text == '':\n        return None\n    \n    import hashlib\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    \n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 97, "duration": 3.918323516845703}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    if a > b:\n        a, b = b, a\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits", "prompt_tokens": 550, "completion_tokens": 145, "duration": 5.199394464492798}
