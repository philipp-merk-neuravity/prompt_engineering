{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    result = False\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            result = True\n            break\n    return result", "prompt_tokens": 643, "completion_tokens": 208, "duration": 5.237311601638794}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n    \n    for c in paren_string:\n        if c == '(':\n            open_braces_count += 1\n        elif c == ')' and open_braces_count > 0:\n            groups.append(current_group)\n            current_group = \"\"\n            open_braces_count -= 1\n        elif c != ' ':\n            current_group += c\n    \n    groups.append(current_group)\n    \n    return groups", "prompt_tokens": 666, "completion_tokens": 296, "duration": 7.372938394546509}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 6.138922214508057}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 584, "completion_tokens": 138, "duration": 4.183948755264282}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_absolute_diff = sum(abs(x - mean) for x in numbers)\n    mad = sum_absolute_diff / len(numbers)\n    return mad", "prompt_tokens": 659, "completion_tokens": 226, "duration": 6.181090354919434}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 527, "completion_tokens": 147, "duration": 6.450979948043823}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 665, "completion_tokens": 290, "duration": 7.125262975692749}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 3.677290439605713}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for number in numbers:\n        sum_result += number\n        product_result *= number\n    \n    return (sum_result, product_result)", "prompt_tokens": 552, "completion_tokens": 152, "duration": 6.208163738250732}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\nfrom collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    dq = deque()\n    k = 3  # Change k to the desired window size\n    \n    for i, num in enumerate(numbers):\n        while dq and numbers[dq[-1]] < num:\n            dq.pop()\n        dq.append(i)\n        \n        if dq[0] <= i - k:\n            dq.popleft()\n        \n        if i >= k - 1:\n            rolling_max_list.append(numbers[dq[0]])\n    \n    return rolling_max_list", "prompt_tokens": 669, "completion_tokens": 337, "duration": 7.43684458732605}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 624, "completion_tokens": 103, "duration": 4.331697702407837}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 508, "completion_tokens": 153, "duration": 6.102219343185425}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_str):\n            longest_str = string\n\n    return longest_str", "prompt_tokens": 545, "completion_tokens": 149, "duration": 4.867215394973755}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 94, "duration": 5.357494592666626}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    prefixes.append(string)\n    return prefixes", "prompt_tokens": 481, "completion_tokens": 159, "duration": 7.023209095001221}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 458, "completion_tokens": 109, "duration": 3.915764570236206}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 495, "completion_tokens": 149, "duration": 6.636470794677734}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    \n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    \n    return beats_list", "prompt_tokens": 715, "completion_tokens": 200, "duration": 4.708323001861572}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 143, "duration": 4.620907306671143}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    numerical_values = [numeral_dict[num] for num in numeral_list]\n    sorted_numerical_values = sorted(numerical_values)\n    sorted_numeral_words = [key for value, key in sorted(zip(sorted_numerical_values, numeral_dict.keys()))]\n    sorted_numbers = ' '.join(sorted_numeral_words)\n    return sorted_numbers", "prompt_tokens": 604, "completion_tokens": 294, "duration": 6.744554758071899}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    return closest_pair", "prompt_tokens": 707, "completion_tokens": 213, "duration": 7.022672653198242}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    rescaled_numbers = [(num - min_num) / range_num for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 626, "completion_tokens": 192, "duration": 5.73028826713562}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers", "prompt_tokens": 498, "completion_tokens": 105, "duration": 5.656878232955933}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for ch in string:\n        length += 1\n    return length", "prompt_tokens": 403, "completion_tokens": 86, "duration": 5.512821435928345}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 439, "completion_tokens": 129, "duration": 4.482482671737671}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 611, "completion_tokens": 168, "duration": 6.8080220222473145}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n    \n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    \n    return result", "prompt_tokens": 494, "completion_tokens": 124, "duration": 3.79831862449646}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    result = \"\"\n    for ch in string:\n        if ch.islower():\n            result += ch.upper()\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch\n    return result", "prompt_tokens": 439, "completion_tokens": 143, "duration": 4.681668043136597}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_str = \"\"\n    for string in strings:\n        concatenated_str += string\n    return concatenated_str", "prompt_tokens": 416, "completion_tokens": 82, "duration": 4.941165208816528}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [s for s in strings if s.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 108, "duration": 5.909080743789673}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums", "prompt_tokens": 538, "completion_tokens": 91, "duration": 3.445049285888672}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 518, "completion_tokens": 116, "duration": 6.6223273277282715}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0 or len(xs) == 0:\n        return None\n\n    largest_coeff = max([abs(coeff) for coeff in xs[1:]])\n    zero_point = None\n\n    if largest_coeff == 0:\n        return None\n\n    if xs[0] == 0:\n        zero_point = 0\n    else:\n        zero_point = -xs[0] / xs[1]\n\n    return zero_point", "prompt_tokens": 905, "completion_tokens": 234, "duration": 7.908505439758301}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    l_sorted = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            l_sorted.append(v)\n    temp.sort()\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            l_sorted.append(temp.pop(0))\n    return l_sorted", "prompt_tokens": 705, "completion_tokens": 235, "duration": 9.232660293579102}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 98, "duration": 4.612415552139282}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 500, "completion_tokens": 120, "duration": 5.049317121505737}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 526, "completion_tokens": 172, "duration": 4.758879661560059}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.append(sorted(l[i]))\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 610, "completion_tokens": 157, "duration": 7.307777404785156}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 698, "completion_tokens": 205, "duration": 6.390688896179199}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num):\n        a, b = 0, 1\n        while a < num:\n            a, b = b, a + b\n        return a == num\n\n    count = 0\n    num = 1\n    fib_list = [0, 1]\n\n    while count < n:\n        num += 1\n        if is_fibonacci(num) and is_prime(num):\n            count += 1\n            fib_list.append(num)\n\n    return fib_list[-1]", "prompt_tokens": 546, "completion_tokens": 265, "duration": 5.412487745285034}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    if n < 3:\n        return False\n    \n    for i in range(n-2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    \n    return False", "prompt_tokens": 763, "completion_tokens": 300, "duration": 11.939795017242432}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = (n * n) // 2\n    return collisions", "prompt_tokens": 632, "completion_tokens": 97, "duration": 4.522968769073486}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    new_list = [num + 1 for num in l]\n    return new_list", "prompt_tokens": 533, "completion_tokens": 86, "duration": 3.5348281860351562}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 651, "completion_tokens": 121, "duration": 6.107326507568359}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 537, "completion_tokens": 140, "duration": 6.006358861923218}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 394, "completion_tokens": 63, "duration": 4.458855152130127}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        next_element = sum(fib4_list[-4:])\n        fib4_list.append(next_element)\n    return fib4_list[-1]", "prompt_tokens": 724, "completion_tokens": 204, "duration": 4.746692419052124}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 491, "completion_tokens": 144, "duration": 3.566606044769287}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 510, "completion_tokens": 135, "duration": 4.1673643589019775}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    for i in range(1, n+1):\n        result = (2 * result) % p\n    return result", "prompt_tokens": 516, "completion_tokens": 93, "duration": 5.379172086715698}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 509, "completion_tokens": 111, "duration": 3.628209352493286}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 570, "completion_tokens": 107, "duration": 5.774252414703369}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 472, "completion_tokens": 79, "duration": 2.7301828861236572}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 398, "completion_tokens": 51, "duration": 2.9436984062194824}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    char_count = {}\n    for char in s0:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n\n    for char in s1:\n        if char not in char_count:\n            return False\n        char_count[char] -= 1\n\n    return all(count == 0 for count in char_count.values())", "prompt_tokens": 688, "completion_tokens": 247, "duration": 6.576354742050171}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    for i in range(2, n+1):\n        result = a + b\n        a, b = b, result\n\n    return result", "prompt_tokens": 445, "completion_tokens": 157, "duration": 7.0263214111328125}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 549, "completion_tokens": 167, "duration": 4.446654558181763}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    return increasing or decreasing", "prompt_tokens": 546, "completion_tokens": 181, "duration": 5.316895246505737}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for element in l1:\n        if element in l2 and element not in common_elements:\n            common_elements.append(element)\n    return sorted(common_elements)", "prompt_tokens": 556, "completion_tokens": 120, "duration": 5.879591941833496}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 487, "completion_tokens": 169, "duration": 6.877089262008667}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 5.448570728302002}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"(\":\n            stack.append(ch)\n        elif ch == \")\":\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0", "prompt_tokens": 535, "completion_tokens": 162, "duration": 6.1830973625183105}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 530, "completion_tokens": 81, "duration": 2.208200216293335}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    fibfib_list = [0, 0, 1]\n    \n    for i in range(3, n+1):\n        fibfib_i = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(fibfib_i)\n    \n    return fibfib_list[n]", "prompt_tokens": 681, "completion_tokens": 243, "duration": 5.502418756484985}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"python\"))  # 1", "prompt_tokens": 609, "completion_tokens": 241, "duration": 6.073139667510986}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift > length:\n        shift = shift % length\n    if shift == 0:\n        return x_str\n    shifted_part = x_str[-shift:]\n    remaining_part = x_str[:-shift]\n    result = shifted_part + remaining_part\n    return result", "prompt_tokens": 608, "completion_tokens": 265, "duration": 6.163639545440674}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum", "prompt_tokens": 538, "completion_tokens": 90, "duration": 5.17096209526062}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, [x.split()[0] for x in s.split() if x.isdigit()])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 814, "completion_tokens": 183, "duration": 7.882573366165161}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n            found_even = True\n        elif node % 2 == 0 and node == smallest_value:\n            smallest_index = min(i, smallest_index)\n    \n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1055, "completion_tokens": 290, "duration": 5.474552869796753}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n\n    for key in freq_map:\n        if key > 0 and freq_map[key] >= key and key > greatest_int:\n            greatest_int = key\n\n    return greatest_int", "prompt_tokens": 716, "completion_tokens": 217, "duration": 5.2314980030059814}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    min_lst, max_lst = [], []\n    for num in lst:\n        if len(min_lst) < len(max_lst):\n            min_lst.append(num)\n        else:\n            max_lst.append(num)\n    sorted_lst = min_lst + max_lst\n    return sorted_lst", "prompt_tokens": 634, "completion_tokens": 200, "duration": 5.963356018066406}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        area = round(area, 2)\n        return area\n    else:\n        return -1", "prompt_tokens": 648, "completion_tokens": 242, "duration": 6.4527907371521}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_palindrome = True\n    left = 0\n    right = len(q) - 1\n    \n    while left < right:\n        if q[left] != q[right]:\n            is_palindrome = False\n            break\n        left += 1\n        right -= 1\n    \n    if not is_palindrome:\n        return False\n    \n    if sum(q) <= w:\n        return True\n    else:\n        return False", "prompt_tokens": 882, "completion_tokens": 264, "duration": 7.587210416793823}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    \n    return min_changes", "prompt_tokens": 701, "completion_tokens": 198, "duration": 4.615744352340698}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 771, "completion_tokens": 211, "duration": 8.877831935882568}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    count = 0\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for p in primes:\n        if a % p == 0:\n            count += 1\n        if count == 3:\n            is_prime = True\n            break\n    if count < 3:\n        is_prime = False\n    return is_prime", "prompt_tokens": 623, "completion_tokens": 353, "duration": 8.001867294311523}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 1\n    while n**power <= x:\n        power += 1\n    return n**power == x", "prompt_tokens": 635, "completion_tokens": 130, "duration": 6.556688547134399}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    cube_root = int(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 578, "completion_tokens": 132, "duration": 3.368424654006958}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for d in num:\n        if d in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 5.9510180950164795}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_str = str(remainder) + binary_str\n        decimal = decimal // 2\n    binary_str = binary_str + \"db\"\n    return binary_str", "prompt_tokens": 675, "completion_tokens": 203, "duration": 7.490999460220337}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 592, "completion_tokens": 165, "duration": 3.765608310699463}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for GPA in grades:\n        if GPA == 4.0:\n            letter_grades.append('A+')\n        elif GPA > 3.7:\n            letter_grades.append('A')\n        elif GPA > 3.3:\n            letter_grades.append('A-')\n        elif GPA > 3.0:\n            letter_grades.append('B+')\n        elif GPA > 2.7:\n            letter_grades.append('B')\n        elif GPA > 2.3:\n            letter_grades.append('B-')\n        elif GPA > 2.0:\n            letter_grades.append('C+')\n        elif GPA > 1.7:\n            letter_grades.append('C')\n        elif GPA > 1.3:\n            letter_grades.append('C-')\n        elif GPA > 1.0:\n            letter_grades.append('D+')\n        elif GPA > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 1073, "completion_tokens": 507, "duration": 12.788928985595703}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 549, "completion_tokens": 200, "duration": 8.505308151245117}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 422, "completion_tokens": 137, "duration": 8.016274213790894}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum = 0\n    while N > 0:\n        sum += N % 10\n        N //= 10\n    return bin(sum)[2:]", "prompt_tokens": 613, "completion_tokens": 128, "duration": 2.993560552597046}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 453, "completion_tokens": 141, "duration": 5.531757354736328}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n\n    return ' '.join(ordered_words)", "prompt_tokens": 627, "completion_tokens": 158, "duration": 3.935482978820801}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, v in sorted(enumerate(row), key=lambda x: x[0], reverse=True):\n                if v == x:\n                    result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "prompt_tokens": 929, "completion_tokens": 245, "duration": 11.657720804214478}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    return sorted_array", "prompt_tokens": 811, "completion_tokens": 207, "duration": 7.3114683628082275}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        idx = alphabet.index(ch)\n        new_idx = (idx + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_idx]\n    return encrypted_s", "prompt_tokens": 620, "completion_tokens": 202, "duration": 8.594851970672607}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(lst)\n    second_smallest = None\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] != sorted_lst[i-1]:\n            second_smallest = sorted_lst[i]\n            break\n    return second_smallest", "prompt_tokens": 614, "completion_tokens": 185, "duration": 4.12590217590332}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 543, "completion_tokens": 125, "duration": 7.281903505325317}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 609, "completion_tokens": 137, "duration": 6.605517625808716}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for ch in message:\n        if ch.lower() in 'aeiou':\n            index = ord(ch.lower()) - ord('a')\n            new_index = (index + 2) % 26\n            new_ch = chr(ord('a') + new_index)\n            encoded_message += new_ch.upper()\n        elif ch.isalpha():\n            encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 644, "completion_tokens": 270, "duration": 7.074285984039307}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 983, "completion_tokens": 283, "duration": 11.66793155670166}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            is_lower = True\n        elif key.isupper():\n            is_upper = True\n        if is_lower and is_upper:\n            return False\n    \n    return is_lower or is_upper", "prompt_tokens": 737, "completion_tokens": 233, "duration": 7.591031789779663}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    prime_nums = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_nums.append(num)\n    return prime_nums", "prompt_tokens": 645, "completion_tokens": 179, "duration": 8.299441576004028}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n\n    if unit_a == 0 or unit_b == 0:\n        product = 0\n    else:\n        product = unit_a * unit_b\n\n    return product", "prompt_tokens": 529, "completion_tokens": 140, "duration": 5.902255296707153}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 115, "duration": 2.9908270835876465}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = int(num) + 1\n    diff_floor = num - floor_num\n    diff_ceil = ceil_num - num\n    if diff_floor <= diff_ceil:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 699, "completion_tokens": 201, "duration": 10.286883115768433}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    levels = []\n    stones = n\n    levels.append(stones)\n    while n > 1:\n        if n % 2 == 1:\n            n += 2\n        else:\n            n += 1\n        levels.append(n)\n    return levels", "prompt_tokens": 632, "completion_tokens": 174, "duration": 5.761449098587036}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in (',', ' '):\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 626, "completion_tokens": 205, "duration": 5.086545944213867}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even", "prompt_tokens": 534, "completion_tokens": 140, "duration": 4.755591630935669}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = 0\n        count = 0\n        for i in range(n, m+1):\n            total += i\n            count += 1\n        avg = round(total / count)\n        return bin(avg)", "prompt_tokens": 631, "completion_tokens": 162, "duration": 6.114668607711792}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        for ch in str(num):\n            if int(ch) % 2 == 0:\n                break\n        else:\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 598, "completion_tokens": 187, "duration": 7.1680006980896}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    result = []\n    arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    arr.reverse()\n    for num in arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 949, "completion_tokens": 299, "duration": 9.870949268341064}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 600, "completion_tokens": 173, "duration": 6.679916620254517}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 779, "completion_tokens": 185, "duration": 5.257690906524658}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 9.017770290374756}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    \n    for _ in range(len(arr)):\n        arr.insert(0, arr.pop())\n        if arr.index(min_val) != min_idx:\n            min_idx = arr.index(min_val)\n            if all(arr[i] <= arr[i+1] for i in range(len(arr)-1)):\n                return True\n    \n    return False", "prompt_tokens": 999, "completion_tokens": 242, "duration": 11.576450109481812}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    for num in lst2:\n        if num % 2 != 0:\n            count_odd += 1\n    if count_odd % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 759, "completion_tokens": 196, "duration": 4.623936176300049}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    max_count = max(counts.values())\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    return result", "prompt_tokens": 734, "completion_tokens": 257, "duration": 6.467563152313232}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    is_palindrome = True\n    start = 0\n    end = len(result) - 1\n    while start < end:\n        if result[start] != result[end]:\n            is_palindrome = False\n            break\n        start += 1\n        end -= 1\n    return (result, is_palindrome)", "prompt_tokens": 744, "completion_tokens": 261, "duration": 7.296605587005615}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    res_lst = []\n    for idx, s in enumerate(lst):\n        odd_count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        res_lst.append(f\"the number of odd elements {odd_count}n the str{idx+1}ng {s} of the {idx+1}nput.\")\n    return res_lst", "prompt_tokens": 745, "completion_tokens": 229, "duration": 6.006542921066284}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 538, "completion_tokens": 168, "duration": 6.3745574951171875}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    for row in grid:\n        for well in row:\n            if well > 0:\n                times += math.ceil(well / capacity)\n    return times", "prompt_tokens": 1032, "completion_tokens": 179, "duration": 6.822980165481567}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def custom_sort(num):\n        return bin(num).count('1'), num\n    \n    return sorted(arr, key=custom_sort)", "prompt_tokens": 703, "completion_tokens": 139, "duration": 4.2627081871032715}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    for word in s.split():\n        consonant_count = sum(1 for ch in word if ch in consonants)\n        if consonant_count == n:\n            words.append(word)\n    return words", "prompt_tokens": 792, "completion_tokens": 260, "duration": 8.964709281921387}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    last_consonant_index = -1\n    \n    for i in range(len(word)-1, -1, -1):\n        if word[i].lower() not in vowels and word[i].isalpha():\n            last_consonant_index = i\n        elif word[i].lower() in vowels and last_consonant_index != -1:\n            closest_vowel = word[i]\n            break\n    \n    return closest_vowel", "prompt_tokens": 727, "completion_tokens": 292, "duration": 8.010913372039795}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 772, "completion_tokens": 299, "duration": 5.674225807189941}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    max_list = []\n    for i in range(k):\n        max_list.append(arr[i])\n    return max_list", "prompt_tokens": 776, "completion_tokens": 122, "duration": 4.529371500015259}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for index, num in enumerate(lst):\n        if index % 2 == 0 and num % 2 != 0:\n            sum_odd_even += num\n    return sum_odd_even", "prompt_tokens": 523, "completion_tokens": 124, "duration": 7.534182548522949}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 613, "completion_tokens": 164, "duration": 13.368202209472656}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 211, "duration": 7.896486759185791}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    \n    month, day, year = map(int, date_parts)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 938, "completion_tokens": 312, "duration": 9.006616115570068}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        return count if not words_list else words_list", "prompt_tokens": 752, "completion_tokens": 292, "duration": 7.035758972167969}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicate_count = 0\n    for num in lst:\n        if num < prev:\n            return False\n        if num == prev:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                return False\n        prev = num\n    return True", "prompt_tokens": 927, "completion_tokens": 239, "duration": 7.242189407348633}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n    \n    if max_start > min_end:\n        return \"NO\"\n    \n    length = min_end - max_start\n    \n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 988, "completion_tokens": 337, "duration": 7.080994606018066}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_magnitudes = 0\n    product_signs = 1\n    \n    for num in arr:\n        sum_magnitudes += abs(num)\n        product_signs *= (1 if num > 0 else -1 if num < 0 else 0)\n    \n    return sum_magnitudes * product_signs", "prompt_tokens": 625, "completion_tokens": 208, "duration": 12.077463388442993}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def explore_path(i, j, path):\n        if len(path) == k:\n            paths.append(path[:])\n            return\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            x, y = i + dx, j + dy\n            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and not visited[x][y]:\n                visited[x][y] = True\n                path.append(grid[x][y])\n                explore_path(x, y, path)\n                path.pop()\n                visited[x][y] = False\n\n    paths = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n            visited[i][j] = True\n            explore_path(i, j, [grid[i][j]])\n\n    return min(paths)\n\n# Test cases\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))\nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))", "prompt_tokens": 1247, "completion_tokens": 473, "duration": 14.839126348495483}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci_seq = []\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [0, 1]\n    if n == 2:\n        return [0, 1, 1]\n    if n == 3:\n        return [0, 1, 1, 2]\n    \n    tribonacci_seq.extend([0, 1, 1])\n    a, b, c = 0, 1, 1\n    for _ in range(n - 2):\n        next_num = a + b + c\n        tribonacci_seq.append(next_num)\n        a, b, c = b, c, next_num\n    \n    return tribonacci_seq", "prompt_tokens": 951, "completion_tokens": 379, "duration": 10.660963296890259}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0", "prompt_tokens": 482, "completion_tokens": 141, "duration": 5.717070579528809}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return bool(stack)", "prompt_tokens": 671, "completion_tokens": 215, "duration": 6.467620134353638}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 7.948954343795776}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_letter = False\n    if not txt:\n        return False\n    else:\n        last_char = txt[-1]\n        if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n            is_last_char_letter = True\n    return is_last_char_letter", "prompt_tokens": 645, "completion_tokens": 191, "duration": 5.321662664413452}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 559, "completion_tokens": 145, "duration": 6.025643348693848}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    max_neg = None\n    min_pos = None\n    \n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        if num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    \n    return (max_neg, min_pos)", "prompt_tokens": 661, "completion_tokens": 225, "duration": 6.678054094314575}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return str(a).replace('.', ',')\n        elif b > a:\n            return str(b).replace('.', ',')\n        else:\n            return None", "prompt_tokens": 737, "completion_tokens": 317, "duration": 8.894037008285522}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    even_count = 0\n    even_sum = 0\n    while even_count < 4:\n        even_count += 1\n        even_sum += 2 * even_count\n        if even_sum == n:\n            return True\n    return False", "prompt_tokens": 522, "completion_tokens": 173, "duration": 5.52256441116333}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 525, "completion_tokens": 136, "duration": 6.75367283821106}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    modified_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                modified_text += \"-\"\n            else:\n                modified_text += \"_\"\n        else:\n            if count > 2:\n                modified_text += \"-\"\n            modified_text += ch\n            count = 0\n    return modified_text", "prompt_tokens": 615, "completion_tokens": 234, "duration": 6.981843709945679}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits_count = 0\n    dot_found = False\n    valid_extension = False\n    \n    for ch in file_name:\n        if ch.isdigit():\n            digits_count += 1\n        elif ch == '.':\n            dot_found = True\n        elif ch.isalpha():\n            if not dot_found:\n                valid_extension = True\n        elif file_name.endswith(('txt', 'exe', 'dll')) and dot_found:\n            valid_extension = True\n    \n    if digits_count > 3 or not dot_found or not valid_extension:\n        return 'No'\n    else:\n        return 'Yes'", "prompt_tokens": 899, "completion_tokens": 342, "duration": 10.482345581054688}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 698, "completion_tokens": 183, "duration": 6.466768503189087}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 685, "completion_tokens": 227, "duration": 8.50976037979126}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    product = x_fraction * n_fraction\n    return product == int(product)", "prompt_tokens": 647, "completion_tokens": 122, "duration": 6.5125412940979}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums_with_sum = {num: (digit_sum(num), index) for index, num in enumerate(nums)}\n    sorted_nums = [num for num, _ in sorted(nums_with_sum.items(), key=lambda x: (x[1][0], x[1][1]))]\n    return sorted_nums", "prompt_tokens": 612, "completion_tokens": 215, "duration": 5.891512155532837}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        num_str = str(abs(num))\n        if num > 10 and int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 579, "completion_tokens": 152, "duration": 6.091697692871094}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 244, "duration": 7.250752687454224}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        \n        if index1 < index2:\n            result = planets[index1+1:index2]\n            return tuple(result)\n        else:\n            result = planets[index2+1:index1]\n            return tuple(result)\n    else:\n        return ()", "prompt_tokens": 826, "completion_tokens": 274, "duration": 6.823869466781616}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 735, "completion_tokens": 150, "duration": 3.601186752319336}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 119, "duration": 5.5693066120147705}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 612, "completion_tokens": 143, "duration": 6.785792589187622}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 6.243971109390259}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 948, "completion_tokens": 236, "duration": 9.663626909255981}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    combined_str = a + a\n    found = False\n    for i in range(n):\n        temp_str = combined_str[i:i+m]\n        if temp_str == b or temp_str in [b[j:]+b[:j] for j in range(1, m)]:\n            found = True\n            break\n    return found", "prompt_tokens": 711, "completion_tokens": 287, "duration": 8.520428895950317}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 3.7339107990264893}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    roman_numeral = ''\n    \n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    \n    return roman_numeral", "prompt_tokens": 570, "completion_tokens": 252, "duration": 6.782955169677734}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 541, "completion_tokens": 109, "duration": 4.593951225280762}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 588, "completion_tokens": 164, "duration": 5.12496280670166}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    remaining_carrots = remaining - total_eaten_carrots if total_eaten_carrots <= remaining else 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 916, "completion_tokens": 162, "duration": 6.587135076522827}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 854, "completion_tokens": 291, "duration": 10.15608835220337}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 195, "duration": 5.0162293910980225}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 478, "completion_tokens": 98, "duration": 5.08317494392395}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    start_point = min(a, b)\n    end_point = max(a, b)\n    even_digits = [num for num in range(start_point, end_point+1) if num % 2 == 0]\n    return even_digits", "prompt_tokens": 605, "completion_tokens": 199, "duration": 6.636149644851685}
