{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    result = False\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            result = True\n            break\n    return result", "prompt_tokens": 641, "completion_tokens": 206, "duration": 6.284785747528076}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n\n    for ch in paren_string:\n        if ch == '(':\n            open_braces_count += 1\n        elif ch == ')' and open_braces_count > 0:\n            current_group += ch\n            open_braces_count -= 1\n            if open_braces_count == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        elif ch != ' ':\n            current_group += ch\n\n    return groups", "prompt_tokens": 704, "completion_tokens": 343, "duration": 9.496237516403198}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return float('0.' + str(number).split('.')[1])\n\n# Test the function\nprint(truncate_number(3.5))", "prompt_tokens": 506, "completion_tokens": 117, "duration": 3.6379776000976562}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 586, "completion_tokens": 140, "duration": 4.160196542739868}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_of_absolute_diff = sum(abs(x - mean) for x in numbers)\n    mad = sum_of_absolute_diff / len(numbers)\n    return mad", "prompt_tokens": 665, "completion_tokens": 234, "duration": 6.920557737350464}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 531, "completion_tokens": 151, "duration": 7.9563024044036865}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 678, "completion_tokens": 303, "duration": 7.115109205245972}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 4.129131317138672}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 149, "duration": 4.493175029754639}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    max_values = []\n    for num in numbers:\n        max_values.append(num)\n        rolling_max_list.append(max(max_values))\n    return rolling_max_list", "prompt_tokens": 573, "completion_tokens": 172, "duration": 5.017832279205322}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 626, "completion_tokens": 105, "duration": 4.285319566726685}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 504, "completion_tokens": 149, "duration": 4.972975254058838}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    \n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    \n    return longest_str", "prompt_tokens": 553, "completion_tokens": 158, "duration": 5.640849590301514}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 449, "completion_tokens": 95, "duration": 4.553696632385254}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    prefix = \"\"\n    for ch in string:\n        prefix += ch\n        prefixes.append(prefix)\n    return prefixes", "prompt_tokens": 483, "completion_tokens": 154, "duration": 4.486613512039185}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 450, "completion_tokens": 101, "duration": 4.104446172714233}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    unique_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in unique_chars:\n            unique_chars.add(char)\n    return len(unique_chars)", "prompt_tokens": 479, "completion_tokens": 132, "duration": 5.275317192077637}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    \n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    \n    return beats_list", "prompt_tokens": 715, "completion_tokens": 200, "duration": 5.3178791999816895}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 515, "completion_tokens": 142, "duration": 4.8977673053741455}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    sorted_numerals = sorted(numeral_list, key=lambda x: numeral_dict[x])\n    return ' '.join(sorted_numerals)", "prompt_tokens": 595, "completion_tokens": 242, "duration": 7.0068206787109375}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 724, "completion_tokens": 232, "duration": 7.076241493225098}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(num - min_value) / range_value for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 628, "completion_tokens": 194, "duration": 5.727594375610352}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n    return filtered_values", "prompt_tokens": 496, "completion_tokens": 101, "duration": 3.909799575805664}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 401, "completion_tokens": 89, "duration": 3.799011468887329}
{"task_id": "HumanEval/24", "generated_code": "\ndef largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 420, "completion_tokens": 100, "duration": 3.9184134006500244}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 621, "completion_tokens": 178, "duration": 5.716728210449219}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n    return result", "prompt_tokens": 481, "completion_tokens": 102, "duration": 4.152513265609741}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 136, "duration": 4.482231378555298}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 426, "completion_tokens": 92, "duration": 3.678504228591919}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [s for s in strings if s.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 5.481303453445435}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums", "prompt_tokens": 538, "completion_tokens": 91, "duration": 3.7614824771881104}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 544, "completion_tokens": 170, "duration": 5.08723521232605}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        return \"Error: List must have an even number of coefficients\"\n    \n    leading_coeff_index = max((i for i, coeff in enumerate(xs) if coeff != 0), default=0)\n    leading_coeff = xs[leading_coeff_index]\n    degree = len(xs) - 1\n    \n    def f(x):\n        return poly(xs, x)\n    \n    def f_prime(x):\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs)])\n    \n    x0 = 1.0  # Initial guess for Newton's method\n    tolerance = 1e-6\n    max_iterations = 1000\n    \n    for _ in range(max_iterations):\n        x1 = x0 - f(x0) / f_prime(x0)\n        if abs(x1 - x0) < tolerance:\n            return x1\n        x0 = x1\n    \n    return x0", "prompt_tokens": 902, "completion_tokens": 373, "duration": 8.594699382781982}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    l_sorted = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            l_sorted.append(v)\n    temp.sort()\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            l_sorted.append(temp.pop(0))\n    return l_sorted", "prompt_tokens": 707, "completion_tokens": 237, "duration": 6.742997169494629}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    unique_list.sort()\n    return unique_list", "prompt_tokens": 460, "completion_tokens": 99, "duration": 4.503652095794678}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 501, "completion_tokens": 121, "duration": 4.563456773757935}
{"task_id": "HumanEval/36", "generated_code": "\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 513, "completion_tokens": 155, "duration": 5.261054277420044}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.extend(sorted(l[i:]))\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 618, "completion_tokens": 166, "duration": 4.378357172012329}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 799, "completion_tokens": 306, "duration": 29.832319974899292}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_list = [0, 1]\n    count = 2\n    num = 0\n\n    while count < n:\n        next_fib = fib_list[-1] + fib_list[-2]\n        fib_list.append(next_fib)\n        count += 1\n\n    for i in range(len(fib_list) - 1, -1, -1):\n        if is_prime(fib_list[i]):\n            num = fib_list[i]\n            break\n\n    return num", "prompt_tokens": 579, "completion_tokens": 291, "duration": 7.611079931259155}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 740, "completion_tokens": 265, "duration": 5.790521144866943}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    for i in range(1, n+1):\n        collisions += i\n    return collisions", "prompt_tokens": 610, "completion_tokens": 86, "duration": 5.75803017616272}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [num + 1 for num in l]", "prompt_tokens": 533, "completion_tokens": 79, "duration": 3.7255194187164307}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 666, "completion_tokens": 136, "duration": 7.197416305541992}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 550, "completion_tokens": 157, "duration": 7.417611598968506}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 395, "completion_tokens": 64, "duration": 2.1189210414886475}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n\n    if n < 4:\n        return fib4_list[n]\n\n    for i in range(4, n+1):\n        next_fib4 = fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4]\n        fib4_list.append(next_fib4)\n\n    return fib4_list[n]", "prompt_tokens": 722, "completion_tokens": 228, "duration": 7.007486820220947}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 491, "completion_tokens": 144, "duration": 5.3077263832092285}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 493, "completion_tokens": 117, "duration": 6.228509902954102}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 505, "completion_tokens": 59, "duration": 7.119846820831299}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 523, "completion_tokens": 126, "duration": 5.197058200836182}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch.lower() not in ['a', 'e', 'i', 'o', 'u']:\n            result += ch\n    return result", "prompt_tokens": 597, "completion_tokens": 144, "duration": 5.364953279495239}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 472, "completion_tokens": 83, "duration": 6.177593946456909}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    result = x + y\n    return result", "prompt_tokens": 398, "completion_tokens": 51, "duration": 5.856693267822266}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    char_count = {}\n    \n    for ch in s0:\n        if ch not in char_count:\n            char_count[ch] = 1\n        else:\n            char_count[ch] += 1\n    \n    for ch in s1:\n        if ch not in char_count:\n            return False\n        else:\n            char_count[ch] -= 1\n    \n    return all(value == 0 for value in char_count.values())", "prompt_tokens": 721, "completion_tokens": 288, "duration": 5.581364631652832}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for i in range(2, n+1):\n        result = a + b\n        a = b\n        b = result\n    \n    return result", "prompt_tokens": 444, "completion_tokens": 157, "duration": 7.316165924072266}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "prompt_tokens": 561, "completion_tokens": 181, "duration": 6.910905361175537}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l):\n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            is_increasing = False\n        if l[i] < l[i+1]:\n            is_decreasing = False\n    \n    if is_increasing or is_decreasing:\n        return True\n    else:\n        return False", "prompt_tokens": 549, "completion_tokens": 201, "duration": 10.959497928619385}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2 and e1 not in common_elements:\n                common_elements.append(e1)\n    return sorted(common_elements)", "prompt_tokens": 597, "completion_tokens": 173, "duration": 4.848912954330444}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime = factor\n        else:\n            factor += 1\n    return largest_prime", "prompt_tokens": 487, "completion_tokens": 166, "duration": 6.005181550979614}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 7.141904354095459}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 535, "completion_tokens": 159, "duration": 5.6553356647491455}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 563, "completion_tokens": 113, "duration": 7.94254469871521}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        fibfib_i = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(fibfib_i)\n\n    return fibfib_list[n]", "prompt_tokens": 681, "completion_tokens": 241, "duration": 6.1438148021698}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"python\"))  # 1", "prompt_tokens": 606, "completion_tokens": 238, "duration": 4.75241231918335}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    str_x = str(x)\n    len_x = len(str_x)\n    effective_shift = shift % len_x\n    if effective_shift == 0:\n        return str_x\n    shifted_str = str_x[-effective_shift:] + str_x[:-effective_shift]\n    return shifted_str", "prompt_tokens": 553, "completion_tokens": 198, "duration": 7.486724615097046}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 77, "duration": 7.746034383773804}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, [x.split()[0] for x in s.split() if x.isdigit()])\n    return n - apples - oranges", "prompt_tokens": 775, "completion_tokens": 137, "duration": 6.80122971534729}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = None\n    smallest_index = None\n    for index, node in enumerate(arr):\n        if node % 2 == 0 and (smallest_value is None or node < smallest_value):\n            smallest_value = node\n            smallest_index = index\n        elif node % 2 == 0 and node == smallest_value and index < smallest_index:\n            smallest_index = index\n    if smallest_value is not None:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1037, "completion_tokens": 267, "duration": 7.393988609313965}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_dict = {}\n    greatest_integer = -1\n\n    for num in lst:\n        if num > 0:\n            freq_dict[num] = freq_dict.get(num, 0) + 1\n            if freq_dict[num] >= num:\n                greatest_integer = max(greatest_integer, num)\n\n    return greatest_integer", "prompt_tokens": 700, "completion_tokens": 185, "duration": 7.971911907196045}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result_lst = []\n    while lst:\n        result_lst.append(lst.pop(0))\n        if len(lst) > 1:\n            result_lst.append(lst.pop())\n    return result_lst", "prompt_tokens": 621, "completion_tokens": 165, "duration": 4.546850681304932}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 191, "duration": 7.551446914672852}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_palindrome = True\n    left_index = 0\n    right_index = len(q) - 1\n    \n    while left_index < right_index:\n        if q[left_index] != q[right_index]:\n            is_palindrome = False\n            break\n        left_index += 1\n        right_index -= 1\n    \n    sum_elements = sum(q)\n    \n    return is_palindrome and sum_elements <= w", "prompt_tokens": 954, "completion_tokens": 333, "duration": 7.578756332397461}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n            if arr[left] < arr[right]:\n                left += 1\n            else:\n                right -= 1\n        else:\n            left += 1\n            right -= 1\n    \n    return min_changes", "prompt_tokens": 742, "completion_tokens": 265, "duration": 10.039920091629028}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2 or total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 733, "completion_tokens": 167, "duration": 3.7346208095550537}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    count = 0\n    for i in range(2, a+1):\n        if a % i == 0:\n            factors = []\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n                elif j == i - 1:\n                    factors.append(i)\n            if len(factors) > 0:\n                count += 1\n        if count == 3:\n            return True\n    return False", "prompt_tokens": 557, "completion_tokens": 246, "duration": 5.280768394470215}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1 and n != 1:\n        return True\n    if x == 1 and n == 1:\n        return False\n    if x != 1 and n == 1:\n        return False\n\n    power = 1\n    while n**power <= x:\n        if n**power == x:\n            return True\n        power += 1\n\n    return False", "prompt_tokens": 641, "completion_tokens": 192, "duration": 6.702702522277832}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    cube_root = int(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 548, "completion_tokens": 101, "duration": 5.066116809844971}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 6.906466245651245}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = 'db'\n    while decimal > 0:\n        binary_str += str(decimal % 2)\n        decimal //= 2\n    return binary_str[::-1] + 'db'", "prompt_tokens": 665, "completion_tokens": 177, "duration": 8.288952827453613}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 596, "completion_tokens": 169, "duration": 6.1874096393585205}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1106, "completion_tokens": 570, "duration": 11.69307541847229}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    count = 0\n    for char in string:\n        count += 1\n    if count <= 1:\n        return False\n    if count == 2:\n        return True\n    for i in range(2, count):\n        if count % i == 0:\n            return False\n    return True", "prompt_tokens": 536, "completion_tokens": 189, "duration": 4.74776554107666}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 422, "completion_tokens": 137, "duration": 7.7386064529418945}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 601, "completion_tokens": 99, "duration": 50.807650566101074}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_index = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_index += lst[i]\n    return sum_even_odd_index", "prompt_tokens": 448, "completion_tokens": 136, "duration": 5.5536346435546875}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    \n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    \n    return ' '.join(ordered_words)", "prompt_tokens": 629, "completion_tokens": 162, "duration": 7.190356492996216}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 929, "completion_tokens": 220, "duration": 6.244744777679443}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    sum_first_last = array[0] + array[-1]\n    \n    if sum_first_last % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    \n    return sorted_array", "prompt_tokens": 809, "completion_tokens": 207, "duration": 5.512868642807007}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 201, "duration": 8.106237649917603}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(lst)\n    second_smallest = None\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] != sorted_lst[i-1]:\n            second_smallest = sorted_lst[i]\n            break\n    return second_smallest", "prompt_tokens": 618, "completion_tokens": 189, "duration": 4.636129140853882}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 565, "completion_tokens": 147, "duration": 5.2463343143463135}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    total = x + y + z\n    return any(num == total - num2 for num in [x, y, z] for num2 in [x, y, z])\n\n# Test cases\nprint(any_int(5, 2, 7))  # True\nprint(any_int(3, 2, 2))  # False\nprint(any_int(3, -2, 1))  # True\nprint(any_int(3.6, -2.2, 2))  # False", "prompt_tokens": 625, "completion_tokens": 242, "duration": 8.127578020095825}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for ch in message:\n        if ch.islower():\n            encoded_message += ch.upper()\n        elif ch.isupper():\n            encoded_message += ch.lower()\n        elif ch.lower() in ['a', 'e', 'i', 'o', 'u']:\n            index = ord(ch.lower()) - ord('a')\n            new_index = (index + 2) % 26\n            new_ch = chr(ord('a') + new_index)\n            encoded_message += new_ch\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 661, "completion_tokens": 308, "duration": 8.49216341972351}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def calculate_sum_of_digits(num):\n        sum_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_digits += digit\n            num //= 10\n        return sum_digits\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n\n    if largest_prime is None:\n        return 0\n\n    return calculate_sum_of_digits(largest_prime)", "prompt_tokens": 1013, "completion_tokens": 351, "duration": 10.147541999816895}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            is_lower = True\n        elif key.isupper():\n            is_upper = True\n    \n    if (is_lower and not is_upper) or (is_upper and not is_lower):\n        return False\n    else:\n        return True", "prompt_tokens": 740, "completion_tokens": 245, "duration": 13.259324550628662}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n            if len(primes) == n:\n                break\n    return primes", "prompt_tokens": 648, "completion_tokens": 181, "duration": 8.1415376663208}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 543, "completion_tokens": 116, "duration": 4.982342720031738}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 115, "duration": 6.422186374664307}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = int(num) + 1\n    diff_floor = abs(num - floor_num)\n    diff_ceil = abs(num - ceil_num)\n    \n    if diff_floor <= diff_ceil:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 687, "completion_tokens": 192, "duration": 7.680562734603882}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(n):\n        stones_list.append(stones)\n        \n        if n % 2 == 1:\n            stones += 2\n        else:\n            stones += 1\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 144, "duration": 6.727881908416748}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    \n    for c in s:\n        if c not in (',', ' '):\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    \n    if current_word:\n        words.append(current_word)\n    \n    return words", "prompt_tokens": 621, "completion_tokens": 203, "duration": 6.313127517700195}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0 and num > biggest_even:\n            biggest_even = num\n    return biggest_even", "prompt_tokens": 500, "completion_tokens": 109, "duration": 8.154462575912476}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    sum = 0\n    count = 0\n\n    for i in range(n, m+1):\n        sum += i\n        count += 1\n\n    avg = round(sum / count)\n    return bin(avg)", "prompt_tokens": 627, "completion_tokens": 155, "duration": 7.705349683761597}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    \n    return sorted(result)", "prompt_tokens": 553, "completion_tokens": 162, "duration": 5.768787622451782}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = [ \n        \"One\" if num == 1 else \n        \"Two\" if num == 2 else \n        \"Three\" if num == 3 else \n        \"Four\" if num == 4 else \n        \"Five\" if num == 5 else \n        \"Six\" if num == 6 else \n        \"Seven\" if num == 7 else \n        \"Eight\" if num == 8 else \n        \"Nine\" for num in filtered_arr\n    ]\n    return result", "prompt_tokens": 989, "completion_tokens": 324, "duration": 7.491101503372192}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 581, "completion_tokens": 154, "duration": 9.788037776947021}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 784, "completion_tokens": 190, "duration": 6.4323554039001465}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num != 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 9.068573951721191}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    shift = len(arr) - min_idx - 1\n    new_arr = arr[-shift:] + arr[:-shift]\n    return new_arr == sorted(new_arr)", "prompt_tokens": 988, "completion_tokens": 199, "duration": 9.819271326065063}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_count = 0\n    even_count = 0\n    \n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    for num in lst2:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if odd_count % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 827, "completion_tokens": 291, "duration": 8.53469705581665}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    histogram_dict = {}\n    for letter in letters:\n        if letter in histogram_dict:\n            histogram_dict[letter] += 1\n        else:\n            histogram_dict[letter] = 1\n    \n    max_count = max(histogram_dict.values())\n    max_letters_dict = {letter: count for letter, count in histogram_dict.items() if count == max_count}\n    \n    return max_letters_dict", "prompt_tokens": 731, "completion_tokens": 265, "duration": 8.137101650238037}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "prompt_tokens": 720, "completion_tokens": 189, "duration": 7.828601121902466}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result_lst = []\n    for i, string in enumerate(lst):\n        odd_count = sum(1 for ch in string if ch.isdigit() and int(ch) % 2 != 0)\n        result_lst.append(f\"the number of odd elements {odd_count}n the str{i+1}ng {string} of the {i+1}nput.\")\n    return result_lst", "prompt_tokens": 745, "completion_tokens": 228, "duration": 5.732527256011963}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            if current_sum < min_sum:\n                min_sum = current_sum\n    return min_sum", "prompt_tokens": 549, "completion_tokens": 183, "duration": 3.711538076400757}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    num_buckets = 0\n    for row in grid:\n        for well in row:\n            if well == 1:\n                buckets_needed = math.ceil(well / capacity)\n                num_buckets += buckets_needed\n    return num_buckets", "prompt_tokens": 1037, "completion_tokens": 194, "duration": 4.072603464126587}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    ones_count = {}\n    for num in arr:\n        bin_num = bin(num)[2:]\n        ones_count[num] = bin_num.count('1')\n    sorted_arr = sorted(arr, key=lambda x: (ones_count[x], x))\n    return sorted_arr", "prompt_tokens": 765, "completion_tokens": 229, "duration": 9.573634147644043}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n    \n    def is_consonant(char):\n        return char.isalpha() and char.lower() not in 'aeiou'\n    \n    for word in s.split():\n        consonant_count = sum(1 for char in word if is_consonant(char))\n        if consonant_count == n:\n            words.append(word)\n    \n    return words", "prompt_tokens": 751, "completion_tokens": 221, "duration": 8.920737743377686}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    found_vowel = False\n    \n    for char in word[::-1]:\n        if char in consonants:\n            if found_vowel:\n                break\n        elif char.lower() in \"aeiou\":\n            if not found_vowel:\n                closest_vowel = char\n                found_vowel = True\n    \n    return closest_vowel", "prompt_tokens": 705, "completion_tokens": 256, "duration": 6.259339809417725}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    new_string = lst[0] + lst[1]\n    for ch in new_string:\n        if ch == '(':\n            count += 1\n        elif ch == ')':\n            count -= 1\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 717, "completion_tokens": 199, "duration": 6.8491950035095215}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    result = []\n    for i in range(k):\n        result.append(arr[i])\n    return result", "prompt_tokens": 775, "completion_tokens": 118, "duration": 4.7431254386901855}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 526, "completion_tokens": 129, "duration": 6.005075454711914}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 613, "completion_tokens": 164, "duration": 5.426632404327393}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 835, "completion_tokens": 213, "duration": 7.2311928272247314}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    \n    month, day, year = map(int, date_parts)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 944, "completion_tokens": 318, "duration": 9.359246015548706}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words = []\n    if ' ' in txt:\n        words = txt.split()\n    elif ',' in txt:\n        words = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        if count > 0:\n            return count\n    return words", "prompt_tokens": 758, "completion_tokens": 299, "duration": 6.239216327667236}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    count = 0\n    sorted = True\n    for num in lst:\n        if num == prev:\n            count += 1\n            if count > 1:\n                sorted = False\n                break\n        if prev is not None and num < prev:\n            sorted = False\n            break\n        prev = num\n    return sorted", "prompt_tokens": 941, "completion_tokens": 269, "duration": 8.441248893737793}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n\n    if max_start > min_end:\n        return \"NO\"\n\n    length = min_end - max_start + 1\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 992, "completion_tokens": 363, "duration": 8.847057580947876}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_magnitudes = 0\n    product_signs = 1\n    \n    for num in arr:\n        sum_magnitudes += abs(num) if num != 0 else 0\n        product_signs *= 1 if num > 0 else (-1 if num < 0 else 0)\n    \n    return sum_magnitudes * product_signs", "prompt_tokens": 656, "completion_tokens": 248, "duration": 7.044531583786011}
{"task_id": "HumanEval/129", "generated_code": "from collections import deque\n\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < n\n\n    def get_neighbors(x, y):\n        neighbors = []\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny):\n                neighbors.append((nx, ny))\n        return neighbors\n\n    start_value = min(min(row) for row in grid)\n    start_cell = [(i, j) for i in range(n) for j in range(n) if grid[i][j] == start_value][0]\n\n    path = []\n    visited_cells = set()\n    queue = deque([(start_cell, [grid[start_cell[0]][start_cell[1]]])])\n    visited_cells.add(start_cell)\n\n    while queue and len(path) < k:\n        current_cell, current_path = queue.popleft()\n        path = current_path\n\n        for neighbor in get_neighbors(current_cell[0], current_cell[1]):\n            if neighbor not in visited_cells:\n                new_path = current_path + [grid[neighbor[0]][neighbor[1]]]\n                queue.append((neighbor, new_path))\n                visited_cells.add(neighbor)\n\n    return path[:k]\n\n# Test cases\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))  # Output: [1, 2, 1]\nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))  # Output: [1]", "prompt_tokens": 1296, "completion_tokens": 625, "duration": 12.688423871994019}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    seq = [1, 3]\n    if n < 2:\n        return seq[:n+1]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            seq.append(1 + i // 2)\n        else:\n            seq.append(sum(seq[-3:]))\n    return seq", "prompt_tokens": 832, "completion_tokens": 182, "duration": 9.385645627975464}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    if product == 1:\n        return 0\n    else:\n        return product", "prompt_tokens": 480, "completion_tokens": 146, "duration": 6.890628099441528}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)\n\n# Test cases\nprint(is_nested('[[]]'))  # True\nprint(is_nested('[]]]]]]][[[[[]'))  # False\nprint(is_nested('[][]'))  # False\nprint(is_nested('[]'))  # False\nprint(is_nested('[[][]]'))  # True\nprint(is_nested('[[]][['))  # True", "prompt_tokens": 676, "completion_tokens": 278, "duration": 9.364821434020996}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 7.274614095687866}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_alone = False\n    if txt == \"\":\n        return False\n    else:\n        txt = txt.rstrip()\n        last_char = txt[-1]\n        if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n            is_last_char_alone = True\n    return is_last_char_alone", "prompt_tokens": 659, "completion_tokens": 214, "duration": 8.286710262298584}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 568, "completion_tokens": 154, "duration": 5.250373840332031}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    a = None\n    b = None\n    for num in lst:\n        if num < 0 and (a is None or num > a):\n            a = num\n        if num > 0 and (b is None or num < b):\n            b = num\n    return (a, b)", "prompt_tokens": 645, "completion_tokens": 186, "duration": 6.833147764205933}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif type(a) == int or type(a) == float:\n        if type(b) == str:\n            if ',' in b:\n                return b\n            else:\n                return float(b.replace(',', '.'))\n        else:\n            return None\n    elif type(b) == int or type(b) == float:\n        if type(a) == str:\n            if ',' in a:\n                return a\n            else:\n                return float(a.replace(',', '.'))\n        else:\n            return None\n    else:\n        return None", "prompt_tokens": 686, "completion_tokens": 297, "duration": 8.745056390762329}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) > 0:\n            count += 1\n    return count == 4", "prompt_tokens": 523, "completion_tokens": 191, "duration": 11.682735204696655}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        temp = 1\n        for j in range(i, 0, -1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 6.665174245834351}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    fixed_text = \"\"\n    consecutive_spaces = 0\n    \n    for i, ch in enumerate(text):\n        if ch == \" \":\n            consecutive_spaces += 1\n        if ch != \" \" or i == len(text) - 1:\n            if consecutive_spaces > 2:\n                fixed_text += \"-\"\n            else:\n                fixed_text += \"_\"\n            consecutive_spaces = 0\n            fixed_text += ch\n    \n    return fixed_text", "prompt_tokens": 655, "completion_tokens": 283, "duration": 10.214813470840454}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digit_count = 0\n    dot_flag = False\n    valid_start_letter = False\n    valid_extensions = ['txt', 'exe', 'dll']\n\n    for ch in file_name:\n        if ch.isdigit():\n            digit_count += 1\n            if digit_count > 3:\n                return 'No'\n        elif ch == '.':\n            if dot_flag:\n                return 'No'\n            dot_flag = True\n        elif ch.isalpha():\n            if not dot_flag:\n                valid_start_letter = True\n        elif ch.isspace():\n            return 'No'\n\n    if not dot_flag or not valid_start_letter:\n        return 'No'\n\n    extension = file_name.split('.')[-1]\n    if extension not in valid_extensions:\n        return 'No'\n\n    return 'Yes'", "prompt_tokens": 929, "completion_tokens": 413, "duration": 10.79479193687439}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 698, "completion_tokens": 183, "duration": 8.222208261489868}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 678, "completion_tokens": 219, "duration": 8.004085540771484}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False", "prompt_tokens": 638, "completion_tokens": 156, "duration": 4.936930179595947}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums_with_sum = {num: (sum_of_digits(num), index) for index, num in enumerate(nums)}\n    sorted_nums = [num for num, _ in sorted(nums_with_sum.items(), key=lambda x: (x[1][0], x[1][1]))]\n    return sorted_nums", "prompt_tokens": 622, "completion_tokens": 227, "duration": 9.655009984970093}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) % 10\n            last_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 605, "completion_tokens": 197, "duration": 9.990268468856812}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 244, "duration": 8.994028806686401}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet_order = {planet: index for index, planet in enumerate(planets)}\n    \n    if planet1 not in planet_order or planet2 not in planet_order:\n        return ()\n    \n    lower_bound = min(planet_order[planet1], planet_order[planet2])\n    upper_bound = max(planet_order[planet1], planet_order[planet2])\n    \n    result = [planet for planet in planets if lower_bound < planet_order[planet] < upper_bound]\n    \n    return tuple(sorted(result, key=lambda x: planet_order[x]))\n\n# Test cases\nprint(bf(\"Jupiter\", \"Neptune\"))  # (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))    # (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))   # (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "prompt_tokens": 851, "completion_tokens": 404, "duration": 9.732525825500488}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 746, "completion_tokens": 166, "duration": 7.4357054233551025}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 119, "duration": 7.717387676239014}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 607, "completion_tokens": 138, "duration": 9.215291500091553}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 5.6832873821258545}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 947, "completion_tokens": 235, "duration": 5.50665545463562}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    a_concat = a + a\n    for i in range(n):\n        if b in a_concat[i:i+m]:\n            return True\n    return False", "prompt_tokens": 645, "completion_tokens": 193, "duration": 5.485499620437622}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 459, "completion_tokens": 140, "duration": 8.021527767181396}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    roman_numeral = ''\n    \n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    \n    return roman_numeral", "prompt_tokens": 575, "completion_tokens": 257, "duration": 8.563689231872559}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 561, "completion_tokens": 129, "duration": 7.229608535766602}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 588, "completion_tokens": 164, "duration": 5.989634990692139}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + remaining\n    if total_eaten_carrots >= need:\n        remaining_carrots = remaining - (need - number)\n        total_eaten_carrots = need\n    else:\n        remaining_carrots = 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 934, "completion_tokens": 198, "duration": 7.091036319732666}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 843, "completion_tokens": 280, "duration": 8.766911506652832}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 196, "duration": 8.876758813858032}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    \n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    \n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 96, "duration": 6.213048458099365}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    if a > b:\n        a, b = b, a\n\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n\n    return even_digits", "prompt_tokens": 539, "completion_tokens": 134, "duration": 5.484690189361572}
