{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 641, "completion_tokens": 223, "duration": 9.516749620437622}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n\n    for c in paren_string.replace(\" \", \"\"):\n        if c == '(':\n            open_braces_count += 1\n        elif c == ')':\n            open_braces_count -= 1\n        current_group += c\n        if open_braces_count == 0:\n            groups.append(current_group)\n            current_group = \"\"\n    \n    return groups", "prompt_tokens": 649, "completion_tokens": 272, "duration": 14.175795316696167}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)", "prompt_tokens": 500, "completion_tokens": 144, "duration": 10.889328718185425}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 585, "completion_tokens": 139, "duration": 7.359148740768433}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 643, "completion_tokens": 263, "duration": 14.712461709976196}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 528, "completion_tokens": 148, "duration": 8.336898803710938}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 683, "completion_tokens": 306, "duration": 10.798980236053467}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 106, "duration": 7.3083720207214355}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_, product = 0, 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    \n    return (sum_, product)", "prompt_tokens": 549, "completion_tokens": 143, "duration": 13.635840654373169}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    if not numbers:\n        return []\n    rolling_max_list = [numbers[0]]\n    current_max = numbers[0]\n    for number in numbers[1:]:\n        current_max = max(current_max, number)\n        rolling_max_list.append(current_max)\n    return rolling_max_list", "prompt_tokens": 594, "completion_tokens": 241, "duration": 10.456940650939941}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]\n    return string", "prompt_tokens": 645, "completion_tokens": 256, "duration": 17.06839084625244}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char_a, char_b in zip(a, b):\n        if char_a == char_b:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 510, "completion_tokens": 159, "duration": 9.764251470565796}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 568, "completion_tokens": 211, "duration": 12.112586736679077}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 94, "duration": 8.253352165222168}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "prompt_tokens": 481, "completion_tokens": 170, "duration": 11.106837272644043}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 458, "completion_tokens": 162, "duration": 22.874451398849487}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 491, "completion_tokens": 197, "duration": 21.56130075454712}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats_list = []\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 727, "completion_tokens": 210, "duration": 12.360485076904297}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 515, "completion_tokens": 142, "duration": 7.709294557571411}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    numeral_to_number = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda word: numeral_to_number[word])\n    return ' '.join(sorted_words)", "prompt_tokens": 608, "completion_tokens": 252, "duration": 13.828274726867676}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    return closest_pair", "prompt_tokens": 728, "completion_tokens": 234, "duration": 13.529260158538818}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(number - min_value) / range_value for number in numbers]\n    return rescaled_numbers", "prompt_tokens": 617, "completion_tokens": 183, "duration": 7.802156925201416}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 498, "completion_tokens": 158, "duration": 11.299834728240967}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for ch in string:\n        length += 1\n    return length", "prompt_tokens": 419, "completion_tokens": 107, "duration": 6.996126413345337}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 424, "completion_tokens": 113, "duration": 6.2451090812683105}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "prompt_tokens": 587, "completion_tokens": 141, "duration": 7.451659202575684}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    result = []\n    seen = set()\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        else:\n            if number not in seen:\n                seen.add(number)\n    return result", "prompt_tokens": 491, "completion_tokens": 164, "duration": 13.802912712097168}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for character in string:\n        if character.islower():\n            flipped_string += character.upper()\n        elif character.isupper():\n            flipped_string += character.lower()\n        else:\n            flipped_string += character\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 141, "duration": 6.834781646728516}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 426, "completion_tokens": 128, "duration": 9.650480508804321}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 128, "duration": 7.574577331542969}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    positive_nums = [num for num in l if num > 0]\n    return positive_nums", "prompt_tokens": 538, "completion_tokens": 93, "duration": 5.221678256988525}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True", "prompt_tokens": 544, "completion_tokens": 182, "duration": 11.580726623535156}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    return fsolve(lambda x: poly(xs, x), 0)[0]", "prompt_tokens": 888, "completion_tokens": 299, "duration": 17.420312643051147}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    third_elements = sorted(l[2::3])\n    for i in range(2, len(l), 3):\n        l[i] = third_elements.pop(0)\n    return l", "prompt_tokens": 693, "completion_tokens": 248, "duration": 17.23846983909607}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n    for ele in l:\n        if ele not in unique_list:\n            unique_list.append(ele)\n    unique_list.sort()\n    return unique_list", "prompt_tokens": 479, "completion_tokens": 178, "duration": 11.041921138763428}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_num = l[0]  # Initialize max_num with the first element of the list\n    for num in l:  # Iterate through each element in the list\n        if num > max_num:  # Check if the current element is greater than the current max_num\n            max_num = num  # Update max_num if the current element is greater\n    return max_num  # Return the maximum element found in the list", "prompt_tokens": 534, "completion_tokens": 280, "duration": 13.150123119354248}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for digit in str(i):\n                if digit == '7':\n                    count += 1\n    return count", "prompt_tokens": 515, "completion_tokens": 169, "duration": 9.75519061088562}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_indices_values[even_index]\n            even_index += 1\n    return l", "prompt_tokens": 610, "completion_tokens": 247, "duration": 17.47128939628601}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Calculate the length of the last group which might not be of length 3\n    last_group_length = len(s) % 3 if len(s) % 3 != 0 else 3\n    # Calculate the number of full groups of length 3\n    full_groups = (len(s) - last_group_length) // 3\n    # Reconstruct the original string by moving the last group to the front and then adding the rest\n    decoded_string = s[-last_group_length:] + s[:-last_group_length]\n    # Split the decoded string back into groups of 3 (except possibly the last group)\n    groups = [decoded_string[(3 * i):min((3 * i + 3), len(decoded_string))] for i in range((len(decoded_string) + 2) // 3)]\n    # Reverse the cycling of elements in each group to decode\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 755, "completion_tokens": 431, "duration": 17.312853813171387}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def next_fib(fib_list):\n        return fib_list[-1] + fib_list[-2]\n    \n    fib_list = [0, 1]\n    count = 0\n    while True:\n        fib_num = next_fib(fib_list)\n        fib_list.append(fib_num)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "prompt_tokens": 585, "completion_tokens": 285, "duration": 21.397252559661865}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 726, "completion_tokens": 254, "duration": 14.81200909614563}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Returns the number of collisions between two sets of n cars driving in opposite directions.\n    \"\"\"\n    # Since all cars move at the same speed and are infinitely sturdy,\n    # every car moving left to right will collide with every car moving right to left.\n    # Therefore, the total number of collisions is simply n * n.\n    return n * n", "prompt_tokens": 728, "completion_tokens": 255, "duration": 11.211271524429321}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [num + 1 for num in l]", "prompt_tokens": 533, "completion_tokens": 93, "duration": 6.601016283035278}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 651, "completion_tokens": 121, "duration": 10.734552383422852}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "prompt_tokens": 549, "completion_tokens": 194, "duration": 11.423657178878784}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 394, "completion_tokens": 96, "duration": 5.165369987487793}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n + 1):\n        next_element = sum(fib4_list[-4:])\n        fib4_list.append(next_element)\n    return fib4_list[n]", "prompt_tokens": 724, "completion_tokens": 207, "duration": 13.44892692565918}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) / 2", "prompt_tokens": 514, "completion_tokens": 166, "duration": 7.988103628158569}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    reversed_text = text[::-1]\n    return reversed_text == text", "prompt_tokens": 492, "completion_tokens": 176, "duration": 10.370103120803833}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p.\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "prompt_tokens": 552, "completion_tokens": 192, "duration": 10.36809515953064}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str) -> str:\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 662, "completion_tokens": 347, "duration": 12.6114821434021}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 614, "completion_tokens": 173, "duration": 11.154338359832764}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 474, "completion_tokens": 109, "duration": 8.657103538513184}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y", "prompt_tokens": 398, "completion_tokens": 63, "duration": 5.873925685882568}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 792, "completion_tokens": 283, "duration": 13.97541332244873}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for i in range(2, n + 1):\n        result = a + b\n        a = b\n        b = result\n    \n    return result", "prompt_tokens": 444, "completion_tokens": 201, "duration": 11.333385705947876}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "prompt_tokens": 550, "completion_tokens": 173, "duration": 15.035478591918945}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n\n    increasing_flag = l[0] < l[-1]\n\n    for i in range(1, len(l)):\n        if increasing_flag and l[i] < l[i-1]:\n            return False\n        if not increasing_flag and l[i] > l[i-1]:\n            return False\n\n    return True", "prompt_tokens": 564, "completion_tokens": 292, "duration": 14.05762267112732}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    common_elements = list(set(l1) & set(l2))\n    common_elements.sort()\n    return common_elements", "prompt_tokens": 580, "completion_tokens": 145, "duration": 9.388254880905151}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime_factor = 2\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            n = n // i\n            largest_prime_factor = i\n        else:\n            i += 1\n    return largest_prime_factor", "prompt_tokens": 493, "completion_tokens": 229, "duration": 11.667758226394653}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))", "prompt_tokens": 492, "completion_tokens": 149, "duration": 10.656597137451172}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 563, "completion_tokens": 186, "duration": 10.163577795028687}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    \"\"\"Return the derivative of a polynomial represented by its coefficients.\"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 534, "completion_tokens": 101, "duration": 6.0325446128845215}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n + 1):\n        fibfib_i = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(fibfib_i)\n\n    return fibfib_list[n]", "prompt_tokens": 679, "completion_tokens": 243, "duration": 10.404505968093872}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"Returns the number of vowels in the string. 'y' is considered a vowel if it is at the end of the word.\"\"\"\n    count = 0\n    s = s.lower()\n    for i, c in enumerate(s):\n        if c in 'aeiou' or (c == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 608, "completion_tokens": 188, "duration": 13.02771282196045}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    num_str = str(x)\n    length = len(num_str)\n    if shift > length:\n        result = num_str[::-1]\n    else:\n        split_index = length - shift\n        result = num_str[split_index:] + num_str[:split_index]\n    return result", "prompt_tokens": 577, "completion_tokens": 264, "duration": 12.39169716835022}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s: str) -> int:\n    return sum(ord(ch) for ch in s if ch.isupper())", "prompt_tokens": 538, "completion_tokens": 82, "duration": 5.420315980911255}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 815, "completion_tokens": 169, "duration": 9.388925075531006}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = None\n    smallest_index = None\n    for index, node in enumerate(arr):\n        if node % 2 == 0:\n            if smallest_value is None or node < smallest_value:\n                smallest_value = node\n                smallest_index = index\n            elif node == smallest_value and index < smallest_index:\n                smallest_index = index\n    if smallest_value is not None:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1037, "completion_tokens": 259, "duration": 12.922688722610474}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    max_val = -1\n    for num in lst:\n        freq_map[num] = freq_map.get(num, 0) + 1\n        if freq_map[num] >= num and num > max_val:\n            max_val = num\n    return max_val", "prompt_tokens": 722, "completion_tokens": 200, "duration": 9.894699096679688}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    min_ptr, max_ptr = 0, len(lst) - 1\n    while min_ptr <= max_ptr:\n        sorted_lst.append(lst[min_ptr])\n        if min_ptr != max_ptr:\n            sorted_lst.append(lst[max_ptr])\n        min_ptr += 1\n        max_ptr -= 1\n    return sorted_lst", "prompt_tokens": 637, "completion_tokens": 215, "duration": 21.988958835601807}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    if a + b > c and a + c > b and b + c > a:  # Check if the sides form a valid triangle\n        s = (a + b + c) / 2  # Calculate the semi-perimeter\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Calculate the area using Heron's formula\n        return round(area, 2)  # Round the area to 2 decimal points\n    else:\n        return -1", "prompt_tokens": 649, "completion_tokens": 323, "duration": 17.89154028892517}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 924, "completion_tokens": 231, "duration": 10.259177684783936}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    min_changes = 0\n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    return min_changes", "prompt_tokens": 716, "completion_tokens": 211, "duration": 10.713388681411743}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has total number of chars in all strings of the list less than the other list.\n    If the two lists have the same number of chars, return the first list.\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 765, "completion_tokens": 238, "duration": 11.954487323760986}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    count = 0\n    for prime in primes:\n        while a % prime == 0:\n            a //= prime\n            count += 1\n            if count > 3:\n                break\n    return count == 3 and a == 1", "prompt_tokens": 576, "completion_tokens": 293, "duration": 13.489062070846558}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    \"\"\"Returns true if x is a simple power of n, false otherwise.\"\"\"\n    power = 0\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n    return False", "prompt_tokens": 611, "completion_tokens": 130, "duration": 7.388518333435059}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    '''\n    cube_root = int(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 579, "completion_tokens": 162, "duration": 9.981926679611206}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num: str) -> int:\n    \"\"\"Counts the number of prime hexadecimal digits in the given string.\"\"\"\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in primes)", "prompt_tokens": 927, "completion_tokens": 131, "duration": 8.853022575378418}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    while decimal > 0:\n        binary_str += str(decimal % 2)\n        decimal = decimal // 2\n    binary_str = binary_str[::-1]\n    binary_str += \"db\"\n    return binary_str", "prompt_tokens": 672, "completion_tokens": 196, "duration": 10.238861560821533}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 592, "completion_tokens": 170, "duration": 8.910674333572388}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 549, "duration": 27.123764038085938}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    n = len(string)\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n    return True", "prompt_tokens": 549, "completion_tokens": 232, "duration": 11.720148801803589}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10**(n-1)  # numbers starting with 1\n        else:\n            count += 2 * 10**(n-2)  # numbers ending with 1 (except 1-digit numbers)\n\n    return count", "prompt_tokens": 447, "completion_tokens": 216, "duration": 14.046072006225586}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_digits)[2:]", "prompt_tokens": 600, "completion_tokens": 122, "duration": 7.475864887237549}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 453, "completion_tokens": 162, "duration": 10.512184381484985}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Takes a string and returns an ordered version of it where all characters in each word are arranged in ascending order based on ascii value.\n    \"\"\"\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 629, "completion_tokens": 199, "duration": 10.91182804107666}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row[::-1]):\n            if value == x:\n                result.append((i, len(row) - 1 - j))\n    result.sort(key=lambda k: (k[0], -k[1]))\n    return result", "prompt_tokens": 911, "completion_tokens": 296, "duration": 15.547523260116577}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:  # If the array is empty\n        return []\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:  # If the sum is even\n        return sorted(array, reverse=True)\n    else:  # If the sum is odd\n        return sorted(array)", "prompt_tokens": 899, "completion_tokens": 316, "duration": 11.722246885299683}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    \"\"\"Encrypts a string by rotating the alphabet by 2*2 places.\"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for c in s:\n        index = alphabet.index(c)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 218, "duration": 8.528075456619263}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 619, "completion_tokens": 210, "duration": 9.20310640335083}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with \"I\".\n    \"\"\"\n    sentences = [sentence.strip() for sentence in re.split(r'[.?!]', S) if sentence]\n    count = sum(sentence.startswith(\"I\") for sentence in sentences)\n    return count", "prompt_tokens": 543, "completion_tokens": 133, "duration": 7.183037519454956}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 612, "completion_tokens": 136, "duration": 7.233236312866211}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping case of all letters and replacing all vowels with the letter that appears 2 places ahead of that vowel in the english alphabet.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded_message = ''\n    for ch in message:\n        if ch.isalpha():\n            if ch in vowels:\n                if ch.islower():\n                    new_ch = alphabet[(alphabet.index(ch.lower()) + 2) % 26]\n                else:\n                    new_ch = alphabet[(alphabet.index(ch.lower()) + 2) % 26].upper()\n            else:\n                new_ch = ch.swapcase()\n            encoded_message += new_ch\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 598, "completion_tokens": 283, "duration": 16.67316484451294}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_largest_prime_digits(lst):\n    largest_prime = 0\n    for num in lst:\n        if num > 1:\n            is_prime = True\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime and num > largest_prime:\n                largest_prime = num\n\n    sum_digits = 0\n    if largest_prime > 0:\n        while largest_prime > 0:\n            sum_digits += largest_prime % 10\n            largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 983, "completion_tokens": 287, "duration": 16.983181476593018}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    is_lower = is_upper = False\n    for key in dict.keys():\n        if isinstance(key, str):\n            if key.islower():\n                is_lower = True\n            elif key.isupper():\n                is_upper = True\n            else:\n                return False\n        else:\n            return False\n    return is_lower != is_upper", "prompt_tokens": 759, "completion_tokens": 249, "duration": 11.795039176940918}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 637, "completion_tokens": 167, "duration": 9.593424081802368}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    \"\"\"\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b", "prompt_tokens": 539, "completion_tokens": 156, "duration": 9.436639070510864}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 137, "duration": 8.5947904586792}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = floor_num if floor_num == num else floor_num + 1\n    if abs(num - floor_num) < abs(num - ceil_num):\n        return floor_num\n    elif abs(num - floor_num) > abs(num - ceil_num):\n        return ceil_num\n    else:\n        return ceil_num if num > 0 else floor_num", "prompt_tokens": 735, "completion_tokens": 306, "duration": 16.605714082717896}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n    for i in range(n):\n        stones_list.append(stones)\n        if n % 2 == 0:\n            stones += 2\n        else:\n            stones += 2\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 143, "duration": 6.931468725204468}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words and return an array of the words.\n    \"\"\"\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in [',', ' ']:\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 637, "completion_tokens": 234, "duration": 9.7168288230896}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "prompt_tokens": 558, "completion_tokens": 217, "duration": 10.732510805130005}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m + 1):\n        sum += i\n    count = m - n + 1\n    avg = round(sum / count)\n    return bin(avg)", "prompt_tokens": 623, "completion_tokens": 150, "duration": 8.47148585319519}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    sorted_list = []\n    \n    for num in x:\n        has_even_digit = False\n        \n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        \n        if not has_even_digit:\n            sorted_list.append(num)\n    \n    sorted_list.sort()\n    \n    return sorted_list", "prompt_tokens": 574, "completion_tokens": 192, "duration": 10.191631555557251}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    num_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    result = [num_to_name[num] for num in filtered_arr]\n    return result", "prompt_tokens": 946, "completion_tokens": 323, "duration": 13.458667755126953}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    return result", "prompt_tokens": 600, "completion_tokens": 197, "duration": 12.13072943687439}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 199, "duration": 12.481862545013428}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= 1\n            num = -num\n        while num > 0:\n            sum_digits += num % 10\n            num = num // 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 261, "duration": 10.702320098876953}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted(arr):\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 991, "completion_tokens": 192, "duration": 11.05859112739563}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    \"\"\"Determine if it's possible to exchange elements between two lists to make the first list all even numbers.\"\"\"\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 817, "completion_tokens": 269, "duration": 10.781213521957397}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    histogram_dict = {}\n    for letter in letters:\n        if letter in histogram_dict:\n            histogram_dict[letter] += 1\n        else:\n            histogram_dict[letter] = 1\n    max_count = max(histogram_dict.values(), default=0)\n    max_dict = {letter: count for letter, count in histogram_dict.items() if count == max_count}\n    return max_dict", "prompt_tokens": 727, "completion_tokens": 262, "duration": 10.287686347961426}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    palindrome_check = result == result[::-1]\n    return (result, palindrome_check)", "prompt_tokens": 715, "completion_tokens": 176, "duration": 7.4051971435546875}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result_lst = []\n    for i, string in enumerate(lst):\n        count = sum(1 for char in string if char.isdigit() and int(char) % 2 != 0)\n        result_lst.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result_lst", "prompt_tokens": 729, "completion_tokens": 207, "duration": 8.30324387550354}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 246, "duration": 19.07357358932495}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1023, "completion_tokens": 153, "duration": 6.198603868484497}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    \"\"\"\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 702, "completion_tokens": 239, "duration": 10.109108448028564}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\"\"\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = sum(1 for char in word if char in consonants)\n        if consonant_count == n:\n            result.append(word)\n    return result", "prompt_tokens": 755, "completion_tokens": 246, "duration": 11.946309804916382}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    found_consonant = False\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels and found_consonant:\n            if i > 0 and word[i-1] in vowels:\n                closest_vowel = word[i-1]\n                break\n        if word[i] not in vowels:\n            found_consonant = True\n    return closest_vowel", "prompt_tokens": 709, "completion_tokens": 269, "duration": 10.646958589553833}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 772, "completion_tokens": 255, "duration": 11.00083589553833}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k][::-1]", "prompt_tokens": 780, "completion_tokens": 143, "duration": 6.9168784618377686}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 529, "completion_tokens": 139, "duration": 6.28171181678772}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if arr[i] < 100:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 611, "completion_tokens": 198, "duration": 11.221435546875}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    odd_collatz_list.append(1)\n    return sorted(odd_collatz_list)", "prompt_tokens": 836, "completion_tokens": 224, "duration": 15.135418891906738}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date or len(date.split(\"-\")) != 3:\n        return False\n    month, day, year = date.split(\"-\")\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    return True", "prompt_tokens": 975, "completion_tokens": 371, "duration": 16.861754417419434}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((ord(c) - ord('a')) % 2 == 0 for c in txt if c.islower())", "prompt_tokens": 752, "completion_tokens": 273, "duration": 10.749457359313965}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicates = {}\n    sorted = True\n    for num in lst:\n        if num == prev:\n            if num not in duplicates:\n                duplicates[num] = 2\n            else:\n                duplicates[num] += 1\n        if prev is not None and num < prev:\n            sorted = False\n        prev = num\n    if sorted and all(value <= 2 for value in duplicates.values()):\n        return True\n    else:\n        return False", "prompt_tokens": 964, "completion_tokens": 313, "duration": 9.946921586990356}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    \"\"\"Determine if the intersection length of two intervals is a prime number.\"\"\"\n    # Find the intersection\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n    \n    # Check if the intersection exists\n    if max_start > min_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = min_end - max_start\n    \n    # Check if the length is a prime number\n    if length <= 1:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"", "prompt_tokens": 995, "completion_tokens": 393, "duration": 14.347219467163086}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product_sign = 1\n    sum_magnitudes = 0\n\n    for number in arr:\n        if number > 0:\n            sum_magnitudes += number\n        elif number < 0:\n            sum_magnitudes += abs(number)\n            product_sign *= -1\n\n    return product_sign * sum_magnitudes", "prompt_tokens": 612, "completion_tokens": 196, "duration": 15.226938247680664}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    best_path = [float('inf')] * k\n\n    def dfs(row, col, length, current_path):\n        if length == k:\n            nonlocal best_path\n            best_path = min(best_path, current_path)\n            return\n        for dr, dc in directions:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < N and 0 <= new_col < N:\n                dfs(new_row, new_col, length + 1, current_path + [grid[new_row][new_col]])\n\n    for row in range(N):\n        for col in range(N):\n            dfs(row, col, 1, [grid[row][col]])\n\n    return best_path", "prompt_tokens": 1414, "completion_tokens": 555, "duration": 23.972036600112915}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    \"\"\"Return the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    if n == 0:\n        return [3]\n    seq = [3]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            seq.append(1 + i / 2)\n        else:\n            if i + 1 > len(seq):\n                seq.append(seq[i - 1] + seq[i - 2] + 1 + (i + 1) / 2)\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\n    return seq", "prompt_tokens": 880, "completion_tokens": 298, "duration": 10.939969062805176}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 484, "completion_tokens": 214, "duration": 16.243418216705322}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) > 0", "prompt_tokens": 644, "completion_tokens": 178, "duration": 9.023943424224854}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    import math\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 643, "completion_tokens": 96, "duration": 6.057342529296875}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    return txt[-1:].isalpha() and not txt[:-1].endswith(' ')", "prompt_tokens": 634, "completion_tokens": 137, "duration": 4.7865800857543945}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index", "prompt_tokens": 562, "completion_tokens": 145, "duration": 9.985207557678223}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    max_neg, min_pos = None, None\n    \n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        if num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n            \n    return (max_neg, min_pos)", "prompt_tokens": 661, "completion_tokens": 224, "duration": 12.886737823486328}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            return float(x.replace(',', '.'))\n        return float(x)\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "prompt_tokens": 921, "completion_tokens": 465, "duration": 14.963208675384521}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and n - i > 0:\n            count += 1\n        if count == 4:\n            return True\n    return False", "prompt_tokens": 533, "completion_tokens": 207, "duration": 12.058650970458984}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 7.571602821350098}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    fixed_text = \"\"\n    count = 0\n    for i, ch in enumerate(text):\n        if ch == \" \":\n            count += 1\n        else:\n            if count > 2:\n                fixed_text += \"-\" + ch\n            else:\n                fixed_text += \"_\" * count + ch\n            count = 0\n    if count > 2:\n        fixed_text += \"-\"\n    else:\n        fixed_text += \"_\" * count\n    return fixed_text.replace(\"_ \", \"_\").replace(\" _\", \"_\")", "prompt_tokens": 630, "completion_tokens": 274, "duration": 15.75291109085083}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 892, "completion_tokens": 300, "duration": 11.235160112380981}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 698, "completion_tokens": 174, "duration": 11.749581575393677}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 698, "completion_tokens": 250, "duration": 11.486838817596436}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    return product_num % product_den == 0", "prompt_tokens": 682, "completion_tokens": 181, "duration": 11.457113265991211}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 712, "completion_tokens": 303, "duration": 10.972258806228638}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "prompt_tokens": 605, "completion_tokens": 195, "duration": 7.030405044555664}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = []\n    for i in range(1, n + 1):\n        a.append(i * i - i + 1)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 708, "completion_tokens": 231, "duration": 11.43813705444336}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 < index2:\n            result = planets[index1+1:index2]\n        else:\n            result = planets[index2+1:index1]\n        return tuple(result)\n    else:\n        return ()", "prompt_tokens": 827, "completion_tokens": 268, "duration": 12.703367471694946}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [w for w in lst if len(w) % 2 == 0]\n    return sorted(sorted_lst, key=lambda x: (len(x), x))", "prompt_tokens": 721, "completion_tokens": 133, "duration": 9.301574468612671}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 150, "duration": 11.958553314208984}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(num**2 for num in lst if isinstance(num, int) and num > 0 and num % 2 != 0)", "prompt_tokens": 610, "completion_tokens": 115, "duration": 7.199476718902588}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 806, "completion_tokens": 113, "duration": 6.974703311920166}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension", "prompt_tokens": 951, "completion_tokens": 235, "duration": 11.179267168045044}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    \"\"\"Check if b or any of its rotations is a substring in a.\"\"\"\n    a_concat = a + a\n    for i in range(len(b), len(a_concat)):\n        if b in a_concat[i-len(b):i]:\n            return True\n    return False", "prompt_tokens": 640, "completion_tokens": 189, "duration": 7.756537675857544}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 8.902009010314941}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = \"\"\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n    return roman_numeral", "prompt_tokens": 583, "completion_tokens": 300, "duration": 12.425914287567139}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    side_a_squared = a * a\n    side_b_squared = b * b\n    side_c_squared = c * c\n    longest_side = max(side_a_squared, side_b_squared, side_c_squared)\n    if longest_side == side_a_squared:\n        is_right_angle = side_b_squared + side_c_squared == side_a_squared\n    elif longest_side == side_b_squared:\n        is_right_angle = side_a_squared + side_c_squared == side_b_squared\n    else:\n        is_right_angle = side_a_squared + side_b_squared == side_c_squared\n    return is_right_angle", "prompt_tokens": 684, "completion_tokens": 343, "duration": 11.932597398757935}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars or (len(unique_chars) == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = len(unique_chars)\n    return max_word", "prompt_tokens": 671, "completion_tokens": 251, "duration": 11.141752004623413}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Returns the total number of eaten carrots after meals and the number of carrots left.\n    \"\"\"\n    if need <= remaining:\n        total_eaten = number + need\n        remaining -= need\n    else:\n        total_eaten = number + remaining\n        remaining = 0\n    return [total_eaten, remaining]", "prompt_tokens": 925, "completion_tokens": 191, "duration": 8.659509897232056}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i + 1]\n        elif op == '-':\n            result -= operand[i + 1]\n        elif op == '*':\n            result *= operand[i + 1]\n        elif op == '//':\n            result //= operand[i + 1]\n        elif op == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 844, "completion_tokens": 277, "duration": 13.260783910751343}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(c.isalpha() for c in result):\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 190, "duration": 6.204374074935913}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n\n    import hashlib\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 128, "duration": 9.382101058959961}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits_list = []\n    if a > b:\n        a, b = b, a\n\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_digits_list.append(num)\n\n    return even_digits_list", "prompt_tokens": 534, "completion_tokens": 161, "duration": 9.528583526611328}
