{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 634, "completion_tokens": 218, "duration": 9.998902320861816}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n    for c in paren_string:\n        if c == '(':\n            open_braces_count += 1\n            current_group += c\n        elif c == ')' and open_braces_count > 0:\n            current_group += c\n            open_braces_count -= 1\n            if open_braces_count == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    return groups", "prompt_tokens": 663, "completion_tokens": 295, "duration": 12.363996505737305}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    \"\"\" Return the decimal part of the number. \"\"\"\n    return number - int(number)", "prompt_tokens": 506, "completion_tokens": 107, "duration": 6.846197843551636}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 589, "completion_tokens": 143, "duration": 8.706250190734863}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 661, "completion_tokens": 276, "duration": 13.702427864074707}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 529, "completion_tokens": 153, "duration": 10.806204795837402}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for ch in group:\n            if ch == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif ch == ')':\n                current_depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 677, "completion_tokens": 300, "duration": 12.94909930229187}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 122, "duration": 7.215492010116577}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return (sum_, product)", "prompt_tokens": 549, "completion_tokens": 144, "duration": 8.406334400177002}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for num in numbers:\n        if not rolling_max_list or num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list", "prompt_tokens": 596, "completion_tokens": 212, "duration": 10.576982975006104}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]\n    return string", "prompt_tokens": 640, "completion_tokens": 251, "duration": 11.349342107772827}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 511, "completion_tokens": 156, "duration": 7.863699197769165}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 585, "completion_tokens": 228, "duration": 20.950167417526245}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 452, "completion_tokens": 146, "duration": 8.689747095108032}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "prompt_tokens": 462, "completion_tokens": 171, "duration": 10.723676204681396}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 450, "completion_tokens": 102, "duration": 6.6179938316345215}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for ch in string:\n        distinct_chars.add(ch)\n    return len(distinct_chars)", "prompt_tokens": 489, "completion_tokens": 135, "duration": 8.014918327331543}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 729, "completion_tokens": 212, "duration": 10.06311297416687}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 517, "completion_tokens": 144, "duration": 6.841290712356567}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    numeral_to_number = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    numerical_values = [numeral_to_number[word] for word in words]\n    numerical_values.sort()\n    sorted_words = [list(numeral_to_number.keys())[list(numeral_to_number.values()).index(num)] for num in numerical_values]\n    return ' '.join(sorted_words)", "prompt_tokens": 673, "completion_tokens": 345, "duration": 14.587639808654785}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    return closest_pair", "prompt_tokens": 716, "completion_tokens": 222, "duration": 13.085535526275635}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(number - min_value) / range_value for number in numbers]\n    return rescaled_numbers", "prompt_tokens": 614, "completion_tokens": 221, "duration": 12.226514339447021}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 498, "completion_tokens": 158, "duration": 10.0407235622406}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for ch in string:\n        length += 1\n    return length", "prompt_tokens": 405, "completion_tokens": 93, "duration": 5.42177939414978}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 424, "completion_tokens": 113, "duration": 8.956650733947754}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 617, "completion_tokens": 176, "duration": 8.603074789047241}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    result = []\n    seen = set()\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        else:\n            if number not in seen:\n                seen.add(number)\n    return result", "prompt_tokens": 491, "completion_tokens": 164, "duration": 9.013989210128784}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    result = \"\"\n    for ch in string:\n        if ch.islower():\n            result += ch.upper()\n        else:\n            result += ch.lower()\n    return result", "prompt_tokens": 438, "completion_tokens": 130, "duration": 6.738645315170288}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_str = ''\n    for string in strings:\n        concatenated_str += string\n    return concatenated_str", "prompt_tokens": 426, "completion_tokens": 92, "duration": 7.7731032371521}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 167, "duration": 9.523907899856567}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positive_nums = [num for num in l if num > 0]\n    return positive_nums", "prompt_tokens": 540, "completion_tokens": 185, "duration": 11.44727611541748}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True", "prompt_tokens": 550, "completion_tokens": 188, "duration": 10.166864395141602}
{"task_id": "HumanEval/32", "generated_code": "import math\nfrom scipy.optimize import fsolve\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 == 0 and xs[-1] != 0:\n        def equation(x):\n            return poly(xs, x)\n        zero_point, = fsolve(equation, 0)\n        return zero_point\n    else:\n        return None", "prompt_tokens": 937, "completion_tokens": 382, "duration": 14.897082328796387}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    temp = [l[i] for i in range(len(l)) if (i + 1) % 3 == 0]\n    temp.sort()\n    result = []\n    temp_index = 0\n    for i in range(len(l)):\n        if (i + 1) % 3 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(l[i])\n    return result", "prompt_tokens": 720, "completion_tokens": 331, "duration": 16.690581560134888}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n\n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 158, "duration": 9.730831861495972}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_num = l[0]  # Initialize max_num with the first element of the list\n\n    for num in l:  # Iterate through each element in the list\n        if num > max_num:  # Check if the current element is greater than the current max_num\n            max_num = num  # Update max_num if the current element is greater\n\n    return max_num  # Return the maximum element found in the list", "prompt_tokens": 534, "completion_tokens": 223, "duration": 10.511671781539917}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for ch in str(i):\n                if ch == '7':\n                    count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 170, "duration": 9.439585447311401}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list) -> list:\n    \"\"\"Sorts elements at even indices of the list while keeping odd indices elements in place.\"\"\"\n    even_indices_values = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices_values.sort()\n    result = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices_values[even_index])\n            even_index += 1\n        else:\n            result.append(l[i])\n    return result", "prompt_tokens": 655, "completion_tokens": 273, "duration": 13.49023699760437}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 804, "completion_tokens": 431, "duration": 15.767464637756348}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num, fib_list):\n        while fib_list[-1] < num:\n            fib_list.append(fib_list[-1] + fib_list[-2])\n        return num in fib_list\n\n    fib_list = [0, 1]\n    count = 0\n    num = 1\n\n    while count < n:\n        if is_fibonacci(num, fib_list) and is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1", "prompt_tokens": 555, "completion_tokens": 278, "duration": 14.416457891464233}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    n = len(l)\n    if n < 3:\n        return False\n    for i in range(n-2):\n        j, k = i + 1, n - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 760, "completion_tokens": 299, "duration": 12.982133626937866}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of n cars moving in opposite directions.\n    \"\"\"\n    # Since all cars move at the same speed and start at the same time, each pair will collide.\n    # Therefore, the number of collisions is simply n.\n    return n", "prompt_tokens": 703, "completion_tokens": 214, "duration": 8.151126146316528}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    new_list = [num + 1 for num in l]\n    return new_list", "prompt_tokens": 533, "completion_tokens": 100, "duration": 8.582251787185669}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 667, "completion_tokens": 137, "duration": 5.303373575210571}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result", "prompt_tokens": 552, "completion_tokens": 160, "duration": 10.095407009124756}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 413, "completion_tokens": 116, "duration": 6.607424020767212}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for _ in range(4, n + 1):\n        next_element = sum(fib4_list)\n        fib4_list.pop(0)\n        fib4_list.append(next_element)\n    return fib4_list[-1]", "prompt_tokens": 732, "completion_tokens": 222, "duration": 12.804519653320312}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 493, "completion_tokens": 146, "duration": 7.180774450302124}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 521, "completion_tokens": 206, "duration": 9.395944118499756}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result = (result * 2) % p\n    return result", "prompt_tokens": 523, "completion_tokens": 193, "duration": 11.86292552947998}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 508, "completion_tokens": 114, "duration": 5.099473237991333}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 603, "completion_tokens": 161, "duration": 9.490257024765015}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 474, "completion_tokens": 155, "duration": 8.67756175994873}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 398, "completion_tokens": 91, "duration": 5.038338661193848}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    if set(s0) == set(s1):\n        return True\n    return False", "prompt_tokens": 706, "completion_tokens": 204, "duration": 10.388665914535522}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    for i in range(2, n + 1):\n        result = a + b\n        a = b\n        b = result\n\n    return result", "prompt_tokens": 444, "completion_tokens": 169, "duration": 9.332568883895874}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == \"<\":\n            count += 1\n        elif ch == \">\" and count > 0:\n            count -= 1\n        else:\n            return False\n    return count == 0", "prompt_tokens": 545, "completion_tokens": 172, "duration": 8.022250175476074}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            is_increasing = False\n        if l[i] < l[i + 1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing", "prompt_tokens": 544, "completion_tokens": 197, "duration": 10.48670482635498}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    common_elements = list(set(l1) & set(l2))\n    common_elements.sort()\n    return common_elements", "prompt_tokens": 580, "completion_tokens": 145, "duration": 7.487459897994995}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n = n // factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 491, "completion_tokens": 178, "duration": 10.55478549003601}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))", "prompt_tokens": 492, "completion_tokens": 149, "duration": 8.386414766311646}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for ch in brackets:\n        if ch == \"(\":\n            stack.append(ch)\n        elif ch == \")\" and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "prompt_tokens": 534, "completion_tokens": 157, "duration": 9.460144281387329}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    \"\"\"Return the derivative of a polynomial represented by its coefficients.\"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 539, "completion_tokens": 106, "duration": 7.274610757827759}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n + 1):\n        fibfib_i = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(fibfib_i)\n\n    return fibfib_list[n]", "prompt_tokens": 680, "completion_tokens": 244, "duration": 13.896530866622925}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"Returns the number of vowels in the string. 'y' is considered a vowel if it is at the end of the word.\"\"\"\n    count = 0\n    s = s.lower()\n    for i, c in enumerate(s):\n        if c in 'aeiou' or (c == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 608, "completion_tokens": 188, "duration": 12.186231136322021}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    num_str = str(x)\n    num_len = len(num_str)\n    effective_shift = shift % num_len\n    if effective_shift == 0:\n        return num_str\n    shifted_num = num_str[-effective_shift:] + num_str[:-effective_shift]\n    return shifted_num", "prompt_tokens": 553, "completion_tokens": 239, "duration": 12.983255624771118}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 82, "duration": 4.084408760070801}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    apples, oranges = numbers\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 780, "completion_tokens": 150, "duration": 7.298017978668213}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    for index, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_value:\n            smallest_value = num\n            smallest_index = index\n            found_even = True\n        elif num % 2 == 0 and num == smallest_value:\n            smallest_index = min(smallest_index, index)\n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1044, "completion_tokens": 279, "duration": 13.278077125549316}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    '''\n    Input: lst: a list of positive integers\n    Output: greatest_int: the greatest integer that meets the condition, or -1 if none exists\n    '''\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n    for num, freq in freq_map.items():\n        if num > greatest_int and freq >= num:\n            greatest_int = num\n\n    return greatest_int", "prompt_tokens": 715, "completion_tokens": 247, "duration": 11.435253143310547}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    result_lst = []\n    lst.sort()\n    while lst:\n        result_lst.append(lst.pop(0))\n        if lst:\n            result_lst.append(lst.pop())\n    return result_lst", "prompt_tokens": 630, "completion_tokens": 169, "duration": 10.110554933547974}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        from math import sqrt\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 621, "completion_tokens": 275, "duration": 15.272007942199707}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    '''\n    Returns True if the object q will fly, and False otherwise.\n    '''\n    # Check if the sum of elements in q is less than or equal to w\n    if sum(q) > w:\n        return False\n    # Check if q is a palindrome\n    return q == q[::-1]", "prompt_tokens": 844, "completion_tokens": 201, "duration": 8.784817934036255}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    min_changes = 0\n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    return min_changes", "prompt_tokens": 744, "completion_tokens": 240, "duration": 11.10679817199707}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 765, "completion_tokens": 188, "duration": 9.475318431854248}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    if a < 2 or a >= 100:\n        return False\n    count = 0\n    prime_factors = []\n    for i in range(2, a + 1):\n        while a % i == 0:\n            if all(i % j != 0 for j in range(2, int(i ** 0.5) + 1)):\n                count += 1\n                prime_factors.append(i)\n                a = a // i\n            else:\n                break\n        if count >= 3:\n            break\n    return count == 3", "prompt_tokens": 624, "completion_tokens": 335, "duration": 14.06500792503357}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    \"\"\"Returns true if x is a simple power of n, false otherwise.\"\"\"\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False", "prompt_tokens": 626, "completion_tokens": 140, "duration": 7.893622398376465}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    '''\n    cube_root = abs(a) ** (1/3)\n    return round(cube_root) ** 3 == abs(a)", "prompt_tokens": 578, "completion_tokens": 162, "duration": 7.5819926261901855}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num: str) -> int:\n    \"\"\"Counts the number of prime hexadecimal digits in the given string.\"\"\"\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 927, "completion_tokens": 140, "duration": 8.429533004760742}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"  # Initialize the binary string with \"db\" at the beginning\n    if decimal == 0:\n        return \"db0db\"\n    while decimal > 0:\n        remainder = decimal % 2  # Get the remainder when dividing by 2\n        binary_str = \"db\" + str(remainder) + binary_str[2:]  # Add the remainder to the beginning of the binary string\n        decimal = decimal // 2  # Update the decimal number by integer division by 2\n    return binary_str", "prompt_tokens": 680, "completion_tokens": 267, "duration": 12.860252618789673}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    \"\"\"Check if the string is happy or not.\"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 592, "completion_tokens": 176, "duration": 9.297927618026733}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1106, "completion_tokens": 570, "duration": 22.20275568962097}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    length = len(string)\n    if length <= 1:\n        return False\n    if length == 2:\n        return True\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True", "prompt_tokens": 550, "completion_tokens": 226, "duration": 10.035871028900146}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)\n        else:\n            count += 2 * 10 ** (n - 2)\n\n    return count", "prompt_tokens": 429, "completion_tokens": 180, "duration": 7.596646308898926}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_digits)[2:]", "prompt_tokens": 615, "completion_tokens": 137, "duration": 8.576904058456421}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    sum_even_odd_indices = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_indices += lst[i]\n    return sum_even_odd_indices", "prompt_tokens": 453, "completion_tokens": 162, "duration": 8.044126272201538}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Takes a string and returns an ordered version of it where all words are replaced by a new word\n    where all the characters arranged in ascending order based on ascii value.\n    \"\"\"\n    words = s.split(' ')\n    ordered_words = []\n\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_words.append(sorted_word)\n\n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 645, "completion_tokens": 222, "duration": 9.214389562606812}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row[::-1]):\n            if val == x:\n                result.append((i, len(row) - 1 - j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 918, "completion_tokens": 303, "duration": 16.034830808639526}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 914, "completion_tokens": 306, "duration": 10.74658727645874}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    \"\"\"Encrypts a string by rotating the alphabet down by 2 multiplied to 2 places.\"\"\"\n    encrypted_s = \"\"\n    for ch in s:\n        if ch.islower():\n            shift = ((ord(ch) - ord('a') + 2*2) % 26) + ord('a')\n            encrypted_s += chr(shift)\n        else:\n            encrypted_s += ch\n    return encrypted_s", "prompt_tokens": 554, "completion_tokens": 166, "duration": 7.639708757400513}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 619, "completion_tokens": 210, "duration": 11.392839670181274}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with \"I\".\n    \"\"\"\n    import re\n    sentences = re.split(r'[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == \"I\":\n            count += 1\n    return count", "prompt_tokens": 546, "completion_tokens": 154, "duration": 9.923848390579224}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 625, "completion_tokens": 150, "duration": 7.119321823120117}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping case of all letters and replacing all vowels\n    with the letter that appears 2 places ahead of that vowel in the English alphabet.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    vowel_replacement = {'a': 'c', 'A': 'C', 'e': 'g', 'E': 'G', 'i': 'k', 'I': 'K', 'o': 'q', 'O': 'Q', 'u': 'w', 'U': 'W'}\n    encoded_message = ''\n    for ch in message:\n        if ch in vowels:\n            encoded_message += vowel_replacement[ch]\n        else:\n            encoded_message += ch.swapcase()\n    return encoded_message", "prompt_tokens": 627, "completion_tokens": 311, "duration": 15.769720792770386}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_digits_of_largest_prime(lst):\n    largest_prime = 0\n    for num in lst:\n        if num > 1:\n            is_prime = True\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime and num > largest_prime:\n                largest_prime = num\n\n    sum_digits = 0\n    if largest_prime > 0:\n        while largest_prime > 0:\n            sum_digits += largest_prime % 10\n            largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 985, "completion_tokens": 290, "duration": 11.660032749176025}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    is_lower = is_upper = False\n    for key in dict:\n        if isinstance(key, str):\n            if key.islower():\n                is_lower = True\n            elif key.isupper():\n                is_upper = True\n            if is_lower and is_upper:\n                return False\n    return is_lower or is_upper", "prompt_tokens": 772, "completion_tokens": 258, "duration": 11.174856662750244}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes", "prompt_tokens": 642, "completion_tokens": 172, "duration": 9.903326749801636}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 533, "completion_tokens": 126, "duration": 7.305644750595093}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 137, "duration": 7.503027677536011}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    floor = int(num)\n    ceiling = floor if floor == num else floor + 1\n    if abs(num - floor) < abs(num - ceiling):\n        return floor\n    elif abs(num - floor) > abs(num - ceiling):\n        return ceiling\n    else:\n        return ceiling if num > 0 else floor", "prompt_tokens": 735, "completion_tokens": 293, "duration": 9.97287130355835}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n    for i in range(1, n + 1):\n        stones_list.append(stones)\n        if n % 2 == 0:\n            stones += 2\n        else:\n            stones += 2\n    return stones_list", "prompt_tokens": 601, "completion_tokens": 147, "duration": 7.524491786956787}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in [',', ' ']:\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 616, "completion_tokens": 218, "duration": 8.357017993927002}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 503, "completion_tokens": 149, "duration": 8.762943506240845}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total_sum = sum(range(n, m+1))\n        count = m - n + 1\n        avg = round(total_sum / count)\n        binary_avg = bin(avg)\n        return binary_avg", "prompt_tokens": 635, "completion_tokens": 162, "duration": 8.436519145965576}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    result.sort()\n    return result", "prompt_tokens": 572, "completion_tokens": 198, "duration": 8.040223598480225}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort(reverse=True)\n    num_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    result = [num_to_name[num] for num in filtered_arr]\n    return result", "prompt_tokens": 947, "completion_tokens": 321, "duration": 15.816587686538696}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "prompt_tokens": 600, "completion_tokens": 194, "duration": 8.619746208190918}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 199, "duration": 8.781013011932373}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    \"\"\"\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= 1\n            num = -num\n        while num > 0:\n            sum_digits += num % 10\n            num = num // 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 240, "duration": 12.594758033752441}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    min_index = arr.index(min(arr))\n    for _ in range(n):\n        arr.insert(0, arr.pop())\n        if arr == sorted(arr):\n            return True\n    return False", "prompt_tokens": 999, "completion_tokens": 205, "duration": 7.718122243881226}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = sum(1 for num in lst1 if num % 2 != 0)\n    if count_odd == 0:\n        return \"YES\"\n    for num in lst2:\n        if num % 2 == 0:\n            count_odd -= 1\n            if count_odd == 0:\n                break\n    return \"YES\" if count_odd == 0 else \"NO\"", "prompt_tokens": 775, "completion_tokens": 217, "duration": 7.491511106491089}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    result_dict = {}\n    max_count = 0\n    for letter in letters:\n        if letter in result_dict:\n            result_dict[letter] += 1\n        else:\n            result_dict[letter] = 1\n        if result_dict[letter] > max_count:\n            max_count = result_dict[letter]\n    temp_dict = {letter: count for letter, count in result_dict.items() if count == max_count}\n    return temp_dict", "prompt_tokens": 746, "completion_tokens": 293, "duration": 11.051107406616211}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "prompt_tokens": 727, "completion_tokens": 190, "duration": 9.631148338317871}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result_lst = []\n    for i, string in enumerate(lst):\n        count = sum(1 for char in string if char.isdigit() and int(char) % 2 != 0)\n        result_lst.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result_lst", "prompt_tokens": 729, "completion_tokens": 207, "duration": 7.193641185760498}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = nums[0]\n    current_sum = nums[0]\n\n    for i in range(1, len(nums)):\n        current_sum = min(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 515, "completion_tokens": 173, "duration": 9.695291757583618}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    for row in grid:\n        for well in row:\n            if well > 0:\n                times += math.ceil(well / capacity)\n    return times", "prompt_tokens": 1030, "completion_tokens": 177, "duration": 6.940450668334961}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    \"\"\"\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 702, "completion_tokens": 239, "duration": 9.712554454803467}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\"\"\"\n    words = []\n    if not s:\n        return words\n    \n    vowels = \"aeiouAEIOU\"\n    s_words = s.split()\n    for word in s_words:\n        consonant_count = 0\n        for char in word:\n            if char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            words.append(word)\n    \n    return words", "prompt_tokens": 753, "completion_tokens": 265, "duration": 12.786598443984985}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            closest_vowel = word[i]\n            break\n    return closest_vowel", "prompt_tokens": 695, "completion_tokens": 246, "duration": 12.049326181411743}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    Input: lst: a list of two strings\n    Output: result: 'Yes' or 'No'\n    '''\n    # Concatenate the strings in both possible orders\n    str1 = lst[0] + lst[1]\n    str2 = lst[1] + lst[0]\n\n    # Function to check if a string is good\n    def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    # Check both possible concatenated strings\n    if is_good(str1) or is_good(str2):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 772, "completion_tokens": 353, "duration": 12.04009485244751}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k][::-1]", "prompt_tokens": 777, "completion_tokens": 140, "duration": 6.089801073074341}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 528, "completion_tokens": 138, "duration": 8.193049669265747}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if 10 <= arr[i] < 100:\n            sum += arr[i]\n    return sum", "prompt_tokens": 611, "completion_tokens": 179, "duration": 8.42882227897644}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_collatz_list = []\n\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        \n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 837, "completion_tokens": 234, "duration": 11.878506898880005}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is not empty\n    if not date:\n        return False\n    \n    # Split the date string into month, day, and year\n    parts = date.split('-')\n    \n    # Check if the date format is correct (mm-dd-yyyy)\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if month, day, and year are digits\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month, day, year = int(month), int(day), int(year)\n    \n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Define the maximum day for each month\n    max_days = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    \n    # Check if the day is valid for the given month\n    if day < 1 or day > max_days.get(month, 0):\n        return False\n    \n    return True", "prompt_tokens": 961, "completion_tokens": 466, "duration": 19.68289589881897}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return sum(1 for ch in txt if ch.islower() and (ord(ch) - ord('a')) % 2 == 0)", "prompt_tokens": 717, "completion_tokens": 242, "duration": 9.385684967041016}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if not lst:  # If the list is empty, consider it sorted\n        return True\n    prev = lst[0]\n    duplicate_count = 0\n    for num in lst[1:]:\n        if num < prev:  # If the current number is less than the previous, list is not sorted\n            return False\n        if num == prev:  # If the current number is equal to the previous, increment duplicate count\n            duplicate_count += 1\n            if duplicate_count > 1:  # If more than one duplicate, list is not sorted as per condition\n                return False\n        else:\n            duplicate_count = 0  # Reset duplicate count for new number\n        prev = num\n    return True", "prompt_tokens": 931, "completion_tokens": 336, "duration": 15.920445680618286}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    intersection_length = intersection_end - intersection_start + 1\n\n    return \"YES\" if is_prime(intersection_length) else \"NO\"", "prompt_tokens": 931, "completion_tokens": 300, "duration": 14.035422086715698}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    product_signs = 1\n    for num in arr:\n        sum_magnitudes += abs(num)\n        product_signs *= (1 if num > 0 else -1 if num < 0 else 0)\n    return sum_magnitudes * product_signs", "prompt_tokens": 620, "completion_tokens": 202, "duration": 10.215142726898193}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    min_path = [float('inf')] * k\n\n    def dfs(x, y, path):\n        nonlocal min_path\n        if len(path) == k:\n            min_path = min(min_path, path)\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                dfs(nx, ny, path + [grid[nx][ny]])\n\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]])\n\n    return min_path", "prompt_tokens": 1258, "completion_tokens": 381, "duration": 17.35514187812805}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    sequence = [1, 3]\n    if n == 1:\n        return sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            if i + 1 <= n:  # Check if the next element is within bounds\n                sequence.append(sequence[i - 1] + sequence[i - 2] + (1 + (i + 1) / 2))\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 1])  # Use last element as tri(i + 1)\n    return sequence", "prompt_tokens": 925, "completion_tokens": 363, "duration": 17.9870548248291}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n != 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            has_odd = True\n            product *= digit\n        n //= 10\n\n    if not has_odd:\n        return 0\n    else:\n        return product", "prompt_tokens": 484, "completion_tokens": 222, "duration": 11.655981540679932}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0", "prompt_tokens": 658, "completion_tokens": 190, "duration": 9.582150936126709}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 643, "completion_tokens": 95, "duration": 6.485464096069336}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    '''\n    if not txt:\n        return False\n    txt = txt.rstrip()\n    if txt and txt[-1].isalpha():\n        if len(txt) == 1 or txt[-2].isspace():\n            return True\n    return False", "prompt_tokens": 665, "completion_tokens": 233, "duration": 14.395133256912231}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index", "prompt_tokens": 555, "completion_tokens": 138, "duration": 10.341422080993652}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n\n    if not lst:\n        return (None, None)\n\n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        if num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n\n    return (largest_neg, smallest_pos)", "prompt_tokens": 662, "completion_tokens": 228, "duration": 13.205117225646973}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and isinstance(b, str):\n        try:\n            a_float = float(a.replace(',', '.'))\n            b_float = float(b.replace(',', '.'))\n        except ValueError:\n            return None\n        if a_float > b_float:\n            return a\n        elif b_float > a_float:\n            return b\n        else:\n            return None", "prompt_tokens": 758, "completion_tokens": 360, "duration": 16.286150693893433}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # The smallest sum of 4 positive even numbers is 2+2+2+2=8\n    # Any even number greater than or equal to 8 can be written as the sum of exactly 4 positive even numbers\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 507, "completion_tokens": 190, "duration": 11.245028018951416}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of a number.\"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 516, "completion_tokens": 137, "duration": 9.28114366531372}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    updated_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n        else:\n            if count > 2:\n                updated_text += \"-\" + ch\n            elif count > 0:\n                updated_text += \"_\" + ch\n            else:\n                updated_text += ch\n            count = 0\n    if count > 2:\n        updated_text += \"-\"\n    elif count > 0:\n        updated_text += \"_\"\n    return updated_text", "prompt_tokens": 638, "completion_tokens": 282, "duration": 11.586434125900269}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1 or sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha() or extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 845, "completion_tokens": 242, "duration": 12.963526010513306}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum", "prompt_tokens": 698, "completion_tokens": 179, "duration": 8.489435195922852}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 663, "completion_tokens": 209, "duration": 11.147928714752197}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    return product_num % product_den == 0", "prompt_tokens": 643, "completion_tokens": 141, "duration": 10.968738555908203}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 622, "completion_tokens": 270, "duration": 13.065073728561401}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                count += 1\n    return count", "prompt_tokens": 570, "completion_tokens": 144, "duration": 8.873415231704712}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Initialize count of valid triples\n    count = 0\n    \n    # Precompute the array values\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Iterate through all possible triples\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count", "prompt_tokens": 731, "completion_tokens": 348, "duration": 14.250974893569946}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 < index2:\n            result = planets[index1+1:index2]\n        else:\n            result = planets[index2+1:index1]\n            result = result[::-1]\n        return tuple(result)\n    else:\n        return ()", "prompt_tokens": 827, "completion_tokens": 275, "duration": 12.383687973022461}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    \"\"\"Sorts the list by removing odd length strings and sorting by length and alphabetically.\"\"\"\n    # Filter out strings with odd lengths and sort the remaining strings alphabetically\n    sorted_lst = sorted([w for w in lst if len(w) % 2 == 0])\n    # Sort the list by the length of the strings\n    sorted_lst.sort(key=len)\n    return sorted_lst", "prompt_tokens": 741, "completion_tokens": 197, "duration": 8.29832410812378}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if n < 2:\n        return None\n\n    is_prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            is_prime = False\n            break\n\n    if is_prime:\n        return x\n    else:\n        return y", "prompt_tokens": 516, "completion_tokens": 189, "duration": 8.769092559814453}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(num**2 for num in lst if isinstance(num, int) and num > 0 and num % 2 != 0)", "prompt_tokens": 612, "completion_tokens": 117, "duration": 7.238706111907959}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 806, "completion_tokens": 120, "duration": 7.745396137237549}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 947, "completion_tokens": 234, "duration": 9.558383226394653}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    aa = a + a\n    for i in range(n):\n        if aa[i:i+m] == b:\n            return True\n        for j in range(1, m):\n            if aa[i:i+j] + aa[i+m-j:i+m] == b:\n                return True\n    return False", "prompt_tokens": 650, "completion_tokens": 230, "duration": 12.92780613899231}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 10.786775827407837}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = \"\"\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n    return roman_numeral", "prompt_tokens": 580, "completion_tokens": 297, "duration": 15.367835283279419}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    '''\n    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n\n    if a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared:\n        return True\n    else:\n        return False", "prompt_tokens": 608, "completion_tokens": 243, "duration": 12.485948324203491}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars or (len(unique_chars) == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = len(unique_chars)\n\n    return max_word", "prompt_tokens": 591, "completion_tokens": 171, "duration": 9.395567178726196}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Returns the total number of eaten carrots after your meals and the number of carrots left.\n    \"\"\"\n    if remaining >= need:\n        total_eaten = number + need\n        remaining -= need\n    else:\n        total_eaten = number + remaining\n        remaining = 0\n    return [total_eaten, remaining]", "prompt_tokens": 920, "completion_tokens": 187, "duration": 12.718261957168579}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i + 1]\n        elif op == '-':\n            result -= operand[i + 1]\n        elif op == '*':\n            result *= operand[i + 1]\n        elif op == '//':\n            result //= operand[i + 1]\n        elif op == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 856, "completion_tokens": 345, "duration": 13.959506273269653}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(c.isalpha() for c in result):\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 191, "duration": 9.572062969207764}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n\n    import hashlib\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 128, "duration": 10.457371711730957}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits = []\n    if a > b:\n        a, b = b, a\n\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_digits.append(num)\n\n    return even_digits", "prompt_tokens": 533, "completion_tokens": 157, "duration": 8.123282432556152}
