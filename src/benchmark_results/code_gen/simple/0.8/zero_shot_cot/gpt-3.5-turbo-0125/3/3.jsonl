{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Iterate over the list of numbers\n    for i in range(len(numbers) - 1):\n        # Check if the absolute difference between two consecutive numbers is less than the threshold\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    \n    return False", "prompt_tokens": 163, "completion_tokens": 94, "duration": 2.4586682319641113}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove all spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store the separated groups\n    separated_groups = []\n    \n    # Initialize variables to track the start and end indices of each group\n    start = 0\n    end = 0\n    \n    # Iterate through the input string\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            start = i\n        elif char == ')':\n            end = i\n            separated_groups.append(paren_string[start:end+1])\n    \n    return separated_groups", "prompt_tokens": 154, "completion_tokens": 141, "duration": 2.7344157695770264}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    # Get the integer part of the number\n    integer_part = int(number)\n    \n    # Get the decimal part of the number\n    decimal_part = number - integer_part\n    \n    return decimal_part", "prompt_tokens": 125, "completion_tokens": 56, "duration": 1.4782702922821045}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    # Initialize balance variable with zero\n    balance = 0\n    \n    # Iterate through each operation in the list\n    for operation in operations:\n        # Update the balance based on the operation\n        balance += operation\n        \n        # Check if balance is below zero\n        if balance < 0:\n            return True\n    \n    return False", "prompt_tokens": 158, "completion_tokens": 85, "duration": 2.049684762954712}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the sum of absolute differences between each number and the mean\n    sum_abs_diff = sum(abs(num - mean) for num in numbers)\n    \n    # Calculate the mean absolute deviation\n    mad = sum_abs_diff / len(numbers)\n    \n    return mad", "prompt_tokens": 156, "completion_tokens": 92, "duration": 2.438004970550537}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    # Create an empty list to store the result\n    result = []\n    # Iterate through the input list 'numbers' except for the last element\n    for num in numbers[:-1]:\n        # Append the current number and the delimiter to the result list\n        result.extend([num, delimiter])\n    # Append the last number from the input list to the result list\n    if numbers:\n        result.append(numbers[-1])\n    # Return the result list\n    return result", "prompt_tokens": 131, "completion_tokens": 114, "duration": 2.579055070877075}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string by spaces to get individual groups\n    groups = paren_string.split()\n\n    # Initialize an empty list to store the deepest level of nesting for each group\n    deepest_levels = []\n\n    # Iterate through each group\n    for group in groups:\n        # Initialize variables to keep track of current nesting level and maximum nesting level\n        current_level = 0\n        max_level = 0\n\n        # Iterate through each character in the group\n        for char in group:\n            if char == '(':\n                # Increment the current nesting level when encountering an open parenthesis\n                current_level += 1\n            elif char == ')':\n                # Update the maximum nesting level if the current level is higher\n                max_level = max(max_level, current_level)\n                # Decrement the current nesting level when encountering a closing parenthesis\n                current_level -= 1\n        \n        # Append the maximum nesting level for the group to the result list\n        deepest_levels.append(max_level)\n\n    # Return the list of deepest nesting levels for each group\n    return deepest_levels", "prompt_tokens": 151, "completion_tokens": 238, "duration": 4.409795522689819}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Create an empty list to store filtered strings\n    filtered_strings = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the substring is present in the current string\n        if substring in string:\n            # If substring is present, add the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the filtered list\n    return filtered_strings", "prompt_tokens": 132, "completion_tokens": 109, "duration": 2.350166082382202}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    # Calculate the sum of the numbers in the list\n    sum_result = sum(numbers)\n    \n    # Calculate the product of the numbers in the list\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n        \n    # Return a tuple of sum and product\n    return sum_result, product_result", "prompt_tokens": 149, "completion_tokens": 172, "duration": 4.852558135986328}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store the rolling maximum values\n    result = []\n    # Initialize a deque to store the indices of the numbers that might be the maximum at a given moment\n    window = deque()\n    \n    # Iterate through the numbers list\n    for i, num in enumerate(numbers):\n        # Remove indices from the window that are no longer in the current window\n        while window and window[0] < i - 2:\n            window.popleft()\n        \n        # Remove indices from the window whose corresponding values are less than the current number\n        while window and numbers[window[-1]] < num:\n            window.pop()\n        \n        # Add the current index to the window\n        window.append(i)\n        \n        # Append the rolling maximum to the result list\n        result.append(numbers[window[0]])\n    \n    return result", "prompt_tokens": 139, "completion_tokens": 190, "duration": 3.269279718399048}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    \n    # Check if the string is already a palindrome\n    if string == string[::-1]:\n        return string\n\n    # Find the longest postfix that is a palindrome\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            break\n\n    # Append reverse of prefix before palindromic suffix to the end\n    return string + string[:i-1][::-1]", "prompt_tokens": 182, "completion_tokens": 123, "duration": 2.4384613037109375}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    # Convert the input strings to integers\n    a_int = int(a, 2)\n    b_int = int(b, 2)\n    \n    # Perform XOR operation\n    result = a_int ^ b_int\n    \n    # Convert the result back to binary string and remove the '0b' prefix\n    return bin(result)[2:]", "prompt_tokens": 115, "completion_tokens": 88, "duration": 2.2477104663848877}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    # Return None if input list is empty\n    if not strings:\n        return None\n    \n    # Find the length of the longest string in the list\n    max_length = max(len(s) for s in strings)\n    \n    # Find the first string with the maximum length\n    return next(s for s in strings if len(s) == max_length)", "prompt_tokens": 141, "completion_tokens": 88, "duration": 1.9647626876831055}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Euclidean algorithm to find the greatest common divisor\n    while b != 0:\n        a, b = b, a % b\n    return a", "prompt_tokens": 110, "completion_tokens": 49, "duration": 1.6535050868988037}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    # Initialize an empty list to store prefixes\n    prefixes = []\n    \n    # Loop through the input string\n    for i in range(1, len(string)+1):\n        # Append the prefix up to the current index to the prefixes list\n        prefixes.append(string[:i])\n    \n    return prefixes", "prompt_tokens": 98, "completion_tokens": 79, "duration": 2.117583990097046}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    # Create a list of numbers from 0 to n using list comprehension\n    numbers = [str(i) for i in range(n+1)]\n    \n    # Join the numbers in the list with space as delimiter\n    return ' '.join(numbers)", "prompt_tokens": 108, "completion_tokens": 66, "duration": 2.0071938037872314}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to ignore case sensitivity\n    string = string.lower()\n    \n    # Use set to get unique characters\n    distinct_characters = set(string)\n    \n    # Count the number of unique characters\n    return len(distinct_characters)", "prompt_tokens": 110, "completion_tokens": 68, "duration": 2.1225950717926025}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    # Create a dictionary to map note symbols to their corresponding durations\n    note_durations = {'o': 4, 'o|': 2, '.|': 1}\n    \n    # Initialize an empty list to store the parsed note durations\n    parsed_notes = []\n    \n    # Split the input music string into individual notes\n    notes = music_string.split()\n    \n    # Iterate through each note in the list of notes\n    for note in notes:\n        # Get the duration of the current note from the dictionary and append it to the parsed_notes list\n        parsed_notes.append(note_durations[note])\n    \n    # Return the list of parsed note durations\n    return parsed_notes\n\n# Test the function with the provided example\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))", "prompt_tokens": 211, "completion_tokens": 188, "duration": 3.807582378387451}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    # Initialize a count variable to keep track of the number of occurrences\n    count = 0\n    # Iterate over the original string\n    for i in range(len(string) - len(substring) + 1):\n        # Check if the current substring matches the given substring\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 128, "completion_tokens": 99, "duration": 2.5773444175720215}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    # Create a dictionary to map number words to their numerical values\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Split the input string into a list of number words\n    num_list = numbers.split()\n    \n    # Sort the list of number words based on their numerical values\n    sorted_nums = sorted(num_list, key=lambda x: num_dict[x])\n    \n    # Join the sorted number words into a string separated by a space\n    return ' '.join(sorted_nums)", "prompt_tokens": 144, "completion_tokens": 168, "duration": 4.881479740142822}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the numbers in ascending order\n    numbers.sort()\n    \n    # Initialize variables to keep track of the closest pair and their difference\n    closest_pair = None\n    min_diff = float('inf')\n    \n    # Iterate through the list to find the closest pair\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "prompt_tokens": 205, "completion_tokens": 133, "duration": 3.1687886714935303}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the minimum and maximum numbers in the list\n    min_num = min(numbers)\n    max_num = max(numbers)\n\n    # Calculate the range of the numbers\n    range_num = max_num - min_num\n\n    # Apply linear transformation to rescale the numbers to the unit range\n    rescaled_numbers = [(num - min_num) / range_num for num in numbers]\n\n    return rescaled_numbers", "prompt_tokens": 162, "completion_tokens": 103, "duration": 2.264153242111206}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Initialize an empty list to store the filtered integers\n    result = []\n    \n    # Iterate through each value in the input list\n    for value in values:\n        # Check if the value is an integer\n        if isinstance(value, int):\n            # If it is an integer, add it to the result list\n            result.append(value)\n    \n    # Return the list of filtered integers\n    return result", "prompt_tokens": 130, "completion_tokens": 104, "duration": 2.295135259628296}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    # Return the length of the string\n    return len(string)", "prompt_tokens": 83, "completion_tokens": 27, "duration": 1.3360021114349365}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    # Start from n-1 and iterate down to 1\n    for i in range(n-1, 0, -1):\n        # Check if i divides n evenly\n        if n % i == 0:\n            return i", "prompt_tokens": 92, "completion_tokens": 66, "duration": 2.058286666870117}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    # Initialize an empty list to store the prime factors\n    factors = []\n    \n    # Initialize the divisor from 2\n    divisor = 2\n    \n    # While the input number is greater than 1\n    while n > 1:\n        # Check if the input number is divisible by the divisor\n        if n % divisor == 0:\n            # Add the divisor to the factors list\n            factors.append(divisor)\n            # Update the input number by dividing it by the divisor\n            n //= divisor\n        else:\n            # If input number is not divisible by the divisor, increment the divisor\n            divisor += 1\n    \n    # Return the list of prime factors\n    return factors", "prompt_tokens": 165, "completion_tokens": 165, "duration": 3.2325167655944824}
{"task_id": "HumanEval/26", "generated_code": "from collections import Counter  # Import Counter to count occurrences of elements\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:  # Define the function with the given signature\n    counts = Counter(numbers)  # Count occurrences of each element\n    return [num for num in numbers if counts[num] == 1]  # Return elements that occur only once\n\n# Test the function\nprint(remove_duplicates([1, 2, 3, 2, 4]))  # Output should be [1, 3, 4]", "prompt_tokens": 123, "completion_tokens": 112, "duration": 2.165985107421875}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    # Use a list comprehension to iterate over characters in the string and flip their case\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 88, "completion_tokens": 54, "duration": 1.7924373149871826}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    # Join all strings in the list into a single string\n    return ''.join(strings)", "prompt_tokens": 96, "completion_tokens": 34, "duration": 1.4700555801391602}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Create an empty list to store strings that start with the given prefix\n    result = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, add the string to the result list\n            result.append(string)\n    \n    # Return the list of strings that start with the given prefix\n    return result", "prompt_tokens": 126, "completion_tokens": 115, "duration": 2.5142760276794434}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    # Create an empty list to store positive numbers\n    positive_nums = []\n    \n    # Iterate through the list\n    for num in l:\n        # Check if the number is positive\n        if num > 0:\n            # Append the positive number to the positive_nums list\n            positive_nums.append(num)\n    \n    # Return the list of positive numbers\n    return positive_nums", "prompt_tokens": 153, "completion_tokens": 85, "duration": 1.952174186706543}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 139, "completion_tokens": 62, "duration": 1.5684318542480469}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    n = len(xs)\n    a = xs[0]\n    b = xs[-1]\n    \n    if a == 0:\n        return 0\n    if n % 2 != 0:\n        return None\n\n    if a > b:\n        a, b = b, a\n\n    return -b / a\n\n# Test the function with provided test cases\nprint(round(find_zero([1, 2]), 2))\nprint(round(find_zero([-6, 11, -6, 1]), 2))", "prompt_tokens": 298, "completion_tokens": 121, "duration": 2.5694665908813477}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Create a list of indices that are divisible by three\n    indices_divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort the values at the indices divisible by three\n    sorted_values = sorted([l[i] for i in indices_divisible_by_three])\n    \n    # Replace the values at the indices divisible by three with the sorted values\n    for i, val in zip(indices_divisible_by_three, sorted_values):\n        l[i] = val\n    \n    return l", "prompt_tokens": 190, "completion_tokens": 124, "duration": 2.4808261394500732}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    # Convert the list to a set to remove duplicates\n    unique_set = set(l)\n    \n    # Sort the unique elements\n    sorted_unique = sorted(unique_set)\n    \n    return sorted_unique", "prompt_tokens": 113, "completion_tokens": 51, "duration": 1.647434949874878}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    # Sort the list in ascending order\n    l.sort()\n    # Return the last element in the sorted list, which is the maximum element\n    return l[-1]", "prompt_tokens": 122, "completion_tokens": 43, "duration": 3.5303003787994385}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    # Initialize a counter variable to keep track of the number of times the digit 7 appears\n    count = 0\n    \n    # Iterate through numbers less than n\n    for i in range(n):\n        # Check if the number is divisible by 11 or 13 and contains the digit 7\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    \n    # Return the final count\n    return count", "prompt_tokens": 119, "completion_tokens": 119, "duration": 2.644792079925537}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Extract even indices elements from the list and sort them\n    sorted_even = sorted(l[::2])\n    \n    # Create a new list by replacing the even indices elements with the sorted ones\n    result = [sorted_even.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n    \n    return result", "prompt_tokens": 163, "completion_tokens": 86, "duration": 2.5033175945281982}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 198, "completion_tokens": 114, "duration": 2.243577241897583}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Initialize variables for the Fibonacci sequence\n    a, b = 1, 1\n    count = 2\n    \n    # Loop to find the n-th prime Fibonacci number\n    while count < n:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n    \n    return b", "prompt_tokens": 137, "completion_tokens": 149, "duration": 2.647585868835449}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 199, "completion_tokens": 70, "duration": 1.9251317977905273}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    # Calculate the number of collision points\n    collision_points = n * (n - 1)\n    \n    # Calculate the number of collisions by dividing the collision points by 2\n    collisions = collision_points // 2\n    \n    return collisions", "prompt_tokens": 191, "completion_tokens": 63, "duration": 3.487258195877075}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    # Create an empty list to store the incremented elements\n    result = []\n    \n    # Iterate over each element in the input list\n    for num in l:\n        # Increment each element by 1 and append to the result list\n        result.append(num + 1)\n    \n    # Return the result list\n    return result", "prompt_tokens": 148, "completion_tokens": 80, "duration": 1.9982500076293945}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    # Iterate through the list\n    for i in range(len(l)):\n        # Check if the negative of the current element exists in the list\n        if -l[i] in l and l.count(-l[i]) > 1:\n            return True\n    return False", "prompt_tokens": 197, "completion_tokens": 68, "duration": 1.6427421569824219}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    # check if the base is valid\n    if base < 2 or base > 9:\n        return \"Invalid base. Please enter a base between 2 and 9.\"\n    \n    # initialize an empty list to store the digits of the converted number\n    result = []\n    \n    # convert the number to the specified base\n    while x > 0:\n        digit = x % base\n        result.insert(0, str(digit))\n        x = x // base\n    \n    # return the converted number as a string\n    return ''.join(result)", "prompt_tokens": 131, "completion_tokens": 131, "duration": 4.511147737503052}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    # Calculate the area of the triangle using the formula: (1/2) * base * height\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 86, "completion_tokens": 49, "duration": 3.6987898349761963}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    # Initialize a list to store the first 4 elements of the sequence\n    fib4_list = [0, 0, 2, 0]\n    \n    # Loop to calculate the n-th element of the fib4 sequence\n    for i in range(4, n + 1):\n        fib4_list.append(fib4_list[-1] + fib4_list[-2] + fib4_list[-3] + fib4_list[-4])\n    \n    # Return the n-th element of the sequence\n    return fib4_list[n]", "prompt_tokens": 211, "completion_tokens": 125, "duration": 4.4159300327301025}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    # Sort the list\n    l.sort()\n    \n    # Find the length of the list\n    n = len(l)\n    \n    # Check if the length is odd or even\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0", "prompt_tokens": 115, "completion_tokens": 89, "duration": 1.4476609230041504}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    # Remove whitespaces and convert text to lowercase\n    text = text.replace(\" \", \"\").lower()\n    \n    # Check if the reversed text is equal to the original text\n    return text == text[::-1]", "prompt_tokens": 111, "completion_tokens": 56, "duration": 3.4928104877471924}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    # Calculate 2^n\n    result = 2 ** n\n    # Calculate the modulo of the result with p\n    result = result % p\n    return result", "prompt_tokens": 145, "completion_tokens": 52, "duration": 1.1934845447540283}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 130, "completion_tokens": 62, "duration": 1.2519218921661377}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    # Create a list of vowels to check against\n    vowels = 'aeiouAEIOU'\n    \n    # Use list comprehension to filter out vowels from the text\n    filtered_text = ''.join([char for char in text if char not in vowels])\n    \n    return filtered_text", "prompt_tokens": 162, "completion_tokens": 70, "duration": 4.198132753372192}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    # Iterate through each number in the list\n    for num in l:\n        # Check if the number is greater than or equal to the threshold\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 119, "completion_tokens": 55, "duration": 3.243121385574341}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    # Return the sum of x and y\n    return x + y", "prompt_tokens": 93, "completion_tokens": 30, "duration": 2.9809634685516357}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    # Sort the characters of both strings\n    s0_sorted = sorted(s0)\n    s1_sorted = sorted(s1)\n    \n    # Check if the sorted characters are the same\n    return s0_sorted == s1_sorted", "prompt_tokens": 180, "completion_tokens": 66, "duration": 3.3697633743286133}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    # base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # initialize variables for first two Fibonacci numbers\n    a, b = 0, 1\n    \n    # iterate to find the n-th Fibonacci number\n    for _ in range(2, n+1):\n        a, b = b, a+b\n    \n    return b", "prompt_tokens": 92, "completion_tokens": 97, "duration": 4.005151987075806}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a counter to keep track of the number of opening brackets\n    count = 0\n    \n    # Loop through each bracket in the input string\n    for bracket in brackets:\n        # If the current bracket is an opening bracket, increment the counter\n        if bracket == \"<\":\n            count += 1\n        # If the current bracket is a closing bracket, decrement the counter\n        elif bracket == \">\":\n            count -= 1\n            # If the counter becomes negative at any point, return False\n            if count < 0:\n                return False\n    \n    # If the counter is 0 at the end, return True (every opening bracket has a closing bracket)\n    return count == 0", "prompt_tokens": 132, "completion_tokens": 164, "duration": 5.095987558364868}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    # check if the list is sorted in ascending order\n    if l == sorted(l):\n        return True\n    # check if the list is sorted in descending order\n    if l == sorted(l, reverse=True):\n        return True\n    return False", "prompt_tokens": 127, "completion_tokens": 64, "duration": 3.4735465049743652}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    # Find the common elements between the two lists\n    common_elements = set(l1).intersection(set(l2))\n    \n    # Sort the common elements and return as a list\n    return sorted(list(common_elements))", "prompt_tokens": 154, "completion_tokens": 60, "duration": 3.6014513969421387}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Find the largest prime factor of n\n    i = 2\n    while i <= n:\n        if n % i == 0 and is_prime(n // i):\n            return n // i\n        i += 1", "prompt_tokens": 103, "completion_tokens": 127, "duration": 2.045438528060913}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    # Initialize a variable to store the sum\n    total = 0\n    \n    # Loop through numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Add each number to the total\n        total += i\n        \n    # Return the sum of numbers from 1 to n\n    return total", "prompt_tokens": 134, "completion_tokens": 84, "duration": 4.010185241699219}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    # Initialize a variable to keep track of the balance of brackets\n    balance = 0\n    \n    # Iterate through each character in the brackets string\n    for char in brackets:\n        # If the character is an opening bracket, increment the balance\n        if char == \"(\":\n            balance += 1\n        # If the character is a closing bracket, decrement the balance\n        elif char == \")\":\n            balance -= 1\n        # If the balance becomes negative at any point, return False\n        if balance < 0:\n            return False\n    \n    # Return True if the balance is 0 at the end (all opening brackets have corresponding closing brackets)\n    return balance == 0", "prompt_tokens": 129, "completion_tokens": 157, "duration": 5.0847203731536865}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    # Initialize an empty list to store the derivatives\n    derivatives = []\n    \n    # Loop through the coefficients to calculate the derivative\n    for i in range(1, len(xs)):\n        derivatives.append(xs[i] * i)\n    \n    return derivatives", "prompt_tokens": 148, "completion_tokens": 62, "duration": 3.294447183609009}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    \n    # Initialize variables for the first three numbers in the sequence\n    a, b, c = 0, 1, 1\n    \n    # Calculate fibfib(n) using a loop\n    for i in range(3, n+1):\n        a, b, c = b, c, a + b + c\n    \n    return c", "prompt_tokens": 189, "completion_tokens": 118, "duration": 4.132650136947632}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    # Define a set of vowels\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    \n    # Initialize a counter for vowels\n    count = 0\n    \n    # Check each character in the string\n    for i in range(len(s)):\n        # Check if the character is a vowel\n        if s[i].lower() in vowels:\n            # If it is 'y' and not at the end of the word, skip it\n            if s[i].lower() == 'y' and i != len(s) - 1:\n                continue\n            count += 1\n    \n    return count", "prompt_tokens": 166, "completion_tokens": 141, "duration": 4.646549940109253}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)  # Convert integer x to a string\n    shift = shift % len(x_str)  # Calculate the actual shift required\n    if shift == 0:\n        return x_str  # If shift is 0, return the original string\n    else:\n        shifted_str = x_str[-shift:] + x_str[:-shift]  # Perform circular shift\n        return shifted_str  # Return the shifted string", "prompt_tokens": 122, "completion_tokens": 103, "duration": 3.514289379119873}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s: str) -> int:\n    # Initialize a variable to store the sum of ASCII codes\n    sum_ascii = 0\n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII code of the uppercase letter to the sum\n            sum_ascii += ord(char)\n    # Return the total sum of ASCII codes of uppercase letters\n    return sum_ascii", "prompt_tokens": 152, "completion_tokens": 107, "duration": 4.134743690490723}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s: str, n: int) -> int:\n    # Split the input string to get the numbers of apples and oranges\n    nums = [int(num) for num in s.split() if num.isdigit()]\n    \n    # Calculate the number of mango fruits in the basket\n    return n - nums[0] - nums[1]", "prompt_tokens": 250, "completion_tokens": 76, "duration": 3.398892879486084}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    # Filter out even values\n    even_values = [num for num in arr if num % 2 == 0]\n    \n    # If there are no even values or the array is empty, return empty list\n    if not even_values:\n        return []\n    \n    # Find the smallest even value\n    smallest_even = min(even_values)\n    \n    # Find the index of the smallest even value\n    index = arr.index(smallest_even)\n    \n    return [smallest_even, index]", "prompt_tokens": 352, "completion_tokens": 112, "duration": 3.662273645401001}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    # Create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    \n    # Count the frequency of each integer in the list\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Find the greatest integer that meets the condition\n    result = -1\n    for num, freq in freq_dict.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    \n    return result", "prompt_tokens": 205, "completion_tokens": 127, "duration": 4.631619453430176}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # While there are elements in the sorted list\n    while lst:\n        # Append the minimum element to the result\n        result.append(lst.pop(0))\n        \n        # If there are remaining elements in the list, append the maximum element to the result\n        if lst:\n            result.append(lst.pop())\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 108, "duration": 2.0531203746795654}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 161, "completion_tokens": 134, "duration": 4.461689710617065}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q,w):\n    # Check if the list q is palindromic\n    if q == q[::-1]:\n        # Check if the sum of elements in q is less than or equal to w\n        if sum(q) <= w:\n            return True\n    return False", "prompt_tokens": 270, "completion_tokens": 67, "duration": 3.3558309078216553}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    # Initialize a variable to keep track of the count of changes needed\n    changes = 0\n    \n    # Iterate over the array up to its midpoint\n    for i in range(len(arr) // 2):\n        # Check if the elements at the current position and its mirrored position are different\n        if arr[i] != arr[len(arr) - 1 - i]:\n            # Increment the changes count by the absolute difference between the elements\n            changes += abs(arr[i] - arr[len(arr) - 1 - i])\n    \n    return changes", "prompt_tokens": 197, "completion_tokens": 123, "duration": 2.669865369796753}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum([len(word) for word in lst1])\n    total_chars_lst2 = sum([len(word) for word in lst2])\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 233, "completion_tokens": 89, "duration": 5.374987363815308}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Check all combinations of three prime numbers that multiply to the given number 'a'\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i+1, a):\n                if a % (i*j) == 0 and is_prime(j) and is_prime(a//(i*j)):\n                    return True\n    return False", "prompt_tokens": 119, "completion_tokens": 158, "duration": 4.894813776016235}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    # Check if x is 1 and n is not 1\n    if x == 1 and n != 1:\n        return True\n    # Check if x is less than or equal to 0 or n is less than or equal to 0\n    if x <= 0 or n <= 0:\n        return False\n    # Check if x is equal to n\n    if x == n:\n        return True\n    # Check if x is a simple power of n\n    while x > n:\n        if x % n == 0:\n            x = x / n\n        else:\n            break\n    return x == n", "prompt_tokens": 182, "completion_tokens": 149, "duration": 4.453836441040039}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    # Get the cube root of the absolute value of the input\n    root = abs(a) ** (1/3)\n    # Check if the cube root is an integer\n    return root.is_integer()", "prompt_tokens": 150, "completion_tokens": 52, "duration": 1.2383737564086914}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Define a dictionary mapping hexadecimal digits to their decimal values\n    hex_values = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    \n    # Initialize a count variable to keep track of prime digits\n    count = 0\n    \n    # Iterate through each character in the hexadecimal number\n    for digit in num:\n        # Check if the decimal value of the hexadecimal digit is prime\n        if hex_values[digit] in [2, 3, 5, 7, 11, 13]:\n            count += 1\n    \n    return count", "prompt_tokens": 339, "completion_tokens": 273, "duration": 6.334808826446533}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    # Convert decimal to binary\n    binary = bin(decimal)[2:]\n    \n    # Add 'db' at the beginning and at the end of the string\n    result = 'db' + binary + 'db'\n    \n    return result", "prompt_tokens": 179, "completion_tokens": 60, "duration": 3.3969602584838867}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    # Check if the length of the string is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string up to the third last character\n    for i in range(len(s) - 2):\n        # Check if every 3 consecutive letters are distinct\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    \n    return True", "prompt_tokens": 161, "completion_tokens": 120, "duration": 3.691275119781494}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    # Create a list to store the letter grades\n    letter_grades = []\n    \n    # Iterate through each GPA in the input list\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    \n    return letter_grades", "prompt_tokens": 310, "completion_tokens": 271, "duration": 5.990572929382324}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    # Calculate the length of the string\n    length = len(string)\n    \n    # Check if the length is less than 2, return False\n    if length < 2:\n        return False\n    \n    # Check if the length is a prime number\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    \n    return True", "prompt_tokens": 121, "completion_tokens": 99, "duration": 1.863720178604126}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    # Initialize count to store the count of numbers that start or end with 1\n    count = 0\n    \n    # Count the numbers that start with 1\n    count_start_with_1 = 9 * 10**(n-1)\n    \n    # Count the numbers that end with 1\n    count_end_with_1 = 10**(n-1)\n    \n    # Subtract the overlap where the number starts and ends with 1\n    overlap = 1\n    \n    # Calculate the total count\n    count = count_start_with_1 + count_end_with_1 - overlap\n    \n    return count", "prompt_tokens": 84, "completion_tokens": 138, "duration": 2.7217113971710205}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Convert the integer N to binary representation\n    binary_str = bin(N)[2:]\n    \n    # Sum the digits of the binary string\n    total_sum = sum(int(digit) for digit in binary_str)\n    \n    # Return the total sum as a binary string\n    return bin(total_sum)[2:]", "prompt_tokens": 173, "completion_tokens": 73, "duration": 3.727936267852783}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    # Filter even elements at odd indices\n    even_elements = [lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0]\n    \n    # Return the sum of even elements at odd indices\n    return sum(even_elements)", "prompt_tokens": 95, "completion_tokens": 69, "duration": 1.6789820194244385}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    # Split the input string into words\n    words = s.split()\n    \n    # Sort characters of each word in ascending order based on ascii value\n    sorted_words = [''.join(sorted(word)) for word in words]\n    \n    # Join the sorted words with spaces to get the final result\n    result = ' '.join(sorted_words)\n    \n    return result", "prompt_tokens": 170, "completion_tokens": 84, "duration": 2.100369930267334}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []  # Initialize an empty list to store the result coordinates\n    for i, row in enumerate(lst):  # Loop through each row in the list\n        for j, val in enumerate(row):  # Loop through each value in the row\n            if val == x:  # Check if the value matches x\n                result.append((i, j))  # Add the coordinate to the result list\n    result.sort(key=lambda x: (x[0], -x[1]))  # Sort the result list by row in ascending order and column in descending order\n    return result  # Return the sorted result list", "prompt_tokens": 299, "completion_tokens": 143, "duration": 3.171414613723755}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy() # make a copy of the given array\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0: # check if sum of first and last elements is even\n        sorted_array.sort(reverse=True) # sort the array in descending order\n    else:\n        sorted_array.sort() # sort the array in ascending order\n    return sorted_array", "prompt_tokens": 243, "completion_tokens": 94, "duration": 2.299405336380005}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Initialize an empty string to store the encrypted result\n    result = ''\n    \n    # Loop through each character in the input string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Get the index of the character in the alphabet\n            index = alphabet.index(char)\n            \n            # Rotate the character by shifting it down by two multiplied by two places\n            new_index = (index + 2 * 2) % 26\n            \n            # Add the new encrypted character to the result\n            result += alphabet[new_index]\n        else:\n            # If the character is not a letter, add it as it is to the result\n            result += char\n    \n    # Return the final encrypted result\n    return result", "prompt_tokens": 150, "completion_tokens": 181, "duration": 3.4517323970794678}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Check if the sorted list has at least 2 elements\n    if len(sorted_lst) < 2:\n        return None\n    \n    # Return the second smallest element\n    return sorted_lst[1]", "prompt_tokens": 164, "completion_tokens": 70, "duration": 1.9339745044708252}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Split the input string into sentences based on delimiters '.', '?' or '!'\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences]\n    \n    # Initialize a counter for boredoms\n    boredom_count = 0\n    \n    # Iterate through each sentence and check if it starts with 'I'\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            boredom_count += 1\n    \n    return boredom_count", "prompt_tokens": 147, "completion_tokens": 102, "duration": 2.1015353202819824}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(num, int) for num in [x, y, z]):\n        # Check if one of the numbers is equal to the sum of the other two\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 175, "completion_tokens": 85, "duration": 2.106515884399414}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    # Define a variable to store the encoded message\n    encoded_message = \"\"\n    \n    # Loop through each character in the message\n    for char in message:\n        # If character is a letter\n        if char.isalpha():\n            # Swap the case of the letter\n            swapped_char = char.swapcase()\n            \n            # If the swapped character is a vowel\n            if swapped_char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                # Find the new character 2 places ahead in the alphabet\n                new_char = chr((ord(swapped_char) - ord('A') + 2) % 26 + ord('A'))\n                encoded_message += new_char\n            else:\n                encoded_message += swapped_char\n        else:\n            encoded_message += char\n    \n    return encoded_message", "prompt_tokens": 149, "completion_tokens": 178, "duration": 3.341891288757324}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum_of_digits(max_prime)", "prompt_tokens": 326, "completion_tokens": 125, "duration": 2.589040994644165}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    \n    keys = list(dictionary.keys())\n    lower = all(key.islower() for key in keys)\n    upper = all(key.isupper() for key in keys)\n    \n    return lower or upper", "prompt_tokens": 209, "completion_tokens": 54, "duration": 1.766599178314209}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 185, "completion_tokens": 87, "duration": 2.1351571083068848}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a: int, b: int) -> int:\n    # Get the unit digit of number a\n    a_unit = abs(a) % 10\n    # Get the unit digit of number b\n    b_unit = abs(b) % 10\n    # Calculate the product of the unit digits\n    product = a_unit * b_unit\n    return product", "prompt_tokens": 138, "completion_tokens": 82, "duration": 2.1285061836242676}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s: str) -> int:\n    # Initialize a counter to keep track of the number of uppercase vowels\n    count = 0\n    \n    # Define a set of uppercase vowels\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    # Iterate over the even indices of the string\n    for i in range(0, len(s), 2):\n        # Check if the character at the even index is an uppercase vowel\n        if s[i] in vowels:\n            count += 1\n    \n    return count", "prompt_tokens": 112, "completion_tokens": 121, "duration": 5.157235860824585}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    # Convert the string value to float\n    value = float(value)\n    \n    # Check if the value is closer to the lower integer\n    if value - int(value) < 0.5:\n        return int(value)\n    # Check if the value is closer to the higher integer\n    else:\n        return int(value) + 1", "prompt_tokens": 196, "completion_tokens": 81, "duration": 1.8540966510772705}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]  # create a list to store number of stones in each level starting with n stones\n    for i in range(1, n):  # loop through each level starting from the second level\n        if n % 2 == 0:  # if n is even, add the next even number of stones\n            stones.append(stones[-1] + 2)\n        else:  # if n is odd, add the next odd number of stones\n            stones.append(stones[-1] + 1)\n    return stones\n\n# Test the function\nprint(make_a_pile(3))", "prompt_tokens": 172, "completion_tokens": 141, "duration": 2.6588540077209473}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    # Split the input string into words using both comma and space as separators\n    words = s.replace(',', ' ').split()\n    \n    # Return the list of words\n    return words", "prompt_tokens": 156, "completion_tokens": 48, "duration": 1.5405404567718506}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    # Initialize the biggest_even variable to store the biggest even number found\n    biggest_even = -1\n    # Iterate through the range from x to y inclusive\n    for num in range(x, y+1):\n        # Check if the number is even and bigger than the current biggest_even\n        if num % 2 == 0 and num > biggest_even:\n            biggest_even = num\n    # Return the biggest_even if it's not -1, otherwise return -1\n    return biggest_even", "prompt_tokens": 134, "completion_tokens": 116, "duration": 2.7344024181365967}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n: int, m: int) -> str:\n    # Check if n is greater than m\n    if n > m:\n        return \"-1\"\n    \n    # Calculate the average of the numbers from n to m\n    avg = (n + m) / 2\n    \n    # Round the average to the nearest integer\n    avg_rounded = round(avg)\n    \n    # Convert the rounded average to binary format\n    binary_avg = bin(avg_rounded)\n    \n    return binary_avg", "prompt_tokens": 180, "completion_tokens": 104, "duration": 2.0558550357818604}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    # Filter out elements with even digits\n    filtered = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    \n    # Sort the filtered list in increasing order\n    return sorted(filtered)", "prompt_tokens": 142, "completion_tokens": 61, "duration": 1.6080858707427979}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # Filter the integers between 1 and 9 inclusive\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Replace each digit by its corresponding name\n    result = []\n    for num in reversed_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    \n    return result", "prompt_tokens": 316, "completion_tokens": 218, "duration": 3.6774778366088867}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over the range from 1 to n\n    for i in range(1, n+1):\n        # Check if i is even\n        if i % 2 == 0:\n            # Calculate the factorial of i\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Calculate the sum of numbers from 1 to i\n            total = sum(range(1, i+1))\n            result.append(total)\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 141, "duration": 2.6131575107574463}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    # Initialize counters for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through the range(1, n+1)\n    for num in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(num) == str(num)[::-1]:\n            # Increment the corresponding counter based on the parity of the palindrome\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    # Return a tuple with the counts of even and odd palindromes\n    return (even_count, odd_count)", "prompt_tokens": 251, "completion_tokens": 152, "duration": 2.8133318424224854}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    # Initialize a count variable to keep track of numbers with sum of digits > 0\n    count = 0\n    # Iterate through each number in the array\n    for num in arr:\n        # Convert the number to its absolute value and then to a string\n        num_str = str(abs(num))\n        # Calculate the sum of digits in the number by converting each digit back to integer\n        sum_of_digits = sum(int(digit) for digit in num_str)\n        # If the sum of digits is greater than 0, increment the count\n        if sum_of_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 164, "completion_tokens": 143, "duration": 2.7348742485046387}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    # Check if the array is empty\n    if not arr:\n        return True\n\n    # Find the index of the smallest element in the array\n    min_index = arr.index(min(arr))\n\n    # Check if the array is already sorted in non-decreasing order\n    for i in range(len(arr)):\n        if arr[i] != arr[(i + min_index) % len(arr)]:\n            return False\n\n    return True", "prompt_tokens": 339, "completion_tokens": 99, "duration": 1.927351474761963}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Calculate the number of odd elements in lst1\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Check if the number of odd elements in lst1 is less than or equal to the length of lst2\n    if odd_count <= len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 237, "completion_tokens": 92, "duration": 3.8799891471862793}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    # Create a dictionary to store the count of each letter\n    count_dict = {}\n    \n    # Split the input string by space to get individual letters\n    letters = test.split()\n    \n    # Iterate over each letter in the list\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count by 1\n        if letter in count_dict:\n            count_dict[letter] += 1\n        # If the letter is not in the dictionary, add it with count 1\n        else:\n            count_dict[letter] = 1\n    \n    # Find the maximum count value\n    max_count = max(count_dict.values())\n    \n    # Filter the dictionary to keep only the letters with maximum count\n    result = {key: value for key, value in count_dict.items() if value == max_count}\n    \n    return result", "prompt_tokens": 191, "completion_tokens": 188, "duration": 3.1563684940338135}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    # Remove characters from s that are in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result string is palindrome\n    is_palindrome = result == result[::-1]\n    \n    return result, is_palindrome", "prompt_tokens": 202, "completion_tokens": 77, "duration": 1.9673264026641846}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    # Create an empty list to store the results\n    result = []\n    \n    # Iterate over each string in the input list\n    for string in lst:\n        # Count the number of odd digits in the current string\n        odd_count = sum(1 for digit in string if int(digit) % 2 != 0)\n        \n        # Format the output string and append it to the result list\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {string} of the {odd_count}nput.\")\n    \n    return result", "prompt_tokens": 213, "completion_tokens": 132, "duration": 2.391193389892578}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    # Initialize variables to store current sum and minimum sum\n    current_sum = 0\n    min_sum = float('inf')\n    \n    # Iterate through the array\n    for num in nums:\n        # Update current sum\n        current_sum = min(num, current_sum + num)\n        \n        # Update minimum sum\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum", "prompt_tokens": 128, "completion_tokens": 94, "duration": 2.5430686473846436}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    # Initialize total count of operations\n    total_operations = 0\n    \n    # Iterate over each well in the grid\n    for row in grid:\n        # Calculate total water in the well\n        well_water = sum(row)\n        \n        # Calculate number of operations needed to empty the well\n        operations_needed = math.ceil(well_water / capacity)\n        \n        # Update total count of operations\n        total_operations += operations_needed\n    \n    return total_operations", "prompt_tokens": 363, "completion_tokens": 108, "duration": 2.127398729324341}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 210, "completion_tokens": 28, "duration": 1.3439898490905762}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s: str, n: int) -> List[str]:\n    # Create a list to store words with n consonants\n    result = []\n    \n    # If the string is empty, return an empty list\n    if not s:\n        return result\n    \n    # Define a function to count consonants in a word\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for letter in word if letter.lower() in consonants)\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Iterate through each word in the list of words\n    for word in words:\n        # If the word has n consonants, add it to the result list\n        if count_consonants(word) == n:\n            result.append(word)\n    \n    return result", "prompt_tokens": 221, "completion_tokens": 185, "duration": 3.0155832767486572}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):  # Start from the second last character and iterate towards the second character\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 189, "completion_tokens": 113, "duration": 2.424586772918701}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    # Count the number of open and close parentheses in the first string\n    open_count_1 = lst[0].count('(')\n    close_count_1 = lst[0].count(')')\n    \n    # Count the number of open and close parentheses in the second string\n    open_count_2 = lst[1].count('(')\n    close_count_2 = lst[1].count(')')\n    \n    # Check if the total number of open and close parentheses are equal\n    if open_count_1 + open_count_2 == close_count_1 + close_count_2:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 208, "completion_tokens": 145, "duration": 2.93324613571167}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Return the first k elements\n    return arr[:k]", "prompt_tokens": 257, "completion_tokens": 40, "duration": 3.6089518070220947}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    # Initialize a variable sum_odd_even to keep track of the sum of odd elements in even positions\n    sum_odd_even = 0\n    # Iterate over the list using enumerate to get both the index and value of each element\n    for index, value in enumerate(lst):\n        # Check if the index is even and the value is odd\n        if index % 2 == 0 and value % 2 != 0:\n            # Add the value to sum_odd_even\n            sum_odd_even += value\n    # Return the sum_odd_even\n    return sum_odd_even", "prompt_tokens": 137, "completion_tokens": 128, "duration": 2.634145498275757}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    # Filter the first k elements with at most two digits\n    filtered_arr = [num for num in arr[:k] if 10 <= num <= 99]\n    \n    # Return the sum of filtered elements\n    return sum(filtered_arr)", "prompt_tokens": 168, "completion_tokens": 62, "duration": 3.92755389213562}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    # Initialize an empty list to store odd numbers in collatz sequence\n    odds = []\n    \n    # Loop until n reaches 1\n    while n != 1:\n        # If n is odd, add it to the odds list\n        if n % 2 == 1:\n            odds.append(n)\n        \n        # Calculate the next term in collatz sequence\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    \n    # Add 1 to the odds list as 1 is not included in the loop\n    odds.append(1)\n    \n    # Return the sorted list of odd numbers in collatz sequence\n    return sorted(odds)", "prompt_tokens": 271, "completion_tokens": 166, "duration": 2.8984947204589844}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Split the date string into day, month, and year\n    day, month, year = map(int, date.split('-'))\n\n    # Check if the month is within the valid range (1 to 12)\n    if month < 1 or month > 12:\n        return False\n\n    # Check the maximum number of days based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_days = 31\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:\n        # February\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            max_days = 29\n        else:\n            max_days = 28\n\n    # Check if the day is within the valid range\n    if day < 1 or day > max_days:\n        return False\n\n    return True", "prompt_tokens": 303, "completion_tokens": 222, "duration": 4.673273086547852}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    # check if there are whitespaces in the text\n    if ' ' in txt:\n        return txt.split()\n    # check if there are commas in the text\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # count the number of lowercase letters with odd order in the alphabet\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 180, "completion_tokens": 98, "duration": 2.284860372543335}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    # Check if the list is equal to a sorted version of the list with duplicates removed\n    return lst == sorted(set(lst))", "prompt_tokens": 289, "completion_tokens": 36, "duration": 1.3241407871246338}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    # Find the maximum of the starting points\n    start = max(interval1[0], interval2[0])\n    \n    # Find the minimum of the ending points\n    end = min(interval1[1], interval2[1])\n    \n    # If the starting point is greater than the ending point, they don't intersect\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length is a prime number\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 294, "completion_tokens": 162, "duration": 3.1018128395080566}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    # Return None for empty arr\n    if not arr:\n        return None\n    \n    # Initialize variables to store product of signs and sum of magnitudes\n    product_signs = 1\n    sum_magnitudes = 0\n    \n    # Loop through the array to calculate product of signs and sum of magnitudes\n    for num in arr:\n        if num > 0:\n            product_signs *= 1\n            sum_magnitudes += abs(num)\n        elif num < 0:\n            product_signs *= -1\n            sum_magnitudes += abs(num)\n        else:\n            product_signs *= 0\n    \n    # Return the result of sum of magnitudes multiplied by product of signs\n    return product_signs * sum_magnitudes", "prompt_tokens": 162, "completion_tokens": 168, "duration": 4.918817758560181}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    # Flatten the grid into a list\n    flattened_grid = [cell for row in grid for cell in row]\n    \n    # Find the smallest value in the grid\n    start_value = min(flattened_grid)\n    \n    # Initialize the path with the starting value\n    path = [start_value]\n    \n    # While the length of the path is less than k\n    while len(path) < k:\n        # Find the current cell in the grid\n        current_cell = (path[-1] - 1) % len(flattened_grid)\n        \n        # Find the neighboring cells of the current cell\n        neighbors = []\n        if current_cell % len(grid[0]) != 0:\n            neighbors.append(current_cell - 1)\n        if current_cell % len(grid[0]) != len(grid[0]) - 1:\n            neighbors.append(current_cell + 1)\n        if current_cell >= len(grid[0]):\n            neighbors.append(current_cell - len(grid[0]))\n        if current_cell < len(flattened_grid) - len(grid[0]):\n            neighbors.append(current_cell + len(grid[0]))\n        \n        # Choose the neighbor with the smallest value\n        next_cell = min(neighbors, key=lambda x: flattened_grid[x])\n        \n        # Add the value of the next cell to the path\n        path.append(flattened_grid[next_cell])\n    \n    return path", "prompt_tokens": 436, "completion_tokens": 299, "duration": 5.0431671142578125}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # Initialize the list to store the Tribonacci sequence numbers\n    tribonacci_sequence = []\n    \n    # Handle the base cases\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    \n    # Initialize the first three numbers of the Tribonacci sequence\n    a, b, c = 0, 0, 3\n    \n    # Append the first number to the sequence\n    tribonacci_sequence.append(c)\n    \n    # Calculate the rest of the sequence\n    for i in range(1, n):\n        if i % 2 == 0:\n            # Calculate the Tribonacci number for even index\n            num = 1 + i // 2\n        else:\n            # Calculate the Tribonacci number for odd index\n            num = a + b + c\n        \n        # Update the values of a, b, and c for the next iteration\n        a, b, c = b, c, num\n        \n        # Append the calculated Tribonacci number to the sequence\n        tribonacci_sequence.append(num)\n    \n    return tribonacci_sequence", "prompt_tokens": 275, "completion_tokens": 237, "duration": 5.3252270221710205}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1  # Initialize product as 1\n    while n > 0:  # Repeat until n is greater than 0\n        digit = n % 10  # Get the last digit of n\n        if digit % 2 != 0:  # Check if the digit is odd\n            product *= digit  # Multiply the product by the odd digit\n        n //= 10  # Remove the last digit from n\n    return product  # Return the product of odd digits", "prompt_tokens": 111, "completion_tokens": 114, "duration": 4.86922550201416}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    # Initialize a variable to keep track of the depth of nesting\n    depth = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        # If the character is '[', increment the depth\n        if char == '[':\n            depth += 1\n        # If the character is ']', decrement the depth\n        elif char == ']':\n            depth -= 1\n        # If the depth becomes negative, return True\n        if depth < 0:\n            return True\n    \n    # If the depth is still positive at the end, return False\n    return False", "prompt_tokens": 173, "completion_tokens": 134, "duration": 2.5946741104125977}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    # Round each element in the list to the upper int (Ceiling)\n    lst = [int(x) if x == int(x) else int(x) + 1 for x in lst]\n    \n    # Calculate the sum of squared numbers\n    return sum(x**2 for x in lst)", "prompt_tokens": 197, "completion_tokens": 72, "duration": 4.053974151611328}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    # Return False if the input string is empty\n    if len(txt) == 0:\n        return False\n    \n    # Split the string by spaces to get the words\n    words = txt.split()\n    \n    # Get the last word\n    last_word = words[-1]\n    \n    # Check if the last character of the last word is an alphabetical character\n    return last_word[-1].isalpha() and last_word[-1] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'", "prompt_tokens": 177, "completion_tokens": 111, "duration": 4.805182933807373}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the element is not greater than or equal to the element before it\n        if arr[i] < arr[i - 1]:\n            return i - 1\n    # If no such element is found, return -1\n    return -1", "prompt_tokens": 143, "completion_tokens": 88, "duration": 3.987581968307495}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]  # Filter negative integers\n    pos_integers = [num for num in lst if num > 0]  # Filter positive integers\n\n    largest_neg = max(neg_integers) if neg_integers else None  # Find largest negative integer or set to None\n    smallest_pos = min(pos_integers) if pos_integers else None  # Find smallest positive integer or set to None\n\n    return (largest_neg, smallest_pos)", "prompt_tokens": 178, "completion_tokens": 121, "duration": 4.221070289611816}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    # Convert a and b to floats if they are strings with commas\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n\n    # Compare a and b and return the larger value\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "prompt_tokens": 181, "completion_tokens": 97, "duration": 3.91693377494812}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    # Check if n is less than 8 or n is odd\n    if n < 8 or n % 2 != 0:\n        return False\n    \n    # Check if n - 8 is divisible by 4\n    if (n - 8) % 4 == 0:\n        return True\n    \n    return False", "prompt_tokens": 117, "completion_tokens": 83, "duration": 3.5327467918395996}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    # Initialize result to 1\n    result = 1\n    # Loop from n down to 1\n    for i in range(n, 0, -1):\n        # Calculate factorial of i and multiply with result\n        result *= factorial(i)\n    return result\n\ndef factorial(n):\n    # Base case for factorial function\n    if n == 0:\n        return 1\n    # Recursive call to calculate factorial\n    return n * factorial(n-1)", "prompt_tokens": 135, "completion_tokens": 109, "duration": 4.881227731704712}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace more than 2 consecutive underscores with a single underscore\n    text = text.replace(\"__\", \"-\")\n    \n    return text", "prompt_tokens": 146, "completion_tokens": 55, "duration": 3.1729049682617188}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if there are not more than three digits in the file's name\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    \n    # Check if there is exactly one dot in the file's name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file's name at the dot to separate the parts\n    name_parts = file_name.split('.')\n    \n    # Check if the part before the dot is not empty and starts with a letter\n    if not name_parts[0] or not name_parts[0][0].isalpha():\n        return 'No'\n    \n    # Check if the part after the dot is one of the allowed extensions\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 254, "completion_tokens": 196, "duration": 5.2647013664245605}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            if i % 3 != 0:\n                sum += lst[i] ** 3\n    return sum", "prompt_tokens": 209, "completion_tokens": 78, "duration": 4.226301670074463}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    # Step 1: Split the sentence into words\n    words = sentence.split()\n    \n    # Step 2: Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Step 3: Filter the words based on their lengths being prime numbers\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    # Step 4: Join the filtered words into a new sentence\n    result = ' '.join(prime_words)\n    \n    return result", "prompt_tokens": 187, "completion_tokens": 161, "duration": 5.086116790771484}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    # Convert fractions to integers\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    # Calculate the product of the fractions\n    result = x_num * n_num / (x_denom * n_denom)\n    \n    # Check if the result is a whole number\n    return result.is_integer()", "prompt_tokens": 195, "completion_tokens": 93, "duration": 3.724191904067993}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    # Sort the list based on the sum of digits of each number\n    nums.sort(key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n    \n    return nums", "prompt_tokens": 155, "completion_tokens": 50, "duration": 4.297268390655518}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    # Initialize a counter to keep track of the number of elements meeting the criteria\n    count = 0\n    # Loop through each number in the input array\n    for num in nums:\n        # Check if the number is greater than 10 and its first and last digits are odd\n        if num > 10 and int(str(abs(num))[0]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0:\n            # Increment the counter if the condition is met\n            count += 1\n    # Return the final count\n    return count", "prompt_tokens": 159, "completion_tokens": 133, "duration": 2.295875310897827}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    # Create an array a of length n\n    a = [i*i - i + 1 for i in range(1, n+1)]\n\n    # Initialize count to 0\n    count = 0\n    \n    # Loop through all possible triples and check if their sum is a multiple of 3\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count", "prompt_tokens": 205, "completion_tokens": 136, "duration": 4.0645432472229}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    # Define the list of planets in order from the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indexes of planet1 and planet2 in the planets list\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Determine the range of indexes between planet1 and planet2\n    start_index = min(index1, index2) + 1\n    end_index = max(index1, index2)\n    \n    # Extract the planets between planet1 and planet2 and sort them by proximity to the Sun\n    result = tuple(sorted(planets[start_index:end_index], key=lambda x: planets.index(x)))\n    \n    return result", "prompt_tokens": 251, "completion_tokens": 217, "duration": 5.553360462188721}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length first, then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst", "prompt_tokens": 227, "completion_tokens": 70, "duration": 3.485084295272827}
{"task_id": "HumanEval/150", "generated_code": "import sympy  # Import sympy library for prime number check\n\ndef x_or_y(n, x, y):\n    # Check if n is a prime number\n    if sympy.isprime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 126, "completion_tokens": 57, "duration": 3.2641122341156006}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    # Initialize a variable to store the sum of squares of odd numbers\n    result = 0\n    \n    # Loop through each number in the list\n    for num in lst:\n        # Check if the number is positive, odd, and an integer\n        if num > 0 and num % 2 != 0 and isinstance(num, int):\n            # Add the square of the number to the result\n            result += num ** 2\n    \n    # Return the result multiplied by 2\n    return result * 2", "prompt_tokens": 177, "completion_tokens": 119, "duration": 3.82778263092041}
{"task_id": "HumanEval/152", "generated_code": "def compare(game,guess):\n    # Initialize an empty list to store the differences\n    result = []\n    \n    # Loop through each match in the game and guess arrays\n    for i in range(len(game)):\n        # Calculate the absolute difference between the guess and the score\n        diff = abs(game[i] - guess[i])\n        \n        # Append the difference to the result list\n        result.append(diff)\n    \n    # Return the final list of differences\n    return result", "prompt_tokens": 270, "completion_tokens": 101, "duration": 3.8678407669067383}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    # Create a dictionary to store the strengths of each extension\n    strengths = {}\n\n    # Iterate through the list of extensions\n    for extension in extensions:\n        # Calculate the strength of the extension\n        CAP = sum(1 for letter in extension if letter.isupper())\n        SM = sum(1 for letter in extension if letter.islower())\n        strength = CAP - SM\n        # Store the strength in the dictionary with the extension as key\n        strengths[extension] = strength\n\n    # Find the extension with the maximum strength\n    max_extension = max(strengths, key=strengths.get)\n\n    # Return the formatted result\n    return f\"{class_name}.{max_extension}\"", "prompt_tokens": 317, "completion_tokens": 156, "duration": 4.503539085388184}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    # Rotate the second word and check if it is a substring of the first word\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 169, "completion_tokens": 64, "duration": 4.393186092376709}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n\n    # iterate through each digit in the number\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 105, "completion_tokens": 81, "duration": 4.1152260303497314}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number: int) -> str:\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    result = ''\n    \n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result", "prompt_tokens": 141, "completion_tokens": 144, "duration": 4.349165439605713}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check if the sides form a right-angled triangle using Pythagorean theorem\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False", "prompt_tokens": 148, "completion_tokens": 84, "duration": 3.6206672191619873}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # Create a list to store the number of unique characters in each word\n    num_unique_chars = [len(set(word)) for word in words]\n    \n    # Find the maximum number of unique characters\n    max_unique_chars = max(num_unique_chars)\n    \n    # Find the index of the word with maximum unique characters and minimum index in case of ties\n    max_index = num_unique_chars.index(max_unique_chars)\n    \n    # Return the word with maximum unique characters\n    return words[max_index]", "prompt_tokens": 160, "completion_tokens": 111, "duration": 3.911940574645996}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    # Calculate the total number of eaten carrots after the meals\n    total_eaten = number + min(need, remaining)\n    \n    # Calculate the number of carrots left after the meals\n    left = max(0, remaining - need)\n    \n    return [total_eaten, left]", "prompt_tokens": 317, "completion_tokens": 72, "duration": 4.429711580276489}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    # Initialize the result with the first operand\n    result = operand[0]\n    \n    # Loop through the operators and operands\n    for i in range(len(operator)):\n        # Check the operator and perform the corresponding operation with the next operand\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    \n    return result", "prompt_tokens": 247, "completion_tokens": 153, "duration": 5.708876848220825}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    # Step 1: Initialize an empty list to store the modified characters\n    result = []\n    \n    # Step 2: Iterate through each character in the string\n    for char in s:\n        # Step 3: Check if the character is a letter\n        if char.isalpha():\n            # Step 4: Reverse the case of the letter and append to result list\n            result.append(char.swapcase())\n        else:\n            # Step 5: If the character is not a letter, keep it as it is\n            result.append(char)\n    \n    # Step 6: Check if there are no letters in the original string\n    if all(not char.isalpha() for char in s):\n        # Step 7: If no letters, reverse the string\n        return ''.join(result)[::-1]\n    else:\n        # Step 8: Otherwise, return the modified string\n        return ''.join(result)", "prompt_tokens": 147, "completion_tokens": 198, "duration": 5.755138874053955}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    if not text:\n        return None\n    \n    # Step 1: Create an instance of the MD5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Step 2: Update the hash object with the input text\n    md5_hash.update(text.encode())\n    \n    # Step 3: Obtain the hexadecimal representation of the hash and return it as a string\n    return md5_hash.hexdigest()", "prompt_tokens": 116, "completion_tokens": 102, "duration": 3.9600601196289062}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a: int, b: int) -> list:\n    # Create a list to store the even digits\n    even_digits = []\n    \n    # Iterate through the range from a to b\n    for num in range(a, b+1):\n        # Check if the digit is even\n        if num % 2 == 0:\n            even_digits.append(num)\n    \n    return even_digits", "prompt_tokens": 144, "completion_tokens": 89, "duration": 3.570319414138794}
