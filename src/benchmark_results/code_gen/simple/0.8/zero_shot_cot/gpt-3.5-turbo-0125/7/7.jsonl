{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list of numbers\n    numbers.sort()\n    # Iterate over the list of numbers\n    for i in range(len(numbers)-1):\n        # Check if the absolute difference between consecutive elements is less than the threshold\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 163, "completion_tokens": 90, "duration": 2.606621265411377}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove any spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store separated groups\n    separated_groups = []\n    \n    # Initialize a variable to keep track of the current group\n    current_group = \"\"\n    \n    # Iterate through each character in the input string\n    for char in paren_string:\n        # Add the character to the current group\n        current_group += char\n        \n        # Check if the current group is balanced\n        if current_group.count(\"(\") == current_group.count(\")\"):\n            # Add the current group to the list of separated groups\n            separated_groups.append(current_group)\n            # Reset the current group\n            current_group = \"\"\n    \n    return separated_groups", "prompt_tokens": 154, "completion_tokens": 171, "duration": 3.943331480026245}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    # Find the integer part of the number\n    integer_part = int(number)\n\n    # Calculate the decimal part of the number\n    decimal_part = number - integer_part\n\n    return decimal_part", "prompt_tokens": 125, "completion_tokens": 55, "duration": 1.7710881233215332}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    # Initialize balance variable to keep track of the account balance\n    balance = 0\n    \n    # Iterate over each operation\n    for operation in operations:\n        # Update the balance by the amount of the operation\n        balance += operation\n        # If balance falls below zero, return True\n        if balance < 0:\n            return True\n    \n    # If balance never falls below zero, return False\n    return False", "prompt_tokens": 158, "completion_tokens": 103, "duration": 4.621840476989746}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences between each number and the mean\n    abs_diff = [abs(x - mean) for x in numbers]\n    \n    # Calculate the mean absolute deviation\n    mad = sum(abs_diff) / len(abs_diff)\n    \n    return mad", "prompt_tokens": 156, "completion_tokens": 92, "duration": 2.546293258666992}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate through the input list `numbers`\n    for num in numbers:\n        # Append the current number and the delimeter to the result list\n        result.append(num)\n        result.append(delimeter)\n    \n    # Remove the last delimeter from the result list if the input list is not empty\n    if result:\n        result.pop()\n    \n    return result", "prompt_tokens": 131, "completion_tokens": 112, "duration": 2.6343555450439453}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string by space to get individual groups\n    groups = paren_string.split()\n    \n    # Initialize a list to store the deepest level of nesting for each group\n    result = []\n    \n    # Iterate through each group\n    for group in groups:\n        # Initialize variables to keep track of current nesting level and maximum nesting level\n        current_level = 0\n        max_level = 0\n        \n        # Iterate through each character in the group\n        for char in group:\n            if char == '(':\n                # Increment the current nesting level when encountering an opening parenthesis\n                current_level += 1\n            elif char == ')':\n                # Update the maximum nesting level and reset current nesting level when encountering a closing parenthesis\n                max_level = max(max_level, current_level)\n                current_level = 0\n        \n        # Append the maximum nesting level of the group to the result list\n        result.append(max_level)\n    \n    return result", "prompt_tokens": 151, "completion_tokens": 214, "duration": 3.80771541595459}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Initialize an empty list to store the filtered strings\n    filtered_strings = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the substring is present in the current string\n        if substring in string:\n            # If the substring is present, add the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the filtered list of strings\n    return filtered_strings", "prompt_tokens": 132, "completion_tokens": 113, "duration": 4.161751747131348}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Calculate the sum of the list\n    sum_result = sum(numbers)\n    \n    # Check if the list is empty, set the product to 1 if it is, otherwise calculate the product\n    product_result = 1 if not numbers else 1\n    for num in numbers:\n        product_result *= num\n    \n    # Return the tuple of sum and product\n    return sum_result, product_result", "prompt_tokens": 149, "completion_tokens": 97, "duration": 2.6255290508270264}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    # Create an empty list to store the rolling maximums\n    result = []\n    # Create a deque to store the indices of elements in the list\n    queue = deque()\n    \n    # Iterate through the list of numbers\n    for i, num in enumerate(numbers):\n        # Remove indices of elements that are no longer in the window\n        while queue and queue[0] < i - 2:\n            queue.popleft()\n        \n        # Remove elements that are smaller than the current element\n        while queue and numbers[queue[-1]] < num:\n            queue.pop()\n        \n        # Append the current element index to the deque\n        queue.append(i)\n        \n        # Append the maximum element from the window to the result list\n        result.append(numbers[queue[0]])\n    \n    return result", "prompt_tokens": 139, "completion_tokens": 181, "duration": 3.106132745742798}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    \n    # Helper function to check if a string is a palindrome\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    \n    # Iterate through the string to find the longest palindromic suffix\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i-1:]):\n            break\n    \n    # Return the palindrome by appending reverse of the prefix before the palindromic suffix\n    return string + string[:i-1][::-1]", "prompt_tokens": 182, "completion_tokens": 139, "duration": 2.7564871311187744}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    # Convert strings to integers after converting from binary to decimal\n    int_a = int(a, 2)\n    int_b = int(b, 2)\n    \n    # Perform XOR operation on the integers\n    result = int_a ^ int_b\n    \n    # Convert the result back to binary string format\n    result_str = bin(result)[2:]\n    \n    return result_str", "prompt_tokens": 115, "completion_tokens": 96, "duration": 2.157083511352539}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    max_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == max_length]\n    \n    return longest_strings[0]", "prompt_tokens": 141, "completion_tokens": 63, "duration": 1.6675612926483154}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Keep calculating the remainder until b becomes 0\n    while b != 0:\n        a, b = b, a % b\n    return a", "prompt_tokens": 110, "completion_tokens": 54, "duration": 1.7082138061523438}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    # Initialize an empty list to store prefixes\n    prefixes = []\n    \n    # Iterate over the string and add each prefix to the list\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    \n    return prefixes", "prompt_tokens": 98, "completion_tokens": 72, "duration": 1.6770415306091309}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    # Create a list of numbers from 0 to n\n    numbers = list(range(n+1))\n    \n    # Convert the list of numbers to a list of strings\n    numbers_str = [str(num) for num in numbers]\n    \n    # Join the list of strings with spaces\n    result = ' '.join(numbers_str)\n    \n    return result", "prompt_tokens": 108, "completion_tokens": 88, "duration": 2.061647653579712}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to treat cases as same characters\n    string = string.lower()\n    \n    # Use set() to get unique characters in the string\n    distinct_characters = set(string)\n    \n    # Return the number of distinct characters\n    return len(distinct_characters)", "prompt_tokens": 110, "completion_tokens": 74, "duration": 1.8671834468841553}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    # Create a dictionary to map musical notes to their corresponding beat duration\n    notes_duration = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # Split the input music string by spaces to get individual notes\n    notes = music_string.split()\n    \n    # Initialize an empty list to store beat durations\n    beat_durations = []\n    \n    # Iterate through each note in the notes list\n    for note in notes:\n        # Append the beat duration of the note to the beat_durations list using the notes_duration dictionary\n        beat_durations.append(notes_duration[note])\n    \n    return beat_durations", "prompt_tokens": 211, "completion_tokens": 158, "duration": 2.8283040523529053}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0  # Initialize a counter variable to keep track of the number of occurrences\n    for i in range(len(string) - len(substring) + 1):  # Iterate over the string with a window size of the substring\n        if string[i:i + len(substring)] == substring:  # Check if the window matches the substring\n            count += 1  # Increment the counter if a match is found\n    return count  # Return the final count", "prompt_tokens": 128, "completion_tokens": 119, "duration": 2.7132484912872314}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    # Create a dictionary to map numberals to their corresponding integers\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of numberals\n    num_list = numbers.split()\n    \n    # Sort the list of numberals based on their corresponding integers\n    sorted_num_list = sorted(num_list, key=lambda x: number_map[x])\n    \n    # Join the sorted list of numberals into a string\n    sorted_numbers_str = ' '.join(sorted_num_list)\n    \n    return sorted_numbers_str", "prompt_tokens": 144, "completion_tokens": 191, "duration": 3.9861698150634766}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the list of numbers in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize variables to store the closest numbers and their difference\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    min_diff = sorted_numbers[1] - sorted_numbers[0]\n    \n    # Iterate through the sorted list to find the closest pair of numbers\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i+1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])\n    \n    return closest_pair", "prompt_tokens": 205, "completion_tokens": 159, "duration": 2.8567862510681152}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Calculate the range of values\n    range_val = max_val - min_val\n    \n    # Apply linear transformation to each number in the list\n    rescaled = [(num - min_val) / range_val for num in numbers]\n    \n    return rescaled", "prompt_tokens": 162, "completion_tokens": 99, "duration": 2.061234951019287}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Initialize an empty list to store integers\n    integers = []\n    \n    # Iterate through the given list\n    for value in values:\n        # Check if the value is an integer\n        if isinstance(value, int):\n            # Add the integer to the list\n            integers.append(value)\n    \n    # Return the list of integers\n    return integers", "prompt_tokens": 130, "completion_tokens": 92, "duration": 2.154813289642334}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    # Return the length of the given string\n    return len(string)", "prompt_tokens": 83, "completion_tokens": 28, "duration": 1.546844244003296}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    # Start checking from n-1 down to 1\n    for i in range(n-1, 0, -1):\n        # If i divides n evenly, return i\n        if n % i == 0:\n            return i", "prompt_tokens": 92, "completion_tokens": 67, "duration": 1.956312894821167}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    # Initialize an empty list to store prime factors\n    factors = []\n    \n    # Start with 2 as the smallest prime factor\n    i = 2\n    \n    # Continue dividing the number by i until it is greater than 1\n    while n > 1:\n        # If i is a factor of n, add it to the list of factors\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            # Move to the next number to check if it is a factor\n            i += 1\n    \n    return factors", "prompt_tokens": 165, "completion_tokens": 142, "duration": 2.902278184890747}
{"task_id": "HumanEval/26", "generated_code": "from collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Create a Counter object to count occurrences of each element\n    counts = Counter(numbers)\n    \n    # Create a new list to store elements that occur only once\n    result = [num for num in numbers if counts[num] == 1]\n    \n    return result", "prompt_tokens": 123, "completion_tokens": 72, "duration": 1.9136264324188232}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for char in string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Convert uppercase to lowercase and add to the result\n            result += char.lower()\n        # Check if the character is lowercase\n        elif char.islower():\n            # Convert lowercase to uppercase and add to the result\n            result += char.upper()\n        else:\n            # Add non-alphabetic characters directly to the result\n            result += char\n    \n    return result", "prompt_tokens": 88, "completion_tokens": 138, "duration": 3.3963282108306885}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    # Join all strings in the list using empty string as separator\n    return ''.join(strings)", "prompt_tokens": 96, "completion_tokens": 35, "duration": 3.452512741088867}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Create an empty list to store strings that start with the given prefix\n    result = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, add the string to the result list\n            result.append(string)\n    \n    # Return the final list of strings that start with the given prefix\n    return result", "prompt_tokens": 126, "completion_tokens": 116, "duration": 2.871495008468628}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    # Create an empty list to store positive numbers\n    positive_nums = []\n    \n    # Loop through each number in the list\n    for num in l:\n        # Check if the number is positive\n        if num > 0:\n            # If positive, add it to the list of positive numbers\n            positive_nums.append(num)\n    \n    # Return the list of positive numbers\n    return positive_nums", "prompt_tokens": 153, "completion_tokens": 95, "duration": 5.626664876937866}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n: int) -> bool:\n    # check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # iterate from 2 to the square root of the number\n    for i in range(2, int(n**0.5) + 1):\n        # check if the number is divisible by any number in the range\n        if n % i == 0:\n            return False\n    \n    return True", "prompt_tokens": 139, "completion_tokens": 102, "duration": 2.712641477584839}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    n = len(xs) - 1\n    a = xs[0]\n    b = xs[n]\n    x = -a / b\n    return x", "prompt_tokens": 298, "completion_tokens": 46, "duration": 1.4680027961730957}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Separate the list into two sublists, one for elements divisible by three and one for elements not divisible by three\n    div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    not_div_by_three = [l[i] for i in range(len(l)) if i % 3 != 0]\n    \n    # Sort the sublist of elements divisible by three\n    div_by_three.sort()\n    \n    # Merge the two sublists back into a single list while keeping the original order for elements not divisible by three\n    result = [div_by_three.pop(0) if i % 3 == 0 else not_div_by_three.pop(0) for i in range(len(l))]\n    \n    return result", "prompt_tokens": 190, "completion_tokens": 170, "duration": 3.430004358291626}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    # Convert list to set to remove duplicates\n    unique_set = set(l)\n    \n    # Sort the unique elements\n    sorted_unique_list = sorted(unique_set)\n    \n    return sorted_unique_list", "prompt_tokens": 113, "completion_tokens": 51, "duration": 1.7325079441070557}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    # Sort the list in ascending order\n    l.sort()\n    # Return the last element which will be the maximum\n    return l[-1]", "prompt_tokens": 122, "completion_tokens": 38, "duration": 1.3689241409301758}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    # Initialize a counter variable to count the number of times digit 7 appears\n    count = 0\n    \n    # Iterate through integers less than n\n    for i in range(n):\n        # Check if the integer is divisible by 11 or 13\n        if i % 11 == 0 or i % 13 == 0:\n            # Check each digit of the integer\n            while i != 0:\n                # If the digit is 7, increment the counter\n                if i % 10 == 7:\n                    count += 1\n                # Remove the last digit from the integer\n                i = i // 10\n    \n    return count", "prompt_tokens": 119, "completion_tokens": 151, "duration": 4.731507778167725}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Create a new list to store the sorted even indices elements\n    sorted_even = sorted([x for x in l[::2]])\n    \n    # Iterate over the original list and replace even indices elements with the sorted values\n    for i in range(0, len(l), 2):\n        l[i] = sorted_even.pop(0)\n    \n    return l", "prompt_tokens": 163, "completion_tokens": 88, "duration": 2.0399110317230225}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group in reverse. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 198, "completion_tokens": 115, "duration": 2.701206922531128}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Function to generate Fibonacci sequence up to n-th term\n    def generate_fibonacci_sequence(n):\n        fib_sequence = [0, 1]\n        for i in range(2, n):\n            fib_sequence.append(fib_sequence[i - 1] + fib_sequence[i - 2])\n        return fib_sequence\n\n    # Find the n-th prime Fibonacci number\n    fib_sequence = generate_fibonacci_sequence(n)\n    prime_fib_nums = [num for num in fib_sequence if is_prime(num)]\n    return prime_fib_nums[-1]", "prompt_tokens": 137, "completion_tokens": 192, "duration": 3.9869441986083984}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    # Sort the list\n    l.sort()\n    \n    # Iterate over the list\n    for i in range(len(l) - 2):\n        # Initialize left and right pointers\n        left = i + 1\n        right = len(l) - 1\n        \n        # Check for triplets summing to zero\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n                \n    return False", "prompt_tokens": 199, "completion_tokens": 143, "duration": 3.1033694744110107}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    # Calculate the number of collisions that will occur\n    return n * (n - 1) // 2", "prompt_tokens": 191, "completion_tokens": 37, "duration": 4.8887457847595215}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    # Create an empty list to store the incremented elements\n    result = []\n    \n    # Iterate through each element in the input list\n    for num in l:\n        # Increment the element by 1 and append it to the result list\n        result.append(num + 1)\n    \n    # Return the list with incremented elements\n    return result", "prompt_tokens": 148, "completion_tokens": 83, "duration": 2.0565991401672363}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    # iterate over all elements in the list\n    for i in range(len(l)):\n        # check if the negative of the current element exists in the list\n        if -l[i] in l[:i] + l[i+1:]:\n            return True\n    return False", "prompt_tokens": 197, "completion_tokens": 69, "duration": 5.341064453125}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    # define the digits for each base up to base 10\n    digits = \"0123456789\"\n    \n    # initialize an empty string to store the converted number\n    result = ''\n    \n    # continue converting until x becomes zero\n    while x > 0:\n        # get the remainder when x is divided by the base\n        remainder = x % base\n        # prepend the corresponding digit to the result string\n        result = digits[remainder] + result\n        # update x to be the result of integer division by the base\n        x = x // base\n        \n    return result", "prompt_tokens": 131, "completion_tokens": 139, "duration": 6.034891605377197}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    # Calculate the area of the triangle using the formula: area = 0.5 * base * height\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 86, "completion_tokens": 50, "duration": 1.4459576606750488}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    \n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n        \n    return d", "prompt_tokens": 211, "completion_tokens": 119, "duration": 3.9865331649780273}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    # Step 1: Sort the list in ascending order\n    l.sort()\n    \n    # Step 2: Get the length of the list\n    n = len(l)\n    \n    # Step 3: Check if the length of the list is odd or even\n    if n % 2 == 1:\n        # If odd, return the middle element\n        return l[n // 2]\n    else:\n        # If even, return the average of the two middle elements\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0", "prompt_tokens": 115, "completion_tokens": 131, "duration": 4.403795003890991}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    # Remove whitespaces and convert text to lowercase\n    text = text.replace(\" \", \"\").lower()\n    \n    # Compare the text with its reverse\n    return text == text[::-1]", "prompt_tokens": 111, "completion_tokens": 51, "duration": 4.660315990447998}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    # Calculate the result using the pow() function to avoid overflow\n    result = pow(2, n, p)\n    \n    # Return the result\n    return result", "prompt_tokens": 145, "completion_tokens": 51, "duration": 4.696582555770874}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    # Convert each character in the input string back to its original position by shifting 5 characters back\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 130, "completion_tokens": 64, "duration": 5.203510284423828}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    # Define a list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    # Use list comprehension to filter out vowels from the text\n    result = ''.join([char for char in text if char not in vowels])\n    \n    return result", "prompt_tokens": 162, "completion_tokens": 88, "duration": 5.239218711853027}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    # Iterate over each element in the list\n    for num in l:\n        # Check if the number is not below the threshold\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 119, "completion_tokens": 57, "duration": 5.1745383739471436}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    # Return the sum of x and y\n    return x + y", "prompt_tokens": 93, "completion_tokens": 30, "duration": 3.0080323219299316}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    # Sort the characters in both strings\n    sorted_s0 = sorted(s0)\n    sorted_s1 = sorted(s1)\n    \n    # Check if the sorted strings are equal\n    return sorted_s0 == sorted_s1", "prompt_tokens": 180, "completion_tokens": 65, "duration": 5.179450750350952}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    # Define the base cases for Fibonacci sequence\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Calculate Fibonacci number for n using a loop\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 92, "completion_tokens": 96, "duration": 4.00869607925415}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a stack to keep track of opening brackets\n    stack = []\n    \n    # Iterate through each bracket in the input string\n    for bracket in brackets:\n        if bracket == \"<\":\n            # If an opening bracket is encountered, push it to the stack\n            stack.append(bracket)\n        elif bracket == \">\":\n            # If a closing bracket is encountered and there is a corresponding opening bracket on the stack, pop it\n            if stack:\n                stack.pop()\n            else:\n                # If there is no opening bracket to match the closing bracket, return False\n                return False\n    \n    # If all opening brackets have corresponding closing brackets, the stack should be empty\n    return len(stack) == 0", "prompt_tokens": 132, "completion_tokens": 164, "duration": 5.306512355804443}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    # check if the list is sorted in non-decreasing order\n    if l == sorted(l):\n        return True\n    # check if the list is sorted in non-increasing order\n    elif l == sorted(l, reverse=True):\n        return True\n    else:\n        return False", "prompt_tokens": 127, "completion_tokens": 71, "duration": 3.48284649848938}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    # Find common elements between two lists\n    common_elements = list(set(l1) & set(l2))\n    \n    # Sort the common elements\n    sorted_common_elements = sorted(common_elements)\n    \n    return sorted_common_elements", "prompt_tokens": 154, "completion_tokens": 63, "duration": 3.195234775543213}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    # Find all the factors of n\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    \n    # Check if each factor is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Find the largest prime factor\n    largest_prime = 0\n    for factor in factors:\n        if is_prime(factor) and factor > largest_prime:\n            largest_prime = factor\n    \n    return largest_prime", "prompt_tokens": 103, "completion_tokens": 172, "duration": 6.59730339050293}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    # Calculate the sum of numbers from 1 to n using the formula (n * (n + 1)) / 2\n    return (n * (n + 1)) // 2", "prompt_tokens": 134, "completion_tokens": 55, "duration": 3.5118250846862793}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    # Initialize a variable to keep track of the number of opening brackets\n    count = 0\n    \n    # Iterate through each character in the input string\n    for char in brackets:\n        # If the character is an opening bracket, increment the count\n        if char == \"(\":\n            count += 1\n        # If the character is a closing bracket, decrement the count\n        elif char == \")\":\n            count -= 1\n            # If the count becomes negative, return False\n            if count < 0:\n                return False\n    \n    # If the count is zero at the end, return True\n    return count == 0", "prompt_tokens": 129, "completion_tokens": 147, "duration": 6.176254749298096}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    # Initialize an empty list to store the derivatives\n    derivatives = []\n    \n    # Iterate over the coefficients starting from the second coefficient\n    for i in range(1, len(xs)):\n        # Calculate the derivative of the current term\n        derivative = xs[i] * i\n        \n        # Append the derivative to the list\n        derivatives.append(derivative)\n    \n    return derivatives", "prompt_tokens": 148, "completion_tokens": 84, "duration": 3.8445982933044434}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 189, "completion_tokens": 72, "duration": 3.526662826538086}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n\n    # Convert the string to lowercase\n    s = s.lower()\n\n    # Count the vowels\n    for char in s:\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    \n    # Check if 'y' is at the end and increment count if it's a vowel\n    if s.endswith('y'):\n        count += 1\n\n    return count", "prompt_tokens": 166, "completion_tokens": 103, "duration": 5.712587118148804}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x: int, shift: int) -> str:\n    # Convert integer x to string\n    x_str = str(x)\n    \n    # Get the length of the string\n    length = len(x_str)\n    \n    # Calculate the effective shift by taking the modulo of shift and length\n    effective_shift = shift % length\n    \n    # If the effective shift is 0, return the original string\n    if effective_shift == 0:\n        return x_str\n    \n    # Perform circular shift by slicing the string and joining it in reverse order\n    result = x_str[length - effective_shift:] + x_str[:length - effective_shift]\n    \n    return result", "prompt_tokens": 122, "completion_tokens": 142, "duration": 6.059643983840942}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s: str) -> int:\n    # Initialize sum variable\n    total = 0\n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII value of the character to the total\n            total += ord(char)\n    # Return the total sum of ASCII values of uppercase characters\n    return total", "prompt_tokens": 152, "completion_tokens": 96, "duration": 5.35869836807251}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s: str, n: int) -> int:\n    # Split the string by spaces and extract the numbers\n    numbers = [int(x) for x in s.split() if x.isdigit()]\n    \n    # Calculate the total number of mango fruits\n    mango = n - sum(numbers)\n    \n    return mango", "prompt_tokens": 250, "completion_tokens": 71, "duration": 3.7298805713653564}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    # Create a list to store the even values from the input array\n    evens = [num for num in arr if num % 2 == 0]\n    \n    # If there are no even values or the array is empty, return an empty list\n    if not evens:\n        return []\n    \n    # Find the smallest even value in the array\n    min_even = min(evens)\n    \n    # Find the index of the first occurrence of the smallest even value\n    index = arr.index(min_even)\n    \n    return [min_even, index]", "prompt_tokens": 352, "completion_tokens": 125, "duration": 5.98701024055481}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    # Create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    \n    # Count the frequency of each integer in the list\n    for num in lst:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    \n    # Iterate through the dictionary to find the required integer\n    result = -1\n    for num, freq in freq_dict.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    \n    return result", "prompt_tokens": 205, "completion_tokens": 118, "duration": 4.15921425819397}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize an empty list to store the strange sorted list\n    result = []\n    \n    # Use two pointers to keep track of the current minimum and maximum values\n    left, right = 0, len(lst) - 1\n    \n    while left <= right:\n        # Append the current minimum value to the result list\n        result.append(lst[left])\n        left += 1\n        \n        # If there are still elements left, append the current maximum value to the result list\n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 144, "duration": 6.206244707107544}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points and return\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 161, "completion_tokens": 136, "duration": 6.107715368270874}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    # Check if the list q is a palindrome\n    if q == q[::-1]:\n        # Check if the sum of elements in q is less than or equal to the maximum weight w\n        if sum(q) <= w:\n            return True\n    return False", "prompt_tokens": 270, "completion_tokens": 69, "duration": 3.415132761001587}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    # Initialize the count of changes needed to 0\n    changes = 0\n    # Iterate over half of the array\n    for i in range(len(arr) // 2):\n        # Compare the elements from the beginning and end of the array\n        if arr[i] != arr[-i - 1]:\n            # Increment changes by the absolute difference of the elements\n            changes += abs(arr[i] - arr[-i - 1])\n    return changes", "prompt_tokens": 197, "completion_tokens": 106, "duration": 4.0273778438568115}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    # Calculate the total number of characters in lst1\n    total_chars_lst1 = sum([len(word) for word in lst1])\n    \n    # Calculate the total number of characters in lst2\n    total_chars_lst2 = sum([len(word) for word in lst2])\n    \n    # Compare total number of characters and return the appropriate list\n    return lst1 if total_chars_lst1 < total_chars_lst2 else lst2", "prompt_tokens": 233, "completion_tokens": 104, "duration": 3.731337070465088}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    # Check if a is less than 2\n    if a < 2:\n        return False\n    \n    # Check if a is a prime number\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Find the prime factors of a\n    prime_factors = []\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            prime_factors.append(i)\n    \n    # Check if there are exactly 3 prime factors\n    if len(prime_factors) == 3:\n        return True\n    else:\n        return False", "prompt_tokens": 119, "completion_tokens": 169, "duration": 4.970666885375977}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    # Check if x is equal to n raised to the integer power, return the result\n    return x == n**int(x**(1/n))", "prompt_tokens": 182, "completion_tokens": 43, "duration": 4.789398431777954}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    # Return True if a is a cube of some integer number, otherwise return False\n    \n    # Calculate the cube root of the absolute value of a\n    cube_root = abs(a) ** (1/3)\n    \n    # Check if the cube root is an integer\n    if int(cube_root) ** 3 == abs(a):\n        return True\n    else:\n        return False", "prompt_tokens": 150, "completion_tokens": 89, "duration": 3.645493745803833}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Define a list of prime numbers in decimal form\n    prime_nums = [2, 3, 5, 7, 11, 13, 17]\n    \n    # Convert the hexadecimal number to decimal\n    decimal_num = int(num, 16)\n    \n    # Count the number of prime digits in the decimal number\n    count = 0\n    for digit in str(decimal_num):\n        if int(digit) in prime_nums:\n            count += 1\n    \n    return count", "prompt_tokens": 339, "completion_tokens": 171, "duration": 6.184854984283447}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    # Convert the decimal number to binary\n    binary = bin(decimal)[2:]\n    # Add 'db' at the beginning and end of the binary string\n    result = 'db' + binary + 'db'\n    \n    return result", "prompt_tokens": 179, "completion_tokens": 60, "duration": 3.1818737983703613}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate over the string up to the third last character\n    for i in range(len(s) - 2):\n        # Check if every 3 consecutive letters are distinct\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 161, "completion_tokens": 116, "duration": 4.097669363021851}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    # Define the letter grades based on the GPA\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 310, "completion_tokens": 276, "duration": 9.046780824661255}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    # Calculate the length of the input string\n    length = len(string)\n    \n    # Check if the length is less than 2, return False\n    if length < 2:\n        return False\n    \n    # Check if the length is divisible by any number from 2 to the square root of the length\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    \n    # If the length is not divisible by any number, return True\n    return True", "prompt_tokens": 121, "completion_tokens": 126, "duration": 4.536402940750122}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0  # Initialize count variable\n    for i in range(10**(n-1), 10**n):  # Loop through all n-digit numbers\n        if str(i)[0] == '1' or str(i)[-1] == '1':  # Check if number starts or ends with 1\n            count += 1  # Increment count if condition is met\n    return count  # Return the final count", "prompt_tokens": 84, "completion_tokens": 104, "duration": 4.211548328399658}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Convert the integer N to binary and remove the '0b' prefix\n    binary_str = bin(N)[2:]\n    \n    # Calculate the sum of digits in the binary string\n    sum_digits = sum(int(digit) for digit in binary_str)\n    \n    # Convert the sum of digits to binary and return as string\n    return bin(sum_digits)[2:]", "prompt_tokens": 173, "completion_tokens": 85, "duration": 5.464400768280029}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    # Filter the even elements at odd indices\n    filtered_lst = [x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0]\n    \n    # Calculate the sum of the filtered elements\n    result = sum(filtered_lst)\n    \n    return result", "prompt_tokens": 95, "completion_tokens": 72, "duration": 4.836432218551636}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    # Split the input string into a list of words\n    words = s.split()\n    \n    # Sort each word in the list based on ascii value\n    sorted_words = [''.join(sorted(word)) for word in words]\n    \n    # Join the sorted words back together with spaces\n    result = ' '.join(sorted_words)\n    \n    return result", "prompt_tokens": 170, "completion_tokens": 82, "duration": 2.74086594581604}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    result = []\n    \n    # Iterate over each row in the list\n    for i in range(len(lst)):\n        # Check if x is in the current row\n        if x in lst[i]:\n            # Find the column index of x in the current row\n            col_index = len(lst[i]) - lst[i][::-1].index(x) - 1\n            \n            # Add the coordinates (row index, column index) to the result list\n            result.append((i, col_index))\n    \n    # Sort the result list by row index in ascending order\n    result.sort(key=lambda x: x[0])\n    # Sort the coordinates of each row by column index in descending order\n    result = [(row, col) for row, col in sorted(result, key=lambda x: x[1], reverse=True)]\n    \n    return result", "prompt_tokens": 299, "completion_tokens": 196, "duration": 3.3749990463256836}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()  # make a copy of the given array\n    if len(sorted_array) == 0 or (sorted_array[0] + sorted_array[-1]) % 2 == 0:  # check if the sum of the first and last element is even\n        sorted_array.sort(reverse=True)  # sort the array in descending order\n    else:\n        sorted_array.sort()  # sort the array in ascending order\n    return sorted_array  # return the sorted array", "prompt_tokens": 761, "completion_tokens": 332, "duration": 6.332803964614868}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Create an empty string to store the encrypted result\n    result = ''\n    \n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Find the index of the character in the alphabet\n            idx = alphabet.index(char.lower())\n            # Shift the index by two multiplied to two places\n            new_idx = (idx + 2 * 2) % 26\n            # Append the new encrypted character to the result string\n            result += alphabet[new_idx]\n        else:\n            # If the character is not a letter, simply append it unchanged\n            result += char\n    \n    # Return the final encrypted result\n    return result", "prompt_tokens": 150, "completion_tokens": 174, "duration": 3.328641891479492}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Remove duplicates\n    lst = list(set(lst))\n    \n    # Return the 2nd element if it exists, otherwise return None\n    return lst[1] if len(lst) >= 2 else None", "prompt_tokens": 164, "completion_tokens": 69, "duration": 1.7275352478027344}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Split the string into sentences based on delimiters '.' '?' '!'\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence.strip() != '']\n    \n    # Check each sentence for boredom (starts with 'I')\n    boredom_count = sum(1 for sentence in sentences if sentence.startswith('I'))\n\n    return boredom_count", "prompt_tokens": 147, "completion_tokens": 85, "duration": 1.8804221153259277}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(i, int) for i in [x, y, z]):\n        # Check if one number is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 175, "completion_tokens": 94, "duration": 3.2136075496673584}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    # Create a dictionary to map vowels to the letter that appears 2 places ahead in the alphabet\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    # Initialize an empty string to store the encoded message\n    encoded_message = ''\n    \n    # Iterate through each character in the message\n    for char in message:\n        # Swap the case of the character\n        if char.isalpha():\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n            \n        # Replace vowels with the mapped letter\n        if char in vowel_map:\n            char = vowel_map[char]\n        \n        # Append the character to the encoded message\n        encoded_message += char\n    \n    # Return the final encoded message\n    return encoded_message", "prompt_tokens": 149, "completion_tokens": 218, "duration": 3.639549970626831}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Function to get the sum of digits of a number\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n    \n    # Filter out non-prime numbers from the list\n    primes = filter(is_prime, lst)\n    \n    # Find the largest prime number and return the sum of its digits\n    return sum_digits(max(primes))", "prompt_tokens": 326, "completion_tokens": 153, "duration": 3.5228219032287598}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    lower_keys = all(key.islower() for key in dict.keys())\n    upper_keys = all(key.isupper() for key in dict.keys())\n    \n    return lower_keys or upper_keys", "prompt_tokens": 209, "completion_tokens": 62, "duration": 1.6359410285949707}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n\n    return primes", "prompt_tokens": 185, "completion_tokens": 103, "duration": 2.363142251968384}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a: int, b: int) -> int:\n    # Get the unit digits of both numbers\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Calculate the product of the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    return product", "prompt_tokens": 138, "completion_tokens": 76, "duration": 1.9142506122589111}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    # Filter out the characters at even indices\n    even_chars = s[::2]\n    \n    # Filter out the uppercase vowels from the even characters\n    upper_vowels = [char for char in even_chars if char in 'AEIOU']\n    \n    # Count the number of uppercase vowels\n    count = len(upper_vowels)\n    \n    return count", "prompt_tokens": 112, "completion_tokens": 87, "duration": 2.0206265449523926}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    # Convert the value to a float\n    number = float(value)\n    \n    # Calculate the integer values that are closest to the number\n    lower_int = int(number)\n    higher_int = int(number) + 1\n    \n    # Calculate the distances from the number to the two integers\n    lower_distance = number - lower_int\n    higher_distance = higher_int - number\n    \n    # Return the closest integer, rounding away from zero if equidistant\n    if lower_distance < higher_distance:\n        return lower_int\n    else:\n        return higher_int", "prompt_tokens": 196, "completion_tokens": 119, "duration": 2.432917833328247}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]  # Start with n stones in the first level\n    for i in range(1, n):  # Iterate from level 2 to n\n        if n % 2 == 0:  # If n is even\n            stones.append(stones[-1] + 2)  # Add 2 stones to the previous level\n        else:\n            stones.append(stones[-1] + 1)  # Add 1 stone to the previous level\n    return stones", "prompt_tokens": 172, "completion_tokens": 118, "duration": 2.331998348236084}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    # Split the string by commas or spaces to get individual words\n    words = s.replace(\",\", \" \").split()\n    \n    # Return the array of words\n    return words", "prompt_tokens": 156, "completion_tokens": 46, "duration": 1.6032373905181885}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x: int, y: int) -> int:\n    # Loop from y down to x\n    for num in range(y, x-1, -1):\n        # Check if the number is even and return it\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 134, "completion_tokens": 72, "duration": 2.1402482986450195}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n: int, m: int) -> str:\n    if n > m:\n        return -1\n\n    avg = (n + m) // 2 + (n + m) % 2  # calculate the average\n    return bin(avg)  # convert average to binary format", "prompt_tokens": 180, "completion_tokens": 68, "duration": 1.8569114208221436}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x: List[int]) -> List[int]:\n    # Filter out numbers with even digits\n    filtered = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    \n    # Sort the filtered list in increasing order\n    sorted_filtered = sorted(filtered)\n    \n    return sorted_filtered", "prompt_tokens": 142, "completion_tokens": 76, "duration": 1.7966461181640625}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # Filter only integers between 1 and 9 inclusive\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map the integers to their corresponding names\n    result = [ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x-1] for x in reversed_arr\n    \n    return result", "prompt_tokens": 2863, "completion_tokens": 782, "duration": 14.73194432258606}
{"task_id": "HumanEval/106", "generated_code": "from math import factorial\n\ndef f(n):\n    result = []  # create an empty list to store the values\n    for i in range(1, n+1):  # iterate from 1 to n (inclusive)\n        if i % 2 == 0:  # if i is even\n            result.append(factorial(i))  # calculate the factorial of i and add it to the list\n        else:\n            result.append(sum(range(1, i+1)))  # calculate the sum of numbers from 1 to i and add it to the list\n    return result  # return the final list\n\n# Test the function\nprint(f(5))  # Output: [1, 2, 6, 24, 15]", "prompt_tokens": 164, "completion_tokens": 162, "duration": 2.9118494987487793}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    # Initialize counters for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n\n    # Loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(i) == str(i)[::-1]:\n            # Increment the appropriate counter based on the parity of the palindrome\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    # Return a tuple containing the counts of even and odd palindromes\n    return (even_count, odd_count)", "prompt_tokens": 251, "completion_tokens": 150, "duration": 2.68756103515625}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    # Initialize a counter variable to keep track of numbers with sum of digits > 0\n    count = 0\n    \n    # Iterate through each number in the array\n    for num in arr:\n        # Get the absolute value of the number for easier digit sum calculation\n        num = abs(num)\n        \n        # Initialize a variable to store the sum of digits for the current number\n        digit_sum = 0\n        \n        # Calculate the sum of digits for the current number\n        while num > 0:\n            digit_sum += num % 10\n            num = num // 10\n            \n        # Check if the sum of digits is greater than 0\n        if digit_sum > 0:\n            count += 1\n    \n    # Return the count of numbers with sum of digits > 0\n    return count", "prompt_tokens": 164, "completion_tokens": 178, "duration": 3.9185221195220947}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    # Return True if the array is empty\n    if not arr:\n        return True\n    \n    # Find the index of the minimum element in the array\n    min_index = arr.index(min(arr))\n    \n    # Check if the array is already sorted in non-decreasing order\n    if arr == sorted(arr):\n        return True\n    \n    # Check if the array can be sorted by performing right shift operations\n    for i in range(len(arr)):\n        if arr[(min_index+i)%len(arr)] != min(arr)+i:\n            return False\n    return True", "prompt_tokens": 339, "completion_tokens": 126, "duration": 3.021714925765991}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Count the number of odd elements in lst1\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count the number of odd elements in lst2\n    odd_count2 = sum(1 for num in lst2 if num % 2 != 0)\n    \n    # Return \"YES\" if the number of odd elements in lst1 is less than or equal to the number of odd elements in lst2\n    # Otherwise, return \"NO\"\n    return \"YES\" if odd_count <= odd_count2 else \"NO\"", "prompt_tokens": 237, "completion_tokens": 135, "duration": 2.689718008041382}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    # Split the input string into a list of lowercase letters\n    letters = test.split()\n    \n    # Create an empty dictionary to store letter counts\n    counts = {}\n    \n    # Iterate through the letters list and count occurrences of each letter\n    for letter in letters:\n        counts[letter] = counts.get(letter, 0) + 1\n    \n    # Find the maximum count value\n    max_count = max(counts.values())\n    \n    # Filter the dictionary to keep only letters with the maximum count\n    result = {key: value for key, value in counts.items() if value == max_count}\n    \n    return result", "prompt_tokens": 191, "completion_tokens": 139, "duration": 4.47176194190979}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    # Remove characters in s that are in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)", "prompt_tokens": 202, "completion_tokens": 78, "duration": 1.835111141204834}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over each string in the input list\n    for string in lst:\n        # Count the number of odd digits in the current string and append it to the result list\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), string, string, string))\n    \n    return result", "prompt_tokens": 213, "completion_tokens": 112, "duration": 2.311184883117676}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    # Initialize variables to store the minimum sum and current sum\n    min_sum = float('inf')\n    cur_sum = 0\n    \n    # Loop through the elements of the array\n    for num in nums:\n        # Update the current sum\n        cur_sum += num\n        # Update the minimum sum if the current sum is smaller\n        min_sum = min(min_sum, cur_sum)\n        # Reset the current sum to 0 if it becomes negative\n        cur_sum = max(cur_sum, 0)\n    \n    return min_sum", "prompt_tokens": 128, "completion_tokens": 123, "duration": 4.643884897232056}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    # Initialize total_count to keep track of the total number of times we need to lower the buckets\n    total_count = 0\n\n    # Loop over each column in the grid\n    for j in range(len(grid[0])):\n        # Initialize current_count to keep track of the number of units of water in the current column\n        current_count = 0\n\n        # Loop over each row in the grid\n        for i in range(len(grid)):\n            # Add the value of the current well to the current_count\n            current_count += grid[i][j]\n\n        # Calculate the number of times we need to lower the buckets for the current column\n        total_count += math.ceil(current_count / capacity)\n\n    return total_count", "prompt_tokens": 363, "completion_tokens": 165, "duration": 3.0889487266540527}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 210, "completion_tokens": 28, "duration": 1.2455322742462158}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    # Define a function to check if a character is a consonant\n    def is_consonant(char):\n        return char.lower() not in ['a', 'e', 'i', 'o', 'u'] and char.isalpha()\n\n    # Split the input string into words\n    words = s.split()\n\n    # Initialize a list to store words with n consonants\n    result = []\n\n    # Iterate through each word in the list of words\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if is_consonant(char))\n        \n        # If the number of consonants matches n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n\n    return result", "prompt_tokens": 221, "completion_tokens": 179, "duration": 3.5932605266571045}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word[1:-1]\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 189, "completion_tokens": 81, "duration": 2.0230472087860107}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    # Create a stack to keep track of open parentheses\n    stack = []\n    \n    # Iterate through each string in the input list\n    for s in lst:\n        # Iterate through each character in the string\n        for char in s:\n            # If the character is an open parenthesis, push it onto the stack\n            if char == '(':\n                stack.append('(')\n            # If the character is a close parenthesis and the stack is not empty, pop from the stack\n            elif char == ')' and stack:\n                stack.pop()\n            # If the character is a close parenthesis and the stack is empty, return 'No'\n            else:\n                return 'No'\n    \n    # If the stack is empty after processing both strings, return 'Yes'\n    if not stack:\n        return 'Yes'\n    # If the stack is not empty after processing both strings, return 'No'\n    else:\n        return 'No'", "prompt_tokens": 208, "completion_tokens": 200, "duration": 3.9357364177703857}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    # Sort the array in ascending order\n    arr.sort()\n    # Return the last k elements of the sorted array\n    return arr[-k:]", "prompt_tokens": 257, "completion_tokens": 41, "duration": 1.54477858543396}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    # Filter elements at even positions\n    even_elements = [lst[i] for i in range(len(lst)) if i % 2 == 0]\n    \n    # Filter odd elements from even positions\n    odd_elements = [x for x in even_elements if x % 2 != 0]\n    \n    # Return the sum of odd elements from even positions\n    return sum(odd_elements)", "prompt_tokens": 137, "completion_tokens": 90, "duration": 2.168391227722168}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    # Filter elements with at most two digits from the first k elements\n    filtered_arr = [x for x in arr[:k] if 10 <= x <= 99]\n    \n    # Return the sum of the filtered elements\n    return sum(filtered_arr)", "prompt_tokens": 168, "completion_tokens": 65, "duration": 5.260109901428223}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    # Initialize a list to store the odd numbers in collatz sequence\n    odd_numbers = []\n    \n    # Loop until n becomes 1\n    while n != 1:\n        # If n is odd, add it to the list\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        \n        # Apply Collatz rule\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    \n    # Add 1 to the list since the loop exits when n becomes 1\n    odd_numbers.append(1)\n    \n    # Return sorted list of odd numbers\n    return sorted(odd_numbers)", "prompt_tokens": 271, "completion_tokens": 159, "duration": 3.2704436779022217}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is not empty\n    if date == '':\n        return False\n\n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n\n    # Check if the month is valid (between 1 and 12)\n    if not 1 <= int(month) <= 12:\n        return False\n\n    # Check the number of days based on the month\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if not 1 <= int(day) <= 31:\n            return False\n    elif int(month) in [4, 6, 9, 11]:\n        if not 1 <= int(day) <= 30:\n            return False\n    else:  # February\n        if not 1 <= int(day) <= 29:\n            return False\n\n    return True", "prompt_tokens": 303, "completion_tokens": 206, "duration": 4.669396877288818}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    # Check if there are any whitespaces in the text\n    if ' ' in txt:\n        return txt.split()\n    # Check if there are any commas in the text\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Count the number of lower-case letters with odd order in the alphabet\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 180, "completion_tokens": 101, "duration": 2.241514205932617}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    # Check if the list is equal to the sorted version of the list with duplicates removed\n    return lst == sorted(set(lst))", "prompt_tokens": 289, "completion_tokens": 36, "duration": 1.509495735168457}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    # Find the maximum of the start points to determine the start of the intersection\n    start = max(interval1[0], interval2[0])\n    \n    # Find the minimum of the end points to determine the end of the intersection\n    end = min(interval1[1], interval2[1])\n    \n    # If the start is greater than the end, intervals do not intersect\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length of the intersection is a prime number\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 294, "completion_tokens": 176, "duration": 5.668671607971191}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    # check if array is empty\n    if not arr:\n        return None\n    \n    # calculate the product of all signs\n    sign_product = 1\n    for num in arr:\n        sign_product *= 1 if num > 0 else -1 if num < 0 else 0\n    \n    # calculate the sum of magnitudes multiplied by sign product\n    result = sum(abs(num) for num in arr) * sign_product\n    \n    return result", "prompt_tokens": 162, "completion_tokens": 105, "duration": 6.144092559814453}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    # Flatten the grid to a 1D list\n    flat_grid = [cell for row in grid for cell in row]\n    \n    # Sort the flattened grid\n    sorted_grid = sorted(flat_grid)\n    \n    # Find the minimum path of length k\n    min_path = sorted_grid[:k]\n    \n    return min_path", "prompt_tokens": 436, "completion_tokens": 81, "duration": 5.6336023807525635}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # Initialize a list to store the Tribonacci sequence\n    tribonacci_sequence = [3]\n    \n    # Check if n is 0, if so return the initial value\n    if n == 0:\n        return tribonacci_sequence\n    \n    # Check if n is 1, if so return the initial value and exit\n    if n == 1:\n        return tribonacci_sequence + [1]\n    \n    # Check if n is 2, if so return the initial value and exit\n    if n == 2:\n        return tribonacci_sequence + [1, 3]\n    \n    # Calculate the Tribonacci sequence for n greater than 2\n    for i in range(2, n):\n        if i % 2 == 0:\n            tribonacci_sequence.append(1 + i // 2)\n        else:\n            tribonacci_sequence.append(tribonacci_sequence[-1] + tribonacci_sequence[-2] + tribonacci_sequence[-3])\n    \n    return tribonacci_sequence", "prompt_tokens": 275, "completion_tokens": 214, "duration": 7.26617431640625}
{"task_id": "HumanEval/131", "generated_code": "def digits(n: int) -> int:\n    # Initialize a variable to store the product of odd digits\n    product = 1\n    # Iterate through each digit in the number n\n    for digit in str(n):\n        # Convert the digit back to an integer\n        digit = int(digit)\n        # Check if the digit is odd\n        if digit % 2 == 1:\n            # Multiply the product by the odd digit\n            product *= digit\n    # Return the product if there is at least one odd digit, otherwise return 0\n    return product if product != 1 else 0", "prompt_tokens": 111, "completion_tokens": 132, "duration": 2.975832939147949}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    # initialize a stack to store the opening brackets\n    stack = []\n    \n    # iterate through each character in the string\n    for char in string:\n        # if the character is an opening bracket, add it to the stack\n        if char == '[':\n            stack.append(char)\n        # if the character is a closing bracket and the stack is not empty, pop the top element\n        elif char == ']' and stack:\n            stack.pop()\n    \n    # if the stack is not empty, there are nested brackets\n    return bool(stack)", "prompt_tokens": 173, "completion_tokens": 122, "duration": 3.945885181427002}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    # Round each element in the list to the upper int (Ceiling)\n    lst = [int(-(-num//1)) for num in lst]\n    \n    # Calculate the sum of squared numbers in the list\n    return sum([num**2 for num in lst])", "prompt_tokens": 197, "completion_tokens": 67, "duration": 5.354717493057251}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    # If the text is empty, return False\n    if not txt:\n        return False\n    \n    # Split the text by space to get words\n    words = txt.split()\n    \n    # Get the last word\n    last_word = words[-1]\n    \n    # Check if the last character of the last word is an alphabetical character\n    if last_word[-1].isalpha() and len(last_word) == 1:\n        return True\n    else:\n        return False", "prompt_tokens": 177, "completion_tokens": 114, "duration": 6.408965110778809}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    # Create a variable to store the index of the element that is not greater than the element immediately preceding it\n    index = -1\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than or equal to the element before it\n        if arr[i] < arr[i-1]:\n            # Update the index to the current index\n            index = i - 1\n    \n    # Return the index found\n    return index", "prompt_tokens": 143, "completion_tokens": 121, "duration": 5.0780556201934814}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    # Filter out negative and positive integers\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n    \n    # Find largest negative integer or None\n    if negative_integers:\n        largest_negative = max(negative_integers)\n    else:\n        largest_negative = None\n    \n    # Find smallest positive integer or None\n    if positive_integers:\n        smallest_positive = min(positive_integers)\n    else:\n        smallest_positive = None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 178, "completion_tokens": 134, "duration": 4.7237207889556885}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    # If a and b are equal, return None\n    if a == b:\n        return None\n    # If a is a string, replace , with . and convert to float\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    # If b is a string, replace , with . and convert to float\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    # If a is greater than b, return a\n    if a > b:\n        return a\n    # If b is greater than a, return b\n    else:\n        return b", "prompt_tokens": 181, "completion_tokens": 140, "duration": 6.664633750915527}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    # Create a list of even numbers less than n\n    even_numbers = [i for i in range(2, n) if i % 2 == 0]\n    \n    # Check all possible combinations of 4 even numbers\n    for a in even_numbers:\n        for b in even_numbers:\n            for c in even_numbers:\n                for d in even_numbers:\n                    if a + b + c + d == n:\n                        return True\n    return False", "prompt_tokens": 117, "completion_tokens": 109, "duration": 4.457353591918945}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    # Initialize the result variable with 1\n    result = 1\n    # Iterate from n down to 1\n    for i in range(n, 0, -1):\n        # Calculate the factorial of the current number i\n        factorial_i = 1\n        for j in range(1, i+1):\n            factorial_i *= j\n        # Multiply the result by the factorial of i\n        result *= factorial_i\n    return result", "prompt_tokens": 135, "completion_tokens": 106, "duration": 3.9128942489624023}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace consecutive spaces with a single dash\n    while \"--\" in text:\n        text = text.replace(\"--\", \"-\")\n    \n    return text", "prompt_tokens": 146, "completion_tokens": 58, "duration": 3.1589879989624023}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if there are not more than three digits in the file name\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    \n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension parts\n    file_parts = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    \n    # Check if the extension is 'txt', 'exe', or 'dll'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 254, "completion_tokens": 190, "duration": 5.3960020542144775}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    # Initialize a variable to store the sum\n    total = 0\n    \n    # Loop through the list with index\n    for i, num in enumerate(lst):\n        # Check if index is a multiple of 3\n        if i % 3 == 0:\n            total += num ** 2\n        # Check if index is a multiple of 4 but not a multiple of 3\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        # For other indexes, add the number as it is\n        else:\n            total += num\n            \n    return total", "prompt_tokens": 209, "completion_tokens": 144, "duration": 6.370523452758789}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Filter out words with prime lengths\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    # Join the prime words into a new sentence\n    result = ' '.join(prime_words)\n    \n    return result", "prompt_tokens": 187, "completion_tokens": 139, "duration": 4.316244602203369}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    # Split the fractions into numerators and denominators\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    # Calculate the result of x * n\n    result = x_num * n_num / (x_denom * n_denom)\n    \n    # Check if the result is a whole number\n    return result.is_integer()", "prompt_tokens": 195, "completion_tokens": 99, "duration": 4.152169227600098}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    # Define a helper function to calculate the sum of digits of a number\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    # Sort the list of numbers based on the sum of digits and index\n    nums.sort(key=lambda x: (sum_of_digits(x), nums.index(x)))\n    \n    return nums", "prompt_tokens": 155, "completion_tokens": 86, "duration": 5.451002359390259}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    # Initialize a counter variable to keep track of qualifying elements\n    count = 0\n    \n    # Iterate through each number in the array\n    for num in nums:\n        # Check if the number is greater than 10 and both first and last digits are odd\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            # Increment the counter if the condition is met\n            count += 1\n    \n    # Return the final count of qualifying elements\n    return count", "prompt_tokens": 159, "completion_tokens": 145, "duration": 4.830859422683716}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    # Create an array 'a' of length n\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    \n    # Initialize count variable\n    count = 0\n    \n    # Loop through all possible triples and check if the sum is divisible by 3\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    # Return the count of valid triples\n    return count", "prompt_tokens": 205, "completion_tokens": 145, "duration": 6.664619207382202}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if planet1 and planet2 are correct planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indexes of planet1 and planet2 in the planets list\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Determine the start and end indexes for the slice of planets between planet1 and planet2\n    start = min(index1, index2) + 1\n    end = max(index1, index2)\n    \n    # Get the slice of planets between planet1 and planet2, sort by proximity to the sun\n    result = tuple(sorted(planets[start:end], key=lambda x: planets.index(x)))\n    \n    return result", "prompt_tokens": 251, "completion_tokens": 207, "duration": 6.879424810409546}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list by length and alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst", "prompt_tokens": 227, "completion_tokens": 77, "duration": 3.7679646015167236}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    # import math module to use sqrt function\n    import math\n    # define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    # check if n is prime and return the appropriate value\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 126, "completion_tokens": 117, "duration": 4.185983657836914}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    # Initialize a variable to store the sum of squares of odd numbers\n    result = 0\n    \n    # Iterate through the list\n    for num in lst:\n        # Check if the number is positive, odd and an integer\n        if num > 0 and num % 2 != 0 and isinstance(num, int):\n            # Add the square of the number to the result\n            result += num ** 2\n    \n    # Return the double of the result\n    return result * 2", "prompt_tokens": 177, "completion_tokens": 114, "duration": 4.080389976501465}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    # Create an empty list to store the differences between guesses and scores\n    differences = []\n    \n    # Iterate through each match and calculate the difference between guess and score\n    for i in range(len(game)):\n        differences.append(abs(game[i] - guess[i]))\n        \n    return differences", "prompt_tokens": 270, "completion_tokens": 69, "duration": 3.1810824871063232}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    # Initialize variables to store the strongest extension and its strength\n    strongest_extension = extensions[0]\n    strongest_strength = extensions[0].count(chr) - extensions[0].count(chr.lower())\n    \n    # Iterate through the extensions list to find the strongest extension\n    for extension in extensions[1:]:\n        strength = extension.count(chr) - extension.count(chr.lower())\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    \n    # Return the result in the required format\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 317, "completion_tokens": 130, "duration": 5.860625743865967}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a , b):\n    # Check if the lengths of both words are equal\n    if len(a) != len(b):\n        return False\n    \n    # Concatenate the first word with itself to handle circular patterns\n    a += a\n    \n    # Check if the second word is a substring of the concatenated first word\n    if b in a:\n        return True\n    \n    return False", "prompt_tokens": 169, "completion_tokens": 86, "duration": 5.603592872619629}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    # Convert the integer to a string to easily iterate through its digits\n    num_str = str(abs(num))\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate through each digit in the string representation of the number\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return a tuple containing the counts of even and odd digits\n    return (even_count, odd_count)", "prompt_tokens": 105, "completion_tokens": 132, "duration": 4.319185018539429}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number: int) -> str:\n    # Define the mapping of roman numerals and their values\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl',\n        50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    # Define the list of roman numerals in descending order\n    values = sorted(roman_numerals.keys(), reverse=True)\n    \n    # Initialize an empty string to store the resulting roman numeral\n    result = ''\n    \n    # Iterate through the values and append the corresponding roman numeral to the result\n    for val in values:\n        while number >= val:\n            result += roman_numerals[val]\n            number -= val\n    \n    return result", "prompt_tokens": 141, "completion_tokens": 210, "duration": 5.379606485366821}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    # Sort the sides of the triangle in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check if the sides form a right-angled triangle using the Pythagorean theorem\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 148, "completion_tokens": 77, "duration": 5.404962062835693}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # Create a list to store unique characters for each word\n    unique_chars = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Find unique characters in the word and store them in a set\n        unique_chars.append(set(word))\n    \n    # Find the index of the word with the maximum number of unique characters\n    max_index = max(range(len(unique_chars)), key=lambda x: (len(unique_chars[x]), words[x]))\n    \n    # Return the word at the index with maximum unique characters\n    return words[max_index]", "prompt_tokens": 160, "completion_tokens": 126, "duration": 4.091080188751221}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    # Calculate the total number of eaten carrots after your meals\n    total_eaten = number + min(need, remaining)\n    \n    # Calculate the number of carrots left after your meals\n    carrots_left = max(0, remaining - need)\n    \n    return [total_eaten, carrots_left]", "prompt_tokens": 317, "completion_tokens": 74, "duration": 3.6985578536987305}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    # Initialize the result with the first operand\n    result = operand[0]\n    \n    # Iterate through the operator list and perform the corresponding operation with the next operand\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    \n    return result", "prompt_tokens": 247, "completion_tokens": 146, "duration": 6.315470457077026}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    # Check if the string contains no letters\n    if not any(char.isalpha() for char in s):\n        return s[::-1]  # Reverse the string\n        \n    # Convert characters accordingly\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in s)\n\n# Test cases\nprint(solve(\"1234\"))  # \"4321\"\nprint(solve(\"ab\"))    # \"AB\"\nprint(solve(\"#a@C\"))  # \"#A@c\"", "prompt_tokens": 147, "completion_tokens": 112, "duration": 3.8718607425689697}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n\n    # Create an MD5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Encode the input text as UTF-8 and update the hash object\n    md5_hash.update(text.encode('utf-8'))\n\n    # Return the hexadecimal representation of the MD5 hash\n    return md5_hash.hexdigest()", "prompt_tokens": 116, "completion_tokens": 90, "duration": 5.298137664794922}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a: int, b: int) -> list:\n    # Initialize an empty list to store the even digits\n    result = []\n    \n    # Loop through the range from a to b (inclusive)\n    for num in range(a, b+1):\n        # Check if the current number is even\n        if num % 2 == 0:\n            # Append the even number to the result list\n            result.append(num)\n    \n    # Return the list of even digits\n    return result", "prompt_tokens": 144, "completion_tokens": 110, "duration": 4.042664527893066}
