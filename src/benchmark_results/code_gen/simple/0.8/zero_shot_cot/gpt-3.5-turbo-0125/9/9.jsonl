{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Iterate through the list of numbers\n    for i in range(len(numbers) - 1):\n        # Calculate the absolute difference between adjacent numbers\n        diff = abs(numbers[i] - numbers[i+1])\n        # Check if the difference is less than the threshold\n        if diff < threshold:\n            return True\n    \n    return False", "prompt_tokens": 163, "completion_tokens": 103, "duration": 2.411207437515259}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove all spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store the separate groups\n    separate_groups = []\n    \n    # Initialize an empty string to store the current group\n    current_group = \"\"\n    \n    # Iterate over each character in the input string\n    for char in paren_string:\n        # Add the character to the current group\n        current_group += char\n        \n        # If the current group is a balanced group, add it to the separate groups list\n        if current_group.count(\"(\") == current_group.count(\")\"):\n            separate_groups.append(current_group)\n            current_group = \"\"\n    \n    return separate_groups", "prompt_tokens": 154, "completion_tokens": 160, "duration": 2.9412193298339844}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    # Get the integer part of the number\n    integer_part = int(number)\n    \n    # Calculate the decimal part by subtracting the integer part from the number\n    decimal_part = number - integer_part\n    \n    return decimal_part", "prompt_tokens": 125, "completion_tokens": 62, "duration": 1.7894551753997803}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    # Initialize balance variable to keep track of account balance\n    balance = 0\n    \n    # Iterate through each operation\n    for operation in operations:\n        # Update balance based on the operation\n        balance += operation\n        \n        # Check if balance falls below zero\n        if balance < 0:\n            return True\n    \n    return False", "prompt_tokens": 158, "completion_tokens": 85, "duration": 2.0587828159332275}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute difference between each element and the mean\n    abs_diff = [abs(num - mean) for num in numbers]\n    \n    # Calculate the mean absolute deviation\n    mad = sum(abs_diff) / len(numbers)\n    \n    return mad", "prompt_tokens": 156, "completion_tokens": 91, "duration": 2.2278175354003906}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []  # Initialize an empty list to store the result\n    for num in numbers:  # Iterate over each number in the input list\n        result.extend([num, delimeter])  # Add the current number and delimiter to the result list\n    result.pop()  # Remove the last delimiter from the result list\n    return result  # Return the final result list", "prompt_tokens": 131, "completion_tokens": 101, "duration": 2.1239423751831055}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string by space to get individual groups\n    groups = paren_string.split()\n\n    # Initialize an empty list to store the deepest level of nesting for each group\n    deepest_levels = []\n\n    # Iterate through each group to find the deepest level of nesting\n    for group in groups:\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        deepest_levels.append(max_depth)\n\n    return deepest_levels", "prompt_tokens": 151, "completion_tokens": 146, "duration": 2.8834500312805176}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Create an empty list to store the filtered strings\n    filtered_strings = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the substring is in the current string\n        if substring in string:\n            # If the substring is found, append the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the list of filtered strings\n    return filtered_strings", "prompt_tokens": 132, "completion_tokens": 112, "duration": 2.359266519546509}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # If the list is empty, return (0, 1)\n    if not numbers:\n        return (0, 1)\n    \n    # Initialize variables to store sum and product\n    total_sum = 0\n    total_product = 1\n    \n    # Calculate sum and product\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    return (total_sum, total_product)", "prompt_tokens": 149, "completion_tokens": 108, "duration": 2.4904775619506836}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store the rolling maximum values\n    rolling_max_list = []\n    \n    # Initialize a variable to store the maximum value found so far\n    current_max = float('-inf')\n    \n    # Iterate through each number in the input list\n    for num in numbers:\n        # Update the current maximum value\n        current_max = max(current_max, num)\n        # Append the current maximum value to the rolling maximum list\n        rolling_max_list.append(current_max)\n    \n    return rolling_max_list", "prompt_tokens": 139, "completion_tokens": 117, "duration": 3.042506694793701}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    # Initialize an empty string to store the prefix that is not a palindrome\n    prefix = \"\"\n    \n    # Iterate over the string from the end to find the longest palindromic suffix\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            prefix = string[i:]\n            break\n    \n    # Return the palindrome by appending the prefix to the string in reverse order\n    return string + prefix[::-1]", "prompt_tokens": 182, "completion_tokens": 129, "duration": 3.1549718379974365}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    # Convert the strings to integers using base 2\n    int_a = int(a, 2)\n    int_b = int(b, 2)\n    \n    # Perform XOR operation on the integers\n    result = int_a ^ int_b\n    \n    # Convert the result back to binary string and remove the '0b' prefix\n    return bin(result)[2:]", "prompt_tokens": 115, "completion_tokens": 94, "duration": 2.32548189163208}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    # Return None if the input list is empty\n    if not strings:\n        return None\n\n    # Initialize variables to store the longest string and its length\n    longest_string = strings[0]\n    longest_length = len(strings[0])\n\n    # Iterate through the list of strings\n    for string in strings[1:]:\n        # Update the longest string and its length if a longer string is found\n        if len(string) > longest_length:\n            longest_string = string\n            longest_length = len(string)\n\n    # Return the longest string found\n    return longest_string", "prompt_tokens": 141, "completion_tokens": 135, "duration": 3.025716781616211}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Base case: If b is 0, return a\n    if b == 0:\n        return a\n    \n    # Recursive call with b and remainder of a divided by b\n    return greatest_common_divisor(b, a % b)", "prompt_tokens": 110, "completion_tokens": 67, "duration": 2.1435344219207764}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    # Initialize an empty list to store the prefixes\n    prefixes = []\n    \n    # Loop through the range of the string length\n    for i in range(1, len(string) + 1):\n        # Append the prefix from index 0 to i to the list\n        prefixes.append(string[:i])\n    \n    # Return the list of prefixes\n    return prefixes", "prompt_tokens": 98, "completion_tokens": 93, "duration": 2.2448318004608154}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    # Create a list of numbers from 0 to n\n    numbers = list(range(n + 1))\n    \n    # Convert each number to a string\n    numbers_str = [str(num) for num in numbers]\n    \n    # Join the numbers with a space delimiter\n    result = ' '.join(numbers_str)\n    \n    return result", "prompt_tokens": 108, "completion_tokens": 85, "duration": 1.966156005859375}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase\n    string = string.lower()\n    \n    # Create a set from the characters of the string to get distinct characters\n    distinct_characters = set(string)\n    \n    # Return the length of the set to get the count of distinct characters\n    return len(distinct_characters)", "prompt_tokens": 110, "completion_tokens": 78, "duration": 2.117724895477295}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Create a dictionary to map musical notes to their corresponding duration\n    notes_duration = {'o': 4, 'o|': 2, '.|': 1}\n    \n    # Split the music_string by spaces to get individual musical notes\n    notes = music_string.split()\n    \n    # Initialize an empty list to store the duration of each note\n    durations = []\n    \n    # Iterate through each note and append its duration to the durations list\n    for note in notes:\n        durations.append(notes_duration[note])\n    \n    return durations", "prompt_tokens": 211, "completion_tokens": 131, "duration": 2.816771984100342}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    # Handle edge case where substring is empty\n    if not substring:\n        return 0\n    \n    count = 0\n    start = 0\n    \n    # Loop until the end of string minus the length of the substring\n    while start <= len(string) - len(substring):\n        # Find the next occurrence of the substring\n        next_index = string.find(substring, start)\n        # If no more occurrences are found, exit the loop\n        if next_index == -1:\n            break\n        # Increment count and update the starting index for next search\n        count += 1\n        start = next_index + 1\n    \n    return count", "prompt_tokens": 128, "completion_tokens": 155, "duration": 2.795511245727539}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    # Create a dictionary to map numberals to their corresponding numerical values\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Split the input string into a list of numberals\n    num_list = numbers.split()\n    \n    # Sort the list of numberals based on their numerical values\n    sorted_num_list = sorted(num_list, key=lambda x: num_dict[x])\n    \n    # Join the sorted list of numberals into a string\n    sorted_numbers = ' '.join(sorted_num_list)\n    \n    return sorted_numbers", "prompt_tokens": 144, "completion_tokens": 177, "duration": 4.15552544593811}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort() # sort the list in ascending order\n    min_diff = numbers[1] - numbers[0] # initialize the minimum difference with the difference of the first two numbers\n    result = (numbers[0], numbers[1]) # initialize the result as the first two numbers\n\n    for i in range(1, len(numbers) - 1): # iterate through the list\n        diff = numbers[i+1] - numbers[i] # calculate the difference between the current number and the next number\n        if diff < min_diff: # if the difference is smaller than the current minimum difference\n            min_diff = diff # update the minimum difference\n            result = (numbers[i], numbers[i+1]) # update the result\n\n    return result", "prompt_tokens": 205, "completion_tokens": 178, "duration": 2.9579219818115234}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the minimum and maximum numbers in the list\n    min_num = min(numbers)\n    max_num = max(numbers)\n\n    # Calculate the range of the numbers\n    range_nums = max_num - min_num\n\n    # Apply linear transformation to rescale the numbers to the unit interval [0, 1]\n    rescaled_numbers = [(num - min_num) / range_nums for num in numbers]\n\n    return rescaled_numbers", "prompt_tokens": 162, "completion_tokens": 108, "duration": 2.417475938796997}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Create an empty list to store the integers\n    integers = []\n    \n    # Iterate over each value in the input list\n    for value in values:\n        # Check if the value is an integer\n        if isinstance(value, int):\n            # Append the integer to the list of integers\n            integers.append(value)\n    \n    # Return the list of integers\n    return integers", "prompt_tokens": 130, "completion_tokens": 98, "duration": 2.1207258701324463}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    # Return the length of the given string\n    return len(string)", "prompt_tokens": 83, "completion_tokens": 28, "duration": 1.3971049785614014}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    # Start from n-1 and decrement by 1\n    for i in range(n-1, 0, -1):\n        # Check if i divides n evenly\n        if n % i == 0:\n            # Return the largest divisor found\n            return i", "prompt_tokens": 92, "completion_tokens": 73, "duration": 1.9438939094543457}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    # Initialize an empty list to store the prime factors\n    factors = []\n    \n    # Start with 2 as the smallest prime factor\n    i = 2\n    \n    # While the input number is greater than 1\n    while n > 1:\n        # If the input number is divisible by current prime factor\n        if n % i == 0:\n            # Add the prime factor to the list\n            factors.append(i)\n            # Update the input number by dividing it by the prime factor\n            n = n // i\n        else:\n            # Move to the next prime factor\n            i += 1\n    \n    return factors\n  ", "prompt_tokens": 165, "completion_tokens": 146, "duration": 2.7033886909484863}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    # Use a set to store unique elements\n    unique_numbers = set()\n    \n    # Initialize a list to store the result\n    result = []\n    \n    # Iterate through the numbers\n    for num in numbers:\n        # If the number is not in the set, add it to the result and set\n        if num not in unique_numbers:\n            result.append(num)\n            unique_numbers.add(num)\n    \n    return result", "prompt_tokens": 123, "completion_tokens": 99, "duration": 5.831389427185059}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Loop through each character in the input string\n    for char in string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Append the lowercase version of the character to the result string\n            result += char.lower()\n        # Check if the character is lowercase\n        elif char.islower():\n            # Append the uppercase version of the character to the result string\n            result += char.upper()\n        # If the character is neither uppercase nor lowercase, just append it to the result string\n        else:\n            result += char\n    \n    # Return the final result string\n    return result", "prompt_tokens": 88, "completion_tokens": 156, "duration": 2.645829916000366}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    # Join the list of strings into a single string using the join method\n    return ''.join(strings)", "prompt_tokens": 96, "completion_tokens": 37, "duration": 1.547304630279541}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Create an empty list to store strings that start with the given prefix\n    result = []\n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, add it to the result list\n            result.append(string)\n    return result", "prompt_tokens": 126, "completion_tokens": 98, "duration": 2.139737844467163}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    # Initialize an empty list to store positive numbers\n    result = []\n    \n    # Iterate through the input list\n    for num in l:\n        # Check if the number is positive\n        if num > 0:\n            # Append the positive number to the result list\n            result.append(num)\n    \n    # Return the list of positive numbers\n    return result", "prompt_tokens": 153, "completion_tokens": 87, "duration": 2.062295436859131}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n: int) -> bool:\n    # Prime numbers are greater than 1\n    if n <= 1:\n        return False\n    \n    # Check if n is divisible by any number from 2 to n-1\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    \n    return True", "prompt_tokens": 139, "completion_tokens": 80, "duration": 2.0830605030059814}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    n = len(xs) - 1\n    a = xs[-1]\n    b = xs[-2]\n    c = xs[-3]\n\n    discriminant = b**2 - 4*a*c\n    x1 = (-b + math.sqrt(discriminant)) / (2*a)\n    x2 = (-b - math.sqrt(discriminant)) / (2*a)\n\n    return x1 if abs(poly(xs, x1)) < abs(poly(xs, x2)) else x2", "prompt_tokens": 298, "completion_tokens": 115, "duration": 2.5651254653930664}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    sorted_third = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    return [sorted_third.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 190, "completion_tokens": 64, "duration": 1.722872018814087}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    # Step 1: Remove duplicates by converting list to set\n    unique_set = set(l)\n    \n    # Step 2: Sort the unique elements\n    unique_sorted = sorted(unique_set)\n    \n    return unique_sorted", "prompt_tokens": 113, "completion_tokens": 57, "duration": 1.7295587062835693}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    # Sort the list in ascending order\n    l.sort()\n    # Return the last element in the sorted list which is the maximum element\n    return l[-1]", "prompt_tokens": 122, "completion_tokens": 42, "duration": 2.4917659759521484}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    # Initialize count variable to keep track of the number of times digit 7 appears\n    count = 0\n    \n    # Iterate through numbers less than n that are divisible by 11 or 13\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            # Check if the digit 7 appears in the current number i\n            if '7' in str(i):\n                # Increment count if digit 7 is found\n                count += 1\n    \n    return count", "prompt_tokens": 119, "completion_tokens": 119, "duration": 2.4913413524627686}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Separate even and odd indexed elements\n    even = l[::2]\n    odd = l[1::2]\n\n    # Sort the even elements\n    sorted_even = sorted(even)\n\n    # Combine the sorted even elements and the odd elements\n    result = [sorted_even[i//2] if i % 2 == 0 else odd[i//2] for i in range(len(l))]\n\n    return result", "prompt_tokens": 163, "completion_tokens": 100, "duration": 5.98664665222168}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 198, "completion_tokens": 114, "duration": 2.4205195903778076}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i-1)", "prompt_tokens": 137, "completion_tokens": 143, "duration": 6.281181573867798}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    # Sort the input list\n    l.sort()\n    \n    # Iterate over the list\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        \n        # Two-pointers approach\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            \n            # Check if the sum is zero\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False", "prompt_tokens": 199, "completion_tokens": 136, "duration": 2.840162992477417}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    # Calculate the number of collisions in a race with n cars on each direction\n    # Number of collisions is equal to the number of cars in one direction\n    return n", "prompt_tokens": 191, "completion_tokens": 49, "duration": 3.4247405529022217}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    # Create an empty list to store the incremented elements\n    result = []\n    \n    # Iterate through each element in the input list\n    for num in l:\n        # Increment the element by 1 and append it to the result list\n        result.append(num + 1)\n    \n    # Return the resulting list\n    return result", "prompt_tokens": 148, "completion_tokens": 81, "duration": 5.461822509765625}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "prompt_tokens": 197, "completion_tokens": 52, "duration": 1.6805789470672607}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    # define a list to hold the remainders\n    result = []\n    \n    # loop until x is greater than 0\n    while x > 0:\n        # find the remainder when x is divided by base\n        remainder = x % base\n        # append the remainder to the result list\n        result.append(str(remainder))\n        # update x to be the result of x divided by base (integer division)\n        x = x // base\n    \n    # return the reversed result list as a string\n    return ''.join(result[::-1])", "prompt_tokens": 131, "completion_tokens": 131, "duration": 6.2691075801849365}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    # Calculate the area of the triangle using the formula: area = 0.5 * base * height\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 86, "completion_tokens": 50, "duration": 3.2957234382629395}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n+1):\n            d = a + b + c + d\n            a, b, c = b, c, d\n        return d", "prompt_tokens": 211, "completion_tokens": 111, "duration": 4.0434911251068115}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    # Step 1: Sort the list\n    l.sort()\n    \n    # Step 2: Find the length of the list\n    n = len(l)\n    \n    # Step 3: Check if the length of the list is odd or even\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        # Step 4: If the length is even, calculate the average of middle two elements\n        return (l[n//2 - 1] + l[n//2]) / 2", "prompt_tokens": 115, "completion_tokens": 119, "duration": 3.9932215213775635}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    # Remove all spaces from the text\n    text = text.replace(\" \", \"\")\n    # Convert the text to lowercase\n    text = text.lower()\n    # Check if the text is equal to its reverse\n    return text == text[::-1]", "prompt_tokens": 111, "completion_tokens": 59, "duration": 5.483943223953247}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    # Calculate 2^n\n    result = 2 ** n\n    # Return the modulo of the result with p\n    return result % p", "prompt_tokens": 145, "completion_tokens": 47, "duration": 3.1659157276153564}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    # Loop through each character in the input string\n    # Calculate the decoded character by shifting it back by 5 in the alphabet\n    # Append the decoded character to a list\n    # Join the list of decoded characters into a string\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 130, "completion_tokens": 93, "duration": 3.826585531234741}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    # Create a list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    # Create an empty string to store the result\n    result = ''\n    \n    # Loop through each character in the input text\n    for char in text:\n        # Check if the character is not a vowel\n        if char not in vowels:\n            # Append the character to the result\n            result += char\n    \n    # Return the final result without vowels\n    return result", "prompt_tokens": 162, "completion_tokens": 131, "duration": 3.9158222675323486}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    # Iterate over each number in the list\n    for num in l:\n        # Check if the number is greater than or equal to the threshold\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 119, "completion_tokens": 60, "duration": 3.215710401535034}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    # return the sum of x and y\n    return x + y", "prompt_tokens": 93, "completion_tokens": 30, "duration": 2.833050489425659}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    # Check if the sorted characters in each word are the same\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 180, "completion_tokens": 42, "duration": 2.951558828353882}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Initialize the first two Fibonacci numbers\n        a, b = 0, 1\n        # Calculate the n-th Fibonacci number\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 92, "completion_tokens": 99, "duration": 3.9304921627044678}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a counter variable\n    count = 0\n    \n    # Iterate through each character in the brackets string\n    for char in brackets:\n        # Increment the counter for an opening bracket\n        if char == \"<\":\n            count += 1\n        # Decrement the counter for a closing bracket\n        elif char == \">\":\n            count -= 1\n            # If count becomes negative, return False as there is a closing bracket without an opening bracket\n            if count < 0:\n                return False\n    \n    # Return True if all opening brackets have corresponding closing brackets\n    return count == 0", "prompt_tokens": 132, "completion_tokens": 143, "duration": 4.467464923858643}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    # Check if the list is sorted in ascending order\n    if l == sorted(l):\n        return True\n    # Check if the list is sorted in descending order\n    elif l == sorted(l, reverse=True):\n        return True\n    else:\n        return False", "prompt_tokens": 127, "completion_tokens": 67, "duration": 5.385959148406982}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    # Find the common elements between the two lists\n    common_elements = set(l1) & set(l2)\n    \n    # Sort the common elements\n    sorted_common = sorted(common_elements)\n    \n    return sorted_common", "prompt_tokens": 154, "completion_tokens": 62, "duration": 3.7335128784179688}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Find the largest prime factor\n    i = 2\n    while i <= n:\n        if n % i == 0 and is_prime(n // i):\n            return n // i\n        i += 1", "prompt_tokens": 103, "completion_tokens": 125, "duration": 6.023650884628296}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    # Calculate the sum of numbers from 1 to n using the formula n*(n+1)/2\n    return n * (n + 1) // 2", "prompt_tokens": 134, "completion_tokens": 49, "duration": 49.95592141151428}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    # Initialize a counter variable to keep track of the number of open brackets\n    open_brackets = 0\n    \n    # Iterate through each character in the brackets string\n    for char in brackets:\n        # If the character is an opening bracket, increment the counter\n        if char == \"(\":\n            open_brackets += 1\n        # If the character is a closing bracket, decrement the counter\n        elif char == \")\":\n            open_brackets -= 1\n            # If there are more closing brackets than opening brackets, return False\n            if open_brackets < 0:\n                return False\n    \n    # If the counter is 0 at the end, return True, otherwise return False\n    return open_brackets == 0", "prompt_tokens": 129, "completion_tokens": 167, "duration": 4.972604990005493}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    # Initialize an empty list to store the derivative coefficients\n    result = []\n    \n    # Iterate through the coefficients except the constant term (first element)\n    for i in range(1, len(xs)):\n        # Calculate the derivative coefficient and append it to the result list\n        result.append(xs[i] * i)\n    \n    return result", "prompt_tokens": 148, "completion_tokens": 80, "duration": 3.9265143871307373}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for i in range(3, n+1):\n        a, b, c = b, c, a + b + c\n    return c", "prompt_tokens": 189, "completion_tokens": 89, "duration": 3.7320094108581543}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    # Initialize a count variable to keep track of the number of vowels\n    count = 0\n    # Define a set of vowels that we are looking for\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is a vowel\n        if char.lower() in vowels:\n            # Increment the count if it's a vowel\n            count += 1\n    # Check if the last character is 'y' and it's a vowel\n    if s[-1].lower() == 'y' and count > 0:\n        count += 1\n    # Return the total count of vowels\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Output: 2\nprint(vowels_count(\"ACEDY\"))  # Output: 3\nprint(vowels_count(\"hello\"))  # Output: 2\nprint(vowels_count(\"sky\"))    # Output: 1", "prompt_tokens": 166, "completion_tokens": 233, "duration": 7.935588598251343}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    # Convert the integer x to a string\n    x_str = str(x)\n    \n    # Calculate the effective shift by taking the modulo of shift and the length of x_str\n    effective_shift = shift % len(x_str)\n    \n    # Perform the circular shift by concatenating the last part of x_str with the first part\n    shifted = x_str[-effective_shift:] + x_str[:-effective_shift]\n    \n    # Return the shifted string\n    return shifted", "prompt_tokens": 122, "completion_tokens": 107, "duration": 4.381641149520874}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    # Initialize a variable to store the sum\n    total_sum = 0\n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII value of the uppercase letter to the total sum\n            total_sum += ord(char)\n    # Return the total sum\n    return total_sum", "prompt_tokens": 152, "completion_tokens": 94, "duration": 5.44527268409729}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s: str, n: int) -> int:\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Get the number of apples and oranges from the string\n    apples = int(words[0])\n    oranges = int(words[4])\n    \n    # Calculate the number of mango fruits in the basket\n    mango = n - apples - oranges\n    \n    return mango", "prompt_tokens": 250, "completion_tokens": 91, "duration": 3.7114484310150146}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    # Initialize variables to track the smallest even value and its index\n    smallest_value = float('inf')\n    smallest_index = float('inf')\n    \n    # Iterate over the array to find the smallest even value and its index\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_value:\n            smallest_value = arr[i]\n            smallest_index = i\n    \n    # Return the plucked node in a list [smallest_value, its index] or an empty list if no even values are found\n    return [] if smallest_value == float('inf') else [smallest_value, smallest_index]", "prompt_tokens": 352, "completion_tokens": 145, "duration": 5.206590414047241}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    # Create a dictionary to store frequency of each integer\n    freq_dict = {}\n    \n    # Iterate through the list and update the frequency dictionary\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Iterate through the frequency dictionary to find the desired integer\n    result = -1\n    for key, value in freq_dict.items():\n        if key > 0 and value >= key:\n            result = max(result, key)\n    \n    return result", "prompt_tokens": 205, "completion_tokens": 125, "duration": 5.465131998062134}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize an empty list to store the strange sorted list\n    result = []\n    \n    # Loop until the length of the list is greater than 1\n    while len(lst) > 1:\n        # Append the first element (minimum value) to the result list\n        result.append(lst.pop(0))\n        # Append the last element (maximum value) to the result list\n        result.append(lst.pop())\n    \n    # If there is still one element left in the list, append it to the result list\n    if lst:\n        result.append(lst[0])\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 147, "duration": 4.699689626693726}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # Check if the sides can form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 161, "completion_tokens": 132, "duration": 4.889577150344849}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q,w):\n    # Check if the list is palindromic\n    if q == q[::-1]:\n        # Check if the sum of the elements is less than or equal to the maximum weight\n        if sum(q) <= w:\n            return True\n    return False", "prompt_tokens": 270, "completion_tokens": 67, "duration": 3.48931884765625}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    # Calculate the length of the array\n    n = len(arr)\n    \n    # Initialize a variable to keep track of the number of changes needed\n    changes = 0\n    \n    # Iterate through the first half of the array\n    for i in range(n // 2):\n        # Check if the elements at the current position and its mirror position are different\n        if arr[i] != arr[n - i - 1]:\n            # Increment the number of changes needed by the absolute difference between the two elements\n            changes += abs(arr[i] - arr[n - i - 1])\n    \n    # Return the total number of changes needed\n    return changes", "prompt_tokens": 197, "completion_tokens": 146, "duration": 6.614064693450928}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    # Calculate total number of characters in lst1\n    total_chars_lst1 = sum([len(word) for word in lst1])\n    \n    # Calculate total number of characters in lst2\n    total_chars_lst2 = sum([len(word) for word in lst2])\n    \n    # Check which list has fewer total characters\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 233, "completion_tokens": 106, "duration": 3.6635799407958984}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Find all prime numbers less than 100\n    primes = [x for x in range(2, 100) if is_prime(x)]\n    \n    # Check all combinations of 3 prime numbers to see if their product is equal to a\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "prompt_tokens": 119, "completion_tokens": 189, "duration": 4.767509460449219}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    # Check if x is equal to n raised to the power of the integer value of x\n    return x == n**int(x**(1/n))", "prompt_tokens": 182, "completion_tokens": 44, "duration": 3.062786102294922}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    # Take the cube root of the absolute value of the input number\n    root = abs(a) ** (1/3)\n    \n    # Check if the cube root is an integer\n    return root.is_integer()", "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.086808681488037}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Create a list of prime hexadecimal digits\n    prime_hex = ['2', '3', '5', '7', 'B', 'D']\n    \n    # Initialize a counter for counting prime digits\n    count = 0\n    \n    # Iterate through each digit in the hexadecimal number\n    for digit in num:\n        # Check if the digit is a prime hexadecimal digit\n        if digit in prime_hex:\n            # Increment the counter if the digit is prime\n            count += 1\n    \n    # Return the count of prime digits\n    return count", "prompt_tokens": 339, "completion_tokens": 124, "duration": 4.624989032745361}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    # Convert the decimal number to binary\n    binary = bin(decimal)[2:]\n    \n    # Add 'db' at the beginning and end of the binary string\n    binary_with_db = 'db' + binary + 'db'\n    \n    return binary_with_db", "prompt_tokens": 179, "completion_tokens": 65, "duration": 5.286200046539307}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    # Check if the length of the string is at least 3\n    if len(s) < 3:\n        return False\n\n    # Check if every 3 consecutive letters are distinct\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n\n    return True", "prompt_tokens": 161, "completion_tokens": 107, "duration": 3.737058639526367}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    # create an empty list to store the letter grades\n    letter_grades = []\n    \n    # iterate over each GPA in the given list\n    for gpa in grades:\n        # determine the letter grade based on the GPA and append it to the list\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n    \n    return letter_grades", "prompt_tokens": 310, "completion_tokens": 296, "duration": 8.129133462905884}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    # Calculate the length of the string\n    length = len(string)\n    \n    # Check if the length is less than 2\n    if length < 2:\n        return False\n    \n    # Check if the length is a prime number\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    \n    return True", "prompt_tokens": 121, "completion_tokens": 96, "duration": 3.499069929122925}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    # Initialize count\n    count = 0\n    \n    # Loop through all n-digit positive integers\n    for i in range(10**(n-1), 10**n):\n        # Check if the number starts or ends with 1\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    \n    return count", "prompt_tokens": 84, "completion_tokens": 92, "duration": 5.849502086639404}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Convert the integer N to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n    \n    # Calculate the sum of the digits in the binary representation\n    digit_sum = sum(int(digit) for digit in binary)\n    \n    # Convert the digit sum to binary and return as a string\n    return bin(digit_sum)[2:]", "prompt_tokens": 173, "completion_tokens": 85, "duration": 5.446673631668091}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    # Filter even elements at odd indices\n    odd_indices = [lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0]\n    # Sum the filtered elements\n    result = sum(odd_indices)\n    return result", "prompt_tokens": 95, "completion_tokens": 63, "duration": 5.08135461807251}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    # Split the input string into a list of words\n    words = s.split()\n    \n    # Create a list to store the ordered words\n    ordered_words = []\n    \n    # Iterate over each word in the list of words\n    for word in words:\n        # Sort the characters of the word based on ascii value and join them back to form a new word\n        ordered_word = ''.join(sorted(word))\n        \n        # Append the ordered word to the list of ordered words\n        ordered_words.append(ordered_word)\n    \n    # Join the ordered words back to form the final ordered string\n    return ' '.join(ordered_words)", "prompt_tokens": 170, "completion_tokens": 140, "duration": 3.2064459323883057}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    # Create an empty list to store the coordinates\n    coordinates = []\n    \n    # Iterate through each row in the list\n    for row_index, row in enumerate(lst):\n        # Check if x is in the current row\n        if x in row:\n            # Iterate through each column in the row\n            for col_index, val in enumerate(row):\n                # Check if the value is equal to x\n                if val == x:\n                    # Append the coordinate as a tuple to the list\n                    coordinates.append((row_index, col_index))\n    \n    # Sort the coordinates by rows in ascending order\n    coordinates.sort(key=lambda x: x[0])\n    \n    # Sort the coordinates of the row by columns in descending order\n    coordinates.sort(key=lambda x: x[1], reverse=True)\n    \n    return coordinates", "prompt_tokens": 299, "completion_tokens": 180, "duration": 3.207838296890259}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    # Calculate the sum of the first and last elements of the array\n    sum_first_last = array[0] + array[-1]\n    \n    # Check if the sum is odd\n    if sum_first_last % 2 != 0:\n        return sorted(array)  # Sort in ascending order\n    else:\n        return sorted(array, reverse=True)  # Sort in descending order", "prompt_tokens": 243, "completion_tokens": 90, "duration": 2.0487558841705322}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    # Create a variable to store the encrypted string\n    encrypted = \"\"\n    \n    # Define the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    # Loop through each character in the input string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Find the index of the character in the alphabet\n            index = alphabet.index(char)\n            # Rotate the character by shifting down by two multiplied to two places\n            new_index = (index + 2 * 2) % 26\n            # Add the encrypted character to the result string\n            encrypted += alphabet[new_index]\n        else:\n            # If the character is not a letter, keep it unchanged\n            encrypted += char\n    \n    # Return the final encrypted string\n    return encrypted", "prompt_tokens": 150, "completion_tokens": 173, "duration": 2.9702725410461426}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    # Remove duplicates from the list\n    unique_lst = list(set(lst))\n    # Return the second smallest element if it exists, otherwise return None\n    if len(unique_lst) > 1:\n        return unique_lst[1]\n    else:\n        return None", "prompt_tokens": 164, "completion_tokens": 78, "duration": 2.15202260017395}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Split the string into sentences based on delimiters '.' '?' '!'\n    sentences = S.split(\".\")\n    sentences = [sentence.strip() for sentence in sentences]\n    sentences = ' '.join(sentences).split(\"?\")\n    sentences = [sentence.strip() for sentence in sentences]\n    sentences = ' '.join(sentences).split(\"!\")\n    sentences = [sentence.strip() for sentence in sentences]\n    \n    # Count the number of sentences that start with \"I\"\n    count = sum(1 for sentence in sentences if sentence.startswith(\"I\"))\n    \n    return count", "prompt_tokens": 147, "completion_tokens": 127, "duration": 2.8232545852661133}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(num, int) for num in [x, y, z]):\n        # Check if one of the numbers is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 175, "completion_tokens": 96, "duration": 1.973647117614746}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    # Define a dictionary to store vowel replacements\n    replacements = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    # Initialize an empty string to store the encoded message\n    encoded_message = ''\n    \n    # Iterate over each character in the message\n    for char in message:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Swap the case of the letter\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n            \n            # Replace vowels with their respective replacements, if it's a vowel\n            if char in replacements:\n                char = replacements[char]\n        \n        # Append the modified character to the encoded message\n        encoded_message += char\n    \n    # Return the fully encoded message\n    return encoded_message", "prompt_tokens": 149, "completion_tokens": 221, "duration": 3.7247042655944824}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Function to calculate the sum of digits of a number\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n    \n    # Filter prime numbers from the list\n    primes = [num for num in lst if is_prime(num)]\n    \n    # Find the largest prime number\n    largest_prime = max(primes)\n    \n    # Calculate the sum of digits of the largest prime number\n    return sum_of_digits(largest_prime)", "prompt_tokens": 326, "completion_tokens": 170, "duration": 3.5106873512268066}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    keys = list(dict.keys())\n    \n    is_lower = all(key.islower() for key in keys)\n    is_upper = all(key.isupper() for key in keys)\n    \n    return is_lower or is_upper", "prompt_tokens": 209, "completion_tokens": 68, "duration": 1.8586595058441162}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Create a list to store prime numbers less than n\n    primes = []\n    \n    # Iterate through numbers from 2 to n-1 to check for prime numbers\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes", "prompt_tokens": 185, "completion_tokens": 138, "duration": 2.5286078453063965}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a: int, b: int) -> int:\n    # Get the unit digits of both numbers\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    \n    # Calculate the product of the unit digits\n    result = unit_a * unit_b\n    \n    return result", "prompt_tokens": 138, "completion_tokens": 72, "duration": 1.6014268398284912}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    # Initialize a counter variable to count the number of uppercase vowels at even indices\n    count = 0\n    \n    # Define a set of uppercase vowels\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    # Iterate over the characters at even indices of the string\n    for i in range(0, len(s), 2):\n        # Check if the character is an uppercase vowel\n        if s[i].isupper() and s[i] in uppercase_vowels:\n            count += 1\n    \n    return count", "prompt_tokens": 112, "completion_tokens": 129, "duration": 2.482663154602051}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    # Convert the value to a float number\n    value = float(value)\n\n    # Check if the decimal part is closer to the lower or upper integer\n    if value % 1 < 0.5:\n        return int(value)\n    else:\n        return int(value) + 1 if value > 0 else int(value) - 1", "prompt_tokens": 196, "completion_tokens": 82, "duration": 2.014744997024536}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    # Initialize an empty list to store the number of stones in each level\n    stones_in_each_level = []\n    \n    # Start with the first level having n stones\n    stones_in_level = n\n    stones_in_each_level.append(stones_in_level)\n    \n    # Calculate the number of stones in each subsequent level based on the rule\n    for i in range(n - 1):\n        if stones_in_level % 2 == 0:\n            stones_in_level += 1\n        else:\n            stones_in_level += 2\n        stones_in_each_level.append(stones_in_level)\n    \n    return stones_in_each_level", "prompt_tokens": 172, "completion_tokens": 141, "duration": 2.620103359222412}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    # Split the string into words using commas and spaces as delimiters\n    words = s.replace(\",\", \" \").split()\n    \n    return words", "prompt_tokens": 156, "completion_tokens": 39, "duration": 1.2510225772857666}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x: int, y: int) -> int:\n    # Iterate from y down to x\n    for i in range(y, x - 1, -1):\n        # Check if the number is even\n        if i % 2 == 0:\n            return i\n    # If no even number found, return -1\n    return -1", "prompt_tokens": 134, "completion_tokens": 82, "duration": 1.8922123908996582}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    avg_binary = bin(avg)\n    \n    return avg_binary", "prompt_tokens": 180, "completion_tokens": 47, "duration": 1.7755560874938965}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x: List[int]) -> List[int]:\n    # Define a function to check if a number has any even digit\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n    \n    # Filter out numbers with even digits from the input list\n    filtered = [num for num in x if not has_even_digit(num)]\n    \n    # Sort the filtered list in increasing order\n    sorted_filtered = sorted(filtered)\n    \n    return sorted_filtered", "prompt_tokens": 142, "completion_tokens": 111, "duration": 2.347684621810913}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # Filter out numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    # Map each number to its corresponding word\n    result = [ \n        \"One\" if num == 1 else \n        \"Two\" if num == 2 else \n        \"Three\" if num == 3 else \n        \"Four\" if num == 4 else \n        \"Five\" if num == 5 else \n        \"Six\" if num == 6 else \n        \"Seven\" if num == 7 else \n        \"Eight\" if num == 8 else \n        \"Nine\" if num == 9 else \n        None \n        for num in reversed_arr \n    ]\n    return result", "prompt_tokens": 316, "completion_tokens": 201, "duration": 5.291730165481567}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through numbers from 1 to n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            # Calculate factorial of i if i is even\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            # Calculate sum of numbers from 1 to i if i is odd\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 133, "duration": 2.671156644821167}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    # Initialize counters for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n\n    # Iterate through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(i) == str(i)[::-1]:\n            # Update the counters based on whether the palindrome is even or odd\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    # Return a tuple with the counts of even and odd palindromes\n    return even_count, odd_count", "prompt_tokens": 251, "completion_tokens": 153, "duration": 5.242480278015137}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    # Initialize a counter variable to keep track of numbers with sum of digits > 0\n    count = 0\n    # Iterate through each number in the array\n    for num in arr:\n        # Convert the number to a string to iterate through its digits\n        for digit in str(abs(num)):\n            # Add the digit to a running sum\n            count += int(digit)\n        # Check if the sum of digits is greater than 0\n        if count > 0:\n            # Increment the counter if the sum of digits is greater than 0\n            count += 1\n    return count", "prompt_tokens": 164, "completion_tokens": 136, "duration": 2.8405559062957764}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    # Check if array is empty\n    if not arr:\n        return True\n    \n    # Find the index of the smallest element in the array\n    min_index = arr.index(min(arr))\n    \n    # Check if the array is already sorted in non-decreasing order\n    if arr == sorted(arr):\n        return True\n    \n    # Calculate the number of right shifts needed to move the smallest element to the first position\n    shifts_needed = len(arr) - min_index\n    \n    # Create a new array after performing the right shifts\n    new_arr = arr[-shifts_needed:] + arr[:-shifts_needed]\n    \n    # Check if the new array is sorted in non-decreasing order\n    if new_arr == sorted(new_arr):\n        return True\n    else:\n        return False", "prompt_tokens": 339, "completion_tokens": 171, "duration": 3.2038159370422363}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Check if sum of all odd numbers in lst1 is greater than or equal to the sum of all odd numbers in lst2\n    if sum(x % 2 != 0 for x in lst1) >= sum(y % 2 != 0 for y in lst2):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 237, "completion_tokens": 84, "duration": 2.0658533573150635}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    # Split the string into a list of lowercase letters\n    letters = test.split()\n    \n    # Create a dictionary to store the count of each letter\n    counts = {}\n    \n    # Loop through the list of letters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in counts:\n            counts[letter] += 1\n        # If the letter is not in the dictionary, add it with a count of 1\n        else:\n            counts[letter] = 1\n    \n    # Find the maximum count\n    max_count = max(counts.values())\n    \n    # Filter the dictionary to keep only letters with the maximum count\n    result = {key: value for key, value in counts.items() if value == max_count}\n    \n    return result", "prompt_tokens": 191, "completion_tokens": 179, "duration": 5.660296201705933}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    # Remove characters from s that are in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if result is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)", "prompt_tokens": 202, "completion_tokens": 77, "duration": 1.89605712890625}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{s}ng {s} of the {s}nput.\")\n    return result", "prompt_tokens": 213, "completion_tokens": 74, "duration": 1.6543619632720947}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    # Initialize variables to store current sum and minimum sum\n    current_sum = 0\n    min_sum = float('inf')\n\n    # Loop through the array\n    for num in nums:\n        # Update current sum to include the current element\n        current_sum += num\n        # Update minimum sum if current sum is less\n        min_sum = min(min_sum, current_sum)\n        # Reset current sum to 0 if it becomes negative\n        current_sum = max(current_sum, 0)\n\n    return min_sum", "prompt_tokens": 128, "completion_tokens": 119, "duration": 2.5750763416290283}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    # Initialize a variable to count the number of times buckets need to be lowered\n    count = 0\n    \n    # Iterate over each well\n    for well in grid:\n        # Calculate the total water in the well\n        total_water = sum(well)\n        \n        # Calculate the number of times the bucket needs to be lowered for the current well\n        count += math.ceil(total_water / capacity)\n    \n    # Return the total count\n    return count", "prompt_tokens": 363, "completion_tokens": 110, "duration": 2.318007469177246}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 210, "completion_tokens": 28, "duration": 1.2510101795196533}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    # Define a list to store the words with n consonants\n    result = []\n    \n    # Define a list of consonants\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Iterate over each word in the list of words\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for letter in word if letter.lower() in consonants)\n        \n        # If the number of consonants in the word matches n, add it to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    return result", "prompt_tokens": 221, "completion_tokens": 162, "duration": 3.650981903076172}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    word = word[::-1]  # Reverse the word to start checking from the right side\n    \n    for char in word:\n        if char in vowels:\n            for next_char in word[word.index(char)+1:]:\n                if next_char in consonants:\n                    return char\n            break\n    \n    return \"\"", "prompt_tokens": 189, "completion_tokens": 111, "duration": 2.3298585414886475}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    # Check if the total count of open and close parentheses are even\n    if lst[0].count('(') + lst[1].count('(') == lst[0].count(')') + lst[1].count(')'):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 208, "completion_tokens": 74, "duration": 1.9358079433441162}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements\n    return arr[:k]", "prompt_tokens": 257, "completion_tokens": 39, "duration": 1.2691576480865479}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    # filter odd elements at even positions\n    odd_elements = [lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0]\n    \n    # return the sum of the filtered odd elements\n    return sum(odd_elements)", "prompt_tokens": 137, "completion_tokens": 68, "duration": 1.7887046337127686}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    # Initialize a variable to store the sum\n    total = 0\n    # Iterate through the first k elements of the array\n    for num in arr[:k]:\n        # Check if the number has at most two digits\n        if 10 <= num < 100:\n            # Add the number to the total sum\n            total += num\n    return total", "prompt_tokens": 168, "completion_tokens": 88, "duration": 2.0379090309143066}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    # Initialize an empty list to store odd numbers in collatz sequence\n    odd_collatz = []\n    \n    # Continue the loop until n becomes 1\n    while n != 1:\n        # If the current number is odd, add it to the list\n        if n % 2 != 0:\n            odd_collatz.append(n)\n        \n        # Apply Collatz sequence rules\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    \n    # Add 1 to the list since 1 is the final number in Collatz sequence\n    odd_collatz.append(1)\n    \n    # Return the sorted list of odd numbers in collatz sequence\n    return sorted(odd_collatz)", "prompt_tokens": 271, "completion_tokens": 175, "duration": 6.113344430923462}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is not empty\n    if date == \"\":\n        return False\n    \n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n    \n    # Convert month, day, and year to integers\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid (between 1 and 12)\n    if month < 1 or month > 12:\n        return False\n    \n    # Check the number of days based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    \n    # Check if the date is in the format: mm-dd-yyyy\n    if len(str(year)) != 4:\n        return False\n    \n    return True", "prompt_tokens": 303, "completion_tokens": 266, "duration": 5.430527687072754}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    # check if the text contains whitespace\n    if ' ' in txt:\n        # split the text on whitespace\n        return txt.split()\n    # check if the text contains commas\n    elif ',' in txt:\n        # split the text on commas\n        return txt.split(',')\n    else:\n        # return the count of lower-case letters with odd order in the alphabet\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 180, "completion_tokens": 110, "duration": 2.39534592628479}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    # Check if the list is equal to a sorted version of the list with duplicates removed\n    return lst == sorted(list(set(lst)))\n\n# Test cases\nprint(is_sorted([5])) # True\nprint(is_sorted([1, 2, 3, 4, 5])) # True\nprint(is_sorted([1, 3, 2, 4, 5])) # False\nprint(is_sorted([1, 2, 3, 4, 5, 6])) # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7])) # True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7])) # False\nprint(is_sorted([1, 2, 2, 3, 3, 4])) # True\nprint(is_sorted([1, 2, 2, 2, 3, 4])) # False", "prompt_tokens": 289, "completion_tokens": 218, "duration": 3.9948976039886475}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find the intersection interval\n    intersect_start = max(start1, start2)\n    intersect_end = min(end1, end2)\n    \n    # Check if the intersection interval is valid\n    if intersect_start <= intersect_end:\n        # Calculate the length of the intersection interval\n        length = intersect_end - intersect_start + 1\n        \n        # Check if the length is a prime number\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"", "prompt_tokens": 294, "completion_tokens": 193, "duration": 3.381561279296875}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    # Check if the array is empty\n    if not arr:\n        return None\n\n    # Initialize variables for total sum and product of signs\n    total_sum = 0\n    sign_product = 1\n\n    # Iterate through the array\n    for num in arr:\n        # Update the total sum by adding the absolute value of the number\n        total_sum += abs(num)\n        # Update the sign product\n        sign_product *= (1 if num > 0 else (-1 if num < 0 else 0))\n\n    # Return the sum of magnitudes multiplied by the product of signs\n    return total_sum * sign_product", "prompt_tokens": 162, "completion_tokens": 142, "duration": 2.5328967571258545}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    # Step 1: Flatten the grid to a 1D list\n    flat_grid = [val for row in grid for val in row]\n\n    # Step 2: Find the minimum value in the grid\n    min_val = min(flat_grid)\n\n    # Step 3: Initialize the result list with the minimum value\n    result = [min_val]\n\n    # Step 4: Repeat the following until the result list has k elements\n    while len(result) < k:\n        # Find the index of the current minimum value in the grid\n        idx = flat_grid.index(min_val)\n\n        # Update the minimum value to the next smallest value in the grid\n        min_val = min(val for val in flat_grid if val > min_val)\n\n        # Append the next smallest value to the result list\n        result.append(min_val)\n\n    return result", "prompt_tokens": 436, "completion_tokens": 189, "duration": 5.059827089309692}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # Check if n is 0 or 1\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n\n    # Initialize the sequence with the first two numbers\n    tribonacci = [1, 3]\n\n    # Loop to calculate the rest of the tribonacci sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n\n    return tribonacci", "prompt_tokens": 275, "completion_tokens": 152, "duration": 5.905879974365234}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    # Initialize product as 1\n    product = 1\n    \n    # Iterate through each digit in the integer n\n    for digit in str(n):\n        # Convert the digit back to integer\n        digit = int(digit)\n        # Check if the digit is odd\n        if digit % 2 != 0:\n            # Multiply the digit to the product\n            product *= digit\n    \n    # Return the final product\n    return product", "prompt_tokens": 111, "completion_tokens": 100, "duration": 2.188276529312134}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    # Create a variable to store the opening brackets\n    openings = []\n\n    # Iterate through each bracket in the string\n    for bracket in string:\n        # If the bracket is an opening bracket, add it to the openings list\n        if bracket == \"[\":\n            openings.append(bracket)\n        # If the bracket is a closing bracket\n        else:\n            # If there are opening brackets in the openings list, return True\n            if openings:\n                return True\n\n    # If the function has reached this point, it means there were no nested brackets\n    return False", "prompt_tokens": 173, "completion_tokens": 127, "duration": 5.578478813171387}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    # Round each element in the list to the upper integer\n    lst = [int(x) if x.is_integer() else int(x) + 1 for x in lst]\n    \n    # Calculate the sum of squared numbers in the list\n    total = sum(x**2 for x in lst)\n    \n    return total", "prompt_tokens": 197, "completion_tokens": 77, "duration": 3.7700858116149902}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty\n    if len(txt) == 0:\n        return False\n    \n    # Check if the last character is an alphabetical character\n    if txt[-1].isalpha():\n        # Check if the last character is not a part of a word\n        if txt[-2] == ' ' or txt[-2].isalpha() == False:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 177, "completion_tokens": 110, "duration": 3.8674848079681396}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    # Initialize the result variable to -1\n    result = -1\n    \n    # Loop through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than or equal to the previous element\n        if arr[i] < arr[i - 1]:\n            # Update the result to the current index\n            result = i\n    \n    # Return the result\n    return result", "prompt_tokens": 143, "completion_tokens": 104, "duration": 5.017559766769409}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    # Extract negative and positive integers from the list\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    # Find the largest negative integer and smallest positive integer\n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 178, "completion_tokens": 113, "duration": 4.689152240753174}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    # Check if both variables are equal\n    if a == b:\n        return None\n    # Check if a is a string and contains \".\" or \",\"\n    if isinstance(a, str) and ('.' in a or ',' in a):\n        a = a.replace(',', '.')  # Replace ',' with '.'\n        a = float(a)  # Convert to float\n    # Check if b is a string and contains \".\" or \",\"\n    if isinstance(b, str) and ('.' in b or ',' in b):\n        b = b.replace(',', '.')  # Replace ',' with '.'\n        b = float(b)  # Convert to float\n    # Compare the variables and return the larger one\n    return max(a, b, key=lambda x: (type(x) is str, x))\n\n# Test cases\nprint(compare_one(1, 2.5))\nprint(compare_one(1, \"2,3\"))\nprint(compare_one(\"5,1\", \"6\"))\nprint(compare_one(\"1\", 1))", "prompt_tokens": 181, "completion_tokens": 219, "duration": 7.783154487609863}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n: int) -> bool:\n    # Iterate through all possible even numbers\n    for i in range(2, n//2+1, 2):\n        for j in range(2, n//2+1, 2):\n            for k in range(2, n//2+1, 2):\n                for l in range(2, n//2+1, 2):\n                    # Check if the sum of these even numbers equals n\n                    if i + j + k + l == n:\n                        return True\n    return False", "prompt_tokens": 117, "completion_tokens": 127, "duration": 4.921403169631958}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1): # Iterate through numbers from 1 to n\n        factorial = 1\n        for j in range(1, i+1): # Calculate factorial of current number\n            factorial *= j\n        result *= factorial # Multiply current factorial to the result\n    return result", "prompt_tokens": 135, "completion_tokens": 84, "duration": 3.4292690753936768}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace more than 2 consecutive spaces with a single hyphen\n    while \"--\" in text:\n        text = text.replace(\"--\", \"-\")\n    \n    return text", "prompt_tokens": 146, "completion_tokens": 63, "duration": 3.334623336791992}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check for more than three digits\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    \n    # Check for exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Check the substring before the dot\n    name_before_dot = file_name.split('.')[0]\n    if not name_before_dot or not name_before_dot[0].isalpha():\n        return 'No'\n    \n    # Check the substring after the dot\n    name_after_dot = file_name.split('.')[1]\n    if name_after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 254, "completion_tokens": 158, "duration": 5.558286666870117}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    # Initialize a variable to store the sum\n    total = 0\n    \n    # Iterate over the list with index\n    for i, num in enumerate(lst):\n        # Check if index is a multiple of 3\n        if i % 3 == 0:\n            total += num ** 2\n        # Check if index is a multiple of 4 and not a multiple of 3\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n    \n    return total", "prompt_tokens": 209, "completion_tokens": 123, "duration": 4.269087553024292}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter the words with prime lengths\n    prime_words = [word for word in words if is_prime(len(word))]\n\n    # Join the prime words into a string\n    result = ' '.join(prime_words)\n\n    return result", "prompt_tokens": 187, "completion_tokens": 138, "duration": 4.523510456085205}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    # Extract numerator and denominator from fractions\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    # Simplify the expression x * n\n    result_num = x_num * n_num\n    result_denom = x_denom * n_denom\n\n    # Check if the result is a whole number\n    return result_num % result_denom == 0", "prompt_tokens": 195, "completion_tokens": 105, "duration": 5.087301731109619}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    # Define a function to calculate the sum of digits of a number\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # Sort the list based on the sum of digits and then by index\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 155, "completion_tokens": 81, "duration": 3.743975877761841}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    # Initialize a counter variable to keep track of valid numbers\n    count = 0\n    \n    # Iterate through each number in the input list\n    for num in nums:\n        # Check if the number is greater than 10 and both first and last digits are odd\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    \n    return count", "prompt_tokens": 159, "completion_tokens": 125, "duration": 4.130298137664795}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count", "prompt_tokens": 205, "completion_tokens": 99, "duration": 4.321929216384888}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index < end_index:\n        return tuple(sorted(planets[start_index+1:end_index], key=lambda x: planets.index(x)))\n    else:\n        return tuple(sorted(planets[end_index+1:start_index], key=lambda x: planets.index(x)))", "prompt_tokens": 251, "completion_tokens": 141, "duration": 4.499024152755737}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list by length and then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list", "prompt_tokens": 227, "completion_tokens": 78, "duration": 3.62141752243042}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    # Check if n is less than 2, return y\n    if n < 2:\n        return y\n    \n    # Check if n is prime\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    \n    # If n is prime, return x. Otherwise, return y\n    return x", "prompt_tokens": 126, "completion_tokens": 99, "duration": 3.8426408767700195}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    # Initialize a variable to store the sum of squares of odd numbers\n    result = 0\n    \n    # Loop through each number in the list\n    for num in lst:\n        # Check if the number is positive and an integer\n        if num > 0 and isinstance(num, int):\n            # Check if the number is odd\n            if num % 2 != 0:\n                # Add the square of the number to the result\n                result += num ** 2\n    \n    # Return the result\n    return result", "prompt_tokens": 177, "completion_tokens": 120, "duration": 4.75829005241394}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    # Create an empty list to store the differences between guesses and scores\n    result = []\n    \n    # Loop through each element in the game array\n    for i in range(len(game)):\n        # Calculate the absolute difference between the guess and the score\n        diff = abs(game[i] - guess[i])\n        \n        # Append the difference to the result list\n        result.append(diff)\n    \n    return result", "prompt_tokens": 270, "completion_tokens": 94, "duration": 3.7723748683929443}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    # Define a variable to store the strongest extension\n    strongest_extension = None\n    \n    # Define a variable to store the maximum strength found so far\n    max_strength = float('-inf')\n    \n    # Iterate over each extension in the list\n    for extension in extensions:\n        # Calculate the strength of the current extension\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        \n        # If the strength of the current extension is greater than the maximum strength found so far\n        if strength > max_strength:\n            # Update the maximum strength and the strongest extension\n            max_strength = strength\n            strongest_extension = extension\n            \n    # Return the result in the specified format\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 317, "completion_tokens": 179, "duration": 5.439612627029419}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 169, "completion_tokens": 46, "duration": 1.2658116817474365}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    # Convert the integer to a string\n    num_str = str(abs(num))\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate through each digit in the string\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 105, "completion_tokens": 104, "duration": 3.649380683898926}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    # Define a mapping of roman numeral letters to their integer values\n    roman_map = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', \n                 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    \n    # Define a list of integer values in descending order\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    \n    # Initialize an empty string to store the roman numeral representation\n    roman_numeral = \"\"\n    \n    # Iterate over the values in descending order\n    for val in values:\n        # Calculate the number of times the current value fits in the input number\n        count = number // val\n        # Append the corresponding roman numeral letter to the result string\n        roman_numeral += roman_map[val] * count\n        # Update the input number by subtracting the value times the count\n        number -= val * count\n    \n    # Return the lowercase roman numeral representation\n    return roman_numeral.lower()", "prompt_tokens": 141, "completion_tokens": 290, "duration": 6.8472161293029785}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    # Check if a^2 + b^2 = c^2\n    if a**2 + b**2 == c**2:\n        return True\n    # Check if a^2 + c^2 = b^2\n    elif a**2 + c**2 == b**2:\n        return True\n    # Check if b^2 + c^2 = a^2\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "prompt_tokens": 148, "completion_tokens": 123, "duration": 4.0049238204956055}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # Create a dictionary to store unique characters count for each word\n    unique_count = {word: len(set(word)) for word in words}\n    \n    # Find the maximum number of unique characters\n    max_count = max(unique_count.values())\n    \n    # Filter out words with maximum unique characters\n    max_words = [word for word, count in unique_count.items() if count == max_count]\n    \n    # Find the word that comes first in lexicographical order\n    result = min(max_words)\n    \n    return result", "prompt_tokens": 160, "completion_tokens": 118, "duration": 4.789525032043457}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    # Calculate the total number of eaten carrots after meals\n    total_carrots = number + need\n    # Calculate the number of carrots left after meals\n    left_carrots = max(0, remaining - need)\n    \n    return [total_carrots, left_carrots]", "prompt_tokens": 317, "completion_tokens": 69, "duration": 3.4982950687408447}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    res = operand[0]  # Initialize result with the first operand\n    for i in range(len(operator)):  # Iterate over the length of the operator list\n        if operator[i] == '+':\n            res += operand[i+1]  # Perform addition\n        elif operator[i] == '-':\n            res -= operand[i+1]  # Perform subtraction\n        elif operator[i] == '*':\n            res *= operand[i+1]  # Perform multiplication\n        elif operator[i] == '//':\n            res //= operand[i+1]  # Perform floor division\n        elif operator[i] == '**':\n            res **= operand[i+1]  # Perform exponentiation\n    return res", "prompt_tokens": 247, "completion_tokens": 159, "duration": 2.971583843231201}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    # Check if the string contains any letters\n    if not any(char.isalpha() for char in s):\n        return s[::-1]  # If no letters, reverse the string\n    else:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n        # Reverse the case of letters in the string", "prompt_tokens": 147, "completion_tokens": 83, "duration": 3.5968005657196045}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 116, "completion_tokens": 36, "duration": 2.8204123973846436}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    # Create a list to store the result\n    result = []\n    \n    # Iterate through each number from a to b\n    for num in range(a, b+1):\n        # Check if the number is even\n        if num % 2 == 0:\n            # Append the even number to the result list\n            result.append(num)\n    \n    # Return the result list\n    return result", "prompt_tokens": 144, "completion_tokens": 96, "duration": 3.800968647003174}
