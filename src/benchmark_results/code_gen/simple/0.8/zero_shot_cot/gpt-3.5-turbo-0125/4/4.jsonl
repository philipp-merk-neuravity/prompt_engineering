{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list of numbers in ascending order\n    numbers.sort()\n    \n    # Iterate over the list of numbers\n    for i in range(len(numbers)-1):\n        # Check if the absolute difference between consecutive numbers is less than the threshold\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 163, "completion_tokens": 94, "duration": 2.293389320373535}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store separated groups\n    result = []\n    \n    # Initialize a variable to store the current group\n    current_group = ''\n    \n    # Iterate over each character in the input string\n    for char in paren_string:\n        # Append the character to the current group\n        current_group += char\n        # If the current group is balanced, add it to the result list and reset current_group\n        if current_group.count('(') == current_group.count(')'):\n            result.append(current_group)\n            current_group = ''\n    \n    return result", "prompt_tokens": 154, "completion_tokens": 155, "duration": 3.0321505069732666}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    # Find the integer part of the number\n    integer_part = int(number)\n    \n    # Calculate the decimal part by subtracting the integer part from the original number\n    decimal_part = number - integer_part\n    \n    return decimal_part", "prompt_tokens": 125, "completion_tokens": 63, "duration": 5.4475085735321045}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    # Initialize a variable to keep track of the current balance\n    balance = 0\n    \n    # Iterate through each operation in the list\n    for op in operations:\n        # Update the balance based on the operation\n        balance += op\n        \n        # Check if the balance is below zero\n        if balance < 0:\n            return True\n    \n    return False", "prompt_tokens": 158, "completion_tokens": 91, "duration": 2.478144407272339}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences between each element and the mean\n    abs_diff = [abs(num - mean) for num in numbers]\n    \n    # Calculate the mean absolute deviation\n    mad = sum(abs_diff) / len(abs_diff)\n    \n    return mad", "prompt_tokens": 156, "completion_tokens": 92, "duration": 2.0677318572998047}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []  # create an empty list to store the result\n    for num in numbers[:-1]:  # iterate through each number in the input list except the last one\n        result.extend([num, delimeter])  # add the number and delimeter to the result list\n    if numbers:  # check if the input list is not empty\n        result.append(numbers[-1])  # add the last number to the result list\n    return result  # return the result list\n\n# Test the function with sample inputs\nprint(intersperse([], 4))\nprint(intersperse([1, 2, 3], 4))", "prompt_tokens": 455, "completion_tokens": 294, "duration": 6.213979244232178}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string by space to get individual groups\n    groups = paren_string.split()\n    \n    # Initialize an empty list to store the deepest level of nesting for each group\n    result = []\n    \n    # Iterate through each group\n    for group in groups:\n        # Initialize variables to keep track of current depth and maximum depth\n        depth = 0\n        max_depth = 0\n        \n        # Iterate through each character in the group\n        for char in group:\n            if char == '(':\n                # Increase the depth when encountering an opening parenthesis\n                depth += 1\n            elif char == ')':\n                # Update the maximum depth if the current depth is greater\n                max_depth = max(max_depth, depth)\n                # Decrease the depth when encountering a closing parenthesis\n                depth -= 1\n        \n        # Append the maximum depth of the group to the result list\n        result.append(max_depth)\n    \n    # Return the list of maximum depths for each group\n    return result", "prompt_tokens": 151, "completion_tokens": 225, "duration": 3.9101810455322266}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Create an empty list to store strings that contain the given substring\n    filtered_strings = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the substring is present in the current string\n        if substring in string:\n            # If the substring is present, add the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the filtered list of strings\n    return filtered_strings", "prompt_tokens": 132, "completion_tokens": 116, "duration": 2.8674275875091553}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # If the list is empty, return (0, 1)\n    if not numbers:\n        return (0, 1)\n    \n    # Initialize variables for sum and product\n    total_sum = 0\n    total_product = 1\n    \n    # Calculate sum and product of the numbers in the list\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    return (total_sum, total_product)", "prompt_tokens": 149, "completion_tokens": 113, "duration": 2.8417251110076904}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store the rolling maximum elements\n    rolling_max_list = []\n    # Initialize a deque to store the indexes of elements in the list\n    deque_index = deque()\n\n    # Iterate through the elements in the list\n    for i, num in enumerate(numbers):\n        # Remove elements from the deque that are out of the rolling window\n        while deque_index and deque_index[0] < i - 1:\n            deque_index.popleft()\n        \n        # Remove elements from the deque that are smaller than the current element\n        while deque_index and numbers[deque_index[-1]] < num:\n            deque_index.pop()\n        \n        # Append the current index to the deque\n        deque_index.append(i)\n        \n        # Append the rolling maximum to the result list\n        rolling_max_list.append(numbers[deque_index[0]])\n    \n    return rolling_max_list", "prompt_tokens": 139, "completion_tokens": 196, "duration": 3.5897698402404785}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    \n    # Function to check if a string is a palindrome\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    # Find the longest postfix of the string that is a palindrome\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            break\n    \n    # Append the reverse of the prefix before the palindromic suffix\n    return string + string[:i][::-1]", "prompt_tokens": 182, "completion_tokens": 124, "duration": 2.5241827964782715}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    # Convert the strings to integers\n    int_a = int(a, 2)\n    int_b = int(b, 2)\n    \n    # Perform XOR operation\n    result = int_a ^ int_b\n    \n    # Convert the result back to binary string\n    xor_str = bin(result)[2:]\n    \n    return xor_str", "prompt_tokens": 115, "completion_tokens": 87, "duration": 2.0500121116638184}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:  # Check if the input list is empty\n        return None\n\n    max_length = max(len(s) for s in strings)  # Find the maximum length among all strings\n    longest_strings = [s for s in strings if len(s) == max_length]  # Find all strings with the maximum length\n\n    return longest_strings[0]  # Return the first longest string", "prompt_tokens": 141, "completion_tokens": 100, "duration": 2.0998477935791016}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Find the minimum of a and b\n    min_num = min(a, b)\n    \n    # Check for greatest common divisor starting from min_num down to 1\n    for i in range(min_num, 0, -1):\n        if a % i == 0 and b % i == 0:\n            return i", "prompt_tokens": 110, "completion_tokens": 90, "duration": 2.5242953300476074}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    # Create an empty list to store prefixes\n    prefixes = []\n    \n    # Loop through the input string\n    for i in range(1, len(string)+1):\n        # Append the current prefix to the list\n        prefixes.append(string[:i])\n    \n    # Return the list of prefixes\n    return prefixes", "prompt_tokens": 98, "completion_tokens": 82, "duration": 2.146620273590088}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    # Create a list of numbers from 0 to n\n    numbers = list(range(n+1))\n    \n    # Convert the list of numbers to a list of strings\n    string_numbers = list(map(str, numbers))\n    \n    # Join the list of strings with a space delimiter\n    result = ' '.join(string_numbers)\n    \n    return result", "prompt_tokens": 108, "completion_tokens": 87, "duration": 1.972015142440796}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase\n    string = string.lower()\n    \n    # Create a set from the characters of the string to get distinct characters\n    distinct_chars = set(string)\n    \n    # Return the length of the set\n    return len(distinct_chars)", "prompt_tokens": 110, "completion_tokens": 71, "duration": 1.9861927032470703}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    # Create a dictionary to map each note to its duration\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    \n    # Split the input music string by spaces to get individual notes\n    notes = music_string.split()\n    \n    # Iterate through each note and get its duration using the dictionary\n    # Append the duration to the result list\n    result = [note_duration[note] for note in notes]\n    \n    return result", "prompt_tokens": 211, "completion_tokens": 119, "duration": 2.677762269973755}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0  # Initialize a counter variable\n    for i in range(len(string) - len(substring) + 1):  # Iterate through the original string with overlapping substrings\n        if string[i:i+len(substring)] == substring:  # Check if the substring matches the current slice of the original string\n            count += 1  # Increment the counter if there is a match\n    return count  # Return the total count of occurrences", "prompt_tokens": 128, "completion_tokens": 115, "duration": 2.6544947624206543}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    # Create a dictionary to map numberals to their corresponding numbers\n    num_mapping = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'}\n    \n    # Split the input string into a list of numberals\n    num_list = numbers.split()\n    \n    # Convert each numberal to its corresponding number using the dictionary mapping\n    num_list = sorted(num_list, key=lambda x: num_mapping[x])\n    \n    # Convert the sorted list of numbers back to numberals\n    sorted_numbers = ' '.join(num_list)\n    \n    return sorted_numbers", "prompt_tokens": 144, "completion_tokens": 175, "duration": 3.7495930194854736}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the list of numbers in ascending order\n    numbers.sort()\n    \n    # Initialize variables to keep track of the closest pair and the minimum difference\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    \n    # Iterate through the sorted list to find the closest pair\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "prompt_tokens": 205, "completion_tokens": 150, "duration": 3.6098697185516357}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the minimum and maximum numbers in the list\n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    # Calculate the range of the numbers\n    range_nums = max_num - min_num\n    \n    # Apply linear transformation to rescale the numbers to the unit interval\n    rescaled_nums = [(num - min_num) / range_nums for num in numbers]\n    \n    return rescaled_nums", "prompt_tokens": 162, "completion_tokens": 105, "duration": 2.6750905513763428}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Initialize an empty list to store integers\n    integers = []\n    \n    # Iterate over each element in the input list\n    for value in values:\n        # Check if the element is an integer\n        if isinstance(value, int):\n            # Append the integer to the list of integers\n            integers.append(value)\n    \n    # Return the list of integers\n    return integers", "prompt_tokens": 130, "completion_tokens": 97, "duration": 2.29048752784729}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    # Return the length of the given string\n    return len(string)", "prompt_tokens": 83, "completion_tokens": 28, "duration": 1.247462272644043}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    # Start checking from n-1 down to 1\n    for i in range(n-1, 0, -1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            return i", "prompt_tokens": 92, "completion_tokens": 67, "duration": 1.9228336811065674}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    # Initialize an empty list to store the factors\n    factors = []\n    \n    # Start with the smallest prime factor, which is 2\n    i = 2\n    \n    # While the input number is greater than 1\n    while n > 1:\n        # If the input number is divisible by the current prime factor\n        if n % i == 0:\n            # Append the current prime factor to the list of factors\n            factors.append(i)\n            # Update the input number by dividing it by the current prime factor\n            n //= i\n        else:\n            # If the input number is not divisible by the current prime factor, move to the next prime number\n            i += 1\n    \n    return factors", "prompt_tokens": 165, "completion_tokens": 166, "duration": 3.0344130992889404}
{"task_id": "HumanEval/26", "generated_code": "from collections import Counter  # Import Counter to count occurrences of elements\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:  # Define the function\n    counts = Counter(numbers)  # Count occurrences of each element\n    result = [num for num in numbers if counts[num] == 1]  # Keep only elements that occur once\n    return result  # Return the resulting list", "prompt_tokens": 123, "completion_tokens": 81, "duration": 1.7834267616271973}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    # Use list comprehension to flip the case of each character in the string\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 88, "completion_tokens": 52, "duration": 4.019555330276489}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    # Join all strings in the list using empty string as separator\n    return ''.join(strings)", "prompt_tokens": 96, "completion_tokens": 35, "duration": 1.450155258178711}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Create an empty list to store the filtered strings\n    filtered_strings = []\n    \n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the current string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, add the string to the filtered list\n            filtered_strings.append(string)\n    \n    return filtered_strings", "prompt_tokens": 126, "completion_tokens": 101, "duration": 2.216895580291748}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    # Create an empty list to store positive numbers\n    positive_nums = []\n    \n    # Iterate through each number in the list\n    for num in l:\n        # Check if the number is positive\n        if num > 0:\n            # Add the positive number to the positive_nums list\n            positive_nums.append(num)\n    \n    # Return the list of positive numbers\n    return positive_nums", "prompt_tokens": 153, "completion_tokens": 88, "duration": 2.092664957046509}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # Check if the number is divisible by any number from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True", "prompt_tokens": 139, "completion_tokens": 84, "duration": 1.7691524028778076}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    # Find the degree of the polynomial\n    degree = len(xs) - 1\n\n    # Find the largest non-zero coefficient\n    leading_coeff = xs[degree]\n\n    # If the leading coefficient is 0, the solution is 0\n    if leading_coeff == 0:\n        return 0\n\n    # Calculate the possible factors of the constant term\n    constant = xs[0]\n    possible_factors = [i for i in range(1, abs(constant) + 1) if constant % i == 0]\n\n    # Check all possible values for x\n    for factor in possible_factors:\n        if poly(xs, -factor / leading_coeff) == 0:\n            return -factor / leading_coeff\n        if poly(xs, factor / leading_coeff) == 0:\n            return factor / leading_coeff", "prompt_tokens": 298, "completion_tokens": 183, "duration": 3.838467836380005}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Create a copy of the input list\n    sorted_list = l.copy()\n    \n    # Sort the elements at indices divisible by 3\n    sorted_indices = [i for i in range(len(sorted_list)) if i % 3 == 0]\n    sorted_values = sorted([sorted_list[i] for i in sorted_indices])\n    \n    # Update the sorted elements in the copy list\n    for i, val in zip(sorted_indices, sorted_values):\n        sorted_list[i] = val\n    \n    return sorted_list", "prompt_tokens": 190, "completion_tokens": 118, "duration": 2.5451390743255615}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    # Use set() to remove duplicates\n    unique_set = set(l)\n    # Sort the unique elements\n    unique_sorted = sorted(unique_set)\n    return unique_sorted", "prompt_tokens": 113, "completion_tokens": 46, "duration": 1.635941982269287}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    # Sort the list in ascending order\n    l.sort()\n    # Return the last element in the sorted list\n    return l[-1]", "prompt_tokens": 122, "completion_tokens": 37, "duration": 1.559126377105713}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    # Initialize a counter to keep track of the number of times digit 7 appears\n    count = 0\n    \n    # Iterate over integers less than n\n    for i in range(n):\n        # Check if the integer is divisible by 11 or 13 and contains digit 7\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    \n    # Return the count of the number of times digit 7 appears\n    return count", "prompt_tokens": 119, "completion_tokens": 119, "duration": 2.675288438796997}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # create a list containing only the even indices of the input list\n    even_values = l[::2]\n    \n    # sort the even values list\n    even_values.sort()\n    \n    # create a new list by iterating through the input list\n    sorted_list = [even_values.pop(0) if i % 2 == 0 else val for i, val in enumerate(l)]\n    \n    return sorted_list", "prompt_tokens": 163, "completion_tokens": 98, "duration": 2.294828176498413}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group in reverse. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 198, "completion_tokens": 115, "duration": 4.82562518119812}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b\n\n    i = 2\n    while n > 0:\n        if is_prime(fibonacci(i)):\n            n -= 1\n        i += 1\n    return fibonacci(i-1)", "prompt_tokens": 137, "completion_tokens": 174, "duration": 3.6907405853271484}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    # Sort the input list\n    l.sort()\n    \n    # Iterate through each element in the list\n    for i in range(len(l)):\n        # Use two pointers approach to find two elements that sum up to the negative of the current element\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n                \n    return False", "prompt_tokens": 199, "completion_tokens": 145, "duration": 3.119257688522339}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    # Calculate the number of collisions\n    collisions = n * (n - 1) // 2\n    return collisions", "prompt_tokens": 191, "completion_tokens": 39, "duration": 3.225573778152466}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    # Create an empty list to store the incremented elements\n    result = []\n    \n    # Iterate through each element in the input list\n    for num in l:\n        # Increment the element by 1 and append it to the result list\n        result.append(num + 1)\n    \n    # Return the final list with incremented elements\n    return result", "prompt_tokens": 148, "completion_tokens": 84, "duration": 2.2854671478271484}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    # Check if the list has at least two elements\n    if len(l) < 2:\n        return False\n    \n    # Create a set to store seen elements\n    seen = set()\n    \n    # Iterate through the list\n    for num in l:\n        # Check if the negative of the current number is in the set\n        if -num in seen:\n            return True\n        # Add the current number to the set\n        seen.add(num)\n    \n    return False", "prompt_tokens": 197, "completion_tokens": 111, "duration": 4.047832012176514}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    # Initialize an empty string to store the converted number\n    result = \"\"\n    \n    # While the input number x is greater than 0, keep dividing it by the new base and appending the remainder to the result string\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    \n    # Return the final converted number as a string\n    return result", "prompt_tokens": 131, "completion_tokens": 99, "duration": 2.4449045658111572}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    # Calculate the area of the triangle\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 86, "completion_tokens": 36, "duration": 3.0745370388031006}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    # base case\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    # initializing variables for the first 4 numbers in the sequence\n    a, b, c, d = 0, 0, 2, 0\n    \n    # calculate the next number in the sequence iteratively\n    for i in range(4, n+1):\n        next_num = a + b + c + d\n        a, b, c, d = b, c, d, next_num\n    \n    return next_num", "prompt_tokens": 211, "completion_tokens": 158, "duration": 5.250949859619141}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    # Sort the list\n    l.sort()\n    \n    # Calculate the length of the list\n    n = len(l)\n    \n    # Check if the length of the list is odd\n    if n % 2 != 0:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 115, "completion_tokens": 88, "duration": 2.0439701080322266}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    # Reverse the given text\n    reversed_text = text[::-1]\n    \n    # Check if the reversed text is equal to the original text\n    return text == reversed_text", "prompt_tokens": 111, "completion_tokens": 44, "duration": 3.658219575881958}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    # Calculate (2^n) % p\n    result = pow(2, n, p)\n    return result", "prompt_tokens": 145, "completion_tokens": 40, "duration": 3.3552749156951904}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    # For each character in the input string\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 130, "completion_tokens": 53, "duration": 3.451573371887207}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    # Create a list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each character in the input text\n    for char in text:\n        # Check if the character is not a vowel\n        if char not in vowels:\n            # Append the character to the result\n            result += char\n            \n    # Return the final result without vowels\n    return result", "prompt_tokens": 162, "completion_tokens": 131, "duration": 5.178896427154541}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    # Iterate through each number in the list\n    for num in l:\n        # Check if the number is greater than or equal to the threshold\n        if num >= t:\n            # If any number is not below the threshold, return False\n            return False\n    # If all numbers are below the threshold, return True\n    return True", "prompt_tokens": 119, "completion_tokens": 87, "duration": 4.127436399459839}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    # Return the sum of x and y\n    return x + y", "prompt_tokens": 93, "completion_tokens": 30, "duration": 2.9420692920684814}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    # Sort characters in both strings\n    s0_sorted = sorted(s0)\n    s1_sorted = sorted(s1)\n    \n    # Check if sorted strings are the same\n    return s0_sorted == s1_sorted", "prompt_tokens": 180, "completion_tokens": 64, "duration": 3.5258936882019043}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    # Base case: if n is 0 or 1, return n\n    if n <= 1:\n        return n\n    \n    # Initialize variables for the first two Fibonacci numbers\n    a, b = 0, 1\n    \n    # Loop to calculate the n-th Fibonacci number\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    \n    return b", "prompt_tokens": 92, "completion_tokens": 98, "duration": 4.354985237121582}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a stack to keep track of opening brackets\n    stack = []\n    \n    # Iterate through each bracket in the input string\n    for bracket in brackets:\n        if bracket == \"<\":\n            # Push opening bracket onto the stack\n            stack.append(bracket)\n        elif bracket == \">\":\n            # If there is no matching opening bracket, return False\n            if not stack:\n                return False\n            # Pop the matching opening bracket from the stack\n            stack.pop()\n    \n    # If there are remaining opening brackets in the stack, return False\n    return len(stack) == 0", "prompt_tokens": 132, "completion_tokens": 140, "duration": 5.380977630615234}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    # Check if the list is sorted in increasing order\n    if l == sorted(l):\n        return True\n    # Check if the list is sorted in decreasing order\n    elif l == sorted(l, reverse=True):\n        return True\n    else:\n        return False", "prompt_tokens": 127, "completion_tokens": 67, "duration": 3.37868332862854}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    # Find common elements between two lists\n    common_elements = set(l1) & set(l2)\n    \n    # Sort the common elements\n    sorted_common_elements = sorted(common_elements)\n    \n    return sorted_common_elements", "prompt_tokens": 154, "completion_tokens": 62, "duration": 3.765193462371826}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Loop from 2 to the square root of n to find the largest prime factor\n    i = 2\n    while i <= n**0.5:\n        if n % i == 0 and is_prime(n // i):\n            return n // i\n        i += 1\n\n# Test cases\nprint(largest_prime_factor(13195))\nprint(largest_prime_factor(2048))", "prompt_tokens": 103, "completion_tokens": 157, "duration": 4.665022611618042}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    # Calculate the sum of numbers from 1 to n using the formula n*(n+1)/2\n    return n * (n + 1) // 2", "prompt_tokens": 134, "completion_tokens": 49, "duration": 3.97623872756958}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a variable to keep track of the balance of brackets\n    balance = 0\n    \n    # Iterate through each bracket in the string\n    for bracket in brackets:\n        # If the bracket is an opening bracket, increment the balance\n        if bracket == \"(\":\n            balance += 1\n        # If the bracket is a closing bracket, decrement the balance\n        elif bracket == \")\":\n            balance -= 1\n        # If the balance becomes negative at any point, return False\n        if balance < 0:\n            return False\n    \n    # If the balance is zero at the end, return True, otherwise return False\n    return balance == 0", "prompt_tokens": 129, "completion_tokens": 155, "duration": 4.881266117095947}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    # Initialize a list to store the result\n    result = []\n    # Iterate over the coefficients\n    for i in range(1, len(xs)):\n        # Calculate the derivative and append to the result list\n        result.append(xs[i] * i)\n    return result", "prompt_tokens": 148, "completion_tokens": 67, "duration": 4.208386659622192}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 189, "completion_tokens": 72, "duration": 1.4950082302093506}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    # Convert the input string to lowercase\n    s = s.lower()\n    \n    # Initialize a count variable to keep track of the number of vowels\n    count = 0\n    \n    # Define a set of vowels\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    \n    # Check if the last character is 'y'\n    if s[-1] == 'y':\n        vowels.add('y')\n    \n    # Iterate through the characters in the string\n    for char in s:\n        if char in vowels:\n            count += 1\n    \n    return count", "prompt_tokens": 166, "completion_tokens": 134, "duration": 3.067323923110962}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x: int, shift: int) -> str:\n    # Convert the integer x to a string\n    x_str = str(x)\n    \n    # Calculate the effective shift amount by taking modulo of shift with the length of x_str\n    effective_shift = shift % len(x_str)\n    \n    # Perform the circular shift operation\n    shifted_str = x_str[-effective_shift:] + x_str[:-effective_shift]\n    \n    # Return the resulting shifted string\n    return shifted_str", "prompt_tokens": 122, "completion_tokens": 105, "duration": 2.0727953910827637}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    # Initialize a variable to store the sum of ASCII codes\n    sum_ascii = 0\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII code of the uppercase letter to the sum\n            sum_ascii += ord(char)\n    \n    return sum_ascii", "prompt_tokens": 152, "completion_tokens": 90, "duration": 4.047471046447754}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s: str, n: int) -> int:\n    # Split the input string to extract the number of apples and oranges\n    fruits = s.split()\n    \n    # Extract the number of apples and oranges as integers\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    \n    # Calculate the number of mango fruits in the basket\n    mangoes = n - apples - oranges\n    \n    return mangoes", "prompt_tokens": 250, "completion_tokens": 98, "duration": 4.302104711532593}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    # Check if the array is empty\n    if not arr:\n        return []\n    \n    # Filter even values\n    even_values = [num for num in arr if num % 2 == 0]\n    \n    # Check if there are even values\n    if not even_values:\n        return []\n    \n    # Find the smallest even value and its index\n    min_even_value = min(even_values)\n    min_even_index = arr.index(min_even_value)\n    \n    return [min_even_value, min_even_index]", "prompt_tokens": 352, "completion_tokens": 116, "duration": 6.335153818130493}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    # Create a dictionary to store frequency of each integer in the list\n    freq_dict = {}\n    \n    # Calculate frequency of each integer in the list\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Find the greatest integer that meets the condition\n    result = -1\n    for key in freq_dict:\n        if key > 0 and freq_dict[key] >= key:\n            result = max(result, key)\n    \n    return result", "prompt_tokens": 205, "completion_tokens": 125, "duration": 5.284831285476685}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize an empty list to store the strange-sorted result\n    result = []\n    \n    # While there are elements in the list\n    while lst:\n        # Append the minimum value to the result\n        result.append(lst.pop(0))\n        \n        # If there are remaining elements, append the maximum value to the result\n        if lst:\n            result.append(lst.pop())\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 107, "duration": 3.9075727462768555}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the area of the triangle using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 161, "completion_tokens": 140, "duration": 4.362710237503052}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    # Check if the list is palindromic\n    if q == q[::-1]:\n        # Check if the sum of the elements is less than or equal to the maximum weight\n        if sum(q) <= w:\n            return True\n    return False", "prompt_tokens": 270, "completion_tokens": 68, "duration": 3.611467123031616}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    # Initialize a variable to keep track of the number of changes needed\n    changes = 0\n    \n    # Loop through the first half of the array\n    for i in range(len(arr)//2):\n        # Compare the corresponding elements from the start and end of the array\n        if arr[i] != arr[-1-i]:\n            # Increment the number of changes needed by 1\n            changes += 1\n    \n    # Return the total number of changes needed\n    return changes", "prompt_tokens": 197, "completion_tokens": 109, "duration": 6.138317108154297}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    # Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    # Return the list with less total characters or the first list if they have the same total characters\n    return lst1 if total_chars_lst1 <= total_chars_lst2 else lst2", "prompt_tokens": 233, "completion_tokens": 97, "duration": 5.458170413970947}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Check all possible combinations of 3 prime numbers that multiply to 'a'\n    for i in range(2, a):\n        if is_prime(i):\n            for j in range(i+1, a):\n                if is_prime(j):\n                    for k in range(j+1, a):\n                        if is_prime(k) and i*j*k == a:\n                            return True\n    return False", "prompt_tokens": 119, "completion_tokens": 159, "duration": 5.884806394577026}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    if n == 0:\n        return x == 1\n    \n    while x % n == 0:\n        x //= n\n    return x == 1", "prompt_tokens": 182, "completion_tokens": 69, "duration": 3.688037157058716}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    # if a is negative, return False\n    if a < 0:\n        return False\n    # calculate the cube root of a\n    root = round(a ** (1/3))\n    # check if the cube of the root is equal to a\n    return root ** 3 == a", "prompt_tokens": 150, "completion_tokens": 73, "duration": 3.6149227619171143}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Define a dictionary mapping hexadecimal digits to their decimal values\n    hex_dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    \n    # Count the number of prime hexadecimal digits in the input string\n    count = sum(1 for digit in num if is_prime(hex_dict[digit]))\n    \n    return count", "prompt_tokens": 339, "completion_tokens": 227, "duration": 6.447696924209595}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    # Convert decimal to binary\n    binary = bin(decimal)[2:]\n    # Add 'db' at the beginning and end of the binary string\n    binary_with_db = 'db' + binary + 'db'\n    # Return the final binary string\n    return binary_with_db", "prompt_tokens": 179, "completion_tokens": 69, "duration": 3.4358367919921875}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Check if every 3 consecutive characters in the string are distinct\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 161, "completion_tokens": 106, "duration": 2.0641322135925293}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    # create an empty list to store the letter grades\n    letter_grades = []\n    \n    # iterate through each GPA in the list\n    for gpa in grades:\n        # determine the letter grade based on the GPA\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    \n    return letter_grades", "prompt_tokens": 310, "completion_tokens": 282, "duration": 7.4985339641571045}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    # Calculate the length of the input string\n    length = len(string)\n    \n    # Check if the length is less than 2, then it's not a prime number\n    if length < 2:\n        return False\n    \n    # Check if the length is 2, then it's a prime number\n    if length == 2:\n        return True\n    \n    # Check if the length is divisible by any number from 2 to the square root of the length\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    \n    return True", "prompt_tokens": 121, "completion_tokens": 144, "duration": 4.44912052154541}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    # Initialize count to 0\n    count = 0\n    \n    # Loop through all n-digit positive integers\n    for i in range(10**(n-1), 10**n):\n        # Check if the number starts or ends with 1\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    \n    # Return the count\n    return count", "prompt_tokens": 84, "completion_tokens": 101, "duration": 3.629564046859741}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Convert the number N to its binary representation and remove the '0b' prefix\n    binary_str = bin(N)[2:]\n    \n    # Calculate the sum of digits in the binary representation\n    binary_sum = sum(map(int, binary_str))\n    \n    # Convert the binary sum to binary format and return as string\n    return bin(binary_sum)[2:]", "prompt_tokens": 173, "completion_tokens": 83, "duration": 1.9268949031829834}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    # filter even elements at odd indices\n    even_odd_indices = [lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0]\n    \n    # sum the even elements at odd indices\n    result = sum(even_odd_indices)\n    \n    return result", "prompt_tokens": 95, "completion_tokens": 75, "duration": 3.4221878051757812}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    # Split the input string into words\n    words = s.split()\n    \n    # Sort each word individually\n    sorted_words = [''.join(sorted(word)) for word in words]\n    \n    # Join the sorted words back together with spaces\n    sorted_sentence = ' '.join(sorted_words)\n    \n    return sorted_sentence", "prompt_tokens": 170, "completion_tokens": 75, "duration": 2.246870517730713}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []  # create an empty list to store the result\n    for i, row in enumerate(lst):  # iterate over each row in the list with index i\n        for j, val in enumerate(row):  # iterate over each value in the row with index j\n            if val == x:  # if the value is equal to x\n                result.append((i, j))  # add the coordinate (i, j) to the result list\n    result.sort(key=lambda x: (x[0], -x[1]))  # sort the result list by row in ascending order and by column in descending order\n    return result  # return the result list", "prompt_tokens": 299, "completion_tokens": 154, "duration": 2.9556686878204346}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    # Check if the sum of the first and last elements is odd\n    if (array[0] + array[-1]) % 2 != 0:\n        # Sort the array in ascending order\n        return sorted(array)\n    else:\n        # Sort the array in descending order\n        return sorted(array, reverse=True)", "prompt_tokens": 243, "completion_tokens": 77, "duration": 1.898456335067749}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Initialize an empty string to store the encrypted result\n    result = ''\n    \n    # Define the shift value\n    shift = 2 * 2\n    \n    # Encrypt each character in the input string\n    for char in s:\n        if char.isalpha():\n            # Find the index of the character in the alphabet\n            index = (alphabet.index(char) + shift) % 26\n            \n            # Add the encrypted character to the result string\n            result += alphabet[index]\n        else:\n            # If the character is not a letter, keep it as it is\n            result += char\n    \n    return result", "prompt_tokens": 150, "completion_tokens": 148, "duration": 3.0780224800109863}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Remove duplicates by converting to a set and then back to a list\n    unique_lst = list(set(sorted_lst))\n    \n    # Check if the length of the list is less than 2, return None\n    if len(unique_lst) < 2:\n        return None\n    \n    # Return the 2nd smallest element\n    return unique_lst[1]", "prompt_tokens": 164, "completion_tokens": 102, "duration": 2.3174023628234863}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Split the input string into sentences\n    sentences = S.split(\".\")\n    sentences += S.split(\"?\")\n    sentences += S.split(\"!\")\n\n    # Count the number of boredoms\n    count = sum(1 for sentence in sentences if sentence.strip().startswith(\"I\"))\n\n    return count", "prompt_tokens": 147, "completion_tokens": 71, "duration": 1.933454990386963}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(num, int) for num in [x, y, z]):\n        # Check if one of the numbers is equal to the sum of the other two\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 175, "completion_tokens": 85, "duration": 1.8904855251312256}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    # Define a variable to store the encoded message\n    encoded_message = \"\"\n    \n    # Iterate through each character in the message\n    for char in message:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Swap the case of the letter\n            char = char.swapcase()\n            # Check if the character is a vowel\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                # Calculate the index of the character 2 places ahead in the alphabet\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n                char = new_char.upper() if char.isupper() else new_char\n        # Append the character to the encoded message\n        encoded_message += char\n        \n    return encoded_message", "prompt_tokens": 149, "completion_tokens": 183, "duration": 3.469959259033203}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum_of_digits(max_prime)", "prompt_tokens": 326, "completion_tokens": 125, "duration": 2.8450822830200195}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    \n    lowercase_keys = all(key.islower() for key in keys if isinstance(key, str))\n    uppercase_keys = all(key.isupper() for key in keys if isinstance(key, str))\n    \n    return lowercase_keys or uppercase_keys", "prompt_tokens": 209, "completion_tokens": 74, "duration": 2.0370776653289795}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    # Initialize an empty list to store prime numbers\n    primes = []\n    \n    # Check each number from 2 to n (exclusive) for primality\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    \n    return primes", "prompt_tokens": 185, "completion_tokens": 111, "duration": 2.6928257942199707}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    # Get the unit digit of a and b by converting them to strings and getting the last character\n    unit_a = int(str(a)[-1])\n    unit_b = int(str(b)[-1])\n    \n    # Calculate the product of the unit digits\n    product = unit_a * unit_b\n    \n    return product", "prompt_tokens": 138, "completion_tokens": 75, "duration": 2.238267421722412}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s: str) -> int:\n    # Initialize a counter variable to keep track of the number of uppercase vowels\n    count = 0\n    \n    # Define a set of uppercase vowels\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    # Iterate over the even indices of the string\n    for i in range(0, len(s), 2):\n        # Check if the character at the current index is an uppercase vowel\n        if s[i] in vowels:\n            count += 1\n    \n    return count", "prompt_tokens": 112, "completion_tokens": 122, "duration": 2.7962238788604736}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    # Convert the input value to float\n    value = float(value)\n    \n    # Check if the decimal part is closer to the lower integer\n    if value % 1 < 0.5:\n        return int(value)\n    else:\n        return int(value) + 1 if value >= 0 else int(value) - 1", "prompt_tokens": 196, "completion_tokens": 80, "duration": 2.0954384803771973}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    # Initialize an empty list to store the number of stones in each level\n    levels = []\n    \n    # Loop from 0 to n-1 to determine the number of stones in each level\n    for i in range(n):\n        # Calculate the number of stones in the level based on the current level and n\n        stones = n + i * (2 if n % 2 == 0 else 1)\n        \n        # Append the number of stones to the levels list\n        levels.append(stones)\n    \n    # Return the list of number of stones in each level\n    return levels", "prompt_tokens": 172, "completion_tokens": 135, "duration": 3.1604185104370117}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    # Split the string by commas and spaces\n    words = s.replace(',', ' ').split()\n    \n    # Return the array of words\n    return words", "prompt_tokens": 156, "completion_tokens": 42, "duration": 1.4375159740447998}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x: int, y: int) -> int:\n    # Initialize the biggest even number as -1\n    result = -1\n    \n    # Loop through the range from y to x\n    for num in range(y, x + 1):\n        # Check if the number is even and bigger than the current result\n        if num % 2 == 0 and num > result:\n            result = num\n    \n    return result", "prompt_tokens": 134, "completion_tokens": 96, "duration": 2.24631404876709}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 180, "completion_tokens": 40, "duration": 1.4217309951782227}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate through each number in the input list\n    for num in x:\n        # Convert the number to a string to easily check for even digits\n        num_str = str(num)\n        \n        # Check if the number has any even digit\n        if any(int(digit) % 2 == 0 for digit in num_str):\n            continue  # Skip numbers with even digit\n        \n        # If the number has no even digit, add it to the result list\n        result.append(num)\n    \n    # Sort the result list in increasing order\n    result.sort()\n    \n    return result", "prompt_tokens": 142, "completion_tokens": 147, "duration": 3.0077357292175293}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # filter and sort integers between 1 and 9\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9])\n    \n    # replace integers with corresponding names and reverse the list\n    result = [ \n        \"One\" if num == 1 else \n        \"Two\" if num == 2 else \n        \"Three\" if num == 3 else \n        \"Four\" if num == 4 else \n        \"Five\" if num == 5 else \n        \"Six\" if num == 6 else \n        \"Seven\" if num == 7 else \n        \"Eight\" if num == 8 else \n        \"Nine\" for num in filtered_arr[::-1]\n    ]\n    \n    return result", "prompt_tokens": 316, "completion_tokens": 167, "duration": 3.561103105545044}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    # Initialize an empty list\n    result = []\n    \n    # Loop through numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is even\n        if i % 2 == 0:\n            # Calculate the factorial of i\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Calculate the sum of numbers from 1 to i\n            total = sum(range(1, i + 1))\n            result.append(total)\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 139, "duration": 2.8185369968414307}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    # Initialize counters for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n\n    # Check each number from 1 to n\n    for num in range(1, n+1):\n        # Convert number to string for palindrome check\n        num_str = str(num)\n\n        # Check if the number is a palindrome\n        if num_str == num_str[::-1]:\n            # Increment the respective counter based on whether it is even or odd\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    # Return a tuple of even and odd palindrome counts\n    return (even_count, odd_count)", "prompt_tokens": 251, "completion_tokens": 161, "duration": 4.045202016830444}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    # Initialize a count variable to keep track of numbers with sum of digits > 0\n    count = 0\n    # Iterate through each number in the array\n    for num in arr:\n        # Calculate the sum of digits of the number\n        sum_digits = sum(int(d) for d in str(abs(num)))\n        # If the sum of digits is greater than 0, increment the count\n        if sum_digits > 0:\n            count += 1\n    # Return the count of numbers with sum of digits > 0\n    return count", "prompt_tokens": 164, "completion_tokens": 126, "duration": 2.3218414783477783}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    # Check if the array is empty\n    if not arr:\n        return True\n    \n    # Find the index of the minimum element in the array\n    min_idx = arr.index(min(arr))\n    \n    # Calculate the difference between the index of the minimum element and its correct position in a sorted array\n    diff = min_idx - min(arr)\n    \n    # If the difference is negative, adjust it to the correct positive value\n    if diff < 0:\n        diff += len(arr)\n    \n    # Check if the difference is equal to 0 or len(arr) - 1\n    return diff == 0 or diff == len(arr) - 1", "prompt_tokens": 339, "completion_tokens": 147, "duration": 3.632676124572754}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Count odd numbers in lst1\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count odd numbers in lst2\n    odd_count2 = sum(1 for num in lst2 if num % 2 != 0)\n    \n    # If the number of odd numbers in lst1 is less than or equal to the number of odd numbers in lst2, return \"YES\", otherwise return \"NO\"\n    return \"YES\" if odd_count <= odd_count2 else \"NO\"", "prompt_tokens": 237, "completion_tokens": 126, "duration": 2.8448479175567627}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    # Split the input string into a list of lowercase letters\n    letters = test.split()\n    \n    # Create an empty dictionary to store the count of each letter\n    counts = {}\n    \n    # Iterate through each letter in the list\n    for letter in letters:\n        # Check if the letter is already in the counts dictionary\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    \n    # Find the maximum count of any letter in the counts dictionary\n    max_count = max(counts.values())\n    \n    # Create a new dictionary with letters that have the maximum count\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    \n    return result", "prompt_tokens": 191, "completion_tokens": 167, "duration": 3.977212429046631}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    # Remove characters from s that are present in c\n    result = ''.join(char for char in s if char not in c)\n\n    # Check if the result string is palindrome\n    is_palindrome = result == result[::-1]\n\n    return result, is_palindrome", "prompt_tokens": 202, "completion_tokens": 75, "duration": 2.2084085941314697}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    # Create an empty list to store the results\n    result = []\n    \n    # Iterate through each string in the input list\n    for s in lst:\n        # Count the number of odd digits in the string\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        \n        # Format the output string and append it to the result list\n        result.append(f\"the number of odd elements {odd_count}n the str{s}ng {s} of the {s}nput.\")\n    \n    return result", "prompt_tokens": 213, "completion_tokens": 127, "duration": 2.6295011043548584}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    # Initialize variables to store the current sum and the minimum sum\n    cur_sum = 0\n    min_sum = float('inf')\n    \n    # Loop through each element in the array\n    for num in nums:\n        # Update the current sum by adding the current element\n        cur_sum += num\n        \n        # Update the minimum sum by taking the minimum of the current sum and the minimum sum\n        min_sum = min(min_sum, cur_sum)\n        \n        # If the current sum becomes negative, reset it to 0\n        cur_sum = max(cur_sum, 0)\n    \n    return min_sum", "prompt_tokens": 128, "completion_tokens": 138, "duration": 2.953033208847046}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    # Initialize variables\n    count = 0\n    total_water = sum(sum(row) for row in grid)\n    \n    # Calculate the number of times buckets need to be lowered\n    while total_water > 0:\n        count += math.ceil(total_water / capacity)\n        total_water = max(0, total_water - (capacity * len(grid)))\n    \n    return count", "prompt_tokens": 363, "completion_tokens": 93, "duration": 2.0616302490234375}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    # Define a custom sorting key function that sorts by number of ones in binary representation and then by decimal value\n    def custom_sort_key(x):\n        return bin(x).count('1'), x\n\n    # Sort the array using the custom sorting key function\n    return sorted(arr, key=custom_sort_key)", "prompt_tokens": 210, "completion_tokens": 73, "duration": 4.380458831787109}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    # Split the string into words\n    words = s.split()\n    \n    # Define a function to count consonants in a word\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n    \n    # Filter words with exactly n consonants\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result", "prompt_tokens": 221, "completion_tokens": 101, "duration": 2.4879982471466064}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    # Find the vowels in the word\n    vowels = \"aeiouAEIOU\"\n    \n    # Iterate through the word from right to left\n    for i in range(len(word)-2, 0, -1):\n        # Check if the character is a consonant\n        if word[i] not in vowels and word[i-1] in vowels and word[i-2] not in vowels:\n            return word[i-1]\n    \n    return \"\"", "prompt_tokens": 189, "completion_tokens": 107, "duration": 2.836477756500244}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    # Initialize a counter to keep track of the balance of parentheses\n    balance = 0\n    \n    # Iterate through each character in the concatenated string\n    for char in ''.join(lst):\n        # If it's an open parenthesis, increment the counter\n        if char == '(':\n            balance += 1\n        # If it's a close parenthesis, decrement the counter\n        elif char == ')':\n            balance -= 1\n        # If the counter goes negative at any point, return 'No'\n        if balance < 0:\n            return 'No'\n    \n    # If the counter is not zero at the end, return 'No'\n    if balance != 0:\n        return 'No'\n    \n    # If the counter is zero, return 'Yes'\n    return 'Yes'", "prompt_tokens": 208, "completion_tokens": 174, "duration": 2.922574281692505}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Return the last k elements of the sorted array\n    return arr[-k:]", "prompt_tokens": 257, "completion_tokens": 42, "duration": 1.5812008380889893}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    # Initialize a variable to store the sum of odd elements in even positions\n    total_sum = 0\n    # Iterate over the list using enumerate to get both value and index\n    for index, num in enumerate(lst):\n        # Check if the number is odd and the index is even\n        if num % 2 != 0 and index % 2 == 0:\n            # Add the number to the total sum\n            total_sum += num\n    return total_sum", "prompt_tokens": 137, "completion_tokens": 108, "duration": 2.2670977115631104}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    # initialize a variable to keep track of the sum\n    total_sum = 0\n    # iterate through the first k elements of the array\n    for num in arr[:k]:\n        # check if the element has at most two digits\n        if 10 <= num < 100:\n            # add the element to the total sum\n            total_sum += num\n    return total_sum", "prompt_tokens": 168, "completion_tokens": 93, "duration": 2.2374556064605713}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]  # Initialize the result list with n\n    while n != 1:  # Continue until n reaches 1\n        if n % 2 == 0:  # If n is even\n            n = n // 2\n        else:  # If n is odd\n            n = 3 * n + 1\n        if n % 2 != 0:  # If the new n is odd, add it to the result list\n            result.append(n)\n    return sorted(result)  # Return the sorted result list\n\n# Test the function\nprint(get_odd_collatz(5))", "prompt_tokens": 271, "completion_tokens": 145, "duration": 4.816446781158447}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is not empty\n    if not date:\n        return False\n\n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n\n    # Convert month, day, and year to integers\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    # Validate the month\n    if month < 1 or month > 12:\n        return False\n\n    # Validate the day based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True", "prompt_tokens": 303, "completion_tokens": 216, "duration": 4.414244174957275}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    # Check if the input text contains whitespaces\n    if ' ' in txt:\n        # Split the text on whitespaces and return the list of words\n        return txt.split()\n    # Check if the input text contains commas\n    elif ',' in txt:\n        # Split the text on commas and return the list of words\n        return txt.split(',')\n    else:\n        # Count the number of lowercase letters with odd order in the alphabet\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)", "prompt_tokens": 180, "completion_tokens": 125, "duration": 6.122635364532471}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    # Check if the list is equal to a sorted version of the list with duplicates removed\n    return lst == sorted(set(lst))", "prompt_tokens": 289, "completion_tokens": 36, "duration": 1.4158871173858643}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # Check if the intervals do not intersect\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length of the intersection is a prime number\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"", "prompt_tokens": 294, "completion_tokens": 145, "duration": 6.148038625717163}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    # Return None for empty arr\n    if not arr:\n        return None\n    \n    # Initialize variables to store product of signs and sum of magnitudes\n    sign_prod = 1\n    magnitude_sum = 0\n    \n    # Iterate over the array\n    for num in arr:\n        # Update product of signs\n        if num > 0:\n            sign_prod *= 1\n        elif num < 0:\n            sign_prod *= -1\n        \n        # Update sum of magnitudes\n        magnitude_sum += abs(num)\n    \n    # Return the result of multiplying product of signs with sum of magnitudes\n    return sign_prod * magnitude_sum", "prompt_tokens": 162, "completion_tokens": 144, "duration": 4.446969985961914}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    # Flatten the grid to a list of tuples (value, row, column)\n    values = [(grid[i][j], i, j) for i in range(len(grid)) for j in range(len(grid[0]))]\n    \n    # Sort the values based on their lexicographical order\n    values.sort()\n    \n    # Initialize the starting cell as the one with the smallest value\n    current_cell = min(values)[1:]\n    \n    # Initialize the result list with the value of the starting cell\n    result = [grid[current_cell[0]][current_cell[1]]]\n    \n    # Remove the starting cell from the list of values\n    values.remove((result[0], current_cell[0], current_cell[1]))\n    \n    # Loop k-1 times to find the next k-1 cells in the path\n    for _ in range(k - 1):\n        # Find the neighboring cells of the current cell\n        neighbors = [(r, c) for r, c in [(current_cell[0] - 1, current_cell[1]), (current_cell[0] + 1, current_cell[1]),\n                                         (current_cell[0], current_cell[1] - 1), (current_cell[0], current_cell[1] + 1)]\n                     if 0 <= r < len(grid) and 0 <= c < len(grid[0])]\n        \n        # Find the neighbor with the smallest value\n        min_neighbor = min([(grid[r][c], r, c) for r, c in neighbors])\n        \n        # Update the current cell and add its value to the result\n        current_cell = min_neighbor[1:]\n        result.append(grid[current_cell[0]][current_cell[1]])\n        \n        # Remove the current cell from the list of values\n        values.remove((result[-1], current_cell[0], current_cell[1]))\n    \n    return result", "prompt_tokens": 436, "completion_tokens": 405, "duration": 9.182353258132935}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci_sequence = []\n    \n    if n >= 0:\n        tribonacci_sequence.append(3)\n    \n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            tribonacci_sequence.append(1 + i // 2)\n        else:\n            if i == 1:\n                tribonacci_sequence.append(1)\n            elif i == 2:\n                tribonacci_sequence.append(3)\n            else:\n                tribonacci_sequence.append(tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i - 3])\n    \n    return tribonacci_sequence", "prompt_tokens": 847, "completion_tokens": 382, "duration": 9.902666091918945}
{"task_id": "HumanEval/131", "generated_code": "def digits(n: int) -> int:\n    # Convert the integer to a string to iterate through its digits\n    n_str = str(n)\n    \n    # Initialize a variable to store the product of odd digits\n    product = 1\n    \n    # Iterate through each digit in the string\n    for digit in n_str:\n        # Check if the digit is odd\n        if int(digit) % 2 != 0:\n            # Multiply the product by the odd digit\n            product *= int(digit)\n    \n    # Return the product if at least one odd digit was found, otherwise return 0\n    return product if product != 1 else 0", "prompt_tokens": 111, "completion_tokens": 142, "duration": 5.952362537384033}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    # initialize a variable to keep track of the depth of the brackets\n    depth = 0\n    \n    # iterate through each character in the input string\n    for char in string:\n        # if the character is an open bracket, increase the depth\n        if char == '[':\n            depth += 1\n        # if the character is a closing bracket and there is at least one bracket nested, return True\n        elif char == ']' and depth > 0:\n            return True\n    \n    # return False if no nested brackets found\n    return False", "prompt_tokens": 173, "completion_tokens": 124, "duration": 4.107862234115601}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    # Round each element in the list to the upper integer\n    lst = [int(x) if x.is_integer() else int(x) + 1 for x in lst]\n    \n    # Square each element and sum them up\n    return sum([x**2 for x in lst])", "prompt_tokens": 197, "completion_tokens": 70, "duration": 5.366405725479126}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    txt = txt.strip()\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isspace():\n        return True\n    else:\n        return False", "prompt_tokens": 177, "completion_tokens": 62, "duration": 5.123525381088257}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    # Initialize the largest index to -1\n    largest_index = -1\n    \n    # Loop through each element and its index in the array\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than or equal to the previous element\n        if arr[i] < arr[i-1]:\n            # Update the largest index to the current index\n            largest_index = i - 1\n    \n    return largest_index", "prompt_tokens": 143, "completion_tokens": 105, "duration": 4.412010669708252}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    # Filter negative and positive integers\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    # Get the largest of negative integers or None if empty\n    largest_negative = max(negatives) if negatives else None\n    \n    # Get the smallest of positive integers or None if empty\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 178, "completion_tokens": 115, "duration": 7.01628041267395}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    # Check if the values are equal\n    if a == b:\n        return None\n    \n    # Check if a and b are numbers\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        # Return the larger number\n        return max(a, b)\n    \n    # If a and b are not both numbers, compare as strings\n    # Convert the values to float for comparison (replace comma with dot if needed)\n    a = float(a.replace(',', '.')) if isinstance(a, str) else a\n    b = float(b.replace(',', '.')) if isinstance(b, str) else b\n    \n    # Return the larger value\n    return a if a > b else b", "prompt_tokens": 181, "completion_tokens": 159, "duration": 4.303170442581177}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n: int) -> bool:\n    # Check if n is less than 8 or not divisible by 2\n    if n < 8 or n % 2 != 0:\n        return False\n    \n    # Check if n can be written as the sum of exactly 4 positive even numbers\n    for i in range(1, n//2+1):\n        for j in range(i, n//2+1):\n            for k in range(j, n//2+1):\n                if i + j + k + n//2 == n:\n                    return True\n    return False", "prompt_tokens": 117, "completion_tokens": 134, "duration": 7.373520851135254}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    # Define a variable to store the result, initialized to 1\n    result = 1\n    # Loop through numbers from n down to 1\n    for i in range(n, 0, -1):\n        # Calculate the factorial of current number i\n        factorial_i = 1\n        for j in range(i, 0, -1):\n            factorial_i *= j\n        # Multiply the result by the factorial of i\n        result *= factorial_i\n    # Return the final result\n    return result", "prompt_tokens": 135, "completion_tokens": 120, "duration": 4.5973875522613525}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    # replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # replace all consecutive spaces with -\n    while \"--\" in text:\n        text = text.replace(\"--\", \"-\")\n    \n    return text", "prompt_tokens": 146, "completion_tokens": 56, "duration": 3.1629104614257812}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check condition 1: There should not be more than three digits in the file's name\n    if sum(char.isdigit() for char in file_name) > 3:\n        return 'No'\n    \n    # Check condition 2: The file's name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, ext = file_name.split('.')\n    \n    # Check condition 3: The substring before the dot should start with a letter\n    if not name[0].isalpha():\n        return 'No'\n    \n    # Check condition 4: The substring after the dot should be 'txt', 'exe', or 'dll'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 254, "completion_tokens": 190, "duration": 4.92414116859436}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    # Initialize sum variable\n    total = 0\n    \n    # Loop through the list with indices\n    for i in range(len(lst)):\n        # Check if the index is a multiple of 3\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        # Check if the index is a multiple of 4 and not a multiple of 3\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n    \n    # Return the total sum\n    return total", "prompt_tokens": 209, "completion_tokens": 131, "duration": 6.456721067428589}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words with prime lengths\n    prime_words = [word for word in words if is_prime(len(word))]\n\n    # Join the prime words into a string\n    result = ' '.join(prime_words)\n\n    return result", "prompt_tokens": 187, "completion_tokens": 138, "duration": 6.000002384185791}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    # extract numerator and denominator for x and n\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # calculate x * n\n    result = x_num * n_num / (x_den * n_den)\n    \n    # check if the result is a whole number\n    return result.is_integer()", "prompt_tokens": 195, "completion_tokens": 91, "duration": 3.9302845001220703}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    # Define a helper function to calculate the sum of digits for a number\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # Sort the list of numbers based on the sum of their digits and then their index\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 155, "completion_tokens": 85, "duration": 5.26318883895874}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    # Initialize a count variable to keep track of the number of elements that meet the condition\n    count = 0\n    # Iterate through each number in the input array\n    for num in nums:\n        # Check if the number is greater than 10 and the first and last digits are odd\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            # Increment the count if the condition is met\n            count += 1\n    # Return the final count\n    return count", "prompt_tokens": 159, "completion_tokens": 132, "duration": 4.928373098373413}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    # Initialize a counter variable to count the number of valid triples\n    count = 0\n    # Create the array a according to the given formula\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    # Loop through all possible triples and check if their sum is a multiple of 3\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 205, "completion_tokens": 144, "duration": 4.192040205001831}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(sorted(planets[start_idx+1:end_idx], key=lambda x: planets.index(x)))\n    else:\n        return tuple(sorted(planets[end_idx+1:start_idx], key=lambda x: planets.index(x)))", "prompt_tokens": 251, "completion_tokens": 141, "duration": 4.5535054206848145}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length and then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list", "prompt_tokens": 227, "completion_tokens": 77, "duration": 5.14144229888916}
{"task_id": "HumanEval/150", "generated_code": "import sympy\n\ndef x_or_y(n, x, y):\n    # Check if n is a prime number\n    if sympy.isprime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 126, "completion_tokens": 47, "duration": 4.706126689910889}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    # Iterate through the list elements\n    for num in lst:\n        # Check if the number is a positive odd integer\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            # Square the number and add to the sum\n            sum_of_squares += num ** 2\n    # Return the double of the sum of squares\n    return 2 * sum_of_squares", "prompt_tokens": 177, "completion_tokens": 121, "duration": 3.832669496536255}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    # Create an empty list to store the results\n    results = []\n    \n    # Iterate through each match\n    for i in range(len(game)):\n        # Calculate the absolute difference between the guess and the score\n        diff = abs(guess[i] - game[i])\n        \n        # Append the difference to the results list\n        results.append(diff)\n    \n    # Return the list of differences\n    return results", "prompt_tokens": 270, "completion_tokens": 94, "duration": 6.065581321716309}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    # Create a dictionary to store the strength of each extension\n    strength_dict = {}\n    \n    # Calculate the strength of each extension and store in the dictionary\n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        strength_dict[extension] = cap_count - sm_count\n    \n    # Find the strongest extension\n    strongest_extension = max(strength_dict, key=strength_dict.get)\n    \n    # Return the result in the required format\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 317, "completion_tokens": 142, "duration": 4.390162229537964}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    # Check if the length of both words are equal\n    if len(a) != len(b):\n        return False\n    \n    # Concatenate the first word with itself to check for all possible rotations\n    a = a + a\n    \n    # Check if the second word is a substring of the concatenated first word\n    return b in a", "prompt_tokens": 169, "completion_tokens": 82, "duration": 3.6271889209747314}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num: int) -> tuple:\n    # Convert the integer to a string\n    num_str = str(abs(num))\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through each digit in the string\n    for digit in num_str:\n        # Check if the digit is even\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return a tuple of even and odd counts\n    return (even_count, odd_count)", "prompt_tokens": 105, "completion_tokens": 133, "duration": 4.554789781570435}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number: int) -> str:\n    # Define the mapping of roman numeral symbols to their values\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv',\n        1: 'i'\n    }\n    \n    result = ''\n    # Iterate through the roman numeral symbols and their values\n    for value, symbol in roman_numerals.items():\n        # Repeat adding the symbol while the value is less than the number\n        while number >= value:\n            result += symbol\n            number -= value\n    \n    return result", "prompt_tokens": 141, "completion_tokens": 184, "duration": 6.4923789501190186}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    # Sort the sides in ascending order\n    sides = [a, b, c]\n    sides.sort()\n    \n    # Check if the sides form a right-angled triangle using Pythagorean theorem\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False", "prompt_tokens": 148, "completion_tokens": 87, "duration": 5.148985862731934}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # create a dictionary to store unique character count for each word\n    unique_chars = {word: len(set(word)) for word in words}\n    \n    # find the maximum unique character count\n    max_count = max(unique_chars.values())\n    \n    # filter words with maximum unique character count\n    max_words = [word for word, count in unique_chars.items() if count == max_count]\n    \n    # find the word that comes first in lexicographical order\n    result = min(max_words)\n    \n    return result", "prompt_tokens": 160, "completion_tokens": 117, "duration": 3.878995180130005}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    # Calculate the total number of eaten carrots after your meals\n    total_carrots = number + need\n    # Calculate the number of carrots left after your meals\n    left_carrots = max(remaining - need, 0)\n    return [total_carrots, left_carrots]", "prompt_tokens": 317, "completion_tokens": 71, "duration": 5.137155532836914}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    # Initialize the result with the first operand\n    result = operand[0]\n    \n    # Iterate through the operators and operands\n    for i in range(len(operator)):\n        # Apply the operator to the current result and the next operand\n        if operator[i] == '+':\n            result = result + operand[i + 1]\n        elif operator[i] == '-':\n            result = result - operand[i + 1]\n        elif operator[i] == '*':\n            result = result * operand[i + 1]\n        elif operator[i] == '//':\n            result = result // operand[i + 1]\n        elif operator[i] == '**':\n            result = result ** operand[i + 1]\n    \n    # Return the final result\n    return result", "prompt_tokens": 247, "completion_tokens": 168, "duration": 5.627399682998657}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Check if the string contains any letters\n    if any(char.isalpha() for char in s):\n        # Iterate through each character in the string\n        for char in s:\n            # Check if the character is a letter\n            if char.isalpha():\n                # Reverse the case of the letter and add it to the result\n                result += char.swapcase()\n            else:\n                # Add non-letter characters as they are to the result\n                result += char\n    else:\n        # If the string contains no letters, reverse the string\n        result = s[::-1]\n    \n    return result", "prompt_tokens": 147, "completion_tokens": 149, "duration": 4.57085394859314}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "prompt_tokens": 116, "completion_tokens": 42, "duration": 3.1679024696350098}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    # create a list to store the even digits\n    result = []\n    \n    # iterate over the range from a to b (inclusive)\n    for i in range(a, b+1):\n        # check if the current number is even\n        if i % 2 == 0:\n            result.append(i)\n    \n    return result", "prompt_tokens": 144, "completion_tokens": 82, "duration": 3.5913422107696533}
