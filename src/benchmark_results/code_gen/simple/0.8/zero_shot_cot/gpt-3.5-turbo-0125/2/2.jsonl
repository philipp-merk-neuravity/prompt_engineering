{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Iterate through the list of numbers\n    for i in range(len(numbers) - 1):\n        # Check if the absolute difference between adjacent numbers is less than the threshold\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    \n    return False", "prompt_tokens": 163, "completion_tokens": 93, "duration": 2.279186487197876}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store separate groups\n    groups = []\n    \n    # Initialize a counter for opening parentheses\n    open_count = 0\n    \n    # Initialize a string to store the current group\n    current_group = \"\"\n    \n    # Iterate through each character in the input string\n    for char in paren_string:\n        # Add the character to the current group\n        current_group += char\n        \n        # Update the count of opening parentheses\n        if char == \"(\":\n            open_count += 1\n        elif char == \")\":\n            open_count -= 1\n        \n        # If the count becomes zero, it means a group is complete\n        if open_count == 0:\n            # Add the current group to the list of groups\n            groups.append(current_group)\n            # Reset the current group for the next iteration\n            current_group = \"\"\n    \n    return groups", "prompt_tokens": 154, "completion_tokens": 218, "duration": 4.463831186294556}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    # Convert the given number to integer to get the integer part\n    integer_part = int(number)\n    # Get the decimal part by subtracting the integer part from the original number\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 125, "completion_tokens": 66, "duration": 2.0749731063842773}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    # Initialize balance as 0\n    balance = 0\n    \n    # Iterate through each operation\n    for op in operations:\n        # Update the balance\n        balance += op\n        \n        # Check if balance falls below zero\n        if balance < 0:\n            return True\n    \n    return False", "prompt_tokens": 158, "completion_tokens": 78, "duration": 1.9021482467651367}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences between each element and the mean\n    abs_diff = [abs(num - mean) for num in numbers]\n    \n    # Calculate the mean of the absolute differences\n    mad = sum(abs_diff) / len(numbers)\n    \n    return mad", "prompt_tokens": 156, "completion_tokens": 93, "duration": 2.1234583854675293}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate over the input list 'numbers'\n    for num in numbers:\n        result.extend([num, delimeter])\n    \n    # Remove the last delimeter from the result list\n    result.pop()\n    \n    return result", "prompt_tokens": 131, "completion_tokens": 84, "duration": 2.298962116241455}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string by spaces to separate different groups of parentheses\n    groups = paren_string.split()\n    \n    # Initialize an empty list to store the deepest level of nesting for each group\n    result = []\n    \n    # Iterate through each group of parentheses\n    for group in groups:\n        # Initialize variables to keep track of current level and maximum level of nesting\n        current_level = 0\n        max_level = 0\n        \n        # Iterate through each character in the group\n        for char in group:\n            if char == '(':\n                # Increase the current level when encountering an open parenthesis\n                current_level += 1\n            elif char == ')':\n                # Update the maximum level if the current level is greater\n                max_level = max(max_level, current_level)\n                # Decrease the current level when encountering a close parenthesis\n                current_level -= 1\n        \n        # Append the maximum level of nesting for the current group to the result list\n        result.append(max_level)\n    \n    return result", "prompt_tokens": 151, "completion_tokens": 228, "duration": 3.736473798751831}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Create an empty list to store strings that contain the given substring\n    result = []\n    \n    # Iterate through each string in the input list\n    for s in strings:\n        # Check if the substring is in the current string\n        if substring in s:\n            # If the substring is found, add the string to the result list\n            result.append(s)\n    \n    # Return the list of strings that contain the given substring\n    return result", "prompt_tokens": 132, "completion_tokens": 116, "duration": 2.7687482833862305}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Calculate the sum of the numbers in the list\n    sum_result = sum(numbers) if numbers else 0\n    # Calculate the product of the numbers in the list\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    # Return a tuple of the sum and the product\n    return sum_result, product_result", "prompt_tokens": 149, "completion_tokens": 89, "duration": 2.4138529300689697}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store the rolling maximum values\n    rolling_max_list = []\n    \n    # Initialize a deque to store the indices of elements\n    indices = deque()\n    \n    for i, num in enumerate(numbers):\n        # Remove indices of elements that are no longer in the window\n        while indices and indices[0] < i - 2:\n            indices.popleft()\n        \n        # Remove indices of elements smaller than the current element\n        while indices and numbers[indices[-1]] < num:\n            indices.pop()\n        \n        # Append the current index to the deque\n        indices.append(i)\n        \n        # Append the rolling maximum value to the result list\n        rolling_max_list.append(numbers[indices[0]])\n    \n    return rolling_max_list", "prompt_tokens": 139, "completion_tokens": 173, "duration": 3.158263921737671}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    \n    # Helper function to check if a string is a palindrome\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    # Find the longest postfix of supplied string that is a palindrome\n    postfix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            postfix = string[i:]\n            break\n    \n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    prefix = string[:len(string) - len(postfix)]\n    return prefix + postfix + prefix[::-1]", "prompt_tokens": 182, "completion_tokens": 149, "duration": 2.8168046474456787}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    # Convert input strings to integers\n    int_a = int(a, 2)\n    int_b = int(b, 2)\n    \n    # Perform XOR operation on the integers\n    result = int_a ^ int_b\n    \n    # Convert the result back to binary string\n    result_str = format(result, 'b')\n    \n    return result_str", "prompt_tokens": 115, "completion_tokens": 91, "duration": 2.300733804702759}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    # Return None if the input list is empty\n    if not strings:\n        return None\n    \n    # Find the longest string\n    max_len = max(len(s) for s in strings)\n    \n    # Find the first longest string\n    for s in strings:\n        if len(s) == max_len:\n            return s", "prompt_tokens": 141, "completion_tokens": 85, "duration": 2.0221712589263916}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Check if b is 0, then return a\n    if b == 0:\n        return a\n    # Otherwise, recursively call the function with b and a mod b\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 110, "completion_tokens": 74, "duration": 1.9858238697052002}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    # Initialize an empty list to store the prefixes\n    prefixes = []\n    \n    # Iterate over the string and add prefixes to the list\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n        \n    return prefixes", "prompt_tokens": 98, "completion_tokens": 72, "duration": 1.9572458267211914}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    # Use list comprehension to generate a list of numbers from 0 to n\n    numbers = [str(num) for num in range(n+1)]\n    # Join the list of numbers with spaces and return as a string\n    return ' '.join(numbers)", "prompt_tokens": 108, "completion_tokens": 68, "duration": 1.883042573928833}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase\n    string = string.lower()\n    \n    # Create a set to store unique characters\n    unique_chars = set()\n    \n    # Iterate through each character in the string and add it to the set\n    for char in string:\n        unique_chars.add(char)\n    \n    # Return the length of the set, which gives the count of distinct characters\n    return len(unique_chars)", "prompt_tokens": 110, "completion_tokens": 100, "duration": 2.267761468887329}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    # Replace special characters with numbers\n    music_string = music_string.replace('o', '4').replace('o|', '2').replace('.|', '1')\n\n    # Split the string by space and convert each element to integer\n    notes = [int(note) for note in music_string.split()]\n\n    return notes", "prompt_tokens": 211, "completion_tokens": 85, "duration": 2.170891284942627}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    # If either string or substring is empty, return 0\n    if not string or not substring:\n        return 0\n    \n    # Initialize a count variable to keep track of occurrences\n    count = 0\n    \n    # Iterate over the string to find the substring\n    for i in range(len(string) - len(substring) + 1):\n        # Check if the substring matches the slice of the string\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    \n    return count", "prompt_tokens": 128, "completion_tokens": 128, "duration": 2.7480266094207764}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    # Create a dictionary to map number words to their corresponding numerical values\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of number words\n    number_words = numbers.split()\n    \n    # Sort the number words based on their numerical values\n    sorted_number_words = sorted(number_words, key=lambda x: number_map[x])\n    \n    # Join the sorted number words into a string\n    return ' '.join(sorted_number_words)", "prompt_tokens": 144, "completion_tokens": 178, "duration": 3.732928514480591}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Initialize variables to store the closest pair and their difference\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = numbers[1] - numbers[0]\n    \n    # Iterate through the list and update the closest pair\n    for i in range(1, len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            closest_pair = (numbers[i], numbers[i+1])\n            min_diff = diff\n\n    return closest_pair", "prompt_tokens": 205, "completion_tokens": 150, "duration": 2.989926815032959}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the minimum and maximum numbers in the list\n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    # Calculate the range of the numbers\n    range_nums = max_num - min_num\n    \n    # Apply linear transformation to rescale the numbers\n    rescaled_numbers = [(num - min_num) / range_nums for num in numbers]\n    \n    return rescaled_numbers", "prompt_tokens": 162, "completion_tokens": 101, "duration": 2.101750612258911}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Create an empty list to store the integers\n    integers = []\n    \n    # Iterate through each element in the given list\n    for value in values:\n        # Check if the element is an integer\n        if isinstance(value, int):\n            # If it is an integer, add it to the integers list\n            integers.append(value)\n    \n    return integers", "prompt_tokens": 130, "completion_tokens": 94, "duration": 2.2427358627319336}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    # Return the length of the input string\n    return len(string)", "prompt_tokens": 83, "completion_tokens": 28, "duration": 1.3399555683135986}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    # Check all numbers from n-1 down to 1\n    for i in range(n-1, 0, -1):\n        # If i divides n evenly, return i\n        if n % i == 0:\n            return i", "prompt_tokens": 92, "completion_tokens": 68, "duration": 1.8079612255096436}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    # Initialize an empty list to store the prime factors\n    factors = []\n    # Start with 2, which is the smallest prime number\n    divisor = 2\n    # Keep dividing the number by the divisor until it is no longer divisible\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 165, "completion_tokens": 112, "duration": 2.2900502681732178}
{"task_id": "HumanEval/26", "generated_code": "from collections import Counter  # Import Counter from collections module\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:  # Define function\n    counts = Counter(numbers)  # Count occurrences of each element\n    result = [num for num in numbers if counts[num] == 1]  # Keep elements that occur only once\n    return result  # Return the result list", "prompt_tokens": 123, "completion_tokens": 78, "duration": 2.091820240020752}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    # Use a list comprehension to flip the case of each character in the string\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 88, "completion_tokens": 53, "duration": 1.5883681774139404}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    # Join the list of strings into a single string using the join() method\n    return ''.join(strings)", "prompt_tokens": 96, "completion_tokens": 38, "duration": 1.3434545993804932}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Create an empty list to store filtered strings\n    filtered_strings = []\n    \n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, add it to the filtered list\n            filtered_strings.append(string)\n    \n    return filtered_strings", "prompt_tokens": 126, "completion_tokens": 98, "duration": 2.2875499725341797}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    # Create an empty list to store positive numbers\n    positive_nums = []\n    \n    # Iterate through the elements in the input list\n    for num in l:\n        # Check if the number is positive\n        if num > 0:\n            # If positive, add it to the positive_nums list\n            positive_nums.append(num)\n    \n    # Return the list of positive numbers\n    return positive_nums", "prompt_tokens": 153, "completion_tokens": 95, "duration": 5.012606859207153}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n: int) -> bool:\n    # 1 is not a prime number\n    if n <= 1:\n        return False\n\n    # check for factors from 2 to the square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True", "prompt_tokens": 139, "completion_tokens": 87, "duration": 3.177558183670044}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    n = len(xs) - 1\n    roots = []\n    for i in range(1, n, 2):\n        discriminant = xs[i-1]**2 - 4*xs[i-2]*xs[i]\n        if discriminant >= 0:\n            root1 = (-xs[i-1] + math.sqrt(discriminant)) / (2*xs[i-2])\n            root2 = (-xs[i-1] - math.sqrt(discriminant)) / (2*xs[i-2])\n            roots.extend([root1, root2])\n    return roots[0]", "prompt_tokens": 298, "completion_tokens": 136, "duration": 2.7369747161865234}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    non_divisible = [l[i] for i in range(len(l)) if i % 3 != 0] # extract elements that are not divisible by three\n    divisible = sorted([l[i] for i in range(len(l)) if i % 3 == 0]) # extract elements that are divisible by three and sort them\n    result = [non_divisible.pop(0) if i % 3 != 0 else divisible.pop(0) for i in range(len(l))] # merge the two lists alternately\n    return result", "prompt_tokens": 190, "completion_tokens": 126, "duration": 2.6032979488372803}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    # Step 1: Convert the list into a set to remove duplicates\n    unique_set = set(l)\n    \n    # Step 2: Sort the unique elements\n    unique_sorted = sorted(unique_set)\n    \n    return unique_sorted", "prompt_tokens": 113, "completion_tokens": 54, "duration": 1.6864323616027832}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    # Sort the list in ascending order\n    l.sort()\n    \n    # Return the last element of the sorted list\n    return l[-1]", "prompt_tokens": 122, "completion_tokens": 42, "duration": 1.462186336517334}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    # Initialize count variable to keep track of the number of times digit 7 appears\n    count = 0\n    \n    # Iterate over integers from 1 to n-1\n    for num in range(1, n):\n        # Check if the number is divisible by 11 or 13 and contains digit 7\n        if (num % 11 == 0 or num % 13 == 0) and '7' in str(num):\n            # Increment count if condition is met\n            count += 1\n    \n    # Return the final count\n    return count", "prompt_tokens": 119, "completion_tokens": 132, "duration": 2.659790277481079}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Create a new list to store the sorted values\n    sorted_even = sorted([x for x in l if l.index(x) % 2 == 0])\n    \n    # Iterate over the original list and update the even indices with the sorted values\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = sorted_even.pop(0)\n    \n    return l", "prompt_tokens": 163, "completion_tokens": 98, "duration": 2.3419227600097656}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 198, "completion_tokens": 113, "duration": 2.4217278957366943}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def generate_fibonacci(n):\n        fib_sequence = [0, 1]\n        while len(fib_sequence) <= n:\n            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n        return fib_sequence\n    \n    fib_sequence = generate_fibonacci(2*n) # Generate Fibonacci sequence up to 2*n\n    prime_fibonacci = [num for num in fib_sequence if is_prime(num)] # Filter out prime numbers from Fibonacci sequence\n    return prime_fibonacci[n-1] # Return the n-th prime Fibonacci number", "prompt_tokens": 137, "completion_tokens": 182, "duration": 3.4981329441070557}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    # Sort the list\n    l.sort()\n    \n    # Iterate over each element in the list\n    for i in range(len(l) - 2):\n        # Initialize two pointers at the start and end of the list\n        left = i + 1\n        right = len(l) - 1\n        \n        # Loop until the two pointers meet\n        while left < right:\n            # Calculate the sum of three elements\n            total = l[i] + l[left] + l[right]\n            \n            # Check if the sum is zero\n            if total == 0:\n                return True\n            elif total < 0:\n                # If sum is less than zero, move left pointer to the right\n                left += 1\n            else:\n                # If sum is greater than zero, move right pointer to the left\n                right -= 1\n                \n    return False", "prompt_tokens": 199, "completion_tokens": 195, "duration": 2.9546804428100586}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    # Calculate the number of collisions using combinatorics formula\n    collisions = n * (n - 1) // 2\n    return collisions", "prompt_tokens": 191, "completion_tokens": 39, "duration": 1.1375858783721924}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    # Create an empty list to store the incremented elements\n    result = []\n    \n    # Iterate through the elements of the input list\n    for num in l:\n        # Increment each element by 1 and append to the result list\n        result.append(num + 1)\n        \n    # Return the list with incremented elements\n    return result", "prompt_tokens": 148, "completion_tokens": 82, "duration": 3.7606706619262695}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    # Loop through each element in the list\n    for i in range(len(l)):\n        # Loop through remaining elements to check for pairs\n        for j in range(i+1, len(l)):\n            # Check if sum of elements is zero\n            if l[i] + l[j] == 0:\n                return True\n    return False", "prompt_tokens": 197, "completion_tokens": 83, "duration": 2.2660725116729736}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    # define a list to store remainders\n    result = []\n    \n    # loop until x is greater than 0\n    while x > 0:\n        # find the remainder when dividing x by base\n        remainder = x % base\n        \n        # add the remainder to the result list\n        result.append(str(remainder))\n        \n        # update x to be the result of integer division of x by base\n        x = x // base\n    \n    # return the result list reversed and joined as a string\n    return ''.join(result[::-1])", "prompt_tokens": 131, "completion_tokens": 128, "duration": 4.117316484451294}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    # Calculate the area of the triangle\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 86, "completion_tokens": 36, "duration": 0.9741175174713135}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    \n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n        \n    return d", "prompt_tokens": 211, "completion_tokens": 119, "duration": 4.287934303283691}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    # Sort the list\n    l.sort()\n    # Check if the length of the list is odd or even\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "prompt_tokens": 115, "completion_tokens": 86, "duration": 3.821977376937866}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    # Remove whitespaces and convert text to lowercase\n    text = text.replace(' ', '').lower()\n    \n    # Check if the reversed text is equal to the original text\n    return text == text[::-1]", "prompt_tokens": 111, "completion_tokens": 56, "duration": 3.306159734725952}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    # Calculate 2^n\n    result = 2 ** n\n    # Calculate result modulo p\n    return result % p", "prompt_tokens": 145, "completion_tokens": 43, "duration": 3.844597816467285}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    # Decode each character by shifting it back by 5 in the alphabet\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 130, "completion_tokens": 59, "duration": 1.2309470176696777}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each character in the input text\n    for char in text:\n        # Check if the character is a vowel or not\n        if char.lower() not in \"aeiou\":\n            # If the character is not a vowel, add it to the result string\n            result += char\n            \n    # Return the final result string without vowels\n    return result", "prompt_tokens": 162, "completion_tokens": 103, "duration": 3.8740785121917725}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    # Check if all elements in the list are below the threshold\n    return all(num < t for num in l)", "prompt_tokens": 119, "completion_tokens": 36, "duration": 3.5895488262176514}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    # Return the sum of x and y\n    return x + y", "prompt_tokens": 93, "completion_tokens": 30, "duration": 2.953566551208496}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    # Sort characters in both strings\n    s0_sorted = ''.join(sorted(s0))\n    s1_sorted = ''.join(sorted(s1))\n    \n    # Check if the sorted strings are equal\n    return s0_sorted == s1_sorted", "prompt_tokens": 180, "completion_tokens": 68, "duration": 3.3180830478668213}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    # Define base cases for the first two Fibonacci numbers\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Initialize variables to store the first two Fibonacci numbers\n    a, b = 0, 1\n    \n    # Iterate to calculate the n-th Fibonacci number\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    \n    return b", "prompt_tokens": 92, "completion_tokens": 108, "duration": 3.7033586502075195}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    # Initialize a counter variable to keep track of the balance of brackets\n    balance = 0\n    \n    # Iterate through each character in the input string\n    for char in brackets:\n        # If the character is an opening bracket, increment the balance\n        if char == '<':\n            balance += 1\n        # If the character is a closing bracket, decrement the balance\n        elif char == '>':\n            balance -= 1\n        # If the balance becomes negative at any point, return False\n        if balance < 0:\n            return False\n    \n    # If the balance is zero at the end, return True, otherwise return False\n    return balance == 0", "prompt_tokens": 132, "completion_tokens": 149, "duration": 4.4995973110198975}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    # Check if the list is sorted in increasing order\n    if l == sorted(l):\n        return True\n    # Check if the list is sorted in decreasing order\n    elif l == sorted(l, reverse=True):\n        return True\n    else:\n        return False", "prompt_tokens": 127, "completion_tokens": 62, "duration": 3.614189624786377}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    # Find the common elements between the two lists\n    common_elements = list(set(l1) & set(l2))\n    \n    # Sort the common elements\n    sorted_common = sorted(common_elements)\n    \n    return sorted_common", "prompt_tokens": 154, "completion_tokens": 63, "duration": 1.7162210941314697}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Find the largest prime factor of n\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factor = n // i\n            if is_prime(factor):\n                return factor\n        i += 1", "prompt_tokens": 103, "completion_tokens": 131, "duration": 5.029647350311279}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    # Calculate the sum of numbers from 1 to n\n    return n*(n+1)//2", "prompt_tokens": 134, "completion_tokens": 35, "duration": 3.108276128768921}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    # Initialize a variable to keep track of the count of opening brackets\n    count = 0\n    \n    # Iterate through each character in the brackets string\n    for bracket in brackets:\n        # Increment the count if an opening bracket is encountered\n        if bracket == '(':\n            count += 1\n        # Decrement the count if a closing bracket is encountered\n        elif bracket == ')':\n            count -= 1\n            # If the count goes negative at any point, return False\n            if count < 0:\n                return False\n    \n    # If the count is 0 at the end, return True (every opening bracket has a closing bracket)\n    return count == 0", "prompt_tokens": 129, "completion_tokens": 156, "duration": 4.503289461135864}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    # Initialize an empty list to store the derivative coefficients\n    result = []\n    \n    # Iterate over the input list, starting from index 1\n    for i in range(1, len(xs)):\n        # Calculate the derivative coefficient and append to the result list\n        result.append(xs[i] * i)\n    \n    return result", "prompt_tokens": 148, "completion_tokens": 79, "duration": 3.9780313968658447}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    fib = [0, 0, 1]  # Initializing the first three elements of the fibfib sequence\n    for i in range(3, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3])  # Computing the next element based on the definition\n    \n    return fib[n]  # Returning the n-th element of the fibfib sequence", "prompt_tokens": 189, "completion_tokens": 134, "duration": 4.9835045337677}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    # Convert the input string to lowercase\n    s = s.lower()\n    \n    # Count the number of vowels in the string\n    count = sum(1 for char in s if char in 'aeiouy' or (char == 'y' and s.index(char) == len(s)-1))\n    \n    return count", "prompt_tokens": 166, "completion_tokens": 77, "duration": 3.347141981124878}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x: int, shift: int) -> str:\n    # Convert integer x to a string\n    x_str = str(x)\n    \n    # Calculate the effective shift by taking modulo of shift with the length of x_str\n    effective_shift = shift % len(x_str)\n    \n    # Perform the circular shift by slicing the string and concatenating it in reverse order\n    shifted_str = x_str[-effective_shift:] + x_str[:-effective_shift]\n    \n    # Return the result as a string\n    return shifted_str", "prompt_tokens": 122, "completion_tokens": 114, "duration": 5.059682130813599}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    # Initialize a variable to store the sum of upper characters ASCII codes\n    total_sum = 0\n    \n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Add the ASCII code of the uppercase character to the total sum\n            total_sum += ord(char)\n    \n    # Return the total sum\n    return total_sum", "prompt_tokens": 152, "completion_tokens": 98, "duration": 1.6553115844726562}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s: str, n: int) -> int:\n    # Split the input string by spaces\n    fruits = s.split()\n    \n    # Extract the number of apples and oranges from the splitted string\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    \n    # Calculate the number of mango fruits by subtracting apples and oranges from the total fruits\n    mangoes = n - apples - oranges\n    \n    return mangoes", "prompt_tokens": 250, "completion_tokens": 101, "duration": 4.268286943435669}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    # Initialize variables to store the smallest even value and its index\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    \n    # Iterate through the array to find the smallest even value and its index\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even = arr[i]\n            smallest_index = i\n    \n    # Return the result as a list [smallest_even, smallest_index] or an empty list if no even values were found\n    return [] if smallest_even == float('inf') else [smallest_even, smallest_index]", "prompt_tokens": 352, "completion_tokens": 143, "duration": 4.8648295402526855}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    \n    # Count the frequency of each element in the list\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Iterate over the dictionary to find the desired integer\n    result = -1\n    for key, value in freq.items():\n        if key > 0 and value >= key:\n            result = max(result, key)\n    \n    return result", "prompt_tokens": 205, "completion_tokens": 123, "duration": 4.389815807342529}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    # Sort the list\n    lst.sort()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through half of the list length\n    for i in range(len(lst)//2):\n        # Append the ith element from the beginning of the list\n        result.append(lst[i])\n        # Append the ith element from the end of the list\n        result.append(lst[-(i+1)])\n    \n    # If the length of the list is odd, append the middle element\n    if len(lst) % 2 == 1:\n        result.append(lst[len(lst)//2])\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 142, "duration": 4.34928822517395}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 161, "completion_tokens": 137, "duration": 4.3267152309417725}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    # Check if the list is palindromic\n    if q == q[::-1]:\n        # Check if the sum of elements is less than or equal to the maximum weight\n        if sum(q) <= w:\n            return True\n    return False", "prompt_tokens": 270, "completion_tokens": 67, "duration": 1.2851588726043701}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    # Calculate the number of changes needed from the start to make the array palindromic\n    start_changes = 0\n    for i in range(len(arr)//2):\n        start_changes += abs(arr[i] - arr[len(arr)-1-i])\n\n    # Calculate the number of changes needed from the end to make the array palindromic\n    end_changes = 0\n    for i in range(len(arr)//2):\n        end_changes += abs(arr[i] - arr[len(arr)-1-i])\n\n    return min(start_changes, end_changes)", "prompt_tokens": 197, "completion_tokens": 124, "duration": 3.757477283477783}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    # Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    # Compare the total number of characters and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 233, "completion_tokens": 114, "duration": 2.4070956707000732}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a: int) -> bool:\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Iterate through all possible combinations of 3 prime numbers less than 100\n    for i in range(2, 100):\n        if is_prime(i):\n            for j in range(i, 100):\n                if is_prime(j):\n                    for k in range(j, 100):\n                        if is_prime(k) and i*j*k == a:\n                            return True\n    return False", "prompt_tokens": 119, "completion_tokens": 162, "duration": 4.43125319480896}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    # Check if x is 1\n    if x == 1:\n        return True\n    \n    # Initialize power to 1\n    power = 1\n    \n    # Loop until the power of n is less than or equal to x\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    \n    return False", "prompt_tokens": 182, "completion_tokens": 87, "duration": 4.5803258419036865}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    # Return True if a is a cube of some integer number, otherwise return False\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 150, "completion_tokens": 51, "duration": 3.224959373474121}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Define a list of prime hexadecimal digits\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    \n    # Initialize a counter for prime digits\n    prime_count = 0\n    \n    # Iterate over each character in the input hexadecimal number\n    for char in num:\n        # Check if the character is a prime hexadecimal digit\n        if char in primes:\n            prime_count += 1\n            \n    return prime_count", "prompt_tokens": 339, "completion_tokens": 105, "duration": 4.048984050750732}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    # Convert the decimal number to binary\n    binary = bin(decimal)[2:]\n    \n    # Return the binary number with extra characters 'db'\n    return f\"db{binary}db\"", "prompt_tokens": 179, "completion_tokens": 50, "duration": 3.1907966136932373}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    # Check if the length of the string is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Check if every 3 consecutive letters are distinct\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 161, "completion_tokens": 103, "duration": 4.434568643569946}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    # Define a dictionary that maps GPAs to letter grades\n    grade_mapping = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n    \n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n    \n    # Iterate through the given GPAs and find the corresponding letter grade\n    for gpa in grades:\n        for key in grade_mapping:\n            if gpa >= key:\n                letter_grades.append(grade_mapping[key])\n                break\n                \n    return letter_grades", "prompt_tokens": 310, "completion_tokens": 222, "duration": 6.356740951538086}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    # Check if the length of the string is less than 2\n    if len(string) < 2:\n        return False\n    # Check if the length of the string is a prime number\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 121, "completion_tokens": 90, "duration": 3.4753682613372803}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    # initialize count variable to 0\n    count = 0\n    \n    # loop through all n-digit positive integers\n    for i in range(10**(n-1), 10**n):\n        # check if the number starts or ends with 1\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    \n    return count", "prompt_tokens": 84, "completion_tokens": 96, "duration": 4.297313928604126}
{"task_id": "HumanEval/84", "generated_code": "def solve(N: int) -> str:\n    # Convert the integer N to binary string\n    binary_str = bin(N)[2:]\n    \n    # Calculate the sum of digits in the binary string\n    total_sum = sum(int(digit) for digit in binary_str)\n    \n    # Convert the total sum to binary string and return\n    return bin(total_sum)[2:]", "prompt_tokens": 173, "completion_tokens": 81, "duration": 1.5979549884796143}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    # filter out the elements at odd indices\n    odd_indices = [lst[i] for i in range(1, len(lst), 2)]\n    \n    # filter out the even elements from the odd indices\n    even_elements = [num for num in odd_indices if num % 2 == 0]\n    \n    # sum the even elements\n    return sum(even_elements)", "prompt_tokens": 95, "completion_tokens": 87, "duration": 3.615769386291504}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    # Split the input string into words\n    words = s.split()\n    \n    # Create an empty list to store modified words\n    ordered_words = []\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Sort the characters of the word based on ascii value and join them back\n        ordered_word = ''.join(sorted(word))\n        # Append the modified word to the list\n        ordered_words.append(ordered_word)\n    \n    # Join the modified words with spaces to form the final output\n    return ' '.join(ordered_words)", "prompt_tokens": 170, "completion_tokens": 126, "duration": 2.8967232704162598}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    # Initialize an empty list to store coordinates\n    coordinates = []\n    \n    # Iterate over each row in the input list\n    for i, row in enumerate(lst):\n        # Check if x is in the current row\n        if x in row:\n            # Find the column index of x in the current row\n            col_idx = row.index(x)\n            # Append the coordinate to the list of coordinates\n            coordinates.append((i, col_idx))\n    \n    # Sort the list of coordinates by rows in ascending order\n    coordinates.sort(key=lambda tup: tup[0])\n    # Sort the coordinates of each row by columns in descending order\n    coordinates = [(row, col) for row, col in sorted(coordinates, key=lambda tup: tup[1], reverse=True)]\n    \n    return coordinates", "prompt_tokens": 299, "completion_tokens": 175, "duration": 3.23354172706604}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    # Check if the sum of the first and last elements is odd\n    if (array[0] + array[-1]) % 2 != 0:\n        # Sort the array in ascending order\n        return sorted(array)\n    else:\n        # Sort the array in descending order\n        return sorted(array, reverse=True)", "prompt_tokens": 243, "completion_tokens": 77, "duration": 2.184664011001587}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    # Create an empty string to store the encrypted result\n    result = ''\n    \n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Define the shift value\n    shift = 2 * 2\n    \n    # Loop through each character in the input string\n    for char in s:\n        if char.isalpha():\n            # Find the index of the character in the alphabet\n            index = alphabet.index(char.lower())\n            \n            # Apply the shift and wrap around if needed\n            new_index = (index + shift) % 26\n            \n            # Add the encrypted character to the result string\n            result += alphabet[new_index]\n        else:\n            # If the character is not a letter, keep it unchanged\n            result += char\n    \n    return result", "prompt_tokens": 150, "completion_tokens": 166, "duration": 3.1729989051818848}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    # Check if the length of the list is less than 2\n    if len(lst) < 2:\n        return None\n\n    # Find the smallest element in the list\n    smallest = min(lst)\n\n    # Remove the smallest element from the list\n    lst.remove(smallest)\n\n    # Find the second smallest element in the modified list\n    second_smallest = min(lst)\n\n    return second_smallest", "prompt_tokens": 164, "completion_tokens": 96, "duration": 2.624234914779663}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Split the input string into sentences using delimiters '.' '?' '!'\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences]\n    sentences = ' '.join(sentences).split('?')\n    sentences = [sentence.strip() for sentence in sentences]\n    sentences = ' '.join(sentences).split('!')\n    sentences = [sentence.strip() for sentence in sentences]\n\n    # Count the number of boredoms by checking if each sentence starts with \"I\"\n    boredom_count = sum(1 for sentence in sentences if sentence.startswith(\"I\"))\n\n    return boredom_count", "prompt_tokens": 147, "completion_tokens": 131, "duration": 2.8396127223968506}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(n, int) for n in [x, y, z]):\n        # Check if one number is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False", "prompt_tokens": 175, "completion_tokens": 84, "duration": 2.3679661750793457}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    # Define a dictionary to map each vowel to the letter 2 places ahead in the alphabet\n    vowel_mapping = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    # Initialize an empty list to store the encoded characters\n    encoded_message = []\n    \n    # Iterate through each character in the message\n    for char in message:\n        # If the character is a vowel, replace it with the mapped value\n        if char in vowel_mapping:\n            encoded_message.append(vowel_mapping[char])\n        # If the character is a letter, swap its case\n        elif char.isalpha():\n            encoded_message.append(char.swapcase())\n        # If the character is not a letter, keep it as it is\n        else:\n            encoded_message.append(char)\n    \n    # Join the list of encoded characters to form the final encoded message\n    return ''.join(encoded_message)", "prompt_tokens": 149, "completion_tokens": 234, "duration": 4.323854923248291}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Define a function to calculate the sum of digits of a number\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    # Find prime numbers in the list and calculate the sum of their digits\n    prime_sums = [sum_of_digits(num) for num in lst if is_prime(num)]\n\n    # Return the maximum sum of digits from prime numbers\n    return max(prime_sums)", "prompt_tokens": 326, "completion_tokens": 169, "duration": 3.5153651237487793}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    # Check if the dictionary is empty\n    if not dict:\n        return False\n    \n    # Get the keys of the dictionary\n    keys = list(dict.keys())\n    \n    # Check if all keys are in lower case\n    if all(key.islower() for key in keys):\n        return True\n    \n    # Check if all keys are in upper case\n    if all(key.isupper() for key in keys):\n        return True\n    \n    return False", "prompt_tokens": 209, "completion_tokens": 98, "duration": 2.223341226577759}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    # Define a helper function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Initialize an empty list to store prime numbers\n    primes = []\n    \n    # Iterate through numbers from 2 to n-1 and check if they are prime\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes", "prompt_tokens": 185, "completion_tokens": 139, "duration": 2.6155972480773926}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    # Get the unit digit of a\n    unit_a = abs(a) % 10\n    # Get the unit digit of b\n    unit_b = abs(b) % 10\n    # Calculate the product of unit digits\n    product = unit_a * unit_b\n    return product", "prompt_tokens": 138, "completion_tokens": 72, "duration": 2.1410882472991943}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s: str) -> int:\n    # Initialize a variable to count the uppercase vowels\n    count = 0\n    # Define a set of uppercase vowels\n    vowels = set('AEIOU')\n    \n    # Iterate over the even indices of the string\n    for i in range(0, len(s), 2):\n        # Check if the character at the even index is an uppercase vowel\n        if s[i] in vowels:\n            count += 1\n    \n    return count", "prompt_tokens": 112, "completion_tokens": 108, "duration": 2.643568992614746}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    # Convert the value to a float number\n    num = float(value)\n    \n    # Check if the number is equidistant from two integers\n    if num - int(num) == 0.5:\n        return int(num) + 1 if num > 0 else int(num) - 1\n\n    # Round the number to the closest integer\n    return round(num)", "prompt_tokens": 196, "completion_tokens": 89, "duration": 1.9539504051208496}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    result = [n]  # Create a list with the first level having n stones\n    for i in range(1, n):  # Loop through levels 2 to n\n        if n % 2 == 0:  # Check if n is even\n            n += 2  # Increase n by 2 for even numbers\n        else:\n            n += 1  # Increase n by 1 for odd numbers\n        result.append(n)  # Append the number of stones in the current level to the result list\n    return result  # Return the list with the number of stones in each level\n\n# Test the function with the example\nprint(make_a_pile(3))", "prompt_tokens": 172, "completion_tokens": 157, "duration": 2.913520574569702}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    # Split the input string by commas or spaces\n    words = s.replace(',', ' ').split()\n    \n    # Return the list of words\n    return words", "prompt_tokens": 156, "completion_tokens": 43, "duration": 1.342236042022705}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x: int, y: int) -> int:\n    # Loop through the range from y to x inclusive\n    for num in range(y, x+1):\n        # Check if the number is even and return it\n        if num % 2 == 0:\n            return num\n    # If no even number is found, return -1\n    return -1", "prompt_tokens": 134, "completion_tokens": 85, "duration": 1.8117711544036865}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n: int, m: int) -> str:\n    if n > m:\n        return -1\n    else:\n        avg = round(sum(range(n, m + 1)) / (m - n + 1))\n        return bin(avg)", "prompt_tokens": 180, "completion_tokens": 59, "duration": 1.6828434467315674}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x: List[int]) -> List[int]:\n    # Filter out numbers with even digits\n    filtered = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    \n    # Sort the filtered list in increasing order\n    result = sorted(filtered)\n    \n    return result", "prompt_tokens": 142, "completion_tokens": 74, "duration": 1.8060779571533203}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # Filter out numbers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    # Map the digits to their corresponding names\n    result = [ \n        \"One\" if num == 1 else\n        \"Two\" if num == 2 else\n        \"Three\" if num == 3 else\n        \"Four\" if num == 4 else\n        \"Five\" if num == 5 else\n        \"Six\" if num == 6 else\n        \"Seven\" if num == 7 else\n        \"Eight\" if num == 8 else\n        \"Nine\" for num in reversed_arr\n    ]\n    \n    return result", "prompt_tokens": 316, "completion_tokens": 192, "duration": 3.4810848236083984}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Loop through indices from 1 to n\n    for i in range(1, n+1):\n        # Check if the index i is even\n        if i % 2 == 0:\n            # Calculate the factorial of i\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Calculate the sum of numbers from 1 to i\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 137, "duration": 2.7984981536865234}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    # Initialize counters for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through numbers from 1 to n (inclusive)\n    for num in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(num) == str(num)[::-1]:\n            # Increment the respective counter based on whether the palindrome is even or odd\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    # Return the counts as a tuple\n    return (even_count, odd_count)", "prompt_tokens": 251, "completion_tokens": 146, "duration": 2.871279239654541}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    # initialize a counter variable\n    count = 0\n    # iterate through each number in the array\n    for num in arr:\n        # convert the number to a string and remove the '-' sign if present\n        num_str = str(abs(num))\n        # calculate the sum of the digits of the number\n        digit_sum = sum(int(digit) for digit in num_str)\n        # if the sum of digits is greater than 0, increment the counter\n        if digit_sum > 0:\n            count += 1\n    return count", "prompt_tokens": 164, "completion_tokens": 124, "duration": 2.4663262367248535}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    # If the array is empty, return True\n    if not arr:\n        return True\n\n    # Find the index of the minimum element in the array\n    min_index = arr.index(min(arr))\n\n    # Check if the array is already sorted in non-decreasing order\n    if arr == sorted(arr):\n        return True\n    else:\n        # Check if shifting the array to the right can result in a sorted array\n        return arr == arr[min_index:] + arr[:min_index]", "prompt_tokens": 339, "completion_tokens": 112, "duration": 2.5437569618225098}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Find the count of odd numbers in lst1\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Find the count of odd numbers in lst2\n    odd_count_2 = sum(1 for num in lst2 if num % 2 != 0)\n    \n    # Check if the count of odd numbers in lst1 is less than or equal to the count of odd numbers in lst2\n    if odd_count <= odd_count_2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 237, "completion_tokens": 132, "duration": 2.413886070251465}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    # Split the string into a list of lowercase letters\n    letters = test.split()\n    \n    # Initialize a dictionary to store the count of each letter\n    count_dict = {}\n    \n    # Loop through the letters list and count the occurrences of each letter\n    for letter in letters:\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n            \n    # Find the maximum count of any letter in the dictionary\n    max_count = max(count_dict.values())\n    \n    # Filter the dictionary to keep only the letters with the maximum count\n    result = {key: value for key, value in count_dict.items() if value == max_count}\n    \n    return result", "prompt_tokens": 191, "completion_tokens": 162, "duration": 3.8906235694885254}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> (str, bool):\n    # Remove characters in s that are equal to any character in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return result, is_palindrome", "prompt_tokens": 202, "completion_tokens": 85, "duration": 2.2250897884368896}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = [] # create an empty list to store the final results\n    for s in lst: # iterate over each string in the input list\n        count = sum(int(d) % 2 != 0 for d in s) # count the number of odd digits in the current string\n        result.append(f\"the number of odd elements {count}n the str{count}ng {s} of the {count}nput.\") # append the formatted string to the result list\n    return result # return the final result list", "prompt_tokens": 213, "completion_tokens": 121, "duration": 2.543623685836792}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    # Initialize variables to store current sum and minimum sum\n    current_sum = 0\n    min_sum = float('inf')\n    \n    # Iterate through the array\n    for num in nums:\n        # Update current sum by adding the current element\n        current_sum += num\n        # Update the minimum sum if the current sum is less\n        min_sum = min(min_sum, current_sum)\n        \n        # Reset current sum to 0 if it becomes negative\n        current_sum = max(current_sum, 0)\n    \n    return min_sum", "prompt_tokens": 128, "completion_tokens": 124, "duration": 2.6370627880096436}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    # Initialize variables\n    total_water = 0\n    num_buckets = 0\n    \n    # Calculate total water in the wells\n    for row in grid:\n        total_water += sum(row)\n    \n    # Calculate number of buckets needed\n    num_buckets = math.ceil(total_water / capacity)\n    \n    # Calculate number of times to lower the buckets\n    return num_buckets", "prompt_tokens": 363, "completion_tokens": 93, "duration": 2.207984209060669}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    # Sort the array based on number of ones in binary representation and then by decimal value\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 210, "completion_tokens": 47, "duration": 1.5510504245758057}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    # Split the input string into individual words\n    words = s.split()\n    \n    # Create an empty list to store words with n consonants\n    result = []\n    \n    # Define a function to count the number of consonants in a word\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n    \n    # Iterate through each word in the list of words\n    for word in words:\n        # Check if the word has exactly n consonants\n        if count_consonants(word) == n:\n            # Append the word to the result list\n            result.append(word)\n    \n    return result", "prompt_tokens": 221, "completion_tokens": 152, "duration": 5.739099025726318}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    word = word[1:-1]  # remove first and last character\n    for i in range(len(word)-1, 0, -1):  # iterate from right to left starting from the second character\n        if word[i] in vowels:\n            for j in range(i-1, 0, -1):  # iterate from the character left of the vowel towards the beginning\n                if word[j] in consonants:  # check if the character is a consonant\n                    return word[i]\n    return \"\"", "prompt_tokens": 189, "completion_tokens": 158, "duration": 5.039330005645752}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    # Concatenate the two strings in the list\n    combined_string = lst[0] + lst[1]\n    \n    # Check if the combined string is balanced\n    stack = []\n    for char in combined_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return 'No'\n            stack.pop()\n    \n    # If the stack is empty at the end, return 'Yes', otherwise return 'No'\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 208, "completion_tokens": 135, "duration": 4.305246591567993}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Get the maximum k numbers from the sorted array\n    return arr[-k:]", "prompt_tokens": 257, "completion_tokens": 42, "duration": 3.2308945655822754}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    # initialize a variable sum to store the sum of odd elements at even positions\n    sum = 0\n    \n    # iterate over the list starting from index 1 (even positions)\n    for i in range(1, len(lst), 2):\n        # check if the element at the current index is odd\n        if lst[i] % 2 != 0:\n            # add the odd element to the sum\n            sum += lst[i]\n    \n    return sum", "prompt_tokens": 137, "completion_tokens": 101, "duration": 2.1805946826934814}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    # Initialize sum to 0\n    total_sum = 0\n    # Iterate over the first k elements of the array\n    for num in arr[:k]:\n        # Check if the element has at most two digits\n        if 10 <= num <= 99:\n            # Add the element to the total sum\n            total_sum += num\n    return total_sum", "prompt_tokens": 168, "completion_tokens": 89, "duration": 4.846343040466309}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    # Initialize an empty list to store the odd numbers in the Collatz sequence\n    result = []\n    \n    # Iterate through the Collatz sequence starting from n until it reaches 1\n    while n != 1:\n        result.append(n) if n % 2 == 1 else None\n        n = n * 3 + 1 if n % 2 == 1 else n // 2\n    \n    # Append 1 to the result list as it is an odd number\n    result.append(1)\n    \n    # Sort the result list in increasing order\n    return sorted(result)", "prompt_tokens": 271, "completion_tokens": 135, "duration": 4.215897560119629}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is not empty\n    if date == '':\n        return False\n    \n    # Split the date string into day, month, and year\n    day, month, year = date.split('-')\n    \n    # Check if the month is between 1 and 12\n    if not 1 <= int(month) <= 12:\n        return False\n    \n    # Check the number of days based on the month\n    if month in ['01', '03', '05', '07', '08', '10', '12']:\n        if not 1 <= int(day) <= 31:\n            return False\n    elif month in ['04', '06', '09', '11']:\n        if not 1 <= int(day) <= 30:\n            return False\n    elif month == '02':\n        # Check for leap year in February\n        if (int(year) % 4 == 0 and int(year) % 100 != 0) or int(year) % 400 == 0:\n            if not 1 <= int(day) <= 29:\n                return False\n        else:\n            if not 1 <= int(day) <= 28:\n                return False\n    \n    return True", "prompt_tokens": 303, "completion_tokens": 264, "duration": 5.8434977531433105}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    # Check if the string contains whitespace\n    if ' ' in txt:\n        return txt.split()\n    # Check if the string contains commas\n    elif ',' in txt:\n        return txt.split(',')\n    # If neither whitespace nor commas are present, count the number of lower-case letters with odd order in the alphabet\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 180, "completion_tokens": 102, "duration": 4.861821413040161}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    # Check if the list has more than 1 duplicate of the same number\n    for num in lst:\n        if lst.count(num) > 1:\n            return False\n    # Check if the list is sorted in ascending order\n    return lst == sorted(lst)", "prompt_tokens": 289, "completion_tokens": 65, "duration": 1.6867239475250244}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    # Find the maximum of the start values of the intervals\n    start = max(interval1[0], interval2[0])\n    \n    # Find the minimum of the end values of the intervals\n    end = min(interval1[1], interval2[1])\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # If the length is less than or equal to 0, the intervals do not intersect\n    if length <= 0:\n        return \"NO\"\n    \n    # Check if the length of the intersection is a prime number\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 294, "completion_tokens": 174, "duration": 3.1340701580047607}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    # Return None for empty arr\n    if not arr:\n        return None\n\n    # Initialize variables for sum of magnitudes and product of signs\n    sum_magnitudes = 0\n    product_signs = 1\n\n    # Iterate through the array\n    for num in arr:\n        # Calculate magnitude and sign\n        magnitude = abs(num)\n        sign = 0 if num == 0 else 1 if num > 0 else -1\n\n        # Update sum of magnitudes and product of signs\n        sum_magnitudes += magnitude\n        product_signs *= sign\n\n    # Return the result\n    return sum_magnitudes * product_signs", "prompt_tokens": 162, "completion_tokens": 150, "duration": 4.578738689422607}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    # Flatten the grid into a 1D list\n    flat_grid = [cell for row in grid for cell in row]\n\n    # Sort the grid values in ascending order\n    sorted_grid = sorted(flat_grid)\n\n    # Return the first k values from the sorted grid\n    return sorted_grid[:k]", "prompt_tokens": 436, "completion_tokens": 76, "duration": 2.023606777191162}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = [0] * (n + 1)\n    tribonacci[1] = 3\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci[i] = 1 + i // 2\n        else:\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]\n    \n    return tribonacci", "prompt_tokens": 1200, "completion_tokens": 362, "duration": 7.064093112945557}
{"task_id": "HumanEval/131", "generated_code": "def digits(n: int) -> int:\n    # Initialize the product as 1\n    product = 1\n    # Iterate through each digit in the number n\n    for digit in str(n):\n        # Convert the digit back to integer\n        digit = int(digit)\n        # Check if the digit is odd\n        if digit % 2 != 0:\n            # Multiply the product by the odd digit\n            product *= digit\n    # Return the final product\n    return product", "prompt_tokens": 111, "completion_tokens": 107, "duration": 4.39609432220459}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > 0:\n            open_brackets -= 1\n    return open_brackets < 0\n\n# Test cases\nprint(is_nested('[[]]')) # True\nprint(is_nested('[]]]]]]][[[[[]')) # False\nprint(is_nested('[][]')) # False\nprint(is_nested('[]')) # False\nprint(is_nested('[[][]]')) # True\nprint(is_nested('[[]][[')) # True", "prompt_tokens": 173, "completion_tokens": 136, "duration": 4.807746887207031}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    # Round each element to the upper integer (Ceiling)\n    lst = [int(x) if x % 1 == 0 else int(x) + 1 for x in lst]\n    \n    # Square each element in the list\n    lst = [x**2 for x in lst]\n    \n    # Return the sum of squared numbers in the list\n    return sum(lst)", "prompt_tokens": 197, "completion_tokens": 90, "duration": 2.028041362762451}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    # If the text is empty, return False\n    if not txt:\n        return False\n    \n    # Split the text by space to get individual words\n    words = txt.split()\n    \n    # Get the last word from the list of words\n    last_word = words[-1]\n    \n    # Get the last character of the last word\n    last_char = last_word[-1]\n    \n    # Check if the last character is an alphabetical character\n    return last_char.isalpha()", "prompt_tokens": 177, "completion_tokens": 114, "duration": 5.156813859939575}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    # Iterate through the array in reverse order\n    for i in range(len(arr)-1, 0, -1):\n        # Check if the element is not greater than or equal to the element immediately preceding it\n        if arr[i] < arr[i-1]:\n            return i - 1\n    return -1", "prompt_tokens": 143, "completion_tokens": 78, "duration": 3.7081923484802246}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    # Filter out negative and positive integers\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n    \n    # Find the largest negative integer or set to None if not found\n    largest_negative = max(negative_integers) if negative_integers else None\n    \n    # Find the smallest positive integer or set to None if not found\n    smallest_positive = min(positive_integers) if positive_integers else None\n    \n    # Return the tuple of largest negative and smallest positive integers\n    return largest_negative, smallest_positive", "prompt_tokens": 178, "completion_tokens": 141, "duration": 5.197636127471924}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "prompt_tokens": 181, "completion_tokens": 38, "duration": 1.2391357421875}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    # Check if n is less than 8 or n is odd\n    if n < 8 or n % 2 != 0:\n        return False\n    \n    # Check if n is divisible by 4\n    if n % 4 == 0:\n        return True\n    else:\n        return False", "prompt_tokens": 117, "completion_tokens": 78, "duration": 4.644323825836182}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    # Initialize the result as 1\n    result = 1\n    # Iterate from n down to 1\n    for i in range(n, 0, -1):\n        # Calculate the factorial of the current number i\n        factorial_i = 1\n        for j in range(i, 0, -1):\n            factorial_i *= j\n        # Multiply the result by the factorial_i\n        result *= factorial_i\n    return result", "prompt_tokens": 135, "completion_tokens": 100, "duration": 1.7229900360107422}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace more than 2 consecutive underscores with a single underscore\n    text = text.replace(\"__\", \"-\")\n    \n    return text", "prompt_tokens": 146, "completion_tokens": 55, "duration": 3.1888766288757324}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if the file name contains more than 3 digits\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    \n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into two parts based on the dot\n    name_parts = file_name.split('.')\n    \n    # Check if the substring before the dot is not empty and starts with a letter\n    if len(name_parts[0]) == 0 or not name_parts[0][0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of ['txt', 'exe', 'dll']\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 254, "completion_tokens": 197, "duration": 5.748403787612915}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    # Initialize a variable to store the sum\n    total = 0\n    # Iterate through the list with both the values and their indexes\n    for i, num in enumerate(lst):\n        # Check if the index is a multiple of 3\n        if i % 3 == 0:\n            total += num ** 2\n        # Check if the index is a multiple of 4 but not a multiple of 3\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        # If the index is neither a multiple of 3 nor 4, add the number as is\n        else:\n            total += num\n    return total", "prompt_tokens": 209, "completion_tokens": 160, "duration": 4.9069154262542725}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Filter out words with prime lengths\n    prime_words = [word for word in words if is_prime(len(word))]\n\n    # Join the prime words back into a string\n    result = ' '.join(prime_words)\n\n    return result", "prompt_tokens": 187, "completion_tokens": 140, "duration": 4.451960802078247}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    # Splitting the fraction strings to extract numerator and denominator\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    # Evaluating the product of the fractions\n    result = x_num * n_num / (x_denom * n_denom)\n\n    # Checking if the result is a whole number\n    return result.is_integer()", "prompt_tokens": 195, "completion_tokens": 98, "duration": 3.777921438217163}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    # Define a helper function to calculate the sum of digits for a number\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    # Sort the numbers based on the sum of their digits and their original index\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 155, "completion_tokens": 84, "duration": 3.6660654544830322}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    # Initialize a counter to keep track of the number of elements that meet the criteria\n    count = 0\n    # Iterate through each number in the input array\n    for num in nums:\n        # Check if the number is greater than 10\n        if num > 10:\n            # Convert the number to a positive integer for digit extraction\n            num = abs(num)\n            # Extract the first digit of the number\n            first_digit = int(str(num)[0])\n            # Extract the last digit of the number\n            last_digit = int(str(num)[-1])\n            # Check if both the first and last digits are odd\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                # Increment the counter if the condition is met\n                count += 1\n    # Return the final count of elements that meet the criteria\n    return count", "prompt_tokens": 159, "completion_tokens": 195, "duration": 5.281139135360718}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    # Create an array 'a' with values based on the given formula\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    # Initialize a counter for valid triples\n    count = 0\n    \n    # Loop through all possible triples and check if their sum is a multiple of 3\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 205, "completion_tokens": 145, "duration": 5.334293842315674}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    \n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indices of planet1 and planet2\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    \n    # Determine the range of planets between planet1 and planet2\n    start_idx = min(idx1, idx2) + 1\n    end_idx = max(idx1, idx2)\n    \n    # Get the list of planets between planet1 and planet2\n    result = planets[start_idx:end_idx]\n    \n    return tuple(result)", "prompt_tokens": 251, "completion_tokens": 184, "duration": 5.236267328262329}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length and then alphabetically\n    filtered_lst.sort(key=lambda x: (len(x), x))\n    \n    return filtered_lst", "prompt_tokens": 227, "completion_tokens": 73, "duration": 3.5531537532806396}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Check if n is prime and return x or y accordingly\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 126, "completion_tokens": 110, "duration": 4.976400136947632}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    # Initialize a variable to store the sum of squares of odd numbers\n    result = 0\n    # Loop through the list\n    for num in lst:\n        # Check if the number is positive, odd, and an integer\n        if num > 0 and num % 2 != 0 and isinstance(num, int):\n            # Add the square of the number to the result\n            result += num**2\n    return result * 2", "prompt_tokens": 177, "completion_tokens": 105, "duration": 3.9547672271728516}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    # Create an empty list to store the differences between guesses and scores\n    differences = []\n    \n    # Iterate through each match\n    for i in range(len(game)):\n        # Calculate the absolute difference between the guess and the score for each match\n        difference = abs(game[i] - guess[i])\n        # Append the difference to the list\n        differences.append(difference)\n    \n    # Return the list of differences\n    return differences", "prompt_tokens": 270, "completion_tokens": 100, "duration": 3.6683411598205566}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    # Create a list of tuples where each tuple contains the extension and its strength\n    extensions_with_strength = [(extension, extension.count(c.upper()) - extension.count(c.lower())) for extension in extensions]\n    \n    # Sort the list of tuples based on the strength in ascending order\n    sorted_extensions = sorted(extensions_with_strength, key=lambda x: x[1])\n    \n    # Get the strongest extension\n    strongest_extension = sorted_extensions[0][0]\n    \n    # Return the formatted string\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 317, "completion_tokens": 127, "duration": 4.091704845428467}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    # Concatenate the first word with itself to check for all possible rotations\n    combined = a + a\n    \n    # Return True if the second word is a substring in the combined string\n    return b in combined", "prompt_tokens": 169, "completion_tokens": 57, "duration": 3.2765491008758545}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n\n    # Convert the number to a string to iterate over its digits\n    num_str = str(abs(num))\n\n    # Iterate over each digit in the string\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 105, "completion_tokens": 102, "duration": 4.687001466751099}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    # Create a dictionary to store the roman numeral values\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl',\n        50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    # Create a list to store the sorted keys in descending order\n    keys = sorted(roman_numerals.keys(), reverse=True)\n    \n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through the keys\n    for key in keys:\n        # While the number is greater or equal to the current key\n        while number >= key:\n            # Add the corresponding roman numeral to the result\n            result += roman_numerals[key]\n            # Subtract the key from the number\n            number -= key\n    \n    return result.lower()", "prompt_tokens": 141, "completion_tokens": 229, "duration": 6.181577920913696}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check if the sides form a right-angled triangle using Pythagorean theorem\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False", "prompt_tokens": 148, "completion_tokens": 84, "duration": 3.9762558937072754}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # Initialize variables to keep track of maximum unique characters and corresponding word\n    max_unique_chars = 0\n    max_word = \"\"\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Calculate the number of unique characters in the word\n        unique_chars = len(set(word))\n        \n        # Check if the current word has more unique characters or has the same number of unique characters but comes before in lexicographical order\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 160, "completion_tokens": 144, "duration": 4.589821100234985}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    # Calculate the total number of carrots eaten after meals\n    total_carrots_eaten = number + min(need, remaining)\n    \n    # Calculate the number of carrots left after meals\n    carrots_left = max(0, remaining - need)\n    \n    return [total_carrots_eaten, carrots_left]", "prompt_tokens": 317, "completion_tokens": 76, "duration": 4.470968723297119}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    # Initialize result to the first element in operand list\n    result = operand[0]\n    \n    # Iterate through the operator list and the rest of the operand list\n    for i in range(len(operator)):\n        # Apply the corresponding operation to the result\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    \n    # Return the final result\n    return result", "prompt_tokens": 247, "completion_tokens": 163, "duration": 5.4362263679504395}
{"task_id": "HumanEval/161", "generated_code": "def solve(s: str) -> str:\n    # Create an empty string to store the result\n    result = \"\"\n    \n    # Check if the string contains any letters\n    if any(char.isalpha() for char in s):\n        # Reverse the case of letters and keep non-letters as they are\n        for char in s:\n            if char.isalpha():\n                result += char.swapcase()\n            else:\n                result += char\n    else:\n        # Reverse the string if it contains no letters\n        result = s[::-1]\n    \n    # Return the final result\n    return result", "prompt_tokens": 147, "completion_tokens": 127, "duration": 4.080118179321289}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        # Step 1: Create an md5 hash object\n        md5_hash = hashlib.md5()\n\n        # Step 2: Update the hash object with the text\n        md5_hash.update(text.encode())\n\n        # Step 3: Get the hexadecimal representation of the hash\n        md5_hash_hex = md5_hash.hexdigest()\n\n        return md5_hash_hex", "prompt_tokens": 116, "completion_tokens": 98, "duration": 5.086449384689331}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a: int, b: int) -> List[int]:\n    # Create an empty list to store the even digits\n    result = []\n    \n    # Iterate through the range from a to b (inclusive)\n    for i in range(a, b+1):\n        # Check if the digit is even\n        if i % 2 == 0:\n            result.append(i)\n    \n    # Return the list of even digits\n    return result", "prompt_tokens": 144, "completion_tokens": 99, "duration": 3.909526824951172}
