{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list of numbers in ascending order\n    numbers.sort()\n    \n    # Iterate through the list of numbers\n    for i in range(len(numbers) - 1):\n        # Calculate the absolute difference between consecutive numbers\n        diff = abs(numbers[i] - numbers[i+1])\n        \n        # Check if the difference is less than the threshold\n        if diff < threshold:\n            return True\n    \n    # Return False if no close elements were found\n    return False", "prompt_tokens": 163, "completion_tokens": 118, "duration": 2.6306240558624268}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store separate groups\n    groups = []\n    \n    # Initialize variables to keep track of parentheses count\n    open_count = 0\n    start_index = 0\n    \n    # Iterate through the characters in the string\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n        \n        # If a balanced group is found, add it to the list\n        if open_count == 0:\n            groups.append(paren_string[start_index:i+1])\n            start_index = i + 1\n    \n    return groups", "prompt_tokens": 154, "completion_tokens": 172, "duration": 3.2137224674224854}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    # Find the integer part of the number\n    integer_part = int(number)\n    \n    # Find the decimal part of the number\n    decimal_part = number - integer_part\n    \n    return decimal_part", "prompt_tokens": 125, "completion_tokens": 56, "duration": 1.8103258609771729}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    # Initialize balance to 0\n    balance = 0\n    \n    # Iterate through each operation in the list\n    for operation in operations:\n        # Update the balance by adding the current operation\n        balance += operation\n        \n        # Check if balance is below zero, return True if it is\n        if balance < 0:\n            return True\n    \n    # If the loop completes without balance falling below zero, return False\n    return False", "prompt_tokens": 158, "completion_tokens": 107, "duration": 2.48125958442688}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences between each number and the mean\n    abs_diff = [abs(num - mean) for num in numbers]\n    \n    # Calculate the mean absolute deviation\n    mad = sum(abs_diff) / len(abs_diff)\n    \n    return mad", "prompt_tokens": 156, "completion_tokens": 91, "duration": 1.9587011337280273}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    # create an empty list to store the result\n    result = []\n    \n    # iterate through the input list\n    for i in range(len(numbers)):\n        # append the current element to the result list\n        result.append(numbers[i])\n        # if it's not the last element, append the delimeter as well\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result", "prompt_tokens": 131, "completion_tokens": 109, "duration": 2.169192314147949}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string by space to get individual groups\n    groups = paren_string.split()\n    \n    depths = []  # Initialize an empty list to store the depth of each group\n    \n    # Iterate over each group\n    for group in groups:\n        depth = 0\n        max_depth = 0\n        \n        # Iterate over each character in the group\n        for char in group:\n            if char == '(':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n            max_depth = max(max_depth, depth)\n        \n        depths.append(max_depth)  # Append the maximum depth of the group to the depths list\n    \n    return depths", "prompt_tokens": 151, "completion_tokens": 159, "duration": 3.420724391937256}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Initialize an empty list to store the filtered strings\n    filtered_strings = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the substring is in the current string\n        if substring in string:\n            # If the substring is present, add the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the final list of filtered strings\n    return filtered_strings", "prompt_tokens": 132, "completion_tokens": 113, "duration": 2.4649760723114014}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Check if the list is empty\n    if not numbers:\n        return (0, 1)\n    \n    # Initialize variables to store sum and product\n    total_sum = 0\n    total_product = 1\n    \n    # Calculate the sum and product of the numbers in the list\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    return (total_sum, total_product)", "prompt_tokens": 149, "completion_tokens": 106, "duration": 2.373406171798706}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store the rolling maximum values\n    result = []\n    # Initialize an empty deque to keep track of the current maximum element and its index\n    max_deque = deque()\n    \n    for i in range(len(numbers)):\n        # Remove elements that are out of range from the deque\n        while max_deque and max_deque[0] < i - 2:\n            max_deque.popleft()\n        \n        # Remove elements from the end of the deque that are smaller than the current element\n        while max_deque and numbers[i] >= numbers[max_deque[-1]]:\n            max_deque.pop()\n        \n        # Append the current index to the end of the deque\n        max_deque.append(i)\n        \n        # Append the maximum element to the result list\n        result.append(numbers[max_deque[0]])\n    \n    return result", "prompt_tokens": 139, "completion_tokens": 190, "duration": 3.700634717941284}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    \n    # Function to check if a string is a palindrome\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    # Loop through the string from the end\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]\n\n    return string", "prompt_tokens": 182, "completion_tokens": 108, "duration": 2.605766773223877}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    # Convert input strings to integers\n    int_a = int(a, 2)\n    int_b = int(b, 2)\n    \n    # Perform XOR operation\n    result = int_a ^ int_b\n    \n    # Convert result back to binary string\n    result_str = bin(result)[2:]\n    \n    return result_str", "prompt_tokens": 115, "completion_tokens": 86, "duration": 1.9818806648254395}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)", "prompt_tokens": 141, "completion_tokens": 53, "duration": 1.7738292217254639}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    # if b is 0, return a\n    if b == 0:\n        return a\n    # otherwise, recursively call the function with b and the remainder of a divided by b\n    return greatest_common_divisor(b, a % b)", "prompt_tokens": 110, "completion_tokens": 73, "duration": 2.0757956504821777}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    # Initialize an empty list to store prefixes\n    prefixes = []\n    \n    # Iterate through the string and append each prefix to the list\n    for i in range(1, len(string)+1):\n        prefixes.append(string[:i])\n    \n    return prefixes", "prompt_tokens": 98, "completion_tokens": 70, "duration": 1.855417251586914}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    # Create a list of numbers from 0 to n\n    numbers = list(range(n+1))\n    \n    # Convert the list of numbers to a list of strings\n    numbers_str = list(map(str, numbers))\n    \n    # Join the list of strings with spaces in between\n    result = ' '.join(numbers_str)\n    \n    return result", "prompt_tokens": 108, "completion_tokens": 87, "duration": 2.085156202316284}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase\n    string = string.lower()\n    \n    # Initialize an empty set to store distinct characters\n    distinct_chars = set()\n    \n    # Iterate through the characters of the string\n    for char in string:\n        # Add the character to the set\n        distinct_chars.add(char)\n    \n    # Return the length of the set which gives the count of distinct characters\n    return len(distinct_chars)", "prompt_tokens": 110, "completion_tokens": 104, "duration": 2.540043830871582}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    # Create a dictionary to map note symbols to their corresponding number of beats\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    \n    # Split the music_string by spaces to get individual notes\n    notes = music_string.split()\n    \n    # Initialize an empty list to store the duration of each note\n    durations = []\n    \n    # Iterate over each note in the list of notes\n    for note in notes:\n        # Lookup the duration of the note in the dictionary and append it to the list of durations\n        durations.append(note_duration[note])\n    \n    return durations", "prompt_tokens": 211, "completion_tokens": 148, "duration": 2.813725709915161}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    # Initialize a counter to keep track of how many times the substring is found\n    count = 0\n    \n    # Loop through the string starting from index 0\n    for i in range(len(string)):\n        # Check if the substring matches the current slice of the string\n        if string[i:i + len(substring)] == substring:\n            count += 1\n\n    return count", "prompt_tokens": 128, "completion_tokens": 99, "duration": 2.1263649463653564}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    # Create a dictionary to map number words to their integer values\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Split the input string into a list of number words\n    num_list = numbers.split()\n    \n    # Sort the number words based on their integer values using the dictionary\n    sorted_num_list = sorted(num_list, key=lambda x: num_dict[x])\n    \n    # Join the sorted number words back into a string\n    sorted_numbers = ' '.join(sorted_num_list)\n    \n    return sorted_numbers", "prompt_tokens": 144, "completion_tokens": 176, "duration": 3.8911890983581543}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Initialize variables to hold the closest pair and their difference\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = numbers[1] - numbers[0]\n    \n    # Iterate through the sorted list to find the closest pair\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            closest_pair = (numbers[i], numbers[i+1])\n            min_diff = diff\n            \n    return closest_pair", "prompt_tokens": 205, "completion_tokens": 144, "duration": 2.8815624713897705}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Calculate the range of the values\n    range_val = max_val - min_val\n    \n    # Apply linear transform to rescale the numbers to the unit interval [0, 1]\n    rescaled_numbers = [(num - min_val) / range_val for num in numbers]\n    \n    return rescaled_numbers", "prompt_tokens": 162, "completion_tokens": 110, "duration": 2.394329786300659}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Initialize an empty list to store the integers\n    integers = []\n    \n    # Iterate through each value in the input list\n    for value in values:\n        # Check if the value is an integer\n        if isinstance(value, int):\n            # Add the integer value to the list of integers\n            integers.append(value)\n    \n    # Return the list of integers\n    return integers", "prompt_tokens": 130, "completion_tokens": 99, "duration": 2.261631965637207}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    # Return the length of the string\n    return len(string)", "prompt_tokens": 83, "completion_tokens": 27, "duration": 1.2080256938934326}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    # Iterate from n-1 down to 1\n    for i in range(n-1, 0, -1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            return i", "prompt_tokens": 92, "completion_tokens": 66, "duration": 1.816413164138794}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    # Initialize an empty list to store prime factors\n    factors = []\n    # Start with the smallest prime factor 2\n    i = 2\n    # Check if the input number is greater than 1\n    while n > 1:\n        # Check if the current prime factor divides the input number\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors", "prompt_tokens": 165, "completion_tokens": 112, "duration": 2.6134400367736816}
{"task_id": "HumanEval/26", "generated_code": "from collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Count occurrences of each element\n    counts = Counter(numbers)\n    \n    # Filter out elements that occur more than once\n    unique_numbers = [num for num in numbers if counts[num] == 1]\n    \n    return unique_numbers", "prompt_tokens": 123, "completion_tokens": 71, "duration": 2.091845750808716}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    # Use list comprehension to flip the case of each character in the string\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 88, "completion_tokens": 52, "duration": 1.6188414096832275}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    # Join all strings in the list\n    result = ''.join(strings)\n    \n    # Return the concatenated string\n    return result", "prompt_tokens": 96, "completion_tokens": 42, "duration": 1.345853567123413}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Create an empty list to store the filtered strings\n    filtered_strings = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the current string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, add it to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the filtered list\n    return filtered_strings", "prompt_tokens": 126, "completion_tokens": 107, "duration": 4.993026971817017}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    # Create an empty list to store positive numbers\n    positive_numbers = []\n    \n    # Iterate over each number in the input list\n    for num in l:\n        # Check if the number is positive\n        if num > 0:\n            # Add the positive number to the list of positive numbers\n            positive_numbers.append(num)\n    \n    # Return the list of positive numbers\n    return positive_numbers", "prompt_tokens": 153, "completion_tokens": 95, "duration": 2.153494119644165}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 139, "completion_tokens": 61, "duration": 1.9769508838653564}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    # Get the degree of the polynomial\n    degree = len(xs) - 1\n    \n    # Initialize the result variable\n    result = None\n    \n    # If the degree is even, find the root of the polynomial\n    if degree % 2 == 0:\n        # Find the largest non-zero coefficient\n        max_coefficient = max(xs, key=abs)\n        \n        # Find the opposite of the sign of the largest non-zero coefficient\n        sign = -1 if max_coefficient < 0 else 1\n        \n        # Initialize a step value for searching the root\n        step = 0.1\n        \n        # Start searching for the root\n        while result is None:\n            for i in range(int(max_coefficient), -int(max_coefficient), -sign):\n                if poly(xs, i) == 0:\n                    result = i\n                    break\n                elif poly(xs, i) * poly(xs, i + step) < 0:\n                    result = round(i + step / 2, 5)\n                    break\n                elif poly(xs, i) * poly(xs, i - step) < 0:\n                    result = round(i - step / 2, 5)\n                    break\n                else:\n                    continue\n            step *= 10  # Increase step size if root not found with current step\n        \n    return result", "prompt_tokens": 298, "completion_tokens": 291, "duration": 4.698219537734985}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Get the elements that are divisible by three\n    divisible_by_three = [val for idx, val in enumerate(l) if (idx + 1) % 3 == 0]\n    \n    # Sort the elements that are divisible by three\n    sorted_divisible_by_three = sorted(divisible_by_three)\n    \n    # Replace the elements in the original list that are divisible by three with the sorted ones\n    sorted_list = [sorted_divisible_by_three.pop(0) if (idx + 1) % 3 == 0 else val for idx, val in enumerate(l)]\n    \n    return sorted_list", "prompt_tokens": 190, "completion_tokens": 139, "duration": 2.5784425735473633}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    # Step 1: Convert the list to a set to get unique elements\n    unique_elements = set(l)\n    \n    # Step 2: Sort the unique elements\n    sorted_unique_elements = sorted(unique_elements)\n    \n    return sorted_unique_elements", "prompt_tokens": 113, "completion_tokens": 62, "duration": 1.770991563796997}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    # Sort the list in ascending order\n    l.sort()\n    # Return the last element in the sorted list\n    return l[-1]", "prompt_tokens": 122, "completion_tokens": 37, "duration": 1.3285043239593506}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    # Initialize a counter variable to keep track of the number of times digit 7 appears\n    count = 0\n\n    # Loop through integers less than n\n    for i in range(1, n):\n        # Check if the integer is divisible by 11 or 13\n        if i % 11 == 0 or i % 13 == 0:\n            # Check if digit 7 appears in the integer\n            if '7' in str(i):\n                # Increment the count if digit 7 appears\n                count += 1\n\n    return count", "prompt_tokens": 119, "completion_tokens": 131, "duration": 2.467334747314453}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Create a list containing only the even indexed elements of the input list l\n    even_elements = l[::2]\n    # Sort the list containing the even indexed elements\n    sorted_even_elements = sorted(even_elements)\n    # Initialize a variable to keep track of the current index\n    index = 0\n    # Create a new list by iterating over the input list l\n    # For even indices, use the sorted values\n    # For odd indices, use the original values\n    new_list = [sorted_even_elements[index] if i % 2 == 0 else l[i] for i in range(len(l))]\n    return new_list", "prompt_tokens": 163, "completion_tokens": 147, "duration": 4.705117225646973}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 198, "completion_tokens": 113, "duration": 1.9843254089355469}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fibonacci(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n    \n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n        \n    return fibonacci(i-1)", "prompt_tokens": 137, "completion_tokens": 142, "duration": 5.320990324020386}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    # Sort the list\n    l.sort()\n    \n    # Iterate through the list\n    for i in range(len(l) - 2):\n        # Set pointers for the start and end of the list\n        start = i + 1\n        end = len(l) - 1\n        \n        # Check for triplets summing to zero\n        while start < end:\n            if l[i] + l[start] + l[end] == 0:\n                return True\n            elif l[i] + l[start] + l[end] < 0:\n                start += 1\n            else:\n                end -= 1\n    \n    return False", "prompt_tokens": 199, "completion_tokens": 148, "duration": 5.060749769210815}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    # Calculate the number of collisions for n cars moving in opposite directions\n    # The first car moving left to right will collide with the last car moving right to left,\n    # the second car moving left to right will collide with the second last car moving right to left,\n    # and so on until the middle car\n    return n * (n - 1) // 2", "prompt_tokens": 191, "completion_tokens": 92, "duration": 2.2990729808807373}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate over each element in the input list\n    for num in l:\n        # Increment the element by 1 and append to the result list\n        result.append(num + 1)\n    \n    return result", "prompt_tokens": 148, "completion_tokens": 72, "duration": 1.6599128246307373}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    # Iterate through each element in the list\n    for i in range(len(l)):\n        # Check if there exists a pair that sums up to zero\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "prompt_tokens": 197, "completion_tokens": 77, "duration": 1.8948533535003662}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    # Define a list to store the remainders during the conversion\n    result = []\n    \n    # Perform the base conversion\n    while x > 0:\n        remainder = x % base\n        result.insert(0, str(remainder))\n        x = x // base\n    \n    # Return the converted number as a string\n    return ''.join(result)", "prompt_tokens": 131, "completion_tokens": 88, "duration": 2.09183406829834}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    # Calculate the area of the triangle\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 86, "completion_tokens": 36, "duration": 3.025167942047119}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    # Create a list to store the first 4 elements of the fib4 sequence\n    fib_list = [0, 0, 2, 0]\n    \n    # Loop to calculate the next elements of the sequence\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[n]", "prompt_tokens": 211, "completion_tokens": 105, "duration": 2.0914313793182373}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()  # Sort the list in ascending order\n    n = len(l)  # Get the length of the list\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2  # Return average of middle two elements if even number of elements\n    else:\n        return l[n // 2]  # Return middle element if odd number of elements", "prompt_tokens": 115, "completion_tokens": 106, "duration": 3.9126126766204834}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    # Remove whitespaces and convert text to lowercase\n    text = text.replace(\" \", \"\").lower()\n    \n    # Check if the text is equal to its reverse\n    return text == text[::-1]", "prompt_tokens": 111, "completion_tokens": 54, "duration": 3.1853575706481934}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    # Calculate 2^n modulo p\n    result = pow(2, n, p)\n    return result", "prompt_tokens": 145, "completion_tokens": 39, "duration": 2.9608330726623535}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    # return decoded string by shifting every character by -5 in the alphabet\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 130, "completion_tokens": 59, "duration": 3.9966394901275635}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    # define a string of vowels\n    vowels = \"aeiouAEIOU\"\n    \n    # iterate through each character in the input text\n    # check if the character is not a vowel, then append it to the result string\n    result = ''.join([char for char in text if char not in vowels])\n    \n    return result", "prompt_tokens": 162, "completion_tokens": 82, "duration": 3.7343475818634033}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    # Iterate through each number in the list\n    for num in l:\n        # Check if the number is greater than or equal to the threshold\n        if num >= t:\n            # If found, return False immediately\n            return False\n    # If the loop completes without finding any number above or equal to the threshold, return True\n    return True", "prompt_tokens": 119, "completion_tokens": 84, "duration": 3.671187162399292}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    # Add the two numbers x and y and return the result\n    return x + y", "prompt_tokens": 93, "completion_tokens": 34, "duration": 3.1953330039978027}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    # Sort characters of each word\n    s0_sorted = sorted(s0)\n    s1_sorted = sorted(s1)\n    \n    # Check if the sorted words are equal\n    return s0_sorted == s1_sorted", "prompt_tokens": 180, "completion_tokens": 64, "duration": 4.1554856300354}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Initialize variables for the first two Fibonacci numbers\n    a, b = 0, 1\n    \n    # Calculate the n-th Fibonacci number\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    \n    return b", "prompt_tokens": 92, "completion_tokens": 97, "duration": 4.082471609115601}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a count variable to keep track of the number of opening brackets\n    count = 0\n    # Iterate through each character in the brackets string\n    for bracket in brackets:\n        # If the current character is an opening bracket, increment the count\n        if bracket == \"<\":\n            count += 1\n        # If the current character is a closing bracket, decrement the count\n        elif bracket == \">\":\n            count -= 1\n        # If at any point the count becomes negative, return False\n        if count < 0:\n            return False\n    # If the count is 0 at the end, return True (every opening bracket has a corresponding closing bracket)\n    return count == 0", "prompt_tokens": 132, "completion_tokens": 166, "duration": 5.632402658462524}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    # Check if the list is sorted in non-decreasing order\n    if l == sorted(l):\n        return True\n    # Check if the list is sorted in non-increasing order\n    elif l == sorted(l, reverse=True):\n        return True\n    else:\n        return False", "prompt_tokens": 127, "completion_tokens": 66, "duration": 1.5099835395812988}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    # Find the common elements between two lists\n    common_elements = set(l1) & set(l2)\n    \n    # Sort the common elements and convert them to a list\n    sorted_common_elements = sorted(common_elements)\n    \n    return sorted_common_elements", "prompt_tokens": 154, "completion_tokens": 69, "duration": 3.5580594539642334}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    # Initialize the divisor\n    divisor = 2\n    # Loop until the square of the divisor is less than or equal to n\n    while divisor * divisor <= n:\n        # If n is divisible by the divisor\n        if n % divisor == 0:\n            # Update n to be n divided by the divisor\n            n //= divisor\n        else:\n            # Increment the divisor by 1\n            divisor += 1\n    # Return the remaining n as it is the largest prime factor\n    return n", "prompt_tokens": 103, "completion_tokens": 121, "duration": 4.047758102416992}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    # Initialize the sum variable to store the total sum\n    total_sum = 0\n    # Iterate from 1 to n (inclusive) and add each number to the total sum\n    for i in range(1, n+1):\n        total_sum += i\n    return total_sum", "prompt_tokens": 134, "completion_tokens": 74, "duration": 4.04694390296936}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a variable to keep track of the count of open brackets\n    open_brackets_count = 0\n    \n    # Iterate through each bracket in the input string\n    for bracket in brackets:\n        # If the bracket is an opening bracket, increment the count\n        if bracket == \"(\":\n            open_brackets_count += 1\n        # If the bracket is a closing bracket, decrement the count\n        elif bracket == \")\":\n            open_brackets_count -= 1\n            # If the count becomes negative at any point, return False\n            if open_brackets_count < 0:\n                return False\n    \n    # If the count is 0 at the end, return True (all brackets are correctly matched)\n    return open_brackets_count == 0", "prompt_tokens": 129, "completion_tokens": 175, "duration": 4.707209825515747}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    # Initialize an empty list to store the derivative coefficients\n    result = []\n    \n    # Iterate over the coefficients starting from the second coefficient\n    for i in range(1, len(xs)):\n        # Calculate the derivative coefficient and add it to the result list\n        result.append(xs[i] * i)\n    \n    return result", "prompt_tokens": 148, "completion_tokens": 78, "duration": 3.447143793106079}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0  # fibfib(0) == 0\n    elif n == 1:\n        return 0  # fibfib(1) == 0\n    elif n == 2:\n        return 1  # fibfib(2) == 1\n    else:\n        # Calculate fibfib(n) using the formula fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 189, "completion_tokens": 137, "duration": 4.1001410484313965}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    # Initialize a variable to count the number of vowels\n    count = 0\n    \n    # Define a set of vowels\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    \n    # Check if the last character is 'y' and treat it as a vowel\n    if s[-1].lower() == 'y':\n        vowels.add('y')\n    \n    # Count the number of vowels in the input string\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    \n    return count", "prompt_tokens": 166, "completion_tokens": 127, "duration": 2.0656790733337402}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x: int, shift: int) -> str:\n    # Convert the integer to a string\n    x_str = str(x)\n    \n    # Calculate the actual shift value by taking the modulo of shift with the length of the string\n    actual_shift = shift % len(x_str)\n    \n    # Perform the circular shift by concatenating the last part with the first part of the string\n    result = x_str[-actual_shift:] + x_str[:-actual_shift]\n    \n    # Return the result\n    return result", "prompt_tokens": 122, "completion_tokens": 113, "duration": 3.8362655639648438}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    # Initialize a variable to keep track of the sum\n    total_sum = 0\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Add the ASCII value of the uppercase character to the total sum\n            total_sum += ord(char)\n    \n    # Return the final sum\n    return total_sum", "prompt_tokens": 152, "completion_tokens": 95, "duration": 3.8495967388153076}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    # split the string to extract the number of apples and oranges\n    apples, oranges = map(int, [s.split(' ')[0], s.split(' ')[3]])\n    # calculate the number of mango fruits by subtracting the number of apples and oranges from the total fruits\n    return n - apples - oranges", "prompt_tokens": 250, "completion_tokens": 76, "duration": 3.6382734775543213}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    # Initialize variables to store the smallest even value and its index\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n    \n    # Iterate through the array to find the smallest even value and its index\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even_value:\n            smallest_even_value = num\n            smallest_even_index = i\n    \n    # Return the result in a list\n    return [] if smallest_even_index == -1 else [smallest_even_value, smallest_even_index]", "prompt_tokens": 352, "completion_tokens": 125, "duration": 4.793868780136108}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    # Create a dictionary to store the frequency of each integer\n    freq = {}\n    \n    # Count the frequency of each integer in the list\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Find the greatest integer with frequency greater than or equal to the value of the integer itself\n    result = -1\n    for key, value in freq.items():\n        if key > 0 and value >= key:\n            result = max(result, key)\n    \n    return result", "prompt_tokens": 205, "completion_tokens": 128, "duration": 4.129835367202759}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    # Initialize an empty list to store the strange sorted list\n    strange_sorted_lst = []\n    # Loop until the sorted list is not empty\n    while sorted_lst:\n        # Append the minimum value to the strange sorted list\n        strange_sorted_lst.append(sorted_lst.pop(0))\n        # If there are remaining elements in the sorted list, append the maximum value\n        if sorted_lst:\n            strange_sorted_lst.append(sorted_lst.pop())\n    return strange_sorted_lst", "prompt_tokens": 164, "completion_tokens": 121, "duration": 4.3582727909088135}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the area of the triangle using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points and return\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 161, "completion_tokens": 142, "duration": 4.632099628448486}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    # Check if the list q is palindromic\n    if q == q[::-1]:\n        # Check if the sum of elements in q is less than or equal to the maximum weight w\n        if sum(q) <= w:\n            return True\n    return False", "prompt_tokens": 270, "completion_tokens": 71, "duration": 3.492938280105591}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    # Initialize the counter variable to count the number of changes needed\n    changes = 0\n    \n    # Loop through the array to check if the elements are not symmetric around the middle\n    for i in range(len(arr)//2):\n        if arr[i] != arr[len(arr)-1-i]:\n            changes += 1\n    \n    # Return the total number of changes needed\n    return changes", "prompt_tokens": 197, "completion_tokens": 90, "duration": 3.4959816932678223}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    # Calculate total number of characters in each list\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    # Return the list with less total characters or the first list if they are equal\n    return lst1 if total_chars_lst1 <= total_chars_lst2 else lst2", "prompt_tokens": 233, "completion_tokens": 93, "duration": 3.6018731594085693}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    # Check if the number is less than 100\n    if a >= 100:\n        return False\n    \n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Find 3 prime numbers that multiply to a\n    prime_count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            prime_count += 1\n            if prime_count == 3:\n                return True\n    \n    return False\n\n# Test cases\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(31))  # False", "prompt_tokens": 119, "completion_tokens": 184, "duration": 5.627008438110352}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    elif x == n:\n        return True\n    else:\n        return x % n == 0 and is_simple_power(x // n, n)", "prompt_tokens": 182, "completion_tokens": 54, "duration": 3.1734941005706787}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    # Edge case: if a is 0, it is a cube of 0\n    if a == 0:\n        return True\n    \n    # Calculate the cube root of a\n    root = round(a**(1/3))\n    \n    # Check if the cube of the root is equal to a\n    if root ** 3 == a:\n        return True\n    else:\n        return False", "prompt_tokens": 150, "completion_tokens": 93, "duration": 3.6490297317504883}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Define a dictionary to map hexadecimal digits to decimal values\n    hex_dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n\n    # Count the number of prime digits in the hexadecimal number\n    count = sum(1 for digit in num if is_prime(hex_dict[digit]))\n\n    return count", "prompt_tokens": 339, "completion_tokens": 224, "duration": 5.759862899780273}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    # Convert decimal to binary\n    binary = bin(decimal)[2:]\n    \n    # Add 'db' at the beginning and end of the binary string\n    result = 'db' + binary + 'db'\n    \n    return result", "prompt_tokens": 179, "completion_tokens": 59, "duration": 1.1869735717773438}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    # Check if the length of the string is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Check if every 3 consecutive letters are distinct\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 161, "completion_tokens": 103, "duration": 4.479053258895874}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    # Create a list to store the letter grades\n    letter_grades = []\n    \n    # Iterate through each GPA in the grades list\n    for gpa in grades:\n        # Determine the letter grade based on the GPA\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades", "prompt_tokens": 310, "completion_tokens": 300, "duration": 6.412628889083862}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    # Calculate the length of the input string\n    length = len(string)\n    \n    # Check if the length is less than 2, return False\n    if length < 2:\n        return False\n    \n    # Check if the length is a prime number\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    \n    return True", "prompt_tokens": 121, "completion_tokens": 100, "duration": 3.7133188247680664}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    # Initialize count variable\n    count = 0\n    \n    # Count numbers that start with 1\n    count += 9 * 10**(n-1)\n    \n    # Count numbers that end with 1\n    count += 10**(n-1)\n    \n    return count", "prompt_tokens": 84, "completion_tokens": 71, "duration": 3.730100154876709}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Convert the integer N to binary\n    binary = bin(N)[2:]\n    \n    # Calculate the sum of digits in the binary representation\n    total = sum(int(digit) for digit in binary)\n    \n    # Convert the total sum to binary\n    return bin(total)[2:]", "prompt_tokens": 173, "completion_tokens": 68, "duration": 3.159623622894287}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    # Initialize a variable to store the sum of even elements at odd indices\n    sum_even_odd_indices = 0\n    \n    # Loop through the list starting from index 1 with a step of 2\n    for i in range(1, len(lst), 2):\n        # Check if the element at the current index is even\n        if lst[i] % 2 == 0:\n            # Add the even element at the odd index to the sum\n            sum_even_odd_indices += lst[i]\n    \n    # Return the sum of even elements at odd indices\n    return sum_even_odd_indices", "prompt_tokens": 95, "completion_tokens": 133, "duration": 2.3961281776428223}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    # Split the input string into a list of words\n    words = s.split()\n\n    # Sort each word in the list based on ascii values of characters\n    sorted_words = [''.join(sorted(word)) for word in words]\n\n    # Join the sorted words into a single string with spaces\n    return ' '.join(sorted_words)", "prompt_tokens": 170, "completion_tokens": 78, "duration": 1.9272327423095703}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    coords = []\n    \n    # Loop through each row in the input list\n    for i, row in enumerate(lst):\n        # Check if the integer x is present in the row\n        if x in row:\n            # Loop through each column in the row\n            for j, value in enumerate(row):\n                # If the value is equal to x, add the coordinate to the list\n                if value == x:\n                    coords.append((i, j))\n    \n    # Sort the coordinates by rows in ascending order and by columns in descending order\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    \n    return coords", "prompt_tokens": 299, "completion_tokens": 156, "duration": 3.4145073890686035}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy() # create a copy of the given array\n    if (array[0] + array[-1]) % 2 == 0: # check if sum of first and last element is even\n        sorted_array.sort(reverse=True) # sort in descending order\n    else:\n        sorted_array.sort() # sort in ascending order\n    return sorted_array", "prompt_tokens": 243, "completion_tokens": 88, "duration": 2.3415377140045166}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    # Define the alphabet and its length\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    n = len(alphabet)\n    \n    # Initialize an empty string to store the encrypted result\n    encrypted = ''\n    \n    # Loop through each character in the input string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Find the index of the character in the alphabet\n            index = alphabet.index(char)\n            # Shift the index down by two multiplied to two places\n            new_index = (index + 2*2) % n\n            # Append the new character to the encrypted string\n            encrypted += alphabet[new_index]\n        else:\n            # If the character is not a letter, simply append it to the encrypted string\n            encrypted += char\n    \n    return encrypted", "prompt_tokens": 150, "completion_tokens": 176, "duration": 2.8657193183898926}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    # If the list has less than 2 elements, return None\n    if len(lst) < 2:\n        return None\n    \n    # Find the smallest element in the list\n    smallest = min(lst)\n    \n    # Remove all occurrences of the smallest element\n    while smallest in lst:\n        lst.remove(smallest)\n    \n    # If the list is empty after removing all occurrences of the smallest element, return None\n    if not lst:\n        return None\n    \n    # Return the new smallest element\n    return min(lst)", "prompt_tokens": 164, "completion_tokens": 119, "duration": 2.7607436180114746}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Split the input string into sentences using delimiters '.' '?' '!'\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences]\n    \n    # Count the number of sentences starting with 'I'\n    count = sum(1 for sentence in sentences if sentence.startswith('I'))\n    \n    return count", "prompt_tokens": 147, "completion_tokens": 77, "duration": 2.221374273300171}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(num, int) for num in [x, y, z]):\n        # Check if x is equal to y + z or y is equal to x + z or z is equal to x + y\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 175, "completion_tokens": 106, "duration": 2.1952972412109375}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    # Define a dictionary to map vowels to the letter that appears 2 places ahead in the alphabet\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    \n    # Initialize an empty string to store the encoded message\n    encoded_message = \"\"\n    \n    # Loop through each character in the message\n    for char in message:\n        # If the character is a letter\n        if char.isalpha():\n            # Swap the case of the letter\n            char = char.swapcase()\n            # If the letter is a vowel, replace it with the corresponding letter\n            if char.lower() in vowels:\n                char = vowels[char.lower()]\n        # Append the character to the encoded message\n        encoded_message += char\n    \n    return encoded_message", "prompt_tokens": 149, "completion_tokens": 180, "duration": 3.4432172775268555}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    # Create a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Create a function to calculate the sum of digits of a number\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    # Filter the list to keep only prime numbers\n    primes = [num for num in lst if is_prime(num)]\n\n    # Find the largest prime number\n    largest_prime = max(primes)\n\n    # Calculate and return the sum of its digits\n    return sum_of_digits(largest_prime)", "prompt_tokens": 326, "completion_tokens": 174, "duration": 3.079939842224121}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    \n    upper_keys = all(key.isupper() for key in dictionary.keys())\n    lower_keys = all(key.islower() for key in dictionary.keys())\n    \n    return upper_keys or lower_keys", "prompt_tokens": 209, "completion_tokens": 58, "duration": 1.6371240615844727}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    # Define a helper function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Create an empty list to store prime numbers\n    primes = []\n    \n    # Iterate through numbers from 2 up to n\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes", "prompt_tokens": 185, "completion_tokens": 133, "duration": 2.5312366485595703}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a: int, b: int) -> int:\n    # Get the unit digit of a\n    unit_a = abs(a % 10)\n    # Get the unit digit of b\n    unit_b = abs(b % 10)\n    # Return the product of the unit digits\n    return unit_a * unit_b", "prompt_tokens": 138, "completion_tokens": 73, "duration": 1.9960782527923584}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s: str) -> int:\n    # Initialize a variable to store the count of uppercase vowels\n    count = 0\n    \n    # Create a list of uppercase vowels\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    \n    # Iterate through the even indices of the string\n    for i in range(0, len(s), 2):\n        # Check if the character at the even index is an uppercase vowel\n        if s[i] in vowels:\n            count += 1\n    \n    # Return the count of uppercase vowels in even indices\n    return count", "prompt_tokens": 112, "completion_tokens": 131, "duration": 2.526142120361328}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    # Convert the input string to a float number\n    num = float(value)\n    \n    # Check if the decimal part is closer to the lower integer\n    if num % 1 < 0.5:\n        return int(num)\n    # If the decimal part is closer to the higher integer, round up\n    else:\n        if num > 0:\n            return int(num) + 1\n        else:\n            return int(num) - 1", "prompt_tokens": 196, "completion_tokens": 105, "duration": 2.460099220275879}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    # Initialize an empty list to store the number of stones in each level\n    levels = []\n    \n    # Iterate over the range of n levels\n    for i in range(n):\n        # Calculate the number of stones in the current level based on the parity of n\n        stones = n + i if n % 2 == 0 else n + 2 * i\n        \n        # Append the number of stones to the list of levels\n        levels.append(stones)\n    \n    return levels", "prompt_tokens": 172, "completion_tokens": 113, "duration": 2.8285701274871826}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    # Split the input string by commas and spaces\n    words_list = s.replace(',', ' ').split()\n    \n    return words_list", "prompt_tokens": 156, "completion_tokens": 37, "duration": 1.4118943214416504}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    # Iterate through the range from y to x in reverse order\n    for i in range(y, x-1, -1):\n        # Check if the number is even\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 134, "completion_tokens": 67, "duration": 1.7941923141479492}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 180, "completion_tokens": 40, "duration": 1.388127326965332}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    # Filter out the numbers that contain any even digit\n    filtered = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    \n    # Sort the filtered list in increasing order\n    sorted_list = sorted(filtered)\n    \n    return sorted_list", "prompt_tokens": 142, "completion_tokens": 67, "duration": 1.8866002559661865}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # Filter integers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Replace each digit by its corresponding name\n    result = []\n    for num in reversed_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    \n    return result", "prompt_tokens": 316, "completion_tokens": 217, "duration": 6.712092638015747}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Loop through the range from 1 to n\n    for i in range(1, n+1):\n        # Check if i is even\n        if i % 2 == 0:\n            # Calculate the factorial of i\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            # Calculate the sum from 1 to i\n            total = sum(range(1, i+1))\n            result.append(total)\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 139, "duration": 2.9459965229034424}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    # Initialize variables to count even and odd palindromes\n    even_count = 0\n    odd_count = 0\n\n    # Loop through the range from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(i) == str(i)[::-1]:\n            # Increment the respective count based on whether the palindrome is even or odd\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    # Return a tuple of the counts of even and odd palindromes\n    return (even_count, odd_count)", "prompt_tokens": 251, "completion_tokens": 154, "duration": 2.808763027191162}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    # Initialize a counter variable\n    count = 0\n    # Iterate through each number in the array\n    for num in arr:\n        # Convert the number to a positive integer\n        num = abs(num)\n        # Calculate the sum of the digits of the number\n        digit_sum = sum(int(digit) for digit in str(num))\n        # If the sum of digits is greater than 0, increment the counter\n        if digit_sum > 0:\n            count += 1\n    # Return the final count\n    return count", "prompt_tokens": 164, "completion_tokens": 123, "duration": 2.4384946823120117}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    # If the array is empty, return True\n    if not arr:\n        return True\n    \n    # Find the minimum element in the array\n    min_val = min(arr)\n    \n    # Find the index of the minimum element\n    min_index = arr.index(min_val)\n    \n    # Check if the array is sorted in non-decreasing order after performing right shifts\n    return arr == sorted(arr) or arr == sorted(arr[min_index:] + arr[:min_index])", "prompt_tokens": 339, "completion_tokens": 107, "duration": 4.5199339389801025}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Calculate the number of odd elements in lst1\n    odd_count_lst1 = sum([1 for num in lst1 if num % 2 != 0])\n    \n    # Calculate the number of odd elements in lst2\n    odd_count_lst2 = sum([1 for num in lst2 if num % 2 != 0])\n    \n    # Check if the number of odd elements in lst1 is less than or equal to the number of odd elements in lst2\n    if odd_count_lst1 <= odd_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 237, "completion_tokens": 136, "duration": 3.0282950401306152}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    # Split the string into a list of words\n    words = test.split()\n    \n    # Create an empty dictionary to store letter counts\n    counts = {}\n    \n    # Loop through each word in the list\n    for word in words:\n        # Loop through each letter in the word\n        for letter in word:\n            # Check if the letter is already in the dictionary\n            if letter in counts:\n                counts[letter] += 1\n            else:\n                counts[letter] = 1\n    \n    # Find the maximum count\n    max_count = max(counts.values())\n    \n    # Create a new dictionary with letters that have the maximum count\n    result = {key: value for key, value in counts.items() if value == max_count}\n    \n    return result", "prompt_tokens": 191, "completion_tokens": 170, "duration": 2.9775502681732178}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    # Remove characters in s that are equal to any character in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    # Return the result string and whether it is a palindrome\n    return (result, is_palindrome)", "prompt_tokens": 202, "completion_tokens": 96, "duration": 2.014531373977661}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    # Create an empty list to store the results\n    result = []\n    \n    # Iterate through each string in the input list\n    for s in lst:\n        # Count the number of odd digits in the string\n        count = sum(int(d) % 2 != 0 for d in s)\n        \n        # Append the formatted string to the result list\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, count, count, count))\n    \n    # Return the final result\n    return result", "prompt_tokens": 213, "completion_tokens": 127, "duration": 2.7127902507781982}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    # Initialize variables to store the current sum and minimum sum\n    current_sum = 0\n    min_sum = float('inf')\n    \n    # Iterate through the array\n    for num in nums:\n        # Update current sum\n        current_sum = min(num, current_sum + num)\n        \n        # Update minimum sum\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum", "prompt_tokens": 128, "completion_tokens": 95, "duration": 2.4264450073242188}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    # Initialize variables\n    total_water = 0\n    num_buckets = 0\n\n    # Calculate total water in the wells\n    for row in grid:\n        total_water += sum(row)\n\n    # Calculate number of times buckets need to be lowered\n    num_buckets = math.ceil(total_water / capacity)\n\n    return num_buckets", "prompt_tokens": 363, "completion_tokens": 84, "duration": 2.207533121109009}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    # Define a custom sort function that first sorts by the number of ones in binary representation and then by decimal value\n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    \n    return arr", "prompt_tokens": 210, "completion_tokens": 55, "duration": 1.8051340579986572}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s: str, n: int) -> list:\n    # Define a function to check if a character is a consonant\n    def is_consonant(char):\n        return char.isalpha() and char.lower() not in \"aeiou\"\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store words with n consonants\n    result = []\n    \n    # Iterate over each word in the list of words\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if is_consonant(char))\n        \n        # If the number of consonants matches n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    return result", "prompt_tokens": 221, "completion_tokens": 180, "duration": 3.2533624172210693}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    # Remove vowels from beginning and ending of the word\n    word = word[1:-1]\n\n    # Initialize closest vowel as empty string\n    closest_vowel = \"\"\n    \n    # Iterate through the word from right to left\n    for char in word[::-1]:\n        if char in vowels:\n            closest_vowel = char\n            break\n    \n    return closest_vowel", "prompt_tokens": 189, "completion_tokens": 125, "duration": 6.507466793060303}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    # Merge the two strings into one\n    s = lst[0] + lst[1]\n    \n    # Count the number of open parentheses\n    open_count = s.count('(')\n    \n    # Count the number of close parentheses\n    close_count = s.count(')')\n    \n    # Check if the total count of open and close parentheses is even and at least one of them is zero\n    if open_count % 2 == 0 and close_count % 2 == 0 and open_count > 0 and close_count > 0:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 208, "completion_tokens": 137, "duration": 2.8680458068847656}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Return the first k elements\n    return arr[:k]", "prompt_tokens": 257, "completion_tokens": 40, "duration": 3.268904447555542}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    # Filter odd elements in even positions\n    odds_in_even_positions = [x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0]\n    \n    # Return the sum of the filtered elements\n    return sum(odds_in_even_positions)", "prompt_tokens": 137, "completion_tokens": 70, "duration": 2.2630467414855957}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    # Initialize a variable to keep track of the sum\n    total = 0\n    # Loop through the first k elements of arr\n    for i in range(k):\n        # Check if the element has at most two digits\n        if 10 <= arr[i] <= 99:\n            # Add the element to the total sum\n            total += arr[i]\n    return total", "prompt_tokens": 168, "completion_tokens": 91, "duration": 2.0392751693725586}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n] # start with n\n    while n != 1: # until n reaches 1\n        if n % 2 == 0: # if n is even\n            n = n // 2\n        else: # if n is odd\n            n = 3*n + 1\n        if n % 2 != 0: # if n is odd\n            result.append(n)\n    return sorted(result) # return sorted list of odd numbers in collatz sequence\n\n# Test the function\nprint(get_odd_collatz(5)) # [1, 5]", "prompt_tokens": 271, "completion_tokens": 137, "duration": 2.9257843494415283}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is not empty\n    if not date:\n        return False\n    \n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n    \n    # Check if the month is between 1 and 12\n    if not (1 <= int(month) <= 12):\n        return False\n    \n    # Check the number of days based on the month\n    if month in ['01', '03', '05', '07', '08', '10', '12']:\n        if not (1 <= int(day) <= 31):\n            return False\n    elif month in ['04', '06', '09', '11']:\n        if not (1 <= int(day) <= 30):\n            return False\n    elif month == '02':\n        if not (1 <= int(day) <= 29):\n            return False\n    \n    return True", "prompt_tokens": 303, "completion_tokens": 201, "duration": 3.8649728298187256}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    # Split the text on whitespace\n    words = txt.split()\n    \n    # Check if there are no words after splitting on whitespace\n    if len(words) == 1 and ',' in txt:\n        # Split the text on commas\n        words = txt.split(',')\n        \n    # Check if there are still no words after splitting on commas\n    if len(words) == 1:\n        # Count the number of lowercase letters with odd order in the alphabet\n        count = sum(1 for c in txt if c.islower() and ord(c) % 2 != 0)\n        return count\n    \n    return words", "prompt_tokens": 180, "completion_tokens": 137, "duration": 2.4932937622070312}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    # Check if the list is equal to the sorted version of the list with no duplicates\n    return lst == sorted(set(lst))", "prompt_tokens": 289, "completion_tokens": 36, "duration": 4.5912134647369385}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    # Find the intersection of the intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # Check if the intervals do not intersect\n    if start > end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = end - start\n\n    # Check if the length of the intersection is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 294, "completion_tokens": 152, "duration": 3.007155179977417}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    # If the array is empty, return None\n    if not arr:\n        return None\n    \n    # Initialize variables to keep track of product of signs and sum of magnitudes\n    sign_product = 1\n    magnitude_sum = 0\n    \n    # Iterate over each element in the array\n    for num in arr:\n        # Update sign product based on the sign of the number\n        if num < 0:\n            sign_product *= -1\n        elif num == 0:\n            sign_product = 0\n        \n        # Add the magnitude of the number to the sum\n        magnitude_sum += abs(num)\n    \n    # Return the result of multiplying the sum of magnitudes by the sign product\n    return sign_product * magnitude_sum", "prompt_tokens": 162, "completion_tokens": 163, "duration": 3.5059170722961426}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    # Define the size of the grid\n    n = len(grid)\n    \n    # Create a list to store the values of the path\n    path = []\n    \n    # Find the starting cell with the smallest value\n    min_val = min(min(row) for row in grid)\n    start_row, start_col = next((i, row.index(min_val)) for i, row in enumerate(grid) if min_val in row)\n    \n    # Move k steps while updating the path list\n    while k > 0:\n        path.append(grid[start_row][start_col])\n        k -= 1\n        \n        # Find the next cell to move to\n        if start_row + 1 < n and (start_row + 1, start_col) not in path:\n            start_row += 1\n        elif start_col + 1 < n and (start_row, start_col + 1) not in path:\n            start_col += 1\n        elif start_row - 1 >= 0 and (start_row - 1, start_col) not in path:\n            start_row -= 1\n        elif start_col - 1 >= 0 and (start_row, start_col - 1) not in path:\n            start_col -= 1\n            \n    return path", "prompt_tokens": 436, "completion_tokens": 274, "duration": 7.5703418254852295}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # Initialize the Tribonacci sequence list with the first two elements\n    tribonacci = [3, 1]\n    \n    # Loop to calculate the next elements of the Tribonacci sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n    \n    return tribonacci", "prompt_tokens": 275, "completion_tokens": 119, "duration": 6.26513671875}
{"task_id": "HumanEval/131", "generated_code": "def digits(n: int) -> int:\n    # Initialize a variable to keep track of the product\n    product = 1\n    \n    # Loop through each digit in the integer n\n    while n > 0:\n        digit = n % 10\n        n = n // 10\n        \n        # Check if the digit is odd\n        if digit % 2 != 0:\n            product *= digit\n    \n    # Return the product of odd digits\n    return product", "prompt_tokens": 111, "completion_tokens": 102, "duration": 4.303199291229248}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    close_brackets = 0\n    \n    for bracket in string:\n        if bracket == '[':\n            open_brackets += 1\n        else:\n            if open_brackets > 0:\n                open_brackets -= 1\n                close_brackets += 1\n    \n    return close_brackets > 0\n\n# Test cases\nprint(is_nested('[[]]')) # True\nprint(is_nested('[]]]]]]][[[[[]')) # False\nprint(is_nested('[][]')) # False\nprint(is_nested('[]')) # False\nprint(is_nested('[[][]]')) # True\nprint(is_nested('[[]][[')) # True", "prompt_tokens": 173, "completion_tokens": 150, "duration": 5.0376880168914795}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    # Round each element in the list to the upper integer (Ceiling)\n    lst = [int(x) if x.is_integer() else int(x) + 1 for x in lst]\n    \n    # Calculate the sum of squared numbers in the list\n    return sum(x**2 for x in lst)", "prompt_tokens": 197, "completion_tokens": 74, "duration": 5.58623194694519}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == '':\n        return False\n    \n    words = txt.split()\n    last_word = words[-1]\n    last_char = last_word[-1]\n    \n    if last_char.isalpha() and len(last_char) == 1:\n        return True\n    else:\n        return False", "prompt_tokens": 177, "completion_tokens": 74, "duration": 3.7466535568237305}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    # Initialize a variable to store the result\n    result = -1\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than or equal to the element before it\n        if arr[i] < arr[i-1]:\n            # Update the result with the current index\n            result = i - 1\n    \n    # Return the result\n    return result", "prompt_tokens": 143, "completion_tokens": 107, "duration": 2.6734015941619873}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    # Separate negative and positive integers\n    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n\n    # Find the largest negative integer or set to None if not present\n    largest_neg = max(neg_integers) if neg_integers else None\n\n    # Find the smallest positive integer or set to None if not present\n    smallest_pos = min(pos_integers) if pos_integers else None\n\n    return (largest_neg, smallest_pos)", "prompt_tokens": 178, "completion_tokens": 127, "duration": 4.6160643100738525}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    # If a and b are equal, return None\n    if a == b:\n        return None\n    \n    # If a is a string and b is not a string, convert a to float and compare\n    if isinstance(a, str) and not isinstance(b, str):\n        a = float(a.replace(\",\", \".\"))\n        return a if a > b else b\n    \n    # If b is a string and a is not a string, convert b to float and compare\n    if isinstance(b, str) and not isinstance(a, str):\n        b = float(b.replace(\",\", \".\"))\n        return a if a > b else b\n    \n    # If both a and b are strings, convert both to float and compare\n    if isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(\",\", \".\"))\n        b = float(b.replace(\",\", \".\"))\n        return a if a > b else b\n    \n    # If a and b are integers or floats, compare directly\n    return a if a > b else b", "prompt_tokens": 181, "completion_tokens": 218, "duration": 5.973513603210449}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    # Check if n is less than 8 or n is odd, return False\n    if n < 8 or n % 2 != 0:\n        return False\n    \n    # Initialize a counter variable to count the number of even numbers found\n    count = 0\n    \n    # Iterate from 2 to n/2+1 to find even numbers\n    for i in range(2, n//2 + 1, 2):\n        # Check if n-i is even\n        if (n - i) % 2 == 0:\n            count += 1\n            \n            # If 4 even numbers found, return True\n            if count == 4:\n                return True\n    \n    return False", "prompt_tokens": 117, "completion_tokens": 161, "duration": 5.199242830276489}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    # Initialize result as 1\n    result = 1\n    \n    # Loop from n down to 1\n    for i in range(n, 0, -1):\n        # Calculate factorial of i and multiply with result\n        fact_i = 1\n        for j in range(1, i+1):\n            fact_i *= j\n        result *= fact_i\n    \n    # Return the final result\n    return result", "prompt_tokens": 135, "completion_tokens": 100, "duration": 3.9165279865264893}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace 3 or more consecutive underscores with a single underscore\n    text = text.replace('___', '-')\n    text = text.replace('__', '_')\n    \n    return text", "prompt_tokens": 146, "completion_tokens": 64, "duration": 3.5491385459899902}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if there are more than three digits in the file name\n    if sum(1 for c in file_name if c.isdigit()) > 3:\n        return 'No'\n    \n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 254, "completion_tokens": 169, "duration": 5.733308553695679}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    # Initialize a variable to store the sum of modified entries\n    result = 0\n    \n    # Iterate over the list with index\n    for i, num in enumerate(lst):\n        # Check if index is a multiple of 3\n        if i % 3 == 0:\n            result += num ** 2\n        # Check if index is a multiple of 4 and not a multiple of 3\n        elif i % 4 == 0 and i % 3 != 0:\n            result += num ** 3\n    \n    # Return the final result\n    return result", "prompt_tokens": 209, "completion_tokens": 133, "duration": 4.29001522064209}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    # Define a helper function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Filter the words based on their lengths being prime numbers\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    # Join the prime words into a string\n    result = ' '.join(prime_words)\n    \n    return result", "prompt_tokens": 187, "completion_tokens": 147, "duration": 5.683895111083984}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    # Split the fractions to extract the numerators and denominators\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    # Check if the product of the fractions is a whole number\n    if (x_num * n_num) % (x_denom * n_denom) == 0:\n        return True\n    else:\n        return False", "prompt_tokens": 195, "completion_tokens": 103, "duration": 6.447271823883057}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    # Define a helper function to calculate the sum of digits for a number\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n    \n    # Sort the list of numbers based on the sum of their digits and their index\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 155, "completion_tokens": 84, "duration": 1.639543056488037}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    # Initialize a counter variable\n    count = 0\n    \n    # Iterate over each number in the input array\n    for num in nums:\n        # Check if the number is greater than 10 and the first and last digits are odd\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            # Increment the counter if the condition is met\n            count += 1\n            \n    # Return the final count\n    return count", "prompt_tokens": 159, "completion_tokens": 137, "duration": 5.11510157585144}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    \n    # Create the array a according to the given formula\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    \n    # Check all possible triples and count the ones that are multiples of 3\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count", "prompt_tokens": 205, "completion_tokens": 124, "duration": 4.200606107711792}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index < end_index:\n        return tuple(sorted(planets[start_index + 1:end_index]))\n    else:\n        return tuple(sorted(planets[end_index + 1:start_index], reverse=True))", "prompt_tokens": 251, "completion_tokens": 130, "duration": 4.253094434738159}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list first by length and then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list", "prompt_tokens": 227, "completion_tokens": 79, "duration": 3.907891273498535}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if n < 2:\n        return y\n        \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n\n    return x", "prompt_tokens": 126, "completion_tokens": 62, "duration": 4.1116578578948975}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    # Initialize a variable to store the sum of squares of odd numbers\n    total = 0\n    # Iterate through the list elements\n    for num in lst:\n        # Check if the number is a positive odd integer\n        if num > 0 and num % 2 != 0:\n            # Add the square of the number to the total\n            total += num ** 2\n    # Return the double of the total\n    return total * 2", "prompt_tokens": 177, "completion_tokens": 108, "duration": 4.521791458129883}
{"task_id": "HumanEval/152", "generated_code": "def compare(game,guess):\n    # Create an empty list to store the differences between the guesses and the scores\n    result = []\n    \n    # Iterate through each match index\n    for i in range(len(game)):\n        # Calculate the absolute difference between the guess and the score for the current match\n        diff = abs(game[i] - guess[i])\n        \n        # Append the difference to the result list\n        result.append(diff)\n    \n    # Return the final result list\n    return result", "prompt_tokens": 270, "completion_tokens": 100, "duration": 3.983769655227661}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    # Calculate the strength of each extension\n    strengths = [sum(c.isupper() for c in ext) - sum(c.islower() for c in ext) for ext in extensions]\n    \n    # Find the index of the extension with the maximum strength\n    max_strength_index = strengths.index(max(strengths))\n    \n    # Return the formatted string with the class name and the strongest extension\n    return f\"{class_name}.{extensions[max_strength_index]}\"", "prompt_tokens": 317, "completion_tokens": 107, "duration": 3.99349045753479}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]  # rotate the second word\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.961662769317627}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num: int) -> tuple:\n    # Convert the number to a string\n    num_str = str(abs(num))\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate through each digit in the string\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return a tuple of even and odd counts\n    return (even_count, odd_count)", "prompt_tokens": 105, "completion_tokens": 124, "duration": 4.354897975921631}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    \n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 141, "completion_tokens": 143, "duration": 4.349761009216309}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check if the sides satisfy Pythagoras theorem\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False", "prompt_tokens": 148, "completion_tokens": 78, "duration": 3.6002731323242188}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # Initialize variables to store the maximum number of unique characters and the word with maximum number of unique characters\n    max_unique = 0\n    max_word = \"\"\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Calculate the number of unique characters in the word\n        unique_chars = len(set(word))\n        \n        # Check if the current word has more unique characters than the previous maximum\n        # If it does, update the maximum word and the number of unique characters\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_unique = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 160, "completion_tokens": 152, "duration": 4.400952577590942}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    # Calculate the total number of eaten carrots after meals\n    total_eaten = number + min(need, remaining)\n    \n    # Calculate the number of carrots left after meals\n    carrots_left = max(0, remaining - need)\n    \n    return [total_eaten, carrots_left]", "prompt_tokens": 317, "completion_tokens": 72, "duration": 5.4557976722717285}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    # Initialize the result with the first operand\n    result = operand[0]\n    \n    # Loop through each operator and operand\n    for i in range(len(operator)):\n        # Apply the operator to the result and the next operand\n        if operator[i] == '+':\n            result = result + operand[i + 1]\n        elif operator[i] == '-':\n            result = result - operand[i + 1]\n        elif operator[i] == '*':\n            result = result * operand[i + 1]\n        elif operator[i] == '//':\n            result = result // operand[i + 1]\n        elif operator[i] == '**':\n            result = result ** operand[i + 1]\n    \n    return result", "prompt_tokens": 247, "completion_tokens": 160, "duration": 6.938426494598389}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Reverse the case of the letter and add it to the result string\n            result += char.swapcase()\n        else:\n            # Add non-letter characters as they are to the result string\n            result += char\n    \n    # If the result string contains no letters, reverse the entire string\n    if not any(char.isalpha() for char in result):\n        result = result[::-1]\n    \n    return result", "prompt_tokens": 147, "completion_tokens": 141, "duration": 4.124993801116943}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    \n    # Step 1: Encode the text to bytes\n    encoded_text = text.encode()\n    \n    # Step 2: Create an md5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Step 3: Update the hash object with the encoded text\n    md5_hash.update(encoded_text)\n    \n    # Step 4: Get the hexadecimal representation of the hash digest\n    md5_hex = md5_hash.hexdigest()\n    \n    return md5_hex", "prompt_tokens": 116, "completion_tokens": 123, "duration": 4.421917915344238}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a: int, b: int) -> list:\n    result = []  # create an empty list to store even digits\n    for num in range(a, b+1):  # iterate through the range from a to b\n        if num % 2 == 0:  # check if the number is even\n            result.append(num)  # add the even digit to the result list\n    return result  # return the list of even digits", "prompt_tokens": 144, "completion_tokens": 103, "duration": 3.7109463214874268}
