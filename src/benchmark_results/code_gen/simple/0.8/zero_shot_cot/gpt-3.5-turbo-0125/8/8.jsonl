{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list of numbers in ascending order\n    numbers.sort()\n    \n    # Check if there are any two numbers closer than the threshold\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    \n    return False", "prompt_tokens": 163, "completion_tokens": 85, "duration": 2.026207685470581}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove any spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store separate groups\n    separated_groups = []\n    \n    # Initialize a counter to keep track of the current group's starting index\n    start_idx = 0\n    \n    # Iterate over the characters in the input string\n    for idx, char in enumerate(paren_string):\n        # If we find a closing parenthesis\n        if char == \")\":\n            # Extract the current group and add it to the list\n            separated_groups.append(paren_string[start_idx:idx + 1])\n            # Update the start index for the next group\n            start_idx = idx + 1\n    \n    return separated_groups", "prompt_tokens": 154, "completion_tokens": 167, "duration": 3.336571455001831}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    # Find the integer part of the number\n    integer_part = int(number)\n    \n    # Calculate the decimal part by subtracting the integer part from the original number\n    decimal_part = number - integer_part\n    \n    # Return the decimal part\n    return decimal_part", "prompt_tokens": 125, "completion_tokens": 70, "duration": 1.9409499168395996}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    # Initialize balance to zero\n    balance = 0\n    \n    # Iterate through the operations\n    for operation in operations:\n        # Update the balance\n        balance += operation\n        \n        # Check if balance falls below zero\n        if balance < 0:\n            return True\n    \n    return False", "prompt_tokens": 158, "completion_tokens": 77, "duration": 2.1020398139953613}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences between each element and the mean\n    abs_diff = [abs(num - mean) for num in numbers]\n    \n    # Calculate the mean absolute deviation\n    mad = sum(abs_diff) / len(numbers)\n    \n    return mad", "prompt_tokens": 156, "completion_tokens": 91, "duration": 2.3681633472442627}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []  # create an empty list to store the interspersed elements\n    \n    for num in numbers[:-1]:  # iterate over each number in the input list except the last one\n        result.extend([num, delimeter])  # add the number and the delimeter to the result list\n    \n    if numbers:  # check if the input list is not empty\n        result.append(numbers[-1])  # add the last number to the result list\n    \n    return result  # return the interspersed list\n\n# Test cases\nprint(intersperse([], 4))\nprint(intersperse([1, 2, 3], 4))", "prompt_tokens": 460, "completion_tokens": 301, "duration": 5.596165657043457}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string by spaces to separate different groups\n    groups = paren_string.split()\n    \n    # Initialize a list to store the deepest level of nesting for each group\n    result = []\n    \n    # Iterate over each group in the input string\n    for group in groups:\n        # Initialize variables to keep track of nesting level and maximum nesting level\n        level = 0\n        max_level = 0\n        \n        # Iterate over each character in the group\n        for char in group:\n            if char == '(':\n                # Increment the current nesting level\n                level += 1\n                # Update the maximum nesting level if the current level is greater\n                if level > max_level:\n                    max_level = level\n            elif char == ')':\n                # Decrement the nesting level when encountering closing parenthesis\n                level -= 1\n        \n        # Append the maximum nesting level for the current group to the result list\n        result.append(max_level)\n    \n    return result", "prompt_tokens": 151, "completion_tokens": 220, "duration": 5.457076072692871}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Initialize an empty list to store the filtered strings\n    filtered_strings = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the substring is present in the current string\n        if substring in string:\n            # If the substring is present, add the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the filtered list of strings\n    return filtered_strings", "prompt_tokens": 132, "completion_tokens": 113, "duration": 2.606231689453125}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Initialize variables to store sum and product\n    total_sum = 0\n    total_product = 1\n    \n    # Calculate sum and product\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    # Return the tuple of sum and product\n    return (total_sum, total_product)", "prompt_tokens": 149, "completion_tokens": 89, "duration": 1.9940319061279297}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    # Initialize an empty deque to store the indexes of elements in the list\n    max_indexes = deque()\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through the elements in the list\n    for i, num in enumerate(numbers):\n        # Remove indexes from the deque that are out of the rolling window\n        while max_indexes and max_indexes[0] < i - 2:\n            max_indexes.popleft()\n        \n        # Remove elements from the deque that are smaller than the current element\n        while max_indexes and numbers[max_indexes[-1]] < num:\n            max_indexes.pop()\n        \n        # Append the current element index to the deque\n        max_indexes.append(i)\n        \n        # Append the maximum element from the deque to the result list\n        result.append(numbers[max_indexes[0]])\n    \n    return result", "prompt_tokens": 139, "completion_tokens": 192, "duration": 3.812494993209839}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]", "prompt_tokens": 182, "completion_tokens": 79, "duration": 1.9881536960601807}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    # Convert input strings to integers\n    a_int = int(a, 2)\n    b_int = int(b, 2)\n    \n    # Perform XOR operation\n    result_int = a_int ^ b_int\n    \n    # Convert result back to binary string\n    result_str = bin(result_int)[2:]\n    \n    return result_str", "prompt_tokens": 115, "completion_tokens": 88, "duration": 1.9361469745635986}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = max(strings, key=len)\n    return max([s for s in strings if len(s) == len(longest_str)])", "prompt_tokens": 141, "completion_tokens": 53, "duration": 1.527515172958374}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Find the smallest number between a and b\n    smallest = min(a, b)\n    \n    # Check for the greatest common divisor starting from the smallest number\n    for i in range(smallest, 0, -1):\n        if a % i == 0 and b % i == 0:\n            return i", "prompt_tokens": 110, "completion_tokens": 83, "duration": 2.409543991088867}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    # Initialize an empty list to store prefixes\n    prefixes = []\n    \n    # Iterate over the string\n    for i in range(1, len(string) + 1):\n        # Add each prefix to the list\n        prefixes.append(string[:i])\n    \n    # Return the list of prefixes\n    return prefixes", "prompt_tokens": 98, "completion_tokens": 82, "duration": 2.150820016860962}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    # Create a list of numbers from 0 to n using list comprehension\n    numbers = [str(i) for i in range(n+1)]\n    # Join the numbers in the list with space delimiter\n    result = ' '.join(numbers)\n    return result", "prompt_tokens": 108, "completion_tokens": 69, "duration": 1.6313917636871338}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase\n    string = string.lower()\n    \n    # Use set() to get distinct characters\n    distinct_characters = set(string)\n    \n    # Return the count of distinct characters\n    return len(distinct_characters)", "prompt_tokens": 110, "completion_tokens": 65, "duration": 1.8337182998657227}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    # Replace 'o' with '4', 'o|' with '2', and '.|' with '1'\n    music_string = music_string.replace('o', '4').replace('o|', '2').replace('.|', '1')\n    \n    # Split the string by space to get a list of notes\n    notes = music_string.split()\n    \n    # Convert notes from string to integers\n    notes = [int(note) for note in notes]\n    \n    return notes", "prompt_tokens": 211, "completion_tokens": 120, "duration": 2.8974990844726562}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    # if either string or substring is empty, return 0\n    if not string or not substring:\n        return 0\n    \n    count = 0\n    sub_len = len(substring)\n    str_len = len(string)\n    \n    # iterate through the original string\n    for i in range(str_len - sub_len + 1):\n        # check if the substring exists in the current position\n        if string[i:i+sub_len] == substring:\n            count += 1\n    \n    return count", "prompt_tokens": 128, "completion_tokens": 124, "duration": 2.610832691192627}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    # Create a dictionary to map numberals to their corresponding numbers\n    num_dict = {\n        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n        'seven': '7',\n        'eight': '8',\n        'nine': '9'\n    }\n    \n    # Split the input string into a list of numberals\n    num_list = numbers.split()\n    \n    # Sort the list based on the numerical value of the numberals\n    sorted_num_list = sorted(num_list, key=lambda x: num_dict[x])\n    \n    # Join the sorted list back into a string\n    sorted_numbers = ' '.join(sorted_num_list)\n    \n    return sorted_numbers", "prompt_tokens": 144, "completion_tokens": 188, "duration": 3.2382171154022217}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the numbers in ascending order\n    numbers.sort()\n    \n    # Initialize variables to store the closest pair of numbers and their difference\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n    \n    # Iterate through the sorted list to find the closest pair\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            closest_pair = (numbers[i], numbers[i + 1])\n            min_diff = diff\n    \n    return closest_pair", "prompt_tokens": 205, "completion_tokens": 150, "duration": 3.067763328552246}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Calculate the range of the values\n    range_val = max_val - min_val\n    \n    # Apply linear transformation to rescale the values to the unit interval [0, 1]\n    rescaled_numbers = [(num - min_val) / range_val for num in numbers]\n    \n    return rescaled_numbers", "prompt_tokens": 162, "completion_tokens": 110, "duration": 3.210000991821289}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    # Initialize an empty list to store filtered integers\n    integers = []\n    \n    # Iterate over each value in the input list\n    for value in values:\n        # Check if the value is an integer\n        if isinstance(value, int):\n            # Append the integer value to the list\n            integers.append(value)\n    \n    return integers", "prompt_tokens": 130, "completion_tokens": 82, "duration": 2.051521062850952}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    # Return the length of the input string\n    return len(string)", "prompt_tokens": 83, "completion_tokens": 28, "duration": 1.3815114498138428}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    # Start checking from n-1 down to 1\n    for i in range(n-1, 0, -1):\n        # If n is divisible by i, return i as the largest divisor\n        if n % i == 0:\n            return i", "prompt_tokens": 92, "completion_tokens": 72, "duration": 1.858738660812378}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    # Initialize an empty list to store the prime factors\n    factors = []\n    \n    # Start with the smallest prime number\n    i = 2\n    \n    # Keep dividing the number by the prime number until it is no longer divisible\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            # If the number is divisible by the prime number, add the prime number to the list of factors\n            factors.append(i)\n            n //= i\n    \n    # If there is anything left after the loop, it is a prime number\n    if n > 1:\n        factors.append(n)\n    \n    return factors", "prompt_tokens": 165, "completion_tokens": 158, "duration": 3.1861398220062256}
{"task_id": "HumanEval/26", "generated_code": "from collections import Counter  # Import Counter from collections module\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:  # Define the function signature\n    count = Counter(numbers)  # Count the occurrences of each element\n    result = [num for num in numbers if count[num] == 1]  # Create a new list with elements that occur only once\n    return result  # Return the resulting list", "prompt_tokens": 123, "completion_tokens": 85, "duration": 2.1094918251037598}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    # Use list comprehension to flip the case of each character in the string\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 88, "completion_tokens": 52, "duration": 1.5728795528411865}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    # Join the list of strings using the empty string as a separator\n    return ''.join(strings)", "prompt_tokens": 96, "completion_tokens": 36, "duration": 1.4079773426055908}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Create an empty list to store strings that start with the given prefix\n    result = []\n    \n    # Iterate through each string in the input list of strings\n    for string in strings:\n        # Check if the current string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, add the string to the result list\n            result.append(string)\n    \n    return result", "prompt_tokens": 126, "completion_tokens": 104, "duration": 2.257011651992798}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    # Create an empty list to store positive numbers\n    positive_nums = []\n    \n    # Iterate over each number in the list\n    for num in l:\n        # Check if the number is positive\n        if num > 0:\n            # Append the positive number to the positive_nums list\n            positive_nums.append(num)\n    \n    return positive_nums", "prompt_tokens": 153, "completion_tokens": 79, "duration": 1.9664018154144287}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # Check for numbers from 2 to the square root of n\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    return True", "prompt_tokens": 139, "completion_tokens": 76, "duration": 1.9553065299987793}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    # Check if the length of the coefficients list is even\n    if len(xs) % 2 != 0:\n        return None\n    \n    # Find the degree of the polynomial\n    degree = len(xs) - 1\n    \n    # Find the largest non-zero coefficient\n    largest_coefficient = max([abs(coeff) for coeff in xs[1:]])\n    \n    # Initialize a variable to store the potential zero\n    zero = None\n    \n    # Iterate through possible integer roots\n    for i in range(1, largest_coefficient + 1):\n        # If the polynomial evaluated at i is zero\n        if poly(xs, i) == 0:\n            zero = i\n            break\n        # If the polynomial evaluated at -i is zero\n        elif poly(xs, -i) == 0:\n            zero = -i\n            break\n    \n    return zero", "prompt_tokens": 298, "completion_tokens": 193, "duration": 3.26926589012146}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Create a new list to store the sorted values\n    sorted_values = []\n    # Iterate through the indices of the input list\n    for i in range(len(l)):\n        # Check if the index is divisible by three\n        if i % 3 == 0:\n            # If divisible by three, append the sorted value to the new list\n            sorted_values.append(l[i])\n    # Sort the list of sorted values\n    sorted_values.sort()\n    # Iterate through the input list again\n    for i in range(len(l)):\n        # Check if the index is divisible by three\n        if i % 3 == 0:\n            # If divisible by three, replace the value with the sorted value\n            l[i] = sorted_values.pop(0)\n    return l", "prompt_tokens": 190, "completion_tokens": 173, "duration": 3.162470817565918}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    # Convert list to a set to remove duplicates\n    unique_elements = set(l)\n    \n    # Sort the unique elements\n    sorted_unique_elements = sorted(unique_elements)\n    \n    return sorted_unique_elements", "prompt_tokens": 113, "completion_tokens": 52, "duration": 1.4833705425262451}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    # Sort the list in ascending order\n    l.sort()\n    # Return the last element in the sorted list\n    return l[-1]", "prompt_tokens": 122, "completion_tokens": 37, "duration": 3.0250535011291504}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    # Initialize a variable to count the number of times digit 7 appears\n    count = 0\n    # Loop through integers less than n\n    for i in range(1, n):\n        # Check if the integer is divisible by 11 or 13 and contains digit 7\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            # Increment the count if condition is met\n            count += 1\n    # Return the count\n    return count", "prompt_tokens": 119, "completion_tokens": 126, "duration": 2.950505495071411}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Separate even and odd elements\n    even = l[::2]\n    odd = l[1::2]\n    \n    # Sort even elements\n    sorted_even = sorted(even)\n    \n    # Combine odd and sorted even elements\n    result = [None] * (len(odd) + len(sorted_even))\n    result[::2] = sorted_even\n    result[1::2] = odd\n    \n    return result", "prompt_tokens": 163, "completion_tokens": 102, "duration": 5.81858491897583}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 198, "completion_tokens": 83, "duration": 3.9754140377044678}
{"task_id": "HumanEval/39", "generated_code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    def is_fib(num):\n        if num == 0:\n            return False\n        a, b = 0, 1\n        while b < num:\n            a, b = b, a + b\n        return b == num\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_fib(num) and is_prime(num):\n            count += 1\n        num += 1\n    return num - 1\n\n# Testing the function\nprint(prime_fib(1))  # 2\nprint(prime_fib(2))  # 3\nprint(prime_fib(3))  # 5\nprint(prime_fib(4))  # 13\nprint(prime_fib(5))  # 89", "prompt_tokens": 137, "completion_tokens": 236, "duration": 6.289242744445801}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    # Sort the list\n    l.sort()\n    \n    # Iterate through the list\n    for i in range(len(l)-2):\n        left = i + 1\n        right = len(l) - 1\n        \n        # Implement two-pointer technique\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            \n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False", "prompt_tokens": 199, "completion_tokens": 127, "duration": 3.0193634033203125}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    # Calculate the total number of collisions\n    return n * (n - 1) // 2", "prompt_tokens": 191, "completion_tokens": 35, "duration": 7.268024206161499}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate over each element in the input list\n    for num in l:\n        # Increment the element by 1 and append it to the result list\n        result.append(num + 1)\n    \n    # Return the result list\n    return result", "prompt_tokens": 148, "completion_tokens": 75, "duration": 4.047341823577881}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "prompt_tokens": 197, "completion_tokens": 53, "duration": 1.512995958328247}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    # define a list to store the remainders\n    result = []\n    \n    # while x is not 0\n    while x != 0:\n        # get the remainder of x divided by base\n        remainder = x % base\n        # add the remainder to the front of the result list\n        result.insert(0, str(remainder))\n        # update x to be x divided by the base\n        x = x // base\n        \n    # return the result list joined as a string\n    return ''.join(result)", "prompt_tokens": 131, "completion_tokens": 124, "duration": 2.614175319671631}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    # Calculate the area of the triangle using the formula: area = 0.5 * base * height\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 86, "completion_tokens": 50, "duration": 5.146531343460083}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    # Initialize a list to store the first 4 elements of the Fib4 sequence\n    fib4_sequence = [0, 0, 2, 0]\n    \n    # Loop to calculate the n-th element of the Fib4 sequence\n    for i in range(4, n + 1):\n        next_element = fib4_sequence[i-1] + fib4_sequence[i-2] + fib4_sequence[i-3] + fib4_sequence[i-4]\n        fib4_sequence.append(next_element)\n    \n    # Return the n-th element of the Fib4 sequence\n    return fib4_sequence[n]", "prompt_tokens": 211, "completion_tokens": 139, "duration": 4.335092782974243}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    # Step 1: Sort the list\n    l.sort()\n    \n    # Step 2: Calculate the length of the list\n    n = len(l)\n    \n    # Step 3: Check if the length of the list is even or odd\n    if n % 2 == 0:\n        # If even, return the average of the middle two elements\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        # If odd, return the middle element\n        return l[n//2]", "prompt_tokens": 115, "completion_tokens": 128, "duration": 6.314418077468872}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    # Remove spaces and convert text to lowercase\n    text = text.replace(\" \", \"\").lower()\n    \n    # Check if the text is equal to its reverse\n    return text == text[::-1]", "prompt_tokens": 111, "completion_tokens": 53, "duration": 3.3154115676879883}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    # Calculate 2^n\n    result = 2 ** n\n    # Return the result modulo p\n    return result % p", "prompt_tokens": 145, "completion_tokens": 44, "duration": 3.3271255493164062}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    # For each character in the input string\n    # Shift back the character by 5 in the alphabet\n    # Consider wrapping around if the shift goes beyond 'z'\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 130, "completion_tokens": 79, "duration": 3.572887897491455}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    # Define a list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    # Use list comprehension to filter out vowels from the input text\n    result = ''.join([char for char in text if char not in vowels])\n    \n    return result", "prompt_tokens": 162, "completion_tokens": 89, "duration": 3.8177409172058105}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    # Check if all numbers in the list are below the threshold\n    return all(num < t for num in l)", "prompt_tokens": 119, "completion_tokens": 36, "duration": 3.010246992111206}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    # Return the sum of x and y\n    return x + y", "prompt_tokens": 93, "completion_tokens": 30, "duration": 3.016519069671631}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    # Sort the characters in the two words\n    s0_sorted = sorted(s0)\n    s1_sorted = sorted(s1)\n    \n    # Check if the sorted characters are equal\n    return s0_sorted == s1_sorted", "prompt_tokens": 180, "completion_tokens": 66, "duration": 5.282282114028931}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    # Base cases for Fibonacci sequence\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Use recursion to calculate Fibonacci number\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 92, "completion_tokens": 67, "duration": 5.3847975730896}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a counter variable to keep track of the balance of brackets\n    balance = 0\n    \n    # Iterate through each character in the string\n    for bracket in brackets:\n        # Increment the balance if an opening bracket is encountered\n        if bracket == \"<\":\n            balance += 1\n        # Decrement the balance if a closing bracket is encountered\n        elif bracket == \">\":\n            balance -= 1\n        # If the balance becomes negative, return False\n        if balance < 0:\n            return False\n    \n    # Check if the final balance is zero\n    return balance == 0", "prompt_tokens": 132, "completion_tokens": 142, "duration": 4.639085054397583}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    # Check if list is monotonically increasing\n    if all(l[i] <= l[i+1] for i in range(len(l)-1)):\n        return True\n    # Check if list is monotonically decreasing\n    elif all(l[i] >= l[i+1] for i in range(len(l)-1)):\n        return True\n    else:\n        return False", "prompt_tokens": 127, "completion_tokens": 90, "duration": 5.754638671875}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    # find the common elements between the two lists\n    common_elements = set(l1) & set(l2)\n    \n    # sort the common elements and convert it back to a list\n    return sorted(list(common_elements))", "prompt_tokens": 154, "completion_tokens": 62, "duration": 3.441432237625122}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    # Find the smallest prime factor\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    \n    return n", "prompt_tokens": 103, "completion_tokens": 58, "duration": 5.0134124755859375}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    # Calculate the sum of numbers from 1 to n\n    return n*(n+1)//2", "prompt_tokens": 134, "completion_tokens": 35, "duration": 3.1720962524414062}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a counter to keep track of the number of opening brackets\n    opening_bracket_counter = 0\n    \n    # Iterate through each character in the string\n    for bracket in brackets:\n        # If the character is an opening bracket, increment the counter\n        if bracket == \"(\":\n            opening_bracket_counter += 1\n        # If the character is a closing bracket and there are no opening brackets left, return False\n        elif bracket == \")\" and opening_bracket_counter == 0:\n            return False\n        # If the character is a closing bracket and there is at least one opening bracket, decrement the counter\n        elif bracket == \")\":\n            opening_bracket_counter -= 1\n    \n    # If there are no opening brackets left after iterating through the string, return True\n    return opening_bracket_counter == 0", "prompt_tokens": 129, "completion_tokens": 189, "duration": 6.9657347202301025}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    # Initialize an empty list to store the derivative coefficients\n    result = []\n    \n    # Iterate over the coefficients of the polynomial starting from the coefficient of x\n    for i in range(1, len(xs)):\n        # Calculate the derivative coefficient and append it to the result list\n        result.append(xs[i] * i)\n    \n    return result", "prompt_tokens": 148, "completion_tokens": 82, "duration": 3.634666681289673}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 189, "completion_tokens": 92, "duration": 3.856093168258667}
{"task_id": "HumanEval/64", "generated_code": "# Define the function with input parameter 's'\ndef vowels_count(s):\n    # Initialize a variable to store the count of vowels\n    count = 0\n    \n    # Define a set of vowels\n    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    \n    # Iterate through the characters of the input string\n    for i in range(len(s)):\n        # Check if the character is a vowel\n        if s[i].lower() in vowels:\n            # Increment the count if it is a vowel\n            count += 1\n        # Check if 'y' is a vowel at the end of the word\n        elif s[i].lower() == 'y' and i == len(s) - 1:\n            # Increment the count if 'y' is at the end of the word\n            count += 1\n    \n    # Return the total count of vowels\n    return count", "prompt_tokens": 166, "completion_tokens": 197, "duration": 5.817190408706665}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x: int, shift: int) -> str:\n    # Convert the integer to a string\n    x_str = str(x)\n    \n    # Calculate the actual shift value\n    shift %= len(x_str)\n    \n    # Perform circular shift by slicing the string\n    result = x_str[-shift:] + x_str[:-shift]\n    \n    return result", "prompt_tokens": 122, "completion_tokens": 80, "duration": 5.502507925033569}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s: str) -> int:\n    # Initialize a variable to store the sum of ASCII codes\n    total_sum = 0\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII code of the uppercase letter to the total sum\n            total_sum += ord(char)\n    \n    # Return the total sum\n    return total_sum", "prompt_tokens": 152, "completion_tokens": 103, "duration": 3.694215774536133}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    # Split the input string to extract the number of apples and oranges\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    \n    # Calculate the number of mango fruits in the basket\n    mango = n - apples - oranges\n    \n    return mango", "prompt_tokens": 250, "completion_tokens": 76, "duration": 3.307246446609497}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    # Create a list to store even values and their indices\n    even_values = []\n    \n    # Iterate through the array and find even values\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_values.append([arr[i], i])\n    \n    # If no even values found, return empty list\n    if len(even_values) == 0:\n        return []\n    \n    # Sort the list of even values based on value and index\n    even_values.sort(key=lambda x: (x[0], x[1]))\n    \n    # Return the smallest even value and its index\n    return even_values[0]", "prompt_tokens": 352, "completion_tokens": 147, "duration": 4.903461456298828}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    # Create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    \n    # Iterate through the list to count the frequency of each integer\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Iterate through the frequency dictionary to find the greatest integer that meets the condition\n    result = -1\n    for num, freq in freq_dict.items():\n        if num > 0 and num <= freq:\n            result = max(result, num)\n    \n    return result", "prompt_tokens": 205, "completion_tokens": 135, "duration": 6.067155361175537}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Create an empty list to store the result\n    result = []\n    \n    # Loop until the length of the list is greater than 0\n    while len(lst) > 0:\n        # Append the minimum element to the result list\n        result.append(lst.pop(0))\n        # If there are more elements in the list, append the maximum element to the result list\n        if len(lst) > 0:\n            result.append(lst.pop())\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 123, "duration": 4.404425382614136}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # Check if the given sides can form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 161, "completion_tokens": 135, "duration": 5.986948251724243}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    # Check if the list q is a palindrome\n    if q == q[::-1]:\n        # Check if the sum of elements in q is less than or equal to w\n        if sum(q) <= w:\n            return True\n    return False", "prompt_tokens": 270, "completion_tokens": 66, "duration": 5.318053483963013}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    # Calculate the length of the array\n    n = len(arr)\n\n    # Initialize a variable to count the number of changes needed\n    changes = 0\n\n    # Iterate over the first half of the array\n    for i in range(n // 2):\n        # Check if the elements are different\n        if arr[i] != arr[n - i - 1]:\n            # Increment the changes needed\n            changes += 1\n    \n    # Return the total number of changes needed\n    return changes", "prompt_tokens": 197, "completion_tokens": 114, "duration": 4.301542282104492}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    # Calculate total number of characters in each list\n    total_chars_lst1 = sum([len(word) for word in lst1])\n    total_chars_lst2 = sum([len(word) for word in lst2])\n\n    # Compare total number of characters and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 233, "completion_tokens": 96, "duration": 3.996103525161743}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Find all prime factors of the number\n    prime_factors = [i for i in range(2, a) if is_prime(i) and a % i == 0]\n\n    # Return True if there are exactly 3 prime factors\n    return len(prime_factors) == 3", "prompt_tokens": 119, "completion_tokens": 138, "duration": 4.156828165054321}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    # Check if x is a simple power of n\n    if n ** int(x ** (1/n)) == x:\n        return True\n    else:\n        return False", "prompt_tokens": 182, "completion_tokens": 49, "duration": 5.101593017578125}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    # Take the cube root of the absolute value of a\n    root = round(abs(a) ** (1/3))\n    # Check if the cube of the root is equal to the absolute value of a\n    return root**3 == abs(a)", "prompt_tokens": 150, "completion_tokens": 62, "duration": 5.189724922180176}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Create a list of prime digits in hexadecimal\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    \n    # Initialize a counter for prime digits\n    count = 0\n    \n    # Iterate through each digit in the hexadecimal number\n    for digit in num:\n        # Check if the digit is a prime digit\n        if digit in primes:\n            count += 1\n    \n    # Return the count of prime digits\n    return count", "prompt_tokens": 339, "completion_tokens": 110, "duration": 5.754796504974365}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    # Convert decimal to binary\n    binary = bin(decimal)[2:]\n    \n    # Add 'db' at the beginning and end of the binary string\n    result = 'db' + binary + 'db'\n    \n    return result", "prompt_tokens": 179, "completion_tokens": 59, "duration": 3.2914111614227295}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Check if any 3 consecutive characters are the same\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 161, "completion_tokens": 104, "duration": 3.6517210006713867}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    # Initialize an empty list to store letter grades\n    letter_grades = []\n    \n    # Iterate through each GPA in the given list\n    for gpa in grades:\n        # Check the GPA and assign the corresponding letter grade\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades", "prompt_tokens": 310, "completion_tokens": 301, "duration": 6.116184711456299}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    # Check if the length of the string is less than 2, return False\n    if len(string) < 2:\n        return False\n    \n    # Check if the length of the string is a prime number\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    \n    return True", "prompt_tokens": 121, "completion_tokens": 93, "duration": 3.9248929023742676}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    # Initialize a variable to keep track of the count\n    count = 0\n    \n    # Iterate through all n-digit positive integers\n    for i in range(10 ** (n - 1), 10 ** n):\n        # Check if the number starts or ends with 1\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n            \n    return count", "prompt_tokens": 84, "completion_tokens": 101, "duration": 5.595437288284302}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Convert the integer N to binary and then to string\n    binary_string = bin(N)[2:]\n    \n    # Calculate the sum of digits in the binary string\n    total_sum = sum(int(digit) for digit in binary_string)\n    \n    # Convert the total sum to binary and return as string\n    return bin(total_sum)[2:]", "prompt_tokens": 173, "completion_tokens": 80, "duration": 5.519229412078857}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    # Create a variable to store the sum of even elements at odd indices\n    total = 0\n\n    # Iterate over the elements at odd indices in the list\n    for i in range(1, len(lst), 2):\n        # Check if the element at the current index is even\n        if lst[i] % 2 == 0:\n            # Add the even element to the total sum\n            total += lst[i]\n\n    return total", "prompt_tokens": 95, "completion_tokens": 103, "duration": 5.496289968490601}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    # Split the input string into a list of words\n    words = s.split()\n\n    # Create an empty list to store the ordered words\n    ordered_words = []\n\n    # Iterate over each word in the list\n    for word in words:\n        # Sort the characters in the word based on ascii value and join them back\n        ordered_word = ''.join(sorted(word))\n        # Add the ordered word to the list of ordered words\n        ordered_words.append(ordered_word)\n\n    # Join the ordered words back into a string using space as delimiter\n    result = ' '.join(ordered_words)\n\n    return result", "prompt_tokens": 170, "completion_tokens": 136, "duration": 2.5714480876922607}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    \n    # Iterate over each row in the list\n    for row_index, row in enumerate(lst):\n        # If x is in the current row\n        if x in row:\n            # Iterate over each column in the row\n            for col_index, col_val in enumerate(row):\n                # If the column value is equal to x, add the coordinate to the result list\n                if col_val == x:\n                    result.append((row_index, col_index))\n    \n    # Sort coordinates by row in ascending order and by column in descending order\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    \n    return result", "prompt_tokens": 299, "completion_tokens": 150, "duration": 2.968268871307373}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    # Check if the sum of the first and last elements is odd\n    if (array[0] + array[-1]) % 2 == 1:\n        # Return a sorted copy of the array in ascending order\n        return sorted(array)\n    else:\n        # Return a sorted copy of the array in descending order\n        return sorted(array, reverse=True)", "prompt_tokens": 243, "completion_tokens": 85, "duration": 1.906001329421997}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Initialize an empty string to store the encrypted text\n    encrypted_text = ''\n    \n    # Define the multiplier for the shift\n    multiplier = 2\n    \n    # Loop through each character in the input string\n    for char in s:\n        # Check if the character is an alphabet letter\n        if char.isalpha():\n            # Get the index of the character in the alphabet\n            index = alphabet.index(char)\n            # Calculate the new index after shifting\n            new_index = (index + (multiplier * 2)) % 26\n            # Append the new character to the encrypted text\n            encrypted_text += alphabet[new_index]\n        else:\n            # Append non-alphabet characters unchanged\n            encrypted_text += char\n    \n    # Return the encrypted text\n    return encrypted_text", "prompt_tokens": 150, "completion_tokens": 183, "duration": 3.6666457653045654}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    # Check if the length of the list is less than 2, return None\n    if len(lst) < 2:\n        return None\n    \n    # Find the smallest element in the list\n    smallest = min(lst)\n    \n    # Remove all occurrences of the smallest element\n    lst = [x for x in lst if x != smallest]\n    \n    # If the modified list is empty, return None\n    if not lst:\n        return None\n    \n    # Find the second smallest element in the modified list\n    second_smallest = min(lst)\n    \n    return second_smallest", "prompt_tokens": 164, "completion_tokens": 131, "duration": 2.9913196563720703}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Split the string into sentences based on delimiters '.' '?' '!'\n    sentences = S.split('. ') + S.split('? ') + S.split('! ')\n\n    # Count the number of sentences that start with 'I'\n    count_boredoms = sum(1 for sentence in sentences if sentence.startswith('I'))\n\n    return count_boredoms", "prompt_tokens": 147, "completion_tokens": 82, "duration": 2.1724753379821777}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(num, int) for num in [x, y, z]):\n        # Check if one number is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False", "prompt_tokens": 175, "completion_tokens": 84, "duration": 2.124929189682007}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    # Define a dictionary with vowels as keys and their replacements as values\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n\n    # Initialize an empty string to store the encoded message\n    encoded_message = \"\"\n\n    # Loop through each character in the message\n    for char in message:\n        # If the character is a letter\n        if char.isalpha():\n            # Swap the case of the letter\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n            # Check if the letter is a vowel and replace it with the corresponding value from the dictionary\n            if char in vowels:\n                char = vowels[char]\n        \n        # Append the character to the encoded message\n        encoded_message += char\n\n    # Return the encoded message\n    return encoded_message", "prompt_tokens": 149, "completion_tokens": 225, "duration": 4.258629083633423}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    # Import the isprime function from sympy library\n    from sympy import isprime\n    \n    # Define a function to calculate the sum of digits of a number\n    def sum_of_digits(number):\n        return sum(int(digit) for digit in str(number))\n    \n    # Filter prime numbers from the list and find the largest one\n    largest_prime = max(filter(isprime, lst))\n    \n    # Return the sum of digits of the largest prime number\n    return sum_of_digits(largest_prime)", "prompt_tokens": 326, "completion_tokens": 116, "duration": 2.273099184036255}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    keys = list(dict.keys())\n    first_key_case = keys[0].islower()\n    \n    for key in keys:\n        if key.islower() != first_key_case:\n            return False\n        \n    return True", "prompt_tokens": 209, "completion_tokens": 68, "duration": 1.9055168628692627}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    # Define a helper function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize an empty list to store prime numbers\n    primes = []\n    \n    # Iterate through numbers from 2 to n-1\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    \n    return primes", "prompt_tokens": 185, "completion_tokens": 132, "duration": 2.583540916442871}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a: int, b: int) -> int:\n    # Get the unit digit of number a\n    unit_a = abs(a) % 10\n    # Get the unit digit of number b\n    unit_b = abs(b) % 10\n    # Return the product of the unit digits\n    return unit_a * unit_b", "prompt_tokens": 138, "completion_tokens": 77, "duration": 2.1054680347442627}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s: str) -> int:\n    # Initialize a count variable\n    count = 0\n    \n    # Iterate through the even indices of the string\n    for i in range(0, len(s), 2):\n        # Check if the character at the even index is an uppercase vowel\n        if s[i] in 'AEIOU':\n            count += 1\n    \n    # Return the count of uppercase vowels in even indices\n    return count", "prompt_tokens": 112, "completion_tokens": 100, "duration": 2.2521893978118896}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    # Convert the input value to a float\n    value = float(value)\n    \n    # Check if the decimal part is greater than or equal to 0.5\n    if value % 1 >= 0.5:\n        return int(value) + 1\n    # Check if the decimal part is less than -0.5\n    elif value % 1 <= -0.5:\n        return int(value) - 1\n    # If equidistant, round away from zero\n    else:\n        return round(value)", "prompt_tokens": 196, "completion_tokens": 121, "duration": 2.666459321975708}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    # Initialize an empty list to store the number of stones in each level\n    stones_in_levels = []\n    \n    # Start with the first level which has n stones\n    stones_in_levels.append(n)\n    \n    # Calculate the number of stones in each subsequent level based on the rules\n    for i in range(n - 1):\n        if n % 2 == 0:  # If n is even\n            n += 2\n        else:  # If n is odd\n            n += 1\n        stones_in_levels.append(n)\n    \n    return stones_in_levels", "prompt_tokens": 172, "completion_tokens": 133, "duration": 2.9327118396759033}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    # Split the string into words using both commas and spaces as delimiters\n    words = s.replace(\",\", \" \").split()\n    # Return the array of words\n    return words", "prompt_tokens": 156, "completion_tokens": 47, "duration": 1.723182201385498}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x: int, y: int) -> int:\n    # Iterate from y to x inclusive\n    for i in range(y, x-1, -1):\n        # Check if the number is even\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 134, "completion_tokens": 69, "duration": 1.6539340019226074}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m + 1))  # calculate the sum of integers from n to m\n    avg = round(total / (m - n + 1))  # calculate the average and round to nearest integer\n    return bin(avg)  # convert the average to binary format\n\n# Test cases\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))", "prompt_tokens": 180, "completion_tokens": 129, "duration": 2.517180919647217}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    # Filter out the elements with even digits\n    result = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    \n    # Sort the filtered elements in increasing order\n    result.sort()\n    \n    return result", "prompt_tokens": 142, "completion_tokens": 66, "duration": 1.741147518157959}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # Sort the array by integers between 1 and 9\n    arr = sorted([x for x in arr if 1 <= x <= 9])\n\n    # Reverse the sorted array\n    arr = arr[::-1]\n\n    # Replace each digit by its corresponding name\n    result = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [result[x-1] for x in arr]\n\n    return arr", "prompt_tokens": 316, "completion_tokens": 114, "duration": 2.5294747352600098}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Check if i is even\n        if i % 2 == 0:\n            # Calculate the factorial of i\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Calculate the sum of numbers from 1 to i\n            sum_nums = sum(range(1, i+1))\n            result.append(sum_nums)\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 142, "duration": 2.90151047706604}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    # Initialize counts for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through numbers from 1 to n\n    for num in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(num) == str(num)[::-1]:\n            # Increment the appropriate count based on whether the palindrome is even or odd\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    # Return the counts as a tuple\n    return (even_count, odd_count)", "prompt_tokens": 251, "completion_tokens": 144, "duration": 3.005891799926758}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    # Initialize a variable to keep track of the count of numbers with sum of digits > 0\n    count = 0\n    \n    # Iterate through each number in the array\n    for num in arr:\n        # Convert the number to a string to iterate through each digit\n        for digit in str(abs(num)):\n            # Add the integer value of each digit to a running sum\n            count += int(digit)\n    \n    # Check if the sum of digits is greater than 0\n    if count > 0:\n        return 1\n    \n    return 0", "prompt_tokens": 164, "completion_tokens": 127, "duration": 2.404841899871826}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    # If the given array is empty, return True\n    if not arr:\n        return True\n\n    # Find the index of the minimum element in the array\n    min_index = arr.index(min(arr))\n\n    # Check if the array is already sorted in non-decreasing order\n    if all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)):\n        return True\n\n    # Check if the array can be sorted by performing right shift operations\n    for i in range(len(arr)):\n        if arr[(min_index + i) % len(arr)] != min(arr) + i:\n            return False\n    return True", "prompt_tokens": 339, "completion_tokens": 147, "duration": 3.096491813659668}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Calculate the count of odd numbers in lst1\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Return \"YES\" if the number of odd numbers in lst1 is 0 or if it is less than or equal to the length of lst2\n    return \"YES\" if odd_count == 0 or odd_count <= len(lst2) else \"NO\"", "prompt_tokens": 237, "completion_tokens": 102, "duration": 2.2160162925720215}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    # Split the string into a list of lowercase letters\n    letters = test.split()\n    \n    # Initialize a dictionary to store the counts of each letter\n    counts = {}\n    \n    # Iterate over each letter and count its occurrences\n    for letter in letters:\n        counts[letter] = counts.get(letter, 0) + 1\n    \n    # Find the maximum count of occurrences\n    max_count = max(counts.values())\n    \n    # Filter the dictionary to keep only the letters with the maximum count\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    \n    return result", "prompt_tokens": 191, "completion_tokens": 139, "duration": 2.6317389011383057}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    # Delete characters in s that are equal to any character in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result string is palindrome\n    is_palindrome = result == result[::-1]\n    \n    return result, is_palindrome", "prompt_tokens": 202, "completion_tokens": 81, "duration": 2.815154790878296}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for string in lst:\n        odd_digits = sum(1 for digit in string if int(digit) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {string} of the {odd_digits}nput.\")\n    return result", "prompt_tokens": 213, "completion_tokens": 80, "duration": 1.8824124336242676}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    # Initialize variables to track the current sum and minimum sum\n    curr_sum = 0\n    min_sum = float('inf')\n    \n    # Iterate through the array\n    for num in nums:\n        # Update the current sum by adding the current number\n        curr_sum += num\n        # Update the minimum sum if the current sum is smaller\n        min_sum = min(min_sum, curr_sum)\n        # Reset the current sum to 0 if it becomes negative\n        curr_sum = max(curr_sum, 0)\n    \n    return min_sum", "prompt_tokens": 128, "completion_tokens": 126, "duration": 2.7241370677948}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    # Initialize variables\n    total_water = 0\n    buckets = 0\n    \n    # Calculate total water in the grid\n    for row in grid:\n        total_water += sum(row)\n    \n    # Calculate number of buckets needed\n    buckets = math.ceil(total_water / capacity)\n    \n    # Calculate number of times to lower the buckets\n    return buckets\n\n# Test cases\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)) # 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)) # 5\nprint(max_fill([[0,0,0], [0,0,0]], 5)) # 0", "prompt_tokens": 363, "completion_tokens": 201, "duration": 3.70003342628479}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    # Sort the array based on the number of ones in their binary representation and then based on decimal value\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 210, "completion_tokens": 50, "duration": 1.7453927993774414}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s: str, n: int) -> List[str]:\n    # Split the string into words\n    words = s.split()\n    \n    # Initialize a list to store words with exactly n consonants\n    result = []\n    \n    # Define a function to count consonants in a word\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n    \n    # Check each word for the number of consonants and add to result if it matches n\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n    \n    return result", "prompt_tokens": 221, "completion_tokens": 141, "duration": 2.889704465866089}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word[1:-1]\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 189, "completion_tokens": 81, "duration": 1.7907075881958008}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    # Count the number of open and close parentheses in the list\n    open_paren_count = lst[0].count('(')\n    close_paren_count = lst[1].count(')')\n    \n    # Check if the total number of open and close parentheses are equal\n    if open_paren_count == close_paren_count:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 208, "completion_tokens": 92, "duration": 2.0304341316223145}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Return the last k elements from the sorted array\n    return arr[-k:]", "prompt_tokens": 257, "completion_tokens": 42, "duration": 1.485605239868164}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    # filter out the elements in even positions\n    even_position_odd_elements = [lst[i] for i in range(1, len(lst), 2)]\n    \n    # filter out the odd elements from the previous list\n    odd_elements_in_even_positions = [x for x in even_position_odd_elements if x % 2 != 0]\n    \n    # calculate the sum of the odd elements in even positions\n    return sum(odd_elements_in_even_positions)", "prompt_tokens": 137, "completion_tokens": 99, "duration": 2.457732677459717}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    # Step 1: Initialize a variable to keep track of the sum\n    total_sum = 0\n    \n    # Step 2: Iterate through the first k elements of arr\n    for i in range(k):\n        # Step 3: Check if the element has at most two digits\n        if len(str(arr[i])) <= 2:\n            # Step 4: Add the element to the sum\n            total_sum += arr[i]\n    \n    # Step 5: Return the total sum\n    return total_sum", "prompt_tokens": 168, "completion_tokens": 120, "duration": 5.839096307754517}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    # Initialize an empty list to store the odd numbers in the collatz sequence\n    result = []\n    \n    # Iterate until n reaches 1\n    while n != 1:\n        # If n is odd, add it to the result list\n        if n % 2 == 1:\n            result.append(n)\n        # Calculate the next term based on Collatz conjecture\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    \n    # Add 1 to the result list as the final element\n    result.append(1)\n    \n    # Sort the result list in increasing order\n    result.sort()\n    \n    return result", "prompt_tokens": 271, "completion_tokens": 163, "duration": 3.4752683639526367}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is not empty\n    if date == '':\n        return False\n    \n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n    \n    # Convert month, day, and year to integers\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Define the maximum number of days for each month\n    max_days = {\n        1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is within the valid range for the given month\n    if day < 1 or day > max_days[month]:\n        return False\n    \n    # Return True if all conditions are satisfied\n    return True", "prompt_tokens": 303, "completion_tokens": 253, "duration": 6.199408054351807}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    # Check if the text has whitespaces\n    if ' ' in txt:\n        # Split the text on whitespaces\n        return txt.split()\n    # Check if the text has commas\n    elif ',' in txt:\n        # Split the text on commas\n        return txt.split(',')\n    else:\n        # Count the number of lower-case letters with odd order in the alphabet\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 180, "completion_tokens": 112, "duration": 3.420682907104492}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    # Check if the list is sorted in ascending order\n    if lst == sorted(lst):\n        # Check if there are no duplicates (each number appears only once)\n        if len(set(lst)) == len(lst):\n            return True\n    return False", "prompt_tokens": 289, "completion_tokens": 61, "duration": 1.8916280269622803}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    # Determine the maximum of the starting points of the intervals\n    start = max(interval1[0], interval2[0])\n    \n    # Determine the minimum of the ending points of the intervals\n    end = min(interval1[1], interval2[1])\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # If the length is less than or equal to 1, return \"NO\"\n    if length <= 1:\n        return \"NO\"\n    \n    # Check if the length is a prime number\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 294, "completion_tokens": 169, "duration": 4.712214708328247}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product = 1\n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n\n    return sum(abs(num) for num in arr) * product", "prompt_tokens": 162, "completion_tokens": 61, "duration": 3.5033164024353027}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    # Flatten the grid into a list of tuples containing (value, row index, column index)\n    flattened_grid = [(grid[i][j], i, j) for i in range(len(grid)) for j in range(len(grid[0]))]\n    \n    # Sort the flattened grid in ascending order of values\n    flattened_grid.sort()\n    \n    # Initialize the path list to store the values of cells in the path\n    path = []\n    \n    # Start from the first cell in the sorted list\n    current_cell = flattened_grid[0]\n    path.append(current_cell[0])\n    \n    # Repeat the following steps for k - 1 times to find the minimum path of length k\n    for _ in range(k - 1):\n        # Find the neighbors of the current cell\n        neighbors = [(cell, abs(cell[1] - current_cell[1]) + abs(cell[2] - current_cell[2])) for cell in flattened_grid if (abs(cell[1] - current_cell[1]) + abs(cell[2] - current_cell[2])) == 1]\n        \n        # Choose the neighbor with the smallest value\n        min_neighbor = min(neighbors, key=lambda x: x[0][0])\n        \n        # Move to the chosen neighbor and update the current cell\n        current_cell = min_neighbor[0]\n        path.append(current_cell[0])\n    \n    return path", "prompt_tokens": 436, "completion_tokens": 301, "duration": 8.127831935882568}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # Initialize the Tribonacci sequence list with the first two numbers\n    tribonacci = [1, 3]\n    \n    # Loop through the range from 2 to n\n    for i in range(2, n + 1):\n        # Calculate the next number in the sequence based on the rules\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n    \n    return tribonacci", "prompt_tokens": 275, "completion_tokens": 131, "duration": 5.380866527557373}
{"task_id": "HumanEval/131", "generated_code": "def digits(n: int) -> int:\n    # Initialize the product to 1\n    product = 1\n    # Iterate over each digit in the number\n    while n > 0:\n        # Get the last digit\n        digit = n % 10\n        # Check if the digit is odd\n        if digit % 2 != 0:\n            # Update the product with the odd digit\n            product *= digit\n        # Remove the last digit\n        n //= 10\n    # Return the product or 0 if product is still 1\n    return product if product != 1 else 0", "prompt_tokens": 111, "completion_tokens": 134, "duration": 4.949708700180054}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    # Initialize a counter variable to keep track of nested brackets\n    count = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        # If current character is '[' increment count\n        if char == '[':\n            count += 1\n        # If current character is ']' decrement count\n        elif char == ']' and count > 0:\n            count -= 1\n            \n    # Check if count is greater than 0\n    return count > 0", "prompt_tokens": 173, "completion_tokens": 113, "duration": 3.79556941986084}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    # create an empty list to store squared numbers\n    squared_nums = []\n    \n    # iterate through the list\n    for num in lst:\n        # round each element to the upper int\n        rounded_num = math.ceil(num)\n        # square the rounded number and append it to the squared_nums list\n        squared_nums.append(rounded_num ** 2)\n    \n    # return the sum of squared numbers\n    return sum(squared_nums)", "prompt_tokens": 197, "completion_tokens": 104, "duration": 5.627702236175537}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is not empty\n    if txt:\n        # Get the last character of the string\n        last_char = txt[-1]\n        # Check if the last character is an alphabetical character\n        if last_char.isalpha():\n            # Check if the last character is not part of a word (not followed by a space)\n            if last_char != ' ':\n                return True\n    return False", "prompt_tokens": 177, "completion_tokens": 101, "duration": 5.60129189491272}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    # Initialize a variable to store the index of the last element not in the right order\n    index = -1\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than or equal to the element before it\n        if arr[i] < arr[i-1]:\n            # Update the index to the current index\n            index = i - 1\n    \n    # Return the index of the last element not in the right order\n    return index", "prompt_tokens": 143, "completion_tokens": 125, "duration": 4.168772459030151}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    # Filter negative and positive integers\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    # Find largest negative integer or set to None\n    largest_negative = max(negatives) if negatives else None\n    \n    # Find smallest positive integer or set to None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 178, "completion_tokens": 111, "duration": 4.089315176010132}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    # Check if the types of a and b are the same\n    if type(a) == type(b):\n        # Check if a is greater than b\n        if a > b:\n            return a\n        # Check if b is greater than a\n        elif b > a:\n            return b\n        # Return None if a and b are equal\n        else:\n            return None\n    # Return the larger variable type when types are different\n    else:\n        return max(a, b)", "prompt_tokens": 181, "completion_tokens": 114, "duration": 4.490649223327637}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    # Check if n is less than 8 or greater than 4*2*4 = 32\n    if n < 8 or n > 32:\n        return False\n    \n    # Check if n can be expressed as the sum of 4 positive even numbers\n    for i in range(2, n//2+1, 2):\n        for j in range(i, n//2+1, 2):\n            for k in range(j, n//2+1, 2):\n                if i + j + k + k == n:\n                    return True\n    return False", "prompt_tokens": 117, "completion_tokens": 138, "duration": 6.4865734577178955}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    # Initialize result variable with 1\n    result = 1\n    # Loop from n down to 1\n    for i in range(n, 0, -1):\n        # Calculate the factorial of i and multiply it with the result\n        fact_i = 1\n        for j in range(1, i+1):\n            fact_i *= j\n        result *= fact_i\n    return result", "prompt_tokens": 135, "completion_tokens": 97, "duration": 5.764420986175537}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace more than 2 consecutive spaces with a single -\n    while '--' in text:\n        text = text.replace('--', '-')\n    \n    return text", "prompt_tokens": 146, "completion_tokens": 60, "duration": 5.104336977005005}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if there are more than three digits in the file name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into two parts based on the dot\n    name_parts = file_name.split('.')\n    \n    # Check if the part before the dot is not empty and starts with a letter\n    if not name_parts[0] or not name_parts[0][0].isalpha():\n        return 'No'\n    \n    # Check if the part after the dot is one of the allowed extensions\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 254, "completion_tokens": 190, "duration": 4.992692708969116}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    # Initialize a variable to store the sum\n    total = 0\n    \n    # Iterate over the list with both index and value\n    for idx, val in enumerate(lst):\n        # Check if index is a multiple of 3\n        if idx % 3 == 0:\n            total += val**2\n        # Check if index is a multiple of 4 and not a multiple of 3\n        elif idx % 4 == 0 and idx % 3 != 0:\n            total += val**3\n        # Otherwise, add the value as is\n        else:\n            total += val\n    \n    return total", "prompt_tokens": 209, "completion_tokens": 142, "duration": 4.728281736373901}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Create a function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Filter out words with prime lengths\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    # Join the prime words into a new sentence\n    new_sentence = ' '.join(prime_words)\n    \n    return new_sentence", "prompt_tokens": 187, "completion_tokens": 145, "duration": 5.0472447872161865}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    # Split x and n into numerator and denominator\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    # Calculate x * n\n    result = x_num * n_num / (x_denom * n_denom)\n    \n    # Check if the result is a whole number\n    return result.is_integer()", "prompt_tokens": 195, "completion_tokens": 95, "duration": 6.204833745956421}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    # Define a function to calculate the sum of digits\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    # Sort the list based on sum of digits and index\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 155, "completion_tokens": 74, "duration": 3.5914254188537598}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    # Initialize a counter variable to keep track of the special numbers\n    count = 0\n    \n    # Iterate through each number in the input list\n    for num in nums:\n        # Check if the number is greater than 10 and the first and last digits are odd\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            # Increment the counter if the conditions are met\n            count += 1\n    \n    # Return the count of special numbers\n    return count", "prompt_tokens": 159, "completion_tokens": 146, "duration": 4.902769565582275}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0  # initialize count of valid triples to 0\n\n    a = [i * i - i + 1 for i in range(1, n+1)]  # generate array a according to the formula\n    \n    for i in range(n):  # iterate over all possible i values\n        for j in range(i + 1, n):  # iterate over all possible j values greater than i\n            for k in range(j + 1, n):  # iterate over all possible k values greater than j\n                if (a[i] + a[j] + a[k]) % 3 == 0:  # check if sum of a[i], a[j], a[k] is multiple of 3\n                    count += 1  # increment count if valid triple found\n\n    return count  # return the count of valid triples\n\n# Example:\nprint(get_max_triples(5))  # Output: 1", "prompt_tokens": 205, "completion_tokens": 210, "duration": 4.951834678649902}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple([planet for planet in planets if start_idx < planets.index(planet) < end_idx])\n\n# Test cases\nprint(bf(\"Jupiter\", \"Neptune\"))  # (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))     # (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))    # (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "prompt_tokens": 251, "completion_tokens": 206, "duration": 7.289527654647827}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list based on length and alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list", "prompt_tokens": 227, "completion_tokens": 78, "duration": 3.6918599605560303}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    # Importing math library to use sqrt function\n    import math\n\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Check if n is prime and return x or y accordingly\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 126, "completion_tokens": 117, "duration": 6.3885698318481445}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    # Initialize a variable to store the sum of squares\n    result = 0\n    # Iterate over the elements in the list\n    for num in lst:\n        # Check if the number is positive and an integer\n        if num > 0 and isinstance(num, int):\n            # Check if the number is odd\n            if num % 2 != 0:\n                # Add the square of the number to the result\n                result += num**2\n    # Return the result multiplied by 2\n    return result * 2", "prompt_tokens": 177, "completion_tokens": 123, "duration": 4.829977989196777}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    # Create an empty list to store the differences between the scores and guesses\n    result = []\n    \n    # Iterate through the elements in the game and guess lists\n    for i in range(len(game)):\n        # Calculate the absolute difference between the guess and the score\n        diff = abs(game[i] - guess[i])\n        # Append the difference to the result list\n        result.append(diff)\n    \n    return result", "prompt_tokens": 270, "completion_tokens": 96, "duration": 5.741590261459351}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    # Create a dictionary to store the strength of each extension\n    strengths = {}\n    \n    # Calculate the strength for each extension and store it in the dictionary\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        strengths[extension] = strength\n    \n    # Find the strongest extension\n    strongest_extension = max(strengths, key=strengths.get)\n    \n    # Return the ClassName.StrongestExtensionName format\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 317, "completion_tokens": 144, "duration": 4.395025014877319}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    # Check if length of a is not equal to length of b\n    if len(a) != len(b):\n        return False\n    \n    # Double the string a, to check for rotations\n    a = a + a\n    \n    # Check if b is a substring in a or any of its rotations\n    return b in a", "prompt_tokens": 169, "completion_tokens": 81, "duration": 3.8883306980133057}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    # Convert the integer to a string to iterate over its digits\n    num_str = str(num)\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate over each digit in the number\n    for digit in num_str:\n        # Check if the digit is even\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return a tuple containing the counts of even and odd digits\n    return (even_count, odd_count)", "prompt_tokens": 105, "completion_tokens": 131, "duration": 5.943722486495972}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    # Define the roman numerals and their corresponding values\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv',\n        1: 'i'\n    }\n    \n    # Initialize result as an empty string\n    result = ''\n    \n    # Iterate through the roman numerals from largest to smallest\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        # Repeat adding the current numeral while the number is greater or equal to the current value\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    # Return the result in lowercase\n    return result.lower()", "prompt_tokens": 141, "completion_tokens": 207, "duration": 7.601872444152832}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    # Sort the sides of the triangle in ascending order\n    sides = [a, b, c]\n    sides.sort()\n    \n    # Check if the triangle is a right-angled triangle using Pythagorean theorem\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False", "prompt_tokens": 148, "completion_tokens": 90, "duration": 4.218746185302734}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # Create a dictionary to store unique characters count for each word\n    unique_chars = {}\n    \n    # Iterate through each word in the list\n    for word in words:\n        unique_chars[word] = len(set(word))\n    \n    # Find the maximum number of unique characters in the list\n    max_unique_chars = max(unique_chars.values())\n    \n    # Find all words with maximum unique characters\n    max_words = [word for word, count in unique_chars.items() if count == max_unique_chars]\n    \n    # Sort the words with maximum unique characters lexicographically\n    max_words.sort()\n    \n    # Return the first word from the sorted list\n    return max_words[0]", "prompt_tokens": 160, "completion_tokens": 150, "duration": 4.63795280456543}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    # Calculate the total number of eaten carrots after meals\n    total_eaten = number + need\n    \n    # Calculate the number of carrots left after meals\n    carrots_left = max(0, remaining - need)\n    \n    return [total_eaten, carrots_left]", "prompt_tokens": 317, "completion_tokens": 63, "duration": 3.281559467315674}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]  # initialize the result with the first operand\n    for i in range(len(operator)):  # iterate through the operators\n        if operator[i] == '+':\n            result = result + operand[i+1]  # perform addition\n        elif operator[i] == '-':\n            result = result - operand[i+1]  # perform subtraction\n        elif operator[i] == '*':\n            result = result * operand[i+1]  # perform multiplication\n        elif operator[i] == '//':\n            result = result // operand[i+1]  # perform floor division\n        elif operator[i] == '**':\n            result = result ** operand[i+1]  # perform exponentiation\n    return result", "prompt_tokens": 247, "completion_tokens": 165, "duration": 5.395017147064209}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate over each character in the input string s\n    for char in s:\n        # If the character is a letter, reverse its case\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        # If the character is not a letter, keep it as it is\n        else:\n            result += char\n    \n    # If the result contains no letters, reverse the string\n    if not any(char.isalpha() for char in result):\n        result = result[::-1]\n    \n    return result", "prompt_tokens": 147, "completion_tokens": 144, "duration": 4.499667406082153}
{"task_id": "HumanEval/162", "generated_code": "import hashlib  # import the hashlib library\n\ndef string_to_md5(text):\n    if text == '':  # check if the input string is empty\n        return None  # return None if the input string is empty\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()  # calculate the md5 hash of the input string\n    return md5_hash  # return the md5 hash as a string\n\n# Test the function\nprint(string_to_md5('Hello world'))", "prompt_tokens": 116, "completion_tokens": 101, "duration": 3.8645341396331787}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a: int, b: int) -> List[int]:\n    # Initialize an empty list to store the even digits\n    even_digits = []\n    \n    # Iterate through the range from a to b (inclusive)\n    for num in range(a, b+1):\n        # Check if the digit is even\n        if num % 2 == 0:\n            # Append the even digit to the list\n            even_digits.append(num)\n    \n    # Return the list of even digits\n    return even_digits", "prompt_tokens": 144, "completion_tokens": 112, "duration": 3.756571054458618}
