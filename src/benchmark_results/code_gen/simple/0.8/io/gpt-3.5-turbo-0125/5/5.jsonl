{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 61, "duration": 2.6223113536834717}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current_group += char\n        elif char == ')':\n            count -= 1\n            current_group += char\n            if count == 0:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 165, "completion_tokens": 98, "duration": 3.4678151607513428}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.1293089389801025}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 2.6741414070129395}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.7360410690307617}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        if i != 0:\n            result.append(delimeter)\n        result.append(num)\n    return result", "prompt_tokens": 142, "completion_tokens": 56, "duration": 2.6499738693237305}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 162, "completion_tokens": 97, "duration": 3.1258316040039062}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.4790713787078857}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return (total_sum, total_product)", "prompt_tokens": 160, "completion_tokens": 74, "duration": 2.7948994636535645}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    window = deque()\n    for i, num in enumerate(numbers):\n        while window and numbers[window[-1]] < num:\n            window.pop()\n        window.append(i)\n        if window[0] == i - len(window):\n            window.popleft()\n        result.append(numbers[window[0]])\n    return result", "prompt_tokens": 150, "completion_tokens": 91, "duration": 3.0989737510681152}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    \n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]", "prompt_tokens": 192, "completion_tokens": 95, "duration": 3.1966967582702637}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(char_a) ^ int(char_b)) for char_a, char_b in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 44, "duration": 2.531353235244751}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)", "prompt_tokens": 152, "completion_tokens": 53, "duration": 2.43886137008667}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.9059274196624756}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 35, "duration": 2.300666093826294}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 118, "completion_tokens": 28, "duration": 2.3312342166900635}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.175117015838623}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_duration = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    notes = music_string.split()\n    return [note_duration[note] for note in notes]\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))", "prompt_tokens": 222, "completion_tokens": 100, "duration": 3.3278884887695312}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start <= len(string) - len(substring):\n        if string[start:start + len(substring)] == substring:\n            count += 1\n            start += 1\n        else:\n            start += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 81, "duration": 3.0576963424682617}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_mapping = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: number_mapping[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 109, "duration": 3.215824604034424}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i-1], numbers[i])\n    return result", "prompt_tokens": 216, "completion_tokens": 92, "duration": 3.145312547683716}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 53, "duration": 2.6402382850646973}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 141, "completion_tokens": 31, "duration": 2.2402987480163574}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 4.73320198059082}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.3610594272613525}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n\n    return factors", "prompt_tokens": 176, "completion_tokens": 67, "duration": 2.8094611167907715}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 2.2995307445526123}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 2.2646496295928955}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.9021708965301514}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 34, "duration": 2.3352622985839844}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 2.106900215148926}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 51, "duration": 2.352858543395996}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even\")\n    \n    max_coeff = max(xs, key=abs)\n    if max_coeff == 0:\n        raise ValueError(\"The largest non-zero coefficient must be non-zero\")\n\n    for i in range(-1000, 1000):  # searching for a zero between -1000 and 1000\n        if poly(xs, i) == 0:\n            return i", "prompt_tokens": 309, "completion_tokens": 112, "duration": 3.224689483642578}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    return [sorted(l[i::3]) if i % 3 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 200, "completion_tokens": 39, "duration": 2.3470587730407715}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.8399991989135742}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 2.0179178714752197}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 52, "duration": 3.8719937801361084}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    return [x if i % 2 != 0 else sorted(l[::2])[i//2] for i, x in enumerate(l)]", "prompt_tokens": 173, "completion_tokens": 42, "duration": 2.1670968532562256}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.879835367202759}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    i = 1\n    while True:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            if n == 1:\n                return fib\n            n -= 1\n        i += 1", "prompt_tokens": 147, "completion_tokens": 180, "duration": 3.856372833251953}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 74, "duration": 2.7186272144317627}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1)", "prompt_tokens": 201, "completion_tokens": 22, "duration": 1.7762775421142578}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 3.586885929107666}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.640251874923706}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    return str(int(str(x), 10 if base == 10 else base)).upper()", "prompt_tokens": 141, "completion_tokens": 34, "duration": 3.739464521408081}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 3.397308349609375}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    fib_seq = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_seq.append(fib_seq[i-1] + fib_seq[i-2] + fib_seq[i-3] + fib_seq[i-4])\n    return fib_seq[n]", "prompt_tokens": 221, "completion_tokens": 113, "duration": 4.393689870834351}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    n = len(l)\n    sorted_list = sorted(l)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "prompt_tokens": 125, "completion_tokens": 67, "duration": 4.253277063369751}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 3.402747392654419}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return (2 ** n) % p", "prompt_tokens": 155, "completion_tokens": 25, "duration": 3.4129374027252197}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.381000280380249}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u'])", "prompt_tokens": 172, "completion_tokens": 41, "duration": 3.57499098777771}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 3.4927167892456055}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 50.24360704421997}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 3.3123514652252197}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.466172933578491}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 65, "duration": 3.5235183238983154}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.695314407348633}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 2.913320302963257}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.081343173980713}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 3.104034900665283}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 64, "duration": 3.656148910522461}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [c * i for i, c in enumerate(xs) if i != 0]", "prompt_tokens": 158, "completion_tokens": 30, "duration": 2.9304401874542236}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    fibfib_list = [0, 0, 1]\n    \n    for i in range(3, n+1):\n        fibfib_list.append(fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3])\n    \n    return fibfib_list[-1]", "prompt_tokens": 199, "completion_tokens": 105, "duration": 5.068814039230347}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    return sum(1 for char in s if char.lower() in vowels)", "prompt_tokens": 176, "completion_tokens": 79, "duration": 3.7461788654327393}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift] if shift < len(x_str) else x_str[::-1]", "prompt_tokens": 132, "completion_tokens": 68, "duration": 4.893390655517578}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(ch) for ch in s if ch.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 4.150849342346191}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 37, "duration": 4.223902225494385}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    evens = [(i, x) for i, x in enumerate(arr) if x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[1], x[0]))\n    return [min_even[1], min_even[0]]", "prompt_tokens": 362, "completion_tokens": 78, "duration": 3.816348075866699}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    unique_nums = set(lst)\n    max_num = -1\n    \n    for num in unique_nums:\n        if num > 0 and lst.count(num) >= num:\n            max_num = max(max_num, num)\n    \n    return max_num", "prompt_tokens": 215, "completion_tokens": 59, "duration": 3.605145215988159}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst", "prompt_tokens": 174, "completion_tokens": 48, "duration": 3.0125575065612793}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 4.3918983936309814}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 3.9106175899505615}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 55, "duration": 4.5108184814453125}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) >= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 2.9418346881866455}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3\n\n# Test the function\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(20))  # False", "prompt_tokens": 129, "completion_tokens": 134, "duration": 4.12781023979187}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and (n == 1 or (x != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 47, "duration": 3.1984920501708984}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "prompt_tokens": 160, "completion_tokens": 31, "duration": 2.6912028789520264}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    \n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    \n    return count", "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3862369060516357}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"", "prompt_tokens": 189, "completion_tokens": 25, "duration": 3.8965187072753906}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s)-2))", "prompt_tokens": 171, "completion_tokens": 60, "duration": 4.329935312271118}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 222, "duration": 5.816890001296997}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.122511148452759}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 9 * 10**(n-1) // 2 + 10**(n-1)\n    return count", "prompt_tokens": 94, "completion_tokens": 38, "duration": 2.981370687484741}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 3.886988639831543}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 1.361097812652588}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 180, "completion_tokens": 26, "duration": 2.2132136821746826}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 71, "duration": 2.594202756881714}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 57, "duration": 2.403154134750366}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            encrypted += chr(((ord(char.lower()) - 97 + 2 * 2) % 26) + 97)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 160, "completion_tokens": 63, "duration": 2.4691834449768066}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) > 1:\n        return unique_sorted[1]\n    else:\n        return None", "prompt_tokens": 174, "completion_tokens": 42, "duration": 2.282064437866211}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split(\". \") + S.split(\"? \") + S.split(\"! \") if sentence.startswith(\"I\"))", "prompt_tokens": 157, "completion_tokens": 38, "duration": 2.345813751220703}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return all(isinstance(i, int) for i in (x, y, z)) and any(i == j + k or j == i + k or k == i + j for i, j, k in [(x, y, z), (y, x, z), (z, x, y)])\n\n# Test cases\nprint(any_int(5, 2, 7))  # \u279e True\nprint(any_int(3, 2, 2))  # \u279e False\nprint(any_int(3, -2, 1))  # \u279e True\nprint(any_int(3.6, -2.2, 2))  # \u279e False", "prompt_tokens": 185, "completion_tokens": 158, "duration": 3.5393311977386475}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                if char.islower():\n                    encoded_message += char.upper()\n                else:\n                    encoded_message += char.lower()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 95, "duration": 3.2035787105560303}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    max_prime = max(primes)\n    \n    return digit_sum(max_prime)", "prompt_tokens": 336, "completion_tokens": 112, "duration": 3.1473450660705566}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 53, "duration": 2.5034868717193604}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes", "prompt_tokens": 195, "completion_tokens": 87, "duration": 2.9382762908935547}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 29, "duration": 5.202478408813477}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 2.1307880878448486}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.394228935241699}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        stones.append(n)\n    return stones", "prompt_tokens": 182, "completion_tokens": 61, "duration": 2.1878714561462402}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.0337233543395996}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "prompt_tokens": 144, "completion_tokens": 55, "duration": 2.497551918029785}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.1305017471313477}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 33, "duration": 1.9748849868774414}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digits = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [digits[num] for num in reversed_arr]", "prompt_tokens": 326, "completion_tokens": 114, "duration": 3.1179122924804688}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 85, "duration": 2.8807790279388428}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    count_even = 0\n    count_odd = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n\n    return (count_even, count_odd)", "prompt_tokens": 261, "completion_tokens": 99, "duration": 3.0952868461608887}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return sum(sum(int(digit) for digit in str(abs(num))) > 0 for num in arr)", "prompt_tokens": 174, "completion_tokens": 32, "duration": 1.8980462551116943}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    \n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    \n    return False", "prompt_tokens": 349, "completion_tokens": 64, "duration": 2.7621877193450928}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    for num in lst1:\n        if num % 2 != 0:\n            return \"YES\" if any(x % 2 == 0 for x in lst2) else \"NO\"\n    return \"YES\"", "prompt_tokens": 247, "completion_tokens": 58, "duration": 2.326721668243408}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    count = {}\n    for letter in letters:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    max_count = max(count.values())\n    return {key: value for key, value in count.items() if value == max_count}", "prompt_tokens": 201, "completion_tokens": 79, "duration": 2.6898765563964844}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    result = ''.join(char for char in s if char not in c)\n    return result, result == result[::-1]", "prompt_tokens": 212, "completion_tokens": 44, "duration": 2.0562222003936768}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in s), i, i, i) for i, s in enumerate(lst, 1)]", "prompt_tokens": 223, "completion_tokens": 64, "duration": 2.2404768466949463}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 2.1258842945098877}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    def calculate_depth(well):\n        total_water = sum(well)\n        return math.ceil(total_water / capacity)\n\n    import math\n    total_depth = 0\n    for well in grid:\n        total_depth += calculate_depth(well)\n\n    return total_depth", "prompt_tokens": 373, "completion_tokens": 66, "duration": 2.390160322189331}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.9405441284179688}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() not in \"aeiou\")\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.6855340003967285}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 98, "duration": 2.9929096698760986}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append('(')\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    if stack:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 70, "duration": 2.1779093742370605}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.6529390811920166}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 2.026491641998291}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 1.790921688079834}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        if n % 2:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 281, "completion_tokens": 62, "duration": 3.637403964996338}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True", "prompt_tokens": 313, "completion_tokens": 158, "duration": 3.5642800331115723}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 3.5920040607452393}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 44, "duration": 1.9465627670288086}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    start = max(start1, start2)\n    end = min(end1, end2)\n\n    if start > end:\n        return \"NO\"\n\n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 145, "duration": 3.3507726192474365}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    else:\n        product = 1\n        sum_magnitudes = 0\n        for num in arr:\n            product *= 1 if num >= 0 else -1\n            sum_magnitudes += abs(num)\n        return product * sum_magnitudes", "prompt_tokens": 172, "completion_tokens": 75, "duration": 5.423479318618774}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        tribonacci = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n        return tribonacci", "prompt_tokens": 285, "completion_tokens": 119, "duration": 4.141606569290161}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    result = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            result *= int(digit)\n    return result if result != 1 else 0", "prompt_tokens": 121, "completion_tokens": 48, "duration": 3.1984755992889404}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    return len(stack) < len(string)\n\n# Test cases\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True", "prompt_tokens": 183, "completion_tokens": 145, "duration": 5.035345792770386}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(num) ** 2 for num in lst])", "prompt_tokens": 207, "completion_tokens": 29, "duration": 3.2458035945892334}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    else:\n        return txt[-1].isalpha() and (len(txt.split()) == 1 or txt.split()[-1] == \"\")", "prompt_tokens": 187, "completion_tokens": 53, "duration": 3.546912670135498}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 153, "completion_tokens": 54, "duration": 3.478255271911621}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n\n    a = max(neg_integers) if neg_integers else None\n    b = min(pos_integers) if pos_integers else None\n\n    return (a, b)", "prompt_tokens": 188, "completion_tokens": 84, "duration": 5.445468902587891}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if type(a) == int:\n            return a if a > b else b if b > a else None\n        elif type(a) == float:\n            return a if a > b else b if b > a else None\n        elif type(a) == str:\n            a = a.replace(',', '.')\n            b = b.replace(',', '.')\n            return a if float(a) > float(b) else b if float(b) > float(a) else None\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 123, "duration": 5.542268753051758}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0", "prompt_tokens": 127, "completion_tokens": 22, "duration": 2.9363486766815186}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        temp = 1\n        for j in range(1, i+1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 145, "completion_tokens": 67, "duration": 3.609203338623047}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(' +', '_', text)\n    text = re.sub('_{3,}', '-', text)\n    return text", "prompt_tokens": 156, "completion_tokens": 41, "duration": 3.288601875305176}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 101, "duration": 3.8345131874084473}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 3.418938636779785}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    sentence = sentence.split()\n    result = []\n    for word in sentence:\n        if is_prime(len(word)):\n            result.append(word)\n    \n    return ' '.join(result)", "prompt_tokens": 197, "completion_tokens": 100, "duration": 4.046093940734863}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 205, "completion_tokens": 59, "duration": 3.2047531604766846}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 3.030698299407959}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "prompt_tokens": 169, "completion_tokens": 67, "duration": 3.3975327014923096}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a = i * i - i + 1\n        for j in range(i+1, n+1):\n            b = j * j - j + 1\n            for k in range(j+1, n+1):\n                c = k * k - k + 1\n                if (a + b + c) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 112, "duration": 5.63706374168396}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    \n    return tuple(sorted(planets[start_index+1:end_index], key=planets.index))", "prompt_tokens": 261, "completion_tokens": 127, "duration": 4.202039480209351}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 39, "duration": 3.100266933441162}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 78, "duration": 3.494924783706665}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x > 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 2.8456592559814453}
{"task_id": "HumanEval/152", "generated_code": "def compare(game,guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.591066837310791}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n    strongest_extension = max(extensions, key=lambda ext: strength(ext))\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 327, "completion_tokens": 72, "duration": 3.4523961544036865}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return len(a) >= len(b) and b in (a + a)\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "prompt_tokens": 179, "completion_tokens": 133, "duration": 5.454107046127319}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(num) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(num) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 75, "duration": 3.3709073066711426}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        'M', 'CM', 'D', 'CD',\n        'C', 'XC', 'L', 'XL',\n        'X', 'IX', 'V', 'IV',\n        'I'\n    ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 151, "completion_tokens": 167, "duration": 4.816177606582642}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2", "prompt_tokens": 158, "completion_tokens": 52, "duration": 3.0912070274353027}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    def max_unique_word(words):\n        max_word = \"\"\n        max_unique = 0\n        for word in words:\n            unique = unique_chars(word)\n            if unique > max_unique or (unique == max_unique and word < max_word):\n                max_unique = unique\n                max_word = word\n        return max_word\n\n    return max_unique_word(words)", "prompt_tokens": 170, "completion_tokens": 95, "duration": 3.5432686805725098}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(remaining, need)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 327, "completion_tokens": 49, "duration": 2.929570436477661}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 48, "duration": 2.735973358154297}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join([c.swapcase() if c.isalpha() else c for c in s]) if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 45, "duration": 2.6771111488342285}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 36, "duration": 3.044936418533325}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 35, "duration": 2.4610726833343506}
