{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.6330671310424805}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')  # Remove spaces from the input string\n    stack = []\n    result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            current_group.append(char)\n            if not stack:  # If the stack is empty, we've closed a group\n                result.append(''.join(current_group))\n                current_group = []  # Reset current_group for the next group\n    return result", "prompt_tokens": 165, "completion_tokens": 144, "duration": 6.706708192825317}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.784898281097412}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 4.938751935958862}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(numbers)\n    return mad", "prompt_tokens": 167, "completion_tokens": 97, "duration": 5.0919177532196045}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result += [delimeter, number]\n    return result", "prompt_tokens": 142, "completion_tokens": 63, "duration": 3.855454683303833}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    depth = 0\n    max_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            if depth > max_depth:\n                max_depth = depth\n        elif char == ')':\n            depth -= 1\n        elif char == ' ':\n            if max_depth:\n                max_depths.append(max_depth)\n                max_depth = 0\n    \n    if max_depth:  # Catch any trailing group without a space\n        max_depths.append(max_depth)\n    \n    return max_depths", "prompt_tokens": 162, "completion_tokens": 144, "duration": 7.172882795333862}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 105, "duration": 8.675786256790161}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:  # if the list is empty\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 135, "duration": 6.175979137420654}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_so_far = numbers[0]\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 150, "completion_tokens": 138, "duration": 10.577289819717407}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.125485420227051}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 4.156015396118164}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 80, "duration": 4.471785306930542}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.2670445442199707}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 73, "duration": 7.673129081726074}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.992877960205078}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.0594992637634277}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    parsed = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            if i + 1 < len(music_string) and music_string[i+1] == '|':\n                parsed.append(notes['o|'])\n                i += 2\n            else:\n                parsed.append(notes['o'])\n                i += 1\n        elif music_string[i:i+2] == '.|':\n            parsed.append(notes['.|'])\n            i += 2\n        else:\n            i += 1\n        if i < len(music_string) and music_string[i] == ' ':\n            i += 1\n    return parsed", "prompt_tokens": 222, "completion_tokens": 191, "duration": 19.14459490776062}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases. \"\"\"\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 94, "duration": 7.3524861335754395}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    words_sorted = sorted(words, key=lambda word: num_dict[word])\n    return ' '.join(words_sorted)", "prompt_tokens": 155, "completion_tokens": 108, "duration": 11.176609754562378}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 104, "duration": 6.036261081695557}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 104, "duration": 10.53834056854248}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 3.13588809967041}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 46, "duration": 4.273860216140747}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 44, "duration": 4.26404595375061}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while (n % divisor) == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 82, "duration": 6.539306879043579}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 63, "duration": 3.7161428928375244}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 3.294109582901001}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 4.739000082015991}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 82, "duration": 6.272929668426514}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 5.412877798080444}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.2161638736724854}
{"task_id": "HumanEval/32", "generated_code": "import math\nfrom scipy.optimize import fsolve\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(xs, x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having an even number of coefficients\n    and the largest non-zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    # Define the polynomial function based on the coefficients\n    poly_func = lambda x: poly(xs, x)\n    # Use fsolve to find a root, starting from an initial guess of 0\n    root = fsolve(poly_func, 0)\n    return root[0]", "prompt_tokens": 309, "completion_tokens": 236, "duration": 9.617220640182495}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three_sorted = sorted(divisible_by_three)\n    # Replace the original elements with the sorted ones\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = divisible_by_three_sorted.pop(0)\n    return l", "prompt_tokens": 200, "completion_tokens": 111, "duration": 9.596750736236572}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 2.055697202682495}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 10.504085779190063}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 87, "duration": 5.33900785446167}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    \"\"\"\n    # Extract the elements at even indices\n    even_indices_elements = [l[i] for i in range(len(l)) if i % 2 == 0]\n    # Sort the elements extracted from even indices\n    even_indices_elements_sorted = sorted(even_indices_elements)\n    # Replace elements at even indices in the original list with sorted elements\n    for i, elem in enumerate(even_indices_elements_sorted):\n        l[2*i] = elem\n    return l", "prompt_tokens": 173, "completion_tokens": 166, "duration": 12.988712549209595}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 137, "duration": 21.430410385131836}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib_seq(limit):\n        a, b = 0, 1\n        while limit > 0:\n            yield a\n            a, b = b, a + b\n            limit -= 1\n\n    count, num = 0, 0\n    for fib_num in fib_seq(227000):  # A high number to ensure we find n prime Fibonacci numbers; adjust as needed.\n        if is_prime(fib_num) and fib_num != 0:\n            count += 1\n            if count == n:\n                return fib_num", "prompt_tokens": 147, "completion_tokens": 185, "duration": 11.881723642349243}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n-2):\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 209, "completion_tokens": 115, "duration": 10.146502494812012}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Return the total number of collisions in a race with n cars moving left to right\n    and n cars moving right to left on a straight, infinitely long road.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 59, "duration": 7.23824143409729}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 34, "duration": 2.5709519386291504}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.1350977420806885}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = \"\"\n    while x:\n        digits += str(x % base)\n        x //= base\n    return digits[::-1]", "prompt_tokens": 141, "completion_tokens": 57, "duration": 4.261140823364258}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 37, "duration": 3.0486230850219727}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    elif n == 1: return 0\n    elif n == 2: return 2\n    elif n == 3: return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 9.700820446014404}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]", "prompt_tokens": 125, "completion_tokens": 63, "duration": 8.12913465499878}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 23, "duration": 3.388068914413452}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 4.175679445266724}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 62, "duration": 4.5438010692596436}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    \"\"\"\n    return ''.join([char for char in text if char.lower() not in \"aeiou\"])", "prompt_tokens": 172, "completion_tokens": 54, "duration": 3.8647265434265137}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.4017796516418457}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 3.8062169551849365}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.3385937213897705}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 66, "duration": 4.764492750167847}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 68, "duration": 15.25798773765564}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l) - 1)) or all(l[i] >= l[i+1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 56, "duration": 3.4442861080169678}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.2559890747070312}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_factor = None\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n        if n == 1:\n            break\n    if n > 1:\n        return n\n    return largest_factor", "prompt_tokens": 113, "completion_tokens": 139, "duration": 15.646885395050049}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 29, "duration": 2.4354450702667236}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 5.500010967254639}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    \"\"\"Return the derivative of a polynomial represented by its coefficients.\"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 41, "duration": 2.590276002883911}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 96, "duration": 4.460920333862305}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.207735300064087}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift >= len(x_str):\n        return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 46, "duration": 5.9175193309783936}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.0418190956115723}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.3021583557128906}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    \"\"\"\n    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0 and val >= 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "prompt_tokens": 362, "completion_tokens": 93, "duration": 4.762111663818359}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    frequencies = Counter(lst)\n    result = -1\n    for num in frequencies:\n        if frequencies[num] >= num and num > result:\n            result = num\n    return result", "prompt_tokens": 215, "completion_tokens": 53, "duration": 3.0409018993377686}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst = sorted(lst)\n    result = []\n    while lst:\n        result.append(lst.pop(0))  # Pop and append the minimum\n        if lst:\n            result.append(lst.pop())  # Pop and append the maximum\n    return result", "prompt_tokens": 174, "completion_tokens": 62, "duration": 4.722283601760864}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 203, "duration": 8.189920663833618}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.178786277770996}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 68, "duration": 5.594680547714233}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 49, "duration": 2.8308916091918945}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2:\n        return False\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i*j*k == a:\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 127, "duration": 11.998425245285034}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 5.6346001625061035}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    '''\n    Check if a given integer is a cube of another integer.\n    \n    Parameters:\n    - a (int): The integer to check.\n    \n    Returns:\n    - bool: True if a is a cube of some integer, False otherwise.\n    '''\n    if a < 0:  # Handling negative inputs\n        return (abs(a) ** (1/3)).is_integer()\n    else:\n        return (a ** (1/3)).is_integer()", "prompt_tokens": 160, "completion_tokens": 106, "duration": 5.309977769851685}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = set(\"2357BD\")\n    return sum(c in prime_hex_digits for c in num)", "prompt_tokens": 349, "completion_tokens": 33, "duration": 2.373788356781006}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 189, "completion_tokens": 24, "duration": 4.066751480102539}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 76, "duration": 9.75433087348938}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 252, "duration": 10.068079948425293}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.215885877609253}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * (10 ** (n - 1)) - 9 ** (n - 1)", "prompt_tokens": 94, "completion_tokens": 81, "duration": 3.446255922317505}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 31, "duration": 3.4626498222351074}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 84, "duration": 3.5407049655914307}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Takes a string and returns an ordered version of it where all words are replaced by\n    a new word with characters in ascending order based on ascii value.\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 63, "duration": 3.720390796661377}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    result.sort(key=lambda element: (element[0], -element[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 68, "duration": 7.5681092739105225}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    \n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 253, "completion_tokens": 233, "duration": 18.75049090385437}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 96, "duration": 7.9799580574035645}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 45, "duration": 4.687564373016357}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Count the number of boredoms in a string.\n    A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    # Split the string into sentences using '.', '?' or '!' as delimiters\n    sentences = []\n    for delimiter in ['.', '?', '!']:\n        if sentences:\n            temp_sentences = []\n            for sentence in sentences:\n                temp_sentences.extend(sentence.split(delimiter))\n            sentences = temp_sentences\n        else:\n            sentences = S.split(delimiter)\n    \n    # Clean up spaces and empty strings\n    sentences = [s.strip() for s in sentences if s.strip()]\n    \n    # Count the number of sentences starting with \"I \"\n    boredom_count = sum(1 for sentence in sentences if sentence.startswith(\"I \"))\n    \n    return boredom_count", "prompt_tokens": 157, "completion_tokens": 183, "duration": 9.083715915679932}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 102, "duration": 4.681953430175781}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case and replacing vowels with the letter 2 places ahead.\n    \"\"\"\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    return ''.join([vowels[char] if char in vowels else char.swapcase() for char in message])", "prompt_tokens": 159, "completion_tokens": 117, "duration": 5.788042306900024}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_digit_sum(lst):\n    \"\"\"Finds the largest prime number in a list and returns the sum of its digits.\"\"\"\n    def is_prime(n):\n        \"\"\"Check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for number in lst:\n        if is_prime(number) and number > largest_prime:\n            largest_prime = number\n\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 336, "completion_tokens": 139, "duration": 14.854643106460571}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(d):\n    \"\"\"\n    Checks if all keys in the dictionary are either all lower case or all upper case strings.\n    \"\"\"\n    if not d or not all(isinstance(key, str) for key in d.keys()):\n        return False\n\n    keys = list(d.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 85, "duration": 8.432366371154785}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 4.656030893325806}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    \"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 51, "duration": 3.1115050315856934}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "prompt_tokens": 122, "completion_tokens": 103, "duration": 7.862234592437744}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    value_float = float(value)\n    lower = int(value_float)\n    upper = lower + 1 if value_float >= 0 else lower - 1\n    if abs(value_float - lower) < abs(value_float - upper):\n        return lower\n    else:\n        return upper", "prompt_tokens": 206, "completion_tokens": 115, "duration": 5.981456279754639}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 25, "duration": 4.609764337539673}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    import re\n    # Split string by commas or spaces\n    words = re.split(r'[,\\s]+', s)\n    return words", "prompt_tokens": 166, "completion_tokens": 39, "duration": 5.044879913330078}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 125, "duration": 9.915333271026611}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 4.281599998474121}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(n):\n        return all(int(digit) % 2 != 0 for digit in str(n))\n    \n    result = [num for num in x if has_no_even_digit(num)]\n    return sorted(result)", "prompt_tokens": 152, "completion_tokens": 98, "duration": 7.653876543045044}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = sorted([i for i in arr if 1 <= i <= 9], reverse=True)\n    return [num_to_word[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 105, "duration": 8.353226900100708}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    \"\"\"Returns a list of size n with specific values based on index.\"\"\"\n    def factorial(x):\n        if x == 1 or x == 0:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 113, "duration": 6.652033090591431}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 141, "duration": 7.387486219406128}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum([int(d) for d in str(abs(n))]) * (-1 if n < 0 else 1)\n\n    return sum(1 for x in arr if sum_of_digits(x) > 0)", "prompt_tokens": 174, "completion_tokens": 62, "duration": 4.841135501861572}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    \"\"\"\n    Checks if a sorted array can be obtained through right shift operations.\n    \"\"\"\n    # Count of out-of-order pairs\n    out_of_order_count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            out_of_order_count += 1\n    \n    # If there's more than one out-of-order pair, it's impossible to sort by shifts\n    return out_of_order_count <= 1", "prompt_tokens": 349, "completion_tokens": 116, "duration": 9.287583589553833}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_lst1 <= even_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 79, "duration": 5.7418599128723145}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    words = test.split()\n    freq = {}\n    for word in words:\n        freq[word] = freq.get(word, 0) + 1\n    max_count = max(freq.values(), default=0)\n    return {k: v for k, v in freq.items() if v == max_count}", "prompt_tokens": 201, "completion_tokens": 72, "duration": 3.7550008296966553}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    filtered_s = ''.join([char for char in s if char not in c])\n    return (filtered_s, filtered_s == filtered_s[::-1])", "prompt_tokens": 212, "completion_tokens": 43, "duration": 3.3650963306427}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    output = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        output.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return output", "prompt_tokens": 223, "completion_tokens": 75, "duration": 5.875474452972412}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 7.958698272705078}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    water_units = sum(sum(row) for row in grid)\n    return math.ceil(water_units / capacity)", "prompt_tokens": 373, "completion_tokens": 34, "duration": 3.427621364593506}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers according to\n    number of ones in their binary representation in ascending order,\n    and then by their decimal value if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 72, "duration": 9.894922494888306}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result", "prompt_tokens": 231, "completion_tokens": 88, "duration": 9.508728504180908}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, 1, -1):\n        if word[i-1] not in vowels and word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 5.273391246795654}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    Function to check if concatenating two strings consisting of parentheses\n    in some order results in a balanced string.\n    '''\n    first, second = lst\n    # If both strings have equal number of '(' and ')', they can always form a good string\n    if first.count('(') == first.count(')') and second.count('(') == second.count(')'):\n        return 'Yes'\n    # If first string starts with ')' or ends with '(', it cannot be made good by concatenation\n    if first.startswith(')') or first.endswith('('):\n        if second.startswith(')') or second.endswith('('):\n            return 'No'\n    # If second string starts with ')' or ends with '(', it cannot be made good by concatenation\n    if second.startswith(')') or second.endswith('('):\n        if first.startswith(')') or first.endswith('('):\n            return 'No'\n    # Check if concatenating in either order forms a good string\n    if is_good(first + second) or is_good(second + first):\n        return 'Yes'\n    return 'No'\n\ndef is_good(s):\n    '''\n    Helper function to check if a string of parentheses is balanced.\n    '''\n    balance = 0\n    for char in s:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 218, "completion_tokens": 308, "duration": 13.158549785614014}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 20, "duration": 5.449087381362915}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 3.0775890350341797}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 2.7042970657348633}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 as it's always part of the sequence and is odd.\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 116, "duration": 11.894669532775879}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check for the correct format\n    if not isinstance(date, str) or len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date string into components\n    parts = date.split('-')\n    \n    # Check if all parts are digits\n    if not all(part.isdigit() for part in parts):\n        return False\n    \n    # Convert parts into integers\n    month, day, year = map(int, parts)\n    \n    # Check the month range\n    if month < 1 or month > 12:\n        return False\n    \n    # Define the days in each month\n    days_in_month = [31, 29 if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check the day range\n    if day < 1 or day > days_in_month[month - 1]:\n        return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 251, "duration": 16.65180778503418}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 190, "completion_tokens": 66, "duration": 5.85259485244751}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) != len(set(lst)):\n        counter = {}\n        for number in lst:\n            if number in counter:\n                counter[number] += 1\n                if counter[number] > 2:\n                    return False\n            else:\n                counter[number] = 1\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 74, "duration": 7.813673257827759}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    if start_max > end_min:\n        return \"NO\"\n    length = end_min - start_max + 1\n    return \"YES\" if is_prime(length) else \"NO\"", "prompt_tokens": 304, "completion_tokens": 134, "duration": 8.894505739212036}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n    return sum(abs(num) for num in arr) * sign_product", "prompt_tokens": 172, "completion_tokens": 70, "duration": 5.934931993484497}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    n = len(grid)  # Assuming grid is N x N\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]  # Right, Down, Up, Left\n    heap = [(grid[i][j], k-1, i, j, [grid[i][j]]) for i in range(n) for j in range(n)]\n    heap.sort()  # Pre-sort the heap for lexicographical order\n    visited = set()\n\n    while heap:\n        _, steps, x, y, path = heappop(heap)\n        if steps == 0:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny, steps-1) not in visited:\n                visited.add((nx, ny, steps-1))\n                heappush(heap, (path + [grid[nx][ny]], steps-1, nx, ny, path + [grid[nx][ny]]))", "prompt_tokens": 446, "completion_tokens": 256, "duration": 20.298912048339844}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    \"\"\"\n    Generate the first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    \n    # Initialize the sequence with known values\n    trib = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:  # Even index\n            trib.append(1 + i // 2)\n        else:  # Odd index, recursive definition\n            if i + 1 <= n:  # Check if the next element is within bounds\n                trib.append(trib[i-1] + trib[i-2] + (1 + (i + 1) // 2))\n            else:  # The next element (i+1) is out of bounds, use existing elements\n                trib.append(trib[i-1] + trib[i-2] + trib[0])\n    return trib", "prompt_tokens": 285, "completion_tokens": 223, "duration": 15.186658382415771}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \"\"\"\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 91, "duration": 7.272943019866943}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                return True\n    return False", "prompt_tokens": 183, "completion_tokens": 55, "duration": 4.402856349945068}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 3.1063144207000732}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    txt = txt.rstrip()  # Remove trailing spaces\n    if not txt:\n        return False\n    return txt[-1].isalpha() and txt[-2] == ' '", "prompt_tokens": 187, "completion_tokens": 158, "duration": 13.02514934539795}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    \"\"\"Return the largest index of an element which is not greater than or equal to the element immediately\n    preceding it. If no such element exists then return -1.\"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 84, "duration": 6.747405767440796}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n\n    return (a, b)", "prompt_tokens": 188, "completion_tokens": 75, "duration": 3.698209047317505}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n            return float(val)\n        return val\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 92, "duration": 5.92915940284729}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    \"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # and every next possible sum increments by 2 (keeping the numbers even),\n    # n must be at least 8 and even to be written as such a sum.\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 112, "duration": 5.524680852890015}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 1 or x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 74, "duration": 6.4228808879852295}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    text = re.sub(' {3,}', '-', text)  # Replace 3 or more spaces with '-'\n    text = text.replace(' ', '_')  # Replace remaining spaces with '_'\n    return text", "prompt_tokens": 156, "completion_tokens": 100, "duration": 5.172124862670898}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex to match the conditions specified\n    pattern = r\"^[a-zA-Z][a-zA-Z]*[a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$\"\n    # Check if the file extension is one of the allowed ones\n    if re.match(pattern, file_name) and file_name.split('.')[1] in ['txt', 'exe', 'dll']:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 264, "completion_tokens": 110, "duration": 8.15614652633667}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(val ** 2 if i % 3 == 0 else val ** 3 if i % 4 == 0 else val for i, val in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 48, "duration": 4.66636848449707}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 96, "duration": 6.95503568649292}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    \n    num_product = num_x * num_n\n    den_product = den_x * den_n\n    \n    if num_product % den_product == 0:\n        return True\n    else:\n        return False", "prompt_tokens": 205, "completion_tokens": 81, "duration": 6.009905576705933}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 35, "duration": 3.0804405212402344}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_first_and_last_digit_odd(num):\n        num_str = str(abs(num))\n        return num_str[0] in '13579' and num_str[-1] in '13579'\n    \n    count = 0\n    for num in nums:\n        if num > 10 and is_first_and_last_digit_odd(num):\n            count += 1\n    return count", "prompt_tokens": 169, "completion_tokens": 88, "duration": 4.3762526512146}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Function to find the number of valid triples whose sum is a multiple of 3.\n    \"\"\"\n    # Generate the array based on given formula\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    \n    # Counters for remainders\n    rem = [0, 0, 0]\n    \n    # Populate the remainders' count\n    for val in a:\n        rem[val % 3] += 1\n    \n    # Calculate the total combinations\n    # Combination formula: nC3 = n! / (3! * (n-3)!)\n    # and for pairs that sum up to a multiple of 3\n    total = (rem[0] * (rem[0]-1) * (rem[0]-2) // 6) + \\\n            (rem[1] * rem[2] * (rem[1]-1) // 2) + \\\n            (rem[1] * rem[2] * (rem[2]-1) // 2) + \\\n            (rem[1] * rem[2] * (rem[0]) // 1)\n            \n    return total", "prompt_tokens": 215, "completion_tokens": 263, "duration": 19.338042497634888}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "prompt_tokens": 261, "completion_tokens": 122, "duration": 9.419410705566406}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Delete strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    sorted_strings = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_strings", "prompt_tokens": 237, "completion_tokens": 78, "duration": 6.898052453994751}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 62, "duration": 4.202755928039551}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    '''\n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)", "prompt_tokens": 187, "completion_tokens": 71, "duration": 4.162966728210449}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 3.0795390605926514}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        return CAP - SM\n\n    strongest = max(extensions, key=strength)\n    return f'{class_name}.{strongest}'", "prompt_tokens": 327, "completion_tokens": 76, "duration": 6.257150173187256}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    \"\"\"\n    Checks if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    # Create a string that doubles the first word to accommodate any possible rotations of the second word\n    double_a = a * 2\n    \n    # Check if the second word or any of its rotations is a substring in the doubled first word\n    for i in range(len(b)):\n        # Rotate the second word\n        rotated_b = b[i:] + b[:i]\n        # Check if the rotated second word is a substring of the doubled first word\n        if rotated_b in double_a:\n            return True\n    return False", "prompt_tokens": 179, "completion_tokens": 145, "duration": 14.666359186172485}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    evens = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odds = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (evens, odds)", "prompt_tokens": 115, "completion_tokens": 69, "duration": 3.421752691268921}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    numeral_map = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    result = ''\n    for value, numeral in numeral_map:\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 151, "completion_tokens": 172, "duration": 11.485727310180664}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 2.399545907974243}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    return min(sorted(words, key=lambda word: (-len(set(word)), word)))", "prompt_tokens": 170, "completion_tokens": 26, "duration": 2.976332902908325}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Returns the total number of eaten carrots after meals and the number of carrots left after meals.\n    \"\"\"\n    to_eat = min(need, remaining)\n    eaten = number + to_eat\n    left = remaining - to_eat\n    return [eaten, left]", "prompt_tokens": 327, "completion_tokens": 72, "duration": 4.261765480041504}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 51, "duration": 4.013255596160889}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 50, "duration": 5.4518866539001465}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 99, "duration": 9.529610395431519}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return sorted([i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0])", "prompt_tokens": 154, "completion_tokens": 44, "duration": 3.463258743286133}
