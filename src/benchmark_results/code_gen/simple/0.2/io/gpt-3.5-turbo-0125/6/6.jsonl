{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 61, "duration": 3.8970654010772705}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current_group += char\n        elif char == ')':\n            count -= 1\n            current_group += char\n            if count == 0:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 165, "completion_tokens": 98, "duration": 4.7660932540893555}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.169764280319214}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 48, "duration": 3.6061277389526367}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 44, "duration": 3.5747015476226807}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 142, "completion_tokens": 57, "duration": 3.676391839981079}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "prompt_tokens": 162, "completion_tokens": 98, "duration": 4.066547632217407}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.438774585723877}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "prompt_tokens": 160, "completion_tokens": 75, "duration": 3.833000659942627}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "prompt_tokens": 150, "completion_tokens": 59, "duration": 3.7579879760742188}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]", "prompt_tokens": 192, "completion_tokens": 78, "duration": 3.9973177909851074}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.476158380508423}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.447986602783203}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.4501025676727295}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.4539332389831543}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.428022623062134}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.279188871383667}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    return [notes[note] for note in music_string.split()]", "prompt_tokens": 222, "completion_tokens": 53, "duration": 3.6007702350616455}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.690903902053833}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 102, "duration": 4.460975408554077}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 216, "completion_tokens": 97, "duration": 4.464838981628418}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.3642308712005615}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.2939462661743164}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.044616937637329}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.364246129989624}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 65, "duration": 3.645974636077881}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.207277297973633}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 98, "completion_tokens": 20, "duration": 3.2283480167388916}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.076425790786743}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.2270336151123047}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.178640604019165}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.4677746295928955}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "prompt_tokens": 309, "completion_tokens": 23, "duration": 2.97762393951416}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    return [sorted(l[i:i+3]) if i % 3 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 200, "completion_tokens": 40, "duration": 3.202146530151367}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 2.910531520843506}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 5.654008865356445}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and '7' in str(i))", "prompt_tokens": 129, "completion_tokens": 49, "duration": 5.456620216369629}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([x for x in l[::2]])\n    result = [x if i % 2 != 0 else even_indices.pop(0) for i, x in enumerate(l)]\n    return result", "prompt_tokens": 173, "completion_tokens": 58, "duration": 6.558703660964966}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.176734209060669}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num) and fibonacci(num) == num:\n            count += 1\n\n    return num", "prompt_tokens": 147, "completion_tokens": 181, "duration": 4.916640043258667}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 70, "duration": 3.9669764041900635}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1)", "prompt_tokens": 201, "completion_tokens": 22, "duration": 2.83608341217041}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.387097358703613}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.553720951080322}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    return str(base) if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 40, "duration": 4.550818920135498}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 5.888825416564941}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 7.386969566345215}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.323599100112915}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.5975751876831055}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.855608224868774}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 6.003648519515991}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "prompt_tokens": 172, "completion_tokens": 31, "duration": 4.4423863887786865}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.4585888385772705}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 1.0183415412902832}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 5.409406423568726}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 38, "duration": 5.033053398132324}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 64, "duration": 1.146852731704712}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 5.335724353790283}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 5.0965070724487305}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.780471563339233}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 0.8015942573547363}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 67, "duration": 5.950145483016968}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))\nprint(derivative([1, 2, 3]))", "prompt_tokens": 158, "completion_tokens": 63, "duration": 6.195502996444702}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.328212022781372}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "prompt_tokens": 176, "completion_tokens": 70, "duration": 6.082287073135376}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift] if shift < len(x_str) else x_str[::-1]", "prompt_tokens": 132, "completion_tokens": 65, "duration": 4.741569519042969}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 4.737852573394775}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 37, "duration": 4.837521314620972}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values)\n    min_even_index = arr.index(min_even_value)\n    return [min_even_value, min_even_index]", "prompt_tokens": 362, "completion_tokens": 69, "duration": 1.375751256942749}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 37, "duration": 0.8837764263153076}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.047841548919678}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 1.9582583904266357}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.73066782951355}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count", "prompt_tokens": 207, "completion_tokens": 52, "duration": 7.467602968215942}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 5.85987663269043}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3", "prompt_tokens": 129, "completion_tokens": 106, "duration": 5.005195617675781}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or n == 1 or x == n or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 61, "duration": 1.320312261581421}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "prompt_tokens": 160, "completion_tokens": 31, "duration": 0.7407588958740234}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 58, "duration": 6.044770956039429}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"", "prompt_tokens": 189, "completion_tokens": 28, "duration": 4.055553436279297}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s) - 2))", "prompt_tokens": 171, "completion_tokens": 62, "duration": 5.583134412765503}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n    return result\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))", "prompt_tokens": 320, "completion_tokens": 258, "duration": 8.214706182479858}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 70, "duration": 5.623669862747192}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 9 * 10 ** (n - 1) - 8 ** n\n    return count", "prompt_tokens": 94, "completion_tokens": 35, "duration": 0.8278837203979492}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 183, "completion_tokens": 25, "duration": 5.32027268409729}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 5.603389024734497}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 180, "completion_tokens": 26, "duration": 5.404372692108154}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.6935272216796875}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "prompt_tokens": 253, "completion_tokens": 55, "duration": 4.7089433670043945}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * ord(char) - 2\n            if char.islower():\n                result += chr((shift - ord('a')) % 26 + ord('a'))\n            else:\n                result += chr((shift - ord('A')) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 96, "duration": 5.703161001205444}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.310044288635254}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    sentences = [sentence for sentence in sentences if sentence.startswith('I')]\n    return len(sentences)", "prompt_tokens": 157, "completion_tokens": 51, "duration": 5.169314622879028}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 54, "duration": 1.219020128250122}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A')) if char.isupper() else chr((ord(char) + 2 - ord('a')) % 26 + ord('a'))\n            else:\n                encoded_message += char.upper() if char.islower() else char.lower()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 128, "duration": 5.940000057220459}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 126, "duration": 6.867438793182373}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 49, "duration": 5.333339214324951}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 195, "completion_tokens": 86, "duration": 1.640211582183838}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 29, "duration": 5.318505764007568}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 4.2741899490356445}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.266718149185181}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        stones.append(n)\n    return stones", "prompt_tokens": 182, "completion_tokens": 61, "duration": 2.9429240226745605}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.974149465560913}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "prompt_tokens": 144, "completion_tokens": 39, "duration": 4.271106004714966}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 1.1306822299957275}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 33, "duration": 3.2049360275268555}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[num] for num in reversed_arr]\n    return result", "prompt_tokens": 326, "completion_tokens": 119, "duration": 7.078098297119141}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 82, "duration": 5.831729888916016}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 99, "duration": 6.3546082973480225}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)", "prompt_tokens": 174, "completion_tokens": 31, "duration": 1.1280014514923096}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 349, "completion_tokens": 62, "duration": 1.57088041305542}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= len(lst2) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 44, "duration": 2.6154191493988037}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    \n    max_count = max(letter_count.values())\n    result = {key: value for key, value in letter_count.items() if value == max_count}\n    \n    return result", "prompt_tokens": 201, "completion_tokens": 91, "duration": 3.2728042602539062}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 508, "completion_tokens": 78, "duration": 5.2891058921813965}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in s), sum(int(digit) % 2 != 0 for digit in s), i, i) for i, s in enumerate(lst, 1)]", "prompt_tokens": 223, "completion_tokens": 78, "duration": 3.377593994140625}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 2.913787841796875}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 373, "completion_tokens": 33, "duration": 2.7746434211730957}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 4.268831253051758}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        count = sum(1 for letter in word if letter in consonants)\n        if count == n:\n            result.append(word)\n    return result", "prompt_tokens": 231, "completion_tokens": 90, "duration": 3.217785596847534}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.641176223754883}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        count += s.count('(') - s.count(')')\n        if count < 0:\n            return 'No'\n    if count == 0:\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 64, "duration": 2.7911906242370605}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 2.7288758754730225}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 2.7215168476104736}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 2.9263694286346436}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([num for num in collatz if num % 2 != 0])", "prompt_tokens": 281, "completion_tokens": 82, "duration": 3.195016860961914}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    return True", "prompt_tokens": 313, "completion_tokens": 192, "duration": 4.729734897613525}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 2.86972975730896}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(set(lst)) == len(lst)", "prompt_tokens": 299, "completion_tokens": 39, "duration": 3.5010440349578857}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 158, "duration": 4.592815637588501}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n    return sum(abs(num) for num in arr) * product", "prompt_tokens": 172, "completion_tokens": 67, "duration": 2.834104299545288}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n:\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    min_val = float('inf')\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, [grid[i][j]])\n            if path < min_val:\n                min_val = path\n    \n    return min_val", "prompt_tokens": 446, "completion_tokens": 207, "duration": 4.666902780532837}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = [0, 1, 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n    return tribonacci[:n + 1]", "prompt_tokens": 285, "completion_tokens": 97, "duration": 5.0983569622039795}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0", "prompt_tokens": 121, "completion_tokens": 53, "duration": 4.2437756061553955}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < 2\n\n# Test cases\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True", "prompt_tokens": 183, "completion_tokens": 138, "duration": 4.4893763065338135}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 3.4771645069122314}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    else:\n        return False", "prompt_tokens": 187, "completion_tokens": 66, "duration": 2.945474624633789}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i-1\n    return max_index", "prompt_tokens": 153, "completion_tokens": 52, "duration": 3.040684938430786}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 188, "completion_tokens": 90, "duration": 3.348987340927124}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        return a if type(a) == int or type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 68, "duration": 2.864495277404785}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 8 == 0", "prompt_tokens": 127, "completion_tokens": 22, "duration": 2.122727394104004}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result *= factorial\n        return result", "prompt_tokens": 145, "completion_tokens": 70, "duration": 2.8127682209014893}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result = result[:-1] + \"-\"\n        else:\n            count = 0\n        if char != \" \":\n            result += char\n        else:\n            result += \"_\"\n    return result", "prompt_tokens": 156, "completion_tokens": 87, "duration": 2.9308218955993652}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 99, "duration": 3.38531494140625}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 1.2712266445159912}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.364966630935669}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    result = x_num * n_num / (x_denom * n_denom)\n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 64, "duration": 2.5953705310821533}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 1.7591559886932373}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "prompt_tokens": 169, "completion_tokens": 67, "duration": 3.9259817600250244}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 95, "duration": 3.4756205081939697}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    return tuple(planet for planet in planets[start_idx+1:end_idx])", "prompt_tokens": 261, "completion_tokens": 122, "duration": 2.1590113639831543}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 2.6698925495147705}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 79, "duration": 3.1342263221740723}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 2.8259336948394775}
{"task_id": "HumanEval/152", "generated_code": "def compare(game,guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 28, "duration": 4.066138505935669}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 68, "duration": 3.10640811920166}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in a+a and len(a) == len(b)", "prompt_tokens": 179, "completion_tokens": 26, "duration": 2.5275120735168457}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 71, "duration": 1.4628007411956787}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 150, "duration": 3.3146166801452637}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.232578992843628}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 170, "completion_tokens": 91, "duration": 4.431286334991455}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = min(need, remaining) + number\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 327, "completion_tokens": 50, "duration": 4.391022205352783}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i+1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 50, "duration": 2.807218551635742}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5223844051361084}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.1027917861938477}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 35, "duration": 3.512758493423462}
