{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list to ensure that any close elements are next to each other\n    numbers.sort()\n    # Iterate through the list, checking the difference between consecutive elements\n    for i in range(len(numbers) - 1):\n        # If the difference between two consecutive elements is less than the threshold, return True\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    # If no elements are found that are closer than the threshold, return False\n    return False", "prompt_tokens": 163, "completion_tokens": 130, "duration": 9.157915353775024}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store the separate groups\n    groups = []\n    \n    # Initialize a counter to keep track of open parentheses\n    open_count = 0\n    \n    # Initialize an empty string to build the current group\n    current_group = \"\"\n    \n    # Iterate through each character in the input string\n    for char in paren_string:\n        # Add the character to the current group\n        current_group += char\n        \n        # If the character is an open parenthesis, increment the open count\n        if char == '(':\n            open_count += 1\n        # If the character is a close parenthesis, decrement the open count\n        elif char == ')':\n            open_count -= 1\n        \n        # If the open count reaches 0, we have a complete group\n        if open_count == 0:\n            # Add the current group to the list of groups\n            groups.append(current_group)\n            # Reset the current group to an empty string for the next group\n            current_group = \"\"\n    \n    # Return the list of separate groups\n    return groups", "prompt_tokens": 154, "completion_tokens": 263, "duration": 17.220498085021973}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    # Extract the integer part of the number\n    integer_part = int(number)\n    # Subtract the integer part from the original number to get the decimal part\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.464543342590332}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    # Initialize the balance to 0\n    balance = 0\n    # Iterate through each operation in the operations list\n    for operation in operations:\n        # Update the balance by adding the current operation\n        balance += operation\n        # Check if the balance falls below zero\n        if balance < 0:\n            # If balance is below zero, return True\n            return True\n    # If the loop completes without the balance falling below zero, return False\n    return False", "prompt_tokens": 158, "completion_tokens": 121, "duration": 6.163974761962891}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n    # Calculate the absolute difference between each number and the mean, then take the average\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 156, "completion_tokens": 81, "duration": 4.698215484619141}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through the numbers list\n    for i, number in enumerate(numbers):\n        # Append the current number to the result list\n        result.append(number)\n        # If it's not the last element, append the delimeter as well\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 131, "completion_tokens": 112, "duration": 5.904543161392212}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string by spaces to process each group separately\n    groups = paren_string.split()\n    # Initialize an empty list to store the maximum depth of each group\n    max_depths = []\n    # Iterate through each group to calculate its maximum depth\n    for group in groups:\n        # Initialize variables to keep track of current depth and maximum depth\n        current_depth = 0\n        max_depth = 0\n        # Iterate through each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increase the current depth\n            if char == '(':\n                current_depth += 1\n                # Update the maximum depth if the current depth is greater\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            # If the character is a closing parenthesis, decrease the current depth\n            elif char == ')':\n                current_depth -= 1\n        # After processing the group, append its maximum depth to the list\n        max_depths.append(max_depth)\n    # Return the list of maximum depths for each group\n    return max_depths", "prompt_tokens": 151, "completion_tokens": 253, "duration": 24.2257342338562}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Initialize an empty list to store strings that contain the substring\n    filtered_strings = []\n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the current string contains the substring\n        if substring in string:\n            # If it does, add it to the filtered_strings list\n            filtered_strings.append(string)\n    # Return the list of filtered strings\n    return filtered_strings", "prompt_tokens": 132, "completion_tokens": 114, "duration": 10.967099905014038}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Initialize sum and product variables\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Add the current number to the sum\n        sum_of_numbers += number\n        # Multiply the current number to the product\n        product_of_numbers *= number\n    \n    # Return the sum and product as a tuple\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 149, "completion_tokens": 121, "duration": 6.855326414108276}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store the rolling max values\n    rolling_max_values = []\n    # Initialize a variable to keep track of the current maximum value\n    current_max = float('-inf')  # Start with the smallest possible value\n    # Iterate through each number in the input list\n    for number in numbers:\n        # Update the current maximum value if the current number is greater\n        current_max = max(current_max, number)\n        # Append the current maximum value to the rolling max values list\n        rolling_max_values.append(current_max)\n    # Return the list of rolling max values\n    return rolling_max_values", "prompt_tokens": 139, "completion_tokens": 150, "duration": 10.894142866134644}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    # Check if the input string is already a palindrome\n    if string == string[::-1]:\n        return string\n    \n    # Iterate over the string to find the longest palindromic suffix\n    for i in range(len(string)):\n        # Check if the current suffix is a palindrome\n        if string[i:] == string[i:][::-1]:\n            # If it is, append the reverse of the prefix to the string and return\n            return string + string[:i][::-1]\n    # In case no palindromic suffix is found, which shouldn't happen due to the whole string being checked,\n    # return the string appended with its reverse excluding the last character to ensure the result is a palindrome.\n    return string + string[:-1][::-1]", "prompt_tokens": 182, "completion_tokens": 173, "duration": 12.578282117843628}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    # Convert the input strings to integers using base 2\n    int_a = int(a, 2)\n    int_b = int(b, 2)\n    \n    # Perform XOR operation on the integers\n    xor_result = int_a ^ int_b\n    \n    # Convert the result back to a binary string and remove the '0b' prefix\n    result_str = bin(xor_result)[2:]\n    \n    return result_str", "prompt_tokens": 115, "completion_tokens": 107, "duration": 9.671833276748657}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    # Check if the list is empty, return None if true\n    if not strings:\n        return None\n    # Initialize a variable to keep track of the longest string found so far\n    longest_string = strings[0]\n    # Loop through each string in the list\n    for string in strings:\n        # If the current string is longer than the longest string found so far, update the longest string\n        if len(string) > len(longest_string):\n            longest_string = string\n    # Return the longest string found\n    return longest_string", "prompt_tokens": 141, "completion_tokens": 136, "duration": 8.612381219863892}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    # While b is not zero\n    while b:\n        # Calculate the remainder of a divided by b\n        a, b = b, a % b\n    # Return the last non-zero value of b, which is now stored in a\n    return a", "prompt_tokens": 110, "completion_tokens": 76, "duration": 5.0768303871154785}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    # Initialize an empty list to store the prefixes\n    prefixes = []\n    # Loop through the string by its length\n    for i in range(len(string)):\n        # Add the substring from start to current position + 1 (to include current character)\n        prefixes.append(string[:i+1])\n    # Return the list of prefixes\n    return prefixes", "prompt_tokens": 98, "completion_tokens": 94, "duration": 5.7490479946136475}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    # Create a list of numbers from 0 to n using range and convert each number to string\n    numbers_as_strings = [str(i) for i in range(n + 1)]\n    # Join the list of strings with a space and return the result\n    return ' '.join(numbers_as_strings)", "prompt_tokens": 108, "completion_tokens": 77, "duration": 5.406160116195679}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to ignore case differences\n    string = string.lower()\n    # Use a set to store distinct characters, as sets do not allow duplicates\n    distinct_characters = set(string)\n    # Return the number of elements in the set, which represents the number of distinct characters\n    return len(distinct_characters)", "prompt_tokens": 110, "completion_tokens": 84, "duration": 6.2719948291778564}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Split the input string by spaces to get individual notes\n    notes = music_string.split()\n    \n    # Initialize an empty list to store the beats for each note\n    beats = []\n    \n    # Iterate through each note in the list\n    for note in notes:\n        # Check if the note is a whole note 'o'\n        if note == 'o':\n            beats.append(4)  # Add 4 beats to the list\n        # Check if the note is a half note 'o|'\n        elif note == 'o|':\n            beats.append(2)  # Add 2 beats to the list\n        # Check if the note is a quarter note '.|'\n        elif note == '.|':\n            beats.append(1)  # Add 1 beat to the list\n    \n    # Return the list of beats\n    return beats", "prompt_tokens": 211, "completion_tokens": 200, "duration": 18.222604036331177}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    # Initialize a counter to keep track of occurrences\n    count = 0\n    # Initialize a starting index to 0\n    start = 0\n    \n    while True:\n        # Find the next index of the substring in the string starting from 'start'\n        start = string.find(substring, start)\n        \n        # If the substring is not found, break the loop\n        if start == -1: \n            break\n        \n        # Increment the counter as we found an occurrence\n        count += 1\n        # Move the start index by 1 to find overlapping substrings\n        start += 1\n    \n    return count", "prompt_tokens": 128, "completion_tokens": 150, "duration": 10.059118270874023}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    # Create a dictionary to map number words to their numeric values\n    number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                   'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Split the input string into a list of number words\n    number_words = numbers.split()\n    \n    # Sort the list of number words based on their numeric value using the dictionary\n    sorted_number_words = sorted(number_words, key=lambda word: number_dict[word])\n    \n    # Join the sorted list of number words back into a single string\n    sorted_numbers_str = ' '.join(sorted_number_words)\n    \n    return sorted_numbers_str", "prompt_tokens": 144, "completion_tokens": 189, "duration": 17.650456428527832}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the list to ensure numbers are in ascending order\n    numbers.sort()\n    # Initialize variables to store the closest pair of numbers and the smallest difference found\n    closest_pair = (numbers[0], numbers[1])\n    smallest_difference = abs(numbers[1] - numbers[0])\n    # Iterate through the sorted list to find the pair of numbers with the smallest difference\n    for i in range(len(numbers) - 1):\n        current_difference = abs(numbers[i+1] - numbers[i])\n        if current_difference < smallest_difference:\n            smallest_difference = current_difference\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 205, "completion_tokens": 165, "duration": 12.033844232559204}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Calculate the range of the numbers\n    range_val = max_val - min_val\n    \n    # Apply the linear transformation to each number\n    # Subtract the minimum and divide by the range to rescale\n    rescaled_numbers = [(num - min_val) / range_val for num in numbers]\n    \n    return rescaled_numbers", "prompt_tokens": 162, "completion_tokens": 119, "duration": 6.4004082679748535}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Initialize an empty list to store the filtered integers\n    filtered_integers = []\n    # Iterate through each value in the input list\n    for value in values:\n        # Check if the current value is an integer\n        if isinstance(value, int):\n            # If it is an integer, append it to the filtered list\n            filtered_integers.append(value)\n    # Return the list containing only integers\n    return filtered_integers", "prompt_tokens": 130, "completion_tokens": 114, "duration": 5.818424224853516}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    # Initialize a counter to 0 to keep track of the length\n    length = 0\n    # Iterate through each character in the string\n    for char in string:\n        # Increment the counter for each character\n        length += 1\n    # Return the final count which is the length of the string\n    return length", "prompt_tokens": 83, "completion_tokens": 83, "duration": 7.171191453933716}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    # Starting from n-1, decrement by 1 each time to find the largest divisor\n    for i in range(n-1, 0, -1):\n        # If n is evenly divisible by i, return i as the largest divisor\n        if n % i == 0:\n            return i", "prompt_tokens": 92, "completion_tokens": 80, "duration": 9.361924648284912}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    # Initialize an empty list to store the factors\n    factors = []\n    # Initialize divisor to 2, the smallest prime number\n    divisor = 2\n    # Loop until n becomes 1\n    while n > 1:\n        # If n is divisible by divisor, append divisor to factors and divide n by divisor\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        # Increment divisor by 1 to check next number\n        divisor += 1\n    # Return the list of factors\n    return factors", "prompt_tokens": 165, "completion_tokens": 139, "duration": 6.924842834472656}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Create a dictionary to store the count of each number\n    count_dict = {}\n    # Iterate through the list of numbers\n    for num in numbers:\n        # If the number is already in the dictionary, increment its count\n        if num in count_dict:\n            count_dict[num] += 1\n        # Otherwise, add the number to the dictionary with a count of 1\n        else:\n            count_dict[num] = 1\n    \n    # Create a list to store the result\n    result = []\n    # Iterate through the list of numbers again\n    for num in numbers:\n        # If the count of the number is 1, add it to the result list\n        if count_dict[num] == 1:\n            result.append(num)\n    \n    # Return the result list\n    return result", "prompt_tokens": 123, "completion_tokens": 190, "duration": 13.012798309326172}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Iterate through each character in the input string\n    for char in string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Convert it to lowercase and add it to the result string\n            result += char.lower()\n        # Otherwise, if the character is lowercase\n        else:\n            # Convert it to uppercase and add it to the result string\n            result += char.upper()\n    # Return the result string\n    return result", "prompt_tokens": 88, "completion_tokens": 125, "duration": 6.514438152313232}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    # Initialize an empty string to store the result\n    result = ''\n    # Iterate through each string in the list\n    for string in strings:\n        # Concatenate the current string to the result\n        result += string\n    # Return the concatenated string\n    return result", "prompt_tokens": 96, "completion_tokens": 77, "duration": 6.153841495513916}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Initialize an empty list to store strings that match the prefix\n    filtered_strings = []\n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the current string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, add it to the filtered list\n            filtered_strings.append(string)\n    # Return the list of filtered strings\n    return filtered_strings", "prompt_tokens": 126, "completion_tokens": 114, "duration": 19.31140637397766}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list) -> list:\n    # Initialize an empty list to store positive numbers\n    positive_numbers = []\n    # Iterate through each number in the input list\n    for number in l:\n        # Check if the current number is positive\n        if number > 0:\n            # If positive, append it to the positive_numbers list\n            positive_numbers.append(number)\n    # Return the list of positive numbers\n    return positive_numbers", "prompt_tokens": 153, "completion_tokens": 97, "duration": 5.1199305057525635}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    # Check if the number is less than 2, if so it's not prime\n    if n < 2:\n        return False\n    # Check if the number is 2, which is prime\n    if n == 2:\n        return True\n    # Check if the number is even, if so it's not prime\n    if n % 2 == 0:\n        return False\n    # Check for factors from 3 up to the square root of n, incrementing by 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    # If no factors were found, the number is prime\n    return True", "prompt_tokens": 139, "completion_tokens": 168, "duration": 10.939263582229614}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    # Use list comprehension to calculate each term of the polynomial and sum them up\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    # Check if the number of coefficients is even\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    # Define a function to use in the root-finding method\n    def func(x):\n        return poly(xs, x)\n    \n    # Define the derivative of the function to improve root-finding accuracy\n    def deriv(x):\n        return sum([i * coeff * math.pow(x, i-1) for i, coeff in enumerate(xs) if i > 0])\n    \n    # Initial guess for the root\n    x0 = 0.0\n    \n    # Use Newton's method to find a root\n    for _ in range(100):  # Limit iterations to prevent infinite loop\n        x1 = x0 - func(x0) / deriv(x0)\n        if abs(x1 - x0) < 1e-6:  # Check for convergence\n            return x1\n        x0 = x1\n    \n    # If no convergence, raise an exception\n    raise ValueError(\"Failed to find a root.\")", "prompt_tokens": 298, "completion_tokens": 412, "duration": 15.343493223190308}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_three_sorted = sorted(divisible_by_three)\n    # Replace elements at indices divisible by 3 with sorted elements\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = divisible_by_three_sorted.pop(0)\n    return l", "prompt_tokens": 190, "completion_tokens": 115, "duration": 10.763852596282959}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    # Convert the list to a set to remove duplicates\n    unique_set = set(l)\n    # Convert the set back to a list\n    unique_list = list(unique_set)\n    # Sort the list\n    unique_list.sort()\n    return unique_list", "prompt_tokens": 113, "completion_tokens": 63, "duration": 5.96718692779541}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    # Initialize the first element of the list as the maximum\n    max_val = l[0]\n    # Iterate through the list starting from the second element\n    for i in range(1, len(l)):\n        # If the current element is greater than max_val, update max_val\n        if l[i] > max_val:\n            max_val = l[i]\n    # Return the maximum value found\n    return max_val", "prompt_tokens": 122, "completion_tokens": 100, "duration": 6.537554979324341}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    # Initialize a counter for occurrences of 7\n    count = 0\n    # Loop through numbers from 1 to n-1\n    for i in range(1, n):\n        # Check if the number is divisible by 11 or 13\n        if i % 11 == 0 or i % 13 == 0:\n            # Convert the number to a string to iterate through its digits\n            for digit in str(i):\n                # If the digit is '7', increment the counter\n                if digit == '7':\n                    count += 1\n    # Return the total count of 7s found\n    return count", "prompt_tokens": 119, "completion_tokens": 151, "duration": 9.08088207244873}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Extract the elements at even indices\n    even_indices_elements = [l[i] for i in range(len(l)) if i % 2 == 0]\n    # Sort the extracted elements\n    sorted_even_elements = sorted(even_indices_elements)\n    \n    # Replace the elements at even indices in the original list with the sorted elements\n    for i in range(0, len(l), 2):\n        l[i] = sorted_even_elements[i // 2]\n    \n    return l", "prompt_tokens": 163, "completion_tokens": 113, "duration": 5.483454942703247}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split the string into groups of three characters each\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse the cycling operation for each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 198, "completion_tokens": 134, "duration": 11.085000991821289}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Define a function to generate the next Fibonacci number\n    def next_fib(a, b):\n        return a + b\n    \n    # Initialize variables to store the first two Fibonacci numbers\n    a, b = 1, 1\n    # Initialize a counter for prime Fibonacci numbers found\n    count = 0\n    \n    # Loop until we find the n-th prime Fibonacci number\n    while True:\n        # Generate the next Fibonacci number\n        fib = next_fib(a, b)\n        # Update the previous two Fibonacci numbers for the next iteration\n        a, b = b, fib\n        \n        # Check if the Fibonacci number is prime\n        if is_prime(fib):\n            # Increment the counter for prime Fibonacci numbers found\n            count += 1\n            # If we have found the n-th prime Fibonacci number, return it\n            if count == n:\n                return fib", "prompt_tokens": 137, "completion_tokens": 265, "duration": 16.241236448287964}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    # Sort the list to make it easier to navigate through\n    l.sort()\n    # Get the length of the list\n    n = len(l)\n    # Iterate through the list\n    for i in range(n-2):\n        # Initialize two pointers\n        left, right = i + 1, n - 1\n        # Use two pointers to find if there's a combination that sums to zero\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            # If the sum is zero, we found a triplet\n            if current_sum == 0:\n                return True\n            # If the sum is less than zero, move the left pointer to the right\n            elif current_sum < 0:\n                left += 1\n            # If the sum is greater than zero, move the right pointer to the left\n            else:\n                right -= 1\n    # If no triplet is found, return False\n    return False", "prompt_tokens": 199, "completion_tokens": 219, "duration": 19.071773052215576}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    # Since all cars move at the same speed and there are n cars moving from each direction,\n    # each car moving left to right will collide with each of the n cars moving right to left.\n    # Therefore, the total number of collisions is simply n * n.\n    return n * n", "prompt_tokens": 191, "completion_tokens": 77, "duration": 5.787038087844849}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    # Initialize an empty list to store the incremented values\n    incremented_list = []\n    # Iterate through each element in the input list\n    for element in l:\n        # Increment the current element by 1 and append it to the incremented_list\n        incremented_list.append(element + 1)\n    # Return the list with incremented values\n    return incremented_list", "prompt_tokens": 148, "completion_tokens": 85, "duration": 7.188627481460571}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    # Create a set to store unique elements from the list\n    unique_elements = set(l)\n    # Iterate through the list\n    for num in l:\n        # Check if the negation of the current number exists in the set\n        if -num in unique_elements and num != 0:\n            # If found, return True\n            return True\n    # If no such pair is found, return False\n    return False", "prompt_tokens": 197, "completion_tokens": 101, "duration": 9.638973951339722}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop until x becomes 0\n    while x > 0:\n        # Find the remainder of x divided by base, which is the next digit in the new base\n        remainder = x % base\n        # Add the remainder to the result string. Convert the remainder to string before adding\n        result = str(remainder) + result\n        # Update x by dividing it by the base (integer division)\n        x = x // base\n    # Return the result string\n    return result", "prompt_tokens": 131, "completion_tokens": 137, "duration": 14.719934463500977}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    # Calculate the area of a triangle using the formula (base * height) / 2\n    area = (a * h) / 2\n    return area", "prompt_tokens": 86, "completion_tokens": 47, "duration": 3.1500301361083984}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    # Base cases for n = 0, 1, 2, 3\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    # Initialize the first four values of the sequence\n    a, b, c, d = 0, 0, 2, 0\n    \n    # Loop from 4 to n (inclusive) to calculate the nth value\n    for _ in range(4, n + 1):\n        # Calculate the next value in the sequence\n        temp = a + b + c + d\n        # Shift the previous four values to prepare for the next iteration\n        a, b, c, d = b, c, d, temp\n    \n    # Return the nth value of the sequence\n    return d", "prompt_tokens": 211, "completion_tokens": 209, "duration": 20.309391260147095}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    # First, sort the list to arrange the elements in ascending order\n    l.sort()\n    # Calculate the length of the list\n    n = len(l)\n    # Check if the number of elements in the list is odd\n    if n % 2 == 1:\n        # If odd, return the middle element\n        return l[n//2]\n    else:\n        # If even, return the average of the two middle elements\n        return (l[n//2 - 1] + l[n//2]) / 2.0", "prompt_tokens": 115, "completion_tokens": 125, "duration": 5.842302560806274}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    # Convert the string to lowercase to make the function case-insensitive\n    text = text.lower()\n    # Reverse the string\n    reversed_text = text[::-1]\n    # Check if the original string is equal to its reversed version\n    return text == reversed_text", "prompt_tokens": 111, "completion_tokens": 71, "duration": 7.067768812179565}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    # Initialize result to 1 as any number power 0 is 1\n    result = 1\n    # Base number 2, which will be raised to the power of n\n    base = 2\n    \n    # Loop until n becomes 0\n    while n > 0:\n        # If n is odd, multiply result with base and take modulo p\n        if n % 2 == 1:\n            result = (result * base) % p\n        # Divide n by 2\n        n = n // 2\n        # Square the base and take modulo p\n        base = (base ** 2) % p\n    \n    # Return the final result\n    return result", "prompt_tokens": 145, "completion_tokens": 166, "duration": 10.4440758228302}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    # Decode each character by shifting it back by 5 in the alphabet\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 130, "completion_tokens": 62, "duration": 5.8634560108184814}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    # Define a string containing all vowels (both lowercase and uppercase)\n    vowels = \"aeiouAEIOU\"\n    # Use a generator expression to filter out vowels from the input text\n    # and join the remaining characters back into a string\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 162, "completion_tokens": 77, "duration": 14.040870904922485}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    # Iterate through each number in the list\n    for number in l:\n        # Check if the current number is greater than or equal to the threshold\n        if number >= t:\n            # If any number is not below the threshold, return False\n            return False\n    # If all numbers are below the threshold, return True\n    return True", "prompt_tokens": 119, "completion_tokens": 91, "duration": 8.468612432479858}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    # Return the sum of x and y\n    return x + y", "prompt_tokens": 93, "completion_tokens": 33, "duration": 2.7222483158111572}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    # Convert both strings to sets to remove duplicates and compare unique characters\n    return set(s0) == set(s1)", "prompt_tokens": 180, "completion_tokens": 46, "duration": 3.2153844833374023}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    # Base case: if n is 0 or 1, return n\n    if n <= 1:\n        return n\n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n    # Loop from 2 to n to calculate the n-th Fibonacci number\n    for _ in range(2, n + 1):\n        # Update the Fibonacci numbers\n        a, b = b, a + b\n    # Return the n-th Fibonacci number\n    return b", "prompt_tokens": 92, "completion_tokens": 121, "duration": 7.004775285720825}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a counter to keep track of the balance between opening and closing brackets\n    balance = 0\n    \n    # Iterate through each character in the input string\n    for char in brackets:\n        # If the character is an opening bracket, increment the balance\n        if char == \"<\":\n            balance += 1\n        # If the character is a closing bracket, decrement the balance\n        elif char == \">\":\n            balance -= 1\n        \n        # If at any point the balance is negative, return False immediately\n        if balance < 0:\n            return False\n    \n    # After iterating through all characters, if the balance is zero, return True, else return False\n    return balance == 0", "prompt_tokens": 132, "completion_tokens": 163, "duration": 7.391799449920654}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    # Check if the list is monotonically increasing\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    # Check if the list is monotonically decreasing\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    # Return True if either condition is met\n    return increasing or decreasing", "prompt_tokens": 127, "completion_tokens": 104, "duration": 6.21959376335144}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    # Convert both lists to sets to remove duplicates and allow for set operations\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of both sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set of common elements back to a list and sort it\n    sorted_common_elements = sorted(list(common_elements))\n    \n    return sorted_common_elements", "prompt_tokens": 154, "completion_tokens": 106, "duration": 8.681743144989014}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    # Initialize the largest prime factor variable\n    largest_prime = -1\n    \n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    \n    # Divide n by odd numbers starting from 3 to find prime factors\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n    \n    # If n becomes a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n    \n    return largest_prime", "prompt_tokens": 103, "completion_tokens": 156, "duration": 14.267364740371704}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    # Initialize a variable to store the sum\n    total_sum = 0\n    # Loop from 1 to n (inclusive) to add all numbers\n    for i in range(1, n + 1):\n        total_sum += i\n    # Return the total sum\n    return total_sum", "prompt_tokens": 134, "completion_tokens": 79, "duration": 12.023380756378174}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a counter for open brackets\n    open_brackets = 0\n    \n    # Iterate through each character in the string\n    for char in brackets:\n        # If the character is an opening bracket, increment the counter\n        if char == '(':\n            open_brackets += 1\n        # If the character is a closing bracket\n        elif char == ')':\n            # If there are no open brackets to match, return False\n            if open_brackets == 0:\n                return False\n            # Otherwise, decrement the counter\n            open_brackets -= 1\n    \n    # If there are no unmatched open brackets, return True, else return False\n    return open_brackets == 0", "prompt_tokens": 129, "completion_tokens": 163, "duration": 7.286020994186401}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    # Initialize an empty list to store the coefficients of the derivative\n    derivative_coeffs = []\n    # Iterate over the list of coefficients, skipping the first one (constant term)\n    for i in range(1, len(xs)):\n        # Calculate the derivative for each term and append it to the derivative_coeffs list\n        derivative_coeffs.append(i * xs[i])\n    # Return the list of coefficients for the derivative\n    return derivative_coeffs", "prompt_tokens": 148, "completion_tokens": 99, "duration": 6.147627830505371}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initialize the first three numbers of the sequence\n    a, b, c = 0, 0, 1\n    \n    # Calculate the nth number using dynamic programming\n    for _ in range(3, n + 1):\n        # The next number is the sum of the previous three\n        next_number = a + b + c\n        # Update the previous three numbers for the next iteration\n        a, b, c = b, c, next_number\n    \n    # Return the nth number\n    return c", "prompt_tokens": 189, "completion_tokens": 165, "duration": 7.231657266616821}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"\n    This function counts the number of vowels in a given string. \n    Vowels are 'a', 'e', 'i', 'o', 'u', and 'y' (when 'y' is at the end of the word).\n    The function is case-insensitive.\n    \"\"\"\n    # Convert the string to lowercase to make the function case-insensitive\n    s = s.lower()\n    # Initialize a count variable to 0. This will keep track of the number of vowels.\n    count = 0\n    # Define a list of vowels. Include 'y' since it can be considered a vowel in certain conditions.\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    # Iterate through each character in the string\n    for char in s:\n        # If the character is in the list of vowels, increment the count by 1\n        if char in vowels:\n            count += 1\n    # Check if the last character is 'y'. If it is not, and 'y' was counted as a vowel, decrement the count by 1.\n    if s[-1] != 'y' and 'y' in s:\n        count -= s.count('y')\n    # Return the total count of vowels\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Expected output: 2\nprint(vowels_count(\"ACEDY\"))  # Expected output: 3\nprint(vowels_count(\"rhythm\"))  # Expected output: 0\nprint(vowels_count(\"pygmy\"))  # Expected output: 1\nprint(vowels_count(\"encyclopedia\"))  # Expected output: 5", "prompt_tokens": 166, "completion_tokens": 373, "duration": 13.94758677482605}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    # Convert the integer x to a string to work with its digits\n    x_str = str(x)\n    # Find the length of the string\n    length = len(x_str)\n    \n    # If shift is greater than the number of digits, reverse the digits\n    if shift > length:\n        return x_str[::-1]\n    \n    # Perform the circular shift\n    # Calculate the effective shift needed (as shifting by the length of the string would result in the same string)\n    effective_shift = shift % length\n    # The new string is formed by taking the substring from the end and adding the beginning part to it\n    return x_str[-effective_shift:] + x_str[:-effective_shift]", "prompt_tokens": 122, "completion_tokens": 155, "duration": 6.818829774856567}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    # Initialize a variable to store the sum of ASCII values\n    sum_ascii = 0\n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII value of the uppercase letter to the sum\n            sum_ascii += ord(char)\n    # Return the total sum of ASCII values of uppercase letters\n    return sum_ascii", "prompt_tokens": 152, "completion_tokens": 101, "duration": 9.16098690032959}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    # Split the input string into words\n    words = s.split()\n    # Extract the number of apples from the string, which is the first number in the string\n    apples = int(words[0])\n    # Extract the number of oranges from the string, which is the third number in the string\n    oranges = int(words[3])\n    # Calculate the number of mangoes by subtracting the number of apples and oranges from the total number of fruits\n    mangoes = n - apples - oranges\n    # Return the number of mangoes\n    return mangoes", "prompt_tokens": 250, "completion_tokens": 130, "duration": 9.413715362548828}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    # Initialize variables to store the smallest even value and its index\n    smallest_even = float('inf')\n    smallest_index = -1\n    \n    # Iterate through the array to find the smallest even value and its index\n    for i, value in enumerate(arr):\n        # Check if the current value is even and less than the current smallest even value\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = i\n    \n    # Check if a smallest even value was found, if not return an empty list\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, smallest_index]", "prompt_tokens": 352, "completion_tokens": 151, "duration": 6.679048538208008}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    # Count the frequency of each number in the list\n    frequency = {}\n    for number in lst:\n        if number in frequency:\n            frequency[number] += 1\n        else:\n            frequency[number] = 1\n    \n    # Initialize the result variable to -1 (assuming no such number exists)\n    result = -1\n    \n    # Iterate through the frequency dictionary\n    for number, freq in frequency.items():\n        # Check if the frequency is greater than or equal to the number itself\n        if freq >= number:\n            # Update the result with the maximum of current result and the number\n            result = max(result, number)\n    \n    return result", "prompt_tokens": 205, "completion_tokens": 144, "duration": 6.641170024871826}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    # Initialize an empty list to store the result\n    result = []\n    # Loop until the original list is empty\n    while lst:\n        # Append the first element (minimum) of the list to the result and remove it from the original list\n        result.append(lst.pop(0))\n        # If the list is not empty, append the last element (maximum) to the result and remove it\n        if lst:\n            result.append(lst.pop())\n    # Return the result list\n    return result", "prompt_tokens": 164, "completion_tokens": 127, "duration": 5.600653171539307}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # Check if the given sides form a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the sides do not form a valid triangle\n        return -1", "prompt_tokens": 161, "completion_tokens": 147, "duration": 7.7452991008758545}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    # Check if the list is a palindrome by comparing it to its reverse\n    is_balanced = q == q[::-1]\n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n    # Return True if the object is balanced and its total weight is less than or equal to the maximum possible weight\n    return is_balanced and total_weight <= w", "prompt_tokens": 270, "completion_tokens": 94, "duration": 6.787559509277344}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    # Initialize a counter for the changes needed\n    changes = 0\n    # Calculate the length of the array\n    n = len(arr)\n    # Loop through the first half of the array\n    for i in range(n // 2):\n        # If the current element and its corresponding element in the second half are not equal\n        if arr[i] != arr[n - i - 1]:\n            # Increment the changes counter\n            changes += 1\n    # Return the total number of changes needed\n    return changes", "prompt_tokens": 197, "completion_tokens": 120, "duration": 8.710540533065796}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    # Calculate the total number of characters in lst1\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    # Calculate the total number of characters in lst2\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the total number of characters in both lists\n    # Return the list with fewer characters, or lst1 if they are equal\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 233, "completion_tokens": 124, "duration": 10.91968560218811}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Initialize a counter for prime factors\n    prime_factors_count = 0\n    \n    # Loop through numbers from 2 to a to find prime factors\n    for i in range(2, a + 1):\n        # Check if i is a prime factor of a\n        if a % i == 0 and is_prime(i):\n            prime_factors_count += 1\n            # Divide a by i to continue checking with the next factors\n            a = a // i\n            # If the count of prime factors is 3 before the loop ends, return True\n            if prime_factors_count == 3 and a == 1:\n                return True\n    \n    # If the loop ends and the count of prime factors is not 3, return False\n    return False", "prompt_tokens": 119, "completion_tokens": 236, "duration": 14.404242038726807}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    # Check if n is 1, in which case only x=1 would return True\n    if n == 1:\n        return x == 1\n    # Initialize a variable to keep track of powers of n\n    power = n\n    # Loop until power exceeds x\n    while power < x:\n        # Multiply power by n to get the next power\n        power *= n\n    # Check if the final power is equal to x\n    return power == x", "prompt_tokens": 182, "completion_tokens": 113, "duration": 7.099649667739868}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    # Check if the cube root of the absolute value of 'a' is an integer\n    # The cube root of 'a' is calculated using '** (1/3)'\n    # The absolute value is used to handle negative inputs correctly\n    # 'round' is used to handle floating point arithmetic issues, with a small epsilon for comparison\n    # If the rounded value, when cubed, equals the original number, it's a perfect cube\n    return round(abs(a) ** (1/3)) ** 3 == abs(a)", "prompt_tokens": 150, "completion_tokens": 121, "duration": 5.393747806549072}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Define a set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Initialize a counter for prime digits\n    prime_count = 0\n    # Iterate through each character in the input string\n    for char in num:\n        # If the character is a prime hexadecimal digit, increment the counter\n        if char in prime_hex_digits:\n            prime_count += 1\n    # Return the count of prime hexadecimal digits\n    return prime_count", "prompt_tokens": 339, "completion_tokens": 120, "duration": 8.956371784210205}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    # Convert the decimal number to binary using bin() function and remove the '0b' prefix\n    binary_str = bin(decimal)[2:]\n    # Add 'db' at the beginning and at the end of the binary string\n    formatted_binary_str = \"db\" + binary_str + \"db\"\n    # Return the formatted binary string\n    return formatted_binary_str", "prompt_tokens": 179, "completion_tokens": 87, "duration": 3.913255214691162}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    # Check if the length of the string is less than 3, return False if it is\n    if len(s) < 3:\n        return False\n    \n    # Loop through the string up to the third last character\n    for i in range(len(s) - 2):\n        # Check if the current character, the next one, and the one after that are distinct\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False  # If any three consecutive characters are not distinct, return False\n    \n    # If the loop completes without returning False, the string is happy\n    return True", "prompt_tokens": 161, "completion_tokens": 158, "duration": 12.802191495895386}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Convert a list of numerical GPAs into letter grades.\n    \"\"\"\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n    \n    # Loop through each grade in the input list\n    for grade in grades:\n        # Compare the grade against the grading scale and append the corresponding letter grade\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    # Return the list of letter grades\n    return letter_grades", "prompt_tokens": 310, "completion_tokens": 318, "duration": 19.019314289093018}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    # Define a helper function to check if a number is prime\n    def is_prime(n):\n        # 0 and 1 are not prime numbers\n        if n <= 1:\n            return False\n        # Check for factors other than 1 and n itself\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Get the length of the input string\n    length = len(string)\n    # Use the helper function to check if the length is prime\n    return is_prime(length)", "prompt_tokens": 121, "completion_tokens": 137, "duration": 8.701616764068604}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    # If n is 1, then there's only 2 such numbers: 0 and 1.\n    if n == 1:\n        return 2\n    # For n > 1, calculate the numbers that start with 1 and those that end with 1.\n    # There are 9 options for the first digit (2-9) and 10^(n-1) options for the rest.\n    starts_with_1 = 10 ** (n - 1)\n    # For ending with 1, every number of n digits can end with 1, which is also 10^(n-1).\n    ends_with_1 = 10 ** (n - 1)\n    # However, this double counts the numbers that both start and end with 1, so subtract those.\n    # There are 10^(n-2) numbers that start and end with 1, as the middle digits can be anything.\n    both = 10 ** (n - 2) if n > 2 else 1  # For n=2, there's only 1 number: 11.\n    # Return the total count, subtracting the overlap.\n    return starts_with_1 + ends_with_1 - both", "prompt_tokens": 84, "completion_tokens": 270, "duration": 16.137794733047485}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Convert the integer N to a string to iterate through each digit\n    N_str = str(N)\n    # Initialize sum_of_digits to 0 to keep track of the sum of digits\n    sum_of_digits = 0\n    # Iterate through each character in the string representation of N\n    for digit in N_str:\n        # Convert each character back to an integer and add it to sum_of_digits\n        sum_of_digits += int(digit)\n    # Convert the sum of digits to binary and return it as a string without the '0b' prefix\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 173, "completion_tokens": 134, "duration": 5.393678665161133}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    # Initialize sum to 0\n    sum_even_odd_index = 0\n    # Loop through the list with index\n    for index, value in enumerate(lst):\n        # Check if index is odd and value is even\n        if index % 2 != 0 and value % 2 == 0:\n            # Add the value to the sum\n            sum_even_odd_index += value\n    # Return the final sum\n    return sum_even_odd_index", "prompt_tokens": 95, "completion_tokens": 104, "duration": 4.537415981292725}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    # Split the input string into words based on spaces\n    words = s.split(' ')\n    \n    # Initialize an empty list to store the ordered words\n    ordered_words = []\n    \n    # Iterate through each word in the list of words\n    for word in words:\n        # Sort the characters of the word based on their ascii values and join them back into a string\n        ordered_word = ''.join(sorted(word))\n        # Append the ordered word to the list of ordered words\n        ordered_words.append(ordered_word)\n    \n    # Join the list of ordered words back into a string with spaces in between and return it\n    return ' '.join(ordered_words)", "prompt_tokens": 170, "completion_tokens": 146, "duration": 5.739504098892212}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n    \n    # Iterate through the list with both index and value (enumerate gives us both)\n    for i, row in enumerate(lst):\n        # Iterate through each row with both index and value\n        for j, val in enumerate(row):\n            # Check if the current value is equal to x\n            if val == x:\n                # If so, append the coordinate (i, j) to the coordinates list\n                coordinates.append((i, j))\n    \n    # Sort the coordinates list\n    # First, by the row in ascending order (i value of the tuple)\n    # Then, by the column in descending order (j value of the tuple, hence -j for reverse)\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    # Return the sorted list of coordinates\n    return coordinates", "prompt_tokens": 299, "completion_tokens": 197, "duration": 9.696212768554688}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    # Copy the given array to avoid changing the original array\n    arr_copy = array.copy()\n    \n    # Check if the array is empty or contains only one element, return the copy as is\n    if len(arr_copy) <= 1:\n        return arr_copy\n    \n    # Calculate the sum of the first and last element\n    sum_first_last = arr_copy[0] + arr_copy[-1]\n    \n    # Check if the sum is odd\n    if sum_first_last % 2 == 1:\n        # Sort the array in ascending order\n        arr_copy.sort()\n    else:\n        # Sort the array in descending order\n        arr_copy.sort(reverse=True)\n    \n    # Return the sorted array\n    return arr_copy", "prompt_tokens": 243, "completion_tokens": 161, "duration": 7.539452314376831}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    # Create a string of the alphabet for reference\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # Initialize an empty string for the encrypted message\n    encrypted_message = ''\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is in the alphabet (ignoring case)\n        if char.lower() in alphabet:\n            # Find the index of the character in the alphabet\n            index = alphabet.index(char.lower())\n            # Calculate the new index by shifting down by 2*2=4 places\n            new_index = (index + 4) % 26\n            # Append the character at the new index to the encrypted message\n            encrypted_message += alphabet[new_index]\n        else:\n            # If the character is not in the alphabet, just append it as is\n            encrypted_message += char\n    \n    # Return the encrypted message\n    return encrypted_message", "prompt_tokens": 150, "completion_tokens": 194, "duration": 31.45356774330139}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    # Remove duplicates by converting the list to a set\n    unique_elements = set(lst)\n    \n    # Check if there are less than 2 unique elements, return None if true\n    if len(unique_elements) < 2:\n        return None\n    \n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(unique_elements))\n    \n    # Return the 2nd element in the sorted list, which is the 2nd smallest unique element\n    return sorted_list[1]", "prompt_tokens": 164, "completion_tokens": 115, "duration": 8.972332000732422}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Split the input string into sentences based on '.', '?', and '!'\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    \n    # Initialize a counter for boredom sentences\n    boredom_count = 0\n    \n    # Iterate through each sentence\n    for sentence in sentences:\n        # Check if the sentence starts with \"I\" followed by a space or \"I\" being the entire sentence\n        if sentence.startswith(\"I \"):\n            # Increment the boredom counter\n            boredom_count += 1\n    \n    # Return the total count of boredom sentences\n    return boredom_count", "prompt_tokens": 147, "completion_tokens": 138, "duration": 9.476378202438354}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(i, int) for i in [x, y, z]):\n        # Check if any number is equal to the sum of the other two\n        return x == y + z or y == x + z or z == x + y\n    else:\n        # Return False if not all numbers are integers\n        return False", "prompt_tokens": 175, "completion_tokens": 94, "duration": 5.212225437164307}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    # Create a dictionary to map vowels to the letter 2 places ahead\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    # Initialize an empty string to store the encoded message\n    encoded_message = ''\n    \n    # Iterate through each character in the message\n    for char in message:\n        # Check if the character is a vowel by looking it up in the vowel_map\n        if char in vowel_map:\n            # If it is a vowel, replace it with the corresponding character from the vowel_map\n            encoded_message += vowel_map[char]\n        else:\n            # If it is not a vowel, swap its case\n            # If the character is uppercase, convert it to lowercase, and vice versa\n            encoded_message += char.swapcase()\n    \n    # Return the encoded message\n    return encoded_message", "prompt_tokens": 149, "completion_tokens": 229, "duration": 9.710670232772827}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_sum(lst):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Initialize the largest prime number found to 0\n    largest_prime = 0\n    \n    # Iterate through the list to find the largest prime number\n    for number in lst:\n        if is_prime(number) and number > largest_prime:\n            largest_prime = number\n    \n    # Sum the digits of the largest prime number\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n    \n    # Return the sum of the digits\n    return sum_of_digits", "prompt_tokens": 326, "completion_tokens": 175, "duration": 8.29364800453186}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    # Check if the dictionary is empty\n    if not dict:\n        return False\n    \n    # Initialize variables to keep track of the case of keys\n    all_lower = all_upper = True\n    \n    # Iterate through the keys of the dictionary\n    for key in dict.keys():\n        # Check if the key is a string\n        if isinstance(key, str):\n            # If the key is not all lower case, set all_lower to False\n            if not key.islower():\n                all_lower = False\n            # If the key is not all upper case, set all_upper to False\n            if not key.isupper():\n                all_upper = False\n        else:\n            # If the key is not a string, return False\n            return False\n    \n    # Return True if all keys are either all lower case or all upper case, else return False\n    return all_lower or all_upper", "prompt_tokens": 209, "completion_tokens": 193, "duration": 9.70479702949524}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    # Define a helper function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize an empty list to store prime numbers\n    primes = []\n    # Loop through numbers from 2 up to n\n    for num in range(2, n):\n        # Check if the current number is prime\n        if is_prime(num):\n            # If it is, append it to the list of primes\n            primes.append(num)\n    # Return the list of prime numbers\n    return primes", "prompt_tokens": 185, "completion_tokens": 162, "duration": 13.674380779266357}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    # Get the unit digit of the first number by taking the modulus of 10\n    unit_digit_a = abs(a) % 10\n    # Get the unit digit of the second number by taking the modulus of 10\n    unit_digit_b = abs(b) % 10\n    # Multiply the unit digits of both numbers\n    product = unit_digit_a * unit_digit_b\n    # Return the product\n    return product", "prompt_tokens": 138, "completion_tokens": 101, "duration": 5.400369644165039}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    # Initialize a count variable to 0 to keep track of uppercase vowels at even indices\n    count = 0\n    \n    # Define a string of uppercase vowels for comparison\n    uppercase_vowels = 'AEIOU'\n    \n    # Iterate through the string using enumerate to get both index and character\n    for index, char in enumerate(s):\n        # Check if the index is even and the character is an uppercase vowel\n        if index % 2 == 0 and char in uppercase_vowels:\n            # If both conditions are met, increment the count\n            count += 1\n            \n    # Return the final count\n    return count", "prompt_tokens": 112, "completion_tokens": 163, "duration": 10.436559915542603}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    # Convert the input string to a float\n    num = float(value)\n    # Get the floor value of the number\n    floor_val = int(num)\n    # Calculate the difference between the number and its floor value\n    diff = num - floor_val\n    # Check if the number is positive or negative\n    if num > 0:\n        # For positive numbers, check if the difference is greater than or equal to 0.5\n        if diff >= 0.5:\n            # If yes, round up by adding 1 to the floor value\n            return floor_val + 1\n        else:\n            # If no, return the floor value\n            return floor_val\n    else:\n        # For negative numbers, check if the difference is less than or equal to -0.5\n        if diff <= -0.5:\n            # If yes, round further down by subtracting 1 from the floor value\n            return floor_val - 1\n        else:\n            # If no, return the floor value\n            return floor_val", "prompt_tokens": 196, "completion_tokens": 230, "duration": 16.345437049865723}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    # Initialize an empty list to store the number of stones in each level\n    stones_in_levels = []\n    # Initialize the number of stones in the first level\n    current_stones = n\n    # Loop through each level\n    for _ in range(n):\n        # Append the current number of stones to the list\n        stones_in_levels.append(current_stones)\n        # Increase the number of stones by 2 for the next level\n        current_stones += 2\n    # Return the list of stones in each level\n    return stones_in_levels", "prompt_tokens": 172, "completion_tokens": 127, "duration": 10.087373495101929}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    # Replace commas with spaces to unify the separators\n    s = s.replace(',', ' ')\n    # Split the string into words using spaces as the separator\n    words = s.split()\n    # Return the list of words\n    return words", "prompt_tokens": 156, "completion_tokens": 59, "duration": 4.981587648391724}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    # Check if x is greater than y, if so, return -1 because the range is invalid\n    if x > y:\n        return -1\n    # Start from y and decrement until x to find the largest even number\n    for num in range(y, x-1, -1):\n        # Check if the current number is even\n        if num % 2 == 0:\n            return num  # Return the first even number found, which is the largest\n    # If no even number is found in the range, return -1\n    return -1", "prompt_tokens": 134, "completion_tokens": 132, "duration": 7.168169736862183}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    # Check if n is greater than m, return -1 if true\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n to m using the formula for the sum of an arithmetic series\n    total_sum = (m - n + 1) * (n + m) // 2\n    \n    # Calculate the count of integers between n and m, inclusive\n    count = m - n + 1\n    \n    # Calculate the average by dividing the total sum by the count\n    avg = total_sum // count\n    \n    # Round the average to the nearest integer\n    # Note: The rounding step is not necessary as we are using integer division which truncates towards zero\n    # Convert the rounded average to binary\n    avg_binary = bin(avg)\n    \n    # Return the binary representation\n    return avg_binary", "prompt_tokens": 180, "completion_tokens": 189, "duration": 8.083290576934814}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    # Define a function to check if all digits in a number are odd\n    def all_odd_digits(num):\n        # Convert the number to a string to iterate over each digit\n        for digit in str(num):\n            # If any digit is even, return False\n            if int(digit) % 2 == 0:\n                return False\n        # If all digits are odd, return True\n        return True\n    \n    # Use a list comprehension to filter the input list x\n    # Keep only those numbers for which all_odd_digits returns True\n    result = [num for num in x if all_odd_digits(num)]\n    \n    # Sort the filtered list in increasing order\n    result.sort()\n    \n    # Return the sorted list\n    return result", "prompt_tokens": 142, "completion_tokens": 165, "duration": 14.026970624923706}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # Filter the array to include only numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map the numbers to their corresponding names\n    num_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    result = [num_to_name[num] for num in reversed_arr]\n    \n    return result", "prompt_tokens": 316, "completion_tokens": 172, "duration": 18.865310430526733}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    # Define the function to calculate factorial\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    # Define the function to calculate sum from 1 to x\n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    # Initialize an empty list to store the results\n    result = []\n    \n    # Loop through 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Check if i is even\n        if i % 2 == 0:\n            # Append the factorial of i to the result list\n            result.append(factorial(i))\n        else:\n            # Append the sum from 1 to i to the result list\n            result.append(sum_to_x(i))\n    \n    # Return the result list\n    return result", "prompt_tokens": 164, "completion_tokens": 194, "duration": 8.749455451965332}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    # Initialize counters for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through the range from 1 to n inclusive\n    for i in range(1, n + 1):\n        # Convert the current number to a string\n        num_str = str(i)\n        # Check if the number is a palindrome by comparing it to its reverse\n        if num_str == num_str[::-1]:\n            # If the number is even, increment the even counter\n            if i % 2 == 0:\n                even_count += 1\n            # If the number is odd, increment the odd counter\n            else:\n                odd_count += 1\n                \n    # Return the tuple with the counts of even and odd palindromes\n    return (even_count, odd_count)", "prompt_tokens": 251, "completion_tokens": 186, "duration": 10.473915100097656}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    # Define a function to calculate the sum of digits of a number\n    def sum_of_digits(num):\n        # Check if the number is negative, and if so, make it positive\n        # but remember that it was negative\n        is_negative = num < 0\n        num = abs(num)\n        # Initialize the sum of digits\n        sum_digits = 0\n        # Loop through each digit in the number\n        while num > 0:\n            # Add the last digit to the sum\n            sum_digits += num % 10\n            # Remove the last digit from the number\n            num //= 10\n        # If the original number was negative, subtract twice the first digit\n        # to account for the negative sign\n        if is_negative:\n            sum_digits -= 2 * (sum_digits % 10)\n        return sum_digits\n    \n    # Initialize a counter for numbers with a positive sum of digits\n    count = 0\n    # Loop through each number in the array\n    for num in arr:\n        # If the sum of digits is greater than 0, increment the counter\n        if sum_of_digits(num) > 0:\n            count += 1\n    # Return the count of numbers with a positive sum of digits\n    return count", "prompt_tokens": 164, "completion_tokens": 275, "duration": 28.776602029800415}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    # Check if the array is empty\n    if not arr:\n        return True\n    \n    # Count the number of times the current element is greater than the next element\n    count = 0\n    for i in range(len(arr)):\n        # Compare current element with the next element, considering the array as circular\n        if arr[i] > arr[(i + 1) % len(arr)]:\n            count += 1\n    \n    # If count is more than 1, it means the array cannot be sorted with right shift operations\n    return count <= 1", "prompt_tokens": 339, "completion_tokens": 128, "duration": 6.433901071548462}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Count the number of odd numbers in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # Count the number of even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2, return \"YES\"\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        # Otherwise, it's not possible to make all elements in lst1 even, return \"NO\"\n        return \"NO\"", "prompt_tokens": 237, "completion_tokens": 160, "duration": 9.702595710754395}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    # Split the input string into a list of letters\n    letters = test.split()\n    # Create an empty dictionary to store the count of each letter\n    letter_count = {}\n    # Loop through each letter in the list\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_count:\n            letter_count[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            letter_count[letter] = 1\n    # Find the maximum count of any letter\n    max_count = max(letter_count.values(), default=0)\n    # Create a new dictionary to store letters with the maximum count\n    max_letters = {letter: count for letter, count in letter_count.items() if count == max_count}\n    # Return the dictionary of letters with the maximum count\n    return max_letters", "prompt_tokens": 191, "completion_tokens": 200, "duration": 9.832146883010864}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    # Remove all characters in s that are in c\n    result_string = ''.join([char for char in s if char not in c])\n    # Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    # Return the result string and whether it is a palindrome\n    return (result_string, is_palindrome)", "prompt_tokens": 202, "completion_tokens": 88, "duration": 5.290338754653931}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each string in the input list\n    for s in lst:\n        # Count the number of odd digits in the current string\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        # Format the output string by replacing 'i' with the odd_count\n        output = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        # Append the formatted string to the result list\n        result.append(output)\n    # Return the result list\n    return result", "prompt_tokens": 213, "completion_tokens": 154, "duration": 14.484618186950684}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    # Initialize variables to store the current minimum sum and the overall minimum sum found so far.\n    # Both are initially set to the first element of the array, assuming the array is non-empty as per the problem statement.\n    current_min = overall_min = nums[0]\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(nums)):\n        # Update the current minimum sum. It is either the current element itself or the sum of the current element and the previous minimum sum,\n        # whichever is smaller. This step effectively decides whether to start a new sub-array or to continue with the existing one.\n        current_min = min(nums[i], current_min + nums[i])\n        \n        # Update the overall minimum sum found so far if the current minimum sum is smaller.\n        overall_min = min(overall_min, current_min)\n    \n    # Return the overall minimum sum found.\n    return overall_min", "prompt_tokens": 128, "completion_tokens": 204, "duration": 11.790555477142334}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    # Import the math module for using ceil function\n    import math\n    \n    # Initialize a variable to keep track of total water units\n    total_water_units = 0\n    \n    # Iterate through each row in the grid\n    for row in grid:\n        # Sum the water units in the current row and add to the total\n        total_water_units += sum(row)\n    \n    # Calculate the number of times buckets need to be lowered\n    # by dividing total water units by the capacity of the bucket\n    # and taking the ceiling of the result to account for partial buckets\n    bucket_lowers = math.ceil(total_water_units / capacity)\n    \n    # Return the calculated number of bucket lowers\n    return bucket_lowers", "prompt_tokens": 363, "completion_tokens": 160, "duration": 6.196435928344727}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    # Convert each number to its binary representation and count the number of ones\n    # Sort the array first by the number of ones in their binary representation in ascending order\n    # For numbers with the same number of ones, sort them based on their decimal value in ascending order\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 210, "completion_tokens": 85, "duration": 9.550474882125854}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    # Split the string into words\n    words = s.split()\n    \n    # Initialize an empty list to store words with exactly n consonants\n    result = []\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n        \n        # Iterate through each character in the word\n        for char in word:\n            # Check if the character is a consonant\n            if char.lower() not in 'aeiou' and char.isalpha():\n                # Increment the consonant counter\n                consonant_count += 1\n        \n        # Check if the consonant count matches the specified number n\n        if consonant_count == n:\n            # Add the word to the result list\n            result.append(word)\n    \n    # Return the result list\n    return result", "prompt_tokens": 221, "completion_tokens": 187, "duration": 7.499767780303955}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    # Define the vowels\n    vowels = \"aeiouAEIOU\"\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop through the word from the end to the beginning\n    for i in range(len(word) - 1, 0, -1):\n        # Check if the current character is a vowel and it's between two consonants\n        if word[i] in vowels and i != len(word) - 1 and word[i-1] not in vowels and word[i+1] not in vowels:\n            # If condition met, assign the vowel to result\n            result = word[i]\n            # Break the loop as we found the closest vowel from the right\n            break\n    # Return the result\n    return result", "prompt_tokens": 189, "completion_tokens": 173, "duration": 10.95759391784668}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    # First, we initialize a counter for open parentheses\n    open_parens = 0\n    # Then, we iterate through the first string in the list\n    for char in lst[0]:\n        # If we encounter an open parenthesis, we increment the counter\n        if char == '(':\n            open_parens += 1\n        # If we encounter a close parenthesis, we decrement the counter\n        else:\n            open_parens -= 1\n        # If at any point the counter goes below zero, we return 'No'\n        if open_parens < 0:\n            return 'No'\n    # We do the same for the second string in the list\n    for char in lst[1]:\n        if char == '(':\n            open_parens += 1\n        else:\n            open_parens -= 1\n        if open_parens < 0:\n            return 'No'\n    # If after processing both strings the counter is back to zero, we return 'Yes'\n    # Otherwise, we return 'No'\n    return 'Yes' if open_parens == 0 else 'No'", "prompt_tokens": 208, "completion_tokens": 250, "duration": 14.076743125915527}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Slice the first k elements from the sorted array\n    result = arr[:k]\n    # Return the result sorted in ascending order\n    return sorted(result)", "prompt_tokens": 257, "completion_tokens": 59, "duration": 3.454925775527954}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    # Initialize sum to 0\n    sum_odd_even_pos = 0\n    # Iterate through the list with index\n    for i, num in enumerate(lst):\n        # Check if the position is even (considering 0 as the first position) and the number is odd\n        if i % 2 == 0 and num % 2 != 0:\n            # Add the number to the sum\n            sum_odd_even_pos += num\n    # Return the final sum\n    return sum_odd_even_pos", "prompt_tokens": 137, "completion_tokens": 116, "duration": 5.426712512969971}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    # Initialize sum to 0\n    sum = 0\n    # Iterate through the first k elements of the array\n    for i in range(k):\n        # Check if the current element has at most two digits\n        if 10 <= arr[i] < 100:\n            # Add the element to the sum\n            sum += arr[i]\n    # Return the final sum\n    return sum", "prompt_tokens": 168, "completion_tokens": 95, "duration": 8.933393955230713}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    # Initialize an empty list to store odd numbers\n    odd_numbers = []\n    \n    # Loop until n becomes 1\n    while n != 1:\n        # Check if the current number is odd\n        if n % 2 != 0:\n            # If it's odd, add it to the list\n            odd_numbers.append(n)\n        # Apply the Collatz rule\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    \n    # Add 1 to the list, as the sequence always ends with 1\n    odd_numbers.append(1)\n    \n    # Return the sorted list of odd numbers\n    return sorted(odd_numbers)", "prompt_tokens": 271, "completion_tokens": 158, "duration": 6.592561483383179}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is not empty\n    if not date:\n        return False\n    \n    # Check if the date format is correct (mm-dd-yyyy)\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    # Check if the month is valid (1-12)\n    if month < 1 or month > 12:\n        return False\n    \n    # Define the maximum days in each month\n    max_days = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, \n                7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    \n    # Check if the day is valid according to the month\n    if day < 1 or day > max_days.get(month, 0):\n        return False\n    \n    # If all checks passed, the date is valid\n    return True", "prompt_tokens": 303, "completion_tokens": 236, "duration": 19.190020322799683}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    # Check if there are whitespaces in the text\n    if ' ' in txt:\n        # Split the text on whitespace and return the list\n        return txt.split()\n    # Check if there are commas in the text\n    elif ',' in txt:\n        # Split the text on comma and return the list\n        return txt.split(',')\n    else:\n        # Initialize a counter for lowercase letters with odd order\n        odd_order_count = 0\n        # Iterate through each character in the text\n        for char in txt:\n            # Check if the character is a lowercase letter\n            if char.islower():\n                # Calculate the order of the letter and check if it's odd\n                if (ord(char) - ord('a')) % 2 == 0:\n                    # Increment the counter if the order is odd\n                    odd_order_count += 1\n        # Return the count of lowercase letters with odd order\n        return odd_order_count", "prompt_tokens": 180, "completion_tokens": 205, "duration": 16.570618391036987}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    # Check if there are more than 1 duplicate of the same number\n    if len(lst) != len(set(lst)):\n        # Create a dictionary to count occurrences of each number\n        count_dict = {}\n        for num in lst:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n        # If any number occurs more than twice, return False\n        for key in count_dict:\n            if count_dict[key] > 2:\n                return False\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 289, "completion_tokens": 164, "duration": 7.4754486083984375}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    # Define a helper function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Calculate the intersection of the two intervals\n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    \n    # Check if the intervals intersect\n    if start_max > end_min:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = end_min - start_max\n    \n    # Check if the length of the intersection is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 294, "completion_tokens": 196, "duration": 7.963680267333984}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    # Check if the array is empty, return None if true\n    if not arr:\n        return None\n    \n    # Initialize variables for the product of signs and sum of magnitudes\n    sign_product = 1\n    magnitude_sum = 0\n    \n    # Iterate through each number in the array\n    for num in arr:\n        # Multiply the sign_product by -1 if the number is negative, by 0 if the number is 0\n        if num < 0:\n            sign_product *= -1\n        elif num == 0:\n            sign_product *= 0\n        \n        # Add the absolute value of the number to the magnitude_sum\n        magnitude_sum += abs(num)\n    \n    # Multiply the sum of magnitudes by the product of signs and return the result\n    return magnitude_sum * sign_product", "prompt_tokens": 162, "completion_tokens": 179, "duration": 9.443578243255615}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    \"\"\"\n    Find the minimum path of length k in the grid.\n    \"\"\"\n    # Initialize the priority queue with tuples of (path value list, current row, current column)\n    pq = []\n    N = len(grid)\n    \n    # Push all possible starting points into the priority queue\n    for i in range(N):\n        for j in range(N):\n            heappush(pq, ([grid[i][j]], i, j))\n    \n    # Define the directions for moving up, down, left, right\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    while pq:\n        path, r, c = heappop(pq)\n        \n        # If the path length equals k, return the path\n        if len(path) == k:\n            return path\n        \n        # Explore all 4 possible directions\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            \n            # Check if the new position is within the grid bounds\n            if 0 <= nr < N and 0 <= nc < N:\n                # Add the new cell to the path and push it into the priority queue\n                newPath = path + [grid[nr][nc]]\n                heappush(pq, (newPath, nr, nc))", "prompt_tokens": 436, "completion_tokens": 302, "duration": 14.736644268035889}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # Initialize a list to store the Tribonacci sequence, starting with the base case\n    tribonacci = [1]  # tri(1) = 3, but we'll adjust this value based on the problem statement\n\n    # Loop through numbers from 2 to n + 1 to fill the Tribonacci sequence\n    for i in range(2, n + 2):\n        # Check if the current number is even\n        if i % 2 == 0:\n            # Calculate the value for even numbers and append to the list\n            tribonacci.append(1 + i / 2)\n        else:\n            # Calculate the value for odd numbers based on the recurrence relation\n            # Need to handle the case when i is 2 or 3 to avoid index errors\n            if i == 3:\n                tribonacci.append(tribonacci[i - 2] + 3 + tribonacci[i - 3])  # tri(1) is adjusted to 3 manually\n            else:\n                # For i > 3, calculate the value using the formula and append to the list\n                tribonacci.append(tribonacci[i - 2] + tribonacci[i - 3] + tribonacci[i - 4])\n\n    # Adjust the first value to match the problem statement\n    tribonacci[0] = 3\n\n    return tribonacci", "prompt_tokens": 275, "completion_tokens": 292, "duration": 44.861308574676514}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    # Convert the integer to a string to easily iterate through each digit\n    n_str = str(n)\n    # Initialize the product variable to 1 (since we are multiplying)\n    product = 1\n    # Initialize a variable to keep track if we have found any odd digits\n    found_odd = False\n    # Iterate through each character in the string representation of n\n    for char in n_str:\n        # Convert the character back to an integer\n        digit = int(char)\n        # Check if the digit is odd\n        if digit % 2 != 0:\n            # Multiply the product by the digit\n            product *= digit\n            # Mark that we have found an odd digit\n            found_odd = True\n    # Check if we have found any odd digits\n    if found_odd:\n        # If we have, return the product\n        return product\n    else:\n        # If we haven't found any odd digits, return 0\n        return 0", "prompt_tokens": 111, "completion_tokens": 212, "duration": 10.7962806224823}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    # Initialize a counter for open brackets\n    open_brackets = 0\n    # Initialize a variable to check if there's a nested bracket\n    nested = False\n    \n    # Iterate through each character in the string\n    for char in string:\n        # If the character is an open bracket, increment the open_brackets counter\n        if char == '[':\n            open_brackets += 1\n        # If the character is a close bracket\n        elif char == ']':\n            # If there's at least one open bracket before this, it means we found a nested bracket\n            if open_brackets > 1:\n                nested = True\n            # Decrement the open_brackets counter because we found a matching close bracket\n            if open_brackets > 0:\n                open_brackets -= 1\n    \n    # Return True if there's at least one nested bracket, False otherwise\n    return nested", "prompt_tokens": 173, "completion_tokens": 197, "duration": 20.331258535385132}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    # Import the math module to use the ceil function\n    \n    # Initialize the sum of squares to 0\n    sum_of_squares = 0\n    \n    # Iterate through each element in the list\n    for num in lst:\n        # Round the number to the upper integer\n        rounded_num = math.ceil(num)\n        # Square the rounded number\n        squared_num = rounded_num ** 2\n        # Add the squared number to the sum of squares\n        sum_of_squares += squared_num\n    \n    # Return the sum of squares\n    return sum_of_squares", "prompt_tokens": 197, "completion_tokens": 132, "duration": 7.28911280632019}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty or ends with a space, return False in either case\n    if not txt or txt.endswith(' '):\n        return False\n    # Check if the last character is an alphabetical character\n    return txt[-1].isalpha() and txt[-1] not in txt[:-1].split()", "prompt_tokens": 177, "completion_tokens": 82, "duration": 4.316705703735352}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    # Initialize the largest index to -1 as default when no such element exists\n    largest_index = -1\n    \n    # Loop through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than or equal to the previous element\n        if arr[i] < arr[i-1]:\n            # Update the largest index with the current index\n            largest_index = i\n            \n    # Return the largest index found or -1 if no such element exists\n    return largest_index", "prompt_tokens": 143, "completion_tokens": 124, "duration": 6.904192209243774}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    # Initialize variables to store the largest negative and smallest positive integers\n    largest_negative = None\n    smallest_positive = None\n    \n    # Iterate through each number in the list\n    for num in lst:\n        # Check if the number is negative\n        if num < 0:\n            # If largest_negative is None or num is larger, update largest_negative\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        # Check if the number is positive\n        elif num > 0:\n            # If smallest_positive is None or num is smaller, update smallest_positive\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    # Return the tuple of largest negative and smallest positive integers\n    return (largest_negative, smallest_positive)", "prompt_tokens": 178, "completion_tokens": 177, "duration": 17.02075719833374}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    # Convert inputs to floats, replacing commas with dots if necessary\n    a_float = float(str(a).replace(',', '.'))\n    b_float = float(str(b).replace(',', '.'))\n\n    # Compare the float values\n    if a_float > b_float:\n        # Return a in its original type\n        return a\n    elif b_float > a_float:\n        # Return b in its original type\n        return b\n    else:\n        # Return None if values are equal\n        return None", "prompt_tokens": 181, "completion_tokens": 114, "duration": 10.120688438415527}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    # Check if n is less than the smallest possible sum of 4 even numbers (2+2+2+2=8)\n    if n < 8:\n        return False\n    # Check if n is even, because the sum of even numbers is always even\n    if n % 2 != 0:\n        return False\n    # If n is greater than or equal to 8 and even, it can always be written as the sum of 4 even numbers\n    return True", "prompt_tokens": 117, "completion_tokens": 116, "duration": 7.629967927932739}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    # Initialize the result to 1, as we will multiply the factorials\n    result = 1\n    # Loop from 1 to n (inclusive) to calculate each factorial\n    for i in range(1, n + 1):\n        # Initialize factorial of the current number to 1\n        factorial = 1\n        # Calculate the factorial of the current number\n        for j in range(1, i + 1):\n            factorial *= j\n        # Multiply the current factorial to the result\n        result *= factorial\n    # Return the final result\n    return result", "prompt_tokens": 135, "completion_tokens": 134, "duration": 11.376604795455933}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    # Import the regular expression module\n    import re\n    \n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    \n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    \n    return text", "prompt_tokens": 146, "completion_tokens": 76, "duration": 4.351040601730347}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into two parts: before and after the dot\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a latin alphabet letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed extensions\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Count the number of digits in the name part\n    digit_count = sum(c.isdigit() for c in name)\n    \n    # Check if there are more than three digits\n    if digit_count > 3:\n        return 'No'\n    \n    # If all checks passed, return 'Yes'\n    return 'Yes'", "prompt_tokens": 254, "completion_tokens": 202, "duration": 9.67028522491455}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through the list with both index and value\n    for index, value in enumerate(lst):\n        # Check if the index is a multiple of 3\n        if index % 3 == 0:\n            # Square the value and add it to the total sum\n            total_sum += value ** 2\n        # Check if the index is a multiple of 4 but not a multiple of 3\n        elif index % 4 == 0:\n            # Cube the value and add it to the total sum\n            total_sum += value ** 3\n        else:\n            # If the index is not a multiple of 3 or 4, add the value as it is\n            total_sum += value\n    \n    # Return the total sum\n    return total_sum", "prompt_tokens": 209, "completion_tokens": 188, "duration": 10.268522500991821}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    \"\"\"\n    Given a sentence, return a string containing words of prime length from the original sentence.\n    \"\"\"\n\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words where length is prime\n    prime_length_words = [word for word in words if is_prime(len(word))]\n\n    # Join the filtered words back into a string\n    return ' '.join(prime_length_words)", "prompt_tokens": 187, "completion_tokens": 158, "duration": 12.740647792816162}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    # Split the fractions into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Multiply the numerators and denominators separately\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    \n    # Check if the result is a whole number by seeing if numerator is divisible by denominator\n    return result_num % result_den == 0", "prompt_tokens": 195, "completion_tokens": 110, "duration": 5.281869411468506}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    # Define a function to calculate the sum of digits of a number\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    # Sort the list based on the sum of digits, keeping the original order for similar sums using 'sorted' with a key\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 155, "completion_tokens": 93, "duration": 9.336941242218018}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    # Initialize a counter to keep track of numbers that meet the criteria\n    count = 0\n    \n    # Loop through each number in the input list\n    for num in nums:\n        # Check if the number is greater than 10\n        if num > 10:\n            # Convert the number to a string to easily access first and last digits\n            num_str = str(num)\n            # Check if the first and last digits are odd\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                # If the number meets all criteria, increment the counter\n                count += 1\n                \n    # Return the final count of numbers that meet the criteria\n    return count", "prompt_tokens": 159, "completion_tokens": 165, "duration": 13.802653312683105}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    # Create the array a according to the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Initialize counters for the remainders when elements of a are divided by 3\n    remainder_counts = [0, 0, 0]\n    \n    # Count how many numbers give each remainder when divided by 3\n    for number in a:\n        remainder_counts[number % 3] += 1\n    \n    # Calculate the number of valid triples\n    # A triple is valid if the sum of its elements is a multiple of 3\n    # This can happen in two cases:\n    # 1. All three elements have the same remainder (0, 0, 0), (1, 1, 1), or (2, 2, 2)\n    # 2. The elements have different remainders, one of each (0, 1, 2)\n    valid_triples = 0\n    # Case 1: All elements have the same remainder\n    for r in remainder_counts:\n        if r >= 3:\n            valid_triples += r * (r - 1) * (r - 2) // 6  # Combination formula: nC3 = n! / (3!(n-3)!)\n    \n    # Case 2: Elements have different remainders (0, 1, 2)\n    valid_triples += remainder_counts[0] * remainder_counts[1] * remainder_counts[2]\n    \n    return valid_triples", "prompt_tokens": 205, "completion_tokens": 342, "duration": 26.728770971298218}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    # Define the order of the planets from the closest to the Sun to the farthest\n    planets_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planet1 and planet2 are in the list of planets\n    if planet1 not in planets_order or planet2 not in planets_order:\n        # Return an empty tuple if either planet1 or planet2 is not a valid planet name\n        return ()\n    \n    # Get the indexes of planet1 and planet2 in the planets_order list\n    index1 = planets_order.index(planet1)\n    index2 = planets_order.index(planet2)\n    \n    # Sort the indexes to ensure index1 is always less than index2\n    start_index, end_index = sorted([index1, index2])\n    \n    # Slice the list to get the planets between planet1 and planet2\n    # Add 1 to start_index to exclude planet1 and do not add 1 to end_index to exclude planet2\n    planets_between = planets_order[start_index+1:end_index]\n    \n    # Return the tuple of planets between planet1 and planet2\n    return tuple(planets_between)", "prompt_tokens": 251, "completion_tokens": 275, "duration": 12.341556310653687}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_list", "prompt_tokens": 227, "completion_tokens": 79, "duration": 6.761387586593628}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        # 0 and 1 are not prime numbers\n        if num < 2:\n            return False\n        # Check if num is divisible by any number up to the square root of num\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Use the is_prime function to check if n is prime\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 126, "completion_tokens": 141, "duration": 9.160630464553833}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    # Initialize sum to 0\n    total = 0\n    # Iterate through each number in the list\n    for num in lst:\n        # Check if the number is odd, positive, and an integer\n        if num % 2 != 0 and num > 0 and isinstance(num, int):\n            # Add the square of the number to the total\n            total += num ** 2\n    # Return the total sum\n    return total", "prompt_tokens": 177, "completion_tokens": 106, "duration": 5.62501335144043}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    # Initialize an empty list to store the results\n    results = []\n    # Iterate over the pairs of game results and guesses using zip\n    for game_score, guess_score in zip(game, guess):\n        # Calculate the absolute difference between the game score and the guess\n        difference = abs(game_score - guess_score)\n        # Append the difference to the results list\n        results.append(difference)\n    # Return the results list\n    return results", "prompt_tokens": 270, "completion_tokens": 103, "duration": 11.530079126358032}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    # Initialize variables to keep track of the strongest extension and its strength\n    strongest_extension = \"\"\n    highest_strength = float('-inf')  # Start with the lowest possible value\n    \n    # Loop through each extension in the list\n    for extension in extensions:\n        # Calculate the strength of the current extension\n        # Count uppercase (CAP) and lowercase (SM) letters\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        \n        # Check if the current extension is stronger than the strongest found so far\n        if strength > highest_strength:\n            # Update the strongest extension and its strength\n            strongest_extension = extension\n            highest_strength = strength\n    \n    # Return the class name concatenated with the strongest extension\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 317, "completion_tokens": 196, "duration": 19.705517292022705}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    # Check if the length of b is greater than a, if so, it cannot be a substring or rotation\n    if len(b) > len(a):\n        return False\n    # Double the string a to simulate the cyclic rotation\n    a_doubled = a * 2\n    # Check if b is a substring of the doubled string\n    return b in a_doubled", "prompt_tokens": 169, "completion_tokens": 94, "duration": 5.420646905899048}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    # Convert the number to a positive one to simplify counting\n    num = abs(num)\n    # Initialize counters for even and odd digits\n    even_count, odd_count = 0, 0\n    # Convert the number to a string to iterate through each digit\n    num_str = str(num)\n    # Iterate through each character in the string\n    for char in num_str:\n        # Convert the character back to an integer\n        digit = int(char)\n        # Check if the digit is even\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    # Return a tuple with the counts of even and odd digits\n    return (even_count, odd_count)", "prompt_tokens": 105, "completion_tokens": 165, "duration": 14.752910614013672}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    # Define a list of Roman numerals and their corresponding values\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    # Initialize an empty string to build the Roman numeral\n    result = \"\"\n    # Loop through each numeral and value in the list\n    for value, numeral in roman_numerals:\n        # While the number is greater than or equal to the value\n        while number >= value:\n            # Add the numeral to the result string\n            result += numeral\n            # Subtract the value from the number\n            number -= value\n    # Return the resulting Roman numeral string\n    return result", "prompt_tokens": 141, "completion_tokens": 216, "duration": 10.636791706085205}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    # First, sort the sides to ensure a <= b <= c\n    a, b, c = sorted([a, b, c])\n    \n    # Check if the square of the largest side equals the sum of squares of the other two sides\n    # This is based on the Pythagorean theorem for right-angled triangles\n    return a**2 + b**2 == c**2", "prompt_tokens": 148, "completion_tokens": 97, "duration": 4.021097660064697}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # Initialize a variable to keep track of the word with the maximum number of unique characters\n    max_word = \"\"\n    # Initialize a variable to keep track of the maximum number of unique characters found so far\n    max_unique_chars = 0\n    \n    for word in words:\n        # Use set to find the number of unique characters in the current word\n        unique_chars = len(set(word))\n        # Check if the current word has more unique characters than the max found so far\n        # Or if it has the same number but comes first lexicographically\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            # Update the max_word and max_unique_chars with the current word and its unique character count\n            max_word = word\n            max_unique_chars = unique_chars\n            \n    return max_word", "prompt_tokens": 160, "completion_tokens": 185, "duration": 14.143816232681274}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    # Calculate the total number of carrots that will be eaten after the meal\n    eaten = min(need, remaining)\n    # Update the total number of eaten carrots\n    total_eaten = number + eaten\n    # Calculate the number of carrots left after the meal\n    carrots_left = remaining - eaten\n    # Return the total number of eaten carrots and the number of carrots left\n    return [total_eaten, carrots_left]", "prompt_tokens": 317, "completion_tokens": 102, "duration": 7.841249227523804}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    # Initialize the expression with the first operand\n    expression = str(operand[0])\n    \n    # Loop through the operator list\n    for i, op in enumerate(operator):\n        # Append the operator and the next operand to the expression string\n        expression += ' ' + op + ' ' + str(operand[i + 1])\n    \n    # Evaluate the expression and return the result\n    return eval(expression)", "prompt_tokens": 247, "completion_tokens": 98, "duration": 6.235729217529297}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    # Check if the string contains any letters\n    if not any(c.isalpha() for c in s):\n        # If no letters, reverse the string\n        return s[::-1]\n    else:\n        # Initialize an empty string to store the result\n        result = \"\"\n        # Iterate through each character in the string\n        for char in s:\n            # Check if the character is a letter\n            if char.isalpha():\n                # If it's a letter, reverse its case and add to the result\n                result += char.swapcase()\n            else:\n                # If it's not a letter, keep it as it is and add to the result\n                result += char\n        # Return the result string\n        return result", "prompt_tokens": 147, "completion_tokens": 160, "duration": 7.736513376235962}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    # Check if the text is an empty string\n    if text == \"\":\n        return None\n    else:\n        # Encode the text to bytes\n        text_bytes = text.encode()\n        # Create an md5 hash object\n        hash_object = hashlib.md5(text_bytes)\n        # Get the hexadecimal representation of the digest\n        md5_hash = hash_object.hexdigest()\n        return md5_hash", "prompt_tokens": 116, "completion_tokens": 97, "duration": 5.577387571334839}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    # Ensure a is less than b, if not, swap them\n    if a > b:\n        a, b = b, a\n    \n    # Initialize an empty list to store even numbers\n    even_numbers = []\n    \n    # Loop from a to b (inclusive)\n    for number in range(a, b + 1):\n        # Check if the number is even\n        if number % 2 == 0:\n            # If even, append to the list\n            even_numbers.append(number)\n    \n    # Return the list of even numbers\n    return even_numbers", "prompt_tokens": 144, "completion_tokens": 131, "duration": 10.789911031723022}
