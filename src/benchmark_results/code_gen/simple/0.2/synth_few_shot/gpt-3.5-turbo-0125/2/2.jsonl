{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i-1]) < threshold:\n            return True\n    return False", "prompt_tokens": 432, "completion_tokens": 474, "duration": 12.464513063430786}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = ''\n    balance = 0\n    for char in paren_string:\n        if char == '(': balance += 1\n        elif char == ')': balance -= 1\n        current_group += char\n        if balance == 0:\n            result.append(current_group)\n            current_group = ''\n    return result", "prompt_tokens": 423, "completion_tokens": 633, "duration": 15.798869848251343}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 393, "completion_tokens": 335, "duration": 7.248517274856567}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 427, "completion_tokens": 579, "duration": 15.812334299087524}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 425, "completion_tokens": 588, "duration": 11.988255023956299}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 400, "completion_tokens": 440, "duration": 8.856421709060669}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n    for char in paren_string:\n        if char == '(': current_depth += 1\n        elif char == ')': current_depth -= 1\n        max_depth = max(max_depth, current_depth)\n        if char == ' ': \n            depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    depths.append(max_depth)\n    return depths", "prompt_tokens": 420, "completion_tokens": 741, "duration": 18.781070709228516}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 401, "completion_tokens": 449, "duration": 12.074412822723389}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\nfrom functools import reduce\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)", "prompt_tokens": 418, "completion_tokens": 540, "duration": 14.352275371551514}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    deq = deque()\n    res = []\n    \n    for i, num in enumerate(numbers):\n        if deq and deq[0] == i - len(numbers):\n            deq.popleft()\n        while deq and num > numbers[deq[-1]]:\n            deq.pop()\n        deq.append(i)\n        res.append(numbers[deq[0]])\n    \n    return res", "prompt_tokens": 408, "completion_tokens": 1017, "duration": 19.68476152420044}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 450, "completion_tokens": 758, "duration": 20.293421983718872}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result", "prompt_tokens": 384, "completion_tokens": 442, "duration": 12.809664249420166}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 410, "completion_tokens": 464, "duration": 11.361526250839233}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)", "prompt_tokens": 378, "completion_tokens": 419, "duration": 9.13564395904541}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 367, "completion_tokens": 405, "duration": 8.303716659545898}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 376, "completion_tokens": 350, "duration": 9.690755605697632}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 378, "completion_tokens": 395, "duration": 8.380762100219727}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    music_notes = music_string.split()\n    beats = [note_duration[note] for note in music_notes]\n    return beats", "prompt_tokens": 480, "completion_tokens": 471, "duration": 9.276104927062988}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int: \n    count = 0 \n    for i in range(len(string) - len(substring) + 1): \n        if string[i:i + len(substring)] == substring: \n            count += 1 \n    return count", "prompt_tokens": 396, "completion_tokens": 450, "duration": 9.339356184005737}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 413, "completion_tokens": 468, "duration": 12.061870813369751}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = []\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = [numbers[i], numbers[i+1]]\n    return tuple(result)", "prompt_tokens": 474, "completion_tokens": 734, "duration": 14.317700624465942}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]", "prompt_tokens": 431, "completion_tokens": 442, "duration": 9.071125507354736}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 399, "completion_tokens": 442, "duration": 9.558415412902832}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 351, "completion_tokens": 321, "duration": 8.231645107269287}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 360, "completion_tokens": 487, "duration": 9.403943300247192}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while d * d <= n:\n        if n % d == 0:\n            factors.append(d)\n            n //= d\n        else:\n            d += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 434, "completion_tokens": 678, "duration": 18.756290912628174}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "prompt_tokens": 392, "completion_tokens": 434, "duration": 9.281212329864502}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 356, "completion_tokens": 471, "duration": 13.761840105056763}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 365, "completion_tokens": 401, "duration": 8.489543914794922}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 395, "completion_tokens": 393, "duration": 10.074846029281616}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list) -> list:\n    return [num for num in l if num > 0]", "prompt_tokens": 421, "completion_tokens": 331, "duration": 7.357576370239258}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 407, "completion_tokens": 558, "duration": 16.044212818145752}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list) -> float:\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        raise ValueError('Invalid input')\n    for x in range(-1000, 1000):\n        if poly(xs, x) == 0:\n            return x", "prompt_tokens": 567, "completion_tokens": 532, "duration": 13.17135238647461}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list) -> list:\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in third_indices]\n    sorted_values.sort()\n    for i, val in zip(third_indices, sorted_values):\n        l[i] = val\n    return l", "prompt_tokens": 458, "completion_tokens": 473, "duration": 13.425191640853882}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 381, "completion_tokens": 332, "duration": 6.369641304016113}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    return max(l)", "prompt_tokens": 390, "completion_tokens": 332, "duration": 8.139404773712158}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count", "prompt_tokens": 387, "completion_tokens": 581, "duration": 27.77170443534851}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list) -> list:\n    sorted_even = sorted(l[::2])\n    return [val if i % 2 != 0 else sorted_even[i//2] for i, val in enumerate(l)]", "prompt_tokens": 431, "completion_tokens": 404, "duration": 10.37834882736206}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str):\n    return encode_cyclic(s)", "prompt_tokens": 466, "completion_tokens": 537, "duration": 15.473982095718384}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(fibonacci(num)):\n            count += 1\n    return fibonacci(num)", "prompt_tokens": 405, "completion_tokens": 615, "duration": 11.735719203948975}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 467, "completion_tokens": 881, "duration": 20.670840740203857}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 459, "completion_tokens": 508, "duration": 8.365119457244873}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 640, "completion_tokens": 337, "duration": 8.560609102249146}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 465, "completion_tokens": 658, "duration": 19.271687269210815}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    converted = ''\n    while x > 0:\n        converted = str(x % base) + converted\n        x //= base\n    return converted", "prompt_tokens": 399, "completion_tokens": 565, "duration": 9.548074007034302}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 354, "completion_tokens": 334, "duration": 7.174209356307983}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n <= 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[1] = 0\n    dp[2] = 2\n    dp[3] = 0\n    dp[4] = 0\n    for i in range(5, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "prompt_tokens": 479, "completion_tokens": 666, "duration": 16.174680471420288}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 383, "completion_tokens": 413, "duration": 8.676736116409302}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 379, "completion_tokens": 698, "duration": 13.861884355545044}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int): \n    return mod_exp(2, n, p)", "prompt_tokens": 413, "completion_tokens": 532, "duration": 11.803026676177979}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return ''.join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 398, "completion_tokens": 452, "duration": 24.40998649597168}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 430, "completion_tokens": 527, "duration": 8.937983512878418}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 387, "completion_tokens": 303, "duration": 7.382181167602539}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 361, "completion_tokens": 286, "duration": 7.782259941101074}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 448, "completion_tokens": 419, "duration": 8.318328142166138}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b", "prompt_tokens": 360, "completion_tokens": 584, "duration": 12.973907232284546}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 400, "completion_tokens": 673, "duration": 16.344865322113037}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 395, "completion_tokens": 474, "duration": 12.584299802780151}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(set(l2))))", "prompt_tokens": 422, "completion_tokens": 375, "duration": 9.442173957824707}
{"task_id": "HumanEval/59", "generated_code": "import math\n\ndef largest_prime_factor(n: int) -> int:\n    while True:\n        factor = smallest_prime_factor(n)\n        if factor < n:\n            n //= factor\n        else:\n            return n", "prompt_tokens": 371, "completion_tokens": 607, "duration": 10.277734518051147}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n*(n+1)//2", "prompt_tokens": 402, "completion_tokens": 400, "duration": 6.9548399448394775}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(': stack.append(bracket)\n        elif bracket == ')' and stack and stack[-1] == '(': stack.pop()\n        else: return False\n    return len(stack) == 0", "prompt_tokens": 397, "completion_tokens": 786, "duration": 13.206403255462646}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 416, "completion_tokens": 402, "duration": 8.095378160476685}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    return dp[n]", "prompt_tokens": 457, "completion_tokens": 694, "duration": 19.659499883651733}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouy'\n    count = 0\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if i == len(s) - 1 or char.lower() != 'y':\n                count += 1\n    return count", "prompt_tokens": 434, "completion_tokens": 521, "duration": 9.056762456893921}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shifted_str = x_str[-shift % len(x_str):] + x_str[:-shift % len(x_str)]\n    return shifted_str", "prompt_tokens": 390, "completion_tokens": 540, "duration": 11.611802101135254}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 420, "completion_tokens": 361, "duration": 10.112637281417847}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[3])\n    return n - apples - oranges", "prompt_tokens": 518, "completion_tokens": 444, "duration": 8.349124431610107}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n        elif num % 2 == 0 and num == smallest_even:\n            smallest_index = min(smallest_index, i)\n    if smallest_even == float('inf'):\n        return []\n    return [smallest_even, smallest_index]", "prompt_tokens": 620, "completion_tokens": 434, "duration": 7.956670045852661}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    result = -1\n    for num, frequency in freq.items():\n        if num > frequency and frequency > result:\n            result = frequency\n    return result", "prompt_tokens": 473, "completion_tokens": 555, "duration": 14.518721580505371}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 432, "completion_tokens": 471, "duration": 7.713769435882568}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 429, "completion_tokens": 581, "duration": 14.842620611190796}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 538, "completion_tokens": 346, "duration": 7.250547885894775}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 465, "completion_tokens": 898, "duration": 16.927321434020996}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    return lst1 if total_chars_lst1 < total_chars_lst2 else lst2 if total_chars_lst2 < total_chars_lst1 else lst1", "prompt_tokens": 501, "completion_tokens": 490, "duration": 10.835108995437622}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_multiply_prime(a):\n    factors = prime_factors(a)\n    return len(set(factors)) == 3 if len(factors) == 3 else False", "prompt_tokens": 387, "completion_tokens": 537, "duration": 12.819741010665894}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    return math.log(x, n).is_integer()", "prompt_tokens": 450, "completion_tokens": 392, "duration": 6.490241050720215}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return int(a**(1/3))**3 == a", "prompt_tokens": 418, "completion_tokens": 330, "duration": 6.188949346542358}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 607, "completion_tokens": 538, "duration": 9.587619304656982}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return 'db' + binary + 'db'", "prompt_tokens": 447, "completion_tokens": 396, "duration": 11.885165929794312}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2))", "prompt_tokens": 684, "completion_tokens": 576, "duration": 15.37998104095459}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 578, "completion_tokens": 741, "duration": 20.976752758026123}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    import math\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "prompt_tokens": 389, "completion_tokens": 577, "duration": 11.768020629882812}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n: int) -> int:\n    return count_start_with_one(n) + count_end_with_one(n)", "prompt_tokens": 352, "completion_tokens": 419, "duration": 9.207122564315796}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary = bin(N)[2:]\n    sum_of_digits = sum(int(d) for d in binary)\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 441, "completion_tokens": 401, "duration": 9.794231653213501}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if x % 2 == 0 and i % 2 != 0)", "prompt_tokens": 363, "completion_tokens": 372, "duration": 8.32832670211792}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 438, "completion_tokens": 372, "duration": 7.608247995376587}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in sorted(enumerate(row), key=lambda x: x[1], reverse=True):\n            if val == x:\n                coordinates.append((i, j))\n    return sorted(coordinates)", "prompt_tokens": 567, "completion_tokens": 577, "duration": 14.456706285476685}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    return sorted(array, reverse=(array[0] + array[-1]) % 2 == 0)", "prompt_tokens": 511, "completion_tokens": 398, "duration": 8.287931680679321}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 2 * 2\n            if char.islower():\n                encrypted += chr((shifted - 97) % 26 + 97)\n            else:\n                encrypted += chr((shifted - 65) % 26 + 65)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 418, "completion_tokens": 731, "duration": 16.107420921325684}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]", "prompt_tokens": 432, "completion_tokens": 436, "duration": 10.90632700920105}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S):\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count", "prompt_tokens": 415, "completion_tokens": 371, "duration": 6.295659065246582}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 443, "completion_tokens": 501, "duration": 12.719310998916626}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 417, "completion_tokens": 513, "duration": 10.505449056625366}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_prime_digits(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    max_sum = 0\n    for num in lst:\n        if is_prime(num):\n            digit_sum = sum_of_digits(num)\n            max_sum = max(max_sum, digit_sum)\n    return max_sum", "prompt_tokens": 594, "completion_tokens": 635, "duration": 11.7709801197052}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    return all(key.islower() for key in dict) or all(key.isupper() for key in dict)", "prompt_tokens": 477, "completion_tokens": 383, "duration": 9.616201877593994}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes[:n]", "prompt_tokens": 453, "completion_tokens": 603, "duration": 14.175200462341309}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return abs(a) % 10 * abs(b) % 10", "prompt_tokens": 406, "completion_tokens": 333, "duration": 7.4986183643341064}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 380, "completion_tokens": 462, "duration": 10.517555236816406}
{"task_id": "HumanEval/99", "generated_code": "import math\ndef closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return math.ceil(num) if num % 1 >= 0.5 else math.floor(num)\n    else:\n        return math.floor(num) if abs(num) % 1 >= 0.5 else math.ceil(num)", "prompt_tokens": 789, "completion_tokens": 555, "duration": 13.655850648880005}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    pile = []\n    stones = n\n    for i in range(n):\n        pile.append(stones)\n        if stones % 2 == 0:\n            stones += 1\n        else:\n            stones += 2\n    return pile", "prompt_tokens": 440, "completion_tokens": 485, "duration": 9.489265441894531}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return s.split(', ') if ', ' in s else s.split()", "prompt_tokens": 424, "completion_tokens": 349, "duration": 7.7141640186309814}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 402, "completion_tokens": 503, "duration": 11.123418092727661}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 448, "completion_tokens": 433, "duration": 8.499425172805786}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x): \n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 410, "completion_tokens": 452, "duration": 12.31627106666565}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_name = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_name[num] for num in reversed_arr]", "prompt_tokens": 584, "completion_tokens": 445, "duration": 9.267722368240356}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result", "prompt_tokens": 432, "completion_tokens": 475, "duration": 12.604798555374146}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 519, "completion_tokens": 503, "duration": 12.611171245574951}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return len([num for num in arr if sum(int(digit) for digit in str(abs(num))) > 0])", "prompt_tokens": 432, "completion_tokens": 375, "duration": 10.192099571228027}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_index = arr.index(min(arr))\n    return arr == sorted(arr[min_index:] + arr[:min_index])", "prompt_tokens": 607, "completion_tokens": 551, "duration": 12.891128063201904}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    sum_odd_lst1 = sum(x for x in lst1 if x % 2 != 0)\n    sum_odd_lst2 = sum(x for x in lst2 if x % 2 != 0)\n    return 'YES' if sum_odd_lst1 >= sum_odd_lst2 else 'NO'", "prompt_tokens": 505, "completion_tokens": 675, "duration": 14.922360897064209}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    count = {}\n    for letter in letters:\n        count[letter] = count.get(letter, 0) + 1\n    max_count = max(count.values()) if count else 0\n    return {key: value for key, value in count.items() if value == max_count}", "prompt_tokens": 459, "completion_tokens": 571, "duration": 14.688977718353271}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    filtered_str = ''.join([char for char in s if char not in c])\n    return filtered_str, filtered_str == filtered_str[::-1]", "prompt_tokens": 470, "completion_tokens": 407, "duration": 9.42869520187378}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for digit in s if int(digit) % 2 != 0)\n        result.append(f'the number of odd elements {odd_count}n the str{odd_count}ng {s} of the {s}nput.')\n    return result", "prompt_tokens": 481, "completion_tokens": 444, "duration": 8.593766212463379}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 396, "completion_tokens": 642, "duration": 11.469907999038696}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_lowerings = 0\n    for row in grid:\n        for well in row:\n            if well == 1:\n                total_lowerings += math.ceil(1 / capacity)\n    return total_lowerings", "prompt_tokens": 631, "completion_tokens": 770, "duration": 14.530633211135864}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 478, "completion_tokens": 443, "duration": 9.775521278381348}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in s.split():\n        if sum(1 for char in word if char in consonants) == n:\n            result.append(word)\n    return result", "prompt_tokens": 489, "completion_tokens": 479, "duration": 9.272468090057373}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in consonants and word[i+1] in vowels:\n            return word[i+1]\n    return ''", "prompt_tokens": 457, "completion_tokens": 538, "duration": 13.137034893035889}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(': \n                stack.append(char)\n            else:\n                if stack and stack[-1] == '(': \n                    stack.pop()\n        if not stack:\n            return 'Yes'\n    return 'No'", "prompt_tokens": 476, "completion_tokens": 773, "duration": 13.65523386001587}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 525, "completion_tokens": 378, "duration": 10.48142695426941}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 != 0 and i % 2 == 0)", "prompt_tokens": 405, "completion_tokens": 579, "duration": 15.137200355529785}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if x < 100)", "prompt_tokens": 436, "completion_tokens": 377, "duration": 7.6292643547058105}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    odd_collatz.append(1)\n    return sorted(odd_collatz)", "prompt_tokens": 539, "completion_tokens": 605, "duration": 11.33781361579895}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if '-' not in date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12):\n        return False\n    if not (1 <= int(day) <= 31 and int(month) in [1, 3, 5, 7, 8, 10, 12]):\n        return False\n    if not (1 <= int(day) <= 30 and int(month) in [4, 6, 9, 11]):\n        return False\n    if not (1 <= int(day) <= 29 and int(month) == 2):\n        return False\n    return True", "prompt_tokens": 571, "completion_tokens": 631, "duration": 13.00487732887268}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 448, "completion_tokens": 423, "duration": 8.07305645942688}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 1:\n                return False\n        else:\n            count[num] = 1\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 557, "completion_tokens": 528, "duration": 12.220598697662354}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n): \n    if n <= 1: \n        return False \n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: \n            return False \n    return True \n\n\ndef intersection(interval1, interval2): \n    start = max(interval1[0], interval2[0]) \n    end = min(interval1[1], interval2[1]) \n    if start > end: \n        return 'NO' \n    length = end - start + 1 \n    if is_prime(length): \n        return 'YES' \n    else: \n        return 'NO'", "prompt_tokens": 562, "completion_tokens": 943, "duration": 20.16917324066162}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    total = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        total += abs(num)\n    return total * product", "prompt_tokens": 430, "completion_tokens": 463, "duration": 10.734873294830322}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(row, col, path):\n        if len(path) == k:\n            return path\n        for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < len(grid) and 0 <= new_col < len(grid[0]) and (new_row, new_col) not in visited:\n                visited.add((new_row, new_col))\n                result = dfs(new_row, new_col, path + [grid[new_row][new_col]])\n                if result:\n                    return result\n                visited.remove((new_row, new_col))\n        return None\n    \n    visited = set()\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited.add((i, j))\n            result = dfs(i, j, [grid[i][j]])\n            if result:\n                return result", "prompt_tokens": 1406, "completion_tokens": 1360, "duration": 24.596524953842163}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 1]\n    else:\n        tribonacci = [0, 3, 1]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2])\n            else:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n        return tribonacci", "prompt_tokens": 543, "completion_tokens": 555, "duration": 9.504283428192139}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for d in str(n):\n        if int(d) % 2 != 0:\n            product *= int(d)\n    return product", "prompt_tokens": 379, "completion_tokens": 471, "duration": 10.356962203979492}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n    return not not stack", "prompt_tokens": 441, "completion_tokens": 589, "duration": 16.581129789352417}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 465, "completion_tokens": 426, "duration": 8.399239778518677}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha()):\n        return True\n    return False", "prompt_tokens": 445, "completion_tokens": 386, "duration": 18.63732099533081}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr): \n    for i in range(1, len(arr)): \n        if arr[i] < arr[i-1]: \n            return i-1 \n    return -1", "prompt_tokens": 411, "completion_tokens": 517, "duration": 10.709375381469727}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    max_neg = None\n    min_pos = None\n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    return (max_neg, min_pos)", "prompt_tokens": 446, "completion_tokens": 439, "duration": 10.214898109436035}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n    return max(a, b) if a != b else None", "prompt_tokens": 449, "completion_tokens": 498, "duration": 13.636181831359863}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for k in range(1, n//2 + 1):\n        if (n - 2*k) % 2 == 0:\n            return True\n    return False", "prompt_tokens": 385, "completion_tokens": 563, "duration": 12.868670225143433}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    return n * special_factorial(n-1) * factorial(n)", "prompt_tokens": 403, "completion_tokens": 415, "duration": 10.561059951782227}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(char)\n            consecutive_spaces = 0\n    return ''.join(result)", "prompt_tokens": 414, "completion_tokens": 436, "duration": 9.6824312210083}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha() or len([c for c in name if c.isdigit()]) > 3 or ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 522, "completion_tokens": 515, "duration": 12.580453157424927}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total", "prompt_tokens": 478, "completion_tokens": 475, "duration": 10.839139223098755}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def split_sentence(sentence):\n        return sentence.split()\n\n    prime_words = [word for word in split_sentence(sentence) if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 455, "completion_tokens": 525, "duration": 8.904431343078613}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    return result_num % result_den == 0", "prompt_tokens": 463, "completion_tokens": 660, "duration": 11.771761178970337}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 423, "completion_tokens": 414, "duration": 7.579221248626709}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 427, "completion_tokens": 522, "duration": 12.779183387756348}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n): \n    count = 0 \n    for i in range(1, n + 1): \n        a_i = i * i - i + 1 \n        count += (a_i % 3 == 0) \n    return count", "prompt_tokens": 473, "completion_tokens": 707, "duration": 16.138713598251343}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    return tuple(sorted(planets[start+1:end], key=planets.index))", "prompt_tokens": 519, "completion_tokens": 479, "duration": 9.969297885894775}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    return sorted(filtered_lst, key=lambda x: (len(x), x))", "prompt_tokens": 495, "completion_tokens": 377, "duration": 11.026470422744751}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 394, "completion_tokens": 593, "duration": 14.142270803451538}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 445, "completion_tokens": 425, "duration": 7.504539966583252}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(a - b) if a != b else 0 for a, b in zip(game, guess)]", "prompt_tokens": 538, "completion_tokens": 402, "duration": 12.399511337280273}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n    sorted_extensions = sorted(extensions, key=strength)\n    strongest_extension = sorted_extensions[0]\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 585, "completion_tokens": 632, "duration": 11.423896789550781}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 437, "completion_tokens": 624, "duration": 12.770658254623413}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 373, "completion_tokens": 434, "duration": 12.009507656097412}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',\n        90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    result = ''\n    for value, symbol in roman_map.items():\n        while number >= value:\n            result += symbol\n            number -= value\n    return result", "prompt_tokens": 409, "completion_tokens": 750, "duration": 13.264708042144775}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[2] ** 2 == sides[0] ** 2 + sides[1] ** 2", "prompt_tokens": 416, "completion_tokens": 479, "duration": 12.735129356384277}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word", "prompt_tokens": 428, "completion_tokens": 627, "duration": 14.068877696990967}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 585, "completion_tokens": 394, "duration": 10.07031798362732}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 515, "completion_tokens": 742, "duration": 14.760533094406128}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s[::-1])", "prompt_tokens": 415, "completion_tokens": 434, "duration": 9.086153984069824}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "prompt_tokens": 384, "completion_tokens": 428, "duration": 9.54102087020874}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 412, "completion_tokens": 398, "duration": 9.479016542434692}
