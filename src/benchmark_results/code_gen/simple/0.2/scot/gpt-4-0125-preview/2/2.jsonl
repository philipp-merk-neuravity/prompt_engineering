{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 639, "completion_tokens": 221, "duration": 8.825454950332642}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_braces_count += 1\n        elif char == ')':\n            open_braces_count -= 1\n        if char in '()':\n            current_group += char\n        if open_braces_count == 0 and current_group:\n            groups.append(current_group)\n            current_group = \"\"\n    \n    return groups", "prompt_tokens": 644, "completion_tokens": 273, "duration": 10.590784311294556}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)", "prompt_tokens": 500, "completion_tokens": 144, "duration": 8.149369239807129}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 557, "completion_tokens": 111, "duration": 9.49799919128418}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 647, "completion_tokens": 267, "duration": 10.969888925552368}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 525, "completion_tokens": 145, "duration": 10.004395484924316}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 683, "completion_tokens": 306, "duration": 11.094438076019287}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 122, "duration": 6.639166593551636}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return (sum_, product)", "prompt_tokens": 549, "completion_tokens": 144, "duration": 12.376621961593628}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\nfrom collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    max_queue = deque()\n    \n    for number in numbers:\n        while max_queue and max_queue[-1] < number:\n            max_queue.pop()\n        \n        max_queue.append(number)\n        rolling_max_list.append(max_queue[0])\n        \n        if max_queue[0] == rolling_max_list[-2]:\n            max_queue.popleft()\n    \n    return rolling_max_list", "prompt_tokens": 559, "completion_tokens": 206, "duration": 9.189888000488281}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]\n    return string", "prompt_tokens": 628, "completion_tokens": 239, "duration": 15.183732271194458}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 510, "completion_tokens": 155, "duration": 9.88843035697937}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string", "prompt_tokens": 546, "completion_tokens": 150, "duration": 10.924391269683838}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 449, "completion_tokens": 143, "duration": 8.899227380752563}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "prompt_tokens": 469, "completion_tokens": 141, "duration": 8.58066439628601}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 450, "completion_tokens": 102, "duration": 6.973929166793823}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 485, "completion_tokens": 131, "duration": 7.147028923034668}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 727, "completion_tokens": 210, "duration": 12.81179165840149}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 143, "duration": 6.827523231506348}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    numeral_to_number = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    words = numbers.split()\n    sorted_numerals = sorted(words, key=lambda word: numeral_to_number[word])\n    return ' '.join(sorted_numerals)", "prompt_tokens": 590, "completion_tokens": 235, "duration": 9.347736120223999}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    return closest_pair", "prompt_tokens": 721, "completion_tokens": 227, "duration": 11.39982795715332}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(number - min_value) / range_value for number in numbers]\n    return rescaled_numbers", "prompt_tokens": 621, "completion_tokens": 187, "duration": 12.8009774684906}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = [value for value in values if isinstance(value, int)]\n    return integers", "prompt_tokens": 498, "completion_tokens": 163, "duration": 9.371030330657959}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for _ in string:\n        length += 1\n    return length", "prompt_tokens": 401, "completion_tokens": 89, "duration": 6.1378493309021}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 438, "completion_tokens": 150, "duration": 8.38317584991455}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 611, "completion_tokens": 170, "duration": 11.141931295394897}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    result = []\n    count_dict = {}\n    \n    for number in numbers:\n        if number not in count_dict:\n            count_dict[number] = 1\n        else:\n            count_dict[number] += 1\n    \n    for number in numbers:\n        if count_dict[number] == 1:\n            result.append(number)\n    \n    return result", "prompt_tokens": 532, "completion_tokens": 227, "duration": 9.573362588882446}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for character in string:\n        if character.islower():\n            flipped_string += character.upper()\n        elif character.isupper():\n            flipped_string += character.lower()\n        else:\n            flipped_string += character\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 141, "duration": 9.071425199508667}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 425, "completion_tokens": 91, "duration": 6.923018932342529}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 128, "duration": 6.3547797203063965}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positive_nums = [num for num in l if num > 0]\n    return positive_nums", "prompt_tokens": 538, "completion_tokens": 183, "duration": 7.893948316574097}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 518, "completion_tokens": 130, "duration": 8.315994262695312}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 == 0 and xs[-1] != 0:\n        for x in range(-100, 101):\n            if abs(poly(xs, x)) < 1e-6:\n                return x\n    return None", "prompt_tokens": 925, "completion_tokens": 365, "duration": 11.69495177268982}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    temp = [l[i] for i in range(len(l)) if (i + 1) % 3 == 0]\n    temp.sort()\n    result = []\n    temp_index = 0\n    for i in range(len(l)):\n        if (i + 1) % 3 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(l[i])\n    return result", "prompt_tokens": 719, "completion_tokens": 330, "duration": 21.397154569625854}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n    for ele in l:\n        if ele not in unique_list:\n            unique_list.append(ele)\n    unique_list.sort()\n    return unique_list", "prompt_tokens": 482, "completion_tokens": 181, "duration": 10.86446475982666}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 496, "completion_tokens": 128, "duration": 7.3333117961883545}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 165, "duration": 8.224464654922485}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list) -> list:\n    \"\"\"Sorts elements at even indices while keeping odd indices elements in place.\"\"\"\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_indices_values[even_index]\n            even_index += 1\n    return l", "prompt_tokens": 620, "completion_tokens": 218, "duration": 15.278190612792969}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group in reverse. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 748, "completion_tokens": 310, "duration": 10.428306579589844}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num: int, fib_list: list) -> bool:\n        while fib_list[-1] < num:\n            fib_list.append(fib_list[-1] + fib_list[-2])\n        return num in fib_list\n\n    fib_list = [0, 1]\n    count = 0\n    num = 1\n\n    while count < n:\n        if is_prime(num) and is_fibonacci(num, fib_list):\n            count += 1\n            if count == n:\n                return num\n        num += 1", "prompt_tokens": 546, "completion_tokens": 281, "duration": 12.440260648727417}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left, right = i+1, n-1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 728, "completion_tokens": 254, "duration": 14.988725662231445}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of n cars driving towards each other.\n    \"\"\"\n    return n", "prompt_tokens": 638, "completion_tokens": 115, "duration": 7.654007196426392}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    return [num + 1 for num in l]", "prompt_tokens": 533, "completion_tokens": 82, "duration": 7.263796806335449}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        complement = -num\n        if complement in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 668, "completion_tokens": 143, "duration": 7.234883785247803}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result", "prompt_tokens": 537, "completion_tokens": 145, "duration": 8.292976140975952}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 394, "completion_tokens": 96, "duration": 6.830767393112183}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n + 1):\n        next_fib4 = fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4]\n        fib4_list.append(next_fib4)\n    return fib4_list[n]", "prompt_tokens": 722, "completion_tokens": 232, "duration": 12.970893621444702}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) / 2", "prompt_tokens": 486, "completion_tokens": 201, "duration": 9.4497389793396}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    reversed_text = text[::-1]\n    return reversed_text == text", "prompt_tokens": 503, "completion_tokens": 131, "duration": 7.985162973403931}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p.\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 500, "completion_tokens": 66, "duration": 7.490101337432861}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 526, "completion_tokens": 151, "duration": 8.596937417984009}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    result = ''.join(ch for ch in text if ch not in 'aeiouAEIOU')\n    return result", "prompt_tokens": 592, "completion_tokens": 144, "duration": 5.664384126663208}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 472, "completion_tokens": 153, "duration": 8.859755039215088}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 398, "completion_tokens": 54, "duration": 7.765140771865845}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    if len(s0) != len(s1):\n        return False\n    from collections import Counter\n    return Counter(s0) == Counter(s1)", "prompt_tokens": 696, "completion_tokens": 207, "duration": 8.770474195480347}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    i = 2\n\n    while i <= n:\n        temp = a + b\n        a = b\n        b = temp\n        i += 1\n\n    return b", "prompt_tokens": 480, "completion_tokens": 210, "duration": 10.699856042861938}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 556, "completion_tokens": 173, "duration": 13.30886459350586}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            is_increasing = False\n        if l[i] > l[i-1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing", "prompt_tokens": 541, "completion_tokens": 274, "duration": 13.38063907623291}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    common_elements = list(set(l1) & set(l2))\n    common_elements.sort()\n    return common_elements", "prompt_tokens": 578, "completion_tokens": 143, "duration": 6.975183486938477}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n = n // factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 491, "completion_tokens": 178, "duration": 7.5156660079956055}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))", "prompt_tokens": 492, "completion_tokens": 149, "duration": 11.068305015563965}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack", "prompt_tokens": 536, "completion_tokens": 162, "duration": 5.93311619758606}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 559, "completion_tokens": 113, "duration": 7.055805921554565}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n + 1):\n        next_fibfib = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(next_fibfib)\n\n    return fibfib_list[n]", "prompt_tokens": 685, "completion_tokens": 250, "duration": 12.174047708511353}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"Returns the number of vowels in the string. 'y' is considered a vowel if it is at the end of the word.\"\"\"\n    count = 0\n    s = s.lower()\n    for i, c in enumerate(s):\n        if c in 'aeiou' or (c == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 606, "completion_tokens": 186, "duration": 12.922475814819336}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    num_str = str(x)\n    num_len = len(num_str)\n    effective_shift = shift % num_len if num_len else 0\n    if effective_shift == 0:\n        return num_str[::-1] if shift > 0 else num_str\n    shifted_num = num_str[-effective_shift:] + num_str[:-effective_shift]\n    return shifted_num", "prompt_tokens": 554, "completion_tokens": 257, "duration": 11.028759479522705}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 82, "duration": 3.637274742126465}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 880, "completion_tokens": 247, "duration": 10.440694570541382}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = None\n    smallest_index = None\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and (smallest_value is None or node < smallest_value):\n            smallest_value = node\n            smallest_index = i\n    if smallest_value is not None:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1013, "completion_tokens": 217, "duration": 12.824066638946533}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    '''\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n    \n    greatest_int = -1\n    for num, freq in freq_map.items():\n        if freq >= num and num > greatest_int:\n            greatest_int = num\n    \n    return greatest_int", "prompt_tokens": 715, "completion_tokens": 285, "duration": 12.288649559020996}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result", "prompt_tokens": 619, "completion_tokens": 156, "duration": 7.049999952316284}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 239, "duration": 11.456475257873535}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    # Check if q is a palindromic list\n    if q != q[::-1]:\n        return False\n    # Calculate the sum of elements in q and check if it's less than or equal to w\n    return sum(q) <= w", "prompt_tokens": 938, "completion_tokens": 284, "duration": 10.028646469116211}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    min_changes = 0\n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    return min_changes", "prompt_tokens": 713, "completion_tokens": 208, "duration": 9.118605852127075}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has total number of chars in\n    all strings of the list less than the other list. If the two lists have the same number\n    of chars, return the first list.\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 760, "completion_tokens": 236, "duration": 6.811622142791748}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    count = 0\n    primes = []\n    for i in range(2, a + 1):\n        if a % i == 0:\n            is_prime = True\n            for j in range(2, i):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(i)\n                count += 1\n    return count == 3", "prompt_tokens": 595, "completion_tokens": 275, "duration": 14.53296184539795}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    \"\"\"Returns true if x is a simple power of n, false otherwise.\"\"\"\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False", "prompt_tokens": 614, "completion_tokens": 128, "duration": 5.355281114578247}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    '''\n    cube_root = abs(a) ** (1/3)\n    return round(cube_root) ** 3 == abs(a)", "prompt_tokens": 578, "completion_tokens": 162, "duration": 9.011969089508057}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    return sum(c in '2357BD' for c in num)", "prompt_tokens": 927, "completion_tokens": 92, "duration": 6.639299392700195}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"  # Initialize the binary string with \"db\" at the beginning\n    if decimal == 0:\n        return \"db0db\"\n    while decimal > 0:\n        remainder = decimal % 2  # Get the remainder when dividing by 2\n        binary_str = str(remainder) + binary_str  # Add the remainder to the beginning of the binary string\n        decimal = decimal // 2  # Update the decimal number by integer division\n    binary_str = binary_str + \"db\"  # Add \"db\" at the end of the binary string\n    return binary_str", "prompt_tokens": 675, "completion_tokens": 276, "duration": 10.288442134857178}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 598, "completion_tokens": 171, "duration": 7.515560150146484}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 549, "duration": 21.840903282165527}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    n = len(string)\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n    return True", "prompt_tokens": 549, "completion_tokens": 232, "duration": 13.488415002822876}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)\n        else:\n            count += 2 * 10 ** (n - 2)\n\n    return count", "prompt_tokens": 429, "completion_tokens": 180, "duration": 10.827868223190308}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    # Step 1: Initialize sum\n    sum_digits = 0\n    \n    # Step 2: Convert N to a string and iterate through each digit\n    for digit in str(N):\n        sum_digits += int(digit)\n    \n    # Step 3: Convert sum to binary representation\n    binary_sum = bin(sum_digits)[2:]\n    \n    # Step 4: Return the binary representation of sum as binary_sum\n    return binary_sum", "prompt_tokens": 603, "completion_tokens": 195, "duration": 8.66740345954895}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 448, "completion_tokens": 157, "duration": 9.581148862838745}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Reorders each word in the string such that the characters are in ascending ASCII order.\n    \"\"\"\n    import re\n    words = re.findall(r'\\S+|\\s+', s)  # Split string into words and spaces\n    ordered_words = [''.join(sorted(word)) if word.strip() != '' else word for word in words]\n    return ''.join(ordered_words)", "prompt_tokens": 627, "completion_tokens": 195, "duration": 10.097882747650146}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, element in enumerate(row):\n            if element == x:\n                result.append((i, j))\n    result.sort(key=lambda k: (k[0], -k[1]))\n    return result", "prompt_tokens": 929, "completion_tokens": 218, "duration": 8.480014562606812}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \"\"\"\n    if not array:  # Check if the array is empty\n        return array\n    if (array[0] + array[-1]) % 2 == 0:  # Check if the sum of the first and last elements is even\n        return sorted(array, reverse=True)  # Sort in descending order\n    else:\n        return sorted(array)  # Sort in ascending order", "prompt_tokens": 759, "completion_tokens": 254, "duration": 11.668638467788696}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    \"\"\"Encrypts a string by rotating the alphabet by 2*2 places.\"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 218, "duration": 9.4837965965271}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest, second_smallest = float('inf'), float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest, smallest = smallest, num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n    return None if second_smallest == float('inf') else second_smallest", "prompt_tokens": 642, "completion_tokens": 228, "duration": 10.097922325134277}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    import re\n    sentences = re.split(r'[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 541, "completion_tokens": 175, "duration": 10.762645959854126}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return all(isinstance(i, int) for i in [x, y, z]) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 643, "completion_tokens": 164, "duration": 9.538825511932373}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping case of all letters and replacing all vowels with the letter that appears 2 places ahead of that vowel in the English alphabet.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    vowel_replacement = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 's', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'S'}\n    encoded_message = ''\n    for ch in message:\n        if ch.isalpha():\n            if ch in vowels:\n                encoded_message += vowel_replacement[ch]\n            else:\n                encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 627, "completion_tokens": 324, "duration": 13.829674005508423}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_digits_of_largest_prime(lst):\n    largest_prime = 0\n    for num in lst:\n        if num > 1:\n            is_prime = True\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime and num > largest_prime:\n                largest_prime = num\n\n    sum_digits = 0\n    if largest_prime > 0:\n        while largest_prime > 0:\n            sum_digits += largest_prime % 10\n            largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 983, "completion_tokens": 288, "duration": 17.731824159622192}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    is_lower = False\n    is_upper = False\n    for key in dict:\n        if isinstance(key, str):\n            if key.islower():\n                is_lower = True\n            elif key.isupper():\n                is_upper = True\n            else:\n                return False\n        else:\n            return False\n    return is_lower != is_upper", "prompt_tokens": 744, "completion_tokens": 236, "duration": 10.052542448043823}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 635, "completion_tokens": 165, "duration": 7.135078191757202}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 533, "completion_tokens": 126, "duration": 6.985022068023682}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 140, "duration": 8.632391452789307}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    floor_num = int(num)\n    if num - floor_num >= 0.5:\n        return floor_num + 1 if num > 0 else floor_num - 1\n    else:\n        return floor_num", "prompt_tokens": 681, "completion_tokens": 217, "duration": 9.714699268341064}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n    for i in range(n):\n        stones_list.append(stones)\n        if n % 2 == 0:\n            stones += 2\n        else:\n            stones += 2\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 143, "duration": 9.252595901489258}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Splits the string into words and returns an array of the words.\n    \"\"\"\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in [',', ' ']:\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 616, "completion_tokens": 214, "duration": 13.036965131759644}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    max_even = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even", "prompt_tokens": 556, "completion_tokens": 214, "duration": 8.332074880599976}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n, m+1):\n            sum += i\n        count = m - n + 1\n        avg = round(sum / count)\n        binary_avg = bin(avg)\n        return binary_avg", "prompt_tokens": 631, "completion_tokens": 167, "duration": 8.26380443572998}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    result = []\n    for num in x:\n        if all(ch in '13579' for ch in str(num)):\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 591, "completion_tokens": 210, "duration": 8.459023475646973}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    filtered_arr.sort(reverse=True)\n    return [digit_names[x] for x in filtered_arr]", "prompt_tokens": 966, "completion_tokens": 334, "duration": 18.13646364212036}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "prompt_tokens": 600, "completion_tokens": 194, "duration": 8.634217500686646}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 199, "duration": 9.39319372177124}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 261, "duration": 14.658663034439087}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted(arr):\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 978, "completion_tokens": 179, "duration": 8.802124261856079}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    \"\"\"Determine if it's possible to exchange elements between two lists to make the first list all even numbers.\"\"\"\n    count_odd = sum(num % 2 != 0 for num in lst1)  # Count odd numbers in lst1\n    count_even_lst2 = sum(num % 2 == 0 for num in lst2)  # Count even numbers in lst2\n    \n    # If there are enough even numbers in lst2 to replace all odd numbers in lst1\n    if count_odd <= count_even_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 759, "completion_tokens": 239, "duration": 9.711825370788574}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    result_dict = {}\n    max_count = 0\n    for letter in letters:\n        if letter in result_dict:\n            result_dict[letter] += 1\n        else:\n            result_dict[letter] = 1\n        if result_dict[letter] > max_count:\n            max_count = result_dict[letter]\n    max_dict = {letter: count for letter, count in result_dict.items() if count == max_count}\n    return max_dict", "prompt_tokens": 739, "completion_tokens": 286, "duration": 14.088857650756836}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "prompt_tokens": 736, "completion_tokens": 199, "duration": 8.075916290283203}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"\n    result_lst = []\n    for s in lst:\n        count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        result_lst.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result_lst", "prompt_tokens": 732, "completion_tokens": 280, "duration": 11.79011607170105}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = nums[0]\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 507, "completion_tokens": 157, "duration": 9.112603902816772}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    times = math.ceil(total_water / capacity)\n    return times", "prompt_tokens": 1024, "completion_tokens": 159, "duration": 8.248932361602783}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers according to the number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    def count_ones(num):\n        \"\"\"Counts the number of ones in the binary representation of a number.\"\"\"\n        return bin(num).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 716, "completion_tokens": 214, "duration": 8.61808967590332}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\"\"\"\n    words = []\n    if not s:\n        return words\n\n    def is_consonant(char):\n        return char.lower() in \"bcdfghjklmnpqrstvwxyz\"\n\n    for word in s.split():\n        consonant_count = sum(is_consonant(char) for char in word)\n        if consonant_count == n:\n            words.append(word)\n\n    return words", "prompt_tokens": 751, "completion_tokens": 259, "duration": 12.052029848098755}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    last_consonant_index = -1\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels:\n            last_consonant_index = i\n        elif word[i] in vowels and last_consonant_index != -1:\n            closest_vowel = word[i]\n            break\n    return closest_vowel", "prompt_tokens": 725, "completion_tokens": 297, "duration": 10.429646968841553}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    Input: lst: a list of two strings\n    Output: result: 'Yes' or 'No'\n    '''\n    # Check if concatenating in both orders can create a good string\n    for order in [lst, lst[::-1]]:\n        stack = []\n        for s in order:\n            for char in s:\n                if char == '(':\n                    stack.append(char)\n                elif char == ')' and stack:\n                    stack.pop()\n                else:\n                    break\n            else:\n                continue\n            break\n        else:\n            if not stack:\n                return 'Yes'\n    return 'No'", "prompt_tokens": 772, "completion_tokens": 312, "duration": 11.284138679504395}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k][::-1]", "prompt_tokens": 776, "completion_tokens": 139, "duration": 8.701770544052124}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 529, "completion_tokens": 137, "duration": 6.363556623458862}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n    return sum", "prompt_tokens": 611, "completion_tokens": 179, "duration": 8.073280811309814}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n    odd_collatz_list.append(1)\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 229, "duration": 7.915239334106445}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date or len(date.split(\"-\")) != 3:\n        return False\n    month, day, year = date.split(\"-\")\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    return True", "prompt_tokens": 1024, "completion_tokens": 420, "duration": 33.74740529060364}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((ord(c) - ord('a')) % 2 == 0 for c in txt if c.islower())", "prompt_tokens": 752, "completion_tokens": 273, "duration": 11.61011290550232}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicate_count = 0\n    for num in lst:\n        if prev is not None and num < prev:\n            return False\n        if prev == num:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                return False\n        else:\n            duplicate_count = 0\n        prev = num\n    return True", "prompt_tokens": 925, "completion_tokens": 253, "duration": 8.25556993484497}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n\n    if max_start > min_end:\n        return \"NO\"\n\n    length = min_end - max_start + 1\n\n    return \"YES\" if is_prime(length) else \"NO\"", "prompt_tokens": 983, "completion_tokens": 349, "duration": 14.002128601074219}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    product_signs = 1\n    for num in arr:\n        sum_magnitudes += abs(num)\n        product_signs *= (1 if num > 0 else -1 if num < 0 else 0)\n    return sum_magnitudes * product_signs", "prompt_tokens": 649, "completion_tokens": 231, "duration": 18.605005264282227}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    \n    def isValid(row, col):\n        return 0 <= row < N and 0 <= col < N\n    \n    pq = []\n    for i in range(N):\n        for j in range(N):\n            heappush(pq, (grid[i][j], i, j, [grid[i][j]]))\n    \n    while pq:\n        value, row, col, path = heappop(pq)\n        if len(path) == k:\n            return path\n        for dr, dc in directions:\n            newRow, newCol = row + dr, col + dc\n            if isValid(newRow, newCol) and len(path) < k:\n                newPath = path + [grid[newRow][newCol]]\n                heappush(pq, (newPath[len(path)], newRow, newCol, newPath))", "prompt_tokens": 1366, "completion_tokens": 538, "duration": 18.04009461402893}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    seq = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            seq.append(1 + i // 2)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + seq[i - 3])\n    return seq", "prompt_tokens": 902, "completion_tokens": 282, "duration": 15.461629390716553}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n != 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            has_odd = True\n            product *= digit\n        n //= 10\n\n    if not has_odd:\n        return 0\n    else:\n        return product", "prompt_tokens": 484, "completion_tokens": 222, "duration": 11.907638788223267}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0", "prompt_tokens": 658, "completion_tokens": 190, "duration": 8.959899663925171}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 643, "completion_tokens": 94, "duration": 10.943096160888672}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_alphabetical = False\n    if txt:\n        last_char = txt[-1]\n        if last_char.isalpha():\n            if len(txt) == 1 or txt[-2].isspace():\n                is_last_char_alphabetical = True\n    return is_last_char_alphabetical", "prompt_tokens": 659, "completion_tokens": 201, "duration": 10.900370836257935}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 539, "completion_tokens": 213, "duration": 11.091753005981445}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n\n    largest_neg = None\n    smallest_pos = None\n\n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        if num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n\n    return (largest_neg, smallest_pos)", "prompt_tokens": 664, "completion_tokens": 230, "duration": 8.676809787750244}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str):\n        a_converted = float(a.replace(',', '.'))\n        b_converted = float(b.replace(',', '.'))\n        if a_converted > b_converted:\n            return a\n        elif b_converted > a_converted:\n            return b\n        else:\n            return None", "prompt_tokens": 749, "completion_tokens": 331, "duration": 17.19668436050415}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8, any number less than 8 cannot be written as such a sum\n    if n < 8:\n        return False\n    # For any n >= 8, it can be written as the sum of 2, 2, 2, and n-6 if n-6 is even\n    return (n - 6) % 2 == 0", "prompt_tokens": 542, "completion_tokens": 262, "duration": 15.433866500854492}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n    \"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        temp = 1\n        for j in range(i, 0, -1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 512, "completion_tokens": 169, "duration": 9.406506538391113}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    modified_text = \"\"\n    count = 0\n    for i, ch in enumerate(text):\n        if ch == \" \":\n            count += 1\n        else:\n            if count > 2:\n                modified_text += \"-\"\n            else:\n                modified_text += \"_\" * count\n            count = 0\n            modified_text += ch\n    if count > 2:\n        modified_text += \"-\"\n    else:\n        modified_text += \"_\" * count\n    return modified_text", "prompt_tokens": 625, "completion_tokens": 260, "duration": 13.843729972839355}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Count the number of digits in file_name\n    digit_count = sum(c.isdigit() for c in file_name)\n    # Check if the count of digits is not more than 3\n    if digit_count > 3:\n        return 'No'\n    # Check if there is exactly one dot in the file_name\n    if file_name.count('.') != 1:\n        return 'No'\n    # Extract the substring before the dot and after the dot\n    name_part, extension = file_name.split('.')\n    # Check if the substring before the dot is not empty and starts with a letter\n    if not name_part or not name_part[0].isalpha():\n        return 'No'\n    # Check if the substring after the dot is either 'txt', 'exe', or 'dll'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    # If all conditions are met, set result to 'Yes'\n    return 'Yes'", "prompt_tokens": 854, "completion_tokens": 378, "duration": 21.776413917541504}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum", "prompt_tokens": 698, "completion_tokens": 179, "duration": 10.055872917175293}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 699, "completion_tokens": 251, "duration": 11.564871788024902}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    return product_num % product_den == 0", "prompt_tokens": 646, "completion_tokens": 144, "duration": 7.305956125259399}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    sum_list = [(sum(int(digit) for digit in str(abs(num))), i, num) for i, num in enumerate(nums)]\n    sum_list.sort()\n    sorted_nums = [num for _, _, num in sum_list]\n    return sorted_nums", "prompt_tokens": 671, "completion_tokens": 298, "duration": 13.406022548675537}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "prompt_tokens": 605, "completion_tokens": 195, "duration": 9.56517767906189}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 245, "duration": 11.507215023040771}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "prompt_tokens": 857, "completion_tokens": 296, "duration": 14.48777151107788}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    \"\"\"Sorts the list by removing odd length strings and sorting by length and alphabetically.\"\"\"\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(filtered_lst, key=lambda x: (len(x), x))", "prompt_tokens": 735, "completion_tokens": 166, "duration": 7.737663745880127}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 150, "duration": 11.540863752365112}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(num**2 for num in lst if isinstance(num, int) and num > 0 and num % 2 != 0)", "prompt_tokens": 622, "completion_tokens": 127, "duration": 8.435108661651611}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 810, "completion_tokens": 128, "duration": 8.609015226364136}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension", "prompt_tokens": 941, "completion_tokens": 226, "duration": 13.185738563537598}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    a = a + a\n    for i in range(n):\n        if a[i:i+m] == b:\n            return True\n        for j in range(1, m):\n            if a[i:i+j] + a[i+m-j:i+m] == b:\n                return True\n    return False", "prompt_tokens": 645, "completion_tokens": 224, "duration": 10.851794958114624}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 12.628093719482422}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = \"\"\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n    return roman_numeral", "prompt_tokens": 580, "completion_tokens": 297, "duration": 20.746474981307983}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n    if a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared:\n        return True\n    else:\n        return False", "prompt_tokens": 608, "completion_tokens": 209, "duration": 12.182994365692139}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars or (len(unique_chars) == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = len(unique_chars)\n\n    return max_word", "prompt_tokens": 591, "completion_tokens": 228, "duration": 11.614435911178589}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Returns the total number of eaten carrots after meals and the number of carrots left.\n    \"\"\"\n    if remaining >= need:\n        total_eaten = number + need\n        remaining -= need\n    else:\n        total_eaten = number + remaining\n        remaining = 0\n    return [total_eaten, remaining]", "prompt_tokens": 925, "completion_tokens": 191, "duration": 10.813408374786377}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i + 1]\n        elif op == '-':\n            result -= operand[i + 1]\n        elif op == '*':\n            result *= operand[i + 1]\n        elif op == '//':\n            result //= operand[i + 1]\n        elif op == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 844, "completion_tokens": 333, "duration": 14.060497045516968}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(c.isalpha() for c in result):\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 191, "duration": 11.578500270843506}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n\n    import hashlib\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 128, "duration": 10.261638164520264}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits = []\n    start, end = sorted([a, b])\n    for num in range(start, end + 1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits", "prompt_tokens": 583, "completion_tokens": 204, "duration": 10.816643476486206}
