{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    result = False\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            result = True\n            break\n    return result", "prompt_tokens": 642, "completion_tokens": 207, "duration": 5.665321588516235}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n\n    for c in paren_string:\n        if c == '(':\n            open_braces_count += 1\n        elif c == ')':\n            open_braces_count -= 1\n        current_group += c\n\n        if open_braces_count == 0 and current_group.strip() != \"\":\n            groups.append(current_group.replace(\" \", \"\"))\n            current_group = \"\"\n\n    return groups", "prompt_tokens": 644, "completion_tokens": 271, "duration": 9.789685010910034}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 9.020794868469238}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 585, "completion_tokens": 139, "duration": 6.026045083999634}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 647, "completion_tokens": 206, "duration": 9.182375431060791}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 535, "completion_tokens": 154, "duration": 7.708538770675659}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 681, "completion_tokens": 306, "duration": 8.170959234237671}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 106, "duration": 5.025102615356445}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 149, "duration": 6.145175218582153}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for num in numbers:\n        if not rolling_max_list or num >= rolling_max_list[-1]:\n            rolling_max_list.append(num)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list", "prompt_tokens": 592, "completion_tokens": 208, "duration": 7.533187627792358}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 643, "completion_tokens": 122, "duration": 5.543163061141968}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 508, "completion_tokens": 153, "duration": 8.076250553131104}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    \n    return longest_str", "prompt_tokens": 540, "completion_tokens": 142, "duration": 9.467746496200562}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 94, "duration": 5.52705192565918}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes", "prompt_tokens": 459, "completion_tokens": 127, "duration": 5.494843482971191}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 458, "completion_tokens": 104, "duration": 5.402480125427246}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for ch in string:\n        if ch not in distinct_chars:\n            distinct_chars.add(ch)\n    return len(distinct_chars)", "prompt_tokens": 485, "completion_tokens": 139, "duration": 6.000420808792114}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    \n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    \n    return beats_list", "prompt_tokens": 721, "completion_tokens": 206, "duration": 7.265629529953003}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 515, "completion_tokens": 143, "duration": 6.005831718444824}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    sorted_numerals = sorted(numeral_list, key=lambda x: numeral_dict[x])\n    return ' '.join(sorted_numerals)", "prompt_tokens": 586, "completion_tokens": 232, "duration": 7.403364419937134}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 721, "completion_tokens": 229, "duration": 8.872353553771973}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(num - min_value) / range_value for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 621, "completion_tokens": 187, "duration": 6.272783279418945}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers", "prompt_tokens": 494, "completion_tokens": 101, "duration": 5.605172872543335}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 400, "completion_tokens": 88, "duration": 6.68547797203064}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 424, "completion_tokens": 113, "duration": 5.324260950088501}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 611, "completion_tokens": 168, "duration": 6.621398687362671}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n\n    return result", "prompt_tokens": 491, "completion_tokens": 119, "duration": 7.291120529174805}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 136, "duration": 5.90652060508728}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 427, "completion_tokens": 93, "duration": 4.29253625869751}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [s for s in strings if s.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 4.9562153816223145}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums", "prompt_tokens": 540, "completion_tokens": 93, "duration": 4.485013961791992}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True", "prompt_tokens": 548, "completion_tokens": 174, "duration": 6.309652090072632}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        return None\n    \n    zero_point = None\n    tolerance = 0.0001\n    \n    for x in range(-1000, 1001):\n        result = poly(xs, x)\n        if abs(result) < tolerance:\n            zero_point = x\n            break\n    \n    return zero_point", "prompt_tokens": 916, "completion_tokens": 230, "duration": 7.606857061386108}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            result.append(v)\n    temp.sort()\n    temp_index = 0\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 744, "completion_tokens": 291, "duration": 13.003056764602661}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n\n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 97, "duration": 5.18587851524353}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 496, "completion_tokens": 116, "duration": 6.479274034500122}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 511, "completion_tokens": 157, "duration": 5.982351541519165}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.extend(sorted(l[i:]))\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 619, "completion_tokens": 167, "duration": 7.6459572315216064}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 733, "completion_tokens": 240, "duration": 7.394209146499634}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num):\n        a, b = 0, 1\n        while a <= num:\n            if a == num:\n                return True\n            a, b = b, a + b\n        return False\n\n    count = 0\n    num = 2\n\n    while count < n:\n        if is_prime(num) and is_fibonacci(num):\n            count += 1\n        num += 1\n\n    return num - 1", "prompt_tokens": 625, "completion_tokens": 336, "duration": 9.253327131271362}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 728, "completion_tokens": 253, "duration": 10.986693859100342}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    for i in range(1, n+1):\n        collisions += 1\n    return collisions", "prompt_tokens": 638, "completion_tokens": 115, "duration": 4.800489664077759}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    new_list = [num + 1 for num in l]\n    return new_list", "prompt_tokens": 533, "completion_tokens": 86, "duration": 7.024587154388428}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 659, "completion_tokens": 129, "duration": 4.903747320175171}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 537, "completion_tokens": 140, "duration": 6.413013935089111}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 391, "completion_tokens": 60, "duration": 3.75521183013916}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        next_element = sum(fib4_list[-4:])\n        fib4_list.append(next_element)\n    return fib4_list[-1]", "prompt_tokens": 724, "completion_tokens": 204, "duration": 10.760168313980103}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 493, "completion_tokens": 146, "duration": 9.781520128250122}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    start_index = 0\n    end_index = len(text) - 1\n\n    while start_index < end_index:\n        if text[start_index] != text[end_index]:\n            return False\n        start_index += 1\n        end_index -= 1\n\n    return True", "prompt_tokens": 480, "completion_tokens": 148, "duration": 8.457728147506714}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    exponent = n\n    modulus = p\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % modulus\n        base = (base * base) % modulus\n        exponent = exponent // 2\n    return result", "prompt_tokens": 587, "completion_tokens": 204, "duration": 12.090089797973633}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 623, "completion_tokens": 265, "duration": 13.699463129043579}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 570, "completion_tokens": 107, "duration": 8.64968204498291}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 474, "completion_tokens": 81, "duration": 9.185060262680054}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    result = x + y\n    return result", "prompt_tokens": 401, "completion_tokens": 54, "duration": 5.453251838684082}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    char_count = {}\n    for char in s0:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n\n    for char in s1:\n        if char not in char_count or char_count[char] == 0:\n            return False\n        char_count[char] -= 1\n\n    return all(count == 0 for count in char_count.values())", "prompt_tokens": 700, "completion_tokens": 267, "duration": 13.363708734512329}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    i = 2\n\n    while i <= n:\n        next_fib = a + b\n        a = b\n        b = next_fib\n        i += 1\n\n    return b", "prompt_tokens": 477, "completion_tokens": 200, "duration": 11.574166774749756}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for ch in brackets:\n        if ch == \"<\":\n            count += 1\n        elif ch == \">\" and count > 0:\n            count -= 1\n        else:\n            return False\n    return count == 0", "prompt_tokens": 545, "completion_tokens": 169, "duration": 9.212575197219849}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    isIncreasing = True\n    isDecreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            isIncreasing = False\n        if l[i] < l[i+1]:\n            isDecreasing = False\n\n    if isIncreasing or isDecreasing:\n        return True\n    else:\n        return False", "prompt_tokens": 541, "completion_tokens": 197, "duration": 10.536312103271484}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for ele in l1:\n        if ele in l2 and ele not in common_elements:\n            common_elements.append(ele)\n    return sorted(common_elements)", "prompt_tokens": 580, "completion_tokens": 144, "duration": 7.492669105529785}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 491, "completion_tokens": 173, "duration": 7.698190450668335}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 5.855600357055664}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 537, "completion_tokens": 161, "duration": 8.10511589050293}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 532, "completion_tokens": 82, "duration": 8.093295335769653}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        fibfib_list.append(fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3])\n\n    return fibfib_list[n]", "prompt_tokens": 672, "completion_tokens": 223, "duration": 10.301711320877075}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i, c in enumerate(s):\n        if c in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if c == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "prompt_tokens": 606, "completion_tokens": 175, "duration": 6.959986925125122}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    num_str = str(x)\n    length = len(num_str)\n    \n    if shift > length:\n        result = num_str[::-1]\n        return result\n    else:\n        new_pos = shift % length\n        result = num_str[-new_pos:] + num_str[:-new_pos]\n        return result", "prompt_tokens": 571, "completion_tokens": 222, "duration": 7.16068434715271}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(ch) for ch in s if ch.isupper())", "prompt_tokens": 538, "completion_tokens": 77, "duration": 4.575867652893066}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, [x.split()[0] for x in s.split() if x.isdigit()])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 814, "completion_tokens": 183, "duration": 10.72473955154419}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n            found_even = True\n        elif node % 2 == 0 and node == smallest_value:\n            smallest_index = min(i, smallest_index)\n    \n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1041, "completion_tokens": 276, "duration": 9.43607783317566}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n\n    for key in freq_map:\n        if key > greatest_int and freq_map[key] >= key:\n            greatest_int = key\n\n    return greatest_int", "prompt_tokens": 710, "completion_tokens": 206, "duration": 9.58332371711731}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result_lst = []\n    while lst:\n        result_lst.append(lst.pop(0))\n        if len(lst) > 1:\n            result_lst.append(lst.pop())\n    return result_lst", "prompt_tokens": 621, "completion_tokens": 165, "duration": 6.611864328384399}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 191, "duration": 7.3161211013793945}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 846, "completion_tokens": 153, "duration": 7.5836100578308105}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    \n    return min_changes", "prompt_tokens": 712, "completion_tokens": 208, "duration": 8.268093347549438}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2 or total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 765, "completion_tokens": 198, "duration": 5.958149194717407}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = []\n    count = 0\n    for i in range(2, a):\n        if is_prime(i):\n            while a % i == 0:\n                prime_factors.append(i)\n                count += 1\n                a //= i\n    if count == 3 and a == 1:\n        return True\n    return False\n\n# Test the function\nprint(is_multiply_prime(30))  # True", "prompt_tokens": 576, "completion_tokens": 309, "duration": 9.420440673828125}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False", "prompt_tokens": 629, "completion_tokens": 127, "duration": 6.563851594924927}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    cube_root = int(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 551, "completion_tokens": 104, "duration": 4.678144693374634}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 6.604703664779663}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_str = str(remainder) + binary_str\n        decimal = decimal // 2\n    binary_str = binary_str + \"db\"\n    return binary_str", "prompt_tokens": 675, "completion_tokens": 203, "duration": 8.888951778411865}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 592, "completion_tokens": 165, "duration": 8.942190647125244}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1068, "completion_tokens": 513, "duration": 14.868116855621338}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 549, "completion_tokens": 200, "duration": 9.09088659286499}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)\n        else:\n            count += 2 * 10 ** (n - 2)\n    return count", "prompt_tokens": 429, "completion_tokens": 148, "duration": 7.4349846839904785}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    total_sum = sum(int(digit) for digit in str(N))\n    binary_sum = bin(total_sum)[2:]\n    return binary_sum", "prompt_tokens": 601, "completion_tokens": 112, "duration": 6.52901554107666}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 453, "completion_tokens": 141, "duration": 4.878512144088745}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_words.append(sorted_word)\n\n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 627, "completion_tokens": 164, "duration": 7.817973375320435}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 927, "completion_tokens": 218, "duration": 7.07019829750061}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = array[0] + array[-1]\n    sorted_array = sorted(array, reverse=(sum_first_last % 2 == 0))\n    return sorted_array", "prompt_tokens": 801, "completion_tokens": 182, "duration": 55.195420026779175}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 201, "duration": 8.822872161865234}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(lst)\n    second_smallest = None\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] != sorted_lst[i-1]:\n            second_smallest = sorted_lst[i]\n            break\n    return second_smallest", "prompt_tokens": 620, "completion_tokens": 191, "duration": 6.4151928424835205}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count", "prompt_tokens": 543, "completion_tokens": 125, "duration": 5.899890422821045}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 592, "completion_tokens": 131, "duration": 5.787939071655273}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for ch in message:\n        if ch.lower() in 'aeiou':\n            new_index = (ord(ch) - ord('a') + 2) % 26\n            new_ch = chr(ord('a') + new_index)\n            encoded_message += new_ch.upper() if ch.isupper() else new_ch\n        elif ch.isalpha():\n            encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 641, "completion_tokens": 270, "duration": 9.25665545463562}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 983, "completion_tokens": 283, "duration": 8.078307628631592}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if isinstance(key, str) and key.islower():\n            is_lower = True\n        elif isinstance(key, str) and key.isupper():\n            is_upper = True\n        \n        if is_lower and is_upper:\n            return False\n    \n    return is_lower or is_upper", "prompt_tokens": 740, "completion_tokens": 236, "duration": 8.213125705718994}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    prime_nums = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_nums.append(num)\n            if len(prime_nums) == n:\n                break\n    return prime_nums", "prompt_tokens": 661, "completion_tokens": 208, "duration": 6.59671425819397}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    product = unit_a * unit_b\n    return product", "prompt_tokens": 534, "completion_tokens": 123, "duration": 5.107586860656738}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 115, "duration": 5.326771020889282}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    floor_val = int(value)\n    ceil_val = int(value) + 1\n    diff_floor = abs(value - floor_val)\n    diff_ceil = abs(value - ceil_val)\n    \n    if diff_floor <= diff_ceil:\n        return floor_val\n    else:\n        return ceil_val", "prompt_tokens": 681, "completion_tokens": 186, "duration": 6.243948459625244}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(n):\n        stones_list.append(stones)\n        \n        if n % 2 == 1:\n            stones = stones + 2\n        else:\n            stones = stones + 1\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 148, "duration": 6.040905475616455}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in (',', ' '):\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 616, "completion_tokens": 195, "duration": 7.589686632156372}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > biggest_even:\n            biggest_even = i\n    return biggest_even", "prompt_tokens": 543, "completion_tokens": 149, "duration": 5.736000299453735}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = 0\n        count = 0\n        for i in range(n, m+1):\n            total += i\n            count += 1\n        avg = round(total / count)\n        return bin(avg)", "prompt_tokens": 633, "completion_tokens": 164, "duration": 5.623420476913452}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for ch in str(num):\n            if int(ch) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 595, "completion_tokens": 202, "duration": 6.560912370681763}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    result = []\n    sorted_arr = sorted(arr)\n    filtered_arr = [num for num in sorted_arr if 1 <= num <= 9]\n    reversed_arr = filtered_arr[::-1]\n    num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    result = [num_to_name[num] for num in reversed_arr]\n    return result", "prompt_tokens": 949, "completion_tokens": 259, "duration": 7.452590465545654}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 581, "completion_tokens": 154, "duration": 5.955327987670898}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 187, "duration": 7.124882221221924}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 6.913422346115112}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    \n    for _ in range(len(arr)):\n        arr = [arr[-1]] + arr[:-1]\n        if arr == sorted(arr):\n            return True\n    \n    return False", "prompt_tokens": 978, "completion_tokens": 191, "duration": 6.9324610233306885}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    for num in lst2:\n        if num % 2 != 0:\n            count_odd += 1\n    if count_odd % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 759, "completion_tokens": 196, "duration": 5.517524003982544}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    max_count = max(counts.values())\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    return result", "prompt_tokens": 734, "completion_tokens": 256, "duration": 7.877787351608276}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    is_palindrome = True\n    start = 0\n    end = len(result) - 1\n    while start < end:\n        if result[start] != result[end]:\n            is_palindrome = False\n            break\n        start += 1\n        end -= 1\n    return (result, is_palindrome)", "prompt_tokens": 740, "completion_tokens": 257, "duration": 8.937718868255615}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result_lst = []\n    for string in lst:\n        count = sum(1 for char in string if char.isdigit() and int(char) % 2 != 0)\n        result_lst.append(f\"the number of odd elements {count}n the str{count}ng {string} of the {count}nput.\")\n    return result_lst", "prompt_tokens": 727, "completion_tokens": 202, "duration": 7.419332027435303}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 538, "completion_tokens": 168, "duration": 5.757043838500977}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    total_water = sum(sum(row) for row in grid)\n    times = math.ceil(total_water / capacity)\n    return times", "prompt_tokens": 1029, "completion_tokens": 170, "duration": 6.0014488697052}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 726, "completion_tokens": 168, "duration": 5.617725372314453}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    word_list = s.split()\n    vowels = \"aeiou\"\n    \n    for word in word_list:\n        consonant_count = sum(1 for ch in word if ch.isalpha() and ch.lower() not in vowels)\n        if consonant_count == n:\n            words.append(word)\n    \n    return words", "prompt_tokens": 803, "completion_tokens": 261, "duration": 7.397796392440796}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    last_consonant_index = -1\n    \n    for i in range(len(word)-1, -1, -1):\n        if word[i].lower() not in vowels and word[i].isalpha():\n            last_consonant_index = i\n        elif word[i].lower() in vowels and last_consonant_index != -1:\n            closest_vowel = word[i]\n            break\n    \n    return closest_vowel", "prompt_tokens": 727, "completion_tokens": 292, "duration": 7.695443868637085}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 772, "completion_tokens": 305, "duration": 7.530202627182007}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    res = []\n    for i in range(k):\n        res.append(arr[i])\n    return res", "prompt_tokens": 776, "completion_tokens": 119, "duration": 4.981166839599609}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 529, "completion_tokens": 132, "duration": 4.121911287307739}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 611, "completion_tokens": 162, "duration": 5.822541952133179}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 211, "duration": 6.320260286331177}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    date_parts = date.split('-')\n\n    if len(date_parts) != 3:\n        return False\n\n    month, day, year = date_parts\n\n    if not month.isdigit() or not (1 <= int(month) <= 12):\n        return False\n\n    if not day.isdigit():\n        return False\n\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= int(day) <= 31):\n            return False\n    elif int(month) in [4, 6, 9, 11]:\n        if not (1 <= int(day) <= 30):\n            return False\n    elif int(month) == 2:\n        if not (1 <= int(day) <= 29):\n            return False\n\n    if not year.isdigit() or len(year) != 4:\n        return False\n\n    if not date.startswith('0') or not date.endswith('0'):\n        return False\n\n    return True", "prompt_tokens": 914, "completion_tokens": 346, "duration": 14.17810606956482}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        return count if count > 0 else None\n    return words_list", "prompt_tokens": 752, "completion_tokens": 297, "duration": 9.906769037246704}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicate_count = 0\n    sorted = True\n    \n    for num in lst:\n        if num <= prev:\n            if num == prev:\n                duplicate_count += 1\n                if duplicate_count > 1:\n                    sorted = False\n                    break\n            else:\n                sorted = False\n                break\n        prev = num\n    \n    if duplicate_count <= 1 and sorted:\n        sorted = True\n    \n    return sorted", "prompt_tokens": 995, "completion_tokens": 339, "duration": 11.278771162033081}
{"task_id": "HumanEval/127", "generated_code": "import math\n\ndef intersection(interval1, interval2):\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    \n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n    intersection_length = intersection_end - intersection_start + 1\n\n    if intersection_length <= 1:\n        return \"NO\"\n    \n    is_prime = True\n    if intersection_length == 2:\n        is_prime = True\n    else:\n        for i in range(2, int(math.sqrt(intersection_length)) + 1):\n            if intersection_length % i == 0:\n                is_prime = False\n                break\n\n    if is_prime:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 936, "completion_tokens": 350, "duration": 10.19530725479126}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sum = 0\n    product = 1\n    for num in arr:\n        sum += abs(num) if num > 0 else -abs(num) if num < 0 else 0\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n    return sum * product", "prompt_tokens": 622, "completion_tokens": 208, "duration": 6.199497222900391}
{"task_id": "HumanEval/129", "generated_code": "import heapq\n\ndef minPath(grid, k):\n    N = len(grid)\n    visited = [[False for _ in range(N)] for _ in range(N)]\n    pq = [(grid[0][0], 0, 0, [grid[0][0]])]\n    \n    while pq and k > 0:\n        val, x, y, path = heapq.heappop(pq)\n        visited[x][y] = True\n        k -= 1\n        \n        if k == 0:\n            return path\n        \n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]:\n                heapq.heappush(pq, (grid[nx][ny], nx, ny, path + [grid[nx][ny]]))\n    \n    return []", "prompt_tokens": 2016, "completion_tokens": 685, "duration": 17.878602504730225}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    sequence = [0, 1]\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    elif n == 2:\n        return [0, 1, 1]\n    else:\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sum(sequence[-3:]))\n        return sequence", "prompt_tokens": 903, "completion_tokens": 288, "duration": 10.034973382949829}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    if product == 1:\n        return 0\n    else:\n        return product", "prompt_tokens": 483, "completion_tokens": 149, "duration": 5.47243332862854}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)", "prompt_tokens": 657, "completion_tokens": 185, "duration": 6.559754848480225}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 6.066338300704956}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_letter = False\n    if not txt:\n        return False\n    txt = txt.rstrip()\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        is_last_char_letter = True\n    return is_last_char_letter", "prompt_tokens": 654, "completion_tokens": 203, "duration": 10.59707498550415}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 555, "completion_tokens": 141, "duration": 6.196216344833374}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    largest_neg = None\n    smallest_pos = None\n    \n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        if num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 664, "completion_tokens": 231, "duration": 10.684805154800415}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None", "prompt_tokens": 748, "completion_tokens": 318, "duration": 12.510830640792847}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    even_count = 0\n    even_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_count += 1\n            even_sum += i\n    return even_count == 4 and even_sum == n", "prompt_tokens": 542, "completion_tokens": 201, "duration": 8.26027536392212}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        temp = 1\n        for j in range(i, 0, -1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 7.056239128112793}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    new_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                new_text = new_text[:-1] + \"-\"\n            else:\n                new_text += \"_\"\n        else:\n            if count > 2:\n                new_text += \"-\"\n            new_text += ch\n            count = 0\n    return new_text", "prompt_tokens": 614, "completion_tokens": 239, "duration": 11.757052421569824}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    \n    dot_index = file_name.find('.')\n    if dot_index == -1 or file_name.count('.') != 1:\n        return 'No'\n    \n    before_dot = file_name[:dot_index]\n    after_dot = file_name[dot_index+1:]\n    \n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n    \n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 831, "completion_tokens": 278, "duration": 11.190419912338257}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 698, "completion_tokens": 183, "duration": 6.7262773513793945}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 681, "completion_tokens": 221, "duration": 6.772998332977295}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    product = x_num * n_num / (x_denom * n_denom)\n    \n    return product.is_integer()", "prompt_tokens": 671, "completion_tokens": 166, "duration": 9.390486717224121}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    sum_dict = {}\n    sorted_nums = []\n    \n    for i, num in enumerate(nums):\n        sum_digits = sum(int(d) for d in str(abs(num)))\n        if sum_digits not in sum_dict:\n            sum_dict[sum_digits] = []\n        sum_dict[sum_digits].append((num, i))\n    \n    for key in sorted(sum_dict.keys()):\n        sorted_nums.extend([num for num, _ in sorted(sum_dict[key], key=lambda x: x[1])])\n    \n    return sorted_nums", "prompt_tokens": 718, "completion_tokens": 345, "duration": 8.665778160095215}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 605, "completion_tokens": 197, "duration": 6.63616156578064}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 731, "completion_tokens": 245, "duration": 9.172430038452148}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet_positions = {planet: index for index, planet in enumerate(planets)}\n    \n    if planet1 not in planet_positions or planet2 not in planet_positions:\n        return ()\n    \n    start = min(planet_positions[planet1], planet_positions[planet2])\n    end = max(planet_positions[planet1], planet_positions[planet2])\n    \n    result = [planet for planet in planets[start+1:end] if planet != planet1 and planet != planet2]\n    result.sort(key=lambda x: planet_positions[x])\n    \n    return tuple(result)", "prompt_tokens": 846, "completion_tokens": 327, "duration": 8.764431953430176}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 722, "completion_tokens": 137, "duration": 8.800799131393433}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    is_prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            is_prime = False\n            break\n    \n    if is_prime:\n        return x\n    else:\n        return y", "prompt_tokens": 514, "completion_tokens": 145, "duration": 9.124170780181885}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 612, "completion_tokens": 143, "duration": 7.135295152664185}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 6.584049224853516}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension_name = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension_name = extension\n    \n    return class_name + \".\" + strongest_extension_name", "prompt_tokens": 945, "completion_tokens": 234, "duration": 8.20649242401123}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    a = a + a\n    for i in range(n):\n        if b in a[i:i+n]:\n            return True\n    return False", "prompt_tokens": 641, "completion_tokens": 171, "duration": 4.43821907043457}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 7.448082447052002}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400,\n        'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n        'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1\n    }\n    \n    roman_numeral = ''\n    \n    roman_symbols = [\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n        ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n        ('X', 10), ('IX', 9), ('V', 5), ('IV', 4), ('I', 1)\n    ]\n    \n    for roman_symbol, value in roman_symbols:\n        while number >= value:\n            roman_numeral += roman_symbol\n            number -= value\n            \n    return roman_numeral.lower()", "prompt_tokens": 592, "completion_tokens": 365, "duration": 13.11698031425476}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    side_a_squared = a * a\n    side_b_squared = b * b\n    side_c_squared = c * c\n\n    longest_side = max(side_a_squared, side_b_squared, side_c_squared)\n\n    if longest_side == side_a_squared + side_b_squared:\n        return True\n    elif longest_side == side_a_squared + side_c_squared:\n        return True\n    elif longest_side == side_b_squared + side_c_squared:\n        return True\n    else:\n        return False", "prompt_tokens": 677, "completion_tokens": 316, "duration": 11.54785418510437}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars or (len(unique_chars) == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = len(unique_chars)\n\n    return max_word", "prompt_tokens": 591, "completion_tokens": 171, "duration": 8.072843074798584}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    remaining_carrots = remaining - total_eaten_carrots if remaining >= total_eaten_carrots else 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 917, "completion_tokens": 163, "duration": 6.872636318206787}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 856, "completion_tokens": 293, "duration": 11.277358293533325}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(char.isalpha() for char in result):\n        return result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 189, "duration": 7.52156400680542}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    \n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 96, "duration": 4.916562080383301}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 535, "completion_tokens": 116, "duration": 7.535846948623657}
