{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 174, "completion_tokens": 64, "duration": 4.75487208366394, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:  # If the stack is empty, we have a complete group\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 165, "completion_tokens": 125, "duration": 8.364513158798218, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.593454599380493, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 4.745342969894409, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 4.207878112792969, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.437914609909058, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 162, "completion_tokens": 103, "duration": 7.217733144760132, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 105, "duration": 8.629974126815796, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:  # if the list is empty\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 135, "duration": 7.478353500366211, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        max_list.append(current_max)\n    return max_list", "prompt_tokens": 150, "completion_tokens": 65, "duration": 5.787142038345337, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "is_solved": false, "solved_count": 0, "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    \"\"\"\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 85, "duration": 5.552202224731445, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 2.8543407917022705, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 80, "duration": 4.265106439590454, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.7455403804779053, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 109, "completion_tokens": 60, "duration": 4.589229106903076, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.5521953105926514, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.1593639850616455, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Replace the 'o|' and '.|' in the string with unique characters to avoid confusion\n    music_string = music_string.replace('o|', 'h').replace('.|', 'q')\n    # Now, iterate through the string and map the characters to their beat values\n    beats_map = {'o': 4, 'h': 2, 'q': 1}\n    return [beats_map[char] for char in music_string.split()]", "prompt_tokens": 222, "completion_tokens": 119, "duration": 7.152365684509277, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 5.35260272026062, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    sorted_list = sorted(num_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_list)", "prompt_tokens": 155, "completion_tokens": 109, "duration": 5.791578054428101, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 117, "duration": 6.132099390029907, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num, max_num = min(numbers), max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 173, "completion_tokens": 57, "duration": 3.9916391372680664, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 51, "duration": 5.139939546585083, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.055067539215088, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.498643159866333, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 67, "duration": 3.813540458679199, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 63, "duration": 3.9380786418914795, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.6051344871520996, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 5.677083253860474, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 60, "duration": 4.436453580856323, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 7.53526496887207, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 5.021997928619385, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n\n    def polynomial(x):\n        return poly(xs, x)\n\n    result = root(polynomial, 0)  # Initial guess is 0\n    return result.x[0]", "prompt_tokens": 309, "completion_tokens": 209, "duration": 13.531993389129639, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_three_elements_sorted = sorted(divisible_by_three_elements)\n    # Replace elements in the original list with the sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_three_elements_sorted):\n        l[i*3] = value\n    return l", "prompt_tokens": 200, "completion_tokens": 178, "duration": 9.802103757858276, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 2.397162914276123, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 5.93394660949707, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.66129994392395, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_indices_values.pop(0)\n    return l", "prompt_tokens": 173, "completion_tokens": 129, "duration": 9.474318265914917, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 114, "duration": 6.528709173202515, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib_seq(limit):\n        a, b = 0, 1\n        for _ in range(limit):\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_number in fib_seq(227000):  # Upper bound to ensure we get enough primes\n        if is_prime(fib_number):\n            count += 1\n            if count == n:\n                return fib_number", "prompt_tokens": 147, "completion_tokens": 160, "duration": 7.612762689590454, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 209, "completion_tokens": 123, "duration": 8.779701709747314, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Returns the total number of collisions in a scenario where n cars moving left to right\n    and n cars moving right to left on a straight infinitely long line.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 58, "duration": 4.05581521987915, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 6.782412767410278, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.6238152980804443, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 59, "duration": 3.4516003131866455, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.541795015335083, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 123, "duration": 6.53942346572876, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 3.9178824424743652, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 23, "duration": 3.187826633453369, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.4844424724578857, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 2.9345836639404297, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in text if char not in vowels)", "prompt_tokens": 172, "completion_tokens": 59, "duration": 5.057580947875977, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.9467265605926514, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 2.919173002243042, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 3.2053489685058594, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 66, "duration": 3.7723100185394287, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        elif bracket == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.116629600524902, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 137, "completion_tokens": 55, "duration": 4.5835120677948, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 39, "duration": 2.299417734146118, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 53, "duration": 3.36969256401062, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n+1))", "prompt_tokens": 144, "completion_tokens": 26, "duration": 2.9112391471862793, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 6.305736303329468, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.9462831020355225, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "prompt_tokens": 199, "completion_tokens": 101, "duration": 8.051957130432129, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    count = sum(1 for char in s if char in vowels)\n    if s and (s[-1] == 'y' or s[-1] == 'Y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"python\"))  # 1\nprint(vowels_count(\"fly\"))    # 1\nprint(vowels_count(\"qwrtypsdfghjklzxcvbnm\"))  # 0\nprint(vowels_count(\"Y\"))      # 1", "prompt_tokens": 176, "completion_tokens": 162, "duration": 8.08445405960083, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift >= len(x_str):\n        return x_str[::-1]\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 53, "duration": 5.015865087509155, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.425279378890991, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0183377265930176, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(value, idx) for idx, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "prompt_tokens": 362, "completion_tokens": 52, "duration": 3.4415509700775146, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    '''\n    Given a non-empty list of positive integers, return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such value exists, return -1.\n    '''\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    result = -1\n    for num, freq in frequency.items():\n        if num <= freq and num > result:\n            result = num\n            \n    return result", "prompt_tokens": 215, "completion_tokens": 131, "duration": 7.489641427993774, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 3.746457815170288, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    # Calculate semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)", "prompt_tokens": 171, "completion_tokens": 106, "duration": 8.164106607437134, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.699976682662964, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 4.027141332626343, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the one with fewer total characters, or the first if they're equal.\n    '''\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 77, "duration": 4.678477048873901, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, a) if is_prime(i)]\n    \n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 142, "duration": 7.1108949184417725, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if x < 1 or n <= 1:\n        return False\n    while x % n == 0:\n        x /= n\n    return x == 1", "prompt_tokens": 192, "completion_tokens": 63, "duration": 4.497180461883545, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    root = round(abs_a ** (1/3))\n    return root ** 3 == abs_a", "prompt_tokens": 160, "completion_tokens": 49, "duration": 3.331355094909668, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 349, "completion_tokens": 58, "duration": 4.222330331802368, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary}db\"", "prompt_tokens": 189, "completion_tokens": 42, "duration": 3.0084314346313477, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 76, "duration": 6.457612991333008, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Convert numerical grades to letter grades based on the provided scale.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 269, "duration": 12.695846319198608, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.824135780334473, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # Only '1' fits the condition\n    else:\n        # For n > 1, we have 2 * (9**(n-1)) - (8**(n-1)) possibilities\n        # Explanation: There are 2 * 9**(n-1) ways to have numbers starting or ending with 1,\n        # but this double counts the numbers that both start and end with 1, of which there are 8**(n-1).\n        return 2 * (9**(n-1)) - (8**(n-1))", "prompt_tokens": 94, "completion_tokens": 171, "duration": 8.329357147216797, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 33, "duration": 2.4822816848754883, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.958810329437256, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.6234896183013916, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...]\n    such that each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order, and by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda k: (k[0], -k[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 138, "duration": 8.225459337234497, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 253, "completion_tokens": 61, "duration": 5.074383497238159, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 96, "duration": 4.659465789794922, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element in a list of integers or None if not possible.\n    \"\"\"\n    unique_sorted_list = sorted(set(lst))\n    if len(unique_sorted_list) < 2:\n        return None\n    else:\n        return unique_sorted_list[1]", "prompt_tokens": 174, "completion_tokens": 68, "duration": 3.737258195877075, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with \"I\" in a given string.\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    # Split the string into sentences\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    # Count sentences starting with \"I \"\n    count = sum(sentence.strip().startswith(\"I\") for sentence in sentences)\n    return count", "prompt_tokens": 157, "completion_tokens": 94, "duration": 4.528693914413452, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.3868942260742188, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case and replacing vowels.\n    \"\"\"\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            # Find the index of the vowel in the alphabet\n            alphabet = 'abcdefghijklmnopqrstuvwxyz'\n            char_lower = char.lower()  # Convert to lowercase to handle uppercase vowels\n            index = alphabet.index(char_lower)\n            # Calculate the new index, considering the circular nature of the alphabet\n            new_index = (index + 2) % 26\n            new_char = alphabet[new_index]\n            # Preserve the original case\n            if char.isupper():\n                return new_char.upper()\n            else:\n                return new_char\n        else:\n            return char\n\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            swapped_char = swap_case(char)\n            replaced_char = replace_vowel(swapped_char)\n            encoded_message += replaced_char\n        else:\n            encoded_message += char\n\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 242, "duration": 10.827568054199219, "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum([int(digit) for digit in str(largest_prime)])", "prompt_tokens": 336, "completion_tokens": 113, "duration": 6.079300165176392, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 67, "duration": 6.150428771972656, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 79, "duration": 5.665844917297363, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 3.383568525314331, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Counts the number of uppercase vowels in even indices of a given string.\n\n    Args:\n    s (str): The input string.\n\n    Returns:\n    int: The number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "prompt_tokens": 122, "completion_tokens": 88, "duration": 4.618080377578735, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 206, "completion_tokens": 92, "duration": 5.3482232093811035, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.0664279460906982, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words and return an array of the words.\n    \"\"\"\n    import re\n    # Split the string by comma or space\n    return re.split(r'[,\\s]\\s*', s)", "prompt_tokens": 166, "completion_tokens": 54, "duration": 4.557156801223755, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"Returns the biggest even integer in the range [x, y] or -1 if none exists.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 66, "duration": 5.709801912307739, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.521028995513916, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x, return a sorted list of all elements that haven't any even digit.\n    \"\"\"\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted(filter(has_no_even_digit, x))", "prompt_tokens": 152, "completion_tokens": 75, "duration": 6.0138421058654785, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    num_to_word = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_word[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 110, "duration": 8.705436706542969, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n        \n    def sum_to_x(x):\n        return sum(range(1, x + 1))\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 113, "duration": 8.432361602783203, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 100, "duration": 6.643072128295898, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum([int(d) for d in str(n) if d.isdigit()]) - (2*int(str(n)[1]) if n < 0 else 0)\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 72, "duration": 6.665167808532715, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            count += 1\n            if count > 1:\n                return False\n    if count == 0:\n        return True\n    return arr[0] >= arr[-1]", "prompt_tokens": 349, "completion_tokens": 91, "duration": 6.822336673736572, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    \"\"\"Determine if it's possible to exchange elements between two lists to make the first list all even numbers.\"\"\"\n    # Count odd numbers in lst1 and even numbers in lst2\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n\n    # It is possible to make lst1 all even if there are enough even numbers in lst2 to replace all odd numbers in lst1\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 150, "duration": 9.27693247795105, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    words = test.split()\n    counter = {}\n    for word in words:\n        counter[word] = counter.get(word, 0) + 1\n    max_count = max(counter.values(), default=0)\n    return {key: value for key, value in counter.items() if value == max_count}", "prompt_tokens": 201, "completion_tokens": 72, "duration": 6.7359254360198975, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.095068454742432, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.644952774047852, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 87, "duration": 7.879081964492798, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(row.count(1) for row in grid)\n    import math\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 373, "completion_tokens": 41, "duration": 6.1018311977386475, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 5.164805889129639, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    \"\"\"Returns a list of all words from string s that contain exactly n consonants.\"\"\"\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = sum(1 for char in word if char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result", "prompt_tokens": 231, "completion_tokens": 91, "duration": 11.212305784225464, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels and i != 0 and i != len(word) - 1:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 90, "duration": 7.486766576766968, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    first_open = lst[0].count('(')\n    first_close = lst[0].count(')')\n    second_open = lst[1].count('(')\n    second_close = lst[1].count(')')\n    \n    # Try first string followed by second string\n    if first_open >= first_close and (first_open - first_close) <= second_open:\n        return 'Yes'\n    # Try second string followed by first string\n    elif second_open >= second_close and (second_open - second_close) <= first_open:\n        return 'Yes'\n    \n    return 'No'", "prompt_tokens": 218, "completion_tokens": 130, "duration": 12.206583976745605, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 20, "duration": 3.8695626258850098, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 5.78210186958313, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 <= abs(x) < 100)", "prompt_tokens": 178, "completion_tokens": 72, "duration": 8.557146072387695, "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3*n + 1\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 119, "duration": 8.955832958221436, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into components\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if parts are numeric\n    if not (parts[0].isdigit() and parts[1].isdigit() and parts[2].isdigit()):\n        return False\n    \n    month, day, year = map(int, parts)\n    \n    # Check month range\n    if month < 1 or month > 12:\n        return False\n    \n    # Check day range\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        valid_days = 31\n    elif month in [4, 6, 9, 11]:\n        valid_days = 30\n    else:  # February\n        valid_days = 29\n    \n    if day < 1 or day > valid_days:\n        return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 240, "duration": 14.84258484840393, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    '''\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 149, "duration": 10.601639032363892, "result": "passed", "passed": true}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 2:\n                return False\n        else:\n            count[num] = 1\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 114, "duration": 8.342191696166992, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.525895833969116, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]  # right, down, up, left\n    heap = []\n    for i in range(N):\n        for j in range(N):\n            heappush(heap, (grid[i][j], 1, [(grid[i][j], i, j)]))  # (value, path_len, path)\n    visited = set()\n\n    while heap:\n        value, path_len, path = heappop(heap)\n        if (path[-1][1], path[-1][2]) in visited and path_len != k:\n            continue\n        visited.add((path[-1][1], path[-1][2]))\n        if path_len == k:\n            return [p[0] for p in path]\n        for dx, dy in directions:\n            x, y = path[-1][1] + dx, path[-1][2] + dy\n            if 0 <= x < N and 0 <= y < N:\n                new_path = path + [(grid[x][y], x, y)]\n                heappush(heap, (value, path_len + 1, new_path))", "prompt_tokens": 446, "completion_tokens": 283, "duration": 21.41947889328003, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 1, "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 2]\n    \n    tribonacci = [3, 2]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            next_val = tribonacci[-1] + tribonacci[-2] + (1 + (i + 1) // 2)\n            tribonacci.append(next_val)\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 125, "duration": 12.824751138687134, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    \"\"\"\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 125, "duration": 9.492614507675171, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n        if balance >= 2:\n            return True\n    return False", "prompt_tokens": 183, "completion_tokens": 193, "duration": 15.617799520492554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 4.88249945640564, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) > 1 and txt[-2].isalpha():\n        return False\n    return True", "prompt_tokens": 187, "completion_tokens": 55, "duration": 6.175930738449097, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 5.716670036315918, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 80, "duration": 7.528598308563232, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 87, "duration": 8.212455034255981, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 49, "duration": 7.5086705684661865, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 70, "duration": 7.43923020362854, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    text = re.sub(r' {3,}', '-', text)  # Replace 3 or more consecutive spaces with -\n    text = text.replace(' ', '_')  # Replace all remaining spaces with _\n    return text", "prompt_tokens": 156, "completion_tokens": 101, "duration": 8.879679679870605, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex to match the file name conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{2}[0-9]{0,3}\\.[txt|exe|dll]{3}$'\n    return 'Yes' if re.match(pattern, file_name) else 'No'", "prompt_tokens": 264, "completion_tokens": 85, "duration": 8.52440595626831, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum([x**3 if i % 4 == 0 and i % 3 != 0 else x**2 if i % 3 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 55, "duration": 6.630475044250488, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "prompt_tokens": 197, "completion_tokens": 81, "duration": 9.048620223999023, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    result = x_frac * n_frac\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 48, "duration": 7.9944047927856445, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 81, "duration": 10.551202058792114, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_first_and_last_odd(n):\n        n_str = str(abs(n))\n        return int(n_str[0]) % 2 != 0 and int(n_str[-1]) % 2 != 0\n    \n    return sum(1 for num in nums if num > 10 and is_first_and_last_odd(num))", "prompt_tokens": 169, "completion_tokens": 76, "duration": 9.775675535202026, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the elements based on their mod 3 value\n    count_mod = [0, 0, 0]\n    for num in a:\n        count_mod[num % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Combining three numbers each of which gives the same remainder when divided by 3\n    # or combining three numbers with remainders 0, 1, and 2 respectively\n    return (count_mod[0] * (count_mod[0] - 1) * (count_mod[0] - 2) // 6) + \\\n           (count_mod[1] * (count_mod[1] - 1) * (count_mod[1] - 2) // 6) + \\\n           (count_mod[2] * (count_mod[2] - 1) * (count_mod[2] - 2) // 6) + \\\n           (count_mod[0] * count_mod[1] * count_mod[2])", "prompt_tokens": 215, "completion_tokens": 281, "duration": 18.876963138580322, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "prompt_tokens": 261, "completion_tokens": 121, "duration": 12.87853479385376, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Filtering out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sorting the list first alphabetically, then by length\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 237, "completion_tokens": 76, "duration": 9.684058427810669, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 7.863169193267822, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 34, "duration": 5.8557751178741455, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.679672718048096, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        return CAP - SM\n\n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 327, "completion_tokens": 78, "duration": 9.187983989715576, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 179, "completion_tokens": 59, "duration": 8.006552696228027, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 75, "duration": 12.419520854949951, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 252, "duration": 17.640607357025146, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 6.737193584442139, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    return max(sorted(words), key=lambda x: len(set(x)))", "prompt_tokens": 170, "completion_tokens": 23, "duration": 6.37529993057251, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 42, "duration": 6.8286826610565186, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i, op in enumerate(operator):\n        expression += f\" {op} {operand[i + 1]}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 50, "duration": 7.751308441162109, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 9.116584062576294, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    if not text:\n        return None\n    hash_object = hashlib.md5(text.encode())\n    return hash_object.hexdigest()", "prompt_tokens": 126, "completion_tokens": 45, "duration": 7.105177402496338, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 79, "duration": 9.476743936538696, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    numbers.sort()  # Sort the list to make comparison easier\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 174, "completion_tokens": 100, "duration": 5.863525152206421, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')  # Remove spaces from the string\n    stack = []\n    result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            current_group.append(char)\n            if not stack:  # When stack is empty, a group is complete\n                result.append(''.join(current_group))\n                current_group = []\n    return result", "prompt_tokens": 165, "completion_tokens": 131, "duration": 10.069965600967407, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.415926933288574, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.3240513801574707, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.36517071723938, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result", "prompt_tokens": 142, "completion_tokens": 65, "duration": 5.754338264465332, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 162, "completion_tokens": 201, "duration": 10.8449068069458, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]", "prompt_tokens": 143, "completion_tokens": 104, "duration": 9.396217823028564, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 65, "duration": 4.758231163024902, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for num in numbers[1:]:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "prompt_tokens": 150, "completion_tokens": 72, "duration": 5.2124717235565186, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 118, "duration": 6.5843377113342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 2.8703548908233643, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 81, "duration": 4.892841815948486, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.8341064453125, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 37, "duration": 3.337078332901001, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 118, "completion_tokens": 28, "duration": 2.4949095249176025, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3623576164245605, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 5.53599214553833, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.924618482589722, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 105, "duration": 7.42905855178833, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < min_diff:\n            min_diff = numbers[i+1] - numbers[i]\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 118, "duration": 6.497668266296387, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 105, "duration": 5.955613851547241, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 53, "duration": 4.368587970733643, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.2301719188690186, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 78, "duration": 4.417155981063843, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 79, "duration": 5.726637840270996, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 96, "duration": 6.188704967498779, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 2.6977694034576416, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.704251766204834, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 39, "duration": 2.6051394939422607, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 9.141416072845459, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 4.07520055770874, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(xs: list) -> list:\n        \"\"\"Calculates the derivative of a polynomial given its coefficients.\"\"\"\n        return [i * xs[i] for i in range(1, len(xs))]\n\n    def newton_raphson_method(coefficients, initial_guess=0.0, max_iterations=10000, tolerance=1e-7):\n        \"\"\"Finds a root of a polynomial using the Newton-Raphson method.\"\"\"\n        guess = initial_guess\n        for _ in range(max_iterations):\n            f_guess = poly(coefficients, guess)\n            f_prime_guess = poly(derivative(coefficients), guess)\n            if f_prime_guess == 0:  # Avoid division by zero\n                return guess\n            next_guess = guess - f_guess / f_prime_guess\n            if abs(next_guess - guess) < tolerance:\n                return next_guess\n            guess = next_guess\n        return guess\n\n    return newton_raphson_method(xs)", "prompt_tokens": 309, "completion_tokens": 362, "duration": 20.952109813690186, "result": "passed", "passed": true}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three_elements_sorted = sorted(divisible_by_three_elements)\n    # Replace elements in original list with sorted ones\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = divisible_by_three_elements_sorted.pop(0)\n    return l", "prompt_tokens": 200, "completion_tokens": 179, "duration": 8.83538007736206, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 77, "duration": 4.2632057666778564, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 4.986131191253662, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 5.454546213150024, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    even_indices_values = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices_values.sort()\n    return [even_indices_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.657270431518555, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 134, "duration": 7.776659250259399, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 1, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    fib_gen = fib()\n    count = 0\n    while True:\n        fib_number = next(fib_gen)\n        if is_prime(fib_number):\n            count += 1\n            if count == n:\n                return fib_number", "prompt_tokens": 147, "completion_tokens": 152, "duration": 7.4617297649383545, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        a = l[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False", "prompt_tokens": 209, "completion_tokens": 117, "duration": 5.867268085479736, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculates the number of collisions between two sets of cars, each set containing n cars,\n    moving towards each other on a straight line.\n\n    Parameters:\n    n (int): The number of cars in each set.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    return n**2", "prompt_tokens": 201, "completion_tokens": 81, "duration": 4.512811660766602, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 9.752895832061768, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 2.8663277626037598, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 59, "duration": 5.315738916397095, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 5.74955415725708, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.165939569473267, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.176158905029297, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 80, "duration": 6.092458963394165, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.806905508041382, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 4.547531604766846, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 58, "duration": 3.865807294845581, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 3.015895128250122, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 7.408296346664429, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.6452887058258057, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 4.926467418670654, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack += 1\n        elif bracket == \">\":\n            stack -= 1\n            if stack < 0:\n                return False\n    return stack == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 4.395784139633179, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.4977123737335205, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 40, "duration": 3.0806970596313477, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_factor = 1\n    i = 2\n    \n    while i <= n**0.5 or n == 2:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n /= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n    \n    return int(prime_factor)", "prompt_tokens": 113, "completion_tokens": 159, "duration": 9.056618928909302, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 46, "duration": 4.6212992668151855, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 67, "duration": 4.136567115783691, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6894848346710205, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c", "prompt_tokens": 199, "completion_tokens": 100, "duration": 7.501265525817871, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.lower().endswith('y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"rhythm\"))  # 0\nprint(vowels_count(\"SYZYGY\"))  # 1\nprint(vowels_count(\"quickly\"))  # 2", "prompt_tokens": 176, "completion_tokens": 139, "duration": 10.590349435806274, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift >= len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 4.1048290729522705, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.519407272338867, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    nums = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(nums)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.075874090194702, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n    \"\"\"\n    min_even = float('inf')\n    index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < min_even:\n            min_even = value\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [min_even, index]", "prompt_tokens": 362, "completion_tokens": 188, "duration": 11.267112493515015, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    valid_numbers = [num for num in count if count[num] >= num]\n    return max(valid_numbers) if valid_numbers else -1", "prompt_tokens": 215, "completion_tokens": 50, "duration": 3.089937448501587, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.013467073440552, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 222, "duration": 11.507371664047241, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.1178014278411865, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 4.006330728530884, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list.\n    If the two lists have the same number of chars, return the first list.\n    '''\n    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 100, "duration": 5.170660495758057, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2:\n        return False\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            while a % i == 0:\n                a //= i\n    return prime_factors == 3", "prompt_tokens": 129, "completion_tokens": 136, "duration": 9.14966630935669, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 4.261970520019531, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    root = abs(a) ** (1/3)\n    return int(round(root)) ** 3 == abs(a)", "prompt_tokens": 160, "completion_tokens": 34, "duration": 2.9256913661956787, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = set('2357BD')\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 36, "duration": 4.601905584335327, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_string = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_string}db\"", "prompt_tokens": 189, "completion_tokens": 44, "duration": 3.0204286575317383, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 57, "duration": 4.659956693649292, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 235, "duration": 11.897135972976685, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.866314172744751, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # Only one such number when n = 1, which is 1 itself\n    else:\n        # Count = numbers starting with 1 + numbers ending with 1 - numbers both starting and ending with 1\n        # There are 9*(10**(n-2)) numbers both starting and ending with 1, as the middle digits can be anything.\n        return 2 * (10**(n-1)) - 9 * (10**(n-2))", "prompt_tokens": 94, "completion_tokens": 152, "duration": 8.23445725440979, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum([int(digit) for digit in str(N)])\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 34, "duration": 2.5891923904418945, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.9200329780578613, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Reorders each word in the string based on the ascending ASCII values of its characters.\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 49, "duration": 3.656792163848877, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append((i, j))\n    # Sort by row ascending, then by column descending\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords", "prompt_tokens": 309, "completion_tokens": 166, "duration": 9.15028429031372, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \"\"\"\n    if not array:  # If the array is empty, return an empty array.\n        return array\n    sum_of_first_last = array[0] + array[-1]\n    if sum_of_first_last % 2 == 0:  # If the sum is even, sort in descending order.\n        return sorted(array, reverse=True)\n    else:  # If the sum is odd, sort in ascending order.\n        return sorted(array)", "prompt_tokens": 253, "completion_tokens": 171, "duration": 7.986722946166992, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 160, "completion_tokens": 102, "duration": 6.202141046524048, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element in a list of integers or None if it doesn't exist.\n    \"\"\"\n    unique_sorted_list = sorted(set(lst))\n    if len(unique_sorted_list) < 2:\n        return None\n    return unique_sorted_list[1]", "prompt_tokens": 174, "completion_tokens": 67, "duration": 6.915165185928345, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Splitting the string into sentences\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    # Counting sentences that start with \"I \" or \"I'm\"\n    count = sum(1 for sentence in sentences if sentence.strip().startswith('I '))\n    return count", "prompt_tokens": 157, "completion_tokens": 116, "duration": 8.530887126922607, "result": "passed", "passed": true}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 185, "completion_tokens": 101, "duration": 7.168181657791138, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case and replacing vowels.\n    \"\"\"\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            # Find the index of the vowel in the alphabet\n            alphabet = 'abcdefghijklmnopqrstuvwxyz'\n            char_lower = char.lower()  # Convert to lowercase to handle uppercase vowels\n            index = alphabet.index(char_lower)\n            # Calculate the new index, considering the circular nature of the alphabet\n            new_index = (index + 2) % 26\n            new_char = alphabet[new_index]\n            # Preserve the original case\n            if char.isupper():\n                return new_char.upper()\n            else:\n                return new_char\n        else:\n            return char\n\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            swapped_char = swap_case(char)\n            replaced_char = replace_vowel(swapped_char)\n            encoded_message += replaced_char\n        else:\n            encoded_message += char\n\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 242, "duration": 10.827568054199219, "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sum([int(digit) for digit in str(largest_prime)])", "prompt_tokens": 336, "completion_tokens": 112, "duration": 5.940928936004639, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(k, str) and k.islower() for k in dict)\n    all_upper = all(isinstance(k, str) and k.isupper() for k in dict)\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 67, "duration": 5.4458723068237305, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]", "prompt_tokens": 195, "completion_tokens": 82, "duration": 4.144302606582642, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 4.517662286758423, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)", "prompt_tokens": 122, "completion_tokens": 63, "duration": 5.923205614089966, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        if num - int(num) < 0.5:\n            return int(num)\n        else:\n            return int(num) + 1\n    else:\n        if abs(num) - abs(int(num)) < 0.5:\n            return int(num)\n        else:\n            return int(num) - 1", "prompt_tokens": 206, "completion_tokens": 88, "duration": 4.2990782260894775, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 25, "duration": 4.378433704376221, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 6.832147836685181, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"Returns the biggest even integer in the range [x, y] inclusive, or -1 if no such number exists.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 70, "duration": 6.025339365005493, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 5.4028308391571045, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    # Filter elements that don't contain even digits\n    filtered = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    # Return the sorted list of filtered elements\n    return sorted(filtered)", "prompt_tokens": 152, "completion_tokens": 102, "duration": 7.4197797775268555, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_word[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 105, "duration": 9.411033391952515, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    \"\"\"\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    \n    return result", "prompt_tokens": 174, "completion_tokens": 175, "duration": 12.298518180847168, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 100, "duration": 7.395009994506836, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n))) if n >= 0 else -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 75, "duration": 8.908817768096924, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:  # If array is empty\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            count += 1\n            if count > 1:\n                return False\n    if count == 0:\n        return True\n    return arr[0] >= arr[-1]", "prompt_tokens": 349, "completion_tokens": 98, "duration": 6.926426649093628, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines whether it is possible to perform an exchange of elements\n    between lst1 and lst2 to make lst1 a list of only even numbers.\n    \"\"\"\n    # Count the number of even numbers in lst1 and odd numbers in lst2\n    even_in_lst1 = sum(1 for x in lst1 if x % 2 == 0)\n    odd_in_lst2 = sum(1 for x in lst2 if x % 2 != 0)\n\n    # If the number of odd numbers in lst1 is greater than the number of odd numbers in lst2, return \"NO\"\n    if len(lst1) - even_in_lst1 > odd_in_lst2:\n        return \"NO\"\n    else:\n        return \"YES\"", "prompt_tokens": 247, "completion_tokens": 168, "duration": 12.033640384674072, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    words = test.split()\n    count = {}\n    for word in words:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    max_count = max(count.values(), default=0)\n    return {k: v for k, v in count.items() if v == max_count}", "prompt_tokens": 201, "completion_tokens": 81, "duration": 7.278455972671509, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 4.831895589828491, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 80, "duration": 7.667966842651367, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.181019306182861, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(row.count(1) for row in grid)\n    import math\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 373, "completion_tokens": 41, "duration": 6.1018311977386475, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers based on the number of ones in their binary representation.\n    In case of a tie, it sorts based on the decimal values.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 65, "duration": 7.704304456710815, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() in 'bcdfghjklmnpqrstvwxyz')\n    \n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 66, "duration": 6.092263460159302, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 6.426270246505737, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    '''\n    Given a list of two strings consisting of parentheses, check if it is possible to\n    concatenate them in some order to form a balanced string.\n\n    :param lst: List[str] - A list of two strings, each containing only '(' or ')'\n    :return: str - 'Yes' if it's possible to form a balanced string, 'No' otherwise.\n    '''\n    first, second = lst\n    if first.count('(') == second.count(')') or first.count(')') == second.count('('):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 131, "duration": 9.648630857467651, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 6.136873722076416, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 37, "duration": 6.113229036331177, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 < x < 100)", "prompt_tokens": 178, "completion_tokens": 70, "duration": 7.652598142623901, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Collatz sequence always ends with 1.\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 113, "duration": 9.660794973373413, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into parts\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if parts are integers\n    try:\n        month, day, year = int(parts[0]), int(parts[1]), int(parts[2])\n    except ValueError:\n        return False\n    \n    # Check the range of month and day\n    if month < 1 or month > 12:\n        return False\n    \n    # Define the maximum days per month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_days = 31\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:  # February\n        max_days = 29\n    \n    if day < 1 or day > max_days:\n        return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 239, "duration": 15.85520339012146, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = sum(1 for c in txt if ord(c) % 2 != 0)\n        return odd_count", "prompt_tokens": 190, "completion_tokens": 62, "duration": 7.475714921951294, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        counts = {x: lst.count(x) for x in lst}\n        if any(v > 2 for v in counts.values()):\n            return False\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 58, "duration": 7.3821985721588135, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        sum_of_magnitudes += abs(num)\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n    return sum_of_magnitudes * product_of_signs", "prompt_tokens": 172, "completion_tokens": 111, "duration": 12.68448543548584, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    heap = []\n    for i in range(N):\n        for j in range(N):\n            heappush(heap, (grid[i][j], 1, [(grid[i][j], i, j)]))\n    \n    while heap:\n        val, length, path = heappop(heap)\n        if length == k:\n            return [grid[i][j] for _, i, j in path]\n        for dx, dy in directions:\n            x, y = path[-1][1], path[-1][2]\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                newPath = path + [(grid[nx][ny], nx, ny)]\n                heappush(heap, (newPath[-1][0], length + 1, newPath))", "prompt_tokens": 446, "completion_tokens": 229, "duration": 14.213589429855347, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 1, "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 2]\n    \n    tribonacci = [3, 2]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            next_val = tribonacci[-1] + tribonacci[-2] + (1 + (i + 1) // 2)\n            tribonacci.append(next_val)\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 125, "duration": 12.824751138687134, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.6875083446502686, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    depth = 0\n    for char in string:\n        if char == '[':\n            depth += 1\n        elif char == ']':\n            depth -= 1\n        if depth > 1:\n            return True\n        if depth < 0:\n            return False\n    return False", "prompt_tokens": 183, "completion_tokens": 71, "duration": 7.805450439453125, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 6.405585289001465, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    return txt[-1].isalpha() and txt[-2].isspace()", "prompt_tokens": 187, "completion_tokens": 158, "duration": 12.221259355545044, "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 9.658996343612671, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    neg_int = [x for x in lst if x < 0]\n    pos_int = [x for x in lst if x > 0]\n    return (max(neg_int) if neg_int else None, min(pos_int) if pos_int else None)", "prompt_tokens": 188, "completion_tokens": 68, "duration": 7.850949048995972, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_val, b_val = convert(a), convert(b)\n    \n    if a_val == b_val:\n        return None\n    elif a_val > b_val:\n        return a\n    else:\n        return b", "prompt_tokens": 191, "completion_tokens": 82, "duration": 7.870300531387329, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such sum.\n    if n < 8:\n        return False\n    # For a number to be written as the sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be written as a sum of four even numbers.\n    return n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 140, "duration": 11.473756551742554, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 68, "duration": 8.473223686218262, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    text = re.sub(r' {3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 82, "duration": 11.004373550415039, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Check all conditions using regular expression\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}[a-zA-Z0-9]*\\.(txt|exe|dll)$'\n    if re.fullmatch(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 264, "completion_tokens": 84, "duration": 8.330341815948486, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 8.996315956115723, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    \"\"\"\n    Extracts words from the sentence whose lengths are prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 113, "duration": 10.992891073226929, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 6.747984170913696, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 35, "duration": 6.574664354324341, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_ten(n):\n        str_n = str(abs(n))\n        return n > 10 and int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n    \n    return sum(1 for num in nums if is_odd_and_greater_than_ten(num))", "prompt_tokens": 169, "completion_tokens": 78, "duration": 7.166527271270752, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Calculate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    # Count how many elements of a are divisible by 3, remainder 1 when divided by 3, and remainder 2 when divided by 3\n    count_div_3 = sum(x % 3 == 0 for x in a)\n    count_rem_1 = sum(x % 3 == 1 for x in a)\n    count_rem_2 = sum(x % 3 == 2 for x in a)\n    # Calculate the number of valid triples\n    # There are three cases for valid triples: (div3, div3, div3), (rem1, rem1, rem1), and (rem2, rem2, rem2)\n    # For each case, use the combination formula nC3 = n! / (3!(n-3)!) to calculate the number of ways to choose triples\n    result = 0\n    if count_div_3 >= 3:\n        result += count_div_3 * (count_div_3 - 1) * (count_div_3 - 2) // 6\n    if count_rem_1 >= 3:\n        result += count_rem_1 * (count_rem_1 - 1) * (count_rem_1 - 2) // 6\n    if count_rem_2 >= 3:\n        result += count_rem_2 * (count_rem_2 - 1) * (count_rem_2 - 2) // 6\n    return result", "prompt_tokens": 215, "completion_tokens": 424, "duration": 22.365949869155884, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "prompt_tokens": 261, "completion_tokens": 122, "duration": 11.347753286361694, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    sorted_lst = sorted(filtered_lst, key=lambda s: (len(s), s))\n    return sorted_lst", "prompt_tokens": 237, "completion_tokens": 76, "duration": 8.019057750701904, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 62, "duration": 8.441689252853394, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)", "prompt_tokens": 187, "completion_tokens": 159, "duration": 15.829116821289062, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.782623052597046, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 327, "completion_tokens": 80, "duration": 7.64286732673645, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]  # rotate b\n    return False", "prompt_tokens": 179, "completion_tokens": 64, "duration": 9.096507787704468, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))  # Convert the number to string and make it positive\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)  # Count even digits\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)  # Count odd digits\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 99, "duration": 10.23304533958435, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 203, "duration": 15.495078563690186, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 137, "duration": 11.577799558639526, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    \"\"\"\n    Finds the word with the maximum number of unique characters.\n    If multiple words have the same number, returns the lexicographically first one.\n    \"\"\"\n    return min((word for word in sorted(words)), key=lambda x: (-len(set(x)), x))", "prompt_tokens": 170, "completion_tokens": 64, "duration": 9.312575101852417, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 42, "duration": 7.8199663162231445, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += ' ' + operator[i] + ' ' + str(operand[i + 1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 111, "duration": 8.948600769042969, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 8.764104843139648, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 96, "duration": 10.29916763305664, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 71, "duration": 6.1178693771362305, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 93, "duration": 5.402937173843384, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    \n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            stack.pop()\n            current_group += char\n            if not stack:  # If stack is empty, one group ends\n                result.append(current_group)\n                current_group = \"\"\n    \n    return result", "prompt_tokens": 165, "completion_tokens": 124, "duration": 11.435652732849121, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.339478015899658, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 6.163032054901123, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate Mean Absolute Deviation around the mean of the input numbers.\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 77, "duration": 5.141437530517578, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result += [delimeter, number]\n    return result", "prompt_tokens": 142, "completion_tokens": 109, "duration": 5.564071416854858, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    current_depth = 0\n    max_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            if max_depth > 0:\n                max_depths.append(max_depth)\n                max_depth = 0\n                current_depth = 0\n    \n    # Append the last group's depth if not already done\n    if max_depth > 0:\n        max_depths.append(max_depth)\n    \n    return max_depths", "prompt_tokens": 162, "completion_tokens": 161, "duration": 6.408170700073242, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 90, "duration": 4.404268980026245, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 127, "duration": 8.003801584243774, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 150, "completion_tokens": 63, "duration": 3.8775813579559326, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "is_solved": false, "solved_count": 0, "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    \"\"\"\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 85, "duration": 5.923509836196899, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5458924770355225, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string", "prompt_tokens": 152, "completion_tokens": 110, "duration": 6.251906394958496, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.9745218753814697, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 76, "duration": 4.932122468948364, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 4.362114906311035, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.2260966300964355, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 9.87856936454773, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\"\"\"\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 93, "duration": 4.574025392532349, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 107, "duration": 7.941210746765137, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 119, "duration": 12.650938272476196, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 104, "duration": 5.951208114624023, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 3.4119269847869873, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.114682674407959, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.049576997756958, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 67, "duration": 5.129474878311157, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    from collections import Counter\n    counts = Counter(numbers)\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 82, "duration": 5.181595087051392, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 3.4669322967529297, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.6389334201812744, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 98, "duration": 5.146501541137695, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 8.919448137283325, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.9758059978485107, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    return fsolve(lambda x: poly(xs, x), 0)[0]", "prompt_tokens": 309, "completion_tokens": 190, "duration": 9.056299686431885, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three_sorted = sorted(divisible_by_three)\n    # Replace the original elements with the sorted ones\n    for i in range(len(divisible_by_three_sorted)):\n        l[i * 3] = divisible_by_three_sorted[i]\n    return l", "prompt_tokens": 200, "completion_tokens": 106, "duration": 8.755090951919556, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 2.196974754333496, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 25, "duration": 2.2397406101226807, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 63, "duration": 4.60379695892334, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_indices_values.pop(0)\n    return l", "prompt_tokens": 173, "completion_tokens": 71, "duration": 6.3040525913238525, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 114, "duration": 6.158055782318115, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fib():\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n    \n    fib_gen = fib()\n    count = 0\n    while True:\n        fib_num = next(fib_gen)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "prompt_tokens": 147, "completion_tokens": 149, "duration": 12.04519772529602, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 77, "duration": 7.074530601501465, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n cars moving left to right and n cars moving right to left on a straight line,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 56, "duration": 5.7609336376190186, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 8.648621320724487, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.0334479808807373, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 61, "duration": 3.7501354217529297, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 4.8088202476501465, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 7.237758636474609, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 4.156910181045532, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 23, "duration": 2.728968858718872, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p.\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 37, "duration": 2.5660033226013184, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.033555507659912, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 60, "duration": 3.5992960929870605, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 3.0685110092163086, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 5.81775426864624, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 5.8695666790008545, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 66, "duration": 3.5212080478668213, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            balance += 1\n        elif bracket == \">\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 4.9150450229644775, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 137, "completion_tokens": 55, "duration": 3.675961971282959, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(set(l1).intersection(set(l2)))", "prompt_tokens": 164, "completion_tokens": 28, "duration": 2.4190402030944824, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    while i <= n**0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n        i += 1\n    \n    # Check if n itself is a prime greater than the found prime factors\n    if is_prime(n):\n        return n\n    return prime_factor", "prompt_tokens": 113, "completion_tokens": 152, "duration": 9.441439867019653, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.6224443912506104, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 3.84250545501709, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i*x for i, x in enumerate(xs) if i > 0]", "prompt_tokens": 158, "completion_tokens": 29, "duration": 2.7501437664031982, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 103, "duration": 5.146378755569458, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = sum(1 for char in s if char in vowels)\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "prompt_tokens": 176, "completion_tokens": 67, "duration": 4.976378440856934, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": true, "solved_count": 4, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.5306777954101562, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 41, "duration": 2.528095006942749, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "prompt_tokens": 362, "completion_tokens": 52, "duration": 3.2216312885284424, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    result = -1\n    for num in freq:\n        if num <= freq[num] and num > result:\n            result = num\n    return result", "prompt_tokens": 215, "completion_tokens": 53, "duration": 3.8324878215789795, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.461360216140747, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 195, "duration": 10.612133741378784, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.952268362045288, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 68, "duration": 3.892639636993408, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has total number of chars in all strings of the list less than the other list.\n    If the two lists have the same number of chars, return the first list.\n    '''\n    count_lst1 = sum(len(s) for s in lst1)\n    count_lst2 = sum(len(s) for s in lst2)\n    return lst1 if count_lst1 <= count_lst2 else lst2", "prompt_tokens": 243, "completion_tokens": 109, "duration": 6.620366334915161, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            while a % i == 0:\n                a //= i\n    return prime_factors == 3", "prompt_tokens": 129, "completion_tokens": 125, "duration": 7.380889654159546, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.363219738006592, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    if a >= 0:\n        return round(a ** (1/3)) ** 3 == a\n    else:\n        return round(abs(a) ** (1/3)) ** 3 == abs(a)", "prompt_tokens": 160, "completion_tokens": 54, "duration": 4.368709564208984, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = set('2357BD')\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 36, "duration": 3.0474772453308105, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "prompt_tokens": 189, "completion_tokens": 44, "duration": 5.687199831008911, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 80, "duration": 6.6162192821502686, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Convert a list of GPA scores to their corresponding letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 269, "duration": 14.769484043121338, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.747917652130127, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        # There are 9*(10**(n-2)) numbers that start with 1 and have n digits\n        # There are 10**(n-1) numbers that end with 1 and have n digits\n        # The intersection set of these two sets are the numbers that both start and end with 1, which are 10**(n-2)\n        return 9*(10**(n-2)) + 10**(n-1) - 10**(n-2)", "prompt_tokens": 94, "completion_tokens": 160, "duration": 7.7087695598602295, "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 33, "duration": 3.8283326625823975, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 59, "duration": 4.08804178237915, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 27, "duration": 3.588383436203003, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list and an integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] with coordinates.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda k: (k[0], -k[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 117, "duration": 5.647165060043335, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"\n    if not array:\n        return []\n\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 253, "completion_tokens": 140, "duration": 9.378794431686401, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            result += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            result += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 102, "duration": 5.98836612701416, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 45, "duration": 3.954155683517456, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with \"I\".\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: Number of sentences starting with \"I\".\n    \"\"\"\n    # Split the string into sentences using '.', '?', '!'\n    sentences = []\n    for delimiter in ['.', '?', '!']:\n        if sentences:\n            new_split = []\n            for sentence in sentences:\n                new_split.extend(sentence.split(delimiter))\n            sentences = new_split\n        else:\n            sentences = S.split(delimiter)\n    sentences = [sentence.strip() for sentence in sentences if sentence.strip()]\n\n    # Count sentences starting with \"I\"\n    count = sum(sentence.startswith(\"I\") for sentence in sentences)\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 165, "duration": 7.827242851257324, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 56, "duration": 4.2576680183410645, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case and replacing vowels.\n    \"\"\"\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            # Find the index of the vowel in the alphabet\n            alphabet = 'abcdefghijklmnopqrstuvwxyz'\n            char_lower = char.lower()  # Convert to lowercase to handle uppercase vowels\n            index = alphabet.index(char_lower)\n            # Calculate the new index, considering the circular nature of the alphabet\n            new_index = (index + 2) % 26\n            new_char = alphabet[new_index]\n            # Preserve the original case\n            if char.isupper():\n                return new_char.upper()\n            else:\n                return new_char\n        else:\n            return char\n\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            swapped_char = swap_case(char)\n            replaced_char = replace_vowel(swapped_char)\n            encoded_message += replaced_char\n        else:\n            encoded_message += char\n\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 242, "duration": 10.827568054199219, "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "prompt_tokens": 336, "completion_tokens": 111, "duration": 6.8000452518463135, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not d:\n        return False\n    all_lower = all(isinstance(k, str) and k.islower() for k in d.keys())\n    all_upper = all(isinstance(k, str) and k.isupper() for k in d.keys())\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 116, "duration": 6.234539270401001, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 82, "duration": 5.789792060852051, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 3.7479894161224365, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)", "prompt_tokens": 122, "completion_tokens": 63, "duration": 5.795690536499023, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    number = float(value)\n    if number > 0:\n        if number - int(number) >= 0.5:\n            return int(number) + 1\n        else:\n            return int(number)\n    else:\n        if number - int(number) <= -0.5:\n            return int(number) - 1\n        else:\n            return int(number)", "prompt_tokens": 206, "completion_tokens": 85, "duration": 5.3582847118377686, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 25, "duration": 4.312954902648926, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 4.500898122787476, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"Returns the biggest even integer in the range [x, y] inclusive, or -1 if no even number exists in the range.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 73, "duration": 6.813904762268066, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 4.6692986488342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted(filter(has_no_even_digit, x))", "prompt_tokens": 152, "completion_tokens": 88, "duration": 6.166109323501587, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_sorted_reversed = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [digit_names[num] for num in filtered_sorted_reversed]", "prompt_tokens": 326, "completion_tokens": 107, "duration": 6.505085468292236, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0: return 1\n        return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return x * (x + 1) // 2\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 103, "duration": 7.626409292221069, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 100, "duration": 12.693182706832886, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n))) if n >= 0 else -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n    return sum(1 for x in arr if sum_digits(x) > 0)", "prompt_tokens": 174, "completion_tokens": 72, "duration": 7.929291248321533, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "prompt_tokens": 349, "completion_tokens": 67, "duration": 7.721670389175415, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines whether it is possible to perform an exchange of elements between lst1 and lst2\n    to make lst1 a list of only even numbers.\n    \"\"\"\n    # Count the number of odd elements in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # Count the number of even elements in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even elements in lst2 to replace the odd elements in lst1, return \"YES\"\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 168, "duration": 9.662611961364746, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    hist = {}\n    for word in words:\n        if word in hist:\n            hist[word] += 1\n        else:\n            hist[word] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "prompt_tokens": 201, "completion_tokens": 85, "duration": 8.905746459960938, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join(filter(lambda x: x not in c, s))\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 38, "duration": 6.9586029052734375, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    def count_odd_digits(s):\n        return sum(1 for char in s if int(char) % 2 != 0)\n    \n    result = []\n    for s in lst:\n        count = count_odd_digits(s)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 90, "duration": 7.873712539672852, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 7.370507717132568, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(row.count(1) for row in grid)\n    import math\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 373, "completion_tokens": 41, "duration": 6.1018311977386475, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    \"\"\"\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 137, "duration": 10.671086072921753, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    # Define a list to hold the words with exactly n consonants\n    result = []\n    # Split the input string into words\n    words = s.split()\n    # Define vowels for comparison\n    vowels = 'aeiouAEIOU'\n    # Loop through each word in the words list\n    for word in words:\n        # Initialize a count for consonants\n        consonant_count = 0\n        # Loop through each character in the current word\n        for char in word:\n            # If the character is not a vowel and is an alphabet, increase the consonant count\n            if char not in vowels and char.isalpha():\n                consonant_count += 1\n        # If the consonant count matches the given number, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    # Return the result list\n    return result", "prompt_tokens": 231, "completion_tokens": 196, "duration": 13.103304624557495, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 7.5104005336761475, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    first, second = lst\n    if first.count('(') >= second.count(')') and second.count('(') <= first.count(')'):\n        return 'Yes'\n    if second.count('(') >= first.count(')') and first.count('(') <= second.count(')'):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 79, "duration": 10.340752363204956, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 20, "duration": 5.361988544464111, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 5.717287540435791, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 < x < 100)", "prompt_tokens": 178, "completion_tokens": 70, "duration": 7.652598142623901, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Since the sequence always ends at 1, and 1 is odd.\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 119, "duration": 9.709819316864014, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into components\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if month, day, and year are digits\n    if not (parts[0].isdigit() and parts[1].isdigit() and parts[2].isdigit()):\n        return False\n    \n    month, day, year = int(parts[0]), int(parts[1]), int(parts[2])\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    elif month == 2:\n        if day > 29:\n            return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 268, "duration": 16.52060055732727, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 190, "completion_tokens": 66, "duration": 10.160624980926514, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    if len(lst) != len(set(lst)):\n        duplicates = [x for x in lst if lst.count(x) > 2]\n        if duplicates:\n            return False\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 52, "duration": 6.58048415184021, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.760860443115234, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    heap = []\n    \n    for i in range(N):\n        for j in range(N):\n            heappush(heap, ([grid[i][j]], i, j, 1))\n    \n    while heap:\n        path, x, y, length = heappop(heap)\n        if length == k:\n            return path\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                heappush(heap, (path + [grid[nx][ny]], nx, ny, length + 1))", "prompt_tokens": 446, "completion_tokens": 184, "duration": 11.259764671325684, "result": "passed", "passed": true}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 1, "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 2]\n    \n    tribonacci = [3, 2]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            next_val = tribonacci[-1] + tribonacci[-2] + (1 + (i + 1) // 2)\n            tribonacci.append(next_val)\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 125, "duration": 12.824751138687134, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.127147912979126, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n        if balance >= 2:\n            return True\n    return False", "prompt_tokens": 183, "completion_tokens": 193, "duration": 15.617799520492554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 6.217341184616089, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    return not txt[-2].isalpha() if len(txt) > 1 else True", "prompt_tokens": 187, "completion_tokens": 177, "duration": 13.307818412780762, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 46, "duration": 7.36416482925415, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 80, "duration": 8.498303890228271, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 88, "duration": 8.838150978088379, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest four positive even numbers are 2, 4, 6, 8 and their sum is 20, \n    # any number less than 20 cannot be written as the sum of exactly 4 positive even numbers.\n    if n < 8 or n % 2 != 0:\n        return False\n    # If n is greater or equal to 8 and is even, it can always be represented as the sum of 2, 2, 2, and (n-6).\n    # (n-6) will always be even and positive if n >= 8.\n    return True", "prompt_tokens": 127, "completion_tokens": 166, "duration": 13.47548794746399, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of n.\"\"\"\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 82, "duration": 8.756889343261719, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Replace all spaces in the string with underscores, \n    and if there are more than 2 consecutive spaces, \n    replace all consecutive spaces with a single dash.\n    \"\"\"\n    import re\n    text = re.sub(r' {3,}', '-', text) # Replace 3 or more spaces with a dash\n    text = re.sub(r' ', '_', text) # Replace remaining spaces with underscores\n    return text", "prompt_tokens": 156, "completion_tokens": 98, "duration": 9.967332601547241, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex to match the file name conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{2}[0-9]{0,3}\\.[txt|exe|dll]{3}$'\n    return 'Yes' if re.match(pattern, file_name) else 'No'", "prompt_tokens": 264, "completion_tokens": 85, "duration": 8.52440595626831, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(lst[i]**2 if i % 3 == 0 else lst[i]**3 if i % 4 == 0 else lst[i] for i in range(len(lst)))", "prompt_tokens": 219, "completion_tokens": 49, "duration": 6.622523546218872, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 101, "duration": 9.225059032440186, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    return (num_x * num_n) % (den_x * den_n) == 0", "prompt_tokens": 205, "completion_tokens": 59, "duration": 7.806628227233887, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 35, "duration": 9.84451937675476, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_first_last_digit_odd(n):\n        str_n = str(abs(n))\n        return str_n[0] in '13579' and str_n[-1] in '13579'\n    \n    return sum(1 for num in nums if num > 10 and is_first_last_digit_odd(num))", "prompt_tokens": 169, "completion_tokens": 72, "duration": 8.022238969802856, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    # Generate the array based on given formula\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    # Count of triples\n    count = 0\n    \n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                # Check if the sum of the triple is divisible by 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 215, "completion_tokens": 140, "duration": 15.25611162185669, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])", "prompt_tokens": 261, "completion_tokens": 119, "duration": 8.210850954055786, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    \"\"\"Sorts a list of strings by length after removing odd-length strings.\"\"\"\n    # Remove strings with odd lengths\n    even_length_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_lst.sort()  # Alphabetical sort\n    even_length_lst.sort(key=len)  # Length sort\n    return even_length_lst", "prompt_tokens": 237, "completion_tokens": 100, "duration": 10.530589580535889, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    \"\"\"Returns the value of x if n is a prime number and the value of y otherwise.\"\"\"\n    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 81, "duration": 8.770094871520996, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)", "prompt_tokens": 187, "completion_tokens": 34, "duration": 6.74601411819458, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.498291730880737, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n    \n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 327, "completion_tokens": 80, "duration": 8.35807728767395, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    \"\"\"\n    Check if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False", "prompt_tokens": 179, "completion_tokens": 64, "duration": 9.012350797653198, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.290167570114136, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 203, "duration": 15.125856399536133, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.158298015594482, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word", "prompt_tokens": 170, "completion_tokens": 77, "duration": 8.577604293823242, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \"\"\"\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining_after_meals = max(0, remaining - eaten)\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 327, "completion_tokens": 223, "duration": 15.553940773010254, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i, op in enumerate(operator):\n        expression += f\" {op} {operand[i+1]}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 83, "duration": 9.930832862854004, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 8.978899002075195, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    result = hashlib.md5(text.encode())\n    return result.hexdigest()", "prompt_tokens": 126, "completion_tokens": 101, "duration": 10.89967942237854, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 71, "duration": 8.509052753448486, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    numbers.sort()  # Sort the list to make comparison easier\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 174, "completion_tokens": 100, "duration": 5.863525152206421, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')  # Remove spaces from the string\n    stack = []\n    result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            current_group.append(char)\n            if not stack:  # When stack is empty, a group is complete\n                result.append(''.join(current_group))\n                current_group = []\n    return result", "prompt_tokens": 165, "completion_tokens": 131, "duration": 10.069965600967407, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.415926933288574, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.3240513801574707, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.36517071723938, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result", "prompt_tokens": 142, "completion_tokens": 65, "duration": 5.754338264465332, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 162, "completion_tokens": 201, "duration": 10.8449068069458, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]", "prompt_tokens": 143, "completion_tokens": 104, "duration": 9.396217823028564, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 65, "duration": 4.758231163024902, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for num in numbers[1:]:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "prompt_tokens": 150, "completion_tokens": 72, "duration": 5.2124717235565186, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 118, "duration": 6.5843377113342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 2.8703548908233643, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 81, "duration": 4.892841815948486, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.8341064453125, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 37, "duration": 3.337078332901001, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 118, "completion_tokens": 28, "duration": 2.4949095249176025, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3623576164245605, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 5.53599214553833, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.924618482589722, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 105, "duration": 7.42905855178833, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < min_diff:\n            min_diff = numbers[i+1] - numbers[i]\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 118, "duration": 6.497668266296387, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 105, "duration": 5.955613851547241, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 53, "duration": 4.368587970733643, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.2301719188690186, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 78, "duration": 4.417155981063843, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 79, "duration": 5.726637840270996, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 96, "duration": 6.188704967498779, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 2.6977694034576416, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.704251766204834, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 39, "duration": 2.6051394939422607, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 9.141416072845459, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 4.07520055770874, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(xs: list) -> list:\n        \"\"\"Calculates the derivative of a polynomial given its coefficients.\"\"\"\n        return [i * xs[i] for i in range(1, len(xs))]\n\n    def newton_raphson_method(coefficients, initial_guess=0.0, max_iterations=10000, tolerance=1e-7):\n        \"\"\"Finds a root of a polynomial using the Newton-Raphson method.\"\"\"\n        guess = initial_guess\n        for _ in range(max_iterations):\n            f_guess = poly(coefficients, guess)\n            f_prime_guess = poly(derivative(coefficients), guess)\n            if f_prime_guess == 0:  # Avoid division by zero\n                return guess\n            next_guess = guess - f_guess / f_prime_guess\n            if abs(next_guess - guess) < tolerance:\n                return next_guess\n            guess = next_guess\n        return guess\n\n    return newton_raphson_method(xs)", "prompt_tokens": 309, "completion_tokens": 362, "duration": 20.952109813690186, "result": "passed", "passed": true}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three_elements_sorted = sorted(divisible_by_three_elements)\n    # Replace elements in original list with sorted ones\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = divisible_by_three_elements_sorted.pop(0)\n    return l", "prompt_tokens": 200, "completion_tokens": 179, "duration": 8.83538007736206, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 77, "duration": 4.2632057666778564, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 4.986131191253662, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 5.454546213150024, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    even_indices_values = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices_values.sort()\n    return [even_indices_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.657270431518555, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 134, "duration": 7.776659250259399, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 1, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    fib_gen = fib()\n    count = 0\n    while True:\n        fib_number = next(fib_gen)\n        if is_prime(fib_number):\n            count += 1\n            if count == n:\n                return fib_number", "prompt_tokens": 147, "completion_tokens": 152, "duration": 7.4617297649383545, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        a = l[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False", "prompt_tokens": 209, "completion_tokens": 117, "duration": 5.867268085479736, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculates the number of collisions between two sets of cars, each set containing n cars,\n    moving towards each other on a straight line.\n\n    Parameters:\n    n (int): The number of cars in each set.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    return n**2", "prompt_tokens": 201, "completion_tokens": 81, "duration": 4.512811660766602, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 9.752895832061768, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 2.8663277626037598, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 59, "duration": 5.315738916397095, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 5.74955415725708, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.165939569473267, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.176158905029297, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 80, "duration": 6.092458963394165, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.806905508041382, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 4.547531604766846, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 58, "duration": 3.865807294845581, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 3.015895128250122, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 7.408296346664429, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.6452887058258057, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 4.926467418670654, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack += 1\n        elif bracket == \">\":\n            stack -= 1\n            if stack < 0:\n                return False\n    return stack == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 4.395784139633179, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.4977123737335205, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 40, "duration": 3.0806970596313477, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_factor = 1\n    i = 2\n    \n    while i <= n**0.5 or n == 2:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n /= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n    \n    return int(prime_factor)", "prompt_tokens": 113, "completion_tokens": 159, "duration": 9.056618928909302, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 46, "duration": 4.6212992668151855, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 67, "duration": 4.136567115783691, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6894848346710205, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c", "prompt_tokens": 199, "completion_tokens": 100, "duration": 7.501265525817871, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.lower().endswith('y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"rhythm\"))  # 0\nprint(vowels_count(\"SYZYGY\"))  # 1\nprint(vowels_count(\"quickly\"))  # 2", "prompt_tokens": 176, "completion_tokens": 139, "duration": 10.590349435806274, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": true, "solved_count": 4, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.519407272338867, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    nums = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(nums)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.075874090194702, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n    \"\"\"\n    min_even = float('inf')\n    index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < min_even:\n            min_even = value\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [min_even, index]", "prompt_tokens": 362, "completion_tokens": 188, "duration": 11.267112493515015, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    valid_numbers = [num for num in count if count[num] >= num]\n    return max(valid_numbers) if valid_numbers else -1", "prompt_tokens": 215, "completion_tokens": 50, "duration": 3.089937448501587, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.013467073440552, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 222, "duration": 11.507371664047241, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.1178014278411865, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 4.006330728530884, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list.\n    If the two lists have the same number of chars, return the first list.\n    '''\n    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 100, "duration": 5.170660495758057, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2:\n        return False\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            while a % i == 0:\n                a //= i\n    return prime_factors == 3", "prompt_tokens": 129, "completion_tokens": 136, "duration": 9.14966630935669, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 4.261970520019531, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    root = abs(a) ** (1/3)\n    return int(round(root)) ** 3 == abs(a)", "prompt_tokens": 160, "completion_tokens": 34, "duration": 2.9256913661956787, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = set('2357BD')\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 36, "duration": 4.601905584335327, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_string = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_string}db\"", "prompt_tokens": 189, "completion_tokens": 44, "duration": 3.0204286575317383, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 57, "duration": 4.659956693649292, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 235, "duration": 11.897135972976685, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.866314172744751, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # Only one such number when n = 1, which is 1 itself\n    else:\n        # Count = numbers starting with 1 + numbers ending with 1 - numbers both starting and ending with 1\n        # There are 9*(10**(n-2)) numbers both starting and ending with 1, as the middle digits can be anything.\n        return 2 * (10**(n-1)) - 9 * (10**(n-2))", "prompt_tokens": 94, "completion_tokens": 152, "duration": 8.23445725440979, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum([int(digit) for digit in str(N)])\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 34, "duration": 2.5891923904418945, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.9200329780578613, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Reorders each word in the string based on the ascending ASCII values of its characters.\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 49, "duration": 3.656792163848877, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append((i, j))\n    # Sort by row ascending, then by column descending\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords", "prompt_tokens": 309, "completion_tokens": 166, "duration": 9.15028429031372, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \"\"\"\n    if not array:  # If the array is empty, return an empty array.\n        return array\n    sum_of_first_last = array[0] + array[-1]\n    if sum_of_first_last % 2 == 0:  # If the sum is even, sort in descending order.\n        return sorted(array, reverse=True)\n    else:  # If the sum is odd, sort in ascending order.\n        return sorted(array)", "prompt_tokens": 253, "completion_tokens": 171, "duration": 7.986722946166992, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 160, "completion_tokens": 102, "duration": 6.202141046524048, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element in a list of integers or None if it doesn't exist.\n    \"\"\"\n    unique_sorted_list = sorted(set(lst))\n    if len(unique_sorted_list) < 2:\n        return None\n    return unique_sorted_list[1]", "prompt_tokens": 174, "completion_tokens": 67, "duration": 6.915165185928345, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Splitting the string into sentences\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    # Counting sentences that start with \"I \" or \"I'm\"\n    count = sum(1 for sentence in sentences if sentence.strip().startswith('I '))\n    return count", "prompt_tokens": 157, "completion_tokens": 116, "duration": 8.530887126922607, "result": "passed", "passed": true}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 185, "completion_tokens": 101, "duration": 7.168181657791138, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": false, "solved_count": 0, "generated_code": "def encode(message):\n    \"\"\"\n    Encode the message by swapping case and replacing vowels with the letter 2 places ahead.\n    \"\"\"\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += vowels[char]\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 133, "duration": 7.116775989532471, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum([int(digit) for digit in str(largest_prime)])", "prompt_tokens": 336, "completion_tokens": 113, "duration": 6.079300165176392, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(k, str) and k.islower() for k in dict)\n    all_upper = all(isinstance(k, str) and k.isupper() for k in dict)\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 67, "duration": 5.4458723068237305, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]", "prompt_tokens": 195, "completion_tokens": 82, "duration": 4.144302606582642, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 4.517662286758423, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)", "prompt_tokens": 122, "completion_tokens": 63, "duration": 5.923205614089966, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        if num - int(num) < 0.5:\n            return int(num)\n        else:\n            return int(num) + 1\n    else:\n        if abs(num) - abs(int(num)) < 0.5:\n            return int(num)\n        else:\n            return int(num) - 1", "prompt_tokens": 206, "completion_tokens": 88, "duration": 4.2990782260894775, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 25, "duration": 4.378433704376221, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 6.832147836685181, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"Returns the biggest even integer in the range [x, y] inclusive, or -1 if no such number exists.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 70, "duration": 6.025339365005493, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 5.4028308391571045, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    # Filter elements that don't contain even digits\n    filtered = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    # Return the sorted list of filtered elements\n    return sorted(filtered)", "prompt_tokens": 152, "completion_tokens": 102, "duration": 7.4197797775268555, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_word[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 105, "duration": 9.411033391952515, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    \"\"\"\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    \n    return result", "prompt_tokens": 174, "completion_tokens": 175, "duration": 12.298518180847168, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 100, "duration": 7.395009994506836, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum([int(d) for d in str(n) if d.isdigit()]) - (2*int(str(n)[1]) if n < 0 else 0)\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 72, "duration": 6.665167808532715, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:  # If array is empty\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            count += 1\n            if count > 1:\n                return False\n    if count == 0:\n        return True\n    return arr[0] >= arr[-1]", "prompt_tokens": 349, "completion_tokens": 98, "duration": 6.926426649093628, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines whether it is possible to perform an exchange of elements\n    between lst1 and lst2 to make lst1 a list of only even numbers.\n    \"\"\"\n    # Count the number of even numbers in lst1 and odd numbers in lst2\n    even_in_lst1 = sum(1 for x in lst1 if x % 2 == 0)\n    odd_in_lst2 = sum(1 for x in lst2 if x % 2 != 0)\n\n    # If the number of odd numbers in lst1 is greater than the number of odd numbers in lst2, return \"NO\"\n    if len(lst1) - even_in_lst1 > odd_in_lst2:\n        return \"NO\"\n    else:\n        return \"YES\"", "prompt_tokens": 247, "completion_tokens": 168, "duration": 12.033640384674072, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    words = test.split()\n    count = {}\n    for word in words:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    max_count = max(count.values(), default=0)\n    return {k: v for k, v in count.items() if v == max_count}", "prompt_tokens": 201, "completion_tokens": 81, "duration": 7.278455972671509, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 4.831895589828491, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 80, "duration": 7.667966842651367, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.181019306182861, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_units = sum(row.count(1) for row in grid)\n    return math.ceil(total_units / capacity)", "prompt_tokens": 373, "completion_tokens": 39, "duration": 4.75900673866272, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers based on the number of ones in their binary representation.\n    In case of a tie, it sorts based on the decimal values.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 65, "duration": 7.704304456710815, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() in 'bcdfghjklmnpqrstvwxyz')\n    \n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 66, "duration": 6.092263460159302, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 6.426270246505737, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    '''\n    Given a list of two strings consisting of parentheses, check if it is possible to\n    concatenate them in some order to form a balanced string.\n\n    :param lst: List[str] - A list of two strings, each containing only '(' or ')'\n    :return: str - 'Yes' if it's possible to form a balanced string, 'No' otherwise.\n    '''\n    first, second = lst\n    if first.count('(') == second.count(')') or first.count(')') == second.count('('):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 131, "duration": 9.648630857467651, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 6.136873722076416, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 37, "duration": 6.113229036331177, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 <= abs(x) < 100)", "prompt_tokens": 178, "completion_tokens": 72, "duration": 8.557146072387695, "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Collatz sequence always ends with 1.\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 113, "duration": 9.660794973373413, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into parts\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if parts are integers\n    try:\n        month, day, year = int(parts[0]), int(parts[1]), int(parts[2])\n    except ValueError:\n        return False\n    \n    # Check the range of month and day\n    if month < 1 or month > 12:\n        return False\n    \n    # Define the maximum days per month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_days = 31\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:  # February\n        max_days = 29\n    \n    if day < 1 or day > max_days:\n        return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 239, "duration": 15.85520339012146, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = sum(1 for c in txt if ord(c) % 2 != 0)\n        return odd_count", "prompt_tokens": 190, "completion_tokens": 62, "duration": 7.475714921951294, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        counts = {x: lst.count(x) for x in lst}\n        if any(v > 2 for v in counts.values()):\n            return False\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 58, "duration": 7.3821985721588135, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.525895833969116, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    heap = []\n    for i in range(N):\n        for j in range(N):\n            heappush(heap, (grid[i][j], 1, [(grid[i][j], i, j)]))\n    \n    while heap:\n        val, length, path = heappop(heap)\n        if length == k:\n            return [grid[i][j] for _, i, j in path]\n        for dx, dy in directions:\n            x, y = path[-1][1], path[-1][2]\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                newPath = path + [(grid[nx][ny], nx, ny)]\n                heappush(heap, (newPath[-1][0], length + 1, newPath))", "prompt_tokens": 446, "completion_tokens": 229, "duration": 14.213589429855347, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    sequence = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            next_value = sequence[-1] + sequence[-2] + sequence[0] if i == 3 else sequence[-1] + sequence[-2] + sequence[i-1]\n            sequence.append(next_value)\n    return sequence", "prompt_tokens": 285, "completion_tokens": 130, "duration": 10.766379833221436, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.6875083446502686, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n        if balance >= 2:\n            return True\n    return False", "prompt_tokens": 183, "completion_tokens": 193, "duration": 15.617799520492554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 6.405585289001465, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    return txt[-1].isalpha() and txt[-2].isspace()", "prompt_tokens": 187, "completion_tokens": 158, "duration": 12.221259355545044, "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 9.658996343612671, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    neg_int = [x for x in lst if x < 0]\n    pos_int = [x for x in lst if x > 0]\n    return (max(neg_int) if neg_int else None, min(pos_int) if pos_int else None)", "prompt_tokens": 188, "completion_tokens": 68, "duration": 7.850949048995972, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_val, b_val = convert(a), convert(b)\n    \n    if a_val == b_val:\n        return None\n    elif a_val > b_val:\n        return a\n    else:\n        return b", "prompt_tokens": 191, "completion_tokens": 82, "duration": 7.870300531387329, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such sum.\n    if n < 8:\n        return False\n    # For a number to be written as the sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be written as a sum of four even numbers.\n    return n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 140, "duration": 11.473756551742554, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 68, "duration": 8.473223686218262, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    text = re.sub(r' {3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 82, "duration": 11.004373550415039, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex pattern to match the file name conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{2,}(\\.)(txt|exe|dll)$'\n    # Check if the file name has more than three digits\n    digit_count = sum(c.isdigit() for c in file_name)\n    if digit_count > 3:\n        return 'No'\n    # Check if the file name matches the pattern\n    if re.match(pattern, file_name):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 264, "completion_tokens": 133, "duration": 11.719170570373535, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 8.996315956115723, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    \"\"\"\n    Extracts words from the sentence whose lengths are prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 113, "duration": 10.992891073226929, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 6.747984170913696, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 35, "duration": 6.574664354324341, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_ten(n):\n        str_n = str(abs(n))\n        return n > 10 and int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n    \n    return sum(1 for num in nums if is_odd_and_greater_than_ten(num))", "prompt_tokens": 169, "completion_tokens": 78, "duration": 7.166527271270752, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the elements based on their mod 3 value\n    count_mod = [0, 0, 0]\n    for num in a:\n        count_mod[num % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Combining three numbers each of which gives the same remainder when divided by 3\n    # or combining three numbers with remainders 0, 1, and 2 respectively\n    return (count_mod[0] * (count_mod[0] - 1) * (count_mod[0] - 2) // 6) + \\\n           (count_mod[1] * (count_mod[1] - 1) * (count_mod[1] - 2) // 6) + \\\n           (count_mod[2] * (count_mod[2] - 1) * (count_mod[2] - 2) // 6) + \\\n           (count_mod[0] * count_mod[1] * count_mod[2])", "prompt_tokens": 215, "completion_tokens": 281, "duration": 18.876963138580322, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "prompt_tokens": 261, "completion_tokens": 122, "duration": 11.347753286361694, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    sorted_lst = sorted(filtered_lst, key=lambda s: (len(s), s))\n    return sorted_lst", "prompt_tokens": 237, "completion_tokens": 76, "duration": 8.019057750701904, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 62, "duration": 8.441689252853394, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)", "prompt_tokens": 187, "completion_tokens": 159, "duration": 15.829116821289062, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.782623052597046, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 327, "completion_tokens": 80, "duration": 7.64286732673645, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]  # rotate b\n    return False", "prompt_tokens": 179, "completion_tokens": 64, "duration": 9.096507787704468, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))  # Convert the number to string and make it positive\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)  # Count even digits\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)  # Count odd digits\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 99, "duration": 10.23304533958435, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 203, "duration": 15.495078563690186, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 137, "duration": 11.577799558639526, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    \"\"\"\n    Finds the word with the maximum number of unique characters.\n    If multiple words have the same number, returns the lexicographically first one.\n    \"\"\"\n    return min((word for word in sorted(words)), key=lambda x: (-len(set(x)), x))", "prompt_tokens": 170, "completion_tokens": 64, "duration": 9.312575101852417, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 42, "duration": 7.8199663162231445, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += ' ' + operator[i] + ' ' + str(operand[i + 1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 111, "duration": 8.948600769042969, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 8.764104843139648, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 96, "duration": 10.29916763305664, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return sorted([x for x in range(min(a, b), max(a, b) + 1) if x % 2 == 0])", "prompt_tokens": 154, "completion_tokens": 72, "duration": 8.895665884017944, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 93, "duration": 5.184004783630371, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:  # If stack is empty, a group is completed\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 165, "completion_tokens": 151, "duration": 9.92685604095459, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.600942850112915, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.6241776943206787, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 167, "completion_tokens": 115, "duration": 7.61433482170105, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result += [delimeter, number]\n    return result", "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.203784465789795, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            if max_depth > 0:\n                max_depths.append(max_depth)\n                max_depth = 0\n                current_depth = 0\n    if max_depth > 0:\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 162, "completion_tokens": 147, "duration": 9.045776844024658, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 40, "duration": 3.355964183807373, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 113, "duration": 6.73239541053772, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    rolling_maxes = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        rolling_maxes.append(max_so_far)\n    return rolling_maxes", "prompt_tokens": 150, "completion_tokens": 72, "duration": 5.198610782623291, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 118, "duration": 6.5843377113342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.6700446605682373, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of a list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 152, "completion_tokens": 112, "duration": 8.323522329330444, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.602329969406128, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 109, "completion_tokens": 78, "duration": 5.207324743270874, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 118, "completion_tokens": 28, "duration": 2.748901844024658, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.2993056774139404, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.865995168685913, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\"\"\"\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 93, "duration": 5.5003156661987305, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 105, "duration": 6.175848007202148, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < min_diff:\n            min_diff = numbers[i+1] - numbers[i]\n            pair = (numbers[i], numbers[i+1])\n    return pair", "prompt_tokens": 216, "completion_tokens": 104, "duration": 7.722608804702759, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 105, "duration": 6.250580549240112, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 103, "duration": 6.122820854187012, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.4051690101623535, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.3575446605682373, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 80, "duration": 5.500531196594238, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 96, "duration": 6.119642734527588, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 3.3266348838806152, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.6389334201812744, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 99, "duration": 6.9002063274383545, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 7.832218408584595, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 4.312642812728882, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    return fsolve(lambda x: poly(xs, x), 0)[0]", "prompt_tokens": 309, "completion_tokens": 190, "duration": 10.532405376434326, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_3_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_3_elements.sort()\n    \n    # Insert the sorted elements back into the original list\n    for i, val in enumerate(divisible_by_3_elements):\n        l[i * 3] = val\n    \n    return l", "prompt_tokens": 200, "completion_tokens": 171, "duration": 11.742120504379272, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 26, "duration": 2.414290428161621, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 6.3304829597473145, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 63, "duration": 4.253171443939209, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    \"\"\"Sorts the list l such that the values at even indices are sorted, while odd indices remain unchanged.\"\"\"\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i, value in enumerate(even_indices_values):\n        l[i*2] = value\n    return l", "prompt_tokens": 173, "completion_tokens": 85, "duration": 7.437806606292725, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 134, "duration": 7.880993366241455, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib_seq(limit):\n        a, b = 0, 1\n        for _ in range(limit):\n            yield a\n            a, b = b, a + b\n\n    count, fib_number = 0, 0\n    for fib in fib_seq(227000):  # Increased limit to ensure we find the n-th prime Fibonacci number\n        if is_prime(fib) and fib != 0:\n            count += 1\n            if count == n:\n                return fib", "prompt_tokens": 147, "completion_tokens": 173, "duration": 9.531513929367065, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        a = l[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False", "prompt_tokens": 209, "completion_tokens": 117, "duration": 7.034353733062744, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since all cars have the same speed and start far apart, every car moving left to right\n    will eventually collide with each car moving right to left. Thus, the total number of\n    collisions is simply the product of the number of cars in each direction.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 79, "duration": 5.909088134765625, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 6.023825645446777, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.5380194187164307, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 59, "duration": 4.388824701309204, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 5.479550838470459, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 7.267601490020752, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 3.3562259674072266, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 80, "duration": 5.099176645278931, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.377926826477051, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 2.8789665699005127, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 37, "duration": 3.1520307064056396, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 3.0921270847320557, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 6.229273319244385, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.5202748775482178, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.851690292358398, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 68, "duration": 4.628933906555176, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 61, "duration": 3.6932373046875, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 40, "duration": 4.069079637527466, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_factor = 1\n    i = 2\n\n    while i <= n ** 0.5 or n == 2:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):  # If n is a prime number greater than 2\n        prime_factor = n\n    \n    return prime_factor", "prompt_tokens": 113, "completion_tokens": 171, "duration": 9.444586515426636, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.009448289871216, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 5.694744825363159, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.3204519748687744, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 96, "duration": 5.019906520843506, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.lower().endswith('y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Should return 2\nprint(vowels_count(\"ACEDY\"))  # Should return 3\nprint(vowels_count(\"rhythm\"))  # Should return 0\nprint(vowels_count(\"SYZYGY\"))  # Should return 1\nprint(vowels_count(\"quiet\"))  # Should return 3", "prompt_tokens": 176, "completion_tokens": 138, "duration": 8.219827651977539, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": true, "solved_count": 4, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.2385733127593994, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    # Extract numbers from the string\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    # Calculate the number of mangoes by subtracting the sum of apples and oranges from total fruits\n    mangoes = n - sum(numbers)\n    return mangoes", "prompt_tokens": 260, "completion_tokens": 71, "duration": 4.347940921783447, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "prompt_tokens": 362, "completion_tokens": 52, "duration": 3.1909124851226807, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    valid_numbers = [num for num, count in freq.items() if num <= count]\n    return max(valid_numbers) if valid_numbers else -1", "prompt_tokens": 215, "completion_tokens": 52, "duration": 3.4156415462493896, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result", "prompt_tokens": 174, "completion_tokens": 46, "duration": 3.6075000762939453, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        # Heron's formula to calculate area of a triangle with sides a, b, c\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 181, "duration": 8.835237503051758, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.577023983001709, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 4.0771801471710205, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 49, "duration": 4.414738655090332, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            a = a // i\n            if a == 1 or prime_factors > 3:\n                break\n    return prime_factors == 3", "prompt_tokens": 129, "completion_tokens": 134, "duration": 7.220714569091797, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.564862012863159, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    root = round(abs_a ** (1/3))\n    return root**3 == abs_a", "prompt_tokens": 160, "completion_tokens": 48, "duration": 4.699963092803955, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = set('2357BD')\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 36, "duration": 4.187698841094971, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary}db\"", "prompt_tokens": 189, "completion_tokens": 42, "duration": 3.718564748764038, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 57, "duration": 3.606152057647705, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Converts a list of GPAs to letter grades based on specified criteria.\n    \"\"\"\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 254, "duration": 16.971424102783203, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.866895914077759, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * (10 ** (n - 1)) - (10 ** (n - 2))", "prompt_tokens": 94, "completion_tokens": 81, "duration": 4.646977186203003, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 33, "duration": 2.3595399856567383, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 5.1271326541900635, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.7413971424102783, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 154, "duration": 23.750396728515625, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"\n    if not array:  # Check if the array is empty\n        return []\n    \n    # Determine the sorting order based on the sum of the first and last elements\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 253, "completion_tokens": 161, "duration": 8.832568883895874, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - 97 + 4) % 26) + 97)\n            result += shifted\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 64, "duration": 4.709034204483032, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    return unique_sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 42, "duration": 3.6073429584503174, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Count the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    sentences = [sentence.strip() for sentence in S.replace('?', '.').replace('!', '.').split('.')]\n    return sum(sentence.startswith('I') for sentence in sentences if sentence)", "prompt_tokens": 157, "completion_tokens": 92, "duration": 6.678186893463135, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 56, "duration": 4.136426687240601, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": false, "solved_count": 0, "generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    swap = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n            'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += swap[char]\n        elif char.isalpha():\n            encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 135, "duration": 7.213869333267212, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    from math import sqrt\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = max(filter(is_prime, lst), default=0)\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 336, "completion_tokens": 98, "duration": 5.527128219604492, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 69, "duration": 4.925791263580322, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [num for num in range(2, n) if is_prime(num)]", "prompt_tokens": 195, "completion_tokens": 110, "duration": 9.751034259796143, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 3.2276790142059326, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)", "prompt_tokens": 122, "completion_tokens": 63, "duration": 3.791168689727783, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    number = float(value)\n    if number > 0:\n        if number - int(number) >= 0.5:\n            return int(number) + 1\n        else:\n            return int(number)\n    else:\n        if number - int(number) <= -0.5:\n            return int(number) - 1\n        else:\n            return int(number)", "prompt_tokens": 206, "completion_tokens": 85, "duration": 6.609374046325684, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The next level has the next odd number if n is odd, or the next even number if n is even.\n    Return the number of stones in each level in a list.\n    \"\"\"\n    stones = []\n    current_stone_count = n\n    for _ in range(n):\n        stones.append(current_stone_count)\n        if current_stone_count % 2 == 0:\n            current_stone_count += 2\n        else:\n            current_stone_count += 2\n    return stones", "prompt_tokens": 182, "completion_tokens": 144, "duration": 13.04182243347168, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 4.020533084869385, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 125, "duration": 15.7046217918396, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 6.0968358516693115, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(number):\n        return all(int(digit) % 2 != 0 for digit in str(number))\n    \n    result = [num for num in x if has_no_even_digit(num)]\n    return sorted(result)", "prompt_tokens": 152, "completion_tokens": 98, "duration": 8.50049114227295, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    sorted_filtered = sorted([x for x in arr if 1 <= x <= 9])\n    reversed_sorted = sorted_filtered[::-1]\n    return [num_to_word[x] for x in reversed_sorted]", "prompt_tokens": 326, "completion_tokens": 111, "duration": 8.197126388549805, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 108, "duration": 8.775911808013916, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 99, "duration": 6.727648735046387, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n))) if n >= 0 else -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 75, "duration": 9.100237131118774, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "prompt_tokens": 349, "completion_tokens": 67, "duration": 7.721670389175415, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 84, "duration": 6.982749700546265, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    from collections import Counter\n    # Split the string into a list of words/letters\n    words = test.split()\n    # Count occurrences of each letter\n    counts = Counter(words)\n    # Find the maximum occurrence\n    max_occurrence = max(counts.values(), default=0)\n    # Filter letters that have the maximum occurrence and create a dictionary\n    return {letter: count for letter, count in counts.items() if count == max_occurrence}", "prompt_tokens": 201, "completion_tokens": 103, "duration": 8.311358213424683, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 4.84127140045166, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 80, "duration": 8.33867073059082, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 135, "duration": 10.821414947509766, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_units = sum(row.count(1) for row in grid)\n    return math.ceil(total_units / capacity)", "prompt_tokens": 373, "completion_tokens": 39, "duration": 4.75900673866272, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers based on the number of ones in their binary representation,\n    then by their decimal value if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 65, "duration": 6.968991994857788, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = sum(1 for char in word if char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n            \n    return result", "prompt_tokens": 231, "completion_tokens": 73, "duration": 6.705889463424683, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 7.5104005336761475, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    '''\n    Given a list of two strings, checks if it is possible to concatenate the two strings in\n    some order, so the resulting string will be good. A string is considered to be good\n    if all parentheses in it are balanced.\n    \n    Parameters:\n    lst (list): A list of two strings, each containing only '(' and/or ')'.\n    \n    Returns:\n    str: 'Yes' if there's a way to make a good string by concatenating the two strings,\n         'No' otherwise.\n    '''\n    first, second = lst\n    # If both strings start with ')' or end with '(', it's impossible to balance them.\n    if (first[0] == ')' and second[0] == ')') or (first[-1] == '(' and second[-1] == '('):\n        return 'No'\n    # Count parentheses in both strings\n    first_balance = first.count('(') - first.count(')')\n    second_balance = second.count('(') - second.count(')')\n    # If the sum of balance is not 0, it's impossible to balance.\n    if first_balance + second_balance != 0:\n        return 'No'\n    # If any string has more closing than opening parentheses, it should go first.\n    if first_balance < 0 or second_balance < 0:\n        return 'Yes'\n    # If both strings have more opening parentheses, the one with less should go first.\n    if first_balance <= second_balance:\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 325, "duration": 17.415884494781494, "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 6.100834369659424, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 6.179059982299805, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 <= abs(x) < 100)", "prompt_tokens": 178, "completion_tokens": 72, "duration": 8.557146072387695, "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 98, "duration": 8.388930797576904, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    # Split the date into parts\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month, day, year = parts\n\n    # Check if month, day, and year are integers\n    try:\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except ValueError:\n        return False\n\n    # Check if month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n\n    return True", "prompt_tokens": 313, "completion_tokens": 249, "duration": 19.20053458213806, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 6.928248643875122, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):  # Check for any duplicates\n        counts = {x: lst.count(x) for x in lst}\n        for count in counts.values():\n            if count > 2:  # If any number appears more than twice, return False\n                return False\n    return lst == sorted(lst)  # Check if the list is sorted in ascending order", "prompt_tokens": 299, "completion_tokens": 91, "duration": 25.1659893989563, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 77, "duration": 7.607611417770386, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    # Convert grid values to (value, row, col) tuples\n    flat_grid = [(val, i, j) for i, row in enumerate(grid) for j, val in enumerate(row)]\n    # Sort the flat grid to get the smallest value's position\n    flat_grid.sort()\n    # Starting point is the smallest value\n    start_val, start_row, start_col = flat_grid[0]\n\n    # Priority queue; each element is (path as list, last value, last row, last col, steps taken)\n    pq = [([start_val], start_val, start_row, start_col, 1)]\n    visited = set()\n\n    while pq:\n        path, last_val, r, c, steps = heappop(pq)\n        if steps == k:\n            return path\n        if (r, c, steps) in visited:\n            continue\n        visited.add((r, c, steps))\n\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            new_r, new_c = r + dr, c + dc\n            if 0 <= new_r < N and 0 <= new_c < N:\n                new_val = grid[new_r][new_c]\n                new_path = path + [new_val]\n                heappush(pq, (new_path, new_val, new_r, new_c, steps + 1))", "prompt_tokens": 446, "completion_tokens": 331, "duration": 28.545739889144897, "result": "passed", "passed": true}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\n    tribonacci = [1, 3, 2]\n\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 137, "duration": 10.916350603103638, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.193249702453613, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n        if balance >= 2:\n            return True\n    return False", "prompt_tokens": 183, "completion_tokens": 193, "duration": 15.617799520492554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.404160499572754, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1:].isalpha() and not txt[-2:].isalpha() if txt else False", "prompt_tokens": 187, "completion_tokens": 37, "duration": 6.14909291267395, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 7.14342474937439, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 80, "duration": 9.109614372253418, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def parse_value(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    \n    a_parsed = parse_value(a)\n    b_parsed = parse_value(b)\n    \n    if a_parsed == b_parsed:\n        return None\n    elif a_parsed > b_parsed:\n        return a\n    else:\n        return b", "prompt_tokens": 191, "completion_tokens": 86, "duration": 7.722904205322266, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest four positive even numbers are 2, 4, 6, 8 and their sum is 20, \n    # any number less than 20 cannot be written as the sum of exactly 4 positive even numbers.\n    if n < 8 or n % 2 != 0:\n        return False\n    # If n is greater or equal to 8 and is even, it can always be represented as the sum of 2, 2, 2, and (n-6).\n    # (n-6) will always be even and positive if n >= 8.\n    return True", "prompt_tokens": 127, "completion_tokens": 166, "duration": 13.47548794746399, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 75, "duration": 9.642045497894287, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n    \"\"\"\n    # Replace more than 2 consecutive spaces with \"-\"\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces with \"_\"\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 97, "duration": 8.30896282196045, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex pattern to match the file name conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{2,}(\\.)(txt|exe|dll)$'\n    # Check if the file name has more than three digits\n    digit_count = sum(c.isdigit() for c in file_name)\n    if digit_count > 3:\n        return 'No'\n    # Check if the file name matches the pattern\n    if re.match(pattern, file_name):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 264, "completion_tokens": 133, "duration": 11.719170570373535, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(lst[i]**2 if i % 3 == 0 else lst[i]**3 if i % 4 == 0 else lst[i] for i in range(len(lst)))", "prompt_tokens": 219, "completion_tokens": 49, "duration": 7.090923309326172, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 96, "duration": 9.64962887763977, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 6.164813280105591, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 35, "duration": 6.7222912311553955, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_first_and_last_digit_odd(n):\n        n_str = str(abs(n))  # Convert number to string, taking absolute value to handle negative numbers\n        return n_str[0] in '13579' and n_str[-1] in '13579'\n    \n    return sum(1 for n in nums if n > 10 and is_first_and_last_digit_odd(n))", "prompt_tokens": 169, "completion_tokens": 89, "duration": 11.2549729347229, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Generate the array as per the given condition\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the frequency of remainders when elements are divided by 3\n    remainder_counts = [0, 0, 0]\n    for value in a:\n        remainder_counts[value % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Combination formula: nC3 = n! / (3! * (n-3)!)\n    # For a[i] + a[j] + a[k] to be divisible by 3, all three numbers must have the same remainder when divided by 3\n    # or they must have remainders 0, 1, and 2 respectively.\n    valid_triples = 0\n    for count in remainder_counts:\n        if count >= 3:\n            valid_triples += count * (count - 1) * (count - 2) // 6  # Combination formula for 3 elements from count\n    \n    # Special case: one element from each remainder category\n    if all(count > 0 for count in remainder_counts):\n        valid_triples += remainder_counts[0] * remainder_counts[1] * remainder_counts[2]\n    \n    return valid_triples", "prompt_tokens": 215, "completion_tokens": 363, "duration": 19.876725673675537, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    return tuple(planets[start+1:end])", "prompt_tokens": 261, "completion_tokens": 109, "duration": 8.805082321166992, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 237, "completion_tokens": 75, "duration": 8.6152925491333, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 7.978659391403198, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 40, "duration": 7.3753838539123535, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 7.490201234817505, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        return CAP - SM\n\n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 327, "completion_tokens": 78, "duration": 9.43459415435791, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    b_rotated = b * 2\n    return any(b_rotated[i:i+len(b)] in a for i in range(len(b)))", "prompt_tokens": 179, "completion_tokens": 55, "duration": 6.712971210479736, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    num = abs(num) # Make sure the number is positive\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 95, "duration": 10.208034992218018, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    value_map = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = ''\n    for value, numeral in value_map:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral", "prompt_tokens": 151, "completion_tokens": 178, "duration": 12.785280704498291, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 8.03945779800415, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word", "prompt_tokens": 170, "completion_tokens": 77, "duration": 8.577604293823242, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    return [number + eaten, remaining - eaten]", "prompt_tokens": 327, "completion_tokens": 32, "duration": 6.842845439910889, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, val in zip(operator, operand[1:]):\n        expression += f\" {op} {val}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 51, "duration": 7.818987131118774, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)", "prompt_tokens": 157, "completion_tokens": 51, "duration": 7.646723031997681, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        hash_object = hashlib.md5(text.encode())\n        return hash_object.hexdigest()", "prompt_tokens": 126, "completion_tokens": 106, "duration": 10.319803953170776, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return sorted(set(range(a, b+1)).union(set(range(b, a+1))) & set(range(0, max(a, b)+1, 2)))", "prompt_tokens": 154, "completion_tokens": 48, "duration": 7.869380712509155, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    numbers.sort()  # Sort the list to make comparison easier\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 174, "completion_tokens": 100, "duration": 5.863525152206421, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')  # Remove spaces from the string\n    stack = []\n    result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            current_group.append(char)\n            if not stack:  # When stack is empty, a group is complete\n                result.append(''.join(current_group))\n                current_group = []\n    return result", "prompt_tokens": 165, "completion_tokens": 131, "duration": 10.069965600967407, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.415926933288574, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.3240513801574707, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.36517071723938, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result", "prompt_tokens": 142, "completion_tokens": 65, "duration": 5.754338264465332, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 162, "completion_tokens": 201, "duration": 10.8449068069458, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]", "prompt_tokens": 143, "completion_tokens": 104, "duration": 9.396217823028564, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 65, "duration": 4.758231163024902, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for num in numbers[1:]:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "prompt_tokens": 150, "completion_tokens": 72, "duration": 5.2124717235565186, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 118, "duration": 6.5843377113342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 2.8703548908233643, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 81, "duration": 4.892841815948486, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.8341064453125, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 37, "duration": 3.337078332901001, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 118, "completion_tokens": 28, "duration": 2.4949095249176025, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3623576164245605, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 5.53599214553833, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.924618482589722, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 105, "duration": 7.42905855178833, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < min_diff:\n            min_diff = numbers[i+1] - numbers[i]\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 118, "duration": 6.497668266296387, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 105, "duration": 5.955613851547241, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 53, "duration": 4.368587970733643, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.2301719188690186, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 78, "duration": 4.417155981063843, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 79, "duration": 5.726637840270996, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 96, "duration": 6.188704967498779, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 2.6977694034576416, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.704251766204834, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 39, "duration": 2.6051394939422607, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 9.141416072845459, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 4.07520055770874, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(xs: list) -> list:\n        \"\"\"Calculates the derivative of a polynomial given its coefficients.\"\"\"\n        return [i * xs[i] for i in range(1, len(xs))]\n\n    def newton_raphson_method(coefficients, initial_guess=0.0, max_iterations=10000, tolerance=1e-7):\n        \"\"\"Finds a root of a polynomial using the Newton-Raphson method.\"\"\"\n        guess = initial_guess\n        for _ in range(max_iterations):\n            f_guess = poly(coefficients, guess)\n            f_prime_guess = poly(derivative(coefficients), guess)\n            if f_prime_guess == 0:  # Avoid division by zero\n                return guess\n            next_guess = guess - f_guess / f_prime_guess\n            if abs(next_guess - guess) < tolerance:\n                return next_guess\n            guess = next_guess\n        return guess\n\n    return newton_raphson_method(xs)", "prompt_tokens": 309, "completion_tokens": 362, "duration": 20.952109813690186, "result": "passed", "passed": true}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three_elements_sorted = sorted(divisible_by_three_elements)\n    # Replace elements in original list with sorted ones\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = divisible_by_three_elements_sorted.pop(0)\n    return l", "prompt_tokens": 200, "completion_tokens": 179, "duration": 8.83538007736206, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 77, "duration": 4.2632057666778564, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 4.986131191253662, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 5.454546213150024, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    even_indices_values = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices_values.sort()\n    return [even_indices_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.657270431518555, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 134, "duration": 7.776659250259399, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 1, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    fib_gen = fib()\n    count = 0\n    while True:\n        fib_number = next(fib_gen)\n        if is_prime(fib_number):\n            count += 1\n            if count == n:\n                return fib_number", "prompt_tokens": 147, "completion_tokens": 152, "duration": 7.4617297649383545, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        a = l[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False", "prompt_tokens": 209, "completion_tokens": 117, "duration": 5.867268085479736, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculates the number of collisions between two sets of cars, each set containing n cars,\n    moving towards each other on a straight line.\n\n    Parameters:\n    n (int): The number of cars in each set.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    return n**2", "prompt_tokens": 201, "completion_tokens": 81, "duration": 4.512811660766602, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 9.752895832061768, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 2.8663277626037598, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 59, "duration": 5.315738916397095, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 5.74955415725708, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.165939569473267, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.176158905029297, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 80, "duration": 6.092458963394165, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.806905508041382, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 4.547531604766846, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 58, "duration": 3.865807294845581, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 3.015895128250122, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 7.408296346664429, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.6452887058258057, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 4.926467418670654, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack += 1\n        elif bracket == \">\":\n            stack -= 1\n            if stack < 0:\n                return False\n    return stack == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 4.395784139633179, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.4977123737335205, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 40, "duration": 3.0806970596313477, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_factor = 1\n    i = 2\n    \n    while i <= n**0.5 or n == 2:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n /= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n    \n    return int(prime_factor)", "prompt_tokens": 113, "completion_tokens": 159, "duration": 9.056618928909302, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 46, "duration": 4.6212992668151855, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 67, "duration": 4.136567115783691, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6894848346710205, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c", "prompt_tokens": 199, "completion_tokens": 100, "duration": 7.501265525817871, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.lower().endswith('y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"rhythm\"))  # 0\nprint(vowels_count(\"SYZYGY\"))  # 1\nprint(vowels_count(\"quickly\"))  # 2", "prompt_tokens": 176, "completion_tokens": 139, "duration": 10.590349435806274, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": true, "solved_count": 4, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.519407272338867, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    nums = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(nums)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.075874090194702, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n    \"\"\"\n    min_even = float('inf')\n    index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < min_even:\n            min_even = value\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [min_even, index]", "prompt_tokens": 362, "completion_tokens": 188, "duration": 11.267112493515015, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    valid_numbers = [num for num in count if count[num] >= num]\n    return max(valid_numbers) if valid_numbers else -1", "prompt_tokens": 215, "completion_tokens": 50, "duration": 3.089937448501587, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.013467073440552, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 222, "duration": 11.507371664047241, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.1178014278411865, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 4.006330728530884, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list.\n    If the two lists have the same number of chars, return the first list.\n    '''\n    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 100, "duration": 5.170660495758057, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2:\n        return False\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            while a % i == 0:\n                a //= i\n    return prime_factors == 3", "prompt_tokens": 129, "completion_tokens": 136, "duration": 9.14966630935669, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 4.261970520019531, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    root = abs(a) ** (1/3)\n    return int(round(root)) ** 3 == abs(a)", "prompt_tokens": 160, "completion_tokens": 34, "duration": 2.9256913661956787, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = set('2357BD')\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 36, "duration": 4.601905584335327, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_string = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_string}db\"", "prompt_tokens": 189, "completion_tokens": 44, "duration": 3.0204286575317383, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 57, "duration": 4.659956693649292, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 235, "duration": 11.897135972976685, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.866314172744751, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # Only one such number when n = 1, which is 1 itself\n    else:\n        # Count = numbers starting with 1 + numbers ending with 1 - numbers both starting and ending with 1\n        # There are 9*(10**(n-2)) numbers both starting and ending with 1, as the middle digits can be anything.\n        return 2 * (10**(n-1)) - 9 * (10**(n-2))", "prompt_tokens": 94, "completion_tokens": 152, "duration": 8.23445725440979, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum([int(digit) for digit in str(N)])\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 34, "duration": 2.5891923904418945, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.9200329780578613, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Reorders each word in the string based on the ascending ASCII values of its characters.\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 49, "duration": 3.656792163848877, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append((i, j))\n    # Sort by row ascending, then by column descending\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords", "prompt_tokens": 309, "completion_tokens": 166, "duration": 9.15028429031372, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \"\"\"\n    if not array:  # If the array is empty, return an empty array.\n        return array\n    sum_of_first_last = array[0] + array[-1]\n    if sum_of_first_last % 2 == 0:  # If the sum is even, sort in descending order.\n        return sorted(array, reverse=True)\n    else:  # If the sum is odd, sort in ascending order.\n        return sorted(array)", "prompt_tokens": 253, "completion_tokens": 171, "duration": 7.986722946166992, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 160, "completion_tokens": 102, "duration": 6.202141046524048, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element in a list of integers or None if it doesn't exist.\n    \"\"\"\n    unique_sorted_list = sorted(set(lst))\n    if len(unique_sorted_list) < 2:\n        return None\n    return unique_sorted_list[1]", "prompt_tokens": 174, "completion_tokens": 67, "duration": 6.915165185928345, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Splitting the string into sentences\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    # Counting sentences that start with \"I \" or \"I'm\"\n    count = sum(1 for sentence in sentences if sentence.strip().startswith('I '))\n    return count", "prompt_tokens": 157, "completion_tokens": 116, "duration": 8.530887126922607, "result": "passed", "passed": true}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 185, "completion_tokens": 101, "duration": 7.168181657791138, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case and replacing vowels.\n    \"\"\"\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            # Find the index of the vowel in the alphabet\n            alphabet = 'abcdefghijklmnopqrstuvwxyz'\n            char_lower = char.lower()  # Convert to lowercase to handle uppercase vowels\n            index = alphabet.index(char_lower)\n            # Calculate the new index, considering the circular nature of the alphabet\n            new_index = (index + 2) % 26\n            new_char = alphabet[new_index]\n            # Preserve the original case\n            if char.isupper():\n                return new_char.upper()\n            else:\n                return new_char\n        else:\n            return char\n\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            swapped_char = swap_case(char)\n            replaced_char = replace_vowel(swapped_char)\n            encoded_message += replaced_char\n        else:\n            encoded_message += char\n\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 242, "duration": 10.827568054199219, "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sum([int(digit) for digit in str(largest_prime)])", "prompt_tokens": 336, "completion_tokens": 112, "duration": 5.940928936004639, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(k, str) and k.islower() for k in dict)\n    all_upper = all(isinstance(k, str) and k.isupper() for k in dict)\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 67, "duration": 5.4458723068237305, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]", "prompt_tokens": 195, "completion_tokens": 82, "duration": 4.144302606582642, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 4.517662286758423, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)", "prompt_tokens": 122, "completion_tokens": 63, "duration": 5.923205614089966, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        if num - int(num) < 0.5:\n            return int(num)\n        else:\n            return int(num) + 1\n    else:\n        if abs(num) - abs(int(num)) < 0.5:\n            return int(num)\n        else:\n            return int(num) - 1", "prompt_tokens": 206, "completion_tokens": 88, "duration": 4.2990782260894775, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 25, "duration": 4.378433704376221, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 6.832147836685181, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"Returns the biggest even integer in the range [x, y] inclusive, or -1 if no such number exists.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 70, "duration": 6.025339365005493, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 5.4028308391571045, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    # Filter elements that don't contain even digits\n    filtered = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    # Return the sorted list of filtered elements\n    return sorted(filtered)", "prompt_tokens": 152, "completion_tokens": 102, "duration": 7.4197797775268555, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_word[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 105, "duration": 9.411033391952515, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    \"\"\"\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    \n    return result", "prompt_tokens": 174, "completion_tokens": 175, "duration": 12.298518180847168, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 100, "duration": 7.395009994506836, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n))) if n >= 0 else -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 74, "duration": 7.7985875606536865, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:  # If array is empty\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            count += 1\n            if count > 1:\n                return False\n    if count == 0:\n        return True\n    return arr[0] >= arr[-1]", "prompt_tokens": 349, "completion_tokens": 98, "duration": 6.926426649093628, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines whether it is possible to perform an exchange of elements\n    between lst1 and lst2 to make lst1 a list of only even numbers.\n    \"\"\"\n    # Count the number of even numbers in lst1 and odd numbers in lst2\n    even_in_lst1 = sum(1 for x in lst1 if x % 2 == 0)\n    odd_in_lst2 = sum(1 for x in lst2 if x % 2 != 0)\n\n    # If the number of odd numbers in lst1 is greater than the number of odd numbers in lst2, return \"NO\"\n    if len(lst1) - even_in_lst1 > odd_in_lst2:\n        return \"NO\"\n    else:\n        return \"YES\"", "prompt_tokens": 247, "completion_tokens": 168, "duration": 12.033640384674072, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    words = test.split()\n    count = {}\n    for word in words:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    max_count = max(count.values(), default=0)\n    return {k: v for k, v in count.items() if v == max_count}", "prompt_tokens": 201, "completion_tokens": 81, "duration": 7.278455972671509, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 4.831895589828491, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 80, "duration": 7.667966842651367, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.181019306182861, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_units = sum(row.count(1) for row in grid)\n    return math.ceil(total_units / capacity)", "prompt_tokens": 373, "completion_tokens": 39, "duration": 4.75900673866272, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers based on the number of ones in their binary representation.\n    In case of a tie, it sorts based on the decimal values.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 65, "duration": 7.704304456710815, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() in 'bcdfghjklmnpqrstvwxyz')\n    \n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 66, "duration": 6.092263460159302, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 6.426270246505737, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    '''\n    Given a list of two strings consisting of parentheses, check if it is possible to\n    concatenate them in some order to form a balanced string.\n\n    :param lst: List[str] - A list of two strings, each containing only '(' or ')'\n    :return: str - 'Yes' if it's possible to form a balanced string, 'No' otherwise.\n    '''\n    first, second = lst\n    if first.count('(') == second.count(')') or first.count(')') == second.count('('):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 131, "duration": 9.648630857467651, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 6.136873722076416, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 37, "duration": 6.113229036331177, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 <= abs(x) < 100)", "prompt_tokens": 178, "completion_tokens": 72, "duration": 8.557146072387695, "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Collatz sequence always ends with 1.\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 113, "duration": 9.660794973373413, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into parts\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if parts are integers\n    try:\n        month, day, year = int(parts[0]), int(parts[1]), int(parts[2])\n    except ValueError:\n        return False\n    \n    # Check the range of month and day\n    if month < 1 or month > 12:\n        return False\n    \n    # Define the maximum days per month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_days = 31\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:  # February\n        max_days = 29\n    \n    if day < 1 or day > max_days:\n        return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 239, "duration": 15.85520339012146, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = sum(1 for c in txt if ord(c) % 2 != 0)\n        return odd_count", "prompt_tokens": 190, "completion_tokens": 62, "duration": 7.475714921951294, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        counts = {x: lst.count(x) for x in lst}\n        if any(v > 2 for v in counts.values()):\n            return False\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 58, "duration": 7.3821985721588135, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n    magnitude_sum = sum(abs(num) for num in arr)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 76, "duration": 14.698678016662598, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    heap = []\n    for i in range(N):\n        for j in range(N):\n            heappush(heap, (grid[i][j], 1, [(grid[i][j], i, j)]))\n    \n    while heap:\n        val, length, path = heappop(heap)\n        if length == k:\n            return [grid[i][j] for _, i, j in path]\n        for dx, dy in directions:\n            x, y = path[-1][1], path[-1][2]\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                newPath = path + [(grid[nx][ny], nx, ny)]\n                heappush(heap, (newPath[-1][0], length + 1, newPath))", "prompt_tokens": 446, "completion_tokens": 229, "duration": 14.213589429855347, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    sequence = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            next_value = sequence[-1] + sequence[-2] + sequence[0] if i == 3 else sequence[-1] + sequence[-2] + sequence[i-1]\n            sequence.append(next_value)\n    return sequence", "prompt_tokens": 285, "completion_tokens": 130, "duration": 10.766379833221436, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.6875083446502686, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n        if balance >= 2:\n            return True\n    return False", "prompt_tokens": 183, "completion_tokens": 193, "duration": 15.617799520492554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 6.405585289001465, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    return txt[-1].isalpha() and txt[-2].isspace()", "prompt_tokens": 187, "completion_tokens": 158, "duration": 12.221259355545044, "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 9.658996343612671, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    neg_int = [x for x in lst if x < 0]\n    pos_int = [x for x in lst if x > 0]\n    return (max(neg_int) if neg_int else None, min(pos_int) if pos_int else None)", "prompt_tokens": 188, "completion_tokens": 68, "duration": 7.850949048995972, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_val, b_val = convert(a), convert(b)\n    \n    if a_val == b_val:\n        return None\n    elif a_val > b_val:\n        return a\n    else:\n        return b", "prompt_tokens": 191, "completion_tokens": 82, "duration": 7.870300531387329, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such sum.\n    if n < 8:\n        return False\n    # For a number to be written as the sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be written as a sum of four even numbers.\n    return n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 140, "duration": 11.473756551742554, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 68, "duration": 8.473223686218262, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    text = re.sub(r' {3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 82, "duration": 11.004373550415039, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex pattern to match the file name conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{2,}(\\.)(txt|exe|dll)$'\n    # Check if the file name has more than three digits\n    digit_count = sum(c.isdigit() for c in file_name)\n    if digit_count > 3:\n        return 'No'\n    # Check if the file name matches the pattern\n    if re.match(pattern, file_name):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 264, "completion_tokens": 133, "duration": 11.719170570373535, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 8.996315956115723, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    \"\"\"\n    Extracts words from the sentence whose lengths are prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 113, "duration": 10.992891073226929, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 6.747984170913696, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 35, "duration": 6.574664354324341, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_ten(n):\n        str_n = str(abs(n))\n        return n > 10 and int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n    \n    return sum(1 for num in nums if is_odd_and_greater_than_ten(num))", "prompt_tokens": 169, "completion_tokens": 78, "duration": 7.166527271270752, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Generate the array as per the given condition\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the frequency of remainders when elements are divided by 3\n    remainder_counts = [0, 0, 0]\n    for value in a:\n        remainder_counts[value % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Combination formula: nC3 = n! / (3! * (n-3)!)\n    # For a[i] + a[j] + a[k] to be divisible by 3, all three numbers must have the same remainder when divided by 3\n    # or they must have remainders 0, 1, and 2 respectively.\n    valid_triples = 0\n    for count in remainder_counts:\n        if count >= 3:\n            valid_triples += count * (count - 1) * (count - 2) // 6  # Combination formula for 3 elements from count\n    \n    # Special case: one element from each remainder category\n    if all(count > 0 for count in remainder_counts):\n        valid_triples += remainder_counts[0] * remainder_counts[1] * remainder_counts[2]\n    \n    return valid_triples", "prompt_tokens": 215, "completion_tokens": 363, "duration": 19.876725673675537, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "prompt_tokens": 261, "completion_tokens": 122, "duration": 11.347753286361694, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    sorted_lst = sorted(filtered_lst, key=lambda s: (len(s), s))\n    return sorted_lst", "prompt_tokens": 237, "completion_tokens": 76, "duration": 8.019057750701904, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 62, "duration": 8.441689252853394, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)", "prompt_tokens": 187, "completion_tokens": 159, "duration": 15.829116821289062, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.782623052597046, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 327, "completion_tokens": 80, "duration": 7.64286732673645, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]  # rotate b\n    return False", "prompt_tokens": 179, "completion_tokens": 64, "duration": 9.096507787704468, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))  # Convert the number to string and make it positive\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)  # Count even digits\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)  # Count odd digits\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 99, "duration": 10.23304533958435, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 203, "duration": 15.495078563690186, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 137, "duration": 11.577799558639526, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word", "prompt_tokens": 170, "completion_tokens": 77, "duration": 8.577604293823242, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 42, "duration": 7.8199663162231445, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += ' ' + operator[i] + ' ' + str(operand[i + 1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 111, "duration": 8.948600769042969, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 8.764104843139648, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 96, "duration": 10.29916763305664, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 79, "duration": 9.476743936538696, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False", "prompt_tokens": 174, "completion_tokens": 65, "duration": 4.209547996520996, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')  # Remove spaces\n    stack = []\n    result = []\n    temp = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.pop()\n            temp += char\n            if not stack:  # If stack is empty, a group is completed\n                result.append(temp)\n                temp = \"\"\n    return result", "prompt_tokens": 165, "completion_tokens": 118, "duration": 7.3325231075286865, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.5786428451538086, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 4.362139463424683, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 167, "completion_tokens": 115, "duration": 5.788546800613403, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result", "prompt_tokens": 142, "completion_tokens": 65, "duration": 4.378692626953125, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ' and max_depth > 0:\n            depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    \n    if max_depth > 0:  # For the last group if space is not followed\n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 162, "completion_tokens": 150, "duration": 7.73313307762146, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 56, "duration": 3.804989814758301, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for number in numbers:\n        product_numbers *= number\n    return sum_numbers, product_numbers", "prompt_tokens": 160, "completion_tokens": 59, "duration": 3.3325705528259277, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 150, "completion_tokens": 91, "duration": 4.697611570358276, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 118, "duration": 6.5843377113342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char_a, char_b in zip(a, b):\n        result += str(int(char_a) ^ int(char_b))\n    return result", "prompt_tokens": 126, "completion_tokens": 52, "duration": 3.694707155227661, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.470928907394409, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.737788200378418, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 73, "duration": 4.561136960983276, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.806260585784912, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.2184176445007324, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 5.560785293579102, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.535949230194092, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(numbers_list)", "prompt_tokens": 155, "completion_tokens": 105, "duration": 5.698780536651611, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 119, "duration": 12.650938272476196, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 63, "duration": 4.242560148239136, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 104, "duration": 5.437625885009766, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.26611065864563, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.4410276412963867, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 138, "duration": 7.330316543579102, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 95, "duration": 4.717985391616821, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.45373797416687, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 4.445596694946289, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 98, "duration": 5.667881011962891, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 6.6569061279296875, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.45927357673645, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having an even number of coefficients\n    and the largest non-zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    return fsolve(lambda x: poly(xs, x), 0)[0]", "prompt_tokens": 309, "completion_tokens": 192, "duration": 10.18540358543396, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort these elements\n    divisible_by_three_sorted = sorted(divisible_by_three)\n    \n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, val in enumerate(divisible_by_three_sorted):\n        l[i*3] = val\n    \n    return l", "prompt_tokens": 200, "completion_tokens": 173, "duration": 8.272505283355713, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 2.031433343887329, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 4.504883050918579, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.9921300411224365, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values.pop(0)\n    return l", "prompt_tokens": 173, "completion_tokens": 67, "duration": 5.65425443649292, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    # Split string into groups of 3 characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse the cycling of elements in each group, unless group has fewer than 3 elements\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 114, "duration": 6.247018575668335, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count, fib_gen = 0, fib()\n    while True:\n        f = next(fib_gen)\n        if f > 1 and is_prime(f):\n            count += 1\n            if count == n:\n                return f", "prompt_tokens": 147, "completion_tokens": 152, "duration": 8.056272029876709, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        a = l[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False", "prompt_tokens": 209, "completion_tokens": 117, "duration": 5.236088514328003, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since all cars move at the same speed and are infinitely sturdy, each car moving left to right will eventually\n    collide with each car moving right to left. Thus, the number of collisions is simply the number of cars moving\n    in one direction multiplied by the number of cars moving in the opposite direction, which is n * n.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 94, "duration": 5.356371164321899, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 26, "duration": 2.9211618900299072, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.7594246864318848, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = \"\"\n    while x:\n        digits += str(x % base)\n        x //= base\n    return digits[::-1]", "prompt_tokens": 141, "completion_tokens": 57, "duration": 3.4521501064300537, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.2923569679260254, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 221, "completion_tokens": 126, "duration": 7.62640905380249, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 3.5437686443328857, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 23, "duration": 2.8041305541992188, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 45, "duration": 3.7158877849578857, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.183465003967285, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "prompt_tokens": 172, "completion_tokens": 140, "duration": 8.304934024810791, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 4.051929235458374, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 3.9298620223999023, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.6758077144622803, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.683210134506226, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == \"<\":\n            count += 1\n        elif char == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 3.94265079498291, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 137, "completion_tokens": 52, "duration": 3.30497145652771, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1).intersection(l2))", "prompt_tokens": 164, "completion_tokens": 38, "duration": 2.923339366912842, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(x):\n        if x <= 1:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    largest_prime = -1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            if is_prime(i):\n                largest_prime = max(largest_prime, i)\n            if is_prime(n // i):\n                largest_prime = max(largest_prime, n // i)\n        i += 1\n    return largest_prime if largest_prime != -1 else n", "prompt_tokens": 113, "completion_tokens": 155, "duration": 27.518701791763306, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.9912521839141846, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 3.9095964431762695, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.46250057220459, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 103, "duration": 5.7589921951293945, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    \"\"\"\n    Counts the number of vowels in a given string, considering 'y' as a vowel only if it is at the end.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count\n\n# Additional Test Cases\nif __name__ == \"__main__\":\n    print(vowels_count(\"abcde\"))  # Expected: 2\n    print(vowels_count(\"ACEDY\"))  # Expected: 3\n    print(vowels_count(\"rhythm\"))  # Expected: 0\n    print(vowels_count(\"Python\"))  # Expected: 1\n    print(vowels_count(\"encyclopedia\"))  # Expected: 6\n    print(vowels_count(\"Y\"))  # Expected: 1", "prompt_tokens": 176, "completion_tokens": 211, "duration": 12.165419816970825, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": true, "solved_count": 4, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.3502092361450195, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.577077627182007, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0 and val >= 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.352222204208374, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    result = -1\n    for number, count in freq.items():\n        if number <= count:\n            result = max(result, number)\n    return result", "prompt_tokens": 215, "completion_tokens": 53, "duration": 4.447106599807739, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.664452791213989, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 5.257240056991577, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.3388168811798096, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 67, "duration": 5.13500189781189, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.323735237121582, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 143, "duration": 7.245944976806641, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    if a < 0:\n        a = -a\n    return round(a ** (1/3)) ** 3 == a", "prompt_tokens": 160, "completion_tokens": 38, "duration": 2.8788185119628906, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Use set intersection to find common elements and return its length\n    return len([digit for digit in num if digit in prime_hex_digits])", "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.51102614402771, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix.\n    return f\"db{binary_str}db\"", "prompt_tokens": 189, "completion_tokens": 44, "duration": 3.158829689025879, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 76, "duration": 4.432854175567627, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Converts a list of numerical GPAs to letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 268, "duration": 14.089729070663452, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.149853706359863, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * (10 ** (n-1)) - (10 ** (n-2))", "prompt_tokens": 94, "completion_tokens": 79, "duration": 4.754279613494873, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum([int(digit) for digit in str(N)])\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 34, "duration": 2.8703925609588623, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    :param lst: List[int] - a non-empty list of integers\n    :return: int - sum of even elements at odd indices\n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 92, "duration": 7.433907508850098, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split(' ')])", "prompt_tokens": 180, "completion_tokens": 28, "duration": 2.9495739936828613, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    # Sort by row in ascending and then by column in descending order\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 169, "duration": 7.54571008682251, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"\n    if not array:\n        return array\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 253, "completion_tokens": 141, "duration": 7.717255353927612, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - 97 + 4) % 26) + 97)\n            result += shifted\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 64, "duration": 3.4810619354248047, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 45, "duration": 3.360438346862793, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with \"I\".\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: Number of sentences starting with \"I\".\n    \"\"\"\n    # Split the string into sentences using '.', '?', '!'\n    sentences = []\n    for delimiter in ['.', '?', '!']:\n        if sentences:\n            new_split = []\n            for sentence in sentences:\n                new_split.extend(sentence.split(delimiter))\n            sentences = new_split\n        else:\n            sentences = S.split(delimiter)\n    sentences = [sentence.strip() for sentence in sentences if sentence.strip()]\n\n    # Count sentences starting with \"I\"\n    count = sum(sentence.startswith(\"I\") for sentence in sentences)\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 165, "duration": 7.827242851257324, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x + y == z or x + z == y or y + z == x", "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.898637056350708, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case and replacing vowels.\n    \"\"\"\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            # Find the index of the vowel in the alphabet\n            alphabet = 'abcdefghijklmnopqrstuvwxyz'\n            char_lower = char.lower()  # Convert to lowercase to handle uppercase vowels\n            index = alphabet.index(char_lower)\n            # Calculate the new index, considering the circular nature of the alphabet\n            new_index = (index + 2) % 26\n            new_char = alphabet[new_index]\n            # Preserve the original case\n            if char.isupper():\n                return new_char.upper()\n            else:\n                return new_char\n        else:\n            return char\n\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            swapped_char = swap_case(char)\n            replaced_char = replace_vowel(swapped_char)\n            encoded_message += replaced_char\n        else:\n            encoded_message += char\n\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 242, "duration": 10.827568054199219, "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "prompt_tokens": 336, "completion_tokens": 111, "duration": 6.8000452518463135, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 69, "duration": 3.641099452972412, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 5.085882663726807, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.974595785140991, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "prompt_tokens": 122, "completion_tokens": 62, "duration": 3.6243977546691895, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 3.3769564628601074, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.494257926940918, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 4.757632493972778, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"Returns the biggest even integer in the range [x, y], or -1 if none exists.\"\"\"\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 144, "completion_tokens": 67, "duration": 5.987202167510986, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.162672519683838, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted(filter(has_no_even_digit, x))", "prompt_tokens": 152, "completion_tokens": 88, "duration": 6.497297048568726, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    num_to_word = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_word[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 117, "duration": 9.13004994392395, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_n(x):\n        return x * (x + 1) // 2\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 107, "duration": 9.367210149765015, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 101, "duration": 7.311734914779663, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n))) * (-1 if n < 0 else 1)\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 60, "duration": 5.869884014129639, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr: return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 349, "completion_tokens": 61, "duration": 5.66226601600647, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    even_needed = sum(1 for x in lst1 if x % 2 != 0)\n    even_available = sum(1 for x in lst2 if x % 2 == 0)\n    if even_needed <= even_available:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 75, "duration": 7.712677240371704, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    words = test.split()\n    hist = {}\n    for word in words:\n        if word in hist:\n            hist[word] += 1\n        else:\n            hist[word] = 1\n    \n    max_value = max(hist.values(), default=0)\n    return {key: value for key, value in hist.items() if value == max_value}", "prompt_tokens": 201, "completion_tokens": 81, "duration": 6.794301509857178, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    filtered_string = ''.join([ch for ch in s if ch not in c])\n    return (filtered_string, filtered_string == filtered_string[::-1])", "prompt_tokens": 212, "completion_tokens": 43, "duration": 5.003535032272339, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    \"\"\"\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for s in lst:\n        count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 168, "duration": 9.918372392654419, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 5.489854574203491, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(row.count(1) for row in grid)\n    import math\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 373, "completion_tokens": 41, "duration": 6.1018311977386475, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 4.408788204193115, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char not in vowels and char.isalpha())\n\n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 68, "duration": 6.388298749923706, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 6.426270246505737, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    first, second = lst\n    # Case 1: Concatenate first + second\n    if first.count('(') >= second.count(')') and (first + second).count('(') == (first + second).count(')'):\n        return 'Yes'\n    # Case 2: Concatenate second + first\n    if second.count('(') >= first.count(')') and (second + first).count('(') == (second + first).count(')'):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 119, "duration": 8.52225923538208, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 5.844256401062012, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 4.941644191741943, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 < x < 100)", "prompt_tokens": 178, "completion_tokens": 70, "duration": 7.652598142623901, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 != 0 else n // 2\n    odd_numbers.append(1)  # Since the sequence always ends with 1.\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 112, "duration": 8.572478771209717, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date string is not empty and correct format\n    if not date or len(date.split('-')) != 3:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month, day, year = int(month), int(day), int(year)\n    \n    # Check if month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if day is valid\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 234, "duration": 18.28721332550049, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 190, "completion_tokens": 66, "duration": 6.965789318084717, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    # Check for duplicates more than once\n    for i in lst:\n        if lst.count(i) > 2:\n            return False\n    # Check if list is sorted in ascending order\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 56, "duration": 12.348864078521729, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    prod_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        sign = (num > 0) - (num < 0)\n        prod_of_signs *= sign\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * prod_of_signs", "prompt_tokens": 172, "completion_tokens": 91, "duration": 8.341488122940063, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    heap = []\n    for i in range(N):\n        for j in range(N):\n            heappush(heap, (grid[i][j], 1, [(grid[i][j], i, j)]))\n    \n    while heap:\n        val, length, path = heappop(heap)\n        if length == k:\n            return [grid[i][j] for _, i, j in path]\n        for dx, dy in directions:\n            x, y = path[-1][1], path[-1][2]\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                newPath = path + [(grid[nx][ny], nx, ny)]\n                heappush(heap, (newPath[-1][0], length + 1, newPath))", "prompt_tokens": 446, "completion_tokens": 229, "duration": 14.213589429855347, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 1, "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 2]\n    \n    tribonacci = [3, 2]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            next_val = tribonacci[-1] + tribonacci[-2] + (1 + (i + 1) // 2)\n            tribonacci.append(next_val)\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 125, "duration": 12.824751138687134, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 100, "duration": 7.856122255325317, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n        if balance >= 2:\n            return True\n    return False", "prompt_tokens": 183, "completion_tokens": 193, "duration": 15.617799520492554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 6.643566846847534, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    return not txt[-2].isalpha() if len(txt) > 1 else True", "prompt_tokens": 187, "completion_tokens": 177, "duration": 13.307818412780762, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.230081796646118, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    return (a, b)", "prompt_tokens": 188, "completion_tokens": 75, "duration": 7.387028217315674, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n    \n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.966935634613037, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8, any number less than 8 cannot be written as such a sum\n    if n < 8:\n        return False\n    # If n is even and greater than or equal to 8, it can always be written as the sum of 2, 2, 2, and n-6\n    return n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 131, "duration": 13.282001256942749, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 1 or x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 73, "duration": 6.716017484664917, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    import re\n    text = re.sub(r' {3,}', '-', text)  # Replace 3 or more spaces with -\n    text = text.replace(' ', '_')  # Replace remaining spaces with _\n    return text", "prompt_tokens": 156, "completion_tokens": 152, "duration": 11.756615400314331, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex to match the file name conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{2}[0-9]{0,3}\\.[txt|exe|dll]{3}$'\n    return 'Yes' if re.match(pattern, file_name) else 'No'", "prompt_tokens": 264, "completion_tokens": 85, "duration": 8.52440595626831, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 6.133241653442383, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 97, "duration": 8.923435688018799, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 6.055229187011719, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 58, "duration": 7.279897689819336, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return str_n[0] in '13579' and str_n[-1] in '13579'\n    \n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "prompt_tokens": 169, "completion_tokens": 80, "duration": 8.481353044509888, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    # Generate the array based on given formula\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    # Count of triples\n    count = 0\n    \n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                # Check if the sum of the triple is divisible by 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 215, "completion_tokens": 140, "duration": 15.25611162185669, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])", "prompt_tokens": 261, "completion_tokens": 119, "duration": 10.038527965545654, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    sorted_strings = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_strings", "prompt_tokens": 237, "completion_tokens": 79, "duration": 10.006667137145996, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 62, "duration": 9.362669229507446, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 34, "duration": 5.375000953674316, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.2177300453186035, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n    \n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 327, "completion_tokens": 80, "duration": 7.641120433807373, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    \"\"\"\n    Check if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False", "prompt_tokens": 179, "completion_tokens": 64, "duration": 9.012350797653198, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count, odd_count = 0, 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 77, "duration": 5.484004259109497, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 203, "duration": 19.172694444656372, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 6.464585781097412, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    return max(sorted(words), key=lambda x: len(set(x)))", "prompt_tokens": 170, "completion_tokens": 23, "duration": 6.37529993057251, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Returns an array of [total number of eaten carrots after meals, the number of carrots left after meals].\n    \"\"\"\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 68, "duration": 9.611297607421875, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i, op in enumerate(operator):\n        expression += f\" {op} {operand[i+1]}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 105, "duration": 9.286520004272461, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.676676511764526, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 99, "duration": 9.696001291275024, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [x for x in range(min(a, b), max(a, b) + 1) if x % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 71, "duration": 7.414170026779175, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False", "prompt_tokens": 174, "completion_tokens": 65, "duration": 4.209547996520996, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')  # Remove spaces\n    stack = []\n    result = []\n    temp = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.pop()\n            temp += char\n            if not stack:  # If stack is empty, a group is completed\n                result.append(temp)\n                temp = \"\"\n    return result", "prompt_tokens": 165, "completion_tokens": 118, "duration": 7.3325231075286865, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.5786428451538086, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 4.362139463424683, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 167, "completion_tokens": 115, "duration": 5.788546800613403, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result", "prompt_tokens": 142, "completion_tokens": 65, "duration": 4.378692626953125, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ' and max_depth > 0:\n            depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    \n    if max_depth > 0:  # For the last group if space is not followed\n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 162, "completion_tokens": 150, "duration": 7.73313307762146, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 56, "duration": 3.804989814758301, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for number in numbers:\n        product_numbers *= number\n    return sum_numbers, product_numbers", "prompt_tokens": 160, "completion_tokens": 59, "duration": 3.3325705528259277, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 150, "completion_tokens": 91, "duration": 4.697611570358276, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "is_solved": false, "solved_count": 0, "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 84, "duration": 5.590370178222656, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char_a, char_b in zip(a, b):\n        result += str(int(char_a) ^ int(char_b))\n    return result", "prompt_tokens": 126, "completion_tokens": 52, "duration": 3.694707155227661, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.470928907394409, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.737788200378418, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 73, "duration": 4.561136960983276, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.806260585784912, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.2184176445007324, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 5.560785293579102, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.535949230194092, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(numbers_list)", "prompt_tokens": 155, "completion_tokens": 105, "duration": 5.698780536651611, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) < min_diff:\n            min_diff = abs(numbers[i + 1] - numbers[i])\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 124, "duration": 7.4613611698150635, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 63, "duration": 4.242560148239136, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 104, "duration": 5.437625885009766, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.26611065864563, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.4410276412963867, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 138, "duration": 7.330316543579102, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 95, "duration": 4.717985391616821, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.45373797416687, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 4.445596694946289, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 98, "duration": 5.667881011962891, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 6.6569061279296875, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.45927357673645, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having an even number of coefficients\n    and the largest non-zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    return fsolve(lambda x: poly(xs, x), 0)[0]", "prompt_tokens": 309, "completion_tokens": 192, "duration": 10.18540358543396, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort these elements\n    divisible_by_three_sorted = sorted(divisible_by_three)\n    \n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, val in enumerate(divisible_by_three_sorted):\n        l[i*3] = val\n    \n    return l", "prompt_tokens": 200, "completion_tokens": 173, "duration": 8.272505283355713, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 2.031433343887329, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 4.504883050918579, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.9921300411224365, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values.pop(0)\n    return l", "prompt_tokens": 173, "completion_tokens": 67, "duration": 5.65425443649292, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    # Split string into groups of 3 characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse the cycling of elements in each group, unless group has fewer than 3 elements\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 114, "duration": 6.247018575668335, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count, fib_gen = 0, fib()\n    while True:\n        f = next(fib_gen)\n        if f > 1 and is_prime(f):\n            count += 1\n            if count == n:\n                return f", "prompt_tokens": 147, "completion_tokens": 152, "duration": 8.056272029876709, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        a = l[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False", "prompt_tokens": 209, "completion_tokens": 117, "duration": 5.236088514328003, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since all cars move at the same speed and are infinitely sturdy, each car moving left to right will eventually\n    collide with each car moving right to left. Thus, the number of collisions is simply the number of cars moving\n    in one direction multiplied by the number of cars moving in the opposite direction, which is n * n.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 94, "duration": 5.356371164321899, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 26, "duration": 2.9211618900299072, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.7594246864318848, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = \"\"\n    while x:\n        digits += str(x % base)\n        x //= base\n    return digits[::-1]", "prompt_tokens": 141, "completion_tokens": 57, "duration": 3.4521501064300537, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.2923569679260254, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 221, "completion_tokens": 126, "duration": 7.62640905380249, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 3.5437686443328857, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 23, "duration": 2.8041305541992188, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 45, "duration": 3.7158877849578857, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.183465003967285, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "prompt_tokens": 172, "completion_tokens": 140, "duration": 8.304934024810791, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 4.051929235458374, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 3.9298620223999023, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.6758077144622803, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.683210134506226, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == \"<\":\n            count += 1\n        elif char == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 3.94265079498291, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 137, "completion_tokens": 52, "duration": 3.30497145652771, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1).intersection(l2))", "prompt_tokens": 164, "completion_tokens": 38, "duration": 2.923339366912842, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(x):\n        if x <= 1:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    largest_prime = -1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            if is_prime(i):\n                largest_prime = max(largest_prime, i)\n            if is_prime(n // i):\n                largest_prime = max(largest_prime, n // i)\n        i += 1\n    return largest_prime if largest_prime != -1 else n", "prompt_tokens": 113, "completion_tokens": 155, "duration": 27.518701791763306, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.9912521839141846, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 3.9095964431762695, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.46250057220459, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 103, "duration": 5.7589921951293945, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    \"\"\"\n    Counts the number of vowels in a given string, considering 'y' as a vowel only if it is at the end.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count\n\n# Additional Test Cases\nif __name__ == \"__main__\":\n    print(vowels_count(\"abcde\"))  # Expected: 2\n    print(vowels_count(\"ACEDY\"))  # Expected: 3\n    print(vowels_count(\"rhythm\"))  # Expected: 0\n    print(vowels_count(\"Python\"))  # Expected: 1\n    print(vowels_count(\"encyclopedia\"))  # Expected: 6\n    print(vowels_count(\"Y\"))  # Expected: 1", "prompt_tokens": 176, "completion_tokens": 211, "duration": 12.165419816970825, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": true, "solved_count": 4, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.3502092361450195, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.577077627182007, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0 and val >= 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.352222204208374, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    result = -1\n    for number, count in freq.items():\n        if number <= count:\n            result = max(result, number)\n    return result", "prompt_tokens": 215, "completion_tokens": 53, "duration": 4.447106599807739, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.664452791213989, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 5.257240056991577, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.3388168811798096, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 67, "duration": 5.13500189781189, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.323735237121582, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 143, "duration": 7.245944976806641, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.564862012863159, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    if a < 0:\n        a = -a\n    return round(a ** (1/3)) ** 3 == a", "prompt_tokens": 160, "completion_tokens": 38, "duration": 2.8788185119628906, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Use set intersection to find common elements and return its length\n    return len([digit for digit in num if digit in prime_hex_digits])", "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.51102614402771, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix.\n    return f\"db{binary_str}db\"", "prompt_tokens": 189, "completion_tokens": 44, "duration": 3.158829689025879, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 76, "duration": 4.432854175567627, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Converts a list of numerical GPAs to letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 268, "duration": 14.089729070663452, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.149853706359863, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * (10 ** (n-1)) - (10 ** (n-2))", "prompt_tokens": 94, "completion_tokens": 79, "duration": 4.754279613494873, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum([int(digit) for digit in str(N)])\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 34, "duration": 2.8703925609588623, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    :param lst: List[int] - a non-empty list of integers\n    :return: int - sum of even elements at odd indices\n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 92, "duration": 7.433907508850098, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split(' ')])", "prompt_tokens": 180, "completion_tokens": 28, "duration": 2.9495739936828613, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    # Sort by row in ascending and then by column in descending order\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 169, "duration": 7.54571008682251, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"\n    if not array:\n        return array\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 253, "completion_tokens": 141, "duration": 7.717255353927612, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - 97 + 4) % 26) + 97)\n            result += shifted\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 64, "duration": 3.4810619354248047, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 45, "duration": 3.360438346862793, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with \"I\".\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: Number of sentences starting with \"I\".\n    \"\"\"\n    # Split the string into sentences using '.', '?', '!'\n    sentences = []\n    for delimiter in ['.', '?', '!']:\n        if sentences:\n            new_split = []\n            for sentence in sentences:\n                new_split.extend(sentence.split(delimiter))\n            sentences = new_split\n        else:\n            sentences = S.split(delimiter)\n    sentences = [sentence.strip() for sentence in sentences if sentence.strip()]\n\n    # Count sentences starting with \"I\"\n    count = sum(sentence.startswith(\"I\") for sentence in sentences)\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 165, "duration": 7.827242851257324, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x + y == z or x + z == y or y + z == x", "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.898637056350708, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case and replacing vowels.\n    \"\"\"\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            # Find the index of the vowel in the alphabet\n            alphabet = 'abcdefghijklmnopqrstuvwxyz'\n            char_lower = char.lower()  # Convert to lowercase to handle uppercase vowels\n            index = alphabet.index(char_lower)\n            # Calculate the new index, considering the circular nature of the alphabet\n            new_index = (index + 2) % 26\n            new_char = alphabet[new_index]\n            # Preserve the original case\n            if char.isupper():\n                return new_char.upper()\n            else:\n                return new_char\n        else:\n            return char\n\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            swapped_char = swap_case(char)\n            replaced_char = replace_vowel(swapped_char)\n            encoded_message += replaced_char\n        else:\n            encoded_message += char\n\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 242, "duration": 10.827568054199219, "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "prompt_tokens": 336, "completion_tokens": 111, "duration": 6.8000452518463135, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 69, "duration": 3.641099452972412, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 5.085882663726807, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.974595785140991, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "prompt_tokens": 122, "completion_tokens": 62, "duration": 3.6243977546691895, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 3.3769564628601074, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.494257926940918, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 4.757632493972778, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"Returns the biggest even integer in the range [x, y], or -1 if none exists.\"\"\"\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 144, "completion_tokens": 67, "duration": 5.987202167510986, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.162672519683838, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted(filter(has_no_even_digit, x))", "prompt_tokens": 152, "completion_tokens": 88, "duration": 6.497297048568726, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    num_to_word = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_word[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 117, "duration": 9.13004994392395, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_n(x):\n        return x * (x + 1) // 2\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 107, "duration": 9.367210149765015, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 101, "duration": 7.311734914779663, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n))) * (-1 if n < 0 else 1)\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 60, "duration": 5.869884014129639, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr: return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 349, "completion_tokens": 61, "duration": 5.66226601600647, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    even_needed = sum(1 for x in lst1 if x % 2 != 0)\n    even_available = sum(1 for x in lst2 if x % 2 == 0)\n    if even_needed <= even_available:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 75, "duration": 7.712677240371704, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    words = test.split()\n    hist = {}\n    for word in words:\n        if word in hist:\n            hist[word] += 1\n        else:\n            hist[word] = 1\n    \n    max_value = max(hist.values(), default=0)\n    return {key: value for key, value in hist.items() if value == max_value}", "prompt_tokens": 201, "completion_tokens": 81, "duration": 6.794301509857178, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    filtered_string = ''.join([ch for ch in s if ch not in c])\n    return (filtered_string, filtered_string == filtered_string[::-1])", "prompt_tokens": 212, "completion_tokens": 43, "duration": 5.003535032272339, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    \"\"\"\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for s in lst:\n        count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 168, "duration": 9.918372392654419, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 5.489854574203491, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(row.count(1) for row in grid)\n    import math\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 373, "completion_tokens": 41, "duration": 6.1018311977386475, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 4.408788204193115, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char not in vowels and char.isalpha())\n\n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 68, "duration": 6.388298749923706, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 7.5104005336761475, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    first, second = lst\n    # Case 1: Concatenate first + second\n    if first.count('(') >= second.count(')') and (first + second).count('(') == (first + second).count(')'):\n        return 'Yes'\n    # Case 2: Concatenate second + first\n    if second.count('(') >= first.count(')') and (second + first).count('(') == (second + first).count(')'):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 119, "duration": 8.52225923538208, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 5.844256401062012, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 4.941644191741943, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 < x < 100)", "prompt_tokens": 178, "completion_tokens": 70, "duration": 7.652598142623901, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 != 0 else n // 2\n    odd_numbers.append(1)  # Since the sequence always ends with 1.\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 112, "duration": 8.572478771209717, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date string is not empty and correct format\n    if not date or len(date.split('-')) != 3:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month, day, year = int(month), int(day), int(year)\n    \n    # Check if month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if day is valid\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 234, "duration": 18.28721332550049, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 190, "completion_tokens": 66, "duration": 6.965789318084717, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    # Check for duplicates more than once\n    for i in lst:\n        if lst.count(i) > 2:\n            return False\n    # Check if list is sorted in ascending order\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 56, "duration": 12.348864078521729, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    prod_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        sign = (num > 0) - (num < 0)\n        prod_of_signs *= sign\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * prod_of_signs", "prompt_tokens": 172, "completion_tokens": 91, "duration": 8.341488122940063, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    pq = [(grid[i][j], i, j, [grid[i][j]]) for i in range(N) for j in range(N)]\n    pq.sort()\n    visited = set()\n\n    while pq:\n        _, x, y, path = pq.pop(0)\n        if len(path) == k:\n            return path\n        if (x, y, len(path)) in visited:\n            continue\n        visited.add((x, y, len(path)))\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                pq.append((new_path, nx, ny, new_path))\n                pq.sort(key=lambda x: (len(x[3]), x[3]))", "prompt_tokens": 446, "completion_tokens": 232, "duration": 13.436962604522705, "result": "passed", "passed": true}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 1, "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 2]\n    \n    tribonacci = [3, 2]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            next_val = tribonacci[-1] + tribonacci[-2] + (1 + (i + 1) // 2)\n            tribonacci.append(next_val)\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 125, "duration": 12.824751138687134, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 100, "duration": 7.856122255325317, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                return True\n    return False", "prompt_tokens": 183, "completion_tokens": 55, "duration": 6.2251739501953125, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 6.643566846847534, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    return not txt[-2].isalpha() if len(txt) > 1 else True", "prompt_tokens": 187, "completion_tokens": 177, "duration": 13.307818412780762, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.230081796646118, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    return (a, b)", "prompt_tokens": 188, "completion_tokens": 75, "duration": 7.387028217315674, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n    \n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.966935634613037, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8, any number less than 8 cannot be written as such a sum\n    if n < 8:\n        return False\n    # If n is even and greater than or equal to 8, it can always be written as the sum of 2, 2, 2, and n-6\n    return n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 131, "duration": 13.282001256942749, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 1 or x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 73, "duration": 6.716017484664917, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    import re\n    text = re.sub(r' {3,}', '-', text)  # Replace 3 or more spaces with -\n    text = text.replace(' ', '_')  # Replace remaining spaces with _\n    return text", "prompt_tokens": 156, "completion_tokens": 152, "duration": 11.756615400314331, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex to match the file name conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{2}[0-9]{0,3}\\.[txt|exe|dll]{3}$'\n    return 'Yes' if re.match(pattern, file_name) else 'No'", "prompt_tokens": 264, "completion_tokens": 85, "duration": 8.52440595626831, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 6.133241653442383, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 97, "duration": 8.923435688018799, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 6.055229187011719, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 58, "duration": 7.279897689819336, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return str_n[0] in '13579' and str_n[-1] in '13579'\n    \n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "prompt_tokens": 169, "completion_tokens": 80, "duration": 8.481353044509888, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Calculate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    # Count how many elements of a are divisible by 3, remainder 1 when divided by 3, and remainder 2 when divided by 3\n    count_div_3 = sum(x % 3 == 0 for x in a)\n    count_rem_1 = sum(x % 3 == 1 for x in a)\n    count_rem_2 = sum(x % 3 == 2 for x in a)\n    # Calculate the number of valid triples\n    # There are three cases for valid triples: (div3, div3, div3), (rem1, rem1, rem1), and (rem2, rem2, rem2)\n    # For each case, use the combination formula nC3 = n! / (3!(n-3)!) to calculate the number of ways to choose triples\n    result = 0\n    if count_div_3 >= 3:\n        result += count_div_3 * (count_div_3 - 1) * (count_div_3 - 2) // 6\n    if count_rem_1 >= 3:\n        result += count_rem_1 * (count_rem_1 - 1) * (count_rem_1 - 2) // 6\n    if count_rem_2 >= 3:\n        result += count_rem_2 * (count_rem_2 - 1) * (count_rem_2 - 2) // 6\n    return result", "prompt_tokens": 215, "completion_tokens": 424, "duration": 22.365949869155884, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])", "prompt_tokens": 261, "completion_tokens": 119, "duration": 10.038527965545654, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    sorted_strings = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_strings", "prompt_tokens": 237, "completion_tokens": 79, "duration": 10.006667137145996, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 62, "duration": 9.362669229507446, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 34, "duration": 5.375000953674316, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.2177300453186035, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n    \n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 327, "completion_tokens": 80, "duration": 7.641120433807373, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    \"\"\"\n    Check if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False", "prompt_tokens": 179, "completion_tokens": 64, "duration": 9.012350797653198, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count, odd_count = 0, 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 77, "duration": 5.484004259109497, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 203, "duration": 19.172694444656372, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 6.464585781097412, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word", "prompt_tokens": 170, "completion_tokens": 77, "duration": 8.577604293823242, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Returns an array of [total number of eaten carrots after meals, the number of carrots left after meals].\n    \"\"\"\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 68, "duration": 9.611297607421875, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i, op in enumerate(operator):\n        expression += f\" {op} {operand[i+1]}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 105, "duration": 9.286520004272461, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.676676511764526, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 99, "duration": 9.696001291275024, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [x for x in range(min(a, b), max(a, b) + 1) if x % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 71, "duration": 7.414170026779175, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "prompt_tokens": 150, "completion_tokens": 68, "duration": 4.141433477401733, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 118, "duration": 6.5843377113342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": true, "solved_count": 4, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i+1, a): # start from i+1 to avoid repeating the same factor\n                if a % (i*j) == 0 and is_prime(j):\n                    k = a // (i*j)\n                    if is_prime(k) and k != i and k != j:\n                        return True\n    return False", "prompt_tokens": 129, "completion_tokens": 158, "duration": 9.53858232498169, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 ** (n - 1) - 8 ** (n - 1)", "prompt_tokens": 94, "completion_tokens": 81, "duration": 5.6620423793792725, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of sentences starting with \"I\".\n    \"\"\"\n    sentences = [s.strip() for s in S.replace('?', '.').replace('!', '.').split('.')]\n    return sum(s.startswith(\"I\") for s in sentences if s)", "prompt_tokens": 157, "completion_tokens": 94, "duration": 5.78433632850647, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case and replacing vowels.\n    \"\"\"\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            # Find the index of the vowel in the alphabet\n            alphabet = 'abcdefghijklmnopqrstuvwxyz'\n            char_lower = char.lower()  # Convert to lowercase to handle uppercase vowels\n            index = alphabet.index(char_lower)\n            # Calculate the new index, considering the circular nature of the alphabet\n            new_index = (index + 2) % 26\n            new_char = alphabet[new_index]\n            # Preserve the original case\n            if char.isupper():\n                return new_char.upper()\n            else:\n                return new_char\n        else:\n            return char\n\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            swapped_char = swap_case(char)\n            replaced_char = replace_vowel(swapped_char)\n            encoded_message += replaced_char\n        else:\n            encoded_message += char\n\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 242, "duration": 10.827568054199219, "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum([int(digit) for digit in str(largest_prime)])", "prompt_tokens": 336, "completion_tokens": 113, "duration": 6.079300165176392, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    \"\"\"\n    Count the number of elements in an array for which the sum of its digits is greater than 0.\n    \"\"\"\n    def sum_of_digits(n):\n        \"\"\"\n        Calculate the sum of digits of an integer, considering the sign of the first digit if negative.\n        \"\"\"\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(digit) for digit in str(n)[2:])\n        else:\n            return sum(int(digit) for digit in str(n))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 132, "duration": 10.220707654953003, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(row.count(1) for row in grid)\n    import math\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 373, "completion_tokens": 41, "duration": 6.1018311977386475, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels and i != 0 and i != len(word) - 1:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 90, "duration": 7.486766576766968, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # Count the parentheses in both strings\n    count1 = str1.count('(') - str1.count(')')\n    count2 = str2.count('(') - str2.count(')')\n\n    # Check if concatenating in any order would result in a balanced string\n    if count1 + count2 != 0:\n        return 'No'\n    if count1 < 0 and count2 > 0:\n        return 'No'\n    if count2 < 0 and count1 > 0:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 135, "duration": 9.524965047836304, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 6.2166948318481445, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 < x < 100)", "prompt_tokens": 178, "completion_tokens": 70, "duration": 7.652598142623901, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    # Check for whitespace\n    if ' ' in txt:\n        return txt.split()\n    # Check for commas\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Count lower-case odd order letters\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 190, "completion_tokens": 87, "duration": 9.50795292854309, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    value_to_pos = {grid[i][j]: (i, j) for i in range(N) for j in range(N)}\n    heap = [(0, value, [value]) for value in range(1, N * N + 1)]\n    visited = set()\n\n    while heap:\n        cost, value, path = heappop(heap)\n        if len(path) == k:\n            return path\n        if (value, len(path)) in visited:\n            continue\n        visited.add((value, len(path)))\n        i, j = value_to_pos[value]\n        for di, dj in moves:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < N and 0 <= nj < N:\n                next_value = grid[ni][nj]\n                new_path = path + [next_value]\n                heappush(heap, (cost + next_value, next_value, new_path))", "prompt_tokens": 446, "completion_tokens": 249, "duration": 18.976919412612915, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 1, "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 2]\n    \n    tribonacci = [3, 2]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            next_val = tribonacci[-1] + tribonacci[-2] + (1 + (i + 1) // 2)\n            tribonacci.append(next_val)\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 125, "duration": 12.824751138687134, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n        if balance >= 2:\n            return True\n    return False", "prompt_tokens": 183, "completion_tokens": 193, "duration": 15.617799520492554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex to match the conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{0,2}\\.[txt|exe|dll]{3}$'\n    # Check if the file name matches the pattern and does not contain more than three digits\n    if re.match(pattern, file_name) and len(re.findall(r'\\d', file_name)) <= 3:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 264, "completion_tokens": 116, "duration": 10.755328893661499, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 36, "duration": 6.350273132324219, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 179, "completion_tokens": 59, "duration": 8.006552696228027, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    return max(sorted(words), key=lambda x: len(set(x)))", "prompt_tokens": 170, "completion_tokens": 23, "duration": 6.37529993057251, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 71, "duration": 8.549454927444458, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "prompt_tokens": 150, "completion_tokens": 68, "duration": 4.141433477401733, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 118, "duration": 6.5843377113342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": true, "solved_count": 4, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i+1, a): # start from i+1 to avoid repeating the same factor\n                if a % (i*j) == 0 and is_prime(j):\n                    k = a // (i*j)\n                    if is_prime(k) and k != i and k != j:\n                        return True\n    return False", "prompt_tokens": 129, "completion_tokens": 158, "duration": 9.53858232498169, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 ** (n - 1) - 8 ** (n - 1)", "prompt_tokens": 94, "completion_tokens": 81, "duration": 5.6620423793792725, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Count the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    sentences = [sentence.strip() for sentence in S.replace('?', '.').replace('!', '.').split('.')]\n    return sum(sentence.startswith('I') for sentence in sentences if sentence)", "prompt_tokens": 157, "completion_tokens": 92, "duration": 6.678186893463135, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": false, "solved_count": 0, "generated_code": "def encode(message):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    return ''.join(vowels[c] if c in vowels else c.swapcase() for c in message)", "prompt_tokens": 159, "completion_tokens": 94, "duration": 7.198381185531616, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    from math import sqrt\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = max(filter(is_prime, lst), default=0)\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 336, "completion_tokens": 98, "duration": 5.527128219604492, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n))) if n >= 0 else -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 75, "duration": 9.100237131118774, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_units = sum(row.count(1) for row in grid)\n    return math.ceil(total_units / capacity)", "prompt_tokens": 373, "completion_tokens": 39, "duration": 4.75900673866272, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 7.5104005336761475, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # Count the parentheses in both strings\n    count1 = str1.count('(') - str1.count(')')\n    count2 = str2.count('(') - str2.count(')')\n\n    # Check if concatenating in any order would result in a balanced string\n    if count1 + count2 != 0:\n        return 'No'\n    if count1 < 0 and count2 > 0:\n        return 'No'\n    if count2 < 0 and count1 > 0:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 135, "duration": 9.524965047836304, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 6.2166948318481445, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 <= abs(x) < 100)", "prompt_tokens": 178, "completion_tokens": 72, "duration": 8.557146072387695, "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    # Check for whitespace\n    if ' ' in txt:\n        return txt.split()\n    # Check for commas\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Count lower-case odd order letters\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 190, "completion_tokens": 87, "duration": 9.50795292854309, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    # Convert grid values to (value, row, col) tuples\n    flat_grid = [(val, i, j) for i, row in enumerate(grid) for j, val in enumerate(row)]\n    # Sort the flat grid to get the smallest value's position\n    flat_grid.sort()\n    # Starting point is the smallest value\n    start_val, start_row, start_col = flat_grid[0]\n\n    # Priority queue; each element is (path as list, last value, last row, last col, steps taken)\n    pq = [([start_val], start_val, start_row, start_col, 1)]\n    visited = set()\n\n    while pq:\n        path, last_val, r, c, steps = heappop(pq)\n        if steps == k:\n            return path\n        if (r, c, steps) in visited:\n            continue\n        visited.add((r, c, steps))\n\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            new_r, new_c = r + dr, c + dc\n            if 0 <= new_r < N and 0 <= new_c < N:\n                new_val = grid[new_r][new_c]\n                new_path = path + [new_val]\n                heappush(pq, (new_path, new_val, new_r, new_c, steps + 1))", "prompt_tokens": 446, "completion_tokens": 331, "duration": 28.545739889144897, "result": "passed", "passed": true}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    trib = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            trib.append(1 + i / 2)\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 1])\n    return trib", "prompt_tokens": 285, "completion_tokens": 109, "duration": 7.184647560119629, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n        if balance >= 2:\n            return True\n    return False", "prompt_tokens": 183, "completion_tokens": 193, "duration": 15.617799520492554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex pattern to match the file name conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{2,}(\\.)(txt|exe|dll)$'\n    # Check if the file name has more than three digits\n    digit_count = sum(c.isdigit() for c in file_name)\n    if digit_count > 3:\n        return 'No'\n    # Check if the file name matches the pattern\n    if re.match(pattern, file_name):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 264, "completion_tokens": 133, "duration": 11.719170570373535, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 36, "duration": 6.350273132324219, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    b_rotated = b * 2\n    return any(b_rotated[i:i+len(b)] in a for i in range(len(b)))", "prompt_tokens": 179, "completion_tokens": 55, "duration": 6.712971210479736, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word", "prompt_tokens": 170, "completion_tokens": 77, "duration": 8.577604293823242, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 71, "duration": 8.549454927444458, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 4.814969062805176, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group.append(char)\n                if not stack:  # If stack is empty, we've closed a group\n                    result.append(\"\".join(current_group))\n                    current_group = []\n    return result", "prompt_tokens": 165, "completion_tokens": 131, "duration": 7.327171564102173, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 1.9488534927368164, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.454486608505249, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.1187033653259277, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.658391237258911, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 162, "completion_tokens": 114, "duration": 10.491912364959717, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [string for string in strings if substring in string]", "prompt_tokens": 143, "completion_tokens": 56, "duration": 3.354473352432251, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers", "prompt_tokens": 160, "completion_tokens": 64, "duration": 4.195628881454468, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    max_list = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    return max_list", "prompt_tokens": 150, "completion_tokens": 93, "duration": 14.401994466781616, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 118, "duration": 6.5843377113342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 2.9129762649536133, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.7397007942199707, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.3343422412872314, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 109, "completion_tokens": 78, "duration": 4.363313436508179, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.6749536991119385, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.2086007595062256, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes_map = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i:i+2] in notes_map:  # checks for 'o|' and '.|'\n            result.append(notes_map[music_string[i:i+2]])\n            i += 2\n        elif music_string[i] in notes_map:  # checks for 'o'\n            result.append(notes_map[music_string[i]])\n            i += 1\n        else:\n            i += 1  # skips spaces\n    return result", "prompt_tokens": 222, "completion_tokens": 160, "duration": 8.028116226196289, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 8.09266209602356, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 105, "duration": 6.228209972381592, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 119, "duration": 10.70905876159668, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 63, "duration": 4.155231475830078, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.472437143325806, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.022937297821045, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.280451774597168, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while (n % divisor) == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 82, "duration": 6.345757246017456, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    from collections import Counter\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "prompt_tokens": 134, "completion_tokens": 49, "duration": 3.9164326190948486, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.76786208152771, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 5.448589086532593, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 82, "duration": 5.35576868057251, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 2.4599852561950684, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.8211145401000977, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    return fsolve(lambda x: poly(xs, x), 0)[0]", "prompt_tokens": 309, "completion_tokens": 190, "duration": 20.913021326065063, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    indices_divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    indices_divisible_by_three.sort()\n    \n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = indices_divisible_by_three[j]\n            j += 1\n            \n    return l", "prompt_tokens": 200, "completion_tokens": 158, "duration": 10.191901206970215, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.8464164733886719, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 6.632399559020996, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 4.17240309715271, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values.pop(0)\n    return l", "prompt_tokens": 173, "completion_tokens": 67, "duration": 4.660116195678711, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 103, "duration": 6.750247478485107, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    found = 0\n    i = 0\n    while found < n:\n        i += 1\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            found += 1\n    return fib_num", "prompt_tokens": 147, "completion_tokens": 156, "duration": 9.61155104637146, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    l_len = len(l)\n    for i in range(l_len-2):\n        for j in range(i+1, l_len-1):\n            for k in range(j+1, l_len):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 81, "duration": 5.911118030548096, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since every car moving left to right will inevitably collide with each car moving right to left,\n    the total number of collisions will be the product of the number of cars in each set.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 63, "duration": 4.7682929039001465, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 15.992332696914673, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.4600718021392822, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.039748191833496, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.4021999835968018, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 7.716187000274658, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2.0", "prompt_tokens": 125, "completion_tokens": 63, "duration": 8.576449394226074, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 80, "duration": 5.671098709106445, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.585334539413452, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 65, "duration": 5.6312642097473145, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 58, "duration": 3.9107272624969482, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 45, "duration": 3.646873950958252, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 8.008532047271729, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.5824995040893555, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.099579811096191, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.342074394226074, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.942690372467041, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.118938446044922, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(x):\n        if x <= 1:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    \n    prime_factor = 1\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            prime_factor = i\n            n = n // i\n        if n == 1:\n            break\n    if n > 1 and is_prime(n):\n        prime_factor = n\n    return prime_factor", "prompt_tokens": 113, "completion_tokens": 169, "duration": 10.55178952217102, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.8594865798950195, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.804905414581299, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.312058687210083, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 96, "duration": 5.508849620819092, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    \"\"\"\n    Count the number of vowels in a string, considering 'y' as a vowel only if it is at the end of the string.\n    \"\"\"\n    count = 0\n    vowels = \"aeiouAEIOU\"\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"python\"))  # 1\nprint(vowels_count(\"fly\"))  # 1\nprint(vowels_count(\"Y\"))  # 1", "prompt_tokens": 176, "completion_tokens": 169, "duration": 12.168901443481445, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": true, "solved_count": 4, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.623070001602173, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.189210891723633, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))\n\n# Example usage\nprint(pluck([4,2,3]))  # Output: [2, 1]\nprint(pluck([1,2,3]))  # Output: [2, 1]\nprint(pluck([]))  # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]", "prompt_tokens": 362, "completion_tokens": 142, "duration": 8.030111074447632, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    # Count the frequency of each element\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Find the greatest integer that meets the condition\n    max_val = -1\n    for num, count in freq.items():\n        if num <= count and num > max_val:\n            max_val = num\n\n    return max_val", "prompt_tokens": 215, "completion_tokens": 101, "duration": 6.88358473777771, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst_sorted = sorted(lst)\n    result = []\n    while lst_sorted:\n        result.append(lst_sorted.pop(0))\n        if lst_sorted:\n            result.append(lst_sorted.pop(-1))\n    return result", "prompt_tokens": 174, "completion_tokens": 53, "duration": 4.253214120864868, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 89, "duration": 4.688853025436401, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.516024112701416, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 68, "duration": 4.877672433853149, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has total number of chars in all strings of the list less than the other list.\n    If the two lists have the same number of chars, return the first list.\n    '''\n    count_lst1 = sum(len(item) for item in lst1)\n    count_lst2 = sum(len(item) for item in lst2)\n\n    if count_lst1 < count_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 116, "duration": 9.095982074737549, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 137, "duration": 9.098172903060913, "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    if a >= 0:\n        return round(a ** (1/3)) ** 3 == a\n    else:\n        return round(abs(a) ** (1/3)) ** 3 == abs(a)", "prompt_tokens": 160, "completion_tokens": 54, "duration": 5.048715829849243, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = set('2357BD')\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 36, "duration": 2.8843770027160645, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "prompt_tokens": 189, "completion_tokens": 44, "duration": 4.07654881477356, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 80, "duration": 4.601515054702759, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Converts a list of numeric grades to their corresponding letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 269, "duration": 16.5719051361084, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.594987392425537, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        return 2 * (10 ** (n - 1)) - 2 * (9 ** (n - 1))", "prompt_tokens": 94, "completion_tokens": 52, "duration": 4.161189317703247, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum([int(digit) for digit in str(N)])\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 52, "duration": 3.763606548309326, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 82, "duration": 7.497905492782593, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.7834129333496094, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    results = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                results.append((i, j))\n    # Sorting by row in ascending order, then by column in descending order\n    results.sort(key=lambda tup: (tup[0], -tup[1]))\n    return results", "prompt_tokens": 309, "completion_tokens": 164, "duration": 7.63139796257019, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 55, "duration": 4.61114501953125, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = 4  # Rotate by 2 * 2 places\n            if char.islower():\n                encrypted += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                encrypted += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 160, "completion_tokens": 103, "duration": 7.592275142669678, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    return unique_sorted_lst[1] if len(unique_sorted_lst) > 1 else None", "prompt_tokens": 174, "completion_tokens": 39, "duration": 4.190107822418213, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of sentences starting with \"I\".\n    \"\"\"\n    sentences = [s.strip() for s in S.replace('?', '.').replace('!', '.').split('.')]\n    return sum(s.startswith(\"I\") for s in sentences if s)", "prompt_tokens": 157, "completion_tokens": 94, "duration": 5.78433632850647, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.897913932800293, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case and replacing vowels.\n    \"\"\"\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            # Find the index of the vowel in the alphabet\n            alphabet = 'abcdefghijklmnopqrstuvwxyz'\n            char_lower = char.lower()  # Convert to lowercase to handle uppercase vowels\n            index = alphabet.index(char_lower)\n            # Calculate the new index, considering the circular nature of the alphabet\n            new_index = (index + 2) % 26\n            new_char = alphabet[new_index]\n            # Preserve the original case\n            if char.isupper():\n                return new_char.upper()\n            else:\n                return new_char\n        else:\n            return char\n\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            swapped_char = swap_case(char)\n            replaced_char = replace_vowel(swapped_char)\n            encoded_message += replaced_char\n        else:\n            encoded_message += char\n\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 242, "duration": 10.827568054199219, "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    from math import sqrt\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = max(filter(is_prime, lst), default=0)\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 336, "completion_tokens": 98, "duration": 5.527128219604492, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(d):\n    if not d or not all(isinstance(key, str) for key in d):\n        return False\n    are_all_lower = all(key.islower() for key in d if isinstance(key, str))\n    are_all_upper = all(key.isupper() for key in d if isinstance(key, str))\n    return are_all_lower or are_all_upper", "prompt_tokens": 219, "completion_tokens": 81, "duration": 5.4894700050354, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 7.680834770202637, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.9330990314483643, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "prompt_tokens": 122, "completion_tokens": 62, "duration": 4.071497201919556, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        if num - int(num) < 0.5:\n            return int(num)\n        else:\n            return int(num) + 1\n    else:\n        if num - int(num) > -0.5:\n            return int(num)\n        else:\n            return int(num) - 1", "prompt_tokens": 206, "completion_tokens": 85, "duration": 6.886923551559448, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.0174098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 49, "duration": 4.480172157287598, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 125, "duration": 8.586742162704468, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.561617374420166, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    def has_no_even_digit(n):\n        return all(int(digit) % 2 != 0 for digit in str(n))\n    \n    return sorted(filter(has_no_even_digit, x))", "prompt_tokens": 152, "completion_tokens": 48, "duration": 4.535238742828369, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_word[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 105, "duration": 7.284886360168457, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # even\n            result.append(factorial(i))\n        else:  # odd\n            result.append(sum_to_x(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 113, "duration": 7.864172697067261, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 99, "duration": 9.287688255310059, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    \"\"\"\n    Count the number of elements in an array for which the sum of its digits is greater than 0.\n    \"\"\"\n    def sum_of_digits(n):\n        \"\"\"\n        Calculate the sum of digits of an integer, considering the sign of the first digit if negative.\n        \"\"\"\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(digit) for digit in str(n)[2:])\n        else:\n            return sum(int(digit) for digit in str(n))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 132, "duration": 10.220707654953003, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "prompt_tokens": 349, "completion_tokens": 58, "duration": 8.516769170761108, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    odd_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_lst1 <= even_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 79, "duration": 8.165547609329224, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    if not test:\n        return {}\n    \n    words = test.split()\n    counter = {}\n    \n    for word in words:\n        counter[word] = counter.get(word, 0) + 1\n    \n    max_count = max(counter.values())\n    \n    return {word: count for word, count in counter.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 79, "duration": 7.811152219772339, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result_string = ''.join([char for char in s if char not in c])\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)", "prompt_tokens": 212, "completion_tokens": 52, "duration": 5.9505088329315186, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 75, "duration": 8.500503301620483, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 135, "duration": 10.537280797958374, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(row.count(1) for row in grid)\n    import math\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 373, "completion_tokens": 41, "duration": 6.1018311977386475, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers based on the number of ones in their binary representation, then by their decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 56, "duration": 6.980501413345337, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "prompt_tokens": 231, "completion_tokens": 64, "duration": 6.603402376174927, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels and i != 0 and i != len(word) - 1:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 90, "duration": 7.486766576766968, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    first, second = lst\n    if first.count('(') >= second.count(')') and first.count(')') <= second.count('('):\n        return 'Yes'\n    if second.count('(') >= first.count(')') and second.count(')') <= first.count('('):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 79, "duration": 8.326421737670898, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 7.984682559967041, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 6.414278984069824, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 < x < 100)", "prompt_tokens": 178, "completion_tokens": 70, "duration": 7.652598142623901, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 at the end, as the sequence always ends with 1.\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 120, "duration": 10.973882913589478, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into components\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if month, day, and year are digits\n    if not (parts[0].isdigit() and parts[1].isdigit() and parts[2].isdigit()):\n        return False\n    \n    month, day, year = int(parts[0]), int(parts[1]), int(parts[2])\n    \n    # Check month range\n    if month < 1 or month > 12:\n        return False\n    \n    # Check day range based on month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 269, "duration": 23.858283758163452, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 0)", "prompt_tokens": 190, "completion_tokens": 66, "duration": 9.35186219215393, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    # Check for duplicates\n    if len(lst) != len(set(lst)):\n        counter = {}\n        for number in lst:\n            if number in counter:\n                counter[number] += 1\n                if counter[number] > 2:\n                    return False\n            else:\n                counter[number] = 1\n    # Check if list is sorted\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 88, "duration": 7.61109471321106, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": false, "solved_count": 2, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    \n    if start_max > end_min:\n        return \"NO\"\n    \n    intersection_length = end_min - start_max + 1\n    \n    return \"YES\" if is_prime(intersection_length) else \"NO\"", "prompt_tokens": 304, "completion_tokens": 139, "duration": 12.270070552825928, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    prod_sign = 1\n    sum_magnitudes = 0\n    for num in arr:\n        sum_magnitudes += abs(num)\n        if num < 0:\n            prod_sign *= -1\n        elif num == 0:\n            prod_sign = 0\n            break\n    return sum_magnitudes * prod_sign", "prompt_tokens": 172, "completion_tokens": 91, "duration": 9.770333528518677, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    value_to_pos = {grid[i][j]: (i, j) for i in range(N) for j in range(N)}\n    heap = [(0, value, [value]) for value in range(1, N * N + 1)]\n    visited = set()\n\n    while heap:\n        cost, value, path = heappop(heap)\n        if len(path) == k:\n            return path\n        if (value, len(path)) in visited:\n            continue\n        visited.add((value, len(path)))\n        i, j = value_to_pos[value]\n        for di, dj in moves:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < N and 0 <= nj < N:\n                next_value = grid[ni][nj]\n                new_path = path + [next_value]\n                heappush(heap, (cost + next_value, next_value, new_path))", "prompt_tokens": 446, "completion_tokens": 249, "duration": 18.976919412612915, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 1, "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 2]\n    \n    tribonacci = [3, 2]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            next_val = tribonacci[-1] + tribonacci[-2] + (1 + (i + 1) // 2)\n            tribonacci.append(next_val)\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 125, "duration": 12.824751138687134, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    all_even = True\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            all_even = False\n        n //= 10\n    return product if not all_even else 0", "prompt_tokens": 121, "completion_tokens": 73, "duration": 10.939483642578125, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n        if balance >= 2:\n            return True\n    return False", "prompt_tokens": 183, "completion_tokens": 193, "duration": 15.617799520492554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.618016242980957, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.endswith(' ') == False and txt[-1:].isalpha() and (len(txt) == 1 or txt[-2] == ' ')", "prompt_tokens": 187, "completion_tokens": 46, "duration": 6.1157262325286865, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 46, "duration": 6.0636537075042725, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 80, "duration": 7.315985202789307, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    def parse_value(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            return float(value)\n        return value\n\n    a_parsed = parse_value(a)\n    b_parsed = parse_value(b)\n\n    if a_parsed > b_parsed:\n        return a\n    elif b_parsed > a_parsed:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 151, "duration": 10.917685508728027, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Check if n is less than the smallest possible sum of 4 positive even numbers, which is 2+2+2+2=8\n    if n < 8:\n        return False\n    # If n is greater than or equal to 8, check if n is even. Only even numbers can be written as the sum of 4 even numbers.\n    return n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 121, "duration": 30.209633588790894, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 75, "duration": 11.64385199546814, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex to match the conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{0,2}\\.[txt|exe|dll]{3}$'\n    # Check if the file name matches the pattern and does not contain more than three digits\n    if re.match(pattern, file_name) and len(re.findall(r'\\d', file_name)) <= 3:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 264, "completion_tokens": 116, "duration": 10.755328893661499, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 6.409059047698975, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 101, "duration": 9.537988662719727, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    \n    # Convert the string representations to Fraction objects\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    \n    # Multiply the fractions\n    result = x_fraction * n_fraction\n    \n    # Check if the result is a whole number\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 76, "duration": 8.130373001098633, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 81, "duration": 8.159808874130249, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_odd(n):\n        return int(str(n)[0]) % 2 != 0 and int(str(n)[-1]) % 2 != 0\n    return sum(1 for num in nums if num > 10 and is_odd(num))", "prompt_tokens": 169, "completion_tokens": 62, "duration": 14.110383987426758, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Create the array based on given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the number of triples\n    triples_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triples_count += 1\n                    \n    return triples_count", "prompt_tokens": 215, "completion_tokens": 202, "duration": 20.475975513458252, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets.index(planet1), planets.index(planet2)) + 1\n    end = max(planets.index(planet1), planets.index(planet2))\n    return tuple(planets[start:end])", "prompt_tokens": 261, "completion_tokens": 111, "duration": 11.851227521896362, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically if lengths are the same\n    filtered_sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return filtered_sorted_lst", "prompt_tokens": 237, "completion_tokens": 85, "duration": 8.547521352767944, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.010945796966553, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 40, "duration": 6.969480276107788, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.062080383300781, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 327, "completion_tokens": 80, "duration": 9.05793833732605, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    b_rotated = b * 2\n    return any(b_rotated[i:i+len(b)] in a for i in range(len(b)))", "prompt_tokens": 179, "completion_tokens": 55, "duration": 6.712971210479736, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 75, "duration": 8.263220310211182, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 253, "duration": 17.165478944778442, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 137, "duration": 10.570029258728027, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    return max(sorted(words), key=lambda x: len(set(x)))", "prompt_tokens": 170, "completion_tokens": 23, "duration": 6.37529993057251, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 42, "duration": 6.503498077392578, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f\" {op} {num}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 87, "duration": 10.327767610549927, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 8.30483889579773, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 96, "duration": 8.531377077102661, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 71, "duration": 10.795908451080322, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 93, "duration": 5.402937173843384, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    \n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            stack.pop()\n            current_group += char\n            if not stack:  # If stack is empty, one group ends\n                result.append(current_group)\n                current_group = \"\"\n    \n    return result", "prompt_tokens": 165, "completion_tokens": 124, "duration": 11.435652732849121, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.339478015899658, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 6.163032054901123, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate Mean Absolute Deviation around the mean of the input numbers.\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 77, "duration": 5.141437530517578, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result += [delimeter, number]\n    return result", "prompt_tokens": 142, "completion_tokens": 109, "duration": 5.564071416854858, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    current_depth = 0\n    max_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            if max_depth > 0:\n                max_depths.append(max_depth)\n                max_depth = 0\n                current_depth = 0\n    \n    # Append the last group's depth if not already done\n    if max_depth > 0:\n        max_depths.append(max_depth)\n    \n    return max_depths", "prompt_tokens": 162, "completion_tokens": 161, "duration": 6.408170700073242, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 90, "duration": 4.404268980026245, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 127, "duration": 8.003801584243774, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 150, "completion_tokens": 63, "duration": 3.8775813579559326, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "is_solved": false, "solved_count": 0, "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    \"\"\"\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 85, "duration": 5.923509836196899, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5458924770355225, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string", "prompt_tokens": 152, "completion_tokens": 110, "duration": 6.251906394958496, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.9745218753814697, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 76, "duration": 4.932122468948364, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 4.362114906311035, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.2260966300964355, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 9.87856936454773, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\"\"\"\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 93, "duration": 4.574025392532349, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 107, "duration": 7.941210746765137, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 119, "duration": 12.650938272476196, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 104, "duration": 5.951208114624023, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 3.4119269847869873, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.114682674407959, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.049576997756958, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 67, "duration": 5.129474878311157, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    from collections import Counter\n    counts = Counter(numbers)\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 82, "duration": 5.181595087051392, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 3.4669322967529297, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.6389334201812744, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 98, "duration": 5.146501541137695, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 8.919448137283325, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.9758059978485107, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    return fsolve(lambda x: poly(xs, x), 0)[0]", "prompt_tokens": 309, "completion_tokens": 190, "duration": 9.056299686431885, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three_sorted = sorted(divisible_by_three)\n    # Replace the original elements with the sorted ones\n    for i in range(len(divisible_by_three_sorted)):\n        l[i * 3] = divisible_by_three_sorted[i]\n    return l", "prompt_tokens": 200, "completion_tokens": 106, "duration": 8.755090951919556, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 2.196974754333496, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 25, "duration": 2.2397406101226807, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 63, "duration": 4.60379695892334, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_indices_values.pop(0)\n    return l", "prompt_tokens": 173, "completion_tokens": 71, "duration": 6.3040525913238525, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 114, "duration": 6.158055782318115, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fib():\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n    \n    fib_gen = fib()\n    count = 0\n    while True:\n        fib_num = next(fib_gen)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "prompt_tokens": 147, "completion_tokens": 149, "duration": 12.04519772529602, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 77, "duration": 7.074530601501465, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n cars moving left to right and n cars moving right to left on a straight line,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 56, "duration": 5.7609336376190186, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 8.648621320724487, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.0334479808807373, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 61, "duration": 3.7501354217529297, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 4.8088202476501465, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 7.237758636474609, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 4.156910181045532, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 23, "duration": 2.728968858718872, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p.\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 37, "duration": 2.5660033226013184, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.033555507659912, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 60, "duration": 3.5992960929870605, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 3.0685110092163086, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 5.81775426864624, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 5.8695666790008545, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 66, "duration": 3.5212080478668213, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            balance += 1\n        elif bracket == \">\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 4.9150450229644775, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 137, "completion_tokens": 55, "duration": 3.675961971282959, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(set(l1).intersection(set(l2)))", "prompt_tokens": 164, "completion_tokens": 28, "duration": 2.4190402030944824, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    while i <= n**0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n        i += 1\n    \n    # Check if n itself is a prime greater than the found prime factors\n    if is_prime(n):\n        return n\n    return prime_factor", "prompt_tokens": 113, "completion_tokens": 152, "duration": 9.441439867019653, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.6224443912506104, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 3.84250545501709, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i*x for i, x in enumerate(xs) if i > 0]", "prompt_tokens": 158, "completion_tokens": 29, "duration": 2.7501437664031982, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 103, "duration": 5.146378755569458, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = sum(1 for char in s if char in vowels)\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "prompt_tokens": 176, "completion_tokens": 67, "duration": 4.976378440856934, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": true, "solved_count": 4, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.5306777954101562, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 41, "duration": 2.528095006942749, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "prompt_tokens": 362, "completion_tokens": 52, "duration": 3.2216312885284424, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    result = -1\n    for num in freq:\n        if num <= freq[num] and num > result:\n            result = num\n    return result", "prompt_tokens": 215, "completion_tokens": 53, "duration": 3.8324878215789795, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.461360216140747, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 195, "duration": 10.612133741378784, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.952268362045288, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 68, "duration": 3.892639636993408, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has total number of chars in all strings of the list less than the other list.\n    If the two lists have the same number of chars, return the first list.\n    '''\n    count_lst1 = sum(len(s) for s in lst1)\n    count_lst2 = sum(len(s) for s in lst2)\n    return lst1 if count_lst1 <= count_lst2 else lst2", "prompt_tokens": 243, "completion_tokens": 109, "duration": 6.620366334915161, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            while a % i == 0:\n                a //= i\n    return prime_factors == 3", "prompt_tokens": 129, "completion_tokens": 125, "duration": 7.380889654159546, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.363219738006592, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    if a >= 0:\n        return round(a ** (1/3)) ** 3 == a\n    else:\n        return round(abs(a) ** (1/3)) ** 3 == abs(a)", "prompt_tokens": 160, "completion_tokens": 54, "duration": 4.368709564208984, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = set('2357BD')\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 36, "duration": 3.0474772453308105, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "prompt_tokens": 189, "completion_tokens": 44, "duration": 5.687199831008911, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 80, "duration": 6.6162192821502686, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Convert a list of GPA scores to their corresponding letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 269, "duration": 14.769484043121338, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.747917652130127, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        # There are 9*(10**(n-2)) numbers that start with 1 and have n digits\n        # There are 10**(n-1) numbers that end with 1 and have n digits\n        # The intersection set of these two sets are the numbers that both start and end with 1, which are 10**(n-2)\n        return 9*(10**(n-2)) + 10**(n-1) - 10**(n-2)", "prompt_tokens": 94, "completion_tokens": 160, "duration": 7.7087695598602295, "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 33, "duration": 3.8283326625823975, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 59, "duration": 4.08804178237915, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 27, "duration": 3.588383436203003, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list and an integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] with coordinates.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda k: (k[0], -k[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 117, "duration": 5.647165060043335, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"\n    if not array:\n        return []\n\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 253, "completion_tokens": 140, "duration": 9.378794431686401, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            result += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            result += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 102, "duration": 5.98836612701416, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 45, "duration": 3.954155683517456, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of sentences starting with \"I\".\n    \"\"\"\n    sentences = [s.strip() for s in S.replace('?', '.').replace('!', '.').split('.')]\n    return sum(s.startswith(\"I\") for s in sentences if s)", "prompt_tokens": 157, "completion_tokens": 94, "duration": 5.78433632850647, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 56, "duration": 4.2576680183410645, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": false, "solved_count": 0, "generated_code": "def encode(message):\n    \"\"\"\n    Encode the given message by swapping the case of all letters and replacing \n    vowels with the letter that appears 2 places ahead of that vowel in the \n    English alphabet.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    shift_vowel = {'a': 'c', 'A': 'C', 'e': 'g', 'E': 'G', 'i': 'k', 'I': 'K', 'o': 'q', 'O': 'Q', 'u': 'w', 'U': 'W'}\n    encoded_message = ''\n    \n    for char in message:\n        if char in vowels:\n            encoded_message += shift_vowel[char]\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 166, "duration": 8.63805627822876, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "prompt_tokens": 336, "completion_tokens": 111, "duration": 6.8000452518463135, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not d:\n        return False\n    all_lower = all(isinstance(k, str) and k.islower() for k in d.keys())\n    all_upper = all(isinstance(k, str) and k.isupper() for k in d.keys())\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 116, "duration": 6.234539270401001, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 82, "duration": 5.789792060852051, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 3.7479894161224365, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)", "prompt_tokens": 122, "completion_tokens": 63, "duration": 5.795690536499023, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    number = float(value)\n    if number > 0:\n        if number - int(number) >= 0.5:\n            return int(number) + 1\n        else:\n            return int(number)\n    else:\n        if number - int(number) <= -0.5:\n            return int(number) - 1\n        else:\n            return int(number)", "prompt_tokens": 206, "completion_tokens": 85, "duration": 5.3582847118377686, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 25, "duration": 4.312954902648926, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 4.500898122787476, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"Returns the biggest even integer in the range [x, y] inclusive, or -1 if no even number exists in the range.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 73, "duration": 6.813904762268066, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 4.6692986488342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted(filter(has_no_even_digit, x))", "prompt_tokens": 152, "completion_tokens": 88, "duration": 6.166109323501587, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_sorted_reversed = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [digit_names[num] for num in filtered_sorted_reversed]", "prompt_tokens": 326, "completion_tokens": 107, "duration": 6.505085468292236, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0: return 1\n        return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return x * (x + 1) // 2\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 103, "duration": 7.626409292221069, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 100, "duration": 12.693182706832886, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n))) if n >= 0 else -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n    return sum(1 for x in arr if sum_digits(x) > 0)", "prompt_tokens": 174, "completion_tokens": 72, "duration": 7.929291248321533, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "prompt_tokens": 349, "completion_tokens": 67, "duration": 7.721670389175415, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines whether it is possible to perform an exchange of elements between lst1 and lst2\n    to make lst1 a list of only even numbers.\n    \"\"\"\n    # Count the number of odd elements in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # Count the number of even elements in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even elements in lst2 to replace the odd elements in lst1, return \"YES\"\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 168, "duration": 9.662611961364746, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    hist = {}\n    for word in words:\n        if word in hist:\n            hist[word] += 1\n        else:\n            hist[word] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "prompt_tokens": 201, "completion_tokens": 85, "duration": 8.905746459960938, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join(filter(lambda x: x not in c, s))\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 38, "duration": 6.9586029052734375, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    def count_odd_digits(s):\n        return sum(1 for char in s if int(char) % 2 != 0)\n    \n    result = []\n    for s in lst:\n        count = count_odd_digits(s)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 90, "duration": 7.873712539672852, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 7.370507717132568, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": false, "solved_count": 0, "generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(row.count(1) for row in grid)\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 373, "completion_tokens": 37, "duration": 4.663074731826782, "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    \"\"\"\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 137, "duration": 10.671086072921753, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    # Define a list to hold the words with exactly n consonants\n    result = []\n    # Split the input string into words\n    words = s.split()\n    # Define vowels for comparison\n    vowels = 'aeiouAEIOU'\n    # Loop through each word in the words list\n    for word in words:\n        # Initialize a count for consonants\n        consonant_count = 0\n        # Loop through each character in the current word\n        for char in word:\n            # If the character is not a vowel and is an alphabet, increase the consonant count\n            if char not in vowels and char.isalpha():\n                consonant_count += 1\n        # If the consonant count matches the given number, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    # Return the result list\n    return result", "prompt_tokens": 231, "completion_tokens": 196, "duration": 13.103304624557495, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels and i != 0 and i != len(word) - 1:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 90, "duration": 7.486766576766968, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    first, second = lst\n    if first.count('(') >= second.count(')') and second.count('(') <= first.count(')'):\n        return 'Yes'\n    if second.count('(') >= first.count(')') and first.count('(') <= second.count(')'):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 79, "duration": 10.340752363204956, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 20, "duration": 5.361988544464111, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 5.717287540435791, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 < x < 100)", "prompt_tokens": 178, "completion_tokens": 70, "duration": 7.652598142623901, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Since the sequence always ends at 1, and 1 is odd.\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 119, "duration": 9.709819316864014, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into components\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if month, day, and year are digits\n    if not (parts[0].isdigit() and parts[1].isdigit() and parts[2].isdigit()):\n        return False\n    \n    month, day, year = int(parts[0]), int(parts[1]), int(parts[2])\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    elif month == 2:\n        if day > 29:\n            return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 268, "duration": 16.52060055732727, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 190, "completion_tokens": 66, "duration": 10.160624980926514, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    if len(lst) != len(set(lst)):\n        duplicates = [x for x in lst if lst.count(x) > 2]\n        if duplicates:\n            return False\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 52, "duration": 6.58048415184021, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.760860443115234, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    value_to_pos = {grid[i][j]: (i, j) for i in range(N) for j in range(N)}\n    heap = [(0, value, [value]) for value in range(1, N * N + 1)]\n    visited = set()\n\n    while heap:\n        cost, value, path = heappop(heap)\n        if len(path) == k:\n            return path\n        if (value, len(path)) in visited:\n            continue\n        visited.add((value, len(path)))\n        i, j = value_to_pos[value]\n        for di, dj in moves:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < N and 0 <= nj < N:\n                next_value = grid[ni][nj]\n                new_path = path + [next_value]\n                heappush(heap, (cost + next_value, next_value, new_path))", "prompt_tokens": 446, "completion_tokens": 249, "duration": 18.976919412612915, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 1, "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 2]\n    \n    tribonacci = [3, 2]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            next_val = tribonacci[-1] + tribonacci[-2] + (1 + (i + 1) // 2)\n            tribonacci.append(next_val)\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 125, "duration": 12.824751138687134, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.127147912979126, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n        if balance >= 2:\n            return True\n    return False", "prompt_tokens": 183, "completion_tokens": 193, "duration": 15.617799520492554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 6.217341184616089, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    return not txt[-2].isalpha() if len(txt) > 1 else True", "prompt_tokens": 187, "completion_tokens": 177, "duration": 13.307818412780762, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 46, "duration": 7.36416482925415, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 80, "duration": 8.498303890228271, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 88, "duration": 8.838150978088379, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest four positive even numbers are 2, 4, 6, 8 and their sum is 20, \n    # any number less than 20 cannot be written as the sum of exactly 4 positive even numbers.\n    if n < 8 or n % 2 != 0:\n        return False\n    # If n is greater or equal to 8 and is even, it can always be represented as the sum of 2, 2, 2, and (n-6).\n    # (n-6) will always be even and positive if n >= 8.\n    return True", "prompt_tokens": 127, "completion_tokens": 166, "duration": 13.47548794746399, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of n.\"\"\"\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 82, "duration": 8.756889343261719, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Replace all spaces in the string with underscores, \n    and if there are more than 2 consecutive spaces, \n    replace all consecutive spaces with a single dash.\n    \"\"\"\n    import re\n    text = re.sub(r' {3,}', '-', text) # Replace 3 or more spaces with a dash\n    text = re.sub(r' ', '_', text) # Replace remaining spaces with underscores\n    return text", "prompt_tokens": 156, "completion_tokens": 98, "duration": 9.967332601547241, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex to match the conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{0,2}\\.[txt|exe|dll]{3}$'\n    # Check if the file name matches the pattern and does not contain more than three digits\n    if re.match(pattern, file_name) and len(re.findall(r'\\d', file_name)) <= 3:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 264, "completion_tokens": 116, "duration": 10.755328893661499, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(lst[i]**2 if i % 3 == 0 else lst[i]**3 if i % 4 == 0 else lst[i] for i in range(len(lst)))", "prompt_tokens": 219, "completion_tokens": 49, "duration": 6.622523546218872, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 101, "duration": 9.225059032440186, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    return (num_x * num_n) % (den_x * den_n) == 0", "prompt_tokens": 205, "completion_tokens": 59, "duration": 7.806628227233887, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 35, "duration": 9.84451937675476, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_odd(n):\n        return int(str(n)[0]) % 2 != 0 and int(str(n)[-1]) % 2 != 0\n    return sum(1 for num in nums if num > 10 and is_odd(num))", "prompt_tokens": 169, "completion_tokens": 62, "duration": 14.110383987426758, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    # Generate the array based on given formula\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    # Count of triples\n    count = 0\n    \n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                # Check if the sum of the triple is divisible by 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 215, "completion_tokens": 140, "duration": 15.25611162185669, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])", "prompt_tokens": 261, "completion_tokens": 119, "duration": 8.210850954055786, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    \"\"\"Sorts a list of strings by length after removing odd-length strings.\"\"\"\n    # Remove strings with odd lengths\n    even_length_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_lst.sort()  # Alphabetical sort\n    even_length_lst.sort(key=len)  # Length sort\n    return even_length_lst", "prompt_tokens": 237, "completion_tokens": 100, "duration": 10.530589580535889, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    \"\"\"Returns the value of x if n is a prime number and the value of y otherwise.\"\"\"\n    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 81, "duration": 8.770094871520996, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)", "prompt_tokens": 187, "completion_tokens": 34, "duration": 6.74601411819458, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.498291730880737, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n    \n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 327, "completion_tokens": 80, "duration": 8.35807728767395, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    \"\"\"\n    Check if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False", "prompt_tokens": 179, "completion_tokens": 64, "duration": 9.012350797653198, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.290167570114136, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 203, "duration": 15.125856399536133, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.158298015594482, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    return max(sorted(words), key=lambda x: len(set(x)))", "prompt_tokens": 170, "completion_tokens": 23, "duration": 6.37529993057251, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \"\"\"\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining_after_meals = max(0, remaining - eaten)\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 327, "completion_tokens": 223, "duration": 15.553940773010254, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i, op in enumerate(operator):\n        expression += f\" {op} {operand[i+1]}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 83, "duration": 9.930832862854004, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 8.978899002075195, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    result = hashlib.md5(text.encode())\n    return result.hexdigest()", "prompt_tokens": 126, "completion_tokens": 101, "duration": 10.89967942237854, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 71, "duration": 8.509052753448486, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.874492645263672, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    cleaned_string = paren_string.replace(\" \", \"\")\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in cleaned_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 165, "completion_tokens": 106, "duration": 5.802709579467773, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.0843594074249268, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.571848154067993, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 167, "completion_tokens": 54, "duration": 3.981733798980713, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result", "prompt_tokens": 142, "completion_tokens": 65, "duration": 6.018126487731934, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    for group in paren_string.split():\n        max_depth = depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 162, "completion_tokens": 95, "duration": 5.339843273162842, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 40, "duration": 3.286530017852783, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 65, "duration": 4.274240255355835, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    return max_list", "prompt_tokens": 150, "completion_tokens": 65, "duration": 4.313716411590576, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "is_solved": false, "solved_count": 0, "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    # If the string is already a palindrome, return it\n    if string == string[::-1]:\n        return string\n    # Iterate through the string to find the longest palindromic postfix\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 192, "completion_tokens": 169, "duration": 8.425905704498291, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.2341177463531494, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string", "prompt_tokens": 152, "completion_tokens": 110, "duration": 5.643096208572388, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.2577342987060547, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 73, "duration": 4.758653879165649, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.5854110717773438, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.644256830215454, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.884357929229736, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.631695985794067, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 110, "duration": 6.496778726577759, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) < min_diff:\n            min_diff = abs(numbers[i + 1] - numbers[i])\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 124, "duration": 7.4613611698150635, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 173, "completion_tokens": 100, "duration": 7.507568836212158, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values if isinstance(v, int)]", "prompt_tokens": 141, "completion_tokens": 92, "duration": 5.570197105407715, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.9425699710845947, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.2260615825653076, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 80, "duration": 4.760978698730469, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    from collections import Counter\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "prompt_tokens": 134, "completion_tokens": 49, "duration": 4.013584136962891, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 98, "completion_tokens": 20, "duration": 2.279709577560425, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 39, "duration": 3.7254178524017334, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 8.27558422088623, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.6481595039367676, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n\n    def equation(x):\n        return poly(xs, x)\n\n    root = fsolve(equation, 0)[0]\n    return root", "prompt_tokens": 309, "completion_tokens": 203, "duration": 10.263601541519165, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted(l[i] for i in indices)\n    for idx, val in zip(indices, values):\n        l[idx] = val\n    return l", "prompt_tokens": 200, "completion_tokens": 66, "duration": 4.762404918670654, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 2.119497060775757, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 5.114935874938965, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 4.576681613922119, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    even_indices = sorted(l[::2])\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 49, "duration": 4.0540547370910645, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    # Split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 114, "duration": 6.4558680057525635, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "prompt_tokens": 147, "completion_tokens": 146, "duration": 14.21049690246582, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()  # Sort the list to use two pointers approach\n    n = len(l)\n    for i in range(n-2):  # Iterate through the list\n        # Avoid duplicates\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, n - 1  # Set left and right pointers\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 209, "completion_tokens": 153, "duration": 8.514713764190674, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the total number of collisions between two sets of n cars moving towards each other.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 43, "duration": 3.912020444869995, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 6.466832637786865, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.3384833335876465, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 59, "duration": 3.833249807357788, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.352856159210205, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 123, "duration": 6.605600118637085, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2", "prompt_tokens": 125, "completion_tokens": 61, "duration": 4.07043719291687, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 23, "duration": 2.6133816242218018, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 4.366562604904175, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 4.339710712432861, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 37, "duration": 3.4719958305358887, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.7447218894958496, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.142388105392456, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 3.1431708335876465, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 4.316073894500732, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 142, "completion_tokens": 68, "duration": 4.790966033935547, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 137, "completion_tokens": 55, "duration": 4.715466022491455, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.2254202365875244, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    largest_prime = 1\n    # Check for divisibility by 2\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    # Check for odd factors\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            if is_prime(i):\n                largest_prime = i\n            n //= i\n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n    return largest_prime", "prompt_tokens": 113, "completion_tokens": 192, "duration": 11.130263566970825, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 109, "duration": 7.065364599227905, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.774703502655029, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.3936707973480225, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c", "prompt_tokens": 199, "completion_tokens": 93, "duration": 5.989854097366333, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    \"\"\"Returns the number of vowels in the string. 'y' is considered a vowel only if it is at the end of the word.\"\"\"\n    vowels = 'aeiouAEIOU'\n    count = sum(1 for char in s if char in vowels)\n    if s and s[-1] in 'yY':\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"rhythm\"))  # 0\nprint(vowels_count(\"Y\"))  # 1\nprint(vowels_count(\"fly\"))  # 0\nprint(vowels_count(\"quickly\"))  # 2", "prompt_tokens": 176, "completion_tokens": 173, "duration": 16.185860872268677, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": true, "solved_count": 4, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.083728313446045, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    # Split the string to extract numbers\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    # Subtract the sum of apples and oranges from the total number of fruits\n    mangoes = n - sum(numbers)\n    return mangoes", "prompt_tokens": 260, "completion_tokens": 67, "duration": 4.435070514678955, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "prompt_tokens": 362, "completion_tokens": 52, "duration": 4.224318504333496, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    result = -1\n    for key, value in count.items():\n        if key <= value:\n            result = max(result, key)\n    return result", "prompt_tokens": 215, "completion_tokens": 53, "duration": 4.045287847518921, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))  # Take the smallest\n        if sorted_lst:\n            result.append(sorted_lst.pop())  # Take the largest\n    return result", "prompt_tokens": 174, "completion_tokens": 63, "duration": 5.465240716934204, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1.\n    '''\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return -1\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)", "prompt_tokens": 171, "completion_tokens": 159, "duration": 8.314682245254517, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5326101779937744, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 3.613743305206299, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 241, "duration": 17.160208463668823, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i+1, a // i):\n                if (a / i) % j == 0 and is_prime(j) and is_prime(a // (i*j)):\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 133, "duration": 9.425366163253784, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    if a >= 0:\n        return int(round(a ** (1. / 3))) ** 3 == a\n    else:\n        return int(round(-((-a) ** (1. / 3)))) ** 3 == a", "prompt_tokens": 160, "completion_tokens": 60, "duration": 6.299723386764526, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    # Prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Counting the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 69, "duration": 6.023341655731201, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return \"db\" + binary_str + \"db\"", "prompt_tokens": 189, "completion_tokens": 45, "duration": 3.39567494392395, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 57, "duration": 4.011998414993286, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 222, "duration": 11.29977560043335, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.173132658004761, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * (10 ** (n - 1)) - (9 ** (n - 1))", "prompt_tokens": 94, "completion_tokens": 81, "duration": 3.9504661560058594, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 33, "duration": 3.095763921737671, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 4.087356805801392, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 180, "completion_tokens": 40, "duration": 3.4646873474121094, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list and an integer x, returns a list of tuples indicating the positions of x in the list.\n    The positions are returned as (row, column) sorted first by rows in ascending order, then by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda pos: (pos[0], -pos[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 124, "duration": 6.527857780456543, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:  # if the array is empty\n        return []\n    sorted_array = sorted(array)  # sort in ascending order by default\n    if (array[0] + array[-1]) % 2 == 0:  # if the sum of the first and last elements is even\n        sorted_array.reverse()  # reverse to get descending order\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 284, "duration": 15.267506837844849, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            offset = 4 if char.islower() else 4\n            encrypted_char = chr(((ord(char) - 97 + offset) % 26) + 97) if char.islower() else chr(((ord(char) - 65 + offset) % 26) + 65)\n            result += encrypted_char\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 104, "duration": 10.019974708557129, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list if it exists, otherwise None.\n    \"\"\"\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    else:\n        return unique_elements[1]", "prompt_tokens": 174, "completion_tokens": 64, "duration": 4.786969900131226, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n\n    :param S: A string of words\n    :return: The number of sentences starting with \"I\"\n    \"\"\"\n    # Split the string into sentences based on '.', '?' or '!'\n    sentences = [s.strip() for s in S.replace('?', '.').replace('!', '.').split('.') if s]\n\n    # Count sentences starting with \"I\"\n    count = sum(sentence.startswith(\"I\") for sentence in sentences)\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 117, "duration": 6.94419264793396, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 185, "completion_tokens": 59, "duration": 4.006861448287964, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": false, "solved_count": 0, "generated_code": "def encode(message):\n    def shift_vowel(v):\n        vowels = 'aeiouAEIOU'\n        shift = 2\n        if v in vowels:\n            is_upper = v.isupper()\n            index = vowels.index(v.lower())\n            shifted_vowel = vowels[(index + shift) % len(vowels)]\n            return shifted_vowel.upper() if is_upper else shifted_vowel\n        return v\n\n    def swap_case(c):\n        return c.lower() if c.isupper() else c.upper()\n    \n    encoded_message = ''\n    for char in message:\n        if char.lower() in 'aeiou':\n            encoded_message += swap_case(shift_vowel(char))\n        else:\n            encoded_message += swap_case(char)\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 158, "duration": 9.486825704574585, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sum([int(digit) for digit in str(largest_prime)])", "prompt_tokens": 336, "completion_tokens": 112, "duration": 5.940928936004639, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 69, "duration": 4.789583444595337, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 4.909604072570801, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Return the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 3.199455976486206, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 122, "completion_tokens": 75, "duration": 4.7997331619262695, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 3.6809844970703125, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones = [n]\n    for i in range(1, n):\n        stones.append(stones[i-1] + 2)\n    return stones", "prompt_tokens": 182, "completion_tokens": 141, "duration": 12.424156188964844, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 4.219839334487915, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 125, "duration": 8.348047733306885, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.746781349182129, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted(filter(has_no_even_digit, x))", "prompt_tokens": 152, "completion_tokens": 88, "duration": 6.318872451782227, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", \n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [digit_names[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 109, "duration": 7.134451866149902, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 98, "duration": 7.617148160934448, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 101, "duration": 7.27311110496521, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n))) if n >= 0 else -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 75, "duration": 8.908817768096924, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i - 1] > arr[i]:\n            count += 1\n        if count > 1:\n            return False\n    if count == 0:\n        return True\n    return arr[0] >= arr[-1]", "prompt_tokens": 349, "completion_tokens": 92, "duration": 7.470369100570679, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    \"\"\"\n    # Count of odd numbers in lst1\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    # Count of even numbers in lst2\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n\n    # If there are enough even numbers in lst2 to replace all odd numbers in lst1\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 229, "duration": 18.10656476020813, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    words = test.split()\n    hist = {}\n    for word in words:\n        hist[word] = hist.get(word, 0) + 1\n    max_count = max(hist.values(), default=0)\n    return {k: v for k, v in hist.items() if v == max_count}", "prompt_tokens": 201, "completion_tokens": 72, "duration": 6.410729885101318, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result_str = ''.join([char for char in s if char not in c])\n    return (result_str, result_str == result_str[::-1])", "prompt_tokens": 212, "completion_tokens": 43, "duration": 6.830443859100342, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 149, "duration": 10.093224287033081, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.401673793792725, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_units = sum(row.count(1) for row in grid)\n    return math.ceil(total_units / capacity)", "prompt_tokens": 373, "completion_tokens": 39, "duration": 4.75900673866272, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    \"\"\"\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 137, "duration": 11.281432151794434, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() in 'bcdfghjklmnpqrstvwxyz')\n    \n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 66, "duration": 8.044434070587158, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels and i != 0 and i != len(word) - 1:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 90, "duration": 7.486766576766968, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    first, second = lst\n    if first.count('(') >= second.count(')') or second.count('(') >= first.count(')'):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 51, "duration": 6.574912071228027, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 6.8196940422058105, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.397434234619141, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 < x < 100)", "prompt_tokens": 178, "completion_tokens": 70, "duration": 7.652598142623901, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1) # Since the sequence always ends with 1.\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 108, "duration": 9.732945442199707, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Split the date string into components\n    parts = date.split('-')\n    \n    # Check if the date format is correct (mm-dd-yyyy)\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if month, day, and year are numeric\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    # Convert month, day, and year to integers\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Days in each month\n    days_in_month = {\n        1: 31, 2: 29 if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) else 28, \n        3: 31, 4: 30, 5: 31, 6: 30, \n        7: 31, 8: 31, 9: 30, 10: 31, \n        11: 30, 12: 31\n    }\n    \n    # Check if the day is valid\n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 308, "duration": 24.027827739715576, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 190, "completion_tokens": 66, "duration": 7.884910345077515, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    if len(lst) != len(set(lst)):\n        counter = {}\n        for num in lst:\n            if num in counter:\n                counter[num] += 1\n                if counter[num] > 2:\n                    return False\n            else:\n                counter[num] = 1\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 74, "duration": 7.2424280643463135, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        sum_of_magnitudes += abs(num)\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n    return sum_of_magnitudes * product_of_signs", "prompt_tokens": 172, "completion_tokens": 111, "duration": 12.68448543548584, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    pq = [(grid[i][j], i, j, [grid[i][j]]) for i in range(N) for j in range(N)]\n    pq.sort()\n    visited = set()\n\n    while pq:\n        _, x, y, path = pq.pop(0)\n        if len(path) == k:\n            return path\n        if (x, y, len(path)) in visited:\n            continue\n        visited.add((x, y, len(path)))\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                pq.append((new_path, nx, ny, new_path))\n                pq.sort(key=lambda x: (len(x[3]), x[3]))", "prompt_tokens": 446, "completion_tokens": 232, "duration": 13.436962604522705, "result": "passed", "passed": true}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 1, "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 2]\n    \n    tribonacci = [3, 2]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            next_val = tribonacci[-1] + tribonacci[-2] + (1 + (i + 1) // 2)\n            tribonacci.append(next_val)\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 125, "duration": 12.824751138687134, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 72, "duration": 7.918302059173584, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n        if balance >= 2:\n            return True\n    return False", "prompt_tokens": 183, "completion_tokens": 193, "duration": 15.617799520492554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    Returns the sum of squared numbers in the given list,\n    after rounding each element in the list to the upper integer.\n    \"\"\"\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 56, "duration": 6.28252649307251, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 46, "duration": 6.818786144256592, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = max([x for x in lst if x < 0], default=None)\n    smallest_positive = min([x for x in lst if x > 0], default=None)\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 62, "duration": 7.7470924854278564, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    \"\"\"\n    Compares two values that can be integers, floats, or strings representing real numbers.\n    Returns the larger variable in its original type, or None if they are equal.\n    \"\"\"\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 126, "duration": 10.508488178253174, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 27, "duration": 5.753249883651733, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 75, "duration": 8.489978075027466, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    import re\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 161, "duration": 12.340939044952393, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Check all conditions using regular expression\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}[a-zA-Z0-9]*\\.(txt|exe|dll)$'\n    if re.fullmatch(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 264, "completion_tokens": 84, "duration": 8.330341815948486, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(lst[i]**2 if i % 3 == 0 else lst[i]**3 if i % 4 == 0 else lst[i] for i in range(len(lst)))", "prompt_tokens": 219, "completion_tokens": 49, "duration": 6.524293661117554, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    \n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 102, "duration": 8.726972103118896, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 6.0983734130859375, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 36, "duration": 6.853355169296265, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def isOdd(num):\n        num_str = str(abs(num))\n        return int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0\n    \n    return sum(1 for num in nums if num > 10 and isOdd(num))", "prompt_tokens": 169, "completion_tokens": 70, "duration": 21.051438808441162, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Calculate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    # Count how many elements of a are divisible by 3, remainder 1 when divided by 3, and remainder 2 when divided by 3\n    count_div_3 = sum(x % 3 == 0 for x in a)\n    count_rem_1 = sum(x % 3 == 1 for x in a)\n    count_rem_2 = sum(x % 3 == 2 for x in a)\n    # Calculate the number of valid triples\n    # There are three cases for valid triples: (div3, div3, div3), (rem1, rem1, rem1), and (rem2, rem2, rem2)\n    # For each case, use the combination formula nC3 = n! / (3!(n-3)!) to calculate the number of ways to choose triples\n    result = 0\n    if count_div_3 >= 3:\n        result += count_div_3 * (count_div_3 - 1) * (count_div_3 - 2) // 6\n    if count_rem_1 >= 3:\n        result += count_rem_1 * (count_rem_1 - 1) * (count_rem_1 - 2) // 6\n    if count_rem_2 >= 3:\n        result += count_rem_2 * (count_rem_2 - 1) * (count_rem_2 - 2) // 6\n    return result", "prompt_tokens": 215, "completion_tokens": 424, "duration": 22.365949869155884, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1 + 1:index2])", "prompt_tokens": 261, "completion_tokens": 118, "duration": 9.958965063095093, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "prompt_tokens": 237, "completion_tokens": 85, "duration": 9.329762697219849, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 62, "duration": 8.289951086044312, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 34, "duration": 5.192629814147949, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.786277770996094, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(ext):\n        CAP = sum(1 for char in ext if char.isupper())\n        SM = sum(1 for char in ext if char.islower())\n        return CAP - SM\n\n    strongest_ext = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 327, "completion_tokens": 80, "duration": 7.620356321334839, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    b_rotated = b * 2\n    return any(b_rotated[i:i+len(b)] in a for i in range(len(b)))", "prompt_tokens": 179, "completion_tokens": 55, "duration": 6.712971210479736, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 71, "duration": 8.761413097381592, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 165, "duration": 12.46084475517273, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.726427316665649, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    return max(sorted(words), key=lambda x: len(set(x)))", "prompt_tokens": 170, "completion_tokens": 23, "duration": 6.37529993057251, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 42, "duration": 7.371402978897095, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += f\" {operator[i]} {operand[i+1]}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 105, "duration": 9.679292917251587, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower() if c.isalpha() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 55, "duration": 8.03844666481018, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()", "prompt_tokens": 126, "completion_tokens": 105, "duration": 9.125185489654541, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 71, "duration": 6.1178693771362305, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 93, "duration": 5.184004783630371, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:  # If stack is empty, a group is completed\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 165, "completion_tokens": 151, "duration": 9.92685604095459, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.600942850112915, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.6241776943206787, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 167, "completion_tokens": 115, "duration": 7.61433482170105, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result += [delimeter, number]\n    return result", "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.203784465789795, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            if max_depth > 0:\n                max_depths.append(max_depth)\n                max_depth = 0\n                current_depth = 0\n    if max_depth > 0:\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 162, "completion_tokens": 147, "duration": 9.045776844024658, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 40, "duration": 3.355964183807373, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 113, "duration": 6.73239541053772, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    rolling_maxes = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        rolling_maxes.append(max_so_far)\n    return rolling_maxes", "prompt_tokens": 150, "completion_tokens": 72, "duration": 5.198610782623291, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 118, "duration": 6.5843377113342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.6700446605682373, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of a list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 152, "completion_tokens": 112, "duration": 8.323522329330444, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.602329969406128, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 109, "completion_tokens": 78, "duration": 5.207324743270874, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 118, "completion_tokens": 28, "duration": 2.748901844024658, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.2993056774139404, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.865995168685913, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\"\"\"\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 93, "duration": 5.5003156661987305, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 105, "duration": 6.175848007202148, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < min_diff:\n            min_diff = numbers[i+1] - numbers[i]\n            pair = (numbers[i], numbers[i+1])\n    return pair", "prompt_tokens": 216, "completion_tokens": 104, "duration": 7.722608804702759, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 105, "duration": 6.250580549240112, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 103, "duration": 6.122820854187012, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.4051690101623535, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.3575446605682373, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 80, "duration": 5.500531196594238, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 96, "duration": 6.119642734527588, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 3.3266348838806152, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.704251766204834, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 99, "duration": 6.9002063274383545, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 7.832218408584595, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 4.312642812728882, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    return fsolve(lambda x: poly(xs, x), 0)[0]", "prompt_tokens": 309, "completion_tokens": 190, "duration": 10.532405376434326, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_3_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_3_elements.sort()\n    \n    # Insert the sorted elements back into the original list\n    for i, val in enumerate(divisible_by_3_elements):\n        l[i * 3] = val\n    \n    return l", "prompt_tokens": 200, "completion_tokens": 171, "duration": 11.742120504379272, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 26, "duration": 2.414290428161621, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 6.3304829597473145, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 63, "duration": 4.253171443939209, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    \"\"\"Sorts the list l such that the values at even indices are sorted, while odd indices remain unchanged.\"\"\"\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i, value in enumerate(even_indices_values):\n        l[i*2] = value\n    return l", "prompt_tokens": 173, "completion_tokens": 85, "duration": 7.437806606292725, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 134, "duration": 7.880993366241455, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib_seq(limit):\n        a, b = 0, 1\n        for _ in range(limit):\n            yield a\n            a, b = b, a + b\n\n    count, fib_number = 0, 0\n    for fib in fib_seq(227000):  # Increased limit to ensure we find the n-th prime Fibonacci number\n        if is_prime(fib) and fib != 0:\n            count += 1\n            if count == n:\n                return fib", "prompt_tokens": 147, "completion_tokens": 173, "duration": 9.531513929367065, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        a = l[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False", "prompt_tokens": 209, "completion_tokens": 117, "duration": 7.034353733062744, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since all cars have the same speed and start far apart, every car moving left to right\n    will eventually collide with each car moving right to left. Thus, the total number of\n    collisions is simply the product of the number of cars in each direction.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 79, "duration": 5.909088134765625, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 6.023825645446777, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.5380194187164307, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 59, "duration": 4.388824701309204, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 5.479550838470459, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 7.267601490020752, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 3.3562259674072266, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 80, "duration": 5.099176645278931, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.377926826477051, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 2.8789665699005127, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 37, "duration": 3.1520307064056396, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 3.0921270847320557, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 6.229273319244385, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.5202748775482178, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.851690292358398, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 68, "duration": 4.628933906555176, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 61, "duration": 3.6932373046875, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 40, "duration": 4.069079637527466, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_factor = 1\n    i = 2\n\n    while i <= n ** 0.5 or n == 2:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):  # If n is a prime number greater than 2\n        prime_factor = n\n    \n    return prime_factor", "prompt_tokens": 113, "completion_tokens": 171, "duration": 9.444586515426636, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.009448289871216, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 5.694744825363159, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.3204519748687744, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 96, "duration": 5.019906520843506, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.lower().endswith('y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Should return 2\nprint(vowels_count(\"ACEDY\"))  # Should return 3\nprint(vowels_count(\"rhythm\"))  # Should return 0\nprint(vowels_count(\"SYZYGY\"))  # Should return 1\nprint(vowels_count(\"quiet\"))  # Should return 3", "prompt_tokens": 176, "completion_tokens": 138, "duration": 8.219827651977539, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift >= len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 4.064870119094849, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.2385733127593994, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    # Extract numbers from the string\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    # Calculate the number of mangoes by subtracting the sum of apples and oranges from total fruits\n    mangoes = n - sum(numbers)\n    return mangoes", "prompt_tokens": 260, "completion_tokens": 71, "duration": 4.347940921783447, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "prompt_tokens": 362, "completion_tokens": 52, "duration": 3.1909124851226807, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    valid_numbers = [num for num, count in freq.items() if num <= count]\n    return max(valid_numbers) if valid_numbers else -1", "prompt_tokens": 215, "completion_tokens": 52, "duration": 3.4156415462493896, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result", "prompt_tokens": 174, "completion_tokens": 46, "duration": 3.6075000762939453, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        # Heron's formula to calculate area of a triangle with sides a, b, c\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 181, "duration": 8.835237503051758, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.577023983001709, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 4.0771801471710205, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 49, "duration": 4.414738655090332, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            a = a // i\n            if a == 1 or prime_factors > 3:\n                break\n    return prime_factors == 3", "prompt_tokens": 129, "completion_tokens": 134, "duration": 7.220714569091797, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.564862012863159, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    root = round(abs_a ** (1/3))\n    return root**3 == abs_a", "prompt_tokens": 160, "completion_tokens": 48, "duration": 4.699963092803955, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = set('2357BD')\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 36, "duration": 4.187698841094971, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary}db\"", "prompt_tokens": 189, "completion_tokens": 42, "duration": 3.718564748764038, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 57, "duration": 3.606152057647705, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Converts a list of GPAs to letter grades based on specified criteria.\n    \"\"\"\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 254, "duration": 16.971424102783203, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.866895914077759, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * (10 ** (n - 1)) - (10 ** (n - 2))", "prompt_tokens": 94, "completion_tokens": 81, "duration": 4.646977186203003, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 33, "duration": 2.3595399856567383, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 5.1271326541900635, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.7413971424102783, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 154, "duration": 23.750396728515625, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"\n    if not array:  # Check if the array is empty\n        return []\n    \n    # Determine the sorting order based on the sum of the first and last elements\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 253, "completion_tokens": 161, "duration": 8.832568883895874, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - 97 + 4) % 26) + 97)\n            result += shifted\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 64, "duration": 4.709034204483032, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    return unique_sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 42, "duration": 3.6073429584503174, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Count the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    sentences = [sentence.strip() for sentence in S.replace('?', '.').replace('!', '.').split('.')]\n    return sum(sentence.startswith('I') for sentence in sentences if sentence)", "prompt_tokens": 157, "completion_tokens": 92, "duration": 6.678186893463135, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 56, "duration": 4.136426687240601, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case and replacing vowels.\n    \"\"\"\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            # Find the index of the vowel in the alphabet\n            alphabet = 'abcdefghijklmnopqrstuvwxyz'\n            char_lower = char.lower()  # Convert to lowercase to handle uppercase vowels\n            index = alphabet.index(char_lower)\n            # Calculate the new index, considering the circular nature of the alphabet\n            new_index = (index + 2) % 26\n            new_char = alphabet[new_index]\n            # Preserve the original case\n            if char.isupper():\n                return new_char.upper()\n            else:\n                return new_char\n        else:\n            return char\n\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            swapped_char = swap_case(char)\n            replaced_char = replace_vowel(swapped_char)\n            encoded_message += replaced_char\n        else:\n            encoded_message += char\n\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 242, "duration": 10.827568054199219, "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    from math import sqrt\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = max(filter(is_prime, lst), default=0)\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 336, "completion_tokens": 98, "duration": 5.527128219604492, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 69, "duration": 4.925791263580322, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [num for num in range(2, n) if is_prime(num)]", "prompt_tokens": 195, "completion_tokens": 110, "duration": 9.751034259796143, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 3.2276790142059326, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)", "prompt_tokens": 122, "completion_tokens": 63, "duration": 3.791168689727783, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    number = float(value)\n    if number > 0:\n        if number - int(number) >= 0.5:\n            return int(number) + 1\n        else:\n            return int(number)\n    else:\n        if number - int(number) <= -0.5:\n            return int(number) - 1\n        else:\n            return int(number)", "prompt_tokens": 206, "completion_tokens": 85, "duration": 6.609374046325684, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The next level has the next odd number if n is odd, or the next even number if n is even.\n    Return the number of stones in each level in a list.\n    \"\"\"\n    stones = []\n    current_stone_count = n\n    for _ in range(n):\n        stones.append(current_stone_count)\n        if current_stone_count % 2 == 0:\n            current_stone_count += 2\n        else:\n            current_stone_count += 2\n    return stones", "prompt_tokens": 182, "completion_tokens": 144, "duration": 13.04182243347168, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 4.020533084869385, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 125, "duration": 15.7046217918396, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 6.0968358516693115, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(number):\n        return all(int(digit) % 2 != 0 for digit in str(number))\n    \n    result = [num for num in x if has_no_even_digit(num)]\n    return sorted(result)", "prompt_tokens": 152, "completion_tokens": 98, "duration": 8.50049114227295, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    sorted_filtered = sorted([x for x in arr if 1 <= x <= 9])\n    reversed_sorted = sorted_filtered[::-1]\n    return [num_to_word[x] for x in reversed_sorted]", "prompt_tokens": 326, "completion_tokens": 111, "duration": 8.197126388549805, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 108, "duration": 8.775911808013916, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 99, "duration": 6.727648735046387, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n))) if n >= 0 else -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 75, "duration": 9.100237131118774, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i - 1] > arr[i]:\n            count += 1\n        if count > 1:\n            return False\n    if count == 0:\n        return True\n    return arr[0] >= arr[-1]", "prompt_tokens": 349, "completion_tokens": 92, "duration": 7.470369100570679, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 84, "duration": 6.982749700546265, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    from collections import Counter\n    # Split the string into a list of words/letters\n    words = test.split()\n    # Count occurrences of each letter\n    counts = Counter(words)\n    # Find the maximum occurrence\n    max_occurrence = max(counts.values(), default=0)\n    # Filter letters that have the maximum occurrence and create a dictionary\n    return {letter: count for letter, count in counts.items() if count == max_occurrence}", "prompt_tokens": 201, "completion_tokens": 103, "duration": 8.311358213424683, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 4.84127140045166, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 80, "duration": 8.33867073059082, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 135, "duration": 10.821414947509766, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_units = sum(row.count(1) for row in grid)\n    return math.ceil(total_units / capacity)", "prompt_tokens": 373, "completion_tokens": 39, "duration": 4.75900673866272, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers based on the number of ones in their binary representation,\n    then by their decimal value if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 65, "duration": 6.968991994857788, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = sum(1 for char in word if char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n            \n    return result", "prompt_tokens": 231, "completion_tokens": 73, "duration": 6.705889463424683, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 7.5104005336761475, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    '''\n    Given a list of two strings, checks if it is possible to concatenate the two strings in\n    some order, so the resulting string will be good. A string is considered to be good\n    if all parentheses in it are balanced.\n    \n    Parameters:\n    lst (list): A list of two strings, each containing only '(' and/or ')'.\n    \n    Returns:\n    str: 'Yes' if there's a way to make a good string by concatenating the two strings,\n         'No' otherwise.\n    '''\n    first, second = lst\n    # If both strings start with ')' or end with '(', it's impossible to balance them.\n    if (first[0] == ')' and second[0] == ')') or (first[-1] == '(' and second[-1] == '('):\n        return 'No'\n    # Count parentheses in both strings\n    first_balance = first.count('(') - first.count(')')\n    second_balance = second.count('(') - second.count(')')\n    # If the sum of balance is not 0, it's impossible to balance.\n    if first_balance + second_balance != 0:\n        return 'No'\n    # If any string has more closing than opening parentheses, it should go first.\n    if first_balance < 0 or second_balance < 0:\n        return 'Yes'\n    # If both strings have more opening parentheses, the one with less should go first.\n    if first_balance <= second_balance:\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 325, "duration": 17.415884494781494, "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 6.100834369659424, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 6.179059982299805, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 < x < 100)", "prompt_tokens": 178, "completion_tokens": 70, "duration": 7.652598142623901, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 98, "duration": 8.388930797576904, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    # Split the date into parts\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month, day, year = parts\n\n    # Check if month, day, and year are integers\n    try:\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except ValueError:\n        return False\n\n    # Check if month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n\n    return True", "prompt_tokens": 313, "completion_tokens": 249, "duration": 19.20053458213806, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 6.928248643875122, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):  # Check for any duplicates\n        counts = {x: lst.count(x) for x in lst}\n        for count in counts.values():\n            if count > 2:  # If any number appears more than twice, return False\n                return False\n    return lst == sorted(lst)  # Check if the list is sorted in ascending order", "prompt_tokens": 299, "completion_tokens": 91, "duration": 25.1659893989563, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 77, "duration": 7.607611417770386, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    # Convert grid values to (value, row, col) tuples\n    flat_grid = [(val, i, j) for i, row in enumerate(grid) for j, val in enumerate(row)]\n    # Sort the flat grid to get the smallest value's position\n    flat_grid.sort()\n    # Starting point is the smallest value\n    start_val, start_row, start_col = flat_grid[0]\n\n    # Priority queue; each element is (path as list, last value, last row, last col, steps taken)\n    pq = [([start_val], start_val, start_row, start_col, 1)]\n    visited = set()\n\n    while pq:\n        path, last_val, r, c, steps = heappop(pq)\n        if steps == k:\n            return path\n        if (r, c, steps) in visited:\n            continue\n        visited.add((r, c, steps))\n\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            new_r, new_c = r + dr, c + dc\n            if 0 <= new_r < N and 0 <= new_c < N:\n                new_val = grid[new_r][new_c]\n                new_path = path + [new_val]\n                heappush(pq, (new_path, new_val, new_r, new_c, steps + 1))", "prompt_tokens": 446, "completion_tokens": 331, "duration": 28.545739889144897, "result": "passed", "passed": true}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 1, "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 2]\n    \n    tribonacci = [3, 2]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            next_val = tribonacci[-1] + tribonacci[-2] + (1 + (i + 1) // 2)\n            tribonacci.append(next_val)\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 125, "duration": 12.824751138687134, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.193249702453613, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    depth = 0\n    for char in string:\n        if char == '[':\n            depth += 1\n        elif char == ']':\n            depth -= 1\n        if depth > 1:\n            return True\n        if depth < 0:\n            return False\n    return False", "prompt_tokens": 183, "completion_tokens": 71, "duration": 7.805450439453125, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.404160499572754, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1:].isalpha() and not txt[-2:].isalpha() if txt else False", "prompt_tokens": 187, "completion_tokens": 37, "duration": 6.14909291267395, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 7.14342474937439, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 80, "duration": 9.109614372253418, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def parse_value(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    \n    a_parsed = parse_value(a)\n    b_parsed = parse_value(b)\n    \n    if a_parsed == b_parsed:\n        return None\n    elif a_parsed > b_parsed:\n        return a\n    else:\n        return b", "prompt_tokens": 191, "completion_tokens": 86, "duration": 7.722904205322266, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 27, "duration": 5.753249883651733, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 75, "duration": 9.642045497894287, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n    \"\"\"\n    # Replace more than 2 consecutive spaces with \"-\"\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces with \"_\"\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 97, "duration": 8.30896282196045, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex pattern to match the file name conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{2,}(\\.)(txt|exe|dll)$'\n    # Check if the file name has more than three digits\n    digit_count = sum(c.isdigit() for c in file_name)\n    if digit_count > 3:\n        return 'No'\n    # Check if the file name matches the pattern\n    if re.match(pattern, file_name):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 264, "completion_tokens": 133, "duration": 11.719170570373535, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(lst[i]**2 if i % 3 == 0 else lst[i]**3 if i % 4 == 0 else lst[i] for i in range(len(lst)))", "prompt_tokens": 219, "completion_tokens": 49, "duration": 7.090923309326172, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 96, "duration": 9.64962887763977, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 6.164813280105591, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 35, "duration": 6.7222912311553955, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_first_and_last_digit_odd(n):\n        n_str = str(abs(n))  # Convert number to string, taking absolute value to handle negative numbers\n        return n_str[0] in '13579' and n_str[-1] in '13579'\n    \n    return sum(1 for n in nums if n > 10 and is_first_and_last_digit_odd(n))", "prompt_tokens": 169, "completion_tokens": 89, "duration": 11.2549729347229, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Generate the array as per the given condition\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the frequency of remainders when elements are divided by 3\n    remainder_counts = [0, 0, 0]\n    for value in a:\n        remainder_counts[value % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Combination formula: nC3 = n! / (3! * (n-3)!)\n    # For a[i] + a[j] + a[k] to be divisible by 3, all three numbers must have the same remainder when divided by 3\n    # or they must have remainders 0, 1, and 2 respectively.\n    valid_triples = 0\n    for count in remainder_counts:\n        if count >= 3:\n            valid_triples += count * (count - 1) * (count - 2) // 6  # Combination formula for 3 elements from count\n    \n    # Special case: one element from each remainder category\n    if all(count > 0 for count in remainder_counts):\n        valid_triples += remainder_counts[0] * remainder_counts[1] * remainder_counts[2]\n    \n    return valid_triples", "prompt_tokens": 215, "completion_tokens": 363, "duration": 19.876725673675537, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    return tuple(planets[start+1:end])", "prompt_tokens": 261, "completion_tokens": 109, "duration": 8.805082321166992, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 237, "completion_tokens": 75, "duration": 8.6152925491333, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 7.978659391403198, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 40, "duration": 7.3753838539123535, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 7.490201234817505, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        return CAP - SM\n\n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 327, "completion_tokens": 78, "duration": 9.43459415435791, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    b_rotated = b * 2\n    return any(b_rotated[i:i+len(b)] in a for i in range(len(b)))", "prompt_tokens": 179, "completion_tokens": 55, "duration": 6.712971210479736, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    num = abs(num) # Make sure the number is positive\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 95, "duration": 10.208034992218018, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    value_map = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = ''\n    for value, numeral in value_map:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral", "prompt_tokens": 151, "completion_tokens": 178, "duration": 12.785280704498291, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 8.03945779800415, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word", "prompt_tokens": 170, "completion_tokens": 77, "duration": 8.577604293823242, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    return [number + eaten, remaining - eaten]", "prompt_tokens": 327, "completion_tokens": 32, "duration": 6.842845439910889, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, val in zip(operator, operand[1:]):\n        expression += f\" {op} {val}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 51, "duration": 7.818987131118774, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)", "prompt_tokens": 157, "completion_tokens": 51, "duration": 7.646723031997681, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        hash_object = hashlib.md5(text.encode())\n        return hash_object.hexdigest()", "prompt_tokens": 126, "completion_tokens": 106, "duration": 10.319803953170776, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return sorted(set(range(a, b+1)).union(set(range(b, a+1))) & set(range(0, max(a, b)+1, 2)))", "prompt_tokens": 154, "completion_tokens": 48, "duration": 7.869380712509155, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 93, "duration": 5.184004783630371, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:  # If stack is empty, a group is completed\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 165, "completion_tokens": 151, "duration": 9.92685604095459, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.600942850112915, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.6241776943206787, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 167, "completion_tokens": 115, "duration": 7.61433482170105, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result += [delimeter, number]\n    return result", "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.203784465789795, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            if max_depth > 0:\n                max_depths.append(max_depth)\n                max_depth = 0\n                current_depth = 0\n    if max_depth > 0:\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 162, "completion_tokens": 147, "duration": 9.045776844024658, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 40, "duration": 3.355964183807373, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 113, "duration": 6.73239541053772, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    rolling_maxes = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        rolling_maxes.append(max_so_far)\n    return rolling_maxes", "prompt_tokens": 150, "completion_tokens": 72, "duration": 5.198610782623291, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 118, "duration": 6.5843377113342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.6700446605682373, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of a list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 152, "completion_tokens": 112, "duration": 8.323522329330444, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.602329969406128, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 109, "completion_tokens": 78, "duration": 5.207324743270874, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 118, "completion_tokens": 28, "duration": 2.748901844024658, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.2993056774139404, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.865995168685913, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\"\"\"\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 93, "duration": 5.5003156661987305, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 105, "duration": 6.175848007202148, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < min_diff:\n            min_diff = numbers[i+1] - numbers[i]\n            pair = (numbers[i], numbers[i+1])\n    return pair", "prompt_tokens": 216, "completion_tokens": 104, "duration": 7.722608804702759, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 105, "duration": 6.250580549240112, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 103, "duration": 6.122820854187012, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.4051690101623535, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.3575446605682373, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 80, "duration": 5.500531196594238, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 96, "duration": 6.119642734527588, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 3.3266348838806152, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 4.3325395584106445, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 99, "duration": 6.9002063274383545, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 7.832218408584595, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 4.312642812728882, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    return fsolve(lambda x: poly(xs, x), 0)[0]", "prompt_tokens": 309, "completion_tokens": 190, "duration": 10.532405376434326, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_3_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_3_elements.sort()\n    \n    # Insert the sorted elements back into the original list\n    for i, val in enumerate(divisible_by_3_elements):\n        l[i * 3] = val\n    \n    return l", "prompt_tokens": 200, "completion_tokens": 171, "duration": 11.742120504379272, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 26, "duration": 2.414290428161621, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 6.3304829597473145, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 63, "duration": 4.253171443939209, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    \"\"\"Sorts the list l such that the values at even indices are sorted, while odd indices remain unchanged.\"\"\"\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i, value in enumerate(even_indices_values):\n        l[i*2] = value\n    return l", "prompt_tokens": 173, "completion_tokens": 85, "duration": 7.437806606292725, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 134, "duration": 7.880993366241455, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib_seq(limit):\n        a, b = 0, 1\n        for _ in range(limit):\n            yield a\n            a, b = b, a + b\n\n    count, fib_number = 0, 0\n    for fib in fib_seq(227000):  # Increased limit to ensure we find the n-th prime Fibonacci number\n        if is_prime(fib) and fib != 0:\n            count += 1\n            if count == n:\n                return fib", "prompt_tokens": 147, "completion_tokens": 173, "duration": 9.531513929367065, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        a = l[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False", "prompt_tokens": 209, "completion_tokens": 117, "duration": 7.034353733062744, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since all cars have the same speed and start far apart, every car moving left to right\n    will eventually collide with each car moving right to left. Thus, the total number of\n    collisions is simply the product of the number of cars in each direction.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 79, "duration": 5.909088134765625, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 6.023825645446777, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.5380194187164307, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 59, "duration": 4.388824701309204, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 5.479550838470459, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 7.267601490020752, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 3.3562259674072266, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 80, "duration": 5.099176645278931, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.377926826477051, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 2.8789665699005127, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 37, "duration": 3.1520307064056396, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 3.0921270847320557, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 6.229273319244385, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.5202748775482178, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.851690292358398, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 68, "duration": 4.628933906555176, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 61, "duration": 3.6932373046875, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 40, "duration": 4.069079637527466, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_factor = 1\n    i = 2\n\n    while i <= n ** 0.5 or n == 2:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):  # If n is a prime number greater than 2\n        prime_factor = n\n    \n    return prime_factor", "prompt_tokens": 113, "completion_tokens": 171, "duration": 9.444586515426636, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.009448289871216, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 5.694744825363159, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.3204519748687744, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 96, "duration": 5.019906520843506, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.lower().endswith('y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Should return 2\nprint(vowels_count(\"ACEDY\"))  # Should return 3\nprint(vowels_count(\"rhythm\"))  # Should return 0\nprint(vowels_count(\"SYZYGY\"))  # Should return 1\nprint(vowels_count(\"quiet\"))  # Should return 3", "prompt_tokens": 176, "completion_tokens": 138, "duration": 8.219827651977539, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": true, "solved_count": 4, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.2385733127593994, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    # Extract numbers from the string\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    # Calculate the number of mangoes by subtracting the sum of apples and oranges from total fruits\n    mangoes = n - sum(numbers)\n    return mangoes", "prompt_tokens": 260, "completion_tokens": 71, "duration": 4.347940921783447, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "prompt_tokens": 362, "completion_tokens": 52, "duration": 3.1909124851226807, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    valid_numbers = [num for num, count in freq.items() if num <= count]\n    return max(valid_numbers) if valid_numbers else -1", "prompt_tokens": 215, "completion_tokens": 52, "duration": 3.4156415462493896, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result", "prompt_tokens": 174, "completion_tokens": 46, "duration": 3.6075000762939453, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        # Heron's formula to calculate area of a triangle with sides a, b, c\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 181, "duration": 8.835237503051758, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.577023983001709, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 4.0771801471710205, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 49, "duration": 4.414738655090332, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            a = a // i\n            if a == 1 or prime_factors > 3:\n                break\n    return prime_factors == 3", "prompt_tokens": 129, "completion_tokens": 134, "duration": 7.220714569091797, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.564862012863159, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    root = round(abs_a ** (1/3))\n    return root**3 == abs_a", "prompt_tokens": 160, "completion_tokens": 48, "duration": 4.699963092803955, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = set('2357BD')\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 36, "duration": 4.187698841094971, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary}db\"", "prompt_tokens": 189, "completion_tokens": 42, "duration": 3.718564748764038, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 57, "duration": 3.606152057647705, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Converts a list of GPAs to letter grades based on specified criteria.\n    \"\"\"\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 254, "duration": 16.971424102783203, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.866895914077759, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * (10 ** (n - 1)) - (10 ** (n - 2))", "prompt_tokens": 94, "completion_tokens": 81, "duration": 4.646977186203003, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 33, "duration": 2.3595399856567383, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 5.1271326541900635, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.7413971424102783, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 154, "duration": 23.750396728515625, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"\n    if not array:  # Check if the array is empty\n        return []\n    \n    # Determine the sorting order based on the sum of the first and last elements\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 253, "completion_tokens": 161, "duration": 8.832568883895874, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - 97 + 4) % 26) + 97)\n            result += shifted\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 64, "duration": 4.709034204483032, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    return unique_sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 42, "duration": 3.6073429584503174, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Count the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    sentences = [sentence.strip() for sentence in S.replace('?', '.').replace('!', '.').split('.')]\n    return sum(sentence.startswith('I') for sentence in sentences if sentence)", "prompt_tokens": 157, "completion_tokens": 92, "duration": 6.678186893463135, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 56, "duration": 4.136426687240601, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case and replacing vowels.\n    \"\"\"\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            # Find the index of the vowel in the alphabet\n            alphabet = 'abcdefghijklmnopqrstuvwxyz'\n            char_lower = char.lower()  # Convert to lowercase to handle uppercase vowels\n            index = alphabet.index(char_lower)\n            # Calculate the new index, considering the circular nature of the alphabet\n            new_index = (index + 2) % 26\n            new_char = alphabet[new_index]\n            # Preserve the original case\n            if char.isupper():\n                return new_char.upper()\n            else:\n                return new_char\n        else:\n            return char\n\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            swapped_char = swap_case(char)\n            replaced_char = replace_vowel(swapped_char)\n            encoded_message += replaced_char\n        else:\n            encoded_message += char\n\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 242, "duration": 10.827568054199219, "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    from math import sqrt\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = max(filter(is_prime, lst), default=0)\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 336, "completion_tokens": 98, "duration": 5.527128219604492, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 69, "duration": 4.925791263580322, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [num for num in range(2, n) if is_prime(num)]", "prompt_tokens": 195, "completion_tokens": 110, "duration": 9.751034259796143, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 3.2276790142059326, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)", "prompt_tokens": 122, "completion_tokens": 63, "duration": 3.791168689727783, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    number = float(value)\n    if number > 0:\n        if number - int(number) >= 0.5:\n            return int(number) + 1\n        else:\n            return int(number)\n    else:\n        if number - int(number) <= -0.5:\n            return int(number) - 1\n        else:\n            return int(number)", "prompt_tokens": 206, "completion_tokens": 85, "duration": 6.609374046325684, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The next level has the next odd number if n is odd, or the next even number if n is even.\n    Return the number of stones in each level in a list.\n    \"\"\"\n    stones = []\n    current_stone_count = n\n    for _ in range(n):\n        stones.append(current_stone_count)\n        if current_stone_count % 2 == 0:\n            current_stone_count += 2\n        else:\n            current_stone_count += 2\n    return stones", "prompt_tokens": 182, "completion_tokens": 144, "duration": 13.04182243347168, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 4.020533084869385, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 125, "duration": 15.7046217918396, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 6.0968358516693115, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(number):\n        return all(int(digit) % 2 != 0 for digit in str(number))\n    \n    result = [num for num in x if has_no_even_digit(num)]\n    return sorted(result)", "prompt_tokens": 152, "completion_tokens": 98, "duration": 8.50049114227295, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    sorted_filtered = sorted([x for x in arr if 1 <= x <= 9])\n    reversed_sorted = sorted_filtered[::-1]\n    return [num_to_word[x] for x in reversed_sorted]", "prompt_tokens": 326, "completion_tokens": 111, "duration": 8.197126388549805, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 108, "duration": 8.775911808013916, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 99, "duration": 6.727648735046387, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n))) if n >= 0 else -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 75, "duration": 9.100237131118774, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            count += 1\n            if count > 1:\n                return False\n    if count == 0:\n        return True\n    return arr[0] >= arr[-1]", "prompt_tokens": 349, "completion_tokens": 91, "duration": 6.822336673736572, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 84, "duration": 6.982749700546265, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    from collections import Counter\n    # Split the string into a list of words/letters\n    words = test.split()\n    # Count occurrences of each letter\n    counts = Counter(words)\n    # Find the maximum occurrence\n    max_occurrence = max(counts.values(), default=0)\n    # Filter letters that have the maximum occurrence and create a dictionary\n    return {letter: count for letter, count in counts.items() if count == max_occurrence}", "prompt_tokens": 201, "completion_tokens": 103, "duration": 8.311358213424683, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 4.84127140045166, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 80, "duration": 8.33867073059082, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 135, "duration": 10.821414947509766, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_units = sum(row.count(1) for row in grid)\n    return math.ceil(total_units / capacity)", "prompt_tokens": 373, "completion_tokens": 39, "duration": 4.75900673866272, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers based on the number of ones in their binary representation,\n    then by their decimal value if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 65, "duration": 6.968991994857788, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = sum(1 for char in word if char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n            \n    return result", "prompt_tokens": 231, "completion_tokens": 73, "duration": 6.705889463424683, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 7.5104005336761475, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    '''\n    Given a list of two strings, checks if it is possible to concatenate the two strings in\n    some order, so the resulting string will be good. A string is considered to be good\n    if all parentheses in it are balanced.\n    \n    Parameters:\n    lst (list): A list of two strings, each containing only '(' and/or ')'.\n    \n    Returns:\n    str: 'Yes' if there's a way to make a good string by concatenating the two strings,\n         'No' otherwise.\n    '''\n    first, second = lst\n    # If both strings start with ')' or end with '(', it's impossible to balance them.\n    if (first[0] == ')' and second[0] == ')') or (first[-1] == '(' and second[-1] == '('):\n        return 'No'\n    # Count parentheses in both strings\n    first_balance = first.count('(') - first.count(')')\n    second_balance = second.count('(') - second.count(')')\n    # If the sum of balance is not 0, it's impossible to balance.\n    if first_balance + second_balance != 0:\n        return 'No'\n    # If any string has more closing than opening parentheses, it should go first.\n    if first_balance < 0 or second_balance < 0:\n        return 'Yes'\n    # If both strings have more opening parentheses, the one with less should go first.\n    if first_balance <= second_balance:\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 325, "duration": 17.415884494781494, "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 6.100834369659424, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 6.179059982299805, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x < 100)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 5.396061182022095, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 98, "duration": 8.388930797576904, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    # Split the date into parts\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month, day, year = parts\n\n    # Check if month, day, and year are integers\n    try:\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except ValueError:\n        return False\n\n    # Check if month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n\n    return True", "prompt_tokens": 313, "completion_tokens": 249, "duration": 19.20053458213806, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 6.928248643875122, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):  # Check for any duplicates\n        counts = {x: lst.count(x) for x in lst}\n        for count in counts.values():\n            if count > 2:  # If any number appears more than twice, return False\n                return False\n    return lst == sorted(lst)  # Check if the list is sorted in ascending order", "prompt_tokens": 299, "completion_tokens": 91, "duration": 25.1659893989563, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 77, "duration": 7.607611417770386, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    # Convert grid values to (value, row, col) tuples\n    flat_grid = [(val, i, j) for i, row in enumerate(grid) for j, val in enumerate(row)]\n    # Sort the flat grid to get the smallest value's position\n    flat_grid.sort()\n    # Starting point is the smallest value\n    start_val, start_row, start_col = flat_grid[0]\n\n    # Priority queue; each element is (path as list, last value, last row, last col, steps taken)\n    pq = [([start_val], start_val, start_row, start_col, 1)]\n    visited = set()\n\n    while pq:\n        path, last_val, r, c, steps = heappop(pq)\n        if steps == k:\n            return path\n        if (r, c, steps) in visited:\n            continue\n        visited.add((r, c, steps))\n\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            new_r, new_c = r + dr, c + dc\n            if 0 <= new_r < N and 0 <= new_c < N:\n                new_val = grid[new_r][new_c]\n                new_path = path + [new_val]\n                heappush(pq, (new_path, new_val, new_r, new_c, steps + 1))", "prompt_tokens": 446, "completion_tokens": 331, "duration": 28.545739889144897, "result": "passed", "passed": true}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\n    tribonacci = [1, 3, 2]\n\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 137, "duration": 10.916350603103638, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.193249702453613, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                return True\n    return False", "prompt_tokens": 183, "completion_tokens": 177, "duration": 13.288108348846436, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.404160499572754, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1:].isalpha() and not txt[-2:].isalpha() if txt else False", "prompt_tokens": 187, "completion_tokens": 37, "duration": 6.14909291267395, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 7.14342474937439, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 80, "duration": 9.109614372253418, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def parse_value(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    \n    a_parsed = parse_value(a)\n    b_parsed = parse_value(b)\n    \n    if a_parsed == b_parsed:\n        return None\n    elif a_parsed > b_parsed:\n        return a\n    else:\n        return b", "prompt_tokens": 191, "completion_tokens": 86, "duration": 7.722904205322266, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2 = 8,\n    # any number less than 8 cannot be written as the sum of 4 positive even numbers.\n    if n < 8:\n        return False\n    # For any even number n >= 8, it can always be represented as the sum of 4 even numbers.\n    # Example: 8 = 2 + 2 + 2 + 2, 10 = 2 + 2 + 2 + 4, and so on.\n    # The key observation is that for even n >= 8, we can always adjust the summands accordingly.\n    return n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 188, "duration": 15.96557068824768, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 75, "duration": 9.642045497894287, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n    \"\"\"\n    # Replace more than 2 consecutive spaces with \"-\"\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces with \"_\"\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 97, "duration": 8.30896282196045, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex pattern to match the file name conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{2,}(\\.)(txt|exe|dll)$'\n    # Check if the file name has more than three digits\n    digit_count = sum(c.isdigit() for c in file_name)\n    if digit_count > 3:\n        return 'No'\n    # Check if the file name matches the pattern\n    if re.match(pattern, file_name):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 264, "completion_tokens": 133, "duration": 11.719170570373535, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(lst[i]**2 if i % 3 == 0 else lst[i]**3 if i % 4 == 0 else lst[i] for i in range(len(lst)))", "prompt_tokens": 219, "completion_tokens": 49, "duration": 7.090923309326172, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 96, "duration": 9.64962887763977, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 6.164813280105591, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 35, "duration": 6.7222912311553955, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_first_and_last_digit_odd(n):\n        n_str = str(abs(n))  # Convert number to string, taking absolute value to handle negative numbers\n        return n_str[0] in '13579' and n_str[-1] in '13579'\n    \n    return sum(1 for n in nums if n > 10 and is_first_and_last_digit_odd(n))", "prompt_tokens": 169, "completion_tokens": 89, "duration": 11.2549729347229, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Generate the array as per the given condition\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the frequency of remainders when elements are divided by 3\n    remainder_counts = [0, 0, 0]\n    for value in a:\n        remainder_counts[value % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Combination formula: nC3 = n! / (3! * (n-3)!)\n    # For a[i] + a[j] + a[k] to be divisible by 3, all three numbers must have the same remainder when divided by 3\n    # or they must have remainders 0, 1, and 2 respectively.\n    valid_triples = 0\n    for count in remainder_counts:\n        if count >= 3:\n            valid_triples += count * (count - 1) * (count - 2) // 6  # Combination formula for 3 elements from count\n    \n    # Special case: one element from each remainder category\n    if all(count > 0 for count in remainder_counts):\n        valid_triples += remainder_counts[0] * remainder_counts[1] * remainder_counts[2]\n    \n    return valid_triples", "prompt_tokens": 215, "completion_tokens": 363, "duration": 19.876725673675537, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    return tuple(planets[start+1:end])", "prompt_tokens": 261, "completion_tokens": 109, "duration": 8.805082321166992, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 237, "completion_tokens": 75, "duration": 8.6152925491333, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 7.978659391403198, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 40, "duration": 7.3753838539123535, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 7.490201234817505, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        return CAP - SM\n\n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 327, "completion_tokens": 78, "duration": 9.43459415435791, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    b_rotated = b * 2\n    return any(b_rotated[i:i+len(b)] in a for i in range(len(b)))", "prompt_tokens": 179, "completion_tokens": 55, "duration": 6.712971210479736, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    num = abs(num) # Make sure the number is positive\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 95, "duration": 10.208034992218018, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    value_map = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = ''\n    for value, numeral in value_map:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral", "prompt_tokens": 151, "completion_tokens": 178, "duration": 12.785280704498291, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 8.03945779800415, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word", "prompt_tokens": 170, "completion_tokens": 77, "duration": 8.577604293823242, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    return [number + eaten, remaining - eaten]", "prompt_tokens": 327, "completion_tokens": 32, "duration": 6.842845439910889, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, val in zip(operator, operand[1:]):\n        expression += f\" {op} {val}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 51, "duration": 7.818987131118774, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)", "prompt_tokens": 157, "completion_tokens": 51, "duration": 7.646723031997681, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        hash_object = hashlib.md5(text.encode())\n        return hash_object.hexdigest()", "prompt_tokens": 126, "completion_tokens": 106, "duration": 10.319803953170776, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return sorted(set(range(a, b+1)).union(set(range(b, a+1))) & set(range(0, max(a, b)+1, 2)))", "prompt_tokens": 154, "completion_tokens": 48, "duration": 7.869380712509155, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.874492645263672, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    cleaned_string = paren_string.replace(\" \", \"\")\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in cleaned_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 165, "completion_tokens": 106, "duration": 5.802709579467773, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.0843594074249268, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.571848154067993, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 167, "completion_tokens": 54, "duration": 3.981733798980713, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result", "prompt_tokens": 142, "completion_tokens": 65, "duration": 6.018126487731934, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    for group in paren_string.split():\n        max_depth = depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 162, "completion_tokens": 95, "duration": 5.339843273162842, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 40, "duration": 3.286530017852783, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 65, "duration": 4.274240255355835, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    return max_list", "prompt_tokens": 150, "completion_tokens": 65, "duration": 4.313716411590576, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 118, "duration": 6.5843377113342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.2341177463531494, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string", "prompt_tokens": 152, "completion_tokens": 110, "duration": 5.643096208572388, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.2577342987060547, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 73, "duration": 4.758653879165649, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.5854110717773438, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.644256830215454, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.884357929229736, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.631695985794067, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 110, "duration": 6.496778726577759, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) < min_diff:\n            min_diff = abs(numbers[i + 1] - numbers[i])\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 124, "duration": 7.4613611698150635, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 173, "completion_tokens": 100, "duration": 7.507568836212158, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values if isinstance(v, int)]", "prompt_tokens": 141, "completion_tokens": 92, "duration": 5.570197105407715, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.9425699710845947, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.2260615825653076, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 80, "duration": 4.760978698730469, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    from collections import Counter\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "prompt_tokens": 134, "completion_tokens": 49, "duration": 4.013584136962891, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 98, "completion_tokens": 20, "duration": 2.279709577560425, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.704251766204834, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 39, "duration": 3.7254178524017334, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 8.27558422088623, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.6481595039367676, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n\n    def equation(x):\n        return poly(xs, x)\n\n    root = fsolve(equation, 0)[0]\n    return root", "prompt_tokens": 309, "completion_tokens": 203, "duration": 10.263601541519165, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted(l[i] for i in indices)\n    for idx, val in zip(indices, values):\n        l[idx] = val\n    return l", "prompt_tokens": 200, "completion_tokens": 66, "duration": 4.762404918670654, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 2.119497060775757, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 5.114935874938965, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 4.576681613922119, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    even_indices = sorted(l[::2])\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 49, "duration": 4.0540547370910645, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    # Split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 114, "duration": 6.4558680057525635, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "prompt_tokens": 147, "completion_tokens": 146, "duration": 14.21049690246582, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()  # Sort the list to use two pointers approach\n    n = len(l)\n    for i in range(n-2):  # Iterate through the list\n        # Avoid duplicates\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, n - 1  # Set left and right pointers\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 209, "completion_tokens": 153, "duration": 8.514713764190674, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the total number of collisions between two sets of n cars moving towards each other.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 43, "duration": 3.912020444869995, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 6.466832637786865, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.3384833335876465, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 59, "duration": 3.833249807357788, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.352856159210205, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 123, "duration": 6.605600118637085, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2", "prompt_tokens": 125, "completion_tokens": 61, "duration": 4.07043719291687, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 23, "duration": 2.6133816242218018, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 4.366562604904175, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 4.339710712432861, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 37, "duration": 3.4719958305358887, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.7447218894958496, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.142388105392456, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 3.1431708335876465, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 4.316073894500732, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 142, "completion_tokens": 68, "duration": 4.790966033935547, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 137, "completion_tokens": 55, "duration": 4.715466022491455, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.2254202365875244, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    largest_prime = 1\n    # Check for divisibility by 2\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    # Check for odd factors\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            if is_prime(i):\n                largest_prime = i\n            n //= i\n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n    return largest_prime", "prompt_tokens": 113, "completion_tokens": 192, "duration": 11.130263566970825, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 109, "duration": 7.065364599227905, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.774703502655029, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.3936707973480225, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c", "prompt_tokens": 199, "completion_tokens": 93, "duration": 5.989854097366333, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    \"\"\"Returns the number of vowels in the string. 'y' is considered a vowel only if it is at the end of the word.\"\"\"\n    vowels = 'aeiouAEIOU'\n    count = sum(1 for char in s if char in vowels)\n    if s and s[-1] in 'yY':\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"rhythm\"))  # 0\nprint(vowels_count(\"Y\"))  # 1\nprint(vowels_count(\"fly\"))  # 0\nprint(vowels_count(\"quickly\"))  # 2", "prompt_tokens": 176, "completion_tokens": 173, "duration": 16.185860872268677, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": true, "solved_count": 4, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.083728313446045, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    # Split the string to extract numbers\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    # Subtract the sum of apples and oranges from the total number of fruits\n    mangoes = n - sum(numbers)\n    return mangoes", "prompt_tokens": 260, "completion_tokens": 67, "duration": 4.435070514678955, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "prompt_tokens": 362, "completion_tokens": 52, "duration": 4.224318504333496, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    result = -1\n    for key, value in count.items():\n        if key <= value:\n            result = max(result, key)\n    return result", "prompt_tokens": 215, "completion_tokens": 53, "duration": 4.045287847518921, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))  # Take the smallest\n        if sorted_lst:\n            result.append(sorted_lst.pop())  # Take the largest\n    return result", "prompt_tokens": 174, "completion_tokens": 63, "duration": 5.465240716934204, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1.\n    '''\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return -1\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)", "prompt_tokens": 171, "completion_tokens": 159, "duration": 8.314682245254517, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5326101779937744, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 3.613743305206299, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 241, "duration": 17.160208463668823, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i+1, a // i):\n                if (a / i) % j == 0 and is_prime(j) and is_prime(a // (i*j)):\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 133, "duration": 9.425366163253784, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 4.261970520019531, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    if a >= 0:\n        return int(round(a ** (1. / 3))) ** 3 == a\n    else:\n        return int(round(-((-a) ** (1. / 3)))) ** 3 == a", "prompt_tokens": 160, "completion_tokens": 60, "duration": 6.299723386764526, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    # Prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Counting the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 69, "duration": 6.023341655731201, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return \"db\" + binary_str + \"db\"", "prompt_tokens": 189, "completion_tokens": 45, "duration": 3.39567494392395, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 57, "duration": 4.011998414993286, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 222, "duration": 11.29977560043335, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.173132658004761, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * (10 ** (n - 1)) - (9 ** (n - 1))", "prompt_tokens": 94, "completion_tokens": 81, "duration": 3.9504661560058594, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 33, "duration": 3.095763921737671, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 4.087356805801392, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 180, "completion_tokens": 40, "duration": 3.4646873474121094, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list and an integer x, returns a list of tuples indicating the positions of x in the list.\n    The positions are returned as (row, column) sorted first by rows in ascending order, then by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda pos: (pos[0], -pos[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 124, "duration": 6.527857780456543, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:  # if the array is empty\n        return []\n    sorted_array = sorted(array)  # sort in ascending order by default\n    if (array[0] + array[-1]) % 2 == 0:  # if the sum of the first and last elements is even\n        sorted_array.reverse()  # reverse to get descending order\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 284, "duration": 15.267506837844849, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            offset = 4 if char.islower() else 4\n            encrypted_char = chr(((ord(char) - 97 + offset) % 26) + 97) if char.islower() else chr(((ord(char) - 65 + offset) % 26) + 65)\n            result += encrypted_char\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 104, "duration": 10.019974708557129, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list if it exists, otherwise None.\n    \"\"\"\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    else:\n        return unique_elements[1]", "prompt_tokens": 174, "completion_tokens": 64, "duration": 4.786969900131226, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n\n    :param S: A string of words\n    :return: The number of sentences starting with \"I\"\n    \"\"\"\n    # Split the string into sentences based on '.', '?' or '!'\n    sentences = [s.strip() for s in S.replace('?', '.').replace('!', '.').split('.') if s]\n\n    # Count sentences starting with \"I\"\n    count = sum(sentence.startswith(\"I\") for sentence in sentences)\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 117, "duration": 6.94419264793396, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 185, "completion_tokens": 59, "duration": 4.006861448287964, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": false, "solved_count": 0, "generated_code": "def encode(message):\n    def shift_vowel(v):\n        vowels = 'aeiouAEIOU'\n        shift = 2\n        if v in vowels:\n            is_upper = v.isupper()\n            index = vowels.index(v.lower())\n            shifted_vowel = vowels[(index + shift) % len(vowels)]\n            return shifted_vowel.upper() if is_upper else shifted_vowel\n        return v\n\n    def swap_case(c):\n        return c.lower() if c.isupper() else c.upper()\n    \n    encoded_message = ''\n    for char in message:\n        if char.lower() in 'aeiou':\n            encoded_message += swap_case(shift_vowel(char))\n        else:\n            encoded_message += swap_case(char)\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 158, "duration": 9.486825704574585, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum([int(digit) for digit in str(largest_prime)])", "prompt_tokens": 336, "completion_tokens": 113, "duration": 6.079300165176392, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 69, "duration": 4.789583444595337, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 4.909604072570801, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Return the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 3.199455976486206, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 122, "completion_tokens": 75, "duration": 4.7997331619262695, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 3.6809844970703125, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones = [n]\n    for i in range(1, n):\n        stones.append(stones[i-1] + 2)\n    return stones", "prompt_tokens": 182, "completion_tokens": 141, "duration": 12.424156188964844, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 4.219839334487915, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 125, "duration": 8.348047733306885, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.746781349182129, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted(filter(has_no_even_digit, x))", "prompt_tokens": 152, "completion_tokens": 88, "duration": 6.318872451782227, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", \n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [digit_names[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 109, "duration": 7.134451866149902, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 98, "duration": 7.617148160934448, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 101, "duration": 7.27311110496521, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n))) if n >= 0 else -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 75, "duration": 8.908817768096924, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i - 1] > arr[i]:\n            count += 1\n        if count > 1:\n            return False\n    if count == 0:\n        return True\n    return arr[0] >= arr[-1]", "prompt_tokens": 349, "completion_tokens": 92, "duration": 7.470369100570679, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    \"\"\"\n    # Count of odd numbers in lst1\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    # Count of even numbers in lst2\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n\n    # If there are enough even numbers in lst2 to replace all odd numbers in lst1\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 229, "duration": 18.10656476020813, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    words = test.split()\n    hist = {}\n    for word in words:\n        hist[word] = hist.get(word, 0) + 1\n    max_count = max(hist.values(), default=0)\n    return {k: v for k, v in hist.items() if v == max_count}", "prompt_tokens": 201, "completion_tokens": 72, "duration": 6.410729885101318, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result_str = ''.join([char for char in s if char not in c])\n    return (result_str, result_str == result_str[::-1])", "prompt_tokens": 212, "completion_tokens": 43, "duration": 6.830443859100342, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 149, "duration": 10.093224287033081, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.401673793792725, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_units = sum(row.count(1) for row in grid)\n    return math.ceil(total_units / capacity)", "prompt_tokens": 373, "completion_tokens": 39, "duration": 4.75900673866272, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    \"\"\"\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 137, "duration": 11.281432151794434, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() in 'bcdfghjklmnpqrstvwxyz')\n    \n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 66, "duration": 8.044434070587158, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 6.426270246505737, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    first, second = lst\n    if first.count('(') >= second.count(')') or second.count('(') >= first.count(')'):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 51, "duration": 6.574912071228027, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 6.8196940422058105, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.397434234619141, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 <= abs(x) < 100)", "prompt_tokens": 178, "completion_tokens": 72, "duration": 8.557146072387695, "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1) # Since the sequence always ends with 1.\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 108, "duration": 9.732945442199707, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Split the date string into components\n    parts = date.split('-')\n    \n    # Check if the date format is correct (mm-dd-yyyy)\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if month, day, and year are numeric\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    # Convert month, day, and year to integers\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Days in each month\n    days_in_month = {\n        1: 31, 2: 29 if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) else 28, \n        3: 31, 4: 30, 5: 31, 6: 30, \n        7: 31, 8: 31, 9: 30, 10: 31, \n        11: 30, 12: 31\n    }\n    \n    # Check if the day is valid\n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 308, "duration": 24.027827739715576, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 190, "completion_tokens": 66, "duration": 7.884910345077515, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    if len(lst) != len(set(lst)):\n        counter = {}\n        for num in lst:\n            if num in counter:\n                counter[num] += 1\n                if counter[num] > 2:\n                    return False\n            else:\n                counter[num] = 1\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 74, "duration": 7.2424280643463135, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        sum_of_magnitudes += abs(num)\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n    return sum_of_magnitudes * product_of_signs", "prompt_tokens": 172, "completion_tokens": 111, "duration": 12.68448543548584, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    pq = [(grid[i][j], i, j, [grid[i][j]]) for i in range(N) for j in range(N)]\n    pq.sort()\n    visited = set()\n\n    while pq:\n        _, x, y, path = pq.pop(0)\n        if len(path) == k:\n            return path\n        if (x, y, len(path)) in visited:\n            continue\n        visited.add((x, y, len(path)))\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                pq.append((new_path, nx, ny, new_path))\n                pq.sort(key=lambda x: (len(x[3]), x[3]))", "prompt_tokens": 446, "completion_tokens": 232, "duration": 13.436962604522705, "result": "passed", "passed": true}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 1, "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 2]\n    \n    tribonacci = [3, 2]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            next_val = tribonacci[-1] + tribonacci[-2] + (1 + (i + 1) // 2)\n            tribonacci.append(next_val)\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 125, "duration": 12.824751138687134, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 72, "duration": 7.918302059173584, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n        if balance >= 2:\n            return True\n    return False", "prompt_tokens": 183, "completion_tokens": 193, "duration": 15.617799520492554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    Returns the sum of squared numbers in the given list,\n    after rounding each element in the list to the upper integer.\n    \"\"\"\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 56, "duration": 6.28252649307251, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    return txt[-1].isalpha() and txt[-2].isspace()", "prompt_tokens": 187, "completion_tokens": 158, "duration": 12.221259355545044, "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 46, "duration": 6.818786144256592, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = max([x for x in lst if x < 0], default=None)\n    smallest_positive = min([x for x in lst if x > 0], default=None)\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 62, "duration": 7.7470924854278564, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    \"\"\"\n    Compares two values that can be integers, floats, or strings representing real numbers.\n    Returns the larger variable in its original type, or None if they are equal.\n    \"\"\"\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 126, "duration": 10.508488178253174, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 27, "duration": 5.753249883651733, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 75, "duration": 8.489978075027466, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    import re\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 161, "duration": 12.340939044952393, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Check all conditions using regular expression\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}[a-zA-Z0-9]*\\.(txt|exe|dll)$'\n    if re.fullmatch(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 264, "completion_tokens": 84, "duration": 8.330341815948486, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(lst[i]**2 if i % 3 == 0 else lst[i]**3 if i % 4 == 0 else lst[i] for i in range(len(lst)))", "prompt_tokens": 219, "completion_tokens": 49, "duration": 6.524293661117554, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    \n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 102, "duration": 8.726972103118896, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 6.0983734130859375, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 36, "duration": 6.853355169296265, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def isOdd(num):\n        num_str = str(abs(num))\n        return int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0\n    \n    return sum(1 for num in nums if num > 10 and isOdd(num))", "prompt_tokens": 169, "completion_tokens": 70, "duration": 21.051438808441162, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Calculate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    # Count how many elements of a are divisible by 3, remainder 1 when divided by 3, and remainder 2 when divided by 3\n    count_div_3 = sum(x % 3 == 0 for x in a)\n    count_rem_1 = sum(x % 3 == 1 for x in a)\n    count_rem_2 = sum(x % 3 == 2 for x in a)\n    # Calculate the number of valid triples\n    # There are three cases for valid triples: (div3, div3, div3), (rem1, rem1, rem1), and (rem2, rem2, rem2)\n    # For each case, use the combination formula nC3 = n! / (3!(n-3)!) to calculate the number of ways to choose triples\n    result = 0\n    if count_div_3 >= 3:\n        result += count_div_3 * (count_div_3 - 1) * (count_div_3 - 2) // 6\n    if count_rem_1 >= 3:\n        result += count_rem_1 * (count_rem_1 - 1) * (count_rem_1 - 2) // 6\n    if count_rem_2 >= 3:\n        result += count_rem_2 * (count_rem_2 - 1) * (count_rem_2 - 2) // 6\n    return result", "prompt_tokens": 215, "completion_tokens": 424, "duration": 22.365949869155884, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1 + 1:index2])", "prompt_tokens": 261, "completion_tokens": 118, "duration": 9.958965063095093, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "prompt_tokens": 237, "completion_tokens": 85, "duration": 9.329762697219849, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 62, "duration": 8.289951086044312, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 34, "duration": 5.192629814147949, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.786277770996094, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(ext):\n        CAP = sum(1 for char in ext if char.isupper())\n        SM = sum(1 for char in ext if char.islower())\n        return CAP - SM\n\n    strongest_ext = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 327, "completion_tokens": 80, "duration": 7.620356321334839, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]  # rotate b\n    return False", "prompt_tokens": 179, "completion_tokens": 64, "duration": 9.096507787704468, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 71, "duration": 8.761413097381592, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 165, "duration": 12.46084475517273, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.726427316665649, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word", "prompt_tokens": 170, "completion_tokens": 77, "duration": 8.577604293823242, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 42, "duration": 7.371402978897095, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += f\" {operator[i]} {operand[i+1]}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 105, "duration": 9.679292917251587, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower() if c.isalpha() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 55, "duration": 8.03844666481018, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()", "prompt_tokens": 126, "completion_tokens": 105, "duration": 9.125185489654541, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 71, "duration": 6.1178693771362305, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 93, "duration": 5.184004783630371, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(' ', '')  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:  # If stack is empty, a group is completed\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 165, "completion_tokens": 151, "duration": 9.92685604095459, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.600942850112915, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.6241776943206787, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 167, "completion_tokens": 115, "duration": 7.61433482170105, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result += [delimeter, number]\n    return result", "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.203784465789795, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            if max_depth > 0:\n                max_depths.append(max_depth)\n                max_depth = 0\n                current_depth = 0\n    if max_depth > 0:\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 162, "completion_tokens": 147, "duration": 9.045776844024658, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 40, "duration": 3.355964183807373, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 113, "duration": 6.73239541053772, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    rolling_maxes = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        rolling_maxes.append(max_so_far)\n    return rolling_maxes", "prompt_tokens": 150, "completion_tokens": 72, "duration": 5.198610782623291, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 118, "duration": 6.5843377113342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.6700446605682373, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of a list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 152, "completion_tokens": 112, "duration": 8.323522329330444, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.602329969406128, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 109, "completion_tokens": 78, "duration": 5.207324743270874, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 118, "completion_tokens": 28, "duration": 2.748901844024658, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.2993056774139404, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.865995168685913, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\"\"\"\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 93, "duration": 5.5003156661987305, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 105, "duration": 6.175848007202148, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < min_diff:\n            min_diff = numbers[i+1] - numbers[i]\n            pair = (numbers[i], numbers[i+1])\n    return pair", "prompt_tokens": 216, "completion_tokens": 104, "duration": 7.722608804702759, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 105, "duration": 6.250580549240112, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 103, "duration": 6.122820854187012, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.4051690101623535, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.3575446605682373, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 80, "duration": 5.500531196594238, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 96, "duration": 6.119642734527588, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 3.3266348838806152, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.6389334201812744, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 99, "duration": 6.9002063274383545, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 7.832218408584595, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 4.312642812728882, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    return fsolve(lambda x: poly(xs, x), 0)[0]", "prompt_tokens": 309, "completion_tokens": 190, "duration": 10.532405376434326, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_3_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_3_elements.sort()\n    \n    # Insert the sorted elements back into the original list\n    for i, val in enumerate(divisible_by_3_elements):\n        l[i * 3] = val\n    \n    return l", "prompt_tokens": 200, "completion_tokens": 171, "duration": 11.742120504379272, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 26, "duration": 2.414290428161621, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 6.3304829597473145, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 63, "duration": 4.253171443939209, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    \"\"\"Sorts the list l such that the values at even indices are sorted, while odd indices remain unchanged.\"\"\"\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i, value in enumerate(even_indices_values):\n        l[i*2] = value\n    return l", "prompt_tokens": 173, "completion_tokens": 85, "duration": 7.437806606292725, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 134, "duration": 7.880993366241455, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib_seq(limit):\n        a, b = 0, 1\n        for _ in range(limit):\n            yield a\n            a, b = b, a + b\n\n    count, fib_number = 0, 0\n    for fib in fib_seq(227000):  # Increased limit to ensure we find the n-th prime Fibonacci number\n        if is_prime(fib) and fib != 0:\n            count += 1\n            if count == n:\n                return fib", "prompt_tokens": 147, "completion_tokens": 173, "duration": 9.531513929367065, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        a = l[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False", "prompt_tokens": 209, "completion_tokens": 117, "duration": 7.034353733062744, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since all cars have the same speed and start far apart, every car moving left to right\n    will eventually collide with each car moving right to left. Thus, the total number of\n    collisions is simply the product of the number of cars in each direction.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 79, "duration": 5.909088134765625, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 6.023825645446777, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.5380194187164307, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 59, "duration": 4.388824701309204, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 5.479550838470459, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 7.267601490020752, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 3.3562259674072266, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 80, "duration": 5.099176645278931, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.377926826477051, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 2.8789665699005127, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 37, "duration": 3.1520307064056396, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 3.0921270847320557, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 6.229273319244385, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.5202748775482178, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.851690292358398, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 68, "duration": 4.628933906555176, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 61, "duration": 3.6932373046875, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 40, "duration": 4.069079637527466, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_factor = 1\n    i = 2\n\n    while i <= n ** 0.5 or n == 2:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):  # If n is a prime number greater than 2\n        prime_factor = n\n    \n    return prime_factor", "prompt_tokens": 113, "completion_tokens": 171, "duration": 9.444586515426636, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.009448289871216, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 5.694744825363159, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.3204519748687744, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 96, "duration": 5.019906520843506, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.lower().endswith('y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Should return 2\nprint(vowels_count(\"ACEDY\"))  # Should return 3\nprint(vowels_count(\"rhythm\"))  # Should return 0\nprint(vowels_count(\"SYZYGY\"))  # Should return 1\nprint(vowels_count(\"quiet\"))  # Should return 3", "prompt_tokens": 176, "completion_tokens": 138, "duration": 8.219827651977539, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift >= len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 4.064870119094849, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.2385733127593994, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    # Extract numbers from the string\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    # Calculate the number of mangoes by subtracting the sum of apples and oranges from total fruits\n    mangoes = n - sum(numbers)\n    return mangoes", "prompt_tokens": 260, "completion_tokens": 71, "duration": 4.347940921783447, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "prompt_tokens": 362, "completion_tokens": 52, "duration": 3.1909124851226807, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    valid_numbers = [num for num, count in freq.items() if num <= count]\n    return max(valid_numbers) if valid_numbers else -1", "prompt_tokens": 215, "completion_tokens": 52, "duration": 3.4156415462493896, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result", "prompt_tokens": 174, "completion_tokens": 46, "duration": 3.6075000762939453, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        # Heron's formula to calculate area of a triangle with sides a, b, c\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 181, "duration": 8.835237503051758, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.577023983001709, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 4.0771801471710205, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 49, "duration": 4.414738655090332, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            a = a // i\n            if a == 1 or prime_factors > 3:\n                break\n    return prime_factors == 3", "prompt_tokens": 129, "completion_tokens": 134, "duration": 7.220714569091797, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.564862012863159, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    root = round(abs_a ** (1/3))\n    return root**3 == abs_a", "prompt_tokens": 160, "completion_tokens": 48, "duration": 4.699963092803955, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = set('2357BD')\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 36, "duration": 4.187698841094971, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary}db\"", "prompt_tokens": 189, "completion_tokens": 42, "duration": 3.718564748764038, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 57, "duration": 3.606152057647705, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Converts a list of GPAs to letter grades based on specified criteria.\n    \"\"\"\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 254, "duration": 16.971424102783203, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.866895914077759, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * (10 ** (n - 1)) - (10 ** (n - 2))", "prompt_tokens": 94, "completion_tokens": 81, "duration": 4.646977186203003, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 33, "duration": 2.3595399856567383, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 5.1271326541900635, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.7413971424102783, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 154, "duration": 23.750396728515625, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"\n    if not array:  # Check if the array is empty\n        return []\n    \n    # Determine the sorting order based on the sum of the first and last elements\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 253, "completion_tokens": 161, "duration": 8.832568883895874, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - 97 + 4) % 26) + 97)\n            result += shifted\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 64, "duration": 4.709034204483032, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    return unique_sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 42, "duration": 3.6073429584503174, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Count the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    sentences = [sentence.strip() for sentence in S.replace('?', '.').replace('!', '.').split('.')]\n    return sum(sentence.startswith('I') for sentence in sentences if sentence)", "prompt_tokens": 157, "completion_tokens": 92, "duration": 6.678186893463135, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 56, "duration": 4.136426687240601, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": false, "solved_count": 0, "generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    swap = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', \n            'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += swap[char]\n        elif char.isalpha():\n            encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 135, "duration": 7.213869333267212, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    from math import sqrt\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = max(filter(is_prime, lst), default=0)\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 336, "completion_tokens": 98, "duration": 5.527128219604492, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 69, "duration": 4.925791263580322, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [num for num in range(2, n) if is_prime(num)]", "prompt_tokens": 195, "completion_tokens": 110, "duration": 9.751034259796143, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 3.2276790142059326, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)", "prompt_tokens": 122, "completion_tokens": 63, "duration": 3.791168689727783, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    number = float(value)\n    if number > 0:\n        if number - int(number) >= 0.5:\n            return int(number) + 1\n        else:\n            return int(number)\n    else:\n        if number - int(number) <= -0.5:\n            return int(number) - 1\n        else:\n            return int(number)", "prompt_tokens": 206, "completion_tokens": 85, "duration": 6.609374046325684, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The next level has the next odd number if n is odd, or the next even number if n is even.\n    Return the number of stones in each level in a list.\n    \"\"\"\n    stones = []\n    current_stone_count = n\n    for _ in range(n):\n        stones.append(current_stone_count)\n        if current_stone_count % 2 == 0:\n            current_stone_count += 2\n        else:\n            current_stone_count += 2\n    return stones", "prompt_tokens": 182, "completion_tokens": 144, "duration": 13.04182243347168, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 4.020533084869385, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 125, "duration": 15.7046217918396, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 6.0968358516693115, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(number):\n        return all(int(digit) % 2 != 0 for digit in str(number))\n    \n    result = [num for num in x if has_no_even_digit(num)]\n    return sorted(result)", "prompt_tokens": 152, "completion_tokens": 98, "duration": 8.50049114227295, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    sorted_filtered = sorted([x for x in arr if 1 <= x <= 9])\n    reversed_sorted = sorted_filtered[::-1]\n    return [num_to_word[x] for x in reversed_sorted]", "prompt_tokens": 326, "completion_tokens": 111, "duration": 8.197126388549805, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 108, "duration": 8.775911808013916, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 99, "duration": 6.727648735046387, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n))) if n >= 0 else -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 75, "duration": 9.100237131118774, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "prompt_tokens": 349, "completion_tokens": 67, "duration": 7.721670389175415, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 84, "duration": 6.982749700546265, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    from collections import Counter\n    # Split the string into a list of words/letters\n    words = test.split()\n    # Count occurrences of each letter\n    counts = Counter(words)\n    # Find the maximum occurrence\n    max_occurrence = max(counts.values(), default=0)\n    # Filter letters that have the maximum occurrence and create a dictionary\n    return {letter: count for letter, count in counts.items() if count == max_occurrence}", "prompt_tokens": 201, "completion_tokens": 103, "duration": 8.311358213424683, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 4.84127140045166, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 80, "duration": 8.33867073059082, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 135, "duration": 10.821414947509766, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_units = sum(row.count(1) for row in grid)\n    return math.ceil(total_units / capacity)", "prompt_tokens": 373, "completion_tokens": 39, "duration": 4.75900673866272, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers based on the number of ones in their binary representation,\n    then by their decimal value if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 65, "duration": 6.968991994857788, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = sum(1 for char in word if char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n            \n    return result", "prompt_tokens": 231, "completion_tokens": 73, "duration": 6.705889463424683, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 7.5104005336761475, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    '''\n    Given a list of two strings, checks if it is possible to concatenate the two strings in\n    some order, so the resulting string will be good. A string is considered to be good\n    if all parentheses in it are balanced.\n    \n    Parameters:\n    lst (list): A list of two strings, each containing only '(' and/or ')'.\n    \n    Returns:\n    str: 'Yes' if there's a way to make a good string by concatenating the two strings,\n         'No' otherwise.\n    '''\n    first, second = lst\n    # If both strings start with ')' or end with '(', it's impossible to balance them.\n    if (first[0] == ')' and second[0] == ')') or (first[-1] == '(' and second[-1] == '('):\n        return 'No'\n    # Count parentheses in both strings\n    first_balance = first.count('(') - first.count(')')\n    second_balance = second.count('(') - second.count(')')\n    # If the sum of balance is not 0, it's impossible to balance.\n    if first_balance + second_balance != 0:\n        return 'No'\n    # If any string has more closing than opening parentheses, it should go first.\n    if first_balance < 0 or second_balance < 0:\n        return 'Yes'\n    # If both strings have more opening parentheses, the one with less should go first.\n    if first_balance <= second_balance:\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 325, "duration": 17.415884494781494, "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 6.100834369659424, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 6.179059982299805, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 < x < 100)", "prompt_tokens": 178, "completion_tokens": 70, "duration": 7.652598142623901, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 98, "duration": 8.388930797576904, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    # Split the date into parts\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month, day, year = parts\n\n    # Check if month, day, and year are integers\n    try:\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except ValueError:\n        return False\n\n    # Check if month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n\n    return True", "prompt_tokens": 313, "completion_tokens": 249, "duration": 19.20053458213806, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 6.928248643875122, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):  # Check for any duplicates\n        counts = {x: lst.count(x) for x in lst}\n        for count in counts.values():\n            if count > 2:  # If any number appears more than twice, return False\n                return False\n    return lst == sorted(lst)  # Check if the list is sorted in ascending order", "prompt_tokens": 299, "completion_tokens": 91, "duration": 25.1659893989563, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 77, "duration": 7.607611417770386, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    # Convert grid values to (value, row, col) tuples\n    flat_grid = [(val, i, j) for i, row in enumerate(grid) for j, val in enumerate(row)]\n    # Sort the flat grid to get the smallest value's position\n    flat_grid.sort()\n    # Starting point is the smallest value\n    start_val, start_row, start_col = flat_grid[0]\n\n    # Priority queue; each element is (path as list, last value, last row, last col, steps taken)\n    pq = [([start_val], start_val, start_row, start_col, 1)]\n    visited = set()\n\n    while pq:\n        path, last_val, r, c, steps = heappop(pq)\n        if steps == k:\n            return path\n        if (r, c, steps) in visited:\n            continue\n        visited.add((r, c, steps))\n\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            new_r, new_c = r + dr, c + dc\n            if 0 <= new_r < N and 0 <= new_c < N:\n                new_val = grid[new_r][new_c]\n                new_path = path + [new_val]\n                heappush(pq, (new_path, new_val, new_r, new_c, steps + 1))", "prompt_tokens": 446, "completion_tokens": 331, "duration": 28.545739889144897, "result": "passed", "passed": true}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 1, "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 2]\n    \n    tribonacci = [3, 2]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            next_val = tribonacci[-1] + tribonacci[-2] + (1 + (i + 1) // 2)\n            tribonacci.append(next_val)\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 125, "duration": 12.824751138687134, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.193249702453613, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n        if balance >= 2:\n            return True\n    return False", "prompt_tokens": 183, "completion_tokens": 193, "duration": 15.617799520492554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.404160499572754, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1:].isalpha() and not txt[-2:].isalpha() if txt else False", "prompt_tokens": 187, "completion_tokens": 37, "duration": 6.14909291267395, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 7.14342474937439, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 80, "duration": 9.109614372253418, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def parse_value(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n        return float(value)\n    \n    a_parsed = parse_value(a)\n    b_parsed = parse_value(b)\n    \n    if a_parsed == b_parsed:\n        return None\n    elif a_parsed > b_parsed:\n        return a\n    else:\n        return b", "prompt_tokens": 191, "completion_tokens": 86, "duration": 7.722904205322266, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest four positive even numbers are 2, 4, 6, 8 and their sum is 20, \n    # any number less than 20 cannot be written as the sum of exactly 4 positive even numbers.\n    if n < 8 or n % 2 != 0:\n        return False\n    # If n is greater or equal to 8 and is even, it can always be represented as the sum of 2, 2, 2, and (n-6).\n    # (n-6) will always be even and positive if n >= 8.\n    return True", "prompt_tokens": 127, "completion_tokens": 166, "duration": 13.47548794746399, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 75, "duration": 9.642045497894287, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n    \"\"\"\n    # Replace more than 2 consecutive spaces with \"-\"\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces with \"_\"\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 97, "duration": 8.30896282196045, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex pattern to match the file name conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{2,}(\\.)(txt|exe|dll)$'\n    # Check if the file name has more than three digits\n    digit_count = sum(c.isdigit() for c in file_name)\n    if digit_count > 3:\n        return 'No'\n    # Check if the file name matches the pattern\n    if re.match(pattern, file_name):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 264, "completion_tokens": 133, "duration": 11.719170570373535, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(lst[i]**2 if i % 3 == 0 else lst[i]**3 if i % 4 == 0 else lst[i] for i in range(len(lst)))", "prompt_tokens": 219, "completion_tokens": 49, "duration": 7.090923309326172, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 96, "duration": 9.64962887763977, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 6.164813280105591, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 35, "duration": 6.7222912311553955, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_first_and_last_digit_odd(n):\n        n_str = str(abs(n))  # Convert number to string, taking absolute value to handle negative numbers\n        return n_str[0] in '13579' and n_str[-1] in '13579'\n    \n    return sum(1 for n in nums if n > 10 and is_first_and_last_digit_odd(n))", "prompt_tokens": 169, "completion_tokens": 89, "duration": 11.2549729347229, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Generate the array as per the given condition\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the frequency of remainders when elements are divided by 3\n    remainder_counts = [0, 0, 0]\n    for value in a:\n        remainder_counts[value % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Combination formula: nC3 = n! / (3! * (n-3)!)\n    # For a[i] + a[j] + a[k] to be divisible by 3, all three numbers must have the same remainder when divided by 3\n    # or they must have remainders 0, 1, and 2 respectively.\n    valid_triples = 0\n    for count in remainder_counts:\n        if count >= 3:\n            valid_triples += count * (count - 1) * (count - 2) // 6  # Combination formula for 3 elements from count\n    \n    # Special case: one element from each remainder category\n    if all(count > 0 for count in remainder_counts):\n        valid_triples += remainder_counts[0] * remainder_counts[1] * remainder_counts[2]\n    \n    return valid_triples", "prompt_tokens": 215, "completion_tokens": 363, "duration": 19.876725673675537, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    return tuple(planets[start+1:end])", "prompt_tokens": 261, "completion_tokens": 109, "duration": 8.805082321166992, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 237, "completion_tokens": 75, "duration": 8.6152925491333, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 7.978659391403198, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 40, "duration": 7.3753838539123535, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 7.490201234817505, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        return CAP - SM\n\n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 327, "completion_tokens": 78, "duration": 9.43459415435791, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    b_rotated = b * 2\n    return any(b_rotated[i:i+len(b)] in a for i in range(len(b)))", "prompt_tokens": 179, "completion_tokens": 55, "duration": 6.712971210479736, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    num = abs(num) # Make sure the number is positive\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 95, "duration": 10.208034992218018, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    value_map = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = ''\n    for value, numeral in value_map:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral", "prompt_tokens": 151, "completion_tokens": 178, "duration": 12.785280704498291, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 8.03945779800415, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word", "prompt_tokens": 170, "completion_tokens": 77, "duration": 8.577604293823242, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    return [number + eaten, remaining - eaten]", "prompt_tokens": 327, "completion_tokens": 32, "duration": 6.842845439910889, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, val in zip(operator, operand[1:]):\n        expression += f\" {op} {val}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 51, "duration": 7.818987131118774, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)", "prompt_tokens": 157, "completion_tokens": 51, "duration": 7.646723031997681, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        hash_object = hashlib.md5(text.encode())\n        return hash_object.hexdigest()", "prompt_tokens": 126, "completion_tokens": 106, "duration": 10.319803953170776, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return sorted(set(range(a, b+1)).union(set(range(b, a+1))) & set(range(0, max(a, b)+1, 2)))", "prompt_tokens": 154, "completion_tokens": 48, "duration": 7.869380712509155, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 174, "completion_tokens": 64, "duration": 4.75487208366394, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:  # If the stack is empty, we have a complete group\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 165, "completion_tokens": 125, "duration": 8.364513158798218, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.593454599380493, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 4.745342969894409, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 4.207878112792969, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.437914609909058, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 162, "completion_tokens": 103, "duration": 7.217733144760132, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 105, "duration": 8.629974126815796, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:  # if the list is empty\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 135, "duration": 7.478353500366211, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        max_list.append(current_max)\n    return max_list", "prompt_tokens": 150, "completion_tokens": 65, "duration": 5.787142038345337, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 118, "duration": 6.5843377113342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 2.8543407917022705, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 80, "duration": 4.265106439590454, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.7455403804779053, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 109, "completion_tokens": 60, "duration": 4.589229106903076, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.5521953105926514, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.1593639850616455, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Replace the 'o|' and '.|' in the string with unique characters to avoid confusion\n    music_string = music_string.replace('o|', 'h').replace('.|', 'q')\n    # Now, iterate through the string and map the characters to their beat values\n    beats_map = {'o': 4, 'h': 2, 'q': 1}\n    return [beats_map[char] for char in music_string.split()]", "prompt_tokens": 222, "completion_tokens": 119, "duration": 7.152365684509277, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 5.35260272026062, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    sorted_list = sorted(num_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_list)", "prompt_tokens": 155, "completion_tokens": 109, "duration": 5.791578054428101, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 117, "duration": 6.132099390029907, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num, max_num = min(numbers), max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 173, "completion_tokens": 57, "duration": 3.9916391372680664, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 51, "duration": 5.139939546585083, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.055067539215088, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.498643159866333, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 67, "duration": 3.813540458679199, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 96, "duration": 6.188704967498779, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.6051344871520996, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 5.677083253860474, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 60, "duration": 4.436453580856323, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 7.53526496887207, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 5.021997928619385, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n\n    def polynomial(x):\n        return poly(xs, x)\n\n    result = root(polynomial, 0)  # Initial guess is 0\n    return result.x[0]", "prompt_tokens": 309, "completion_tokens": 209, "duration": 13.531993389129639, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_three_elements_sorted = sorted(divisible_by_three_elements)\n    # Replace elements in the original list with the sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_three_elements_sorted):\n        l[i*3] = value\n    return l", "prompt_tokens": 200, "completion_tokens": 178, "duration": 9.802103757858276, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 2.397162914276123, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 5.93394660949707, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.66129994392395, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_indices_values.pop(0)\n    return l", "prompt_tokens": 173, "completion_tokens": 129, "duration": 9.474318265914917, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 114, "duration": 6.528709173202515, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib_seq(limit):\n        a, b = 0, 1\n        for _ in range(limit):\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_number in fib_seq(227000):  # Upper bound to ensure we get enough primes\n        if is_prime(fib_number):\n            count += 1\n            if count == n:\n                return fib_number", "prompt_tokens": 147, "completion_tokens": 160, "duration": 7.612762689590454, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 209, "completion_tokens": 123, "duration": 8.779701709747314, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Returns the total number of collisions in a scenario where n cars moving left to right\n    and n cars moving right to left on a straight infinitely long line.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 58, "duration": 4.05581521987915, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 6.782412767410278, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.6238152980804443, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 59, "duration": 3.4516003131866455, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.541795015335083, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 123, "duration": 6.53942346572876, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 3.9178824424743652, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 23, "duration": 3.187826633453369, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.4844424724578857, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 2.9345836639404297, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in text if char not in vowels)", "prompt_tokens": 172, "completion_tokens": 59, "duration": 5.057580947875977, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.9467265605926514, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 2.919173002243042, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 3.2053489685058594, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 66, "duration": 3.7723100185394287, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        elif bracket == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.116629600524902, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 137, "completion_tokens": 55, "duration": 4.5835120677948, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 39, "duration": 2.299417734146118, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 53, "duration": 3.36969256401062, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n+1))", "prompt_tokens": 144, "completion_tokens": 26, "duration": 2.9112391471862793, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 6.305736303329468, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.9462831020355225, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "prompt_tokens": 199, "completion_tokens": 101, "duration": 8.051957130432129, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.lower().endswith('y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"rhythm\"))  # 0\nprint(vowels_count(\"SYZYGY\"))  # 1\nprint(vowels_count(\"quickly\"))  # 2", "prompt_tokens": 176, "completion_tokens": 139, "duration": 10.590349435806274, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": true, "solved_count": 4, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.425279378890991, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0183377265930176, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(value, idx) for idx, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "prompt_tokens": 362, "completion_tokens": 52, "duration": 3.4415509700775146, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    '''\n    Given a non-empty list of positive integers, return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    If no such value exists, return -1.\n    '''\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    result = -1\n    for num, freq in frequency.items():\n        if num <= freq and num > result:\n            result = num\n            \n    return result", "prompt_tokens": 215, "completion_tokens": 131, "duration": 7.489641427993774, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 3.746457815170288, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    # Calculate semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)", "prompt_tokens": 171, "completion_tokens": 106, "duration": 8.164106607437134, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.699976682662964, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 4.027141332626343, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the one with fewer total characters, or the first if they're equal.\n    '''\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 77, "duration": 4.678477048873901, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, a) if is_prime(i)]\n    \n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 142, "duration": 7.1108949184417725, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if x < 1 or n <= 1:\n        return False\n    while x % n == 0:\n        x /= n\n    return x == 1", "prompt_tokens": 192, "completion_tokens": 63, "duration": 4.497180461883545, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    root = abs(a) ** (1/3)\n    return int(round(root)) ** 3 == abs(a)", "prompt_tokens": 160, "completion_tokens": 34, "duration": 2.9256913661956787, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 349, "completion_tokens": 58, "duration": 4.222330331802368, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary}db\"", "prompt_tokens": 189, "completion_tokens": 42, "duration": 3.0084314346313477, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 76, "duration": 6.457612991333008, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Convert numerical grades to letter grades based on the provided scale.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 269, "duration": 12.695846319198608, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.824135780334473, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # Only '1' fits the condition\n    else:\n        # For n > 1, we have 2 * (9**(n-1)) - (8**(n-1)) possibilities\n        # Explanation: There are 2 * 9**(n-1) ways to have numbers starting or ending with 1,\n        # but this double counts the numbers that both start and end with 1, of which there are 8**(n-1).\n        return 2 * (9**(n-1)) - (8**(n-1))", "prompt_tokens": 94, "completion_tokens": 171, "duration": 8.329357147216797, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 33, "duration": 2.4822816848754883, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.958810329437256, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.6234896183013916, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...]\n    such that each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order, and by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda k: (k[0], -k[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 138, "duration": 8.225459337234497, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 253, "completion_tokens": 61, "duration": 5.074383497238159, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 96, "duration": 4.659465789794922, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element in a list of integers or None if not possible.\n    \"\"\"\n    unique_sorted_list = sorted(set(lst))\n    if len(unique_sorted_list) < 2:\n        return None\n    else:\n        return unique_sorted_list[1]", "prompt_tokens": 174, "completion_tokens": 68, "duration": 3.737258195877075, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with \"I\" in a given string.\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    # Split the string into sentences\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    # Count sentences starting with \"I \"\n    count = sum(sentence.strip().startswith(\"I\") for sentence in sentences)\n    return count", "prompt_tokens": 157, "completion_tokens": 94, "duration": 4.528693914413452, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.3868942260742188, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": false, "solved_count": 0, "generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    vowel_replacement = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n                         'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += vowel_replacement[char]\n        elif char.isalpha():\n            encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 138, "duration": 8.622554540634155, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum([int(digit) for digit in str(largest_prime)])", "prompt_tokens": 336, "completion_tokens": 113, "duration": 6.079300165176392, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 67, "duration": 6.150428771972656, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 79, "duration": 5.665844917297363, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 3.383568525314331, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Counts the number of uppercase vowels in even indices of a given string.\n\n    Args:\n    s (str): The input string.\n\n    Returns:\n    int: The number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "prompt_tokens": 122, "completion_tokens": 88, "duration": 4.618080377578735, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        if num - int(num) < 0.5:\n            return int(num)\n        else:\n            return int(num) + 1\n    else:\n        if abs(num) - abs(int(num)) < 0.5:\n            return int(num)\n        else:\n            return int(num) - 1", "prompt_tokens": 206, "completion_tokens": 88, "duration": 4.2990782260894775, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.0664279460906982, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words and return an array of the words.\n    \"\"\"\n    import re\n    # Split the string by comma or space\n    return re.split(r'[,\\s]\\s*', s)", "prompt_tokens": 166, "completion_tokens": 54, "duration": 4.557156801223755, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"Returns the biggest even integer in the range [x, y] or -1 if none exists.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 66, "duration": 5.709801912307739, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.521028995513916, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x, return a sorted list of all elements that haven't any even digit.\n    \"\"\"\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted(filter(has_no_even_digit, x))", "prompt_tokens": 152, "completion_tokens": 75, "duration": 6.0138421058654785, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    num_to_word = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_word[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 110, "duration": 8.705436706542969, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n        \n    def sum_to_x(x):\n        return sum(range(1, x + 1))\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 113, "duration": 8.432361602783203, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 100, "duration": 6.643072128295898, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum([int(d) for d in str(n) if d.isdigit()]) - (2*int(str(n)[1]) if n < 0 else 0)\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 72, "duration": 6.665167808532715, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:  # If array is empty\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            count += 1\n            if count > 1:\n                return False\n    if count == 0:\n        return True\n    return arr[0] >= arr[-1]", "prompt_tokens": 349, "completion_tokens": 98, "duration": 6.926426649093628, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    \"\"\"Determine if it's possible to exchange elements between two lists to make the first list all even numbers.\"\"\"\n    # Count odd numbers in lst1 and even numbers in lst2\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n\n    # It is possible to make lst1 all even if there are enough even numbers in lst2 to replace all odd numbers in lst1\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 150, "duration": 9.27693247795105, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    words = test.split()\n    counter = {}\n    for word in words:\n        counter[word] = counter.get(word, 0) + 1\n    max_count = max(counter.values(), default=0)\n    return {key: value for key, value in counter.items() if value == max_count}", "prompt_tokens": 201, "completion_tokens": 72, "duration": 6.7359254360198975, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.095068454742432, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.644952774047852, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 87, "duration": 7.879081964492798, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": false, "solved_count": 0, "generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 373, "completion_tokens": 35, "duration": 5.010287761688232, "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 5.164805889129639, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    \"\"\"Returns a list of all words from string s that contain exactly n consonants.\"\"\"\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = sum(1 for char in word if char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result", "prompt_tokens": 231, "completion_tokens": 91, "duration": 11.212305784225464, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 6.426270246505737, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    first_open = lst[0].count('(')\n    first_close = lst[0].count(')')\n    second_open = lst[1].count('(')\n    second_close = lst[1].count(')')\n    \n    # Try first string followed by second string\n    if first_open >= first_close and (first_open - first_close) <= second_open:\n        return 'Yes'\n    # Try second string followed by first string\n    elif second_open >= second_close and (second_open - second_close) <= first_open:\n        return 'Yes'\n    \n    return 'No'", "prompt_tokens": 218, "completion_tokens": 130, "duration": 12.206583976745605, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 20, "duration": 3.8695626258850098, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 5.78210186958313, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 <= abs(x) < 100)", "prompt_tokens": 178, "completion_tokens": 72, "duration": 8.557146072387695, "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3*n + 1\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 119, "duration": 8.955832958221436, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into parts\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if parts are integers\n    try:\n        month, day, year = int(parts[0]), int(parts[1]), int(parts[2])\n    except ValueError:\n        return False\n    \n    # Check the range of month and day\n    if month < 1 or month > 12:\n        return False\n    \n    # Define the maximum days per month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_days = 31\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:  # February\n        max_days = 29\n    \n    if day < 1 or day > max_days:\n        return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 239, "duration": 15.85520339012146, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    '''\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 149, "duration": 10.601639032363892, "result": "passed", "passed": true}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 2:\n                return False\n        else:\n            count[num] = 1\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 114, "duration": 8.342191696166992, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.525895833969116, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]  # right, down, up, left\n    heap = []\n    for i in range(N):\n        for j in range(N):\n            heappush(heap, (grid[i][j], 1, [(grid[i][j], i, j)]))  # (value, path_len, path)\n    visited = set()\n\n    while heap:\n        value, path_len, path = heappop(heap)\n        if (path[-1][1], path[-1][2]) in visited and path_len != k:\n            continue\n        visited.add((path[-1][1], path[-1][2]))\n        if path_len == k:\n            return [p[0] for p in path]\n        for dx, dy in directions:\n            x, y = path[-1][1] + dx, path[-1][2] + dy\n            if 0 <= x < N and 0 <= y < N:\n                new_path = path + [(grid[x][y], x, y)]\n                heappush(heap, (value, path_len + 1, new_path))", "prompt_tokens": 446, "completion_tokens": 283, "duration": 21.41947889328003, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 1, "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 2]\n    \n    tribonacci = [3, 2]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            next_val = tribonacci[-1] + tribonacci[-2] + (1 + (i + 1) // 2)\n            tribonacci.append(next_val)\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 125, "duration": 12.824751138687134, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    \"\"\"\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 125, "duration": 9.492614507675171, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n        if balance >= 2:\n            return True\n    return False", "prompt_tokens": 183, "completion_tokens": 193, "duration": 15.617799520492554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 4.88249945640564, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) > 1 and txt[-2].isalpha():\n        return False\n    return True", "prompt_tokens": 187, "completion_tokens": 55, "duration": 6.175930738449097, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 5.716670036315918, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 80, "duration": 7.528598308563232, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 87, "duration": 8.212455034255981, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 49, "duration": 7.5086705684661865, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 70, "duration": 7.43923020362854, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    text = re.sub(r' {3,}', '-', text)  # Replace 3 or more consecutive spaces with -\n    text = text.replace(' ', '_')  # Replace all remaining spaces with _\n    return text", "prompt_tokens": 156, "completion_tokens": 101, "duration": 8.879679679870605, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Check all conditions using regular expression\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}[a-zA-Z0-9]*\\.(txt|exe|dll)$'\n    if re.fullmatch(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 264, "completion_tokens": 84, "duration": 8.330341815948486, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum([x**3 if i % 4 == 0 and i % 3 != 0 else x**2 if i % 3 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 55, "duration": 6.630475044250488, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "prompt_tokens": 197, "completion_tokens": 81, "duration": 9.048620223999023, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    result = x_frac * n_frac\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 48, "duration": 7.9944047927856445, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 81, "duration": 10.551202058792114, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_first_and_last_odd(n):\n        n_str = str(abs(n))\n        return int(n_str[0]) % 2 != 0 and int(n_str[-1]) % 2 != 0\n    \n    return sum(1 for num in nums if num > 10 and is_first_and_last_odd(num))", "prompt_tokens": 169, "completion_tokens": 76, "duration": 9.775675535202026, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the elements based on their mod 3 value\n    count_mod = [0, 0, 0]\n    for num in a:\n        count_mod[num % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Combining three numbers each of which gives the same remainder when divided by 3\n    # or combining three numbers with remainders 0, 1, and 2 respectively\n    return (count_mod[0] * (count_mod[0] - 1) * (count_mod[0] - 2) // 6) + \\\n           (count_mod[1] * (count_mod[1] - 1) * (count_mod[1] - 2) // 6) + \\\n           (count_mod[2] * (count_mod[2] - 1) * (count_mod[2] - 2) // 6) + \\\n           (count_mod[0] * count_mod[1] * count_mod[2])", "prompt_tokens": 215, "completion_tokens": 281, "duration": 18.876963138580322, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "prompt_tokens": 261, "completion_tokens": 121, "duration": 12.87853479385376, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Filtering out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sorting the list first alphabetically, then by length\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 237, "completion_tokens": 76, "duration": 9.684058427810669, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 7.863169193267822, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 34, "duration": 5.8557751178741455, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.679672718048096, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        return CAP - SM\n\n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 327, "completion_tokens": 78, "duration": 9.187983989715576, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 179, "completion_tokens": 59, "duration": 8.006552696228027, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 75, "duration": 12.419520854949951, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 252, "duration": 17.640607357025146, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 6.737193584442139, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    return max(sorted(words), key=lambda x: len(set(x)))", "prompt_tokens": 170, "completion_tokens": 23, "duration": 6.37529993057251, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 42, "duration": 6.8286826610565186, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i, op in enumerate(operator):\n        expression += f\" {op} {operand[i + 1]}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 50, "duration": 7.751308441162109, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 9.116584062576294, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    if not text:\n        return None\n    hash_object = hashlib.md5(text.encode())\n    return hash_object.hexdigest()", "prompt_tokens": 126, "completion_tokens": 45, "duration": 7.105177402496338, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 71, "duration": 8.549454927444458, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    numbers.sort()  # Sort the list to make comparison easier\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 174, "completion_tokens": 100, "duration": 5.863525152206421, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')  # Remove spaces from the string\n    stack = []\n    result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            current_group.append(char)\n            if not stack:  # When stack is empty, a group is complete\n                result.append(''.join(current_group))\n                current_group = []\n    return result", "prompt_tokens": 165, "completion_tokens": 131, "duration": 10.069965600967407, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.415926933288574, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.3240513801574707, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.36517071723938, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result", "prompt_tokens": 142, "completion_tokens": 65, "duration": 5.754338264465332, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 162, "completion_tokens": 201, "duration": 10.8449068069458, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]", "prompt_tokens": 143, "completion_tokens": 104, "duration": 9.396217823028564, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 65, "duration": 4.758231163024902, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for num in numbers[1:]:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "prompt_tokens": 150, "completion_tokens": 72, "duration": 5.2124717235565186, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 118, "duration": 6.5843377113342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 2.8703548908233643, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 81, "duration": 4.892841815948486, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.8341064453125, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 37, "duration": 3.337078332901001, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 118, "completion_tokens": 28, "duration": 2.4949095249176025, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3623576164245605, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 5.53599214553833, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.924618482589722, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 105, "duration": 7.42905855178833, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < min_diff:\n            min_diff = numbers[i+1] - numbers[i]\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 118, "duration": 6.497668266296387, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 105, "duration": 5.955613851547241, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 53, "duration": 4.368587970733643, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.2301719188690186, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 78, "duration": 4.417155981063843, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 79, "duration": 5.726637840270996, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 96, "duration": 6.188704967498779, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 2.6977694034576416, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.704251766204834, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 39, "duration": 2.6051394939422607, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 9.141416072845459, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 4.07520055770874, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(xs: list) -> list:\n        \"\"\"Calculates the derivative of a polynomial given its coefficients.\"\"\"\n        return [i * xs[i] for i in range(1, len(xs))]\n\n    def newton_raphson_method(coefficients, initial_guess=0.0, max_iterations=10000, tolerance=1e-7):\n        \"\"\"Finds a root of a polynomial using the Newton-Raphson method.\"\"\"\n        guess = initial_guess\n        for _ in range(max_iterations):\n            f_guess = poly(coefficients, guess)\n            f_prime_guess = poly(derivative(coefficients), guess)\n            if f_prime_guess == 0:  # Avoid division by zero\n                return guess\n            next_guess = guess - f_guess / f_prime_guess\n            if abs(next_guess - guess) < tolerance:\n                return next_guess\n            guess = next_guess\n        return guess\n\n    return newton_raphson_method(xs)", "prompt_tokens": 309, "completion_tokens": 362, "duration": 20.952109813690186, "result": "passed", "passed": true}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three_elements_sorted = sorted(divisible_by_three_elements)\n    # Replace elements in original list with sorted ones\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = divisible_by_three_elements_sorted.pop(0)\n    return l", "prompt_tokens": 200, "completion_tokens": 179, "duration": 8.83538007736206, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 77, "duration": 4.2632057666778564, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 4.986131191253662, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 5.454546213150024, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    even_indices_values = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices_values.sort()\n    return [even_indices_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.657270431518555, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 134, "duration": 7.776659250259399, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 1, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    fib_gen = fib()\n    count = 0\n    while True:\n        fib_number = next(fib_gen)\n        if is_prime(fib_number):\n            count += 1\n            if count == n:\n                return fib_number", "prompt_tokens": 147, "completion_tokens": 152, "duration": 7.4617297649383545, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        a = l[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False", "prompt_tokens": 209, "completion_tokens": 117, "duration": 5.867268085479736, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculates the number of collisions between two sets of cars, each set containing n cars,\n    moving towards each other on a straight line.\n\n    Parameters:\n    n (int): The number of cars in each set.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    return n**2", "prompt_tokens": 201, "completion_tokens": 81, "duration": 4.512811660766602, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 9.752895832061768, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 2.8663277626037598, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 59, "duration": 5.315738916397095, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 5.74955415725708, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.165939569473267, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.176158905029297, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 80, "duration": 6.092458963394165, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.806905508041382, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 4.547531604766846, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 58, "duration": 3.865807294845581, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 3.015895128250122, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 7.408296346664429, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.6452887058258057, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 4.926467418670654, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack += 1\n        elif bracket == \">\":\n            stack -= 1\n            if stack < 0:\n                return False\n    return stack == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 4.395784139633179, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.4977123737335205, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 40, "duration": 3.0806970596313477, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    prime_factor = 1\n    i = 2\n    \n    while i <= n**0.5 or n == 2:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n /= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n    \n    return int(prime_factor)", "prompt_tokens": 113, "completion_tokens": 159, "duration": 9.056618928909302, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 46, "duration": 4.6212992668151855, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 67, "duration": 4.136567115783691, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6894848346710205, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c", "prompt_tokens": 199, "completion_tokens": 100, "duration": 7.501265525817871, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.lower().endswith('y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"rhythm\"))  # 0\nprint(vowels_count(\"SYZYGY\"))  # 1\nprint(vowels_count(\"quickly\"))  # 2", "prompt_tokens": 176, "completion_tokens": 139, "duration": 10.590349435806274, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift >= len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 4.1048290729522705, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.519407272338867, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    nums = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(nums)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.075874090194702, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n    \"\"\"\n    min_even = float('inf')\n    index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < min_even:\n            min_even = value\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [min_even, index]", "prompt_tokens": 362, "completion_tokens": 188, "duration": 11.267112493515015, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    valid_numbers = [num for num in count if count[num] >= num]\n    return max(valid_numbers) if valid_numbers else -1", "prompt_tokens": 215, "completion_tokens": 50, "duration": 3.089937448501587, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.013467073440552, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 222, "duration": 11.507371664047241, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.1178014278411865, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 4.006330728530884, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list.\n    If the two lists have the same number of chars, return the first list.\n    '''\n    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 100, "duration": 5.170660495758057, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2:\n        return False\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            while a % i == 0:\n                a //= i\n    return prime_factors == 3", "prompt_tokens": 129, "completion_tokens": 136, "duration": 9.14966630935669, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 4.261970520019531, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    root = abs(a) ** (1/3)\n    return int(round(root)) ** 3 == abs(a)", "prompt_tokens": 160, "completion_tokens": 34, "duration": 2.9256913661956787, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = set('2357BD')\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 36, "duration": 4.601905584335327, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_string = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_string}db\"", "prompt_tokens": 189, "completion_tokens": 44, "duration": 3.0204286575317383, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 57, "duration": 4.659956693649292, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 235, "duration": 11.897135972976685, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.866314172744751, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # Only one such number when n = 1, which is 1 itself\n    else:\n        # Count = numbers starting with 1 + numbers ending with 1 - numbers both starting and ending with 1\n        # There are 9*(10**(n-2)) numbers both starting and ending with 1, as the middle digits can be anything.\n        return 2 * (10**(n-1)) - 9 * (10**(n-2))", "prompt_tokens": 94, "completion_tokens": 152, "duration": 8.23445725440979, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum([int(digit) for digit in str(N)])\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 34, "duration": 2.5891923904418945, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.9200329780578613, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Reorders each word in the string based on the ascending ASCII values of its characters.\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 49, "duration": 3.656792163848877, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append((i, j))\n    # Sort by row ascending, then by column descending\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords", "prompt_tokens": 309, "completion_tokens": 166, "duration": 9.15028429031372, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \"\"\"\n    if not array:  # If the array is empty, return an empty array.\n        return array\n    sum_of_first_last = array[0] + array[-1]\n    if sum_of_first_last % 2 == 0:  # If the sum is even, sort in descending order.\n        return sorted(array, reverse=True)\n    else:  # If the sum is odd, sort in ascending order.\n        return sorted(array)", "prompt_tokens": 253, "completion_tokens": 171, "duration": 7.986722946166992, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 160, "completion_tokens": 102, "duration": 6.202141046524048, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element in a list of integers or None if it doesn't exist.\n    \"\"\"\n    unique_sorted_list = sorted(set(lst))\n    if len(unique_sorted_list) < 2:\n        return None\n    return unique_sorted_list[1]", "prompt_tokens": 174, "completion_tokens": 67, "duration": 6.915165185928345, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Splitting the string into sentences\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    # Counting sentences that start with \"I \" or \"I'm\"\n    count = sum(1 for sentence in sentences if sentence.strip().startswith('I '))\n    return count", "prompt_tokens": 157, "completion_tokens": 116, "duration": 8.530887126922607, "result": "passed", "passed": true}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 185, "completion_tokens": 101, "duration": 7.168181657791138, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case and replacing vowels.\n    \"\"\"\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            # Find the index of the vowel in the alphabet\n            alphabet = 'abcdefghijklmnopqrstuvwxyz'\n            char_lower = char.lower()  # Convert to lowercase to handle uppercase vowels\n            index = alphabet.index(char_lower)\n            # Calculate the new index, considering the circular nature of the alphabet\n            new_index = (index + 2) % 26\n            new_char = alphabet[new_index]\n            # Preserve the original case\n            if char.isupper():\n                return new_char.upper()\n            else:\n                return new_char\n        else:\n            return char\n\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            swapped_char = swap_case(char)\n            replaced_char = replace_vowel(swapped_char)\n            encoded_message += replaced_char\n        else:\n            encoded_message += char\n\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 242, "duration": 10.827568054199219, "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "prompt_tokens": 336, "completion_tokens": 111, "duration": 6.8000452518463135, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(k, str) and k.islower() for k in dict)\n    all_upper = all(isinstance(k, str) and k.isupper() for k in dict)\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 67, "duration": 5.4458723068237305, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]", "prompt_tokens": 195, "completion_tokens": 82, "duration": 4.144302606582642, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 4.517662286758423, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)", "prompt_tokens": 122, "completion_tokens": 63, "duration": 5.923205614089966, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        if num - int(num) < 0.5:\n            return int(num)\n        else:\n            return int(num) + 1\n    else:\n        if abs(num) - abs(int(num)) < 0.5:\n            return int(num)\n        else:\n            return int(num) - 1", "prompt_tokens": 206, "completion_tokens": 88, "duration": 4.2990782260894775, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 25, "duration": 4.378433704376221, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 6.832147836685181, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"Returns the biggest even integer in the range [x, y] inclusive, or -1 if no such number exists.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 70, "duration": 6.025339365005493, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 5.4028308391571045, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    # Filter elements that don't contain even digits\n    filtered = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    # Return the sorted list of filtered elements\n    return sorted(filtered)", "prompt_tokens": 152, "completion_tokens": 102, "duration": 7.4197797775268555, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_word[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 105, "duration": 9.411033391952515, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    \"\"\"\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    \n    return result", "prompt_tokens": 174, "completion_tokens": 175, "duration": 12.298518180847168, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 100, "duration": 7.395009994506836, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n))) if n >= 0 else -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n    return sum(1 for x in arr if sum_digits(x) > 0)", "prompt_tokens": 174, "completion_tokens": 72, "duration": 7.929291248321533, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:  # If array is empty\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            count += 1\n            if count > 1:\n                return False\n    if count == 0:\n        return True\n    return arr[0] >= arr[-1]", "prompt_tokens": 349, "completion_tokens": 98, "duration": 6.926426649093628, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines whether it is possible to perform an exchange of elements\n    between lst1 and lst2 to make lst1 a list of only even numbers.\n    \"\"\"\n    # Count the number of even numbers in lst1 and odd numbers in lst2\n    even_in_lst1 = sum(1 for x in lst1 if x % 2 == 0)\n    odd_in_lst2 = sum(1 for x in lst2 if x % 2 != 0)\n\n    # If the number of odd numbers in lst1 is greater than the number of odd numbers in lst2, return \"NO\"\n    if len(lst1) - even_in_lst1 > odd_in_lst2:\n        return \"NO\"\n    else:\n        return \"YES\"", "prompt_tokens": 247, "completion_tokens": 168, "duration": 12.033640384674072, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    words = test.split()\n    count = {}\n    for word in words:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    max_count = max(count.values(), default=0)\n    return {k: v for k, v in count.items() if v == max_count}", "prompt_tokens": 201, "completion_tokens": 81, "duration": 7.278455972671509, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 4.831895589828491, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 80, "duration": 7.667966842651367, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.181019306182861, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(row.count(1) for row in grid)\n    import math\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 373, "completion_tokens": 41, "duration": 6.1018311977386475, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers based on the number of ones in their binary representation.\n    In case of a tie, it sorts based on the decimal values.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 65, "duration": 7.704304456710815, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() in 'bcdfghjklmnpqrstvwxyz')\n    \n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 66, "duration": 6.092263460159302, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 6.426270246505737, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    '''\n    Given a list of two strings consisting of parentheses, check if it is possible to\n    concatenate them in some order to form a balanced string.\n\n    :param lst: List[str] - A list of two strings, each containing only '(' or ')'\n    :return: str - 'Yes' if it's possible to form a balanced string, 'No' otherwise.\n    '''\n    first, second = lst\n    if first.count('(') == second.count(')') or first.count(')') == second.count('('):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 131, "duration": 9.648630857467651, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 6.136873722076416, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 37, "duration": 6.113229036331177, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 <= abs(x) < 100)", "prompt_tokens": 178, "completion_tokens": 72, "duration": 8.557146072387695, "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Collatz sequence always ends with 1.\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 113, "duration": 9.660794973373413, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into parts\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if parts are integers\n    try:\n        month, day, year = int(parts[0]), int(parts[1]), int(parts[2])\n    except ValueError:\n        return False\n    \n    # Check the range of month and day\n    if month < 1 or month > 12:\n        return False\n    \n    # Define the maximum days per month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_days = 31\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:  # February\n        max_days = 29\n    \n    if day < 1 or day > max_days:\n        return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 239, "duration": 15.85520339012146, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = sum(1 for c in txt if ord(c) % 2 != 0)\n        return odd_count", "prompt_tokens": 190, "completion_tokens": 62, "duration": 7.475714921951294, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        counts = {x: lst.count(x) for x in lst}\n        if any(v > 2 for v in counts.values()):\n            return False\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 58, "duration": 7.3821985721588135, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.760860443115234, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    heap = []\n    for i in range(N):\n        for j in range(N):\n            heappush(heap, (grid[i][j], 1, [(grid[i][j], i, j)]))\n    \n    while heap:\n        val, length, path = heappop(heap)\n        if length == k:\n            return [grid[i][j] for _, i, j in path]\n        for dx, dy in directions:\n            x, y = path[-1][1], path[-1][2]\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                newPath = path + [(grid[nx][ny], nx, ny)]\n                heappush(heap, (newPath[-1][0], length + 1, newPath))", "prompt_tokens": 446, "completion_tokens": 229, "duration": 14.213589429855347, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    sequence = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            next_value = sequence[-1] + sequence[-2] + sequence[0] if i == 3 else sequence[-1] + sequence[-2] + sequence[i-1]\n            sequence.append(next_value)\n    return sequence", "prompt_tokens": 285, "completion_tokens": 130, "duration": 10.766379833221436, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.6875083446502686, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    depth = 0\n    for char in string:\n        if char == '[':\n            depth += 1\n        elif char == ']':\n            depth -= 1\n        if depth > 1:\n            return True\n        if depth < 0:\n            return False\n    return False", "prompt_tokens": 183, "completion_tokens": 71, "duration": 7.805450439453125, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 6.405585289001465, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    return txt[-1].isalpha() and txt[-2].isspace()", "prompt_tokens": 187, "completion_tokens": 158, "duration": 12.221259355545044, "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 9.658996343612671, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    neg_int = [x for x in lst if x < 0]\n    pos_int = [x for x in lst if x > 0]\n    return (max(neg_int) if neg_int else None, min(pos_int) if pos_int else None)", "prompt_tokens": 188, "completion_tokens": 68, "duration": 7.850949048995972, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_val, b_val = convert(a), convert(b)\n    \n    if a_val == b_val:\n        return None\n    elif a_val > b_val:\n        return a\n    else:\n        return b", "prompt_tokens": 191, "completion_tokens": 82, "duration": 7.870300531387329, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such sum.\n    if n < 8:\n        return False\n    # For a number to be written as the sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be written as a sum of four even numbers.\n    return n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 140, "duration": 11.473756551742554, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 68, "duration": 8.473223686218262, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    text = re.sub(r' {3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 82, "duration": 11.004373550415039, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex to match the file name conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{2}[0-9]{0,3}\\.[txt|exe|dll]{3}$'\n    return 'Yes' if re.match(pattern, file_name) else 'No'", "prompt_tokens": 264, "completion_tokens": 85, "duration": 8.52440595626831, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 8.996315956115723, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    \"\"\"\n    Extracts words from the sentence whose lengths are prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 113, "duration": 10.992891073226929, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 6.747984170913696, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 35, "duration": 6.574664354324341, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_ten(n):\n        str_n = str(abs(n))\n        return n > 10 and int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n    \n    return sum(1 for num in nums if is_odd_and_greater_than_ten(num))", "prompt_tokens": 169, "completion_tokens": 78, "duration": 7.166527271270752, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    # Generate the array based on given formula\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    # Count of triples\n    count = 0\n    \n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                # Check if the sum of the triple is divisible by 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 215, "completion_tokens": 140, "duration": 15.25611162185669, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "prompt_tokens": 261, "completion_tokens": 122, "duration": 11.347753286361694, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    sorted_lst = sorted(filtered_lst, key=lambda s: (len(s), s))\n    return sorted_lst", "prompt_tokens": 237, "completion_tokens": 76, "duration": 8.019057750701904, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 62, "duration": 8.441689252853394, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)", "prompt_tokens": 187, "completion_tokens": 159, "duration": 15.829116821289062, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.782623052597046, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 327, "completion_tokens": 80, "duration": 7.64286732673645, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]  # rotate b\n    return False", "prompt_tokens": 179, "completion_tokens": 64, "duration": 9.096507787704468, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))  # Convert the number to string and make it positive\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)  # Count even digits\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)  # Count odd digits\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 99, "duration": 10.23304533958435, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 203, "duration": 15.495078563690186, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 137, "duration": 11.577799558639526, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    \"\"\"\n    Finds the word with the maximum number of unique characters.\n    If multiple words have the same number, returns the lexicographically first one.\n    \"\"\"\n    return min((word for word in sorted(words)), key=lambda x: (-len(set(x)), x))", "prompt_tokens": 170, "completion_tokens": 64, "duration": 9.312575101852417, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 42, "duration": 7.8199663162231445, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += ' ' + operator[i] + ' ' + str(operand[i + 1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 111, "duration": 8.948600769042969, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 8.764104843139648, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 96, "duration": 10.29916763305664, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 71, "duration": 8.509052753448486, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 4.814969062805176, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group.append(char)\n                if not stack:  # If stack is empty, we've closed a group\n                    result.append(\"\".join(current_group))\n                    current_group = []\n    return result", "prompt_tokens": 165, "completion_tokens": 131, "duration": 7.327171564102173, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 1.9488534927368164, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.454486608505249, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.1187033653259277, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.658391237258911, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 162, "completion_tokens": 114, "duration": 10.491912364959717, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [string for string in strings if substring in string]", "prompt_tokens": 143, "completion_tokens": 56, "duration": 3.354473352432251, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers", "prompt_tokens": 160, "completion_tokens": 64, "duration": 4.195628881454468, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    max_list = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    return max_list", "prompt_tokens": 150, "completion_tokens": 93, "duration": 14.401994466781616, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 118, "duration": 6.5843377113342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 2.9129762649536133, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.7397007942199707, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.3343422412872314, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 109, "completion_tokens": 78, "duration": 4.363313436508179, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.6749536991119385, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.2086007595062256, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes_map = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i:i+2] in notes_map:  # checks for 'o|' and '.|'\n            result.append(notes_map[music_string[i:i+2]])\n            i += 2\n        elif music_string[i] in notes_map:  # checks for 'o'\n            result.append(notes_map[music_string[i]])\n            i += 1\n        else:\n            i += 1  # skips spaces\n    return result", "prompt_tokens": 222, "completion_tokens": 160, "duration": 8.028116226196289, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 8.09266209602356, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 105, "duration": 6.228209972381592, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 119, "duration": 10.70905876159668, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 63, "duration": 4.155231475830078, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.472437143325806, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.022937297821045, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.280451774597168, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while (n % divisor) == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 82, "duration": 6.345757246017456, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    from collections import Counter\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "prompt_tokens": 134, "completion_tokens": 49, "duration": 3.9164326190948486, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.76786208152771, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 5.448589086532593, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 82, "duration": 5.35576868057251, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 2.4599852561950684, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.8211145401000977, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 8, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    return fsolve(lambda x: poly(xs, x), 0)[0]", "prompt_tokens": 309, "completion_tokens": 190, "duration": 20.913021326065063, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    indices_divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    indices_divisible_by_three.sort()\n    \n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = indices_divisible_by_three[j]\n            j += 1\n            \n    return l", "prompt_tokens": 200, "completion_tokens": 158, "duration": 10.191901206970215, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.8464164733886719, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 6.632399559020996, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 4.17240309715271, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values.pop(0)\n    return l", "prompt_tokens": 173, "completion_tokens": 67, "duration": 4.660116195678711, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 103, "duration": 6.750247478485107, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    found = 0\n    i = 0\n    while found < n:\n        i += 1\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            found += 1\n    return fib_num", "prompt_tokens": 147, "completion_tokens": 156, "duration": 9.61155104637146, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    l_len = len(l)\n    for i in range(l_len-2):\n        for j in range(i+1, l_len-1):\n            for k in range(j+1, l_len):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 81, "duration": 5.911118030548096, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since every car moving left to right will inevitably collide with each car moving right to left,\n    the total number of collisions will be the product of the number of cars in each set.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 63, "duration": 4.7682929039001465, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 15.992332696914673, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.4600718021392822, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.039748191833496, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.4021999835968018, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 7.716187000274658, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2.0", "prompt_tokens": 125, "completion_tokens": 63, "duration": 8.576449394226074, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 80, "duration": 5.671098709106445, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.585334539413452, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 65, "duration": 5.6312642097473145, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 58, "duration": 3.9107272624969482, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 45, "duration": 3.646873950958252, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 8.008532047271729, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.5824995040893555, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.099579811096191, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.342074394226074, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.942690372467041, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.118938446044922, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(x):\n        if x <= 1:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    \n    prime_factor = 1\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            prime_factor = i\n            n = n // i\n        if n == 1:\n            break\n    if n > 1 and is_prime(n):\n        prime_factor = n\n    return prime_factor", "prompt_tokens": 113, "completion_tokens": 169, "duration": 10.55178952217102, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.8594865798950195, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.804905414581299, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.312058687210083, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 96, "duration": 5.508849620819092, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    \"\"\"\n    Count the number of vowels in a string, considering 'y' as a vowel only if it is at the end of the string.\n    \"\"\"\n    count = 0\n    vowels = \"aeiouAEIOU\"\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"python\"))  # 1\nprint(vowels_count(\"fly\"))  # 1\nprint(vowels_count(\"Y\"))  # 1", "prompt_tokens": 176, "completion_tokens": 169, "duration": 12.168901443481445, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift >= length:\n        return x_str[::-1]\n    shift %= length\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 56, "duration": 3.7853829860687256, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.623070001602173, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.189210891723633, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))\n\n# Example usage\nprint(pluck([4,2,3]))  # Output: [2, 1]\nprint(pluck([1,2,3]))  # Output: [2, 1]\nprint(pluck([]))  # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]", "prompt_tokens": 362, "completion_tokens": 142, "duration": 8.030111074447632, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    # Count the frequency of each element\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Find the greatest integer that meets the condition\n    max_val = -1\n    for num, count in freq.items():\n        if num <= count and num > max_val:\n            max_val = num\n\n    return max_val", "prompt_tokens": 215, "completion_tokens": 101, "duration": 6.88358473777771, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst_sorted = sorted(lst)\n    result = []\n    while lst_sorted:\n        result.append(lst_sorted.pop(0))\n        if lst_sorted:\n            result.append(lst_sorted.pop(-1))\n    return result", "prompt_tokens": 174, "completion_tokens": 53, "duration": 4.253214120864868, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 89, "duration": 4.688853025436401, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.516024112701416, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 68, "duration": 4.877672433853149, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has total number of chars in all strings of the list less than the other list.\n    If the two lists have the same number of chars, return the first list.\n    '''\n    count_lst1 = sum(len(item) for item in lst1)\n    count_lst2 = sum(len(item) for item in lst2)\n\n    if count_lst1 < count_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 116, "duration": 9.095982074737549, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 137, "duration": 9.098172903060913, "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 4.261970520019531, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    if a >= 0:\n        return round(a ** (1/3)) ** 3 == a\n    else:\n        return round(abs(a) ** (1/3)) ** 3 == abs(a)", "prompt_tokens": 160, "completion_tokens": 54, "duration": 5.048715829849243, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = set('2357BD')\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 36, "duration": 2.8843770027160645, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "prompt_tokens": 189, "completion_tokens": 44, "duration": 4.07654881477356, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 80, "duration": 4.601515054702759, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Converts a list of numeric grades to their corresponding letter grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 269, "duration": 16.5719051361084, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.594987392425537, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        return 2 * (10 ** (n - 1)) - 2 * (9 ** (n - 1))", "prompt_tokens": 94, "completion_tokens": 52, "duration": 4.161189317703247, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum([int(digit) for digit in str(N)])\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 52, "duration": 3.763606548309326, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 82, "duration": 7.497905492782593, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.7834129333496094, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    results = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                results.append((i, j))\n    # Sorting by row in ascending order, then by column in descending order\n    results.sort(key=lambda tup: (tup[0], -tup[1]))\n    return results", "prompt_tokens": 309, "completion_tokens": 164, "duration": 7.63139796257019, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 55, "duration": 4.61114501953125, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = 4  # Rotate by 2 * 2 places\n            if char.islower():\n                encrypted += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                encrypted += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 160, "completion_tokens": 103, "duration": 7.592275142669678, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    return unique_sorted_lst[1] if len(unique_sorted_lst) > 1 else None", "prompt_tokens": 174, "completion_tokens": 39, "duration": 4.190107822418213, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of sentences starting with \"I\".\n    \"\"\"\n    sentences = [s.strip() for s in S.replace('?', '.').replace('!', '.').split('.')]\n    return sum(s.startswith(\"I\") for s in sentences if s)", "prompt_tokens": 157, "completion_tokens": 94, "duration": 5.78433632850647, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.897913932800293, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case and replacing vowels.\n    \"\"\"\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            # Find the index of the vowel in the alphabet\n            alphabet = 'abcdefghijklmnopqrstuvwxyz'\n            char_lower = char.lower()  # Convert to lowercase to handle uppercase vowels\n            index = alphabet.index(char_lower)\n            # Calculate the new index, considering the circular nature of the alphabet\n            new_index = (index + 2) % 26\n            new_char = alphabet[new_index]\n            # Preserve the original case\n            if char.isupper():\n                return new_char.upper()\n            else:\n                return new_char\n        else:\n            return char\n\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            swapped_char = swap_case(char)\n            replaced_char = replace_vowel(swapped_char)\n            encoded_message += replaced_char\n        else:\n            encoded_message += char\n\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 242, "duration": 10.827568054199219, "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 5, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sum([int(digit) for digit in str(largest_prime)])", "prompt_tokens": 336, "completion_tokens": 112, "duration": 5.940928936004639, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(d):\n    if not d or not all(isinstance(key, str) for key in d):\n        return False\n    are_all_lower = all(key.islower() for key in d if isinstance(key, str))\n    are_all_upper = all(key.isupper() for key in d if isinstance(key, str))\n    return are_all_lower or are_all_upper", "prompt_tokens": 219, "completion_tokens": 81, "duration": 5.4894700050354, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 7.680834770202637, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.9330990314483643, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "prompt_tokens": 122, "completion_tokens": 62, "duration": 4.071497201919556, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        if num - int(num) < 0.5:\n            return int(num)\n        else:\n            return int(num) + 1\n    else:\n        if num - int(num) > -0.5:\n            return int(num)\n        else:\n            return int(num) - 1", "prompt_tokens": 206, "completion_tokens": 85, "duration": 6.886923551559448, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.0174098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 49, "duration": 4.480172157287598, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 125, "duration": 8.586742162704468, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.561617374420166, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    def has_no_even_digit(n):\n        return all(int(digit) % 2 != 0 for digit in str(n))\n    \n    return sorted(filter(has_no_even_digit, x))", "prompt_tokens": 152, "completion_tokens": 48, "duration": 4.535238742828369, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_word[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 105, "duration": 7.284886360168457, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # even\n            result.append(factorial(i))\n        else:  # odd\n            result.append(sum_to_x(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 113, "duration": 7.864172697067261, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 99, "duration": 9.287688255310059, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    \"\"\"\n    Count the number of elements in an array for which the sum of its digits is greater than 0.\n    \"\"\"\n    def sum_of_digits(n):\n        \"\"\"\n        Calculate the sum of digits of an integer, considering the sign of the first digit if negative.\n        \"\"\"\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(digit) for digit in str(n)[2:])\n        else:\n            return sum(int(digit) for digit in str(n))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 132, "duration": 10.220707654953003, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "prompt_tokens": 349, "completion_tokens": 58, "duration": 8.516769170761108, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    odd_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_lst1 <= even_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 79, "duration": 8.165547609329224, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    if not test:\n        return {}\n    \n    words = test.split()\n    counter = {}\n    \n    for word in words:\n        counter[word] = counter.get(word, 0) + 1\n    \n    max_count = max(counter.values())\n    \n    return {word: count for word, count in counter.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 79, "duration": 7.811152219772339, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result_string = ''.join([char for char in s if char not in c])\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)", "prompt_tokens": 212, "completion_tokens": 52, "duration": 5.9505088329315186, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 75, "duration": 8.500503301620483, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 135, "duration": 10.537280797958374, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_units = sum(row.count(1) for row in grid)\n    return math.ceil(total_units / capacity)", "prompt_tokens": 373, "completion_tokens": 39, "duration": 4.75900673866272, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers based on the number of ones in their binary representation, then by their decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 56, "duration": 6.980501413345337, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "prompt_tokens": 231, "completion_tokens": 64, "duration": 6.603402376174927, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels and i != 0 and i != len(word) - 1:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 90, "duration": 7.486766576766968, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    first, second = lst\n    if first.count('(') >= second.count(')') and first.count(')') <= second.count('('):\n        return 'Yes'\n    if second.count('(') >= first.count(')') and second.count(')') <= first.count('('):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 79, "duration": 8.326421737670898, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 7.984682559967041, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 6.414278984069824, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 3, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 < x < 100)", "prompt_tokens": 178, "completion_tokens": 70, "duration": 7.652598142623901, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 at the end, as the sequence always ends with 1.\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 120, "duration": 10.973882913589478, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into components\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if month, day, and year are digits\n    if not (parts[0].isdigit() and parts[1].isdigit() and parts[2].isdigit()):\n        return False\n    \n    month, day, year = int(parts[0]), int(parts[1]), int(parts[2])\n    \n    # Check month range\n    if month < 1 or month > 12:\n        return False\n    \n    # Check day range based on month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 269, "duration": 23.858283758163452, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 0)", "prompt_tokens": 190, "completion_tokens": 66, "duration": 9.35186219215393, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    # Check for duplicates\n    if len(lst) != len(set(lst)):\n        counter = {}\n        for number in lst:\n            if number in counter:\n                counter[number] += 1\n                if counter[number] > 2:\n                    return False\n            else:\n                counter[number] = 1\n    # Check if list is sorted\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 88, "duration": 7.61109471321106, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    prod_sign = 1\n    sum_magnitudes = 0\n    for num in arr:\n        sum_magnitudes += abs(num)\n        if num < 0:\n            prod_sign *= -1\n        elif num == 0:\n            prod_sign = 0\n            break\n    return sum_magnitudes * prod_sign", "prompt_tokens": 172, "completion_tokens": 91, "duration": 9.770333528518677, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    value_to_pos = {grid[i][j]: (i, j) for i in range(N) for j in range(N)}\n    heap = [(0, value, [value]) for value in range(1, N * N + 1)]\n    visited = set()\n\n    while heap:\n        cost, value, path = heappop(heap)\n        if len(path) == k:\n            return path\n        if (value, len(path)) in visited:\n            continue\n        visited.add((value, len(path)))\n        i, j = value_to_pos[value]\n        for di, dj in moves:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < N and 0 <= nj < N:\n                next_value = grid[ni][nj]\n                new_path = path + [next_value]\n                heappush(heap, (cost + next_value, next_value, new_path))", "prompt_tokens": 446, "completion_tokens": 249, "duration": 18.976919412612915, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 1, "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 2]\n    \n    tribonacci = [3, 2]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            next_val = tribonacci[-1] + tribonacci[-2] + (1 + (i + 1) // 2)\n            tribonacci.append(next_val)\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 125, "duration": 12.824751138687134, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    all_even = True\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            all_even = False\n        n //= 10\n    return product if not all_even else 0", "prompt_tokens": 121, "completion_tokens": 73, "duration": 10.939483642578125, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n        if balance >= 2:\n            return True\n    return False", "prompt_tokens": 183, "completion_tokens": 193, "duration": 15.617799520492554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.618016242980957, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.endswith(' ') == False and txt[-1:].isalpha() and (len(txt) == 1 or txt[-2] == ' ')", "prompt_tokens": 187, "completion_tokens": 46, "duration": 6.1157262325286865, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 46, "duration": 6.0636537075042725, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 80, "duration": 7.315985202789307, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    def parse_value(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            return float(value)\n        return value\n\n    a_parsed = parse_value(a)\n    b_parsed = parse_value(b)\n\n    if a_parsed > b_parsed:\n        return a\n    elif b_parsed > a_parsed:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 151, "duration": 10.917685508728027, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Check if n is less than the smallest possible sum of 4 positive even numbers, which is 2+2+2+2=8\n    if n < 8:\n        return False\n    # If n is greater than or equal to 8, check if n is even. Only even numbers can be written as the sum of 4 even numbers.\n    return n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 121, "duration": 30.209633588790894, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 75, "duration": 11.64385199546814, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    text = re.sub(r' {3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 82, "duration": 11.004373550415039, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 4, "generated_code": "def file_name_check(file_name):\n    import re\n    # Regex to match the conditions\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{0,2}\\.[txt|exe|dll]{3}$'\n    # Check if the file name matches the pattern and does not contain more than three digits\n    if re.match(pattern, file_name) and len(re.findall(r'\\d', file_name)) <= 3:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 264, "completion_tokens": 116, "duration": 10.755328893661499, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 6.409059047698975, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 101, "duration": 9.537988662719727, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    \n    # Convert the string representations to Fraction objects\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    \n    # Multiply the fractions\n    result = x_fraction * n_fraction\n    \n    # Check if the result is a whole number\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 76, "duration": 8.130373001098633, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 81, "duration": 8.159808874130249, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_odd(n):\n        return int(str(n)[0]) % 2 != 0 and int(str(n)[-1]) % 2 != 0\n    return sum(1 for num in nums if num > 10 and is_odd(num))", "prompt_tokens": 169, "completion_tokens": 62, "duration": 14.110383987426758, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Create the array based on given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the number of triples\n    triples_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triples_count += 1\n                    \n    return triples_count", "prompt_tokens": 215, "completion_tokens": 202, "duration": 20.475975513458252, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets.index(planet1), planets.index(planet2)) + 1\n    end = max(planets.index(planet1), planets.index(planet2))\n    return tuple(planets[start:end])", "prompt_tokens": 261, "completion_tokens": 111, "duration": 11.851227521896362, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically if lengths are the same\n    filtered_sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return filtered_sorted_lst", "prompt_tokens": 237, "completion_tokens": 85, "duration": 8.547521352767944, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.010945796966553, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 40, "duration": 6.969480276107788, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.062080383300781, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 327, "completion_tokens": 80, "duration": 9.05793833732605, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]  # rotate b\n    return False", "prompt_tokens": 179, "completion_tokens": 64, "duration": 9.096507787704468, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 75, "duration": 8.263220310211182, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 253, "duration": 17.165478944778442, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 137, "duration": 10.570029258728027, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    return max(sorted(words), key=lambda x: len(set(x)))", "prompt_tokens": 170, "completion_tokens": 23, "duration": 6.37529993057251, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 42, "duration": 6.503498077392578, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f\" {op} {num}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 87, "duration": 10.327767610549927, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 8.30483889579773, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 96, "duration": 8.531377077102661, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 71, "duration": 10.795908451080322, "result": "failed: Test 1", "passed": false}
