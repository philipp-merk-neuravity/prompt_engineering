{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 7, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 828, "completion_tokens": 342, "duration": 11.738330602645874, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 8, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    result = []\n    open_count = 0\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            current_group += char\n        elif char == ')':\n            open_count -= 1\n            current_group += char\n            if open_count == 0:  # Group is balanced\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 931, "completion_tokens": 524, "duration": 18.514381647109985, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 3, "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 742, "completion_tokens": 302, "duration": 8.795564651489258, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 10, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 972, "completion_tokens": 482, "duration": 16.149096488952637, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 6, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 980, "completion_tokens": 490, "duration": 16.755462408065796, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 7, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers' \"\"\"\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 878, "completion_tokens": 473, "duration": 12.764004707336426, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": false, "solved_count": 6, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 1013, "completion_tokens": 598, "duration": 16.11967706680298, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": true, "solved_count": 8, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 792, "completion_tokens": 357, "duration": 11.256669998168945, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 6, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 777, "completion_tokens": 330, "duration": 10.459461688995361, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n    return result", "prompt_tokens": 1103, "completion_tokens": 690, "duration": 17.31095552444458, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "is_solved": false, "solved_count": 0, "generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]", "prompt_tokens": 1008, "completion_tokens": 478, "duration": 16.028092622756958, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 8, "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char1, char2 in zip(a, b):\n        xor_result = '1' if char1 != char2 else '0'\n        result += xor_result\n    return result", "prompt_tokens": 782, "completion_tokens": 387, "duration": 14.083664178848267, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 7, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 807, "completion_tokens": 337, "duration": 11.736839294433594, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": false, "solved_count": 8, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 802, "completion_tokens": 396, "duration": 15.072675704956055, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": false, "solved_count": 0, "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 757, "completion_tokens": 366, "duration": 16.31945824623108, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 5, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 723, "completion_tokens": 313, "duration": 10.111587285995483, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": false, "solved_count": 8, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 785, "completion_tokens": 363, "duration": 8.717796802520752, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 9, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = []\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations", "prompt_tokens": 951, "completion_tokens": 385, "duration": 17.131611824035645, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 10, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 857, "completion_tokens": 440, "duration": 11.510159015655518, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 7, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 847, "completion_tokens": 437, "duration": 12.772823572158813, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": false, "solved_count": 6, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    \n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "prompt_tokens": 1027, "completion_tokens": 552, "duration": 22.0698721408844, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 943, "completion_tokens": 450, "duration": 11.580421924591064, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 799, "completion_tokens": 363, "duration": 13.338967561721802, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": false, "solved_count": 4, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 738, "completion_tokens": 365, "duration": 12.377971410751343, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 8, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 779, "completion_tokens": 413, "duration": 9.872220277786255, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 10, "generated_code": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    # n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # while i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    # Condition if n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors", "prompt_tokens": 926, "completion_tokens": 601, "duration": 18.667764902114868, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": true, "solved_count": 7, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        elif number not in seen:\n            seen.add(number)\n    return result", "prompt_tokens": 749, "completion_tokens": 343, "duration": 12.50911569595337, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 6, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 704, "completion_tokens": 338, "duration": 11.601709127426147, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 6, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 748, "completion_tokens": 390, "duration": 16.385651350021362, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 7, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 780, "completion_tokens": 399, "duration": 11.112329244613647, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 5, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 788, "completion_tokens": 282, "duration": 11.439756393432617, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 10, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 917, "completion_tokens": 470, "duration": 18.34010624885559, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 3, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(xs):\n        return [coeff * i for i, coeff in enumerate(xs)][1:]\n    \n    def newton_method(xs, guess=0.0, max_iter=1000, tol=1e-10):\n        for _ in range(max_iter):\n            f_val = poly(xs, guess)\n            f_prime_val = poly(derivative(xs), guess)\n            if abs(f_val) < tol:\n                return guess\n            guess = guess - f_val / f_prime_val\n        return guess\n    \n    return newton_method(xs)", "prompt_tokens": 1133, "completion_tokens": 589, "duration": 27.080191612243652, "result": "passed", "passed": true}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 4, "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    thirds = [l[i] for i in range(len(l)) if i % 3 == 0]\n    thirds.sort()\n    \n    # Place sorted elements back at their original positions\n    index = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = thirds[index]\n            index += 1\n    return l", "prompt_tokens": 1057, "completion_tokens": 622, "duration": 16.90177011489868, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 5, "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))", "prompt_tokens": 722, "completion_tokens": 298, "duration": 11.798486471176147, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 5, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 700, "completion_tokens": 247, "duration": 6.4781153202056885, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": false, "solved_count": 4, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 829, "completion_tokens": 426, "duration": 10.841925859451294, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 7, "generated_code": "def sort_even(l: list):\n    even_indexed_elements = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(0, len(l), 2):\n        l[i] = even_indexed_elements.pop(0)\n    return l", "prompt_tokens": 903, "completion_tokens": 421, "duration": 11.098297595977783, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    returns decoded string by reversing the cycling of groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 913, "completion_tokens": 427, "duration": 18.49500346183777, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 9, "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n: int):\n    count = 0\n    fib_index = 2  # Starting from 2 because the 1st Fibonacci number (1) is not considered prime\n    while True:\n        fib_number = fibonacci(fib_index)\n        if is_prime(fib_number):\n            count += 1\n            if count == n:\n                return fib_number\n        fib_index += 1", "prompt_tokens": 870, "completion_tokens": 551, "duration": 18.10069179534912, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 10, "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 1202, "completion_tokens": 702, "duration": 23.062569856643677, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 6, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n cars moving left to right and n cars moving right to left on an infinitely long straight road,\n    this function calculates the total number of collisions that occur.\n    \"\"\"\n    # Since all cars move at the same speed and there are equal numbers of cars moving in opposite directions,\n    # each car moving left to right will collide with each car moving right to left.\n    # Therefore, the total number of collisions is simply the square of the number of cars in one direction.\n    return n * n", "prompt_tokens": 1025, "completion_tokens": 539, "duration": 16.305571794509888, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 5, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 764, "completion_tokens": 266, "duration": 8.86041522026062, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 10, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1110, "completion_tokens": 533, "duration": 16.442208766937256, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": false, "solved_count": 8, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 777, "completion_tokens": 349, "duration": 13.998230218887329, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 5, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 735, "completion_tokens": 360, "duration": 13.165628433227539, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": false, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    dp = [0, 0, 2, 0] + [0] * (n - 3)\n    for i in range(4, n + 1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n    return dp[n]", "prompt_tokens": 1164, "completion_tokens": 651, "duration": 21.542776107788086, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 8, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 789, "completion_tokens": 395, "duration": 11.763374090194702, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": false, "solved_count": 7, "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 800, "completion_tokens": 376, "duration": 11.707557201385498, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": false, "solved_count": 9, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 873, "completion_tokens": 402, "duration": 11.564805030822754, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 831, "completion_tokens": 408, "duration": 10.413379192352295, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 9, "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 872, "completion_tokens": 359, "duration": 11.18906283378601, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 7, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 791, "completion_tokens": 366, "duration": 9.426058292388916, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 5, "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 629, "completion_tokens": 241, "duration": 6.293833255767822, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 10, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 890, "completion_tokens": 336, "duration": 9.162338256835938, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 6, "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 802, "completion_tokens": 433, "duration": 10.501015901565552, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": false, "solved_count": 9, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 928, "completion_tokens": 508, "duration": 14.605282306671143, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 10, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 803, "completion_tokens": 385, "duration": 12.62326192855835, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 7, "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1).intersection(set(l2))))", "prompt_tokens": 842, "completion_tokens": 352, "duration": 12.216545343399048, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 5, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 874, "completion_tokens": 493, "duration": 16.820289134979248, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": false, "solved_count": 7, "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 885, "completion_tokens": 421, "duration": 14.690045833587646, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 10, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 1111, "completion_tokens": 690, "duration": 25.453962564468384, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": false, "solved_count": 6, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 835, "completion_tokens": 342, "duration": 13.762783288955688, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 10, "generated_code": "def fibfib(n: int) -> int:\n    memo = {0: 0, 1: 0, 2: 1}\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        memo[n] = helper(n-1) + helper(n-2) + helper(n-3)\n        return memo[n]\n    return helper(n)", "prompt_tokens": 1002, "completion_tokens": 482, "duration": 14.302664995193481, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": false, "solved_count": 8, "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "prompt_tokens": 897, "completion_tokens": 406, "duration": 12.068602561950684, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 8, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift > length:\n        return x_str[::-1]\n    shift %= length\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 785, "completion_tokens": 372, "duration": 13.251971244812012, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "is_solved": false, "solved_count": 9, "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 846, "completion_tokens": 341, "duration": 15.774950742721558, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 7, "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 1048, "completion_tokens": 358, "duration": 12.934429407119751, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 10, "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 1284, "completion_tokens": 435, "duration": 15.203699827194214, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": false, "solved_count": 8, "generated_code": "def search(lst):\n    counts = {}\n    for num in lst:\n        counts[num] = counts.get(num, 0) + 1\n    max_val = -1\n    for key, value in counts.items():\n        if key <= value and key > max_val:\n            max_val = key\n    return max_val", "prompt_tokens": 948, "completion_tokens": 385, "duration": 13.358366966247559, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 8, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 924, "completion_tokens": 415, "duration": 11.207665920257568, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": false, "solved_count": 9, "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 825, "completion_tokens": 476, "duration": 16.061264276504517, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 10, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1038, "completion_tokens": 301, "duration": 11.135007381439209, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": false, "solved_count": 7, "generated_code": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 1336, "completion_tokens": 930, "duration": 27.700889825820923, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 5, "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1018, "completion_tokens": 454, "duration": 12.987985610961914, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "is_solved": false, "solved_count": 7, "generated_code": "import math\n\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef is_multiply_prime(a):\n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 952, "completion_tokens": 609, "duration": 21.791120052337646, "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "is_solved": false, "solved_count": 8, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False", "prompt_tokens": 908, "completion_tokens": 376, "duration": 11.19752311706543, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 6, "generated_code": "def iscube(a):\n    return round(a ** (1/3)) ** 3 == a", "prompt_tokens": 818, "completion_tokens": 318, "duration": 10.304097414016724, "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "is_solved": false, "solved_count": 9, "generated_code": "def hex_key(num):\n    prime_hex_digits = '2357BD'\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1236, "completion_tokens": 382, "duration": 11.561817646026611, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": false, "solved_count": 6, "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return 'db' + binary + 'db'", "prompt_tokens": 984, "completion_tokens": 451, "duration": 14.840269327163696, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 10, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 966, "completion_tokens": 476, "duration": 15.235052347183228, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": false, "solved_count": 3, "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1261, "completion_tokens": 668, "duration": 25.944640398025513, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 9, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 831, "completion_tokens": 433, "duration": 15.80341649055481, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        return 2 * (10**(n-1)) - 9**(n-1)", "prompt_tokens": 777, "completion_tokens": 429, "duration": 12.740876913070679, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": false, "solved_count": 9, "generated_code": "def solve(N):\n    # Calculate the sum of digits\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    # Convert the sum to binary\n    binary_representation = bin(sum_of_digits)[2:]\n    return binary_representation", "prompt_tokens": 929, "completion_tokens": 414, "duration": 14.857218742370605, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 4, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 697, "completion_tokens": 320, "duration": 12.032191038131714, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": false, "solved_count": 6, "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 900, "completion_tokens": 481, "duration": 15.541497945785522, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 6, "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1167, "completion_tokens": 412, "duration": 14.351776361465454, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 7, "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 1026, "completion_tokens": 374, "duration": 15.505776643753052, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 10, "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        encrypted += chr((ord(char) - 97 + (2*2)) % 26 + 97)\n    return encrypted", "prompt_tokens": 865, "completion_tokens": 386, "duration": 10.766019821166992, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": false, "solved_count": 9, "generated_code": "def next_smallest(lst):\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    sorted_lst = sorted(unique_lst)\n    return sorted_lst[1]", "prompt_tokens": 901, "completion_tokens": 395, "duration": 11.360456943511963, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": false, "solved_count": 6, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences that start with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    count = 0\n    sentences = [s.strip() for s in S.replace('?', '.').replace('!', '.').split('.')]\n    for sentence in sentences:\n        if sentence.startswith('I '):\n            count += 1\n    return count", "prompt_tokens": 814, "completion_tokens": 388, "duration": 13.473627090454102, "result": "passed", "passed": true}
{"task_id": "HumanEval/92", "is_solved": false, "solved_count": 9, "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 883, "completion_tokens": 363, "duration": 12.62716794013977, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": false, "solved_count": 3, "generated_code": "def encode(message):\n    def swap_case(char):\n        if char.islower():\n            return char.upper()\n        else:\n            return char.lower()\n    \n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            return chr(((ord(char.lower()) - 97 + 2) % 26) + 97).upper() if char.isupper() else chr(((ord(char) - 97 + 2) % 26) + 97)\n        else:\n            return char\n    \n    return ''.join(replace_vowel(swap_case(char)) for char in message)", "prompt_tokens": 822, "completion_tokens": 432, "duration": 15.972311973571777, "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 9, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum(int(digit) for digit in str(max_prime))", "prompt_tokens": 1371, "completion_tokens": 604, "duration": 19.150439739227295, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": false, "solved_count": 9, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(key.islower() for key in dict if isinstance(key, str))\n    all_upper = all(key.isupper() for key in dict if isinstance(key, str))\n    return all_lower or all_upper", "prompt_tokens": 901, "completion_tokens": 323, "duration": 12.17684268951416, "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 10, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [num for num in range(2, n) if is_prime(num)]", "prompt_tokens": 1006, "completion_tokens": 492, "duration": 13.97974157333374, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 10, "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 811, "completion_tokens": 339, "duration": 15.268921136856079, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": false, "solved_count": 7, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 846, "completion_tokens": 472, "duration": 14.717519521713257, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 10, "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 979, "completion_tokens": 407, "duration": 11.073805809020996, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": true, "solved_count": 5, "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones = []\n    current_stone_count = n\n    for _ in range(n):\n        stones.append(current_stone_count)\n        if current_stone_count % 2 == 0:\n            current_stone_count += 2\n        else:\n            current_stone_count += 2\n    return stones", "prompt_tokens": 845, "completion_tokens": 449, "duration": 34.07316994667053, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": false, "solved_count": 6, "generated_code": "def words_string(s):\n    import re\n    return re.split(r',\\s*|\\s+', s)", "prompt_tokens": 818, "completion_tokens": 308, "duration": 10.35242223739624, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 10, "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 868, "completion_tokens": 500, "duration": 21.533291578292847, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": false, "solved_count": 8, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 962, "completion_tokens": 420, "duration": 13.075433492660522, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": false, "solved_count": 6, "generated_code": "def unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted([num for num in x if has_no_even_digit(num)])", "prompt_tokens": 852, "completion_tokens": 396, "duration": 15.098383903503418, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 7, "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    # Filter, sort, and reverse\n    filtered_sorted_reversed = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    \n    # Mapping of numbers to their names\n    num_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Replace each number with its corresponding name\n    return [num_to_name[num] for num in filtered_sorted_reversed]", "prompt_tokens": 1175, "completion_tokens": 531, "duration": 20.46310329437256, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 8, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n    \n    def sum_to_x(x):\n        return sum(range(1, x + 1))\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    return result", "prompt_tokens": 853, "completion_tokens": 422, "duration": 16.808264017105103, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 4, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1103, "completion_tokens": 475, "duration": 20.71807336807251, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 6, "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(map(int, str(n)[2:]))\n        else:\n            return sum(map(int, str(n)))\n    \n    return sum(1 for x in arr if sum_of_digits(x) > 0)", "prompt_tokens": 1335, "completion_tokens": 857, "duration": 25.4048433303833, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 10, "generated_code": "def move_one_ball(arr):\n    if not arr or sorted(arr) == arr:\n        return True\n    arr_sorted = sorted(arr)\n    for i in range(len(arr)):\n        if arr_sorted == arr[i:] + arr[:i]:\n            return True\n    return False", "prompt_tokens": 1332, "completion_tokens": 490, "duration": 17.335811138153076, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": true, "solved_count": 10, "generated_code": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1008, "completion_tokens": 575, "duration": 20.812319040298462, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": false, "solved_count": 6, "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values(), default=0)\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "prompt_tokens": 1062, "completion_tokens": 533, "duration": 22.672536373138428, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": false, "solved_count": 8, "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 1160, "completion_tokens": 570, "duration": 17.36424446105957, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 4, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 1048, "completion_tokens": 477, "duration": 13.231844902038574, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 10, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 1010, "completion_tokens": 589, "duration": 21.06756591796875, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": false, "solved_count": 9, "generated_code": "def max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n    \"\"\"\n    total_lowerings = 0\n    for row in grid:\n        water_units = sum(row)\n        if water_units > 0:\n            total_lowerings += -(-water_units // capacity)  # Ceiling division\n    return total_lowerings", "prompt_tokens": 1416, "completion_tokens": 617, "duration": 22.362701654434204, "result": "passed", "passed": true}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 4, "generated_code": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 995, "completion_tokens": 537, "duration": 18.53091073036194, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": false, "solved_count": 9, "generated_code": "def select_words(s, n):\n    def is_consonant(char):\n        return char.lower() in 'bcdfghjklmnpqrstvwxyz'\n    \n    def count_consonants(word):\n        return sum(is_consonant(char) for char in word)\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1005, "completion_tokens": 423, "duration": 17.199530363082886, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": false, "solved_count": 6, "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and not word[i+1] in vowels and not word[i-1] in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 920, "completion_tokens": 391, "duration": 11.99345588684082, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 10, "generated_code": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Count the balance of parentheses in both strings\n    balance1 = balance2 = 0\n    for char in lst[0]:\n        if char == '(':\n            balance1 += 1\n        else:\n            balance1 -= 1\n            if balance1 < 0:  # Early exit if first string becomes invalid\n                break\n    \n    for char in lst[1]:\n        if char == '(':\n            balance2 += 1\n        else:\n            balance2 -= 1\n            if balance2 < 0 and balance1 < 0:  # Early exit if both strings are invalid\n                return 'No'\n    \n    # If total balance is 0, it means we can potentially form a valid string\n    if balance1 + balance2 == 0:\n        # If first string has negative balance, it must come after the second string\n        if balance1 < 0:\n            return 'No'\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 1148, "completion_tokens": 880, "duration": 35.7312548160553, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 5, "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1056, "completion_tokens": 339, "duration": 11.095591306686401, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": false, "solved_count": 6, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 891, "completion_tokens": 430, "duration": 12.962157249450684, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": true, "solved_count": 8, "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 0 < abs(num) < 100)", "prompt_tokens": 1030, "completion_tokens": 502, "duration": 12.61875057220459, "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "is_solved": false, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always the last number in the sequence and is odd\n    return sorted(odd_numbers)", "prompt_tokens": 1299, "completion_tokens": 661, "duration": 16.690386533737183, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": false, "solved_count": 9, "generated_code": "def valid_date(date):\n    if not date or \"-\" not in date:\n        return False\n    parts = date.split(\"-\")\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    return True", "prompt_tokens": 1169, "completion_tokens": 533, "duration": 20.861061573028564, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": false, "solved_count": 6, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 912, "completion_tokens": 393, "duration": 12.218661308288574, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 9, "generated_code": "def is_sorted(lst):\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1] or lst.count(lst[i]) > 1:\n            return False\n    return True", "prompt_tokens": 1195, "completion_tokens": 442, "duration": 13.826164722442627, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 10, "generated_code": "def intersection(interval1, interval2):\n    import math\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start\n        if is_prime(length):\n            return \"YES\"\n    return \"NO\"", "prompt_tokens": 1254, "completion_tokens": 565, "duration": 17.333953380584717, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": false, "solved_count": 8, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "prompt_tokens": 1031, "completion_tokens": 564, "duration": 16.112194538116455, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "is_solved": false, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    pq = [(grid[i][j], i, j, k-1, [grid[i][j]]) for i in range(N) for j in range(N)]\n    visited = set()\n\n    while pq:\n        cost, x, y, steps, path = heappop(pq)\n        if (x, y, steps) in visited:\n            continue\n        visited.add((x, y, steps))\n        if steps == 0:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                heappush(pq, (cost, nx, ny, steps-1, path + [grid[nx][ny]]))\n\n    return []", "prompt_tokens": 1900, "completion_tokens": 1024, "duration": 30.23546528816223, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    def helper(n, memo):\n        if n in memo:\n            return memo[n]\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            memo[n] = 1 + n // 2\n        else:\n            memo[n] = helper(n - 1, memo) + helper(n - 2, memo) + helper(n + 1, memo)\n        return memo[n]\n\n    memo = {}\n    for i in range(1, n + 2):\n        helper(i, memo)\n    \n    return [memo[i] for i in range(1, n + 2)]", "prompt_tokens": 1154, "completion_tokens": 521, "duration": 16.16675591468811, "result": "failed: 1", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 10, "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 783, "completion_tokens": 469, "duration": 15.756666898727417, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 6, "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0", "prompt_tokens": 1154, "completion_tokens": 641, "duration": 23.133861303329468, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "is_solved": false, "solved_count": 9, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 904, "completion_tokens": 312, "duration": 11.48575234413147, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": false, "solved_count": 8, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) > 1 and txt[-2] == \" \":\n        return True\n    return False", "prompt_tokens": 866, "completion_tokens": 343, "duration": 12.886965036392212, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 7, "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 874, "completion_tokens": 412, "duration": 10.225648880004883, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 9, "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 871, "completion_tokens": 380, "duration": 11.466631412506104, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 9, "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n            return float(x)\n        return x\n    \n    a_val = convert_to_float(a)\n    b_val = convert_to_float(b)\n    \n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None", "prompt_tokens": 926, "completion_tokens": 431, "duration": 18.18807864189148, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "is_solved": false, "solved_count": 7, "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    if n % 2 == 0:\n        return True\n    return False", "prompt_tokens": 914, "completion_tokens": 496, "duration": 15.33252763748169, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    if n == 0:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)", "prompt_tokens": 875, "completion_tokens": 448, "duration": 14.821632862091064, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": false, "solved_count": 7, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = re.sub(r' {1,2}', '_', text)\n    return text", "prompt_tokens": 837, "completion_tokens": 434, "duration": 11.956828355789185, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 9, "generated_code": "def file_name_check(file_name):\n    # Check for exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check for more than three digits in the name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1058, "completion_tokens": 493, "duration": 19.351250171661377, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "is_solved": false, "solved_count": 4, "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1100, "completion_tokens": 532, "duration": 15.886449813842773, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": false, "solved_count": 4, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 1027, "completion_tokens": 524, "duration": 17.735257625579834, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 10, "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_denom = x_denom * n_denom\n    return result_num % result_denom == 0", "prompt_tokens": 1091, "completion_tokens": 551, "duration": 18.186716079711914, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 2, "generated_code": "def order_by_points(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 857, "completion_tokens": 372, "duration": 13.615173578262329, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": false, "solved_count": 7, "generated_code": "def specialFilter(nums):\n    def is_first_last_odd(n):\n        s = str(abs(n))\n        return int(s[0]) % 2 != 0 and int(s[-1]) % 2 != 0\n\n    return sum(1 for num in nums if num > 10 and is_first_last_odd(num))", "prompt_tokens": 910, "completion_tokens": 438, "duration": 13.58932900428772, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 4, "generated_code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Generate the array based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the frequency of elements modulo 3\n    mod_count = [0, 0, 0]\n    for num in a:\n        mod_count[num % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Using the combination formula for elements that sum up to a multiple of 3\n    count = 0\n    # Case 1: All elements are of the same remainder (0, 0, 0) or (1, 1, 1) or (2, 2, 2)\n    for i in range(3):\n        count += mod_count[i] * (mod_count[i] - 1) * (mod_count[i] - 2) // 6\n    # Case 2: Each element has a different remainder (0, 1, 2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count", "prompt_tokens": 1229, "completion_tokens": 941, "duration": 37.22365927696228, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 8, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "prompt_tokens": 1039, "completion_tokens": 433, "duration": 12.421162843704224, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "is_solved": false, "solved_count": 3, "generated_code": "def sorted_list_sum(lst):\n    \"\"\"Sorts a list of strings by their length and alphabetically for those of the same length, excluding odd-length strings.\"\"\"\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 1035, "completion_tokens": 422, "duration": 14.68131947517395, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 10, "generated_code": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 868, "completion_tokens": 469, "duration": 11.944233417510986, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "is_solved": false, "solved_count": 9, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)", "prompt_tokens": 912, "completion_tokens": 367, "duration": 16.368622303009033, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 7, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 1079, "completion_tokens": 349, "duration": 11.123785734176636, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 5, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def extension_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=extension_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1195, "completion_tokens": 416, "duration": 12.058134078979492, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 8, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    return b in (a + a)", "prompt_tokens": 905, "completion_tokens": 376, "duration": 12.660202264785767, "result": "failed: test #3", "passed": false}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 9, "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 767, "completion_tokens": 403, "duration": 14.704312086105347, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 10, "generated_code": "def int_to_mini_roman(number):\n    value_map = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = ''\n    for value, numeral in value_map:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral", "prompt_tokens": 925, "completion_tokens": 558, "duration": 18.504154920578003, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": false, "solved_count": 9, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 1062, "completion_tokens": 586, "duration": 21.19789409637451, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": false, "solved_count": 9, "generated_code": "def find_max(words):\n    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "prompt_tokens": 936, "completion_tokens": 460, "duration": 17.38107657432556, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": false, "solved_count": 8, "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Calculate the total number of eaten carrots and the remaining carrots after the meals.\n    \"\"\"\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 1130, "completion_tokens": 333, "duration": 12.987923622131348, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": false, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i + 1])\n    return eval(expression)", "prompt_tokens": 1090, "completion_tokens": 426, "duration": 11.469899892807007, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 7, "generated_code": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)", "prompt_tokens": 822, "completion_tokens": 353, "duration": 9.421873331069946, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": false, "solved_count": 3, "generated_code": "def string_to_md5(text):\n    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 779, "completion_tokens": 356, "duration": 10.265704154968262, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 6, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [x for x in range(a, b+1) if x % 2 == 0]", "prompt_tokens": 903, "completion_tokens": 468, "duration": 13.992809534072876, "result": "failed: Test 1", "passed": false}
