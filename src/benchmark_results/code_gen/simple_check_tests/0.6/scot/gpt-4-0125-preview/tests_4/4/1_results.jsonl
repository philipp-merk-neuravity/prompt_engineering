{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 7, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 631, "completion_tokens": 212, "duration": 8.40137529373169, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 8, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n    for c in paren_string.replace(\" \", \"\"):\n        if c == '(':\n            open_braces_count += 1\n        elif c == ')':\n            open_braces_count -= 1\n        current_group += c\n        if open_braces_count == 0 and current_group:\n            groups.append(current_group)\n            current_group = \"\"\n    return groups", "prompt_tokens": 649, "completion_tokens": 274, "duration": 14.131924629211426, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": true, "solved_count": 6, "generated_code": "def truncate_number(number: float) -> float:\n    \"\"\" Return the decimal part of the number. \"\"\"\n    number_str = str(number)\n    decimal_point_index = number_str.find('.')\n    decimal_part_str = number_str[decimal_point_index:]\n    decimal_part = float(decimal_part_str)\n    return decimal_part", "prompt_tokens": 503, "completion_tokens": 139, "duration": 9.3137366771698, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 10, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 555, "completion_tokens": 109, "duration": 5.5203704833984375, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 6, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    sum_absolute_diff = sum(abs(x - mean) for x in numbers)\n    mad = sum_absolute_diff / len(numbers)\n    return mad", "prompt_tokens": 659, "completion_tokens": 287, "duration": 12.293144226074219, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 7, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 525, "completion_tokens": 145, "duration": 9.634033203125, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": false, "solved_count": 6, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 683, "completion_tokens": 306, "duration": 9.051917314529419, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": true, "solved_count": 8, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 122, "duration": 9.385766506195068, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 6, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)", "prompt_tokens": 546, "completion_tokens": 126, "duration": 8.640236854553223, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for number in numbers:\n        if not rolling_max_list or number > rolling_max_list[-1]:\n            rolling_max_list.append(number)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list", "prompt_tokens": 593, "completion_tokens": 208, "duration": 7.7471091747283936, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 8, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 660, "completion_tokens": 251, "duration": 11.798089265823364, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 8, "generated_code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 506, "completion_tokens": 156, "duration": 9.075040340423584, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 7, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n\n    for string in strings[1:]:\n        if len(string) > len(longest_str):\n            longest_str = string\n\n    return longest_str", "prompt_tokens": 552, "completion_tokens": 156, "duration": 6.631438970565796, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": false, "solved_count": 8, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 142, "duration": 9.722417116165161, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "prompt_tokens": 477, "completion_tokens": 150, "duration": 9.427057266235352, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 5, "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 450, "completion_tokens": 101, "duration": 5.511278390884399, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": false, "solved_count": 8, "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for ch in string:\n        distinct_chars.add(ch)\n    return len(distinct_chars)", "prompt_tokens": 488, "completion_tokens": 134, "duration": 10.40559196472168, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 9, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 727, "completion_tokens": 210, "duration": 10.747349739074707, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 10, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 515, "completion_tokens": 142, "duration": 6.187711000442505, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 7, "generated_code": "def sort_numbers(numbers: str) -> str:\n    numeral_to_number = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    number_to_numeral = {v: k for k, v in numeral_to_number.items()}\n    numeral_words = numbers.split()\n    numerical_values = [numeral_to_number[word] for word in numeral_words]\n    numerical_values.sort()\n    sorted_numeral_words = [number_to_numeral[value] for value in numerical_values]\n    sorted_numbers = ' '.join(sorted_numeral_words)\n    return sorted_numbers", "prompt_tokens": 654, "completion_tokens": 352, "duration": 14.466752767562866, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": false, "solved_count": 6, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    return closest_pair", "prompt_tokens": 721, "completion_tokens": 227, "duration": 11.696996450424194, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(number - min_value) / range_value for number in numbers]\n    return rescaled_numbers", "prompt_tokens": 622, "completion_tokens": 188, "duration": 7.653104543685913, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = [value for value in values if isinstance(value, int)]\n    return integers", "prompt_tokens": 496, "completion_tokens": 161, "duration": 9.251528978347778, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": false, "solved_count": 4, "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for ch in string:\n        length += 1\n    return length", "prompt_tokens": 406, "completion_tokens": 94, "duration": 6.026503086090088, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 8, "generated_code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 421, "completion_tokens": 128, "duration": 5.988577842712402, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 10, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 618, "completion_tokens": 175, "duration": 6.8050477504730225, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": true, "solved_count": 7, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    result = []\n    seen = set()\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        else:\n            if number not in seen:\n                seen.add(number)\n    return result", "prompt_tokens": 491, "completion_tokens": 164, "duration": 8.581496477127075, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 6, "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for character in string:\n        if character.islower():\n            flipped_string += character.upper()\n        elif character.isupper():\n            flipped_string += character.lower()\n        else:\n            flipped_string += character\n    return flipped_string", "prompt_tokens": 432, "completion_tokens": 140, "duration": 6.991391658782959, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 6, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 426, "completion_tokens": 128, "duration": 6.56719708442688, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 7, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 108, "duration": 6.030641317367554, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 5, "generated_code": "def get_positive(l: list) -> list:\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    positive_nums = [num for num in l if num > 0]\n    return positive_nums", "prompt_tokens": 540, "completion_tokens": 98, "duration": 4.839735507965088, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 10, "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 517, "completion_tokens": 129, "duration": 5.8380467891693115, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 3, "generated_code": "import math\nfrom scipy.optimize import fsolve\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 == 0 and xs[-1] != 0:\n        zero_point = fsolve(lambda x: poly(xs, x), 0)[0]\n        return zero_point\n    else:\n        raise ValueError(\"List of coefficients must have an even number of elements and a non-zero leading coefficient.\")", "prompt_tokens": 893, "completion_tokens": 354, "duration": 17.047642707824707, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 4, "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    temp = [l[i] for i in range(len(l)) if i % 3 == 0]\n    temp.sort()\n    result = []\n    temp_index = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(l[i])\n    return result", "prompt_tokens": 748, "completion_tokens": 346, "duration": 12.183808326721191, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 5, "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n\n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 158, "duration": 8.253329992294312, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 5, "generated_code": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 502, "completion_tokens": 134, "duration": 4.71384334564209, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": false, "solved_count": 4, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for ch in str(i):\n                if ch == '7':\n                    count += 1\n    return count", "prompt_tokens": 523, "completion_tokens": 177, "duration": 7.2578301429748535, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 7, "generated_code": "def sort_even(l: list):\n    \"\"\"Sorts elements at even indices while keeping odd indices elements in place.\"\"\"\n    # Extract elements at even indices\n    even_elements = [l[i] for i in range(len(l)) if i % 2 == 0]\n    # Sort the extracted elements\n    even_elements_sorted = sorted(even_elements)\n    # Reconstruct the list with sorted even elements and original odd elements\n    return [even_elements_sorted.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 620, "completion_tokens": 234, "duration": 10.896918535232544, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group in reverse. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 741, "completion_tokens": 303, "duration": 9.437352180480957, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 9, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(pos):\n        if pos == 0:\n            return 0\n        elif pos == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, pos + 1):\n                a, b = b, a + b\n            return b\n\n    count, pos = 0, 0\n    while True:\n        pos += 1\n        fib_num = fib(pos)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "prompt_tokens": 603, "completion_tokens": 340, "duration": 12.398880958557129, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 10, "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 726, "completion_tokens": 254, "duration": 9.60092282295227, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 6, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of n cars moving towards each other.\n    \"\"\"\n    # Since all cars move at the same speed and start at positions that ensure they will all meet,\n    # each car from one direction will collide with each car from the opposite direction.\n    # Therefore, the total number of collisions is simply n squared.\n    return n * n", "prompt_tokens": 653, "completion_tokens": 184, "duration": 10.773292303085327, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 5, "generated_code": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [num + 1 for num in l]", "prompt_tokens": 533, "completion_tokens": 93, "duration": 5.337202310562134, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 10, "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 665, "completion_tokens": 135, "duration": 7.853806018829346, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": false, "solved_count": 7, "generated_code": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result", "prompt_tokens": 541, "completion_tokens": 180, "duration": 6.476914644241333, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 5, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 413, "completion_tokens": 116, "duration": 5.50589656829834, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": false, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n + 1):\n        next_element = sum(fib4_list[-4:])\n        fib4_list.append(next_element)\n    return fib4_list[n]", "prompt_tokens": 718, "completion_tokens": 201, "duration": 6.96735954284668, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 8, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) / 2", "prompt_tokens": 493, "completion_tokens": 145, "duration": 8.791707277297974, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": false, "solved_count": 7, "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 495, "completion_tokens": 179, "duration": 8.257462739944458, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": false, "solved_count": 9, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result = (result * 2) % p\n    return result", "prompt_tokens": 524, "completion_tokens": 194, "duration": 8.927159547805786, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 5, "generated_code": "def encode_shift(s: str) -> str:\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 657, "completion_tokens": 343, "duration": 12.756251811981201, "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 9, "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    result = ''.join(ch for ch in text if ch.lower() not in 'aeiou')\n    return result", "prompt_tokens": 592, "completion_tokens": 231, "duration": 9.379872560501099, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 7, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 474, "completion_tokens": 109, "duration": 6.866175889968872, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 5, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    result = x + y\n    return result", "prompt_tokens": 393, "completion_tokens": 91, "duration": 8.310152769088745, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 10, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    if len(set(s0)) != len(set(s1)):\n        return False\n    for char in set(s0):\n        if char not in s1:\n            return False\n    return True", "prompt_tokens": 693, "completion_tokens": 213, "duration": 6.983189344406128, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 6, "generated_code": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    for i in range(2, n + 1):\n        result = a + b\n        a = b\n        b = result\n\n    return result", "prompt_tokens": 444, "completion_tokens": 201, "duration": 8.35668134689331, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": false, "solved_count": 9, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 552, "completion_tokens": 173, "duration": 11.22900390625, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 10, "generated_code": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        if l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing", "prompt_tokens": 549, "completion_tokens": 261, "duration": 9.470686912536621, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 7, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 589, "completion_tokens": 139, "duration": 8.427582025527954, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 5, "generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n = n // factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 491, "completion_tokens": 227, "duration": 8.252769947052002, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 8, "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))", "prompt_tokens": 492, "completion_tokens": 149, "duration": 7.698885679244995, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 10, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for ch in brackets:\n        if ch == \"(\":\n            counter += 1\n        elif ch == \")\":\n            counter -= 1\n            if counter < 0:\n                return False\n    return counter == 0", "prompt_tokens": 543, "completion_tokens": 175, "duration": 10.900737047195435, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": false, "solved_count": 6, "generated_code": "def derivative(xs: list) -> list:\n    \"\"\"Return the derivative of a polynomial represented by its coefficients.\"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 533, "completion_tokens": 100, "duration": 8.941145896911621, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 10, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n + 1):\n        fibfib_list.append(fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3])\n\n    return fibfib_list[n]", "prompt_tokens": 674, "completion_tokens": 229, "duration": 8.891684293746948, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": false, "solved_count": 8, "generated_code": "def vowels_count(s):\n    \"\"\"Returns the number of vowels in the string s. 'y' is considered a vowel if it is at the end of the word.\"\"\"\n    count = 0\n    s = s.lower()\n    for i, ch in enumerate(s):\n        if ch in 'aeiou':\n            count += 1\n        if ch == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "prompt_tokens": 604, "completion_tokens": 191, "duration": 9.93670392036438, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 8, "generated_code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    num_str = str(x)\n    length = len(num_str)\n    shift = shift % length if shift > length else shift\n    if shift == 0:\n        return num_str\n    shifted_part = num_str[-shift:]\n    remaining_part = num_str[:-shift]\n    return shifted_part + remaining_part", "prompt_tokens": 591, "completion_tokens": 284, "duration": 10.83125638961792, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "is_solved": false, "solved_count": 9, "generated_code": "def digitSum(s):\n    \"\"\"Returns the sum of the ASCII codes of uppercase characters in the string s.\"\"\"\n    return sum(ord(ch) for ch in s if ch.isupper())", "prompt_tokens": 538, "completion_tokens": 94, "duration": 4.723570823669434, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 7, "generated_code": "def fruit_distribution(s, n):\n    \"\"\"\n    Given a string representing the number of apples and oranges, and an integer representing the total number of fruits,\n    return the number of mango fruits in the basket.\n    \"\"\"\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 779, "completion_tokens": 184, "duration": 7.7772064208984375, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 10, "generated_code": "def pluck(arr):\n    smallest_even = None\n    smallest_index = None\n    for index, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                smallest_index = index\n            elif num == smallest_even and index < smallest_index:\n                smallest_index = index\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []", "prompt_tokens": 1035, "completion_tokens": 257, "duration": 9.002376079559326, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": false, "solved_count": 8, "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n    for key in freq_map:\n        if key > 0 and freq_map[key] >= key:\n            if greatest_int == -1 or key > greatest_int:\n                greatest_int = key\n\n    return greatest_int", "prompt_tokens": 724, "completion_tokens": 233, "duration": 8.84691309928894, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 8, "generated_code": "def strange_sort_list(lst):\n    result_lst = []\n    lst.sort()\n    min_ptr, max_ptr = 0, len(lst) - 1\n    while min_ptr <= max_ptr:\n        result_lst.append(lst[min_ptr])\n        if min_ptr != max_ptr:\n            result_lst.append(lst[max_ptr])\n        min_ptr += 1\n        max_ptr -= 1\n    return result_lst", "prompt_tokens": 637, "completion_tokens": 215, "duration": 7.670012950897217, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": false, "solved_count": 9, "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        from math import sqrt\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 623, "completion_tokens": 277, "duration": 11.341898202896118, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 10, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 885, "completion_tokens": 192, "duration": 8.70275616645813, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": false, "solved_count": 7, "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    min_changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    return min_changes", "prompt_tokens": 742, "completion_tokens": 237, "duration": 8.09080457687378, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 5, "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list.\n    If the two lists have the same number of chars, return the first list.\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 763, "completion_tokens": 237, "duration": 8.862667322158813, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 10, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 50) if is_prime(i)]\n    prime_count = 0\n    for p in primes:\n        if a % p == 0:\n            a //= p\n            prime_count += 1\n        if prime_count > 3:\n            break\n    return prime_count == 3", "prompt_tokens": 537, "completion_tokens": 254, "duration": 11.361200332641602, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": false, "solved_count": 9, "generated_code": "def is_simple_power(x, n):\n    if x == 1 and n != 1:\n        return True\n    if x == 1 and n == 1:\n        return False\n    if n == 1:\n        return False\n\n    power = 1\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power = power + 1\n\n    return False", "prompt_tokens": 645, "completion_tokens": 193, "duration": 6.68514609336853, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 10, "generated_code": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    '''\n    cube_root = abs(a) ** (1/3)\n    return round(cube_root) ** 3 == abs(a)", "prompt_tokens": 578, "completion_tokens": 163, "duration": 8.790345907211304, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": false, "solved_count": 9, "generated_code": "def hex_key(num: str) -> int:\n    \"\"\"Counts the number of prime hexadecimal digits in the given string.\"\"\"\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 927, "completion_tokens": 140, "duration": 5.451316833496094, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 7, "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"  # Initialize the binary string with 'db' at the beginning\n    if decimal == 0:\n        return \"db0db\"\n    while decimal > 0:\n        remainder = decimal % 2  # Get the remainder when dividing by 2\n        binary_str = \"db\" + str(remainder) + binary_str[2:]  # Add the remainder to the beginning of the binary string\n        decimal = decimal // 2  # Update the decimal number by integer division by 2\n\n    binary_str = binary_str + \"db\"  # Add 'db' at the end of the binary string\n    return binary_str", "prompt_tokens": 677, "completion_tokens": 288, "duration": 15.034953117370605, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 10, "generated_code": "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 598, "completion_tokens": 176, "duration": 8.735530138015747, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": false, "solved_count": 3, "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 530, "duration": 17.053103923797607, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 9, "generated_code": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    n = len(string)\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 549, "completion_tokens": 225, "duration": 12.668099880218506, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10**(n-1)\n        else:\n            count += 2 * 10**(n-2)\n    return count", "prompt_tokens": 425, "completion_tokens": 172, "duration": 9.567235469818115, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": false, "solved_count": 9, "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_digits)[2:]", "prompt_tokens": 609, "completion_tokens": 131, "duration": 4.897405385971069, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 4, "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 443, "completion_tokens": 152, "duration": 12.008509397506714, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": false, "solved_count": 6, "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Takes a string and returns an ordered version of it where all words are replaced by a new word\n    with all the characters arranged in ascending order based on ascii value.\n    \"\"\"\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 624, "completion_tokens": 202, "duration": 8.777153968811035, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 6, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list and an integer x, finds all occurrences of x and returns a list of coordinates.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row[::-1]):\n            if val == x:\n                result.append((i, len(row) - 1 - j))\n    result.sort(key=lambda k: (k[0], -k[1]))\n    return result", "prompt_tokens": 917, "completion_tokens": 243, "duration": 13.546725749969482, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 7, "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 808, "completion_tokens": 194, "duration": 7.86981987953186, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 10, "generated_code": "def encrypt(s):\n    \"\"\"Encrypts a string by rotating the alphabet by 2 multiplied by 2 places.\"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.find(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 618, "completion_tokens": 219, "duration": 7.9171154499053955, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": false, "solved_count": 9, "generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    return second_smallest", "prompt_tokens": 642, "completion_tokens": 251, "duration": 8.892371654510498, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": false, "solved_count": 7, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with \"I\".\n    \"\"\"\n    import re\n    sentences = re.split(r'[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == \"I\":\n            count += 1\n    return count", "prompt_tokens": 552, "completion_tokens": 160, "duration": 10.06307053565979, "result": "passed", "passed": true}
{"task_id": "HumanEval/92", "is_solved": false, "solved_count": 9, "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 630, "completion_tokens": 201, "duration": 7.321205139160156, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": false, "solved_count": 1, "generated_code": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping case of all letters and replacing all vowels with the letter that appears 2 places ahead of that vowel in the english alphabet.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for ch in message:\n        if ch.isalpha():\n            if ch in vowels:\n                if ch.islower():\n                    # Calculate the new character for lowercase vowels\n                    new_ch = chr(((ord(ch) - ord('a') + 2) % 26) + ord('a'))\n                else:\n                    # Calculate the new character for uppercase vowels\n                    new_ch = chr(((ord(ch) - ord('A') + 2) % 26) + ord('A'))\n            else:\n                # Swap case for non-vowel letters\n                new_ch = ch.swapcase()\n        else:\n            new_ch = ch\n        encoded_message += new_ch\n    return encoded_message", "prompt_tokens": 598, "completion_tokens": 321, "duration": 14.00732684135437, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def sum_of_digits_of_largest_prime(lst):\n    largest_prime = 0\n    for num in lst:\n        if num > 1:\n            is_prime = True\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime and num > largest_prime:\n                largest_prime = num\n\n    sum_digits = 0\n    if largest_prime > 0:\n        while largest_prime > 0:\n            sum_digits += largest_prime % 10\n            largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 983, "completion_tokens": 288, "duration": 13.542843580245972, "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 10, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lowercase_flag = False\n    uppercase_flag = False\n    for key in dict:\n        if isinstance(key, str):\n            if key.islower():\n                lowercase_flag = True\n            elif key.isupper():\n                uppercase_flag = True\n            else:\n                return False\n        else:\n            return False\n    if lowercase_flag and uppercase_flag:\n        return False\n    return True", "prompt_tokens": 742, "completion_tokens": 241, "duration": 10.366276502609253, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 10, "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 637, "completion_tokens": 167, "duration": 6.158951759338379, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 10, "generated_code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 532, "completion_tokens": 125, "duration": 6.5268471240997314, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": false, "solved_count": 7, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 135, "duration": 5.4198548793792725, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 10, "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_val = int(num // 1)\n    ceil_val = floor_val if num == floor_val else floor_val + 1\n    if abs(num - floor_val) == abs(ceil_val - num):\n        return ceil_val if num > 0 else floor_val\n    return floor_val if abs(num - floor_val) < abs(ceil_val - num) else ceil_val", "prompt_tokens": 731, "completion_tokens": 254, "duration": 53.574681520462036, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "is_solved": true, "solved_count": 5, "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n    for i in range(n):\n        stones_list.append(stones)\n        if n % 2 == 0:\n            stones += 2\n        else:\n            stones += 2\n    return stones_list", "prompt_tokens": 601, "completion_tokens": 141, "duration": 6.927122592926025, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 10, "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words and return an array of the words.\n    \"\"\"\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in [',', ' ']:\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 622, "completion_tokens": 219, "duration": 11.736350536346436, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 10, "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 513, "completion_tokens": 159, "duration": 8.003767967224121, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": false, "solved_count": 8, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n, m + 1):\n            sum += i\n        count = m - n + 1\n        avg = round(sum / count)\n        binary_avg = bin(avg)\n        return binary_avg", "prompt_tokens": 633, "completion_tokens": 170, "duration": 8.199273824691772, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": false, "solved_count": 6, "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    result = []\n    for num in x:\n        num_str = str(num)\n        has_even_digit = False\n        for ch in num_str:\n            if int(ch) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    result.sort()\n    return result", "prompt_tokens": 583, "completion_tokens": 240, "duration": 11.602956533432007, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 7, "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_word[num] for num in filtered_arr]", "prompt_tokens": 948, "completion_tokens": 310, "duration": 12.552370071411133, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 8, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum_to_x(i))\n    return res", "prompt_tokens": 597, "completion_tokens": 193, "duration": 9.560961246490479, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 4, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 199, "duration": 10.011662244796753, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 5, "generated_code": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 261, "duration": 11.834225416183472, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 10, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    # Find the index of the minimum element\n    min_index = arr.index(min(arr))\n    # Check if the array is already sorted\n    if arr == sorted(arr):\n        return True\n    # Perform right shift operations\n    for _ in range(n):\n        # Perform one right shift\n        arr = [arr[-1]] + arr[:-1]\n        # Check if the array becomes sorted after the shift\n        if arr == sorted(arr):\n            return True\n    return False", "prompt_tokens": 1005, "completion_tokens": 272, "duration": 9.077512741088867, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": true, "solved_count": 10, "generated_code": "def exchange(lst1, lst2):\n    \"\"\"Determines whether it is possible to exchange elements between two lists to make the first list all even numbers.\"\"\"\n    count_odd_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    count_even_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    if count_odd_lst1 <= count_even_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 783, "completion_tokens": 234, "duration": 8.88223910331726, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "is_solved": false, "solved_count": 6, "generated_code": "def histogram(test):\n    letters = test.split()\n    hist_dict = {}\n    max_count = 0\n    for letter in letters:\n        if letter in hist_dict:\n            hist_dict[letter] += 1\n        else:\n            hist_dict[letter] = 1\n        if hist_dict[letter] > max_count:\n            max_count = hist_dict[letter]\n    result_dict = {letter: count for letter, count in hist_dict.items() if count == max_count}\n    return result_dict", "prompt_tokens": 762, "completion_tokens": 309, "duration": 10.195278406143188, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": false, "solved_count": 8, "generated_code": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "prompt_tokens": 722, "completion_tokens": 185, "duration": 8.266162633895874, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 4, "generated_code": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"\n    result_lst = []\n    for string in lst:\n        count = sum(1 for char in string if char.isdigit() and int(char) % 2 != 0)\n        result_lst.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result_lst", "prompt_tokens": 728, "completion_tokens": 276, "duration": 13.612206220626831, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 10, "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = nums[0]\n    current_sum = nums[0]\n\n    for i in range(1, len(nums)):\n        current_sum = min(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 529, "completion_tokens": 235, "duration": 12.45782208442688, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": false, "solved_count": 9, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    times = math.ceil(total_water / capacity)\n    return times", "prompt_tokens": 1033, "completion_tokens": 168, "duration": 8.751829147338867, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 4, "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers according to the number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    def count_ones(num):\n        \"\"\"Counts the number of ones in the binary representation of a number.\"\"\"\n        return bin(num).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 718, "completion_tokens": 216, "duration": 15.068167686462402, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": false, "solved_count": 9, "generated_code": "def select_words(s, n):\n    words = []\n    word_list = s.split()\n    for word in word_list:\n        consonant_count = 0\n        for ch in word:\n            if ch.lower() not in ['a', 'e', 'i', 'o', 'u', ' ']:\n                consonant_count += 1\n        if consonant_count == n:\n            words.append(word)\n    return words", "prompt_tokens": 803, "completion_tokens": 274, "duration": 12.936586618423462, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": false, "solved_count": 6, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 700, "completion_tokens": 215, "duration": 7.259930610656738, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 10, "generated_code": "def match_parens(lst):\n    '''\n    Input: lst: a list of two strings\n    Output: result: 'Yes' or 'No'\n    '''\n    open_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                open_count -= 1\n                if open_count < 0:\n                    return 'No'\n    return 'Yes' if open_count == 0 else 'No'", "prompt_tokens": 772, "completion_tokens": 284, "duration": 102.49181175231934, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 10, "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k][::-1]", "prompt_tokens": 775, "completion_tokens": 138, "duration": 11.170425415039062, "result": "passed", "passed": true}
{"task_id": "HumanEval/121", "is_solved": false, "solved_count": 6, "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for index, num in enumerate(lst):\n        if index % 2 == 0 and num % 2 != 0:\n            sum_odd_even += num\n    return sum_odd_even", "prompt_tokens": 525, "completion_tokens": 126, "duration": 10.541364669799805, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": true, "solved_count": 8, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if 0 < arr[i] < 100 or -100 < arr[i] < 0:\n            sum += arr[i]\n    return sum", "prompt_tokens": 601, "completion_tokens": 179, "duration": 12.562560081481934, "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "is_solved": false, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_collatz_list.append(1)\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 221, "duration": 11.41286849975586, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 10, "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    if not all(part.isdigit() for part in parts):\n        return False\n    month, day, year = map(int, parts)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    return True", "prompt_tokens": 1010, "completion_tokens": 438, "duration": 59.73713541030884, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": false, "solved_count": 6, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((ord(c) - ord('a')) % 2 == 0 for c in txt if c.islower())", "prompt_tokens": 752, "completion_tokens": 273, "duration": 12.879371643066406, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 9, "generated_code": "def is_sorted(lst):\n    if not lst:  # Check if the list is empty\n        return True\n    prev = lst[0]\n    for num in lst[1:]:\n        if num < prev:  # Check if the current number is less than the previous one\n            return False\n        if num == prev:  # Check for more than one duplicate\n            return False\n        prev = num\n    return True", "prompt_tokens": 948, "completion_tokens": 284, "duration": 11.793808460235596, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 10, "generated_code": "def intersection(interval1, interval2):\n    \"\"\"Determines if the length of the intersection of two intervals is a prime number.\"\"\"\n    # Check if intervals do not intersect\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    \n    # Calculate intersection\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n    intersection_length = intersection_end - intersection_start\n\n    # Check if intersection length is less than 2 (1 or 0)\n    if intersection_length < 2:\n        return \"NO\"\n    \n    # Check if intersection length is a prime number\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\"", "prompt_tokens": 926, "completion_tokens": 356, "duration": 11.452099800109863, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "is_solved": false, "solved_count": 9, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    product_signs = 1\n    for num in arr:\n        sum_magnitudes += abs(num)\n        product_signs *= (1 if num > 0 else -1 if num < 0 else 0)\n    return sum_magnitudes * product_signs", "prompt_tokens": 629, "completion_tokens": 210, "duration": 16.31290292739868, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 5, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    min_path = [float('inf')] * k\n\n    def isValid(x, y):\n        return 0 <= x < N and 0 <= y < N\n\n    def dfs(x, y, path):\n        nonlocal min_path\n        if len(path) == k:\n            min_path = min(min_path, path)\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if isValid(nx, ny):\n                dfs(nx, ny, path + [grid[nx][ny]])\n\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]])\n\n    return min_path", "prompt_tokens": 1246, "completion_tokens": 382, "duration": 12.843085527420044, "result": "timed out", "passed": false}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 3, "generated_code": "def tri(n):\n    \"\"\"Return the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    # Correcting the initial values based on the function description\n    sequence = [1, 3]\n    if n == 0:\n        return [1]\n    if n == 1:\n        return sequence\n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            # Correcting the calculation for odd i based on the function description\n            # Ensuring we don't go out of bounds when i == 2\n            if i == 2:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + 3)  # Assuming tri(4) = 3 as a placeholder\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n\n    return sequence", "prompt_tokens": 844, "completion_tokens": 322, "duration": 13.858143091201782, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 10, "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 482, "completion_tokens": 212, "duration": 12.219950199127197, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 6, "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0", "prompt_tokens": 665, "completion_tokens": 197, "duration": 10.36853814125061, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "is_solved": false, "solved_count": 9, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 643, "completion_tokens": 95, "duration": 7.653252840042114, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 9, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    '''\n    if not txt or not txt[-1].isalpha() or txt[-1].isspace() or (len(txt) > 1 and txt[-2].isalpha()):\n        return False\n    return True", "prompt_tokens": 644, "completion_tokens": 207, "duration": 14.300235509872437, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 7, "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index", "prompt_tokens": 568, "completion_tokens": 151, "duration": 11.050764799118042, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 9, "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    largest_neg = None\n    smallest_pos = None\n    \n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        elif num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n            \n    return (largest_neg, smallest_pos)", "prompt_tokens": 662, "completion_tokens": 229, "duration": 12.694180727005005, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    \"\"\"\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str):\n        a_float = float(a.replace(',', '.'))\n        b_float = float(b.replace(',', '.'))\n        if a_float > b_float:\n            return a\n        elif b_float > a_float:\n            return b\n        else:\n            return None", "prompt_tokens": 725, "completion_tokens": 370, "duration": 21.962243795394897, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "is_solved": false, "solved_count": 7, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8, any n < 8 cannot be written as such a sum\n    if n < 8:\n        return False\n    # For n >= 8, check if n is even; if it is not, it cannot be the sum of even numbers\n    return n % 2 == 0", "prompt_tokens": 516, "completion_tokens": 221, "duration": 20.58082604408264, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 525, "completion_tokens": 136, "duration": 9.505989074707031, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": false, "solved_count": 6, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    modified_text = \"\"\n    count = 0\n    for i, ch in enumerate(text):\n        if ch == \" \":\n            count += 1\n        else:\n            if count > 2:\n                modified_text += \"-\"\n            else:\n                modified_text += \"_\" * count\n            modified_text += ch\n            count = 0\n    if count > 2:\n        modified_text += \"-\"\n    else:\n        modified_text += \"_\" * count\n    return modified_text", "prompt_tokens": 616, "completion_tokens": 293, "duration": 15.725647449493408, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 9, "generated_code": "def file_name_check(file_name):\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 914, "completion_tokens": 323, "duration": 9.653547763824463, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "is_solved": false, "solved_count": 4, "generated_code": "def sum_squares(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum", "prompt_tokens": 700, "completion_tokens": 181, "duration": 14.488104343414307, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": false, "solved_count": 4, "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 667, "completion_tokens": 218, "duration": 14.036088943481445, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 10, "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    return product_num % product_den == 0", "prompt_tokens": 671, "completion_tokens": 169, "duration": 14.541489124298096, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 2, "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, they are ordered based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 716, "completion_tokens": 308, "duration": 14.469621419906616, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": false, "solved_count": 7, "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "prompt_tokens": 612, "completion_tokens": 202, "duration": 13.441930294036865, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 4, "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 249, "duration": 15.058735609054565, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 8, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 < index2:\n            result = planets[index1+1:index2]\n        else:\n            result = planets[index2+1:index1]\n            result = reversed(result)\n        return tuple(result)\n    else:\n        return ()", "prompt_tokens": 827, "completion_tokens": 274, "duration": 16.401439905166626, "result": "failed: Fourth test error: ('Uranus', 'Saturn', 'Jupiter', 'Mars', 'Earth')", "passed": false}
{"task_id": "HumanEval/149", "is_solved": false, "solved_count": 3, "generated_code": "def sorted_list_sum(lst):\n    \"\"\"Sorts the list by removing odd-length strings and sorting by length and alphabetically.\"\"\"\n    # Remove odd-length strings and sort the remaining strings alphabetically\n    sorted_lst = sorted([w for w in lst if len(w) % 2 == 0])\n    # Sort the list by length\n    sorted_lst.sort(key=len)\n    return sorted_lst", "prompt_tokens": 734, "completion_tokens": 184, "duration": 12.986980438232422, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": false, "solved_count": 9, "generated_code": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 150, "duration": 11.16884446144104, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/151", "is_solved": false, "solved_count": 9, "generated_code": "def double_the_difference(lst):\n    return sum(num*num for num in lst if isinstance(num, int) and num > 0 and num % 2 != 0)", "prompt_tokens": 622, "completion_tokens": 127, "duration": 10.689924716949463, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 7, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 806, "completion_tokens": 120, "duration": 11.296408414840698, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 5, "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 948, "completion_tokens": 235, "duration": 13.657748460769653, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 10, "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    temp = b + b\n    return any(a[i:i+len(b)] in temp for i in range(len(a) - len(b) + 1))", "prompt_tokens": 667, "completion_tokens": 206, "duration": 13.423499822616577, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 9, "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 9.454712152481079, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 10, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',\n        90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix',\n        5: 'v', 4: 'iv', 1: 'i'\n    }\n    mini_roman = \"\"\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            mini_roman += roman_numerals[value]\n            number -= value\n    return mini_roman", "prompt_tokens": 567, "completion_tokens": 291, "duration": 16.3742413520813, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": false, "solved_count": 9, "generated_code": "def right_angle_triangle(a, b, c):\n    side1_square = a * a\n    side2_square = b * b\n    side3_square = c * c\n    longest_side = max(side1_square, side2_square, side3_square)\n    sum_of_other_sides = side1_square + side2_square + side3_square - longest_side\n    return longest_side == sum_of_other_sides", "prompt_tokens": 667, "completion_tokens": 282, "duration": 14.981947660446167, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": false, "solved_count": 9, "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = set(word)\n        \n        if len(unique_chars) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(unique_chars)\n        elif len(unique_chars) == max_unique_chars and word < max_word:\n            max_word = word\n\n    return max_word", "prompt_tokens": 599, "completion_tokens": 187, "duration": 12.727620840072632, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": false, "solved_count": 8, "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 951, "completion_tokens": 179, "duration": 11.70689344406128, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "is_solved": false, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i+1]\n        elif op == '-':\n            result -= operand[i+1]\n        elif op == '*':\n            result *= operand[i+1]\n        elif op == '//':\n            result //= operand[i+1]\n        elif op == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 839, "completion_tokens": 267, "duration": 14.76476263999939, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 7, "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            result += c.swapcase()\n            has_letter = True\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 589, "completion_tokens": 182, "duration": 13.061582565307617, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": false, "solved_count": 3, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    else:\n        md5_hash = hashlib.md5(text.encode()).hexdigest()\n        return md5_hash", "prompt_tokens": 468, "completion_tokens": 132, "duration": 10.07282829284668, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 6, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits = []\n    start = min(a, b)\n    end = max(a, b)\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits", "prompt_tokens": 577, "completion_tokens": 203, "duration": 13.140833377838135, "result": "failed: Test 1", "passed": false}
