[
    {
        "task_id": "HumanEval/0",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.5, 2.0, 3.5], 0.6) == True",
                "assert has_close_elements([1, 10, 20], 5) == False",
                "assert has_close_elements([], 5) == False",
                "assert has_close_elements([10], 5) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('') == []",
                "assert separate_paren_groups('   ') == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(0.0) == 0.0"
            ],
            "failed_tests": [
                "assert truncate_number(-2.7) == 0.3 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([10, 20, 30]) == False",
                "assert below_zero([10, 20, -35, 5]) == True",
                "assert below_zero([]) == False",
                "assert below_zero([-10]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
                "assert mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0]) == 1.0",
                "assert mean_absolute_deviation([10.0]) == 0.0"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([]) == 0.0 (ZeroDivisionError: division by zero)"
            ]
        }
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([1, 2, 3, 4], 0) == [1, 0, 2, 0, 3, 0, 4]",
                "assert intersperse([], 5) == []",
                "assert intersperse([10], 5) == [10]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('') == []",
                "assert parse_nested_parens('    ') == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring(['apple', 'banana', 'orange'], 'an') == ['banana', 'orange']",
                "assert filter_by_substring(['cat', 'dog', 'fish'], 'rabbit') == []",
                "assert filter_by_substring([], 'test') == []",
                "assert filter_by_substring(['hello', 'world'], '') == ['hello', 'world']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_product([1, 2, 3, 4]) == (10, 24)",
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([10]) == (10, 10)"
            ],
            "failed_tests": [
                "assert sum_product([-1, -2, -3, -4]) == (-10, -24) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert rolling_max([]) == []",
                "assert rolling_max([10]) == [10]"
            ],
            "failed_tests": [
                "assert rolling_max([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert make_palindrome('') == ''",
                "assert make_palindrome('level') == 'level'",
                "assert make_palindrome('a') == 'a'"
            ],
            "failed_tests": [
                "assert make_palindrome('hello') == 'helloolleh' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_xor('101', '010') == '111'",
                "assert string_xor('', '') == ''"
            ],
            "failed_tests": [
                "assert string_xor('1010', '11') == '101' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest(['apple', 'banana', 'orange']) == 'banana'",
                "assert longest(['cat', 'dog', 'bat']) == 'cat'",
                "assert longest([]) == None",
                "assert longest(['elephant']) == 'elephant'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert has_close_elements([1.5, 2.0, 3.5], 0.6) == True (NameError: name 'has_close_elements' is not defined)",
                "assert has_close_elements([1, 10, 20], 5) == False (NameError: name 'has_close_elements' is not defined)",
                "assert has_close_elements([], 5) == False (NameError: name 'has_close_elements' is not defined)",
                "assert has_close_elements([10], 5) == False (NameError: name 'has_close_elements' is not defined)"
            ]
        }
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
                "assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']",
                "assert all_prefixes('') == []",
                "assert all_prefixes('a') == ['a']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(3) == '0 1 2 3'",
                "assert string_sequence(0) == '0'"
            ],
            "failed_tests": [
                "assert string_sequence(-2) == '0 -1 -2' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('hello') == 4",
                "assert count_distinct_characters('') == 0",
                "assert count_distinct_characters('a') == 1"
            ],
            "failed_tests": [
                "assert count_distinct_characters('abcABC') == 6 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
                "assert parse_music('') == []",
                "assert parse_music('o') == [4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('', 'a') == 0",
                "assert how_many_times('aaa', 'a') == 3",
                "assert how_many_times('', 'abc') == 0"
            ],
            "failed_tests": [
                "assert how_many_times('abc', '') == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('one two three') == 'one two three'",
                "assert sort_numbers('five four three two one') == 'one two three four five'",
                "assert sort_numbers('') == ''"
            ],
            "failed_tests": [
                "assert sort_numbers('zero ten five') == 'Invalid numberals present' (KeyError: 'ten')"
            ]
        }
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([1.0, 5.0]) == (1.0, 5.0)",
                "assert find_closest_elements([-5.0, -2.0, 0.0, 3.0, 5.0]) == (-2.0, 0.0)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([5.0, 4.0, 3.0, 2.0, 1.0]) == [1.0, 0.75, 0.5, 0.25, 0.0]",
                "assert rescale_to_unit([10.0, 20.0]) == [0.0, 1.0]"
            ],
            "failed_tests": [
                "assert rescale_to_unit([]) == [] (ValueError: min() arg is an empty sequence)"
            ]
        }
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_integers(['a', 3.14, 5]) == [5]",
                "assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]",
                "assert filter_integers([]) == []",
                "assert filter_integers(['a', 'b', 'c']) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert strlen('') == 0",
                "assert strlen('abc') == 3",
                "assert strlen('@#$%^') == 5"
            ],
            "failed_tests": [
                "assert strlen(None) == 0 (TypeError: object of type 'NoneType' has no len())"
            ]
        }
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(15) == 5",
                "assert largest_divisor(17) == 1"
            ],
            "failed_tests": [
                "assert largest_divisor(1) == 1 (ZeroDivisionError: integer division or modulo by zero)",
                "assert largest_divisor(-20) == -1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert factorize(7) == [7]",
                "assert factorize(24) == [2, 2, 2, 3]",
                "assert factorize(1) == []"
            ],
            "failed_tests": [
                "assert factorize(-10) == [] (ValueError: math domain error)"
            ]
        }
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([]) == []",
                "assert remove_duplicates([10]) == [10]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('Hello World') == 'hELLO wORLD'",
                "assert flip_case('python') == 'PYTHON'",
                "assert flip_case('') == ''",
                "assert flip_case('AbC123!@#') == 'aBc123!@#'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate(['hello', 'world']) == 'helloworld'",
                "assert concatenate([]) == ''",
                "assert concatenate(['hello', '', 'world']) == 'helloworld'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix(['apple', 'banana', 'orange', 'grape'], 'a') == ['apple']",
                "assert filter_by_prefix(['apple', 'banana', 'orange', 'grape'], 'z') == []",
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['abc', 'abcd', 'abcde'], 'abc') == ['abc', 'abcd', 'abcde']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
                "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]",
                "assert get_positive([]) == []",
                "assert get_positive([-1, -2, -3, -4]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(7) == True",
                "assert is_prime(10) == False",
                "assert is_prime(1) == False",
                "assert is_prime(-7) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert round(find_zero([1, 2]), 2) == -0.5",
                "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0"
            ],
            "failed_tests": [
                "assert find_zero([]) == None (AssertionError: )",
                "assert find_zero([1, 2, 3]) == None (OverflowError: math range error)"
            ]
        }
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_third([1, 2, 3]) == [1, 2, 3]",
                "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]",
                "assert sort_third([]) == []",
                "assert sort_third([10]) == [10]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert has_close_elements([1.5, 2.0, 3.5], 0.6) == True (NameError: name 'has_close_elements' is not defined)",
                "assert has_close_elements([1, 10, 20], 5) == False (NameError: name 'has_close_elements' is not defined)",
                "assert has_close_elements([], 5) == False (NameError: name 'has_close_elements' is not defined)",
                "assert has_close_elements([10], 5) == False (NameError: name 'has_close_elements' is not defined)"
            ]
        }
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert max_element([1, 2, 3]) == 3",
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123",
                "assert max_element([10]) == 10"
            ],
            "failed_tests": [
                "assert max_element([]) == None (IndexError: list index out of range)"
            ]
        }
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(50) == 0",
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(0) == 0",
                "assert fizz_buzz(1) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_even([1, 3, 5, 7]) == [1, 3, 5, 7]",
                "assert sort_even([]) == []",
                "assert sort_even([10]) == [10]"
            ],
            "failed_tests": [
                "assert sort_even([1, 2, 3, 4]) == [1, 4, 3, 2] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode_cyclic('') == ''",
                "assert decode_cyclic('') == ''"
            ],
            "failed_tests": [
                "assert encode_cyclic('abcdefgh') == 'defghabc' (AssertionError: )",
                "assert decode_cyclic('defghabc') == 'abcdefgh' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(1) == 2",
                "assert prime_fib(3) == 5",
                "assert prime_fib(2) == 3"
            ],
            "failed_tests": [
                "assert prime_fib(0) == None (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, 3, -2, 1]) == True",
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
                "assert triples_sum_to_zero([]) == False",
                "assert triples_sum_to_zero([10]) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(0) == 0"
            ],
            "failed_tests": [
                "assert car_race_collision(3) == 3 (AssertionError: )",
                "assert car_race_collision(-5) == 0 (AssertionError: )",
                "assert car_race_collision(1000000) == 1000000 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert has_close_elements([1.5, 2.0, 3.5], 0.6) == True (NameError: name 'has_close_elements' is not defined)",
                "assert has_close_elements([1, 10, 20], 5) == False (NameError: name 'has_close_elements' is not defined)",
                "assert has_close_elements([], 5) == False (NameError: name 'has_close_elements' is not defined)",
                "assert has_close_elements([10], 5) == False (NameError: name 'has_close_elements' is not defined)"
            ]
        }
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([2, -2]) == True",
                "assert pairs_sum_to_zero([1, 3, 5, 7]) == False",
                "assert pairs_sum_to_zero([]) == False",
                "assert pairs_sum_to_zero([10]) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert change_base(8, 3) == '22'",
                "assert change_base(8, 2) == '1000'"
            ],
            "failed_tests": [
                "assert change_base(0, 5) == '0' (AssertionError: )",
                "assert change_base(15, 16) == 'F' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(0, 3) == 0",
                "assert triangle_area(-5, -3) == 7.5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib4(5) == 4",
                "assert fib4(7) == 14",
                "assert fib4(0) == 0",
                "assert fib4(1) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert has_close_elements([1.5, 2.0, 3.5], 0.6) == True (NameError: name 'has_close_elements' is not defined)",
                "assert has_close_elements([1, 10, 20], 5) == False (NameError: name 'has_close_elements' is not defined)",
                "assert has_close_elements([], 5) == False (NameError: name 'has_close_elements' is not defined)",
                "assert has_close_elements([10], 5) == False (NameError: name 'has_close_elements' is not defined)"
            ]
        }
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('') == True",
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('a') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert has_close_elements([1.5, 2.0, 3.5], 0.6) == True (NameError: name 'has_close_elements' is not defined)",
                "assert has_close_elements([1, 10, 20], 5) == False (NameError: name 'has_close_elements' is not defined)",
                "assert has_close_elements([], 5) == False (NameError: name 'has_close_elements' is not defined)",
                "assert has_close_elements([10], 5) == False (NameError: name 'has_close_elements' is not defined)"
            ]
        }
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_shift('hello') == 'mjqqt'",
                "assert decode_shift('mjqqt') == 'hello'",
                "assert encode_shift('') == ''",
                "assert decode_shift('') == ''"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('abcdef') == 'bcdf'",
                "assert remove_vowels('aaBAA') == 'B'",
                "assert remove_vowels('') == ''",
                "assert remove_vowels('aaaaa') == ''"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 4, 10], 100) == True",
                "assert below_threshold([1, 20, 4, 10], 5) == False",
                "assert below_threshold([], 5) == True",
                "assert below_threshold([3], 5) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(2, 3) == 5",
                "assert add(-5, 3) == -2",
                "assert add(0, 5) == 5",
                "assert add(0, 0) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('abcd', 'dcba') == True",
                "assert same_chars('hello', 'world') == False",
                "assert same_chars('', '') == True",
                "assert same_chars('!@#$', '$#@!') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(5) == 5",
                "assert fib(0) == 0",
                "assert fib(1) == 1",
                "assert fib(20) == 6765"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing('<>') == True",
                "assert correct_bracketing('><') == False",
                "assert correct_bracketing('') == True",
                "assert correct_bracketing('<') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 2, 4, 20]) == True",
                "assert monotonic([1, 20, 4, 10]) == False",
                "assert monotonic([]) == True",
                "assert monotonic([10]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
                "assert common([5, 3, 2, 8], [10, 7, 6]) == []",
                "assert common([], []) == []",
                "assert common([], [1, 2, 3]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(13195) == 29",
                "assert largest_prime_factor(4) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(100) == 5050"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing('()') == True",
                "assert correct_bracketing(')(') == False",
                "assert correct_bracketing('') == True",
                "assert correct_bracketing('((((') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
                "assert derivative([1, 2, 3]) == [2, 6]",
                "assert derivative([]) == []",
                "assert derivative([5]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(0) == 0",
                "assert fibfib(5) == 4",
                "assert fibfib(1) == 0",
                "assert fibfib(2) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count('apple') == 2",
                "assert vowels_count('elephant') == 3",
                "assert vowels_count('sky') == 1"
            ],
            "failed_tests": [
                "assert vowels_count('') == 0 (IndexError: string index out of range)"
            ]
        }
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12345, 1) == '51234'",
                "assert circular_shift(12345, 2) == '45123'",
                "assert circular_shift(12345, 6) == '54321'",
                "assert circular_shift(7, 3) == '7'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert digitSum('') == 0",
                "assert digitSum('abcd') == 0",
                "assert digitSum('!@#$%^') == 0"
            ],
            "failed_tests": [
                "assert digitSum('ABCD') == 286 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution('5 apples and 6 oranges', 19) == 8",
                "assert fruit_distribution('0 apples and 1 oranges', 3) == 2",
                "assert fruit_distribution('0 apples and 0 oranges', 10) == 10",
                "assert fruit_distribution('5 apples and 0 oranges', 5) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert pluck([4, 2, 3]) == [2, 1]",
                "assert pluck([1, 3, 5]) == []",
                "assert pluck([]) == []"
            ],
            "failed_tests": [
                "assert pluck([10]) == [] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert search([4, 1, 2, 2, 3, 1]) == 2",
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
                "assert search([5]) == -1"
            ],
            "failed_tests": [
                "assert search([]) == -1 (ValueError: max() arg is an empty sequence)"
            ]
        }
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([10]) == [10]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(3, 4, 5) == 6.00",
                "assert triangle_area(1, 2, 10) == -1",
                "assert triangle_area(1, 2, 3) == -1",
                "assert triangle_area(-3, 4, 5) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([1, 2], 5) == False",
                "assert will_it_fly([3], 5) == True"
            ],
            "failed_tests": [
                "assert will_it_fly([], 5) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([]) == 0",
                "assert smallest_change([1, 2, 3, 2, 1]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']",
                "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']",
                "assert total_match([], []) == []",
                "assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(1) == False"
            ],
            "failed_tests": [
                "assert is_multiply_prime(20) == False (AssertionError: )",
                "assert is_multiply_prime(99) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(1, 4) == True",
                "assert is_simple_power(8, 2) == True",
                "assert is_simple_power(0, 5) == False"
            ],
            "failed_tests": [
                "assert is_simple_power(3, 0) == False (TimeoutError: Test case execution exceeded 10 seconds)"
            ]
        }
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(27) == True",
                "assert iscube(10) == False",
                "assert iscube(1) == True",
                "assert iscube(-8) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert hex_key('AB') == 1",
                "assert hex_key('1077E') == 2",
                "assert hex_key('') == 0"
            ],
            "failed_tests": [
                "assert hex_key('2020') == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(5) == 'db101db'",
                "assert decimal_to_binary(25) == 'db11001db'",
                "assert decimal_to_binary(0) == 'db0db'",
                "assert decimal_to_binary(1) == 'db1db'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy('abc') == True",
                "assert is_happy('aab') == False",
                "assert is_happy('') == False",
                "assert is_happy('ab') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
                "assert numerical_letter_grade([]) == []",
                "assert numerical_letter_grade([4.0, 0.0]) == ['A+', 'E']"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([3.2, 3.8, 2.5, 2.9]) == ['B', 'A', 'C+', 'B-'] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('Hello') == True",
                "assert prime_length('orange') == False",
                "assert prime_length('') == False",
                "assert prime_length('a' * 9973) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert starts_one_ends(3) == 20 (AssertionError: )",
                "assert starts_one_ends(1) == 2 (AssertionError: )",
                "assert starts_one_ends(0) == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solve(1000) == '1'",
                "assert solve(150) == '110'",
                "assert solve(0) == '0'"
            ],
            "failed_tests": [
                "assert solve(10000) == '10000' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2",
                "assert add([1, 3, 5, 7]) == 0",
                "assert add([]) == 0",
                "assert add([5]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('hello') == 'ehllo'",
                "assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'",
                "assert anti_shuffle('') == ''",
                "assert anti_shuffle('H') == 'H'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
                "assert get_row([], 1) == []",
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]",
                "assert get_row([[], [], []], 1) == []",
                "assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([]) == []",
                "assert sort_array([5]) == [5]",
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
                "assert sort_array([0, 0, 0, 0]) == [0, 0, 0, 0]"
            ],
            "failed_tests": [
                "assert sort_array([1000, 500, 200, 100, 50, 20]) == [1000, 500, 200, 50, 20, 100] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encrypt('hi') == 'lm'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('') == ''"
            ],
            "failed_tests": [
                "assert encrypt('a') == 'c' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([1, 2, 3, 4, 5]) == 2",
                "assert next_smallest([5, 1, 4, 3, 2]) == 2",
                "assert next_smallest([]) == None",
                "assert next_smallest([10]) == None"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_bored('Hello world') == 0",
                "assert is_bored('The sky is blue. The sun is shining. I love this weather') == 1",
                "assert is_bored('') == 0",
                "assert is_bored('No boredoms here. Just a regular sentence.') == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(5, 2, 7) == True",
                "assert any_int(3, 2, 2) == False",
                "assert any_int(3, -2, 1) == True",
                "assert any_int(3.6, -2.2, 2) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('') == ''",
                "assert encode('12345') == '12345'"
            ],
            "failed_tests": [
                "assert encode('Hello World') == 'hELLO wORLD' (AssertionError: )",
                "assert encode('aeiou') == 'AEIOU' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([]) == 0",
                "assert skjkasdkd([5]) == 5"
            ],
            "failed_tests": [
                "assert skjkasdkd([3, 5, 7, 181]) == 17 (AssertionError: )",
                "assert skjkasdkd([0, 2, 4, 6, 8]) == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({'name': 'john', 'age': '36', 'city': 'houston'}) == True",
                "assert check_dict_case({'STATE': 'NC', 'ZIP': '12345'}) == True",
                "assert check_dict_case({}) == False",
                "assert check_dict_case({'Name': 'John', 'Age': '36', 'City': 'Houston'}) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(5) == [2, 3]",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(0) == []",
                "assert count_up_to(1) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert multiply(148, 412) == 16",
                "assert multiply(19, 28) == 72",
                "assert multiply(14, -15) == 20",
                "assert multiply(2020, 1851) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_upper('aBCdEf') == 1",
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('') == 0",
                "assert count_upper('dBBE') == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert closest_integer('10') == 10",
                "assert closest_integer('15.3') == 15",
                "assert closest_integer('14.5') == 15",
                "assert closest_integer('-14.5') == -15"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(3) == [3, 5, 7]",
                "assert make_a_pile(4) == [4, 6, 8, 10]",
                "assert make_a_pile(1) == [1]"
            ],
            "failed_tests": [
                "assert make_a_pile(10**6) == [1000000, 1000002, ..., 1000000 + 2*(10**6 - 1)] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']",
                "assert words_string('One two three four five six') == ['One', 'two', 'three', 'four', 'five', 'six']",
                "assert words_string('') == []",
                "assert words_string('Hello') == ['Hello']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert choose_num(10, 20) == 20",
                "assert choose_num(15, 10) == -1",
                "assert choose_num(8, 8) == 8"
            ],
            "failed_tests": [
                "assert choose_num(11, 15) == -1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(1, 5) == '0b11'",
                "assert rounded_avg(7, 5) == -1",
                "assert rounded_avg(10, 10) == '0b1010'",
                "assert rounded_avg(20, 19) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([152, 323, 1422, 10]) == []",
                "assert unique_digits([]) == []",
                "assert unique_digits([20]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']",
                "assert by_length([]) == []",
                "assert by_length([1, -1, 55]) == ['One']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(5) == [1, 2, 6, 24, 15]",
                "assert f(0) == []",
                "assert f(1) == [1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(3) == (1, 2)",
                "assert even_odd_palindrome(12) == (4, 6)",
                "assert even_odd_palindrome(1) == (0, 1)"
            ],
            "failed_tests": [
                "assert even_odd_palindrome(1000) == (45, 55) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_nums([123, 456, 789]) == 3",
                "assert count_nums([-123, -456, -789]) == 3",
                "assert count_nums([]) == 0",
                "assert count_nums([5]) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([3, 4, 5, 1, 2]) == True",
                "assert move_one_ball([3, 5, 4, 1, 2]) == False",
                "assert move_one_ball([]) == True",
                "assert move_one_ball([10]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == 'YES'",
                "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == 'NO'",
                "assert exchange([], []) == 'YES'",
                "assert exchange([1], [2]) == 'YES'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('a b b a') == {'a': 2, 'b': 2}",
                "assert histogram('') == {}",
                "assert histogram('a') == {'a': 1}"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete('abcde', 'ae') == ('bcd', False)",
                "assert reverse_delete('abcdedcba', 'ab') == ('cdedc', True)",
                "assert reverse_delete('', 'ae') == ('', True)",
                "assert reverse_delete('abcde', 'abcde') == ('', True)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['2468', '0', '2']) == ['the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.']",
                "assert odd_count([]) == []",
                "assert odd_count(['']) == ['the number of odd elements 0n the str0ng 0 of the 0nput.']"
            ],
            "failed_tests": [
                "assert odd_count(['13579', '2468', '97531']) == ['the number of odd elements 5n the str5ng 5 of the 5nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 4n the str4ng 4 of the 4nput.'] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([-1, -2, -3]) == -6",
                "assert minSubArraySum([5]) == 5"
            ],
            "failed_tests": [
                "assert minSubArraySum([]) == 0 (ValueError: max() arg is an empty sequence)"
            ]
        }
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
                "assert max_fill([], 5) == 0",
                "assert max_fill([[0,0,0]], 5) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([]) == []",
                "assert sort_array([10]) == [10]"
            ],
            "failed_tests": [
                "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] (AssertionError: )",
                "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] (AssertionError: )",
                "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert select_words('Mary had a little lamb', 4) == ['little']",
                "assert select_words('Mary had a little lamb', 3) == ['Mary', 'lamb']",
                "assert select_words('', 5) == []",
                "assert select_words('simple white space', 2) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel('yogurt') == 'u'",
                "assert get_closest_vowel('FULL') == 'U'",
                "assert get_closest_vowel('') == ''",
                "assert get_closest_vowel('ab') == ''"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['()(', ')']) == 'Yes'",
                "assert match_parens([')', ')']) == 'No'",
                "assert match_parens(['', '()']) == 'Yes'"
            ],
            "failed_tests": [
                "assert match_parens([]) == 'No' (IndexError: list index out of range)"
            ]
        }
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
                "assert maximum([4, -4, 4], 2) == [4, 4]",
                "assert maximum([-3, 2, 1, 2, -1, -2, 1], 0) == []",
                "assert maximum([], 5) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9",
                "assert solution([]) == 0",
                "assert solution([10]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
                "assert add_elements([50, 60, 70, 80, 90], 3) == 180",
                "assert add_elements([], 5) == 0",
                "assert add_elements([11, 22, 33, 44], 4) == 110"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(5) == [1, 5]",
                "assert get_odd_collatz(1) == [1]"
            ],
            "failed_tests": [
                "assert get_odd_collatz(10) == [1, 5, 13, 21, 27] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert valid_date('03-11-2000') == True",
                "assert valid_date('06/04/2020') == False",
                "assert valid_date('') == False",
                "assert valid_date('04-31-2020') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert split_words('Hello world!') == ['Hello', 'world!']",
                "assert split_words('Hello,world!') == ['Hello', 'world!']",
                "assert split_words('abcdef') == 3",
                "assert split_words('') == 0",
                "assert split_words('zyxwvutsrqponmlkjihgfedcba') == 13"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([1, 2, 3, 4, 5]) == True",
                "assert is_sorted([1, 3, 2, 4, 5]) == False",
                "assert is_sorted([]) == True",
                "assert is_sorted([5]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersection((1, 2), (2, 3)) == 'NO'",
                "assert intersection((-1, 1), (0, 4)) == 'NO'",
                "assert intersection((-3, -1), (-5, 5)) == 'YES'",
                "assert intersection((1, 3), (4, 6)) == 'NO'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([1, 2, 2, -4]) == -9",
                "assert prod_signs([0, 1]) == 0",
                "assert prod_signs([]) == None",
                "assert prod_signs([0]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 3) == [1, 2, 1]",
                "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
                "assert minPath([[1,2], [3,4]], 1) == [1]"
            ],
            "failed_tests": [
                "assert minPath([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]], 4) == [1, 2, 3, 4] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert tri(3) == [1, 3, 2, 8]",
                "assert tri(1) == [1, 3]"
            ],
            "failed_tests": [
                "assert tri(0) == [0] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digits(235) == 15",
                "assert digits(468) == 0",
                "assert digits(0) == 0",
                "assert digits(1111) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[[]]') == True",
                "assert is_nested('[]]]]]]][[[[[]') == False",
                "assert is_nested('') == False",
                "assert is_nested('[') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 14",
                "assert sum_squares([1, 4, 9]) == 98",
                "assert sum_squares([]) == 0",
                "assert sum_squares([5]) == 25"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter('apple pie') == False",
                "assert check_if_last_char_is_a_letter('apple pi e') == True",
                "assert check_if_last_char_is_a_letter('') == False",
                "assert check_if_last_char_is_a_letter('apple pi e ') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1, 2, 4, 3, 5]) == 3",
                "assert can_arrange([1, 2, 3]) == -1",
                "assert can_arrange([]) == -1",
                "assert can_arrange([10]) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([-2, 4, -1, 3, 5, 7]) == (-1, 3)",
                "assert largest_smallest_integers([-10, -4, -1, -3, -5, -7]) == (-1, None)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([0]) == (None, None)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(5, 3) == 5",
                "assert compare_one(2.5, 1.8) == 2.5",
                "assert compare_one(10, 10) == None",
                "assert compare_one('3.0', '3.0') == None"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(8) == True",
                "assert is_equal_to_sum_even(4) == False",
                "assert is_equal_to_sum_even(2) == False",
                "assert is_equal_to_sum_even(4) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(4) == 288",
                "assert special_factorial(1) == 1",
                "assert special_factorial(0) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces('Hello World') == 'Hello_World'",
                "assert fix_spaces('Python   Coding') == 'Python-Coding'",
                "assert fix_spaces('') == ''"
            ],
            "failed_tests": [
                "assert fix_spaces('   ') == '---' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check('example.txt') == 'Yes'",
                "assert file_name_check('1example.dll') == 'No'",
                "assert file_name_check('') == 'No'",
                "assert file_name_check('file1234.txt') == 'No'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([]) == 0",
                "assert sum_squares([-1, -5, 2, -1, -5]) == -126"
            ],
            "failed_tests": [
                "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 441 (AssertionError: )",
                "assert sum_squares([10]) == 10 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence('This is a test') == 'is'",
                "assert words_in_sentence('') == ''"
            ],
            "failed_tests": [
                "assert words_in_sentence('Hello world') == '' (AssertionError: )",
                "assert words_in_sentence('Python') == 'Python' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert simplify('1/5', '5/1') == True",
                "assert simplify('1/6', '2/1') == False",
                "assert simplify('2/4', '4/2') == True"
            ],
            "failed_tests": [
                "assert simplify('999/1000', '1000/999') == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]",
                "assert order_by_points([]) == []",
                "assert order_by_points([5]) == [5]"
            ],
            "failed_tests": [
                "assert order_by_points([-999, -888, -777, -666]) == [-999, -888, -777, -666] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2",
                "assert specialFilter([]) == 0",
                "assert specialFilter([8]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(1) == 0",
                "assert get_max_triples(0) == 0"
            ],
            "failed_tests": [
                "assert get_max_triples(3) == 1 (AssertionError: )",
                "assert get_max_triples(6) == 3 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert bf('Jupiter', 'Neptune') == ('Saturn', 'Uranus')",
                "assert bf('Pluto', 'Mars') == ()",
                "assert bf('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')"
            ],
            "failed_tests": [
                "assert bf('Earth', 'Mercury') == ('Venus') (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert list_sort(['aa', 'a', 'aaa']) == ['aa'] (NameError: name 'list_sort' is not defined)",
                "assert list_sort(['ab', 'a', 'aaa', 'cd']) == ['ab', 'cd'] (NameError: name 'list_sort' is not defined)",
                "assert list_sort([]) == [] (NameError: name 'list_sort' is not defined)",
                "assert list_sort(['hello']) == ['hello'] (NameError: name 'list_sort' is not defined)"
            ]
        }
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(7, 34, 12) == 34",
                "assert x_or_y(15, 8, 5) == 5",
                "assert x_or_y(1, 10, 20) == 20"
            ],
            "failed_tests": [
                "assert x_or_y(-5, 3, 7) == 7 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([1, 3, 2, 0]) == 10",
                "assert double_the_difference([-1, -2, 0]) == 0",
                "assert double_the_difference([]) == 0",
                "assert double_the_difference([-5]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1, 2, 3, 4], [1, 2, 3, 4]) == [0, 0, 0, 0]",
                "assert compare([1, 2, 3, 4], [5, 6, 7, 8]) == [4, 4, 4, 4]",
                "assert compare([], []) == []",
                "assert compare([10], [10]) == [0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
                "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('my_class', []) == 'my_class.' (IndexError: list index out of range)"
            ]
        }
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check('hello', 'ell') == True",
                "assert cycpattern_check('abcd', 'abd') == False",
                "assert cycpattern_check('abab', 'baa') == True"
            ],
            "failed_tests": [
                "assert cycpattern_check('', '') == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(24681357) == (4, 4)",
                "assert even_odd_count(-135792468) == (4, 5)",
                "assert even_odd_count(0) == (1, 0)",
                "assert even_odd_count(8) == (1, 0)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(19) == 'xix'",
                "assert int_to_mini_roman(1) == 'i'",
                "assert int_to_mini_roman(1000) == 'm'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(1, 2, 3) == False",
                "assert right_angle_triangle(3.0, 4.0, 5.0) == True",
                "assert right_angle_triangle(0, 4, 5) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_max(['name', 'of', 'string']) == 'string'",
                "assert find_max(['name', 'enam', 'game']) == 'enam'",
                "assert find_max(['hello']) == 'hello'"
            ],
            "failed_tests": [
                "assert find_max([]) == '' (IndexError: list index out of range)"
            ]
        }
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert eat(5, 6, 10) == [11, 4]",
                "assert eat(4, 8, 9) == [12, 1]",
                "assert eat(1, 10, 0) == [1, 0]"
            ],
            "failed_tests": [
                "assert eat(2, 0, 5) == [2, 3] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['+', '*'], [2, 3, 4, 5]) == 14",
                "assert do_algebra(['+'], [2, 3]) == 5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve('aBcD') == 'AbCd'",
                "assert solve('1234') == '4321'",
                "assert solve('') == ''",
                "assert solve('a') == 'A'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('') == None"
            ],
            "failed_tests": [
                "assert string_to_md5('Python is awesome') == 'b6f3d3b7f3b1f3c7b4b4b4b4b4b4b4b4b4b4' (AssertionError: )",
                "assert string_to_md5('@#$%^&*()') == 'f7b7e3f7b7e3f7b7e3f7b7e3f7b7e3' (AssertionError: )",
                "assert string_to_md5('a' * 1000000) == 'f7b7e3f7b7e3f7b7e3f7b7e3f7b7e3' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(2, 8) == [2, 4, 6, 8]",
                "assert generate_integers(8, 2) == [2, 4, 6, 8]",
                "assert generate_integers(10, 14) == []",
                "assert generate_integers(6, 6) == [6]"
            ],
            "failed_tests": []
        }
    }
]