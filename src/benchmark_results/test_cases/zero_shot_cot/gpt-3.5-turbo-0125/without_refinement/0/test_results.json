[
    {
        "task_id": "HumanEval/0",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([], 0.5) == False",
                "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
                "assert has_close_elements([5.0], 0.1) == False",
                "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('((()))') == ['((()))']",
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('') == []"
            ],
            "failed_tests": [
                "assert separate_paren_groups('abc') == [''] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(5.0) == 0.0"
            ],
            "failed_tests": [
                "assert truncate_number(3.14159) == 0.14159 (AssertionError: )",
                "assert truncate_number(7.999) == 0.999 (AssertionError: )",
                "assert truncate_number(1234.56789) == 0.56789 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([]) == False",
                "assert below_zero([100]) == False",
                "assert below_zero([1, 2, 3]) == False",
                "assert below_zero([-10]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1, 2, 3, 4, 5]) == 1.2",
                "assert mean_absolute_deviation([-1.5, -2.5, -3.5, -4.5]) == 1.0",
                "assert mean_absolute_deviation([3, 3, 3, 3, 3]) == 0.0"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([-2, 4, -6, 8, -10]) == 5.6 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([1, 2], 9) == [1, 9, 2]",
                "assert intersperse([3, 6, 9], -1) == [3, -1, 6, -1, 9]",
                "assert intersperse([10, 20, 30, 40], 99) == [10, 99, 20, 99, 30, 99, 40]",
                "assert intersperse([], 4) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('') == []",
                "assert parse_nested_parens('()') == [1]",
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]"
            ],
            "failed_tests": [
                "assert parse_nested_parens('    ') == [0] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring([], 'a') == []",
                "assert filter_by_substring(['programming', 'python', 'java'], 'a') == ['programming', 'java']",
                "assert filter_by_substring(['xyz', '123', 'lmn'], 'a') == []",
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([1, 2, 3, 4]) == (10, 24)",
                "assert sum_product([-1, 2, -3, 4]) == (2, 24)"
            ],
            "failed_tests": [
                "assert sum_product([-1, -2, -3, -4]) == (-10, -24) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([-1, -2, -3, -2, -3, -4, -2]) == [-1, -1, -1, -1, -1, -1, -1]",
                "assert rolling_max([1, 3, 2, 4, 3, 5]) == [1, 3, 3, 4, 4, 5]",
                "assert rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('a') == True",
                "assert is_palindrome('hello') == False",
                "assert make_palindrome('cata') == 'catac'",
                "assert is_palindrome('') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_xor('000', '000') == '000'",
                "assert string_xor('101', '111') == '010'"
            ],
            "failed_tests": [
                "assert string_xor('01', '001') == '000' (AssertionError: )",
                "assert string_xor('110', '10') == '100' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest([]) == None",
                "assert longest(['a', 'bb', 'ccc']) == 'ccc'",
                "assert longest(['a', 'b', 'c']) == 'a'",
                "assert longest(['only']) == 'only'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(12, 12) == 12",
                "assert greatest_common_divisor(-24, 18) == 6",
                "assert greatest_common_divisor(0, 8) == 8",
                "assert greatest_common_divisor(3, 5) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('a') == ['a']",
                "assert all_prefixes('ab') == ['a', 'ab']",
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']"
            ],
            "failed_tests": [
                "assert all_prefixes('') == [''] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(0) == '0'",
                "assert string_sequence(5) == '0 1 2 3 4 5'",
                "assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('hello') == 4",
                "assert count_distinct_characters('') == 0"
            ],
            "failed_tests": [
                "assert count_distinct_characters('abcABC') == 6 (AssertionError: )",
                "assert count_distinct_characters('WORLD') == 4 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o o o o') == [4, 4, 4, 4]",
                "assert parse_music('o| o| o| o|') == [2, 2, 2, 2]"
            ],
            "failed_tests": [
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4] (AssertionError: )",
                "assert parse_music('o o|  .|o|o|.|.|.|. |o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4] (KeyError: '.|o|o|.|.|.|.')"
            ]
        }
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('python', 'python') == 1",
                "assert how_many_times('aaaa', 'aa') == 3",
                "assert how_many_times('aaa', 'a') == 3",
                "assert how_many_times('hello', 'hello world') == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('zero one two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'",
                "assert sort_numbers('three one five') == 'one three five'",
                "assert sort_numbers('seven') == 'seven'",
                "assert sort_numbers('one three five') == 'one three five'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([-5.0, -3.0, 0.0, 2.0, 4.0, 1.0]) == (0.0, 1.0)",
                "assert find_closest_elements([10.0, 5.0]) == (5.0, 10.0)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([3.0, 3.0, 3.0, 3.0, 3.0]) == (3.0, 3.0)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([0.0, 0.2, 0.4, 0.6, 0.8, 1.0]) == [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]",
                "assert rescale_to_unit([5.0, 10.0, 15.0, 20.0]) == [0.0, 0.3333333333333333, 0.6666666666666666, 1.0]",
                "assert rescale_to_unit([-10.0, -5.0, 0.0, 5.0, 10.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
            ],
            "failed_tests": [
                "assert rescale_to_unit([3.0, 3.0, 3.0, 3.0]) == [0.0, 0.0, 0.0, 0.0] (ZeroDivisionError: float division by zero)"
            ]
        }
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_integers([10, 20, 30, 40]) == [10, 20, 30, 40]",
                "assert filter_integers([]) == []",
                "assert filter_integers(['abc', {}, []]) == []",
                "assert filter_integers([-1, -2, -3, -4]) == [-1, -2, -3, -4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('') == 0",
                "assert strlen('a') == 1",
                "assert strlen('hello') == 5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(7) == 1",
                "assert largest_divisor(10) == 5",
                "assert largest_divisor(25) == 5",
                "assert largest_divisor(36) == 18"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(125) == [5, 5, 5]",
                "assert factorize(25) == [5, 5]",
                "assert factorize(90) == [2, 3, 3, 5]",
                "assert factorize(72) == [2, 2, 2, 3, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([]) == []",
                "assert remove_duplicates([-1, 2, -1, 3, 4, 2, -5]) == [3, 4, -5]",
                "assert remove_duplicates([1, 2, 3, 2, 4, 3, 5, 5]) == [1, 4]"
            ],
            "failed_tests": [
                "assert remove_duplicates([1, 1, 1, 1, 1]) == [1] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('Hello123') == 'hELLO123'",
                "assert flip_case('HELLO') == 'hello'",
                "assert flip_case('Hello!') == 'hELLO!'",
                "assert flip_case('') == ''"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate([]) == ''",
                "assert concatenate(['hello']) == 'hello'",
                "assert concatenate(['a', 'b', 'c']) == 'abc'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'z') == []",
                "assert filter_by_prefix(['apple', 'banana', 'orange', 'kiwi'], 'o') == ['orange']",
                "assert filter_by_prefix(['abc', 'array'], 'a') == ['abc', 'array']",
                "assert filter_by_prefix([], 'a') == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
                "assert get_positive([-1, -2, -3, -4, -5]) == []",
                "assert get_positive([0, 1, 0, 2, 0]) == [1, 2]",
                "assert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(1) == False",
                "assert is_prime(13441) == True",
                "assert is_prime(4) == False",
                "assert is_prime(11) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert round(find_zero([1, 2]), 2) == -0.5",
                "assert poly([1, 2, 3, 4], 2) == 49",
                "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0",
                "assert poly([1, 2], 3) == 7"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_third([3, 6, 3, 6, 9, 3]) == [3, 6, 3, 6, 9, 3]",
                "assert sort_third([]) == []",
                "assert sort_third([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]"
            ],
            "failed_tests": [
                "assert sort_third([9, 6, 3]) == [3, 6, 9] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert unique([]) == []",
                "assert unique([-5, -3, -5, -2, -3, -3, -9, 0, -123]) == [-123, -9, -5, -3, -2, 0]",
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]"
            ],
            "failed_tests": [
                "assert unique([5, 'a', 3.14, True, 'a', 5]) == [3.14, 5, True, 'a'] (TypeError: '<' not supported between instances of 'str' and 'int')"
            ]
        }
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123",
                "assert max_element([1, 2, 3]) == 3",
                "assert max_element([5, 3, 9, 5, 9, 5]) == 9",
                "assert max_element([-5, -3, -9, -1, -10]) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(50) == 0",
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(79) == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_even([1, 3, 5, 7]) == [1, 3, 5, 7]",
                "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]"
            ],
            "failed_tests": [
                "assert sort_even([-5, -2, -3, -4]) == [-3, -2, -5, -4] (AssertionError: )",
                "assert sort_even([4, 2, 6, 8]) == [2, 4, 6, 8] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode_cyclic(\"\") == \"\""
            ],
            "failed_tests": [
                "assert encode_cyclic(\"abcdef\") == \"bcdaef\" (AssertionError: )",
                "assert encode_cyclic(\"abcde\") == \"bcdea\" (AssertionError: )",
                "assert decode_cyclic(\"bcdaef\") == \"abcdef\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(1) == 2",
                "assert prime_fib(3) == 5",
                "assert prime_fib(2) == 3",
                "assert prime_fib(4) == 13"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True",
                "assert triples_sum_to_zero([1]) == False",
                "assert triples_sum_to_zero([]) == False",
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(0) == 0",
                "assert car_race_collision(1) == 1"
            ],
            "failed_tests": [
                "assert car_race_collision(4) == 4 (AssertionError: )",
                "assert car_race_collision(3) == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([2, 2, 2, 2]) == [3, 3, 3, 3]",
                "assert incr_list([-1, 0, 1, -5, 5]) == [0, 1, 2, -4, 6]",
                "assert incr_list([]) == []",
                "assert incr_list([-3, -2, -1]) == [-2, -1, 0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([1]) == False",
                "assert pairs_sum_to_zero([1, 3, 5, 7]) == False",
                "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True",
                "assert pairs_sum_to_zero([0, 0, 1, 2]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert change_base(8, 3) == '22'",
                "assert change_base(8, 2) == '1000'",
                "assert change_base(7, 2) == '111'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(0, 10) == 0",
                "assert triangle_area(7.5, 2) == 7.5",
                "assert triangle_area(4.2, 6.7) == 14.07"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib4(0) == 0",
                "assert fib4(3) == 0",
                "assert fib4(5) == 4",
                "assert fib4(2) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([42]) == 42",
                "assert median([3, 1, 2, 4, 5]) == 3"
            ],
            "failed_tests": [
                "assert median([]) is None (IndexError: list index out of range)",
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('') == True",
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('aaaaa') == True",
                "assert is_palindrome('zbcd') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(1101, 101) == 2",
                "assert modp(100, 101) == 1",
                "assert modp(3, 11) == 8",
                "assert modp(3, 5) == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert decode_shift(\"mjqqt\") == \"hello\""
            ],
            "failed_tests": [
                "assert encode_shift(\"hello!123\") == \"mjqqt!123\" (AssertionError: )",
                "assert decode_shift(\"mjqqt btwqi\") == \"hello world\" (AssertionError: )",
                "assert encode_shift(\"hello world\") == \"mjqqt btwqi\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('aaaaa') == ''",
                "assert remove_vowels('abcdef') == 'bcdf'",
                "assert remove_vowels('aaBAA') == 'B'",
                "assert remove_vowels('zbcd') == 'zbcd'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 4, 10], 100) == True",
                "assert below_threshold([1, 20, 4, 10], 5) == False",
                "assert below_threshold([], 10) == True",
                "assert below_threshold([-1, -2, -3], -5) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(2, 3) == 5",
                "assert add(-5, 7) == 2",
                "assert add(-10, -3) == -13"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('abcd', 'dddddddabce') == False",
                "assert same_chars('eabcd', 'dddddddabc') == False",
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib(0) == 0",
                "assert fib(5) == 5",
                "assert fib(1) == 1"
            ],
            "failed_tests": [
                "assert fib(-10) == -55 (RecursionError: maximum recursion depth exceeded in comparison)"
            ]
        }
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"<\") == False",
                "assert correct_bracketing(\"<>\") == True",
                "assert correct_bracketing(\"<<><>>\") == True",
                "assert correct_bracketing(\"><<>\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([4, 1, 0, -10]) == True",
                "assert monotonic([1, 2, 4, 20]) == True",
                "assert monotonic([]) == True",
                "assert monotonic([5]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([], []) == []",
                "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]",
                "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
                "assert common([1, 2, 3], []) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(13195) == 29",
                "assert largest_prime_factor(2048) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(10) == 55",
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(100) == 5050",
                "assert sum_to_n(1) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"()\") == True",
                "assert correct_bracketing(\")(()\") == False",
                "assert correct_bracketing(\"(\") == False",
                "assert correct_bracketing(\"(()())\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([3, 2]) == [2]",
                "assert derivative([1, 2, 3]) == [2, 6]",
                "assert derivative([5]) == []",
                "assert derivative([0, 0, 0]) == [0, 0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(2) == 1",
                "assert fibfib(5) == 4",
                "assert fibfib(1) == 0",
                "assert fibfib(0) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"aeiouy\") == 6",
                "assert vowels_count(\"happy\") == 2",
                "assert vowels_count(\"sky\") == 1"
            ],
            "failed_tests": [
                "assert vowels_count(\"cry\") == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12, 1) == \"21\"",
                "assert circular_shift(5, 1) == \"5\"",
                "assert circular_shift(5, 2) == \"5\"",
                "assert circular_shift(1234, 5) == \"4321\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"abc\") == 0"
            ],
            "failed_tests": [
                "assert digitSum(\"ABC\") == 195 (AssertionError: )",
                "assert digitSum(\"aBcDeF\") == 321 (AssertionError: )",
                "assert digitSum(\"123ABC456\") == 195 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
                "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
                "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95",
                "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([4, 2, 3]) == [2, 1]",
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
                "assert pluck([1, 3, 5]) == []",
                "assert pluck([]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert search([1, 1, 2, 2, 2, 3, 3, 3, 3]) == 3"
            ],
            "failed_tests": [
                "assert search([-1, -1, -2, -2, -3, -3]) == -1 (IndexError: list index out of range)",
                "assert search([4, 4, 4, 4]) == -1 (AssertionError: )",
                "assert search([5, 5, 5, 5]) == 5 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([-3, 0, 2, -5]) == [-5, 2, -3, 0]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(3, 4, 5) == 6.00",
                "assert triangle_area(5, 12, 13) == 30.00",
                "assert triangle_area(1, 2, 10) == -1",
                "assert triangle_area(5, 5, 10) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([], 10) == True",
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([3, 2, 3], 1) == False",
                "assert will_it_fly([1, 2], 5) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([5]) == 0",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4",
                "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']",
                "assert total_match([], []) == []",
                "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']",
                "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(1) == False",
                "assert is_multiply_prime(210) == False",
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(17) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(3, 2) == False",
                "assert is_simple_power(8, 2) == True",
                "assert is_simple_power(3, 1) == False",
                "assert is_simple_power(1, 4) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(1) == True",
                "assert iscube(2) == False",
                "assert iscube(64) == True",
                "assert iscube(180) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"ABED1A33\") == 4",
                "assert hex_key(\"1077E\") == 2",
                "assert hex_key(\"2020\") == 2",
                "assert hex_key(\"123456789ABCDEF0\") == 6"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(1) == \"db1db\"",
                "assert decimal_to_binary(10) == \"db1010db\"",
                "assert decimal_to_binary(255) == \"db11111111db\"",
                "assert decimal_to_binary(0) == \"db0db\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy('adb') == True",
                "assert is_happy('aabb') == False",
                "assert is_happy('abc') == True",
                "assert is_happy('aaa') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']",
                "assert numerical_letter_grade([]) == []"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([2.5]) == ['C'] (AssertionError: )",
                "assert numerical_letter_grade([3.2, 3.2, 3.2, 3.2]) == ['B', 'B', 'B', 'B'] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('Hello') == True",
                "assert prime_length('abcdcba') == True",
                "assert prime_length('kittens') == True",
                "assert prime_length('orange') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert starts_one_ends(1) == 1"
            ],
            "failed_tests": [
                "assert starts_one_ends(2) == 20 (AssertionError: )",
                "assert starts_one_ends(3) == 300 (AssertionError: )",
                "assert starts_one_ends(4) == 4000 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(1000) == \"1\"",
                "assert solve(150) == \"110\"",
                "assert solve(147) == \"1100\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2",
                "assert add([5]) == 0",
                "assert add([1, 3, 5, 7]) == 0",
                "assert add([-3, 2, -6, 7]) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('') == ''",
                "assert anti_shuffle('hello') == 'ehllo'",
                "assert anti_shuffle('Hi') == 'Hi'"
            ],
            "failed_tests": [
                "assert anti_shuffle('Python 3.9 is great!') == 'Phnoty 3.9 is aegr!' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
                "assert get_row([], 1) == []",
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]",
                "assert get_row([\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n], 0) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_array([7, 7, 7, 7, 7]) == [7, 7, 7, 7, 7]",
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
                "assert sort_array([]) == []",
                "assert sort_array([5]) == [5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encrypt('hi') == 'lm'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('gf') == 'kj'"
            ],
            "failed_tests": [
                "assert encrypt('HelloWorld') == 'JgnnqYqtnf' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([5, 2, 3, 2, 4]) == 3",
                "assert next_smallest([1, 1]) == None",
                "assert next_smallest([]) == None",
                "assert next_smallest([1, 2, 3, 4, 5]) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1",
                "assert is_bored(\"I am happy. I am sad. I am bored. I am excited.\") == 4",
                "assert is_bored(\"Hello world\") == 0",
                "assert is_bored(\"This is a test. I am not bored.\") == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(5, 2, 7) == True",
                "assert any_int(3, 2, 2) == False",
                "assert any_int(3, -2, 1) == True",
                "assert any_int(3.6, -2.2, 2) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('') == ''",
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
                "assert encode('test') == 'TGST'"
            ],
            "failed_tests": [
                "assert encode('aeiou') == 'CDEFG' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13",
                "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
                "assert skjkasdkd([0,81,12,3,1,21]) == 3",
                "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({}) == False",
                "assert check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}) == False",
                "assert check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) == True",
                "assert check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(1) == []",
                "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert multiply(148, 412) == 16",
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(14, -15) == 20"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('dBBE') == 0",
                "assert count_upper('') == 0"
            ],
            "failed_tests": [
                "assert count_upper('aBCdEfGH') == 2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"14.5\") == 15",
                "assert closest_integer(\"15.5\") == 16",
                "assert closest_integer(\"-15.3\") == -15",
                "assert closest_integer(\"-15.5\") == -16"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(3) == [3, 5, 7]",
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]",
                "assert make_a_pile(10) == [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"\") == []",
                "assert words_string(\"   This    is   a   test   \") == [\"This\", \"is\", \"a\", \"test\"]",
                "assert words_string(\"Testing\") == [\"Testing\"]",
                "assert words_string(\"Red, Green Blue, Yellow\") == [\"Red\", \"Green\", \"Blue\", \"Yellow\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert choose_num(13, 12) == -1",
                "assert choose_num(4, 10) == 10"
            ],
            "failed_tests": [
                "assert choose_num(2, 6) == -1 (AssertionError: )",
                "assert choose_num(3, 7) == -1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(1, 5) == \"0b11\"",
                "assert rounded_avg(7, 5) == -1",
                "assert rounded_avg(10, 20) == \"0b1111\"",
                "assert rounded_avg(20, 33) == \"0b11010\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([]) == []"
            ],
            "failed_tests": [
                "assert unique_digits([123, 456, 789, 1357]) == [123, 1357] (AssertionError: )",
                "assert unique_digits([123456789, 987654321]) == [123456789, 987654321] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([3, 3, 3, 3]) == ['Three', 'Three', 'Three', 'Three']",
                "assert by_length([1, -1, 55]) == ['One']",
                "assert by_length([]) == []",
                "assert by_length([7]) == ['Seven']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert f(1) == [1]"
            ],
            "failed_tests": [
                "assert f(2) == [1, 3] (AssertionError: )",
                "assert f(3) == [1, 3, 6] (AssertionError: )",
                "assert f(4) == [1, 3, 6, 24] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(3) == (1, 2)",
                "assert even_odd_palindrome(12) == (4, 6)",
                "assert even_odd_palindrome(1) == (0, 1)"
            ],
            "failed_tests": [
                "assert even_odd_palindrome(100) == (18, 27) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_nums([]) == 0",
                "assert count_nums([-1, 11, -11]) == 1",
                "assert count_nums([1, 1, 2]) == 3"
            ],
            "failed_tests": [
                "assert count_nums([-1, -11, -111]) == 3 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([]) == True",
                "assert move_one_ball([1, 2, 3, 4, 5]) == True",
                "assert move_one_ball([3, 4, 5, 1, 2]) == True",
                "assert move_one_ball([3, 5, 4, 1, 2]) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
                "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"",
                "assert exchange([1], [2]) == \"YES\"",
                "assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"YES\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c a b') == {'a': 2, 'b': 2}",
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('a b b a') == {'a': 2, 'b': 2}",
                "assert histogram('') == {}"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
                "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)",
                "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['13579']) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\"]",
                "assert odd_count(['24680']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['13579', '24680', '123456789']) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\",\n                                                   \"the number of odd elements 0n the str0ng 0 of the 0nput.\",\n                                                   \"the number of odd elements 5n the str5ng 5 of the 5nput.\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([5, 2, 8, 1]) == 1",
                "assert minSubArraySum([-1, -2, -3]) == -6",
                "assert minSubArraySum([-2, -3, -1, -5]) == -11",
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
                "assert max_fill([[1,1,1], [1,1,1]], 1) == 6",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 3) == 4"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] (AssertionError: )",
                "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] (AssertionError: )",
                "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]",
                "assert select_words(\"simple white space\", 2) == []",
                "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]"
            ],
            "failed_tests": [
                "assert select_words(\"Hello world\", 1) == [\"Hello\", \"world\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"FULL\") == \"U\"",
                "assert get_closest_vowel(\"yogurt\") == \"u\"",
                "assert get_closest_vowel(\"ab\") == \"\""
            ],
            "failed_tests": [
                "assert get_closest_vowel(\"banana\") == \"\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['())', '']) == 'No'",
                "assert match_parens(['', '']) == 'Yes'",
                "assert match_parens(['()', '']) == 'Yes'"
            ],
            "failed_tests": [
                "assert match_parens(['())', '(()']) == 'No' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert maximum([4, 1, 5, 2, 3], 2) == [4, 5]",
                "assert maximum([1, 2, 3], 3) == [1, 2, 3]",
                "assert maximum([4, 4, 4, 4], 2) == [4, 4]"
            ],
            "failed_tests": [
                "assert maximum([-3, -5, -1, -2], 2) == [-5, -3] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([2, 4, 6, 8]) == 0",
                "assert solution([30, 13, 24, 321]) == 0",
                "assert solution([]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add_elements([99, 88, 77, 66], 4) == 330",
                "assert add_elements([100, 200, 300, 400], 1) == 0"
            ],
            "failed_tests": [
                "assert add_elements([-10, -20, -30, -40, -50], 2) == -30 (AssertionError: )",
                "assert add_elements([-5, 10, -15, 20, -25], 4) == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(1) == [1]",
                "assert get_odd_collatz(20) == [1, 5]",
                "assert get_odd_collatz(10) == [1, 5]"
            ],
            "failed_tests": [
                "assert get_odd_collatz(25) == [1, 5, 13, 25] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('13-15-2021') == False",
                "assert valid_date('') == False"
            ],
            "failed_tests": [
                "assert valid_date('02-29-2023') == False (AssertionError: )",
                "assert valid_date('04-30-2023') == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"abcdef\") == 3",
                "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]"
            ],
            "failed_tests": [
                "assert split_words(\"xyz\") == 3 (AssertionError: )",
                "assert split_words(\"Python\") == [\"Python\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([1, 2, 2, 2, 3, 4]) == False",
                "assert is_sorted([1, 3, 2, 4, 5]) == False",
                "assert is_sorted([5]) == True",
                "assert is_sorted([1, 2, 3, 4, 5, 6]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert intersection((1, 2), (2, 3)) == \"NO\"",
                "assert intersection((-1, 1), (0, 4)) == \"NO\""
            ],
            "failed_tests": [
                "assert intersection((0, 5), (2, 8)) == \"NO\" (AssertionError: )",
                "assert intersection((7, 11), (10, 13)) == \"YES\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([0, 1]) == 0",
                "assert prod_signs([1, 2, 2, -4]) == -9"
            ],
            "failed_tests": [
                "assert prod_signs([2, 3, 4]) == 24 (AssertionError: )",
                "assert prod_signs([3, -5, 2, -1]) == -30 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1, 2], [3, 4]], 1) == [1]",
                "assert minPath([[1, 2], [3, 4]], 2) == [1, 2]",
                "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]"
            ],
            "failed_tests": [
                "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 3, 6] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert tri(1) == [3, 1] (AssertionError: )",
                "assert tri(0) == [3] (AssertionError: )",
                "assert tri(2) == [3, 1, 2] (AssertionError: )",
                "assert tri(4) == [3, 1, 2, 8, 13] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digits(4) == 0",
                "assert digits(123456789) == 945",
                "assert digits(0) == 0",
                "assert digits(2468) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[[]]') == True",
                "assert is_nested('[]]]]]]][[[[[]') == False",
                "assert is_nested('[]') == False",
                "assert is_nested('[[]][[') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1.4, 4.2, 0]) == 29",
                "assert sum_squares([1, 4, 9]) == 98",
                "assert sum_squares([1, 3, 5, 7]) == 84",
                "assert sum_squares([-2.4, 1, 1]) == 6"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
                "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
                "assert check_if_last_char_is_a_letter(\"\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1, 2, 4, 3, 5]) == 3",
                "assert can_arrange([2, 5]) == -1",
                "assert can_arrange([7, 3]) == 1",
                "assert can_arrange([5]) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([0]) == (None, None)",
                "assert largest_smallest_integers([5, 3, 9, 2, 7]) == (None, 2)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([-5, 3, -2, 8, 1]) == (-2, 1)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(1, 2) == 2",
                "assert compare_one(1, \"2,3\") == \"2,3\"",
                "assert compare_one(2.5, 3.7) == 3.7",
                "assert compare_one(\"10\", \"10\") == None"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(20) == True",
                "assert is_equal_to_sum_even(4) == False",
                "assert is_equal_to_sum_even(6) == False",
                "assert is_equal_to_sum_even(15) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(1) == 1",
                "assert special_factorial(2) == 2",
                "assert special_factorial(3) == 12",
                "assert special_factorial(4) == 288"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"Example\") == \"Example\"",
                "assert fix_spaces(\"Example 1\") == \"Example_1\"",
                "assert fix_spaces(\" Example 2\") == \"_Example_2\"",
                "assert fix_spaces(\" Example   3\") == \"_Example-3\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"example.pdf\") == 'No'",
                "assert file_name_check(\"example.txt\") == 'Yes'",
                "assert file_name_check(\".txt\") == 'No'",
                "assert file_name_check(\"1example.dll\") == 'No'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([]) == 0",
                "assert sum_squares([-1, -5, 2, -1, -5]) == -126"
            ],
            "failed_tests": [
                "assert sum_squares([1, 2, 3, 4, 5, 6]) == 91 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"\") == \"\"",
                "assert words_in_sentence(\"This is a test\") == \"is\"",
                "assert words_in_sentence(\"lets go for swimming\") == \"go for\""
            ],
            "failed_tests": [
                "assert words_in_sentence(\"Hello world\") == \"\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"1/6\", \"2/1\") == False",
                "assert simplify(\"7/10\", \"10/2\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([]) == []",
                "assert order_by_points([123, 456, 789]) == [123, 456, 789]",
                "assert order_by_points([123, -456, 789, -101]) == [-101, 123, -456, 789]",
                "assert order_by_points([-123, -456, -789]) == [-123, -456, -789]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2",
                "assert specialFilter([33]) == 1",
                "assert specialFilter([-33, -45, -101]) == 0",
                "assert specialFilter([15, -73, 14, -15]) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(3) == 0",
                "assert get_max_triples(1) == 0"
            ],
            "failed_tests": [
                "assert get_max_triples(10) == 4 (AssertionError: )",
                "assert get_max_triples(6) == 2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Venus\", \"Venus\") == ()",
                "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
                "assert bf(\"Pluto\", \"Mars\") == ()"
            ],
            "failed_tests": [
                "assert bf(\"Earth\", \"Mercury\") == (\"Venus\") (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([]) == []"
            ],
            "failed_tests": [
                "assert sorted_list_sum([\"hello\", \"world\", \"hello\", \"python\"]) == [\"world\"] (AssertionError: )",
                "assert sorted_list_sum([\"dog\", \"cat\", \"bat\", \"rat\"]) == [\"bat\", \"cat\", \"dog\"] (AssertionError: )",
                "assert sorted_list_sum([\"apple\", \"banana\", \"kiwi\", \"orange\"]) == [\"apple\", \"kiwi\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(15, 8, 5) == 5",
                "assert x_or_y(2, 100, 200) == 100",
                "assert x_or_y(1, 3, 4) == 4",
                "assert x_or_y(7, 34, 12) == 34"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([1, 3, 5]) == 35",
                "assert double_the_difference([2, 4, 6]) == 0",
                "assert double_the_difference([]) == 0"
            ],
            "failed_tests": [
                "assert double_the_difference([-1, -3, -5]) == 35 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [4, 2, 0, 2, 4]",
                "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]",
                "assert compare([1, 2, 3, 4, 5], [1, 4, 2, 3, 6]) == [0, 2, 1, 1, 1]",
                "assert compare([1000000, 2000000, 3000000], [1000000, 2000000, 3000000]) == [0, 0, 0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('test', ['abc', 'def', 'GHI']) == 'test.GHI'",
                "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
                "assert Strongest_Extension('MixedCase', ['aBcDeF', 'GhIjKl', 'MnOpQr']) == 'MixedCase.aBcDeF'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('multiple', ['aAa', 'bBb', 'cCc', 'DdD']) == 'multiple.aAa' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"efef\", \"eeff\") == False",
                "assert cycpattern_check(\"abcd\", \"abd\") == False",
                "assert cycpattern_check(\"abab\", \"baa\") == True",
                "assert cycpattern_check(\"hello\", \"ell\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(13579) == (0, 5)",
                "assert even_odd_count(0) == (1, 0)",
                "assert even_odd_count(123456) == (3, 3)"
            ],
            "failed_tests": [
                "assert even_odd_count(-2468) == (2, 2) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(1) == 'i'",
                "assert int_to_mini_roman(100) == 'c'",
                "assert int_to_mini_roman(1000) == 'm'"
            ],
            "failed_tests": [
                "assert int_to_mini_roman(321) == 'ccxxi' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(4, 5, 3) == True",
                "assert right_angle_triangle(1, 2, 3) == False",
                "assert right_angle_triangle(5, 3, 4) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
                "assert find_max([\"\", \"\", \"\"]) == \"\"",
                "assert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\""
            ],
            "failed_tests": [
                "assert find_max([\"hello\", \"world!\", \"python\"]) == \"world!\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert eat(0, 10, 15) == [10, 5]",
                "assert eat(5, 6, 10) == [11, 4]",
                "assert eat(1, 10, 10) == [11, 0]"
            ],
            "failed_tests": [
                "assert eat(0, 5, 0) == [5, 0] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['**'], [2, 3, 2]) == 8"
            ],
            "failed_tests": [
                "assert do_algebra(['//'], [20, 2, 4]) == 5 (AssertionError: )",
                "assert do_algebra(['*'], [2, 3, 4]) == 24 (AssertionError: )",
                "assert do_algebra(['+'], [1, 2, 3]) == 6 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"HELLO\") == \"hello\"",
                "assert solve(\"world\") == \"WORLD\"",
                "assert solve(\"1234\") == \"4321\"",
                "assert solve(\"ab\") == \"AB\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('') is None"
            ],
            "failed_tests": [
                "assert string_to_md5('Python is awesome!') == 'b6f3d8f7b3b9b1a4b7f8f3b9b3b9b1a4' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(2, 8) == [2, 4, 6, 8]",
                "assert generate_integers(6, 6) == [6]",
                "assert generate_integers(3, 9) == [4, 6, 8]",
                "assert generate_integers(10, 14) == []"
            ],
            "failed_tests": []
        }
    }
]