[
    {
        "task_id": "HumanEval/0",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
                "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
                "assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 2.0) == True",
                "assert has_close_elements([1.0, 3.0, 5.0, 7.0, 9.0], 2.0) == False",
                "assert has_close_elements([], 0.5) == False",
                "assert has_close_elements([1.0], 0.5) == False",
                "assert has_close_elements([1.0, 1.6], 0.5) == False"
            ],
            "failed_tests": [
                "assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 1.0) == True (AssertionError: )",
                "assert has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4], 0.05) == True (AssertionError: )",
                "assert has_close_elements([1.0, 1.0], 0.0) == True (AssertionError: )",
                "assert has_close_elements([1.0, 1.5], 0.5) == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('(( )) ( ) (( )( ))') == ['(())', '()', '(()())']",
                "assert separate_paren_groups('(( )) (( )( )) ( )') == ['(())', '(()())', '()']",
                "assert separate_paren_groups('(( )) (( )( ))') == ['(())', '(()())']",
                "assert separate_paren_groups('(( ))') == ['(())']",
                "assert separate_paren_groups('( )') == ['()']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(0.75) == 0.75",
                "assert truncate_number(1.0) == 0.0",
                "assert truncate_number(0.0) == 0.0"
            ],
            "failed_tests": [
                "assert truncate_number(10.99) == 0.99 (AssertionError: )",
                "assert truncate_number(123.456) == 0.456 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert below_zero([1, 2, 3]) == False",
                "assert below_zero([1, 2, -4, 5]) == True",
                "assert below_zero([1, -2, 3]) == True",
                "assert below_zero([-1, 2, 3]) == True",
                "assert below_zero([0, 0, 0]) == False",
                "assert below_zero([-1, -2, -3]) == True",
                "assert below_zero([1, 2, -3, 4]) == False",
                "assert below_zero([1, -2, 3, -4]) == True",
                "assert below_zero([1, -2, -3, 4]) == True"
            ],
            "failed_tests": [
                "assert below_zero([1, 2, 3, -6]) == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
                "assert mean_absolute_deviation([1.0, 1.0, 1.0, 1.0]) == 0.0",
                "assert mean_absolute_deviation([-1.0, 0.0, 1.0]) == 0.6666666666666666",
                "assert mean_absolute_deviation([0.0, 0.0, 0.0, 0.0]) == 0.0",
                "assert mean_absolute_deviation([1.0, -1.0, 1.0, -1.0]) == 1.0",
                "assert mean_absolute_deviation([1.5, 2.5, 3.5, 4.5]) == 1.0",
                "assert mean_absolute_deviation([-1.5, -2.5, -3.5, -4.5]) == 1.0",
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2",
                "assert mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0, -5.0]) == 1.2",
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) == 1.5",
                "assert mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0, -5.0, -6.0]) == 1.5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([], 4) == []",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
                "assert intersperse([1, 2, 3], 0) == [1, 0, 2, 0, 3]",
                "assert intersperse([1], 4) == [1]",
                "assert intersperse([1, 2], -1) == [1, -1, 2]",
                "assert intersperse([-1, -2, -3], 4) == [-1, 4, -2, 4, -3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('()') == [1]",
                "assert parse_nested_parens('((()))') == [3]",
                "assert parse_nested_parens('(()()())') == [2]",
                "assert parse_nested_parens('((()()))') == [3]",
                "assert parse_nested_parens('') == []",
                "assert parse_nested_parens('() ()') == [1, 1]",
                "assert parse_nested_parens('((())) (()())') == [3, 2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']",
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b') == ['abc', 'bacd']",
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c') == ['abc', 'bacd', 'cde']",
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'e') == ['cde']",
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'f') == []",
                "assert filter_by_substring([], 'a') == []"
            ],
            "failed_tests": [
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd') == ['bacd'] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([1, 2, 3, 4]) == (10, 24)",
                "assert sum_product([-1, -2, -3, -4]) == (-10, 24)",
                "assert sum_product([0, 0, 0, 0]) == (0, 0)",
                "assert sum_product([1, 0, 3, 0]) == (4, 0)",
                "assert sum_product([2, 2, 2, 2]) == (8, 16)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
                "assert rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
                "assert rolling_max([-1, -2, -3, -4, -5]) == [-1, -1, -1, -1, -1]",
                "assert rolling_max([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]",
                "assert rolling_max([]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('racecar') == True",
                "assert is_palindrome('python') == False",
                "assert is_palindrome('a') == True",
                "assert is_palindrome('') == True",
                "assert is_palindrome('12321') == True",
                "assert is_palindrome('12345') == False",
                "assert make_palindrome('') == ''",
                "assert make_palindrome('cat') == 'catac'",
                "assert make_palindrome('cata') == 'catac'",
                "assert make_palindrome('a') == 'a'",
                "assert make_palindrome('race') == 'racecar'",
                "assert make_palindrome('123') == '12321'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('010', '110') == '100'",
                "assert string_xor('000', '000') == '000'",
                "assert string_xor('111', '111') == '000'",
                "assert string_xor('1010', '0101') == '1111'",
                "assert string_xor('1111', '0000') == '1111'",
                "assert string_xor('0000', '1111') == '1111'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert longest(['a', 'b', 'c']) == 'a'",
                "assert longest(['a', 'bb', 'ccc']) == 'ccc'",
                "assert longest(['abc', 'de', 'f']) == 'abc'",
                "assert longest(['abc', 'def', 'ghi']) == 'abc'",
                "assert longest(['a', 'bb', 'ccc', 'dddd']) == 'dddd'",
                "assert longest([]) == None",
                "assert longest(['', '', '']) == ''"
            ],
            "failed_tests": [
                "assert longest(['', 'a', 'bb']) == 'a' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(3, 5) == 1",
                "assert greatest_common_divisor(25, 15) == 5",
                "assert greatest_common_divisor(100, 10) == 10",
                "assert greatest_common_divisor(17, 13) == 1",
                "assert greatest_common_divisor(0, 5) == 5",
                "assert greatest_common_divisor(5, 0) == 5",
                "assert greatest_common_divisor(0, 0) == 0",
                "assert greatest_common_divisor(-3, 6) == 3"
            ],
            "failed_tests": [
                "assert greatest_common_divisor(6, -3) == 3 (AssertionError: )",
                "assert greatest_common_divisor(-6, -9) == 3 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
                "assert all_prefixes('') == []",
                "assert all_prefixes('a') == ['a']",
                "assert all_prefixes('ab') == ['a', 'ab']",
                "assert all_prefixes('123') == ['1', '12', '123']",
                "assert all_prefixes('xyz') == ['x', 'xy', 'xyz']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(0) == '0'",
                "assert string_sequence(5) == '0 1 2 3 4 5'",
                "assert string_sequence(3) == '0 1 2 3'",
                "assert string_sequence(1) == '0 1'",
                "assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'",
                "assert string_sequence(2) == '0 1 2'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('xyzXYZ') == 3",
                "assert count_distinct_characters('Jerry') == 4",
                "assert count_distinct_characters('') == 0",
                "assert count_distinct_characters('aaaaaaa') == 1",
                "assert count_distinct_characters('AbCdEfG') == 7",
                "assert count_distinct_characters('1234567890') == 10",
                "assert count_distinct_characters('AaBbCcDdEeFfGg') == 7",
                "assert count_distinct_characters('Hello, World!') == 10"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
                "assert parse_music('o| o| o|') == [2, 2, 2]",
                "assert parse_music('o o o') == [4, 4, 4]",
                "assert parse_music('.| .| .|') == [1, 1, 1]",
                "assert parse_music('o| .| o') == [2, 1, 4]",
                "assert parse_music('') == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('abcabcabc', 'bc') == 3",
                "assert how_many_times('abcabcabc', 'abcabc') == 2",
                "assert how_many_times('abcabcabc', 'abcabcabcabc') == 0",
                "assert how_many_times('abcabcabc', 'ca') == 2",
                "assert how_many_times('abcabcabc', 'ab') == 3",
                "assert how_many_times('abcabcabc', 'abc') == 3",
                "assert how_many_times('', 'a') == 0",
                "assert how_many_times('abcabcabc', 'cabc') == 2",
                "assert how_many_times('abcabcabc', 'd') == 0",
                "assert how_many_times('', '') == 1",
                "assert how_many_times('aaaa', 'aa') == 3",
                "assert how_many_times('abcabcabc', '') == 10"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('three one five') == 'one three five'",
                "assert sort_numbers('nine eight seven six five four three two one zero') == 'zero one two three four five six seven eight nine'",
                "assert sort_numbers('zero one two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'",
                "assert sort_numbers('five five five') == 'five five five'",
                "assert sort_numbers('one') == 'one'",
                "assert sort_numbers('nine zero') == 'zero nine'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([-1.0, -2.0, -3.0, -4.0, -5.0, -2.2]) == (-2.2, -2.0)",
                "assert find_closest_elements([0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == (0.0, 0.0)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]) == (1.0, 2.0)"
            ],
            "failed_tests": [
                "assert find_closest_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5]) == (1.0, 1.1) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([0.0, 0.5, 1.0]) == [0.0, 0.5, 1.0]",
                "assert rescale_to_unit([-1.0, 0.0, 1.0]) == [0.0, 0.5, 1.0]",
                "assert rescale_to_unit([10.0, 20.0, 30.0, 40.0, 50.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([-5.0, -4.0, -3.0, -2.0, -1.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
            ],
            "failed_tests": [
                "assert rescale_to_unit([1.0, 1.0, 1.0, 1.0, 1.0]) == [0.0, 0.0, 0.0, 0.0, 0.0] (ZeroDivisionError: float division by zero)"
            ]
        }
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_integers(['a', 3.14, 5]) == [5]",
                "assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]",
                "assert filter_integers(['a', 'b', 'c']) == []",
                "assert filter_integers([1, 2, 3]) == [1, 2, 3]",
                "assert filter_integers([1.1, 2.2, 3.3]) == []",
                "assert filter_integers([]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('') == 0",
                "assert strlen('abc') == 3",
                "assert strlen('1234567890') == 10",
                "assert strlen('a b c') == 5",
                "assert strlen('Hello, World!') == 13",
                "assert strlen('Python') == 6"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(15) == 5",
                "assert largest_divisor(16) == 8",
                "assert largest_divisor(17) == 1",
                "assert largest_divisor(18) == 9",
                "assert largest_divisor(19) == 1",
                "assert largest_divisor(20) == 10",
                "assert largest_divisor(2) == 1",
                "assert largest_divisor(100) == 50",
                "assert largest_divisor(101) == 1"
            ],
            "failed_tests": [
                "assert largest_divisor(1) == 1 (ZeroDivisionError: integer division or modulo by zero)"
            ]
        }
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(8) == [2, 2, 2]",
                "assert factorize(25) == [5, 5]",
                "assert factorize(70) == [2, 5, 7]",
                "assert factorize(100) == [2, 2, 5, 5]",
                "assert factorize(2) == [2]",
                "assert factorize(1) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert remove_duplicates([]) == []",
                "assert remove_duplicates([1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1]",
                "assert remove_duplicates([-1, -1, 0, 0, 1, 1]) == []"
            ],
            "failed_tests": [
                "assert remove_duplicates([1, 1, 1, 1, 1]) == [1] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('Hello') == 'hELLO'",
                "assert flip_case('hELLO') == 'Hello'",
                "assert flip_case('HELLO') == 'hello'",
                "assert flip_case('hello') == 'HELLO'",
                "assert flip_case('HeLlO') == 'hElLo'",
                "assert flip_case('') == ''"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate(['a', 'b', 'c']) == 'abc'",
                "assert concatenate(['Hello', ' ', 'World']) == 'Hello World'",
                "assert concatenate([]) == ''",
                "assert concatenate(['1', '2', '3']) == '123'",
                "assert concatenate(['concatenate', ' ', 'strings']) == 'concatenate strings'",
                "assert concatenate(['AI', ' ', 'assistant']) == 'AI assistant'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b') == ['bcd']",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'c') == ['cde']",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], '') == ['abc', 'bcd', 'cde', 'array']",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'd') == []",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'abc') == ['abc']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
                "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]",
                "assert get_positive([-1, -2, -3, -4, -5]) == []",
                "assert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert get_positive([0, 0, 0, 0, 0]) == []",
                "assert get_positive([]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_prime(6) == False",
                "assert is_prime(101) == True",
                "assert is_prime(11) == True",
                "assert is_prime(61) == True",
                "assert is_prime(4) == False",
                "assert is_prime(1) == False",
                "assert is_prime(2) == True",
                "assert is_prime(0) == False",
                "assert is_prime(-1) == False",
                "assert is_prime(17) == True",
                "assert is_prime(18) == False"
            ],
            "failed_tests": [
                "assert is_prime(13441) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert round(poly([1, 2], -0.5), 2) == 0",
                "assert round(poly([-6, 11, -6, 1], 1.0), 2) == 0",
                "assert round(poly([1, 2, 3, 4], 0), 2) == 1",
                "assert round(poly([1, 2, 3, 4], 1), 2) == 10",
                "assert round(find_zero([1, 2]), 2) == -0.5",
                "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0"
            ],
            "failed_tests": [
                "assert round(poly([1, 2, 3, 4], -1), 2) == 2 (AssertionError: )",
                "assert round(find_zero([1, -3, 2]), 2) == 1.0 (AssertionError: )",
                "assert round(find_zero([1, -4, 4]), 2) == 2.0 (OverflowError: math range error)",
                "assert round(find_zero([1, -5, 6]), 2) == 2.0 (OverflowError: math range error)"
            ]
        }
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_third([1, 2, 3]) == [1, 2, 3]",
                "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]",
                "assert sort_third([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
                "assert sort_third([6, 5, 4, 3, 2, 1]) == [3, 5, 4, 6, 2, 1]",
                "assert sort_third([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1]",
                "assert sort_third([]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
                "assert unique([1, 1, 1, 1, 1, 1]) == [1]",
                "assert unique([]) == []",
                "assert unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert unique([-1, -2, -3, -2, -1]) == [-3, -2, -1]",
                "assert unique(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([1, 2, 3]) == 3",
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123",
                "assert max_element([-1, -2, -3]) == -1",
                "assert max_element([0, 0, 0]) == 0",
                "assert max_element([1]) == 1",
                "assert max_element([100, 200, 300, 400, 500]) == 500"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(50) == 0",
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(79) == 3",
                "assert fizz_buzz(100) == 3",
                "assert fizz_buzz(140) == 4",
                "assert fizz_buzz(0) == 0",
                "assert fizz_buzz(1) == 0"
            ],
            "failed_tests": [
                "assert fizz_buzz(77) == 1 (AssertionError: )",
                "assert fizz_buzz(770) == 14 (AssertionError: )",
                "assert fizz_buzz(7700) == 140 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_even([1, 2, 3]) == [1, 2, 3]",
                "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]",
                "assert sort_even([7, 1, 6, 2, 5, 3, 4]) == [4, 1, 5, 2, 6, 3, 7]",
                "assert sort_even([1]) == [1]",
                "assert sort_even([]) == []"
            ],
            "failed_tests": [
                "assert sort_even([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 8, 2, 6, 3, 4, 5, 2, 9] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode_cyclic(\"abc\") == \"bca\"",
                "assert encode_cyclic(\"a\") == \"a\"",
                "assert encode_cyclic(\"\") == \"\"",
                "assert decode_cyclic(\"bca\") == \"abc\"",
                "assert decode_cyclic(\"a\") == \"a\"",
                "assert decode_cyclic(\"\") == \"\""
            ],
            "failed_tests": [
                "assert encode_cyclic(\"abcdef\") == \"bcadef\" (AssertionError: )",
                "assert encode_cyclic(\"abcdefg\") == \"bcadefg\" (AssertionError: )",
                "assert decode_cyclic(\"bcadef\") == \"abcdef\" (AssertionError: )",
                "assert decode_cyclic(\"bcadefg\") == \"abcdefg\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(1) == 2",
                "assert prime_fib(2) == 3",
                "assert prime_fib(3) == 5",
                "assert prime_fib(4) == 13",
                "assert prime_fib(5) == 89",
                "assert prime_fib(6) == 233",
                "assert prime_fib(7) == 1597",
                "assert prime_fib(8) == 28657",
                "assert prime_fib(9) == 514229",
                "assert prime_fib(10) == 433494437"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
                "assert triples_sum_to_zero([1, 3, -2, 1]) == True",
                "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
                "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True",
                "assert triples_sum_to_zero([1]) == False",
                "assert triples_sum_to_zero([0, 0, 0]) == True",
                "assert triples_sum_to_zero([-1, 1, 0]) == True",
                "assert triples_sum_to_zero([-1, -1, 2]) == True",
                "assert triples_sum_to_zero([1, 1, 1]) == False",
                "assert triples_sum_to_zero([]) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(1) == 1",
                "assert car_race_collision(0) == 0"
            ],
            "failed_tests": [
                "assert car_race_collision(2) == 2 (AssertionError: )",
                "assert car_race_collision(3) == 3 (AssertionError: )",
                "assert car_race_collision(10) == 10 (AssertionError: )",
                "assert car_race_collision(100) == 100 (AssertionError: )",
                "assert car_race_collision(-1) == 0 (AssertionError: )",
                "assert car_race_collision(1000) == 1000 (AssertionError: )",
                "assert car_race_collision(9999) == 9999 (AssertionError: )",
                "assert car_race_collision(12345) == 12345 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]",
                "assert incr_list([-1, -2, -3]) == [0, -1, -2]",
                "assert incr_list([0, 0, 0]) == [1, 1, 1]",
                "assert incr_list([]) == []",
                "assert incr_list([1]) == [2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
                "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
                "assert pairs_sum_to_zero([1, 2, 3, 7]) == False",
                "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True",
                "assert pairs_sum_to_zero([1]) == False",
                "assert pairs_sum_to_zero([-1, 1]) == True",
                "assert pairs_sum_to_zero([0, 0]) == True",
                "assert pairs_sum_to_zero([]) == False",
                "assert pairs_sum_to_zero([1, 2, 3, -3]) == True",
                "assert pairs_sum_to_zero([1, 2, 3, -4]) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert change_base(8, 3) == '22'",
                "assert change_base(8, 2) == '1000'",
                "assert change_base(7, 2) == '111'",
                "assert change_base(10, 2) == '1010'",
                "assert change_base(16, 2) == '10000'",
                "assert change_base(16, 8) == '20'",
                "assert change_base(1, 2) == '1'"
            ],
            "failed_tests": [
                "assert change_base(0, 2) == '0' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(0, 3) == 0",
                "assert triangle_area(5, 0) == 0",
                "assert triangle_area(10, 2) == 10",
                "assert triangle_area(3, 3) == 4.5",
                "assert triangle_area(1, 1) == 0.5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib4(0) == 0",
                "assert fib4(1) == 0",
                "assert fib4(2) == 2",
                "assert fib4(3) == 0",
                "assert fib4(4) == 2",
                "assert fib4(5) == 4",
                "assert fib4(6) == 8",
                "assert fib4(7) == 14"
            ],
            "failed_tests": [
                "assert fib4(8) == 24 (AssertionError: )",
                "assert fib4(9) == 48 (AssertionError: )",
                "assert fib4(10) == 88 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([3, 1, 2, 4, 5]) == 3",
                "assert median([1, 2, 3, 4, 5, 6]) == 3.5",
                "assert median([1]) == 1",
                "assert median([1, 2]) == 1.5",
                "assert median([1, 1, 1, 1, 1]) == 1",
                "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5",
                "assert median([-1, -2, -3, -4, -5]) == -3",
                "assert median([0, 0, 0, 0, 0, 0]) == 0",
                "assert median([1, 1, 2, 2, 3, 3]) == 2.0"
            ],
            "failed_tests": [
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('') == True",
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('aaaaa') == True",
                "assert is_palindrome('zbcd') == False",
                "assert is_palindrome('racecar') == True",
                "assert is_palindrome('hello') == False"
            ],
            "failed_tests": [
                "assert is_palindrome('Able was I ere I saw Elba') == True (AssertionError: )",
                "assert is_palindrome('A man, a plan, a canal, Panama') == True (AssertionError: )",
                "assert is_palindrome('Was it a car or a cat I saw') == True (AssertionError: )",
                "assert is_palindrome('No lemon, no melon') == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(3, 5) == 3",
                "assert modp(1101, 101) == 2",
                "assert modp(0, 101) == 1",
                "assert modp(3, 11) == 8",
                "assert modp(100, 101) == 1",
                "assert modp(2, 2) == 0",
                "assert modp(10, 3) == 1",
                "assert modp(5, 7) == 4",
                "assert modp(6, 1) == 0",
                "assert modp(0, 1) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_shift(\"abc\") == \"fgh\"",
                "assert encode_shift(\"xyz\") == \"cde\"",
                "assert encode_shift(\"hello\") == \"mjqqt\"",
                "assert encode_shift(\"world\") == \"btwqi\"",
                "assert decode_shift(\"fgh\") == \"abc\"",
                "assert decode_shift(\"cde\") == \"xyz\"",
                "assert decode_shift(\"mjqqt\") == \"hello\"",
                "assert decode_shift(\"btwqi\") == \"world\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('') == ''",
                "assert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'",
                "assert remove_vowels('abcdef') == 'bcdf'",
                "assert remove_vowels('aaaaa') == ''",
                "assert remove_vowels('aaBAA') == 'B'",
                "assert remove_vowels('zbcd') == 'zbcd'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 4, 10], 100) == True",
                "assert below_threshold([1, 20, 4, 10], 5) == False",
                "assert below_threshold([1, 2, 3, 4], 5) == True",
                "assert below_threshold([-1, -2, -3, -4], -3) == False",
                "assert below_threshold([0, 0, 0, 0], 0) == False",
                "assert below_threshold([], 5) == True",
                "assert below_threshold([5, 5, 5, 5], 5) == False",
                "assert below_threshold([4, 4, 4, 4], 5) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(2, 3) == 5",
                "assert add(5, 7) == 12",
                "assert add(-2, 3) == 1",
                "assert add(2, -3) == -1",
                "assert add(-2, -3) == -5",
                "assert add(0, 0) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert same_chars('', '') == True",
                "assert same_chars('abc', 'abcd') == False",
                "assert same_chars('a', 'b') == False",
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('eabcd', 'dddddddabc') == False",
                "assert same_chars('abcd', 'abc') == False",
                "assert same_chars('abc', 'def') == False",
                "assert same_chars('abc', 'cba') == True",
                "assert same_chars('abcd', 'dddddddabce') == False",
                "assert same_chars('a', 'a') == True"
            ],
            "failed_tests": [
                "assert same_chars('abcabc', 'abc') == False (AssertionError: )",
                "assert same_chars('abc', 'abcabc') == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(8) == 21",
                "assert fib(4) == 3",
                "assert fib(7) == 13",
                "assert fib(0) == 0",
                "assert fib(2) == 1",
                "assert fib(9) == 34",
                "assert fib(10) == 55",
                "assert fib(3) == 2",
                "assert fib(20) == 6765",
                "assert fib(30) == 832040",
                "assert fib(1) == 1",
                "assert fib(5) == 5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"<\") == False",
                "assert correct_bracketing(\"<>\") == True",
                "assert correct_bracketing(\"<<><>>\") == True",
                "assert correct_bracketing(\"><<>\") == False",
                "assert correct_bracketing(\"<<<<>>>>\") == True",
                "assert correct_bracketing(\"><><><>\") == False",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"><\") == False",
                "assert correct_bracketing(\"><><\") == False"
            ],
            "failed_tests": [
                "assert correct_bracketing(\"<<<<<>>>>>\") == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 2, 4, 20]) == True",
                "assert monotonic([1, 20, 4, 10]) == False",
                "assert monotonic([4, 1, 0, -10]) == True",
                "assert monotonic([10, 10, 10, 10]) == True",
                "assert monotonic([5, 4, 3, 2, 1]) == True",
                "assert monotonic([]) == True",
                "assert monotonic([1]) == True",
                "assert monotonic([2, 1, 0, -1, -2]) == True",
                "assert monotonic([1, 2, 3, 2, 1]) == False",
                "assert monotonic([1, 1, 2, 2, 3, 3]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
                "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]",
                "assert common([1, 2, 3], [4, 5, 6]) == []",
                "assert common([], [1, 2, 3]) == []",
                "assert common([1, 2, 3], []) == []",
                "assert common([], []) == []",
                "assert common([1, 1, 2, 2], [1, 1, 2, 2]) == [1, 2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(13195) == 29",
                "assert largest_prime_factor(2048) == 2",
                "assert largest_prime_factor(100) == 5",
                "assert largest_prime_factor(99) == 11",
                "assert largest_prime_factor(77) == 11",
                "assert largest_prime_factor(49) == 7",
                "assert largest_prime_factor(6) == 3",
                "assert largest_prime_factor(4) == 2",
                "assert largest_prime_factor(9) == 3",
                "assert largest_prime_factor(15) == 5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(30) == 465",
                "assert sum_to_n(100) == 5050",
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(10) == 55",
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(0) == 0",
                "assert sum_to_n(-10) == 0",
                "assert sum_to_n(20) == 210",
                "assert sum_to_n(15) == 120",
                "assert sum_to_n(2) == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"(\") == False",
                "assert correct_bracketing(\")\") == False",
                "assert correct_bracketing(\"()\") == True",
                "assert correct_bracketing(\"(()())\") == True",
                "assert correct_bracketing(\")(()\") == False",
                "assert correct_bracketing(\"()()\") == True",
                "assert correct_bracketing(\"(()))\") == False",
                "assert correct_bracketing(\"((())\") == False",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"(((((((((())))))))))\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
                "assert derivative([1, 2, 3]) == [2, 6]",
                "assert derivative([0, 0, 0]) == [0, 0]",
                "assert derivative([1, 0, 0]) == [0, 0]",
                "assert derivative([0, 1, 0]) == [1, 0]",
                "assert derivative([-1, -2, -3]) == [-2, -6]",
                "assert derivative([1, -2, 3]) == [-2, 6]"
            ],
            "failed_tests": [
                "assert derivative([0, 0, 1]) == [0, 1] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(0) == 0",
                "assert fibfib(1) == 0",
                "assert fibfib(2) == 1",
                "assert fibfib(3) == 1",
                "assert fibfib(4) == 2",
                "assert fibfib(5) == 4",
                "assert fibfib(6) == 7",
                "assert fibfib(7) == 13",
                "assert fibfib(8) == 24",
                "assert fibfib(9) == 44",
                "assert fibfib(10) == 81"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"yay\") == 2",
                "assert vowels_count(\"YAYA\") == 2",
                "assert vowels_count(\"AEIOUY\") == 6",
                "assert vowels_count(\"AY\") == 2",
                "assert vowels_count(\"ay\") == 2",
                "assert vowels_count(\"ACEDY\") == 3",
                "assert vowels_count(\"YA\") == 1",
                "assert vowels_count(\"abcde\") == 2",
                "assert vowels_count(\"bcdfg\") == 0",
                "assert vowels_count(\"YAY\") == 2",
                "assert vowels_count(\"yaya\") == 2"
            ],
            "failed_tests": [
                "assert vowels_count(\"\") == 0 (IndexError: string index out of range)"
            ]
        }
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12, 1) == \"21\"",
                "assert circular_shift(12, 2) == \"12\"",
                "assert circular_shift(123, 1) == \"312\"",
                "assert circular_shift(123, 3) == \"123\"",
                "assert circular_shift(123, 4) == \"321\"",
                "assert circular_shift(0, 1) == \"0\"",
                "assert circular_shift(123456789, 5) == \"567891234\"",
                "assert circular_shift(123456789, 10) == \"987654321\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"\") == 0",
                "assert digitSum(\"abAB\") == 131",
                "assert digitSum(\"abcCd\") == 67",
                "assert digitSum(\"helloE\") == 69",
                "assert digitSum(\"woArBld\") == 131",
                "assert digitSum(\"aAaaaXa\") == 153"
            ],
            "failed_tests": [
                "assert digitSum(\"HELLO\") == 345 (AssertionError: )",
                "assert digitSum(\"WORLD\") == 372 (AssertionError: )",
                "assert digitSum(\"PYTHON\") == 474 (AssertionError: )",
                "assert digitSum(\"JAVA\") == 272 (AssertionError: )",
                "assert digitSum(\"JAVASCRIPT\") == 794 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
                "assert fruit_distribution(\"0 apples and 1 oranges\",3) == 2",
                "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95",
                "assert fruit_distribution(\"100 apples and 1 oranges\",120) == 19",
                "assert fruit_distribution(\"0 apples and 0 oranges\",10) == 10",
                "assert fruit_distribution(\"10 apples and 10 oranges\",30) == 10",
                "assert fruit_distribution(\"1 apples and 1 oranges\",2) == 0",
                "assert fruit_distribution(\"0 apples and 0 oranges\",0) == 0",
                "assert fruit_distribution(\"50 apples and 50 oranges\",200) == 100",
                "assert fruit_distribution(\"99 apples and 1 oranges\",101) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([4,2,3]) == [2, 1]",
                "assert pluck([1,2,3]) == [2, 1]",
                "assert pluck([]) == []",
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
                "assert pluck([1,3,5,7,9]) == []",
                "assert pluck([0]) == [0, 0]",
                "assert pluck([2,2,2,2,2]) == [2, 0]",
                "assert pluck([1,3,5,7,9,2]) == [2, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert search([4, 1, 2, 2, 3, 1]) == 2",
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
                "assert search([5, 5, 4, 4, 4]) == -1",
                "assert search([1, 1, 1, 1, 1]) == 1",
                "assert search([2, 2, 2, 3, 3, 3, 3, 3]) == 3",
                "assert search([1]) == 1",
                "assert search([2, 2]) == 2",
                "assert search([3, 3, 3]) == 3"
            ],
            "failed_tests": [
                "assert search([1, 2, 3, 4, 5]) == -1 (AssertionError: )",
                "assert search([4, 4, 4, 4]) == -1 (AssertionError: )",
                "assert search([5, 5, 5, 5, 5]) == -1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([1]) == [1]",
                "assert strange_sort_list([3, 2, 1]) == [1, 3, 2]",
                "assert strange_sort_list([1, 1, 1, 2, 2, 2]) == [1, 2, 1, 2, 1, 2]"
            ],
            "failed_tests": [
                "assert strange_sort_list([-1, -2, -3, -4]) == [-4, -1, -2, -3] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(1, 2, 10) == -1",
                "assert triangle_area(0, 0, 0) == -1",
                "assert triangle_area(3, 4, 5) == 6.00",
                "assert triangle_area(6, 8, 10) == 24.00",
                "assert triangle_area(5, 5, 5) == 10.83"
            ],
            "failed_tests": [
                "assert triangle_area(2.34, 1.23, 3.45) == -1 (AssertionError: )",
                "assert triangle_area(3.45, 1.23, 2.34) == -1 (AssertionError: )",
                "assert triangle_area(1.5, 2.5, 3.5) == 1.98 (AssertionError: )",
                "assert triangle_area(1.23, 2.34, 3.45) == -1 (AssertionError: )",
                "assert triangle_area(3.45, 2.34, 1.23) == -1 (AssertionError: )",
                "assert triangle_area(2.34, 3.45, 1.23) == -1 (AssertionError: )",
                "assert triangle_area(1.23, 3.45, 2.34) == -1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([1, 2], 5) == False",
                "assert will_it_fly([3, 2, 3], 1) == False",
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([3], 5) == True",
                "assert will_it_fly([1, 2, 1], 4) == True",
                "assert will_it_fly([1, 2, 2, 1], 10) == True",
                "assert will_it_fly([1, 2, 3, 2, 1], 9) == True",
                "assert will_it_fly([1, 2, 3, 4, 5], 15) == False",
                "assert will_it_fly([5, 4, 3, 4, 5], 21) == True",
                "assert will_it_fly([5, 4, 3, 4, 5], 20) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([1, 2, 3, 2, 1]) == 0",
                "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4",
                "assert smallest_change([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 4",
                "assert smallest_change([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0",
                "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5",
                "assert smallest_change([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 5",
                "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5",
                "assert smallest_change([11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match([], []) == []",
                "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']",
                "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']",
                "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']",
                "assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']",
                "assert total_match(['hello', 'world'], ['hi', 'there']) == ['hi', 'there']",
                "assert total_match(['a', 'b', 'c'], ['d', 'e', 'f', 'g']) == ['a', 'b', 'c']",
                "assert total_match(['short'], ['longer', 'list']) == ['short']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(15) == False",
                "assert is_multiply_prime(21) == False",
                "assert is_multiply_prime(100) == False",
                "assert is_multiply_prime(2) == False",
                "assert is_multiply_prime(95) == False",
                "assert is_multiply_prime(7) == False",
                "assert is_multiply_prime(91) == False",
                "assert is_multiply_prime(77) == False",
                "assert is_multiply_prime(5) == False",
                "assert is_multiply_prime(35) == False",
                "assert is_multiply_prime(3) == False",
                "assert is_multiply_prime(30) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(1, 4) == True",
                "assert is_simple_power(2, 2) == True",
                "assert is_simple_power(8, 2) == True",
                "assert is_simple_power(3, 2) == False",
                "assert is_simple_power(3, 1) == False",
                "assert is_simple_power(5, 3) == False",
                "assert is_simple_power(9, 3) == True",
                "assert is_simple_power(0, 0) == False"
            ],
            "failed_tests": [
                "assert is_simple_power(0, 1) == True (AssertionError: )",
                "assert is_simple_power(4, 0) == False (TimeoutError: Test case execution exceeded 10 seconds)"
            ]
        }
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(1000) == True",
                "assert iscube(125) == True",
                "assert iscube(-1001) == False",
                "assert iscube(180) == False",
                "assert iscube(2) == False",
                "assert iscube(-1000) == True",
                "assert iscube(-125) == True",
                "assert iscube(1) == True",
                "assert iscube(-27) == True",
                "assert iscube(1001) == False",
                "assert iscube(27) == True",
                "assert iscube(-1) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"4444\") == 0",
                "assert hex_key(\"1111\") == 0",
                "assert hex_key(\"DDDD\") == 4",
                "assert hex_key(\"9999\") == 0",
                "assert hex_key(\"BBBB\") == 4",
                "assert hex_key(\"6666\") == 0",
                "assert hex_key(\"7777\") == 4",
                "assert hex_key(\"8888\") == 0",
                "assert hex_key(\"\") == 0",
                "assert hex_key(\"ABED1A33\") == 4",
                "assert hex_key(\"CCCC\") == 0",
                "assert hex_key(\"3333\") == 4"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(15) == \"db1111db\"",
                "assert decimal_to_binary(32) == \"db100000db\"",
                "assert decimal_to_binary(0) == \"db0db\"",
                "assert decimal_to_binary(1) == \"db1db\"",
                "assert decimal_to_binary(2) == \"db10db\"",
                "assert decimal_to_binary(10) == \"db1010db\"",
                "assert decimal_to_binary(255) == \"db11111111db\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy('a') == False",
                "assert is_happy('aa') == False",
                "assert is_happy('abcd') == True",
                "assert is_happy('aabb') == False",
                "assert is_happy('adb') == True",
                "assert is_happy('xyy') == False",
                "assert is_happy('abc') == True",
                "assert is_happy('aaa') == False",
                "assert is_happy('xyz') == True",
                "assert is_happy('xxy') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([1.8, 2.2, 2.8, 3.2]) == ['C', 'C+', 'B', 'B+']",
                "assert numerical_letter_grade([3.8, 0.0, 2.4, 1.4]) == ['A', 'E', 'B-', 'C-']",
                "assert numerical_letter_grade([]) == []"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B+', 'C', 'C+', 'A-'] (AssertionError: )",
                "assert numerical_letter_grade([0.0, 0.5, 1.0, 1.5, 2.0]) == ['E', 'D-', 'D+', 'C-', 'C+'] (AssertionError: )",
                "assert numerical_letter_grade([2.5, 3.0, 3.5, 4.0]) == ['B-', 'B+', 'A-', 'A+'] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('Hello') == True",
                "assert prime_length('abcdcba') == True",
                "assert prime_length('kittens') == True",
                "assert prime_length('orange') == False",
                "assert prime_length('') == False",
                "assert prime_length('a') == False",
                "assert prime_length('ab') == True",
                "assert prime_length('abc') == True",
                "assert prime_length('abcd') == False",
                "assert prime_length('abcde') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert starts_one_ends(1) == 2 (AssertionError: )",
                "assert starts_one_ends(2) == 20 (AssertionError: )",
                "assert starts_one_ends(3) == 280 (AssertionError: )",
                "assert starts_one_ends(4) == 3600 (AssertionError: )",
                "assert starts_one_ends(5) == 44000 (AssertionError: )",
                "assert starts_one_ends(0) == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solve(1000) == \"1\"",
                "assert solve(150) == \"110\"",
                "assert solve(147) == \"1100\"",
                "assert solve(0) == \"0\"",
                "assert solve(5000) == \"101\"",
                "assert solve(1) == \"1\""
            ],
            "failed_tests": [
                "assert solve(10000) == \"1001\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2",
                "assert add([0, 0, 0, 0]) == 0",
                "assert add([1, 3, 5, 7]) == 0",
                "assert add([2, 4, 6, 8, 10]) == 12",
                "assert add([-2, -4, -6, -8, -10]) == -12"
            ],
            "failed_tests": [
                "assert add([1, 2, 3, 4, 5, 6]) == 6 (AssertionError: )",
                "assert add([2, 4, 6, 8]) == 4 (AssertionError: )",
                "assert add([-2, -4, -6, -8]) == -4 (AssertionError: )",
                "assert add([1, 2, 3, 4, 5, 6, 7, 8]) == 12 (AssertionError: )",
                "assert add([-1, -2, -3, -4, -5, -6, -7, -8]) == -12 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('Hi') == 'Hi'",
                "assert anti_shuffle('hello') == 'ehllo'",
                "assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'",
                "assert anti_shuffle('Programming') == 'Paggimmnorr'",
                "assert anti_shuffle('') == ''",
                "assert anti_shuffle('A B C') == 'A B C'",
                "assert anti_shuffle('C B A') == 'C B A'",
                "assert anti_shuffle('abc def') == 'abc def'",
                "assert anti_shuffle('cba fed') == 'abc def'"
            ],
            "failed_tests": [
                "assert anti_shuffle('Python') == 'Phtnoy' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
                "assert get_row([], 1) == []",
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]",
                "assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [(1, 1)]",
                "assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10) == []",
                "assert get_row([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 1) == [(0, 2), (0, 1), (0, 0), (1, 2), (1, 1), (1, 0), (2, 2), (2, 1), (2, 0)]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([]) == []",
                "assert sort_array([5]) == [5]",
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
                "assert sort_array([6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6]",
                "assert sort_array([1, 3, 5, 7, 9]) == [9, 7, 5, 3, 1]"
            ],
            "failed_tests": [
                "assert sort_array([1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1] (AssertionError: )",
                "assert sort_array([0, 2, 4, 6, 8]) == [0, 2, 4, 6, 8] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encrypt('hi') == 'lm'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('gf') == 'kj'",
                "assert encrypt('et') == 'ix'",
                "assert encrypt('') == ''"
            ],
            "failed_tests": [
                "assert encrypt('abc') == 'egi' (AssertionError: )",
                "assert encrypt('xyz') == 'bdg' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([1, 2, 3, 4, 5]) == 2",
                "assert next_smallest([5, 1, 4, 3, 2]) == 2",
                "assert next_smallest([]) == None",
                "assert next_smallest([1, 1]) == None",
                "assert next_smallest([3, 3, 2, 1]) == 2",
                "assert next_smallest([1]) == None",
                "assert next_smallest([1, 3, 5, 7, 9]) == 3",
                "assert next_smallest([9, 7, 5, 3, 1]) == 3"
            ],
            "failed_tests": [
                "assert next_smallest([-1, -2, -3, -4, -5]) == -2 (AssertionError: )",
                "assert next_smallest([2, 2, 1, 1]) == None (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"Hello world\") == 0",
                "assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1",
                "assert is_bored(\"I am bored. I am tired. I want to go home.\") == 3",
                "assert is_bored(\"I am not bored. You are bored!\") == 1",
                "assert is_bored(\"I am bored! Are you bored? I am not!\") == 2",
                "assert is_bored(\"\") == 0"
            ],
            "failed_tests": [
                "assert is_bored(\"I? Yes, I am bored!\") == 1 (AssertionError: )",
                "assert is_bored(\"I. I. I.\") == 3 (AssertionError: )",
                "assert is_bored(\"I'm not bored. I'm just tired.\") == 2 (AssertionError: )",
                "assert is_bored(\"Am I bored? No, I am not!\") == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(5, 2, 7) == True",
                "assert any_int(-1, -1, -2) == True",
                "assert any_int('1', 2, 3) == False",
                "assert any_int(3, -2, 1) == True",
                "assert any_int(-1, -1, -3) == False",
                "assert any_int(1, -2, -1) == True",
                "assert any_int(3.6, -2.2, 2) == False",
                "assert any_int(1, '2', 3) == False",
                "assert any_int(0, 0, 0) == True",
                "assert any_int(1, 2, '3') == False",
                "assert any_int(1, 2, None) == False",
                "assert any_int(1, 2, 3.0) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'",
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
                "assert encode('AI') == 'ck'",
                "assert encode('') == ''"
            ],
            "failed_tests": [
                "assert encode('HELLO') == 'jgttg' (AssertionError: )",
                "assert encode('world') == 'TGQKD' (AssertionError: )",
                "assert encode('Python') == 'pksvgt' (AssertionError: )",
                "assert encode('Encode') == 'gmkqcg' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
                "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
                "assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13",
                "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11",
                "assert skjkasdkd([0,81,12,3,1,21]) == 3",
                "assert skjkasdkd([0,8,1,2,1,7]) == 7",
                "assert skjkasdkd([0,0,0,0,0,0]) == 0",
                "assert skjkasdkd([4,6,8,10,12,14,16,18,20]) == 0",
                "assert skjkasdkd([37,73,79,97]) == 16"
            ],
            "failed_tests": [
                "assert skjkasdkd([2,3,5,7,11,13,17,19,23,29]) == 5 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
                "assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False",
                "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False",
                "assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False",
                "assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True",
                "assert check_dict_case({}) == False",
                "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"cherry\"}) == True",
                "assert check_dict_case({\"A\":\"apple\", \"B\":\"banana\", \"C\":\"cherry\"}) == True",
                "assert check_dict_case({\"A\":\"apple\", \"b\":\"banana\", \"C\":\"cherry\"}) == False",
                "assert check_dict_case({\"1\":\"apple\", \"2\":\"banana\", \"3\":\"cherry\"}) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(5) == [2,3]",
                "assert count_up_to(11) == [2,3,5,7]",
                "assert count_up_to(0) == []",
                "assert count_up_to(20) == [2,3,5,7,11,13,17,19]",
                "assert count_up_to(1) == []",
                "assert count_up_to(18) == [2,3,5,7,11,13,17]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert multiply(148, 412) == 16",
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(14, -15) == 20",
                "assert multiply(0, 0) == 0",
                "assert multiply(10, 10) == 0",
                "assert multiply(-10, -10) == 0",
                "assert multiply(123, 456) == 18"
            ],
            "failed_tests": [
                "assert multiply(-123, 456) == 18 (AssertionError: )",
                "assert multiply(123, -456) == 18 (AssertionError: )",
                "assert multiply(-123, -456) == 18 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('aBCdEf') == 1",
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('dBBE') == 0",
                "assert count_upper('') == 0",
                "assert count_upper('aBcDeFgHiJkLmNoPqRsTuVwXyZ'.lower()) == 0",
                "assert count_upper('AEIOU') == 3",
                "assert count_upper('aeiou') == 0"
            ],
            "failed_tests": [
                "assert count_upper('ABCE') == 2 (AssertionError: )",
                "assert count_upper('aBcDeFgHiJkLmNoPqRsTuVwXyZ') == 3 (AssertionError: )",
                "assert count_upper('aBcDeFgHiJkLmNoPqRsTuVwXyZ'.upper()) == 13 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"10\") == 10",
                "assert closest_integer(\"15.3\") == 15",
                "assert closest_integer(\"14.5\") == 15",
                "assert closest_integer(\"-14.5\") == -15",
                "assert closest_integer(\"0\") == 0",
                "assert closest_integer(\"-0.5\") == -1",
                "assert closest_integer(\"0.5\") == 1",
                "assert closest_integer(\"3.14159\") == 3",
                "assert closest_integer(\"-3.14159\") == -3",
                "assert closest_integer(\"123.999\") == 124",
                "assert closest_integer(\"-123.999\") == -124"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(3) == [3, 5, 7]",
                "assert make_a_pile(4) == [4, 6, 8, 10]",
                "assert make_a_pile(2) == [2, 4]",
                "assert make_a_pile(5) == [5, 7, 9, 11, 13]",
                "assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]"
            ],
            "failed_tests": [
                "assert make_a_pile(1) == [1, 3] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]",
                "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
                "assert words_string(\"Hello, world\") == [\"Hello\", \"world\"]",
                "assert words_string(\"AI, coding, assistant\") == [\"AI\", \"coding\", \"assistant\"]",
                "assert words_string(\"I, love, coding\") == [\"I\", \"love\", \"coding\"]",
                "assert words_string(\"Python, is, awesome\") == [\"Python\", \"is\", \"awesome\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(12, 15) == 14",
                "assert choose_num(13, 12) == -1",
                "assert choose_num(5, 10) == 10",
                "assert choose_num(7, 7) == -1",
                "assert choose_num(2, 2) == 2",
                "assert choose_num(1, 1) == -1",
                "assert choose_num(0, 0) == 0",
                "assert choose_num(100, 200) == 200",
                "assert choose_num(200, 100) == -1",
                "assert choose_num(13, 15) == 14"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(1, 5) == \"0b11\"",
                "assert rounded_avg(7, 5) == -1",
                "assert rounded_avg(10, 20) == \"0b1111\"",
                "assert rounded_avg(20, 33) == \"0b11010\"",
                "assert rounded_avg(5, 5) == \"0b101\"",
                "assert rounded_avg(200, 100) == -1",
                "assert rounded_avg(1, 1) == \"0b1\""
            ],
            "failed_tests": [
                "assert rounded_avg(100, 200) == \"0b1101100\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([152, 323, 1422, 10]) == []",
                "assert unique_digits([111, 333, 555, 777, 999]) == [111, 333, 555, 777, 999]",
                "assert unique_digits([2, 4, 6, 8]) == []",
                "assert unique_digits([13579, 2468, 1234567890]) == [13579]",
                "assert unique_digits([]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]",
                "assert by_length([]) == []",
                "assert by_length([1, -1 , 55]) == ['One']",
                "assert by_length([9, 8, 7, 6, 5, 4, 3, 2, 1]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']",
                "assert by_length([1, 1, 1, 1, 1]) == ['One', 'One', 'One', 'One', 'One']",
                "assert by_length([9, 9, 9, 9, 9]) == ['Nine', 'Nine', 'Nine', 'Nine', 'Nine']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert f(1) == [1]",
                "assert f(0) == []",
                "assert f(3) == [1, 2, 6]",
                "assert f(2) == [1, 2]"
            ],
            "failed_tests": [
                "assert f(5) == [1, 2, 6, 6, 24] (AssertionError: )",
                "assert f(6) == [1, 2, 6, 6, 24, 120] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(3) == (1, 2)",
                "assert even_odd_palindrome(12) == (4, 6)",
                "assert even_odd_palindrome(1) == (0, 1)",
                "assert even_odd_palindrome(10) == (4, 5)"
            ],
            "failed_tests": [
                "assert even_odd_palindrome(20) == (5, 10) (AssertionError: )",
                "assert even_odd_palindrome(100) == (10, 45) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_nums([]) == 0",
                "assert count_nums([-1, 11, -11]) == 1",
                "assert count_nums([1, 1, 2]) == 3",
                "assert count_nums([-1, -2, -3]) == 0",
                "assert count_nums([10, 20, 30]) == 3",
                "assert count_nums([0, 0, 0]) == 0",
                "assert count_nums([-10, -20, -30]) == 0",
                "assert count_nums([1, -1, 2, -2, 3, -3]) == 3",
                "assert count_nums([123, 456, 789]) == 3"
            ],
            "failed_tests": [
                "assert count_nums([-123, -456, -789]) == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([3, 4, 5, 1, 2]) == True",
                "assert move_one_ball([3, 5, 4, 1, 2]) == False",
                "assert move_one_ball([1, 2, 3, 4, 5]) == True",
                "assert move_one_ball([5, 4, 3, 2, 1]) == False",
                "assert move_one_ball([1]) == True",
                "assert move_one_ball([]) == True",
                "assert move_one_ball([3, 2, 1, 5, 4]) == False",
                "assert move_one_ball([1, 3, 2, 4, 5]) == False"
            ],
            "failed_tests": [
                "assert move_one_ball([2, 1, 3, 4, 5]) == True (AssertionError: )",
                "assert move_one_ball([1, 2, 3, 5, 4]) == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"",
                "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
                "assert exchange([1, 3, 5], [2, 4, 6]) == \"YES\"",
                "assert exchange([1, 3, 5], [1, 3, 5]) == \"NO\"",
                "assert exchange([2, 4, 6], [1, 3, 5]) == \"YES\"",
                "assert exchange([2, 4, 6], [2, 4, 6]) == \"YES\"",
                "assert exchange([1, 1, 1], [2, 2, 2]) == \"YES\"",
                "assert exchange([1, 1, 1], [1, 1, 1]) == \"NO\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('a b b a') == {'a': 2, 'b': 2}",
                "assert histogram('a b c a b') == {'a': 2, 'b': 2}",
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('') == {}",
                "assert histogram('a a a a a') == {'a': 5}",
                "assert histogram('a b c d e f g h i j k l m n o p q r s t u v w x y z') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1, 'm': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
                "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)",
                "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)",
                "assert reverse_delete(\"abcdedcba\", \"\") == ('abcdedcba', True)",
                "assert reverse_delete(\"\", \"ab\") == ('', True)",
                "assert reverse_delete(\"abcba\", \"b\") == ('aca', True)",
                "assert reverse_delete(\"abcba\", \"a\") == ('bcb', True)",
                "assert reverse_delete(\"abcba\", \"abc\") == ('', True)"
            ],
            "failed_tests": [
                "assert reverse_delete(\"abcba\", \"c\") == ('aba', True) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
                "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
                "assert odd_count(['0']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['13579']) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\"]",
                "assert odd_count(['24680', '13579']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 5n the str5ng 5 of the 5nput.\"]",
                "assert odd_count([]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([-1, -2, -3]) == -6",
                "assert minSubArraySum([0, 0, 0]) == 0",
                "assert minSubArraySum([1, 2, 3, 4, 5]) == 1",
                "assert minSubArraySum([-1, -2, -3, -4, -5]) == -15"
            ],
            "failed_tests": [
                "assert minSubArraySum([1, -2, 3, -4, 5]) == -6 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
                "assert max_fill([[1,1,1,1], [1,1,1,1], [1,1,1,1], [1,1,1,1]], 1) == 16",
                "assert max_fill([[1,1,1,1], [1,1,1,1], [1,1,1,1], [1,1,1,1]], 4) == 4",
                "assert max_fill([[1,0,1,0], [0,1,0,1], [1,0,1,0], [0,1,0,1]], 2) == 4",
                "assert max_fill([[1,0,1,0], [0,1,0,1], [1,0,1,0], [0,1,0,1]], 1) == 8",
                "assert max_fill([[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]], 1) == 0",
                "assert max_fill([[1,1,1,1], [0,0,0,0], [1,1,1,1], [0,0,0,0]], 2) == 4",
                "assert max_fill([[1,1,1,1], [0,0,0,0], [1,1,1,1], [0,0,0,0]], 1) == 8"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
                "assert sort_array([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]"
            ],
            "failed_tests": [
                "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] (AssertionError: )",
                "assert sort_array([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4] (AssertionError: )",
                "assert sort_array([4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4] (AssertionError: )",
                "assert sort_array([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
                "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
                "assert select_words(\"simple white space\", 2) == []",
                "assert select_words(\"Hello world\", 4) == [\"world\"]",
                "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]",
                "assert select_words(\"\", 3) == []",
                "assert select_words(\"a e i o u\", 0) == [\"a\", \"e\", \"i\", \"o\", \"u\"]",
                "assert select_words(\"a e i o u\", 1) == []"
            ],
            "failed_tests": [
                "assert select_words(\"abc def ghi\", 1) == [\"abc\", \"def\", \"ghi\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"yogurt\") == \"u\"",
                "assert get_closest_vowel(\"FULL\") == \"U\"",
                "assert get_closest_vowel(\"quick\") == \"\"",
                "assert get_closest_vowel(\"ab\") == \"\"",
                "assert get_closest_vowel(\"Hello\") == \"e\"",
                "assert get_closest_vowel(\"WORLD\") == \"O\"",
                "assert get_closest_vowel(\"Python\") == \"o\"",
                "assert get_closest_vowel(\"JAVA\") == \"A\"",
                "assert get_closest_vowel(\"C++\") == \"\"",
                "assert get_closest_vowel(\"JavaScript\") == \"i\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['()(', ')']) == 'Yes'",
                "assert match_parens([')', ')']) == 'No'",
                "assert match_parens(['(', ')']) == 'Yes'",
                "assert match_parens(['(', '(']) == 'No'",
                "assert match_parens(['()', '()']) == 'Yes'",
                "assert match_parens(['((', '))']) == 'Yes'",
                "assert match_parens(['))', '((']) == 'Yes'",
                "assert match_parens([')(', ')']) == 'No'"
            ],
            "failed_tests": [
                "assert match_parens([')', '(']) == 'No' (AssertionError: )",
                "assert match_parens(['(', ')(']) == 'Yes' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
                "assert maximum([4, -4, 4], 2) == [4, 4]",
                "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
                "assert maximum([1, 2, 3, 4, 5], 0) == []",
                "assert maximum([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
                "assert maximum([5, 4, 3, 2, 1], 3) == [3, 4, 5]",
                "assert maximum([-1, -2, -3, -4, -5], 2) == [-2, -1]",
                "assert maximum([0, 0, 0, 0, 0], 3) == [0, 0, 0]"
            ],
            "failed_tests": [
                "assert maximum([1000, -1000, 0, 500, -500], 4) == [0, 500, 1000, -500] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9",
                "assert solution([30, 13, 24, 321]) == 0",
                "assert solution([2, 3]) == 0"
            ],
            "failed_tests": [
                "assert solution([2, 3, 4, 5, 6, 7]) == 12 (AssertionError: )",
                "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 16 (AssertionError: )",
                "assert solution([0, 1, 0, 1, 0, 1]) == 2 (AssertionError: )",
                "assert solution([-1, -2, -3, -4, -5]) == -6 (AssertionError: )",
                "assert solution([1]) == 0 (AssertionError: )",
                "assert solution([1, 3]) == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add_elements([1,2,3,4,5,6,7,8,9], 1) == 1",
                "assert add_elements([11,22,33,44,55,66,77,88,99], 5) == 165",
                "assert add_elements([1,2,3,4,5,6,7,8,9], 100) == 45",
                "assert add_elements([1,2,3,4,5,6,7,8,9], 5) == 15",
                "assert add_elements([10,20,30,40,50,60,70,80,90], 9) == 450",
                "assert add_elements([10,20,30,40,50,60,70,80,90], 0) == 0",
                "assert add_elements([11,22,33,44,55,66,77,88,99], 100) == 495",
                "assert add_elements([10,20,30,40,50,60,70,80,90], 1) == 10",
                "assert add_elements([100,200,300,400,500,600,700,800,900], 100) == 0",
                "assert add_elements([100,200,300,400,500,600,700,800,900], 9) == 0",
                "assert add_elements([111,222,333,444,555,666,777,888,999], 5) == 0",
                "assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(1) == [1]",
                "assert get_odd_collatz(5) == [1, 5]"
            ],
            "failed_tests": [
                "assert get_odd_collatz(6) == [1, 3] (AssertionError: )",
                "assert get_odd_collatz(7) == [1, 3, 7, 9, 21, 37, 43, 85, 113, 191, 213, 255, 341, 511, 767, 1021, 1533, 2047, 4095, 6141, 9217, 13825, 20737, 31105, 46657, 69985, 104977] (AssertionError: )",
                "assert get_odd_collatz(10) == [1, 3, 5, 7, 9, 21, 37, 43, 85, 113, 191, 213, 255, 341, 511, 767, 1021, 1533, 2047, 4095, 6141, 9217, 13825, 20737, 31105, 46657, 69985, 104977] (AssertionError: )",
                "assert get_odd_collatz(15) == [1, 3, 5, 7, 9, 15, 21, 37, 43, 85, 113, 191, 213, 255, 341, 511, 767, 1021, 1533, 2047, 4095, 6141, 9217, 13825, 20737, 31105, 46657, 69985, 104977] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('06-31-2020') == False",
                "assert valid_date('02-29-2020') == True",
                "assert valid_date('06/04/2020') == False",
                "assert valid_date('15-01-2012') == False",
                "assert valid_date('02-30-2020') == False",
                "assert valid_date('09-31-2020') == False",
                "assert valid_date('03-11-2000') == True"
            ],
            "failed_tests": [
                "assert valid_date('06-30-2021') == True (AssertionError: )",
                "assert valid_date('02-29-2021') == False (AssertionError: )",
                "assert valid_date('12-31-2020') == True (AssertionError: )",
                "assert valid_date('05-31-2021') == True (AssertionError: )",
                "assert valid_date('11-30-2021') == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"abcdef\") == 3",
                "assert split_words(\"Hello world, how are you?\") == [\"Hello\", \"world,\", \"how\", \"are\", \"you?\"]",
                "assert split_words(\"Hello,world,how,are,you\") == [\"Hello\", \"world\", \"how\", \"are\", \"you\"]",
                "assert split_words(\"\") == 0"
            ],
            "failed_tests": [
                "assert split_words(\"abc\") == 2 (AssertionError: )",
                "assert split_words(\"a\") == 1 (AssertionError: )",
                "assert split_words(\"b\") == 0 (AssertionError: )",
                "assert split_words(\"Hello\") == [\"Hello\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([3, 2, 1]) == False",
                "assert is_sorted([1, 2, 2, 2, 3, 4]) == False",
                "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False",
                "assert is_sorted([]) == True",
                "assert is_sorted([5]) == True",
                "assert is_sorted([1, 2, 3, 4, 4, 5]) == True",
                "assert is_sorted([1, 2, 3, 4, 5]) == True",
                "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True",
                "assert is_sorted([1, 3, 2, 4, 5]) == False",
                "assert is_sorted([1]) == True",
                "assert is_sorted([1, 1, 2, 2, 3, 3]) == True"
            ],
            "failed_tests": [
                "assert is_sorted([1, 2, 3, 4, 5, 5]) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert intersection((1, 2), (2, 3)) == \"NO\"",
                "assert intersection((-1, 1), (0, 4)) == \"NO\"",
                "assert intersection((-3, -1), (-5, 5)) == \"YES\"",
                "assert intersection((1, 5), (3, 7)) == \"YES\"",
                "assert intersection((1, 3), (4, 6)) == \"NO\"",
                "assert intersection((1, 2), (1, 2)) == \"NO\""
            ],
            "failed_tests": [
                "assert intersection((1, 10), (5, 15)) == \"NO\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([1, 2, 2, -4]) == -9",
                "assert prod_signs([0, 1]) == 0",
                "assert prod_signs([]) == None",
                "assert prod_signs([1, 2, 3]) == 6",
                "assert prod_signs([0, 0, 0]) == 0",
                "assert prod_signs([-1, 0, 1]) == 0",
                "assert prod_signs([-1, -1, -1, -1]) == 4",
                "assert prod_signs([1, 1, 1, 1]) == 4"
            ],
            "failed_tests": [
                "assert prod_signs([-1, -2, -3]) == 6 (AssertionError: )",
                "assert prod_signs([1, -1, 1, -1]) == -4 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 3) == [1, 2, 1]",
                "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
                "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 2) == [1, 2]",
                "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 2) == [1, 4]",
                "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 4) == [1, 2, 1, 2]",
                "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 3) == [1, 4, 1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert tri(3) == [1, 3, 2, 8]",
                "assert tri(1) == [1, 3]",
                "assert tri(2) == [1, 3, 2]",
                "assert tri(0) == [1]"
            ],
            "failed_tests": [
                "assert tri(4) == [1, 3, 2, 8, 15] (AssertionError: )",
                "assert tri(5) == [1, 3, 2, 8, 15, 44] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digits(1) == 1",
                "assert digits(4) == 0",
                "assert digits(235) == 15",
                "assert digits(2468) == 0",
                "assert digits(13579) == 945",
                "assert digits(0) == 0",
                "assert digits(111) == 1",
                "assert digits(123456789) == 945",
                "assert digits(987654321) == 945",
                "assert digits(333) == 27"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1,2,3]) == 14",
                "assert sum_squares([1,4,9]) == 98",
                "assert sum_squares([1,3,5,7]) == 84",
                "assert sum_squares([1.4,4.2,0]) == 29",
                "assert sum_squares([-2.4,1,1]) == 6",
                "assert sum_squares([0,0,0]) == 0",
                "assert sum_squares([-1,-2,-3]) == 14",
                "assert sum_squares([-1.1,-2.2,-3.3]) == 14"
            ],
            "failed_tests": [
                "assert sum_squares([2.5,3.5,4.5]) == 35 (AssertionError: )",
                "assert sum_squares([1.1,2.2,3.3]) == 14 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
                "assert check_if_last_char_is_a_letter(\"\") == False",
                "assert check_if_last_char_is_a_letter(\"apple\") == False",
                "assert check_if_last_char_is_a_letter(\"apple \") == False",
                "assert check_if_last_char_is_a_letter(\"a\") == True",
                "assert check_if_last_char_is_a_letter(\" a\") == True",
                "assert check_if_last_char_is_a_letter(\" a \") == False",
                "assert check_if_last_char_is_a_letter(\"1a\") == False",
                "assert check_if_last_char_is_a_letter(\"1 a\") == True",
                "assert check_if_last_char_is_a_letter(\"1 a \") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1,2,4,3,5]) == 3",
                "assert can_arrange([1,2,3]) == -1",
                "assert can_arrange([5,4,3,2,1]) == 4",
                "assert can_arrange([1,3,2,4,5]) == 2",
                "assert can_arrange([1]) == -1",
                "assert can_arrange([]) == -1",
                "assert can_arrange([2,1,3,5,4]) == 4",
                "assert can_arrange([1,2,3,5,4]) == 4",
                "assert can_arrange([1,2,3,4,5,6,7,8,10,9]) == 9",
                "assert can_arrange([10,9,8,7,6,5,4,3,2,1]) == 9"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([0]) == (None, None)",
                "assert largest_smallest_integers([-2, -4, -1, -3, -5, -7]) == (-1, None)",
                "assert largest_smallest_integers([-2, -4, 1, 3, 5, 7]) == (-2, 1)",
                "assert largest_smallest_integers([2, 4, -1, -3, -5, -7]) == (-1, 2)",
                "assert largest_smallest_integers([-2, -4, -1, 0, 5, 7]) == (-1, 5)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(1, 2.5) == 2.5",
                "assert compare_one(1, \"2,3\") == \"2,3\"",
                "assert compare_one(\"5,1\", \"6\") == \"6\"",
                "assert compare_one(\"1\", 1) == None",
                "assert compare_one(3, 3) == None",
                "assert compare_one(\"3,3\", \"3,3\") == None",
                "assert compare_one(5, \"5\") == None",
                "assert compare_one(5.5, \"5,5\") == None",
                "assert compare_one(5.5, 5) == 5.5",
                "assert compare_one(\"5,5\", 5) == \"5,5\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(1) == 1",
                "assert special_factorial(2) == 2",
                "assert special_factorial(3) == 12",
                "assert special_factorial(4) == 288",
                "assert special_factorial(5) == 34560",
                "assert special_factorial(6) == 24883200",
                "assert special_factorial(7) == 125411328000",
                "assert special_factorial(8) == 5056584744960000",
                "assert special_factorial(9) == 1834933472251084800000",
                "assert special_factorial(10) == 6658606584104736522240000000"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"Example\") == \"Example\"",
                "assert fix_spaces(\"Example 1\") == \"Example_1\"",
                "assert fix_spaces(\" Example 2\") == \"_Example_2\"",
                "assert fix_spaces(\" Example   3\") == \"_Example-3\"",
                "assert fix_spaces(\"Example     5\") == \"Example-5\"",
                "assert fix_spaces(\"Example6\") == \"Example6\"",
                "assert fix_spaces(\"\") == \"\""
            ],
            "failed_tests": [
                "assert fix_spaces(\"  Example   4  \") == \"-Example-4-\" (AssertionError: )",
                "assert fix_spaces(\"  \") == \"-\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"example.txt\") == 'Yes'",
                "assert file_name_check(\"1example.dll\") == 'No'",
                "assert file_name_check(\"example123.txt\") == 'Yes'",
                "assert file_name_check(\"example1234.txt\") == 'No'",
                "assert file_name_check(\"example..txt\") == 'No'",
                "assert file_name_check(\".txt\") == 'No'",
                "assert file_name_check(\"example.doc\") == 'No'",
                "assert file_name_check(\"Example.txt\") == 'Yes'",
                "assert file_name_check(\"example.dll\") == 'Yes'"
            ],
            "failed_tests": [
                "assert file_name_check(\"example.EXE\") == 'Yes' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 6",
                "assert sum_squares([]) == 0",
                "assert sum_squares([-1, -5, 2, -1, -5]) == -126",
                "assert sum_squares([0, 0, 0, 0]) == 0"
            ],
            "failed_tests": [
                "assert sum_squares([1, 2, 3, 4]) == 73 (AssertionError: )",
                "assert sum_squares([1, 1, 1, 1, 1]) == 4 (AssertionError: )",
                "assert sum_squares([-1, -1, -1, -1, -1]) == -4 (AssertionError: )",
                "assert sum_squares([2, 3, 4, 5, 6]) == 94 (AssertionError: )",
                "assert sum_squares([-2, -3, -4, -5, -6]) == -94 (AssertionError: )",
                "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1045 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"This is a test\") == \"is\"",
                "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
                "assert words_in_sentence(\"Machine Learning\") == \"Machine\"",
                "assert words_in_sentence(\"abc\") == \"abc\""
            ],
            "failed_tests": [
                "assert words_in_sentence(\"I love to code in Python\") == \"I to in\" (AssertionError: )",
                "assert words_in_sentence(\"Artificial Intelligence\") == \"Artificial\" (AssertionError: )",
                "assert words_in_sentence(\"a\") == \"a\" (AssertionError: )",
                "assert words_in_sentence(\"ab\") == \"\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"1/6\", \"2/1\") == False",
                "assert simplify(\"7/10\", \"10/2\") == False",
                "assert simplify(\"2/3\", \"3/2\") == True",
                "assert simplify(\"1/2\", \"2/1\") == True",
                "assert simplify(\"3/4\", \"4/3\") == True",
                "assert simplify(\"5/7\", \"7/5\") == True",
                "assert simplify(\"1/1\", \"1/1\") == True",
                "assert simplify(\"2/5\", \"5/2\") == True",
                "assert simplify(\"1/3\", \"3/1\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]",
                "assert order_by_points([]) == []",
                "assert order_by_points([10, 20, 30, 40]) == [10, 20, 30, 40]",
                "assert order_by_points([1, 2, 3, 4]) == [1, 2, 3, 4]",
                "assert order_by_points([11, 22, 33, 44]) == [11, 22, 33, 44]",
                "assert order_by_points([-11, -22, -33, -44]) == [-11, -22, -33, -44]"
            ],
            "failed_tests": [
                "assert order_by_points([-10, -20, -30, -40]) == [-10, -20, -30, -40] (AssertionError: )",
                "assert order_by_points([-1, -2, -3, -4]) == [-1, -2, -3, -4] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2",
                "assert specialFilter([11, 13, 15, 17, 19]) == 5",
                "assert specialFilter([10, 20, 30, 40, 50]) == 0",
                "assert specialFilter([-11, -13, -15, -17, -19]) == 0",
                "assert specialFilter([]) == 0",
                "assert specialFilter([135, 245, 355, 465, 575]) == 3",
                "assert specialFilter([1, 3, 5, 7, 9]) == 0"
            ],
            "failed_tests": [
                "assert specialFilter([111, 222, 333, 444, 555]) == 2 (AssertionError: )",
                "assert specialFilter([10, 11, 12, 13, 14, 15]) == 2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(5) == 1",
                "assert get_max_triples(1) == 0",
                "assert get_max_triples(3) == 0",
                "assert get_max_triples(0) == 0"
            ],
            "failed_tests": [
                "assert get_max_triples(6) == 3 (AssertionError: )",
                "assert get_max_triples(10) == 10 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
                "assert bf(\"Earth\", \"Mercury\") == (\"Venus\",)",
                "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
                "assert bf(\"Mars\", \"Mars\") == ()",
                "assert bf(\"Pluto\", \"Earth\") == ()",
                "assert bf(\"Earth\", \"Pluto\") == ()",
                "assert bf(\"Venus\", \"Mars\") == (\"Earth\",)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
                "assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]",
                "assert sorted_list_sum([]) == []"
            ],
            "failed_tests": [
                "assert sorted_list_sum([\"abc\", \"a\", \"abcd\", \"cd\"]) == [\"abc\", \"abcd\"] (AssertionError: )",
                "assert sorted_list_sum([\"abc\", \"a\", \"abcd\", \"cd\", \"efgh\"]) == [\"abc\", \"abcd\", \"efgh\"] (AssertionError: )",
                "assert sorted_list_sum([\"abc\", \"a\", \"abcd\", \"cd\", \"efgh\", \"ijkl\"]) == [\"abc\", \"abcd\", \"efgh\", \"ijkl\"] (AssertionError: )",
                "assert sorted_list_sum([\"abc\", \"a\", \"abcd\", \"cd\", \"efgh\", \"ijkl\", \"mnop\"]) == [\"abc\", \"abcd\", \"efgh\", \"ijkl\", \"mnop\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(7, 34, 12) == 34",
                "assert x_or_y(15, 8, 5) == 5",
                "assert x_or_y(2, 10, 20) == 10",
                "assert x_or_y(4, 10, 20) == 20",
                "assert x_or_y(13, 0, 1) == 0",
                "assert x_or_y(16, 0, 1) == 1",
                "assert x_or_y(17, -5, -10) == -5",
                "assert x_or_y(18, -5, -10) == -10"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([1, 3, 2, 0]) == 10",
                "assert double_the_difference([-1, -2, 0]) == 0",
                "assert double_the_difference([9, -2]) == 81",
                "assert double_the_difference([0]) == 0",
                "assert double_the_difference([]) == 0",
                "assert double_the_difference([1, 2, 3, 4, 5]) == 35",
                "assert double_the_difference([-1, -2, -3, -4, -5]) == 0",
                "assert double_the_difference([1.5, 2.5, 3.5]) == 0",
                "assert double_the_difference([1, 3, 5, 7, 9]) == 165",
                "assert double_the_difference([2, 4, 6, 8, 10]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
                "assert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]",
                "assert compare([0,0,0,0,0,0],[0,0,0,0,0,0]) == [0,0,0,0,0,0]",
                "assert compare([1,1,1,1,1,1],[1,1,1,1,1,1]) == [0,0,0,0,0,0]",
                "assert compare([1,2,3,4,5,6],[-1,-2,-3,-4,-5,-6]) == [2,4,6,8,10,12]",
                "assert compare([1,2,3,4,5,6],[6,5,4,3,2,1]) == [5,3,1,1,3,5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
                "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
                "assert Strongest_Extension('Test', ['Aa', 'Bb', 'Cc', 'Dd']) == 'Test.Aa'",
                "assert Strongest_Extension('Class', ['EXTENSION', 'extension', 'Extension']) == 'Class.EXTENSION'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('Example', ['exAmple', 'EXample', 'exAMPLE']) == 'Example.EXample' (AssertionError: )",
                "assert Strongest_Extension('Class', []) == 'Class.' (IndexError: list index out of range)"
            ]
        }
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"abcabc\",\"\") == True",
                "assert cycpattern_check(\"hello\",\"ell\") == True",
                "assert cycpattern_check(\"abab\",\"baa\") == True",
                "assert cycpattern_check(\"abcabc\",\"abc\") == True",
                "assert cycpattern_check(\"abcabc\",\"abcabca\") == False",
                "assert cycpattern_check(\"\",\"\") == True",
                "assert cycpattern_check(\"abcabc\",\"abcabc\") == True",
                "assert cycpattern_check(\"abcabc\",\"cab\") == True",
                "assert cycpattern_check(\"\",\"abc\") == False",
                "assert cycpattern_check(\"abcabc\",\"cba\") == False",
                "assert cycpattern_check(\"whassup\",\"psus\") == False",
                "assert cycpattern_check(\"efef\",\"eeff\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(-12) == (1, 1)",
                "assert even_odd_count(123) == (1, 2)",
                "assert even_odd_count(0) == (1, 0)",
                "assert even_odd_count(111) == (0, 3)",
                "assert even_odd_count(222) == (3, 0)",
                "assert even_odd_count(-1234567890) == (5, 5)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(1) == 'i'",
                "assert int_to_mini_roman(4) == 'iv'",
                "assert int_to_mini_roman(9) == 'ix'",
                "assert int_to_mini_roman(19) == 'xix'",
                "assert int_to_mini_roman(40) == 'xl'",
                "assert int_to_mini_roman(90) == 'xc'",
                "assert int_to_mini_roman(152) == 'clii'",
                "assert int_to_mini_roman(400) == 'cd'",
                "assert int_to_mini_roman(426) == 'cdxxvi'",
                "assert int_to_mini_roman(500) == 'd'",
                "assert int_to_mini_roman(900) == 'cm'",
                "assert int_to_mini_roman(1000) == 'm'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(1, 2, 3) == False",
                "assert right_angle_triangle(5, 12, 13) == True",
                "assert right_angle_triangle(5, 5, 5) == False",
                "assert right_angle_triangle(6, 8, 10) == True"
            ],
            "failed_tests": [
                "assert right_angle_triangle(0, 0, 0) == False (AssertionError: )",
                "assert right_angle_triangle(-3, -4, -5) == False (AssertionError: )",
                "assert right_angle_triangle(3, 4, -5) == False (AssertionError: )",
                "assert right_angle_triangle(1, 1, 1.41421356237) == True (AssertionError: )",
                "assert right_angle_triangle(1, 1.41421356237, 1) == True (AssertionError: )",
                "assert right_angle_triangle(1.41421356237, 1, 1) == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
                "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"",
                "assert find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"",
                "assert find_max([\"abc\", \"def\", \"ghi\"]) == \"abc\"",
                "assert find_max([\"abc\", \"abcd\", \"abcde\"]) == \"abcde\"",
                "assert find_max([\"\", \"a\", \"aa\"]) == \"a\"",
                "assert find_max([\"abc\", \"def\", \"ghi\", \"jklm\"]) == \"jklm\"",
                "assert find_max([\"abc\", \"abc\", \"abc\"]) == \"abc\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(5, 6, 10) == [11, 4]",
                "assert eat(4, 8, 9) == [12, 1]",
                "assert eat(1, 10, 10) == [11, 0]",
                "assert eat(2, 11, 5) == [7, 0]",
                "assert eat(0, 0, 0) == [0, 0]",
                "assert eat(1000, 1000, 1000) == [2000, 0]",
                "assert eat(500, 500, 500) == [1000, 0]",
                "assert eat(0, 1000, 500) == [500, 0]",
                "assert eat(1000, 0, 500) == [1000, 500]",
                "assert eat(500, 0, 500) == [500, 500]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['+'], [1, 2]) == 3",
                "assert do_algebra(['-', '+'], [3, 2, 1]) == 2",
                "assert do_algebra(['*', '//'], [2, 3, 1]) == 6",
                "assert do_algebra(['**', '+'], [2, 3, 1]) == 9",
                "assert do_algebra(['-', '*', '+'], [5, 4, 3, 2]) == -5"
            ],
            "failed_tests": [
                "assert do_algebra(['+', '*', '-', '//'], [1, 2, 3, 4, 2]) == 1 (AssertionError: )",
                "assert do_algebra(['**', '*', '-', '+'], [2, 3, 2, 4, 1]) == 15 (AssertionError: )",
                "assert do_algebra(['//', '+', '*', '-'], [10, 2, 3, 2, 1]) == 8 (AssertionError: )",
                "assert do_algebra(['-', '+', '*', '//'], [5, 4, 3, 2, 1]) == 2 (AssertionError: )",
                "assert do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 2, 1]) == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"1234\") == \"4321\"",
                "assert solve(\"ab\") == \"AB\"",
                "assert solve(\"#a@C\") == \"#A@c\"",
                "assert solve(\"AaBbCc\") == \"aAbBcC\"",
                "assert solve(\"123#abc\") == \"123#ABC\"",
                "assert solve(\"\") == \"\"",
                "assert solve(\"ABC123\") == \"abc123\"",
                "assert solve(\"abcDEF\") == \"ABCdef\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('') == None",
                "assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'",
                "assert string_to_md5('abcdef') == 'e80b5017098950fc58aad83c8c14978e'"
            ],
            "failed_tests": [
                "assert string_to_md5('AI') == '7025c0ffac083d5e7f40638f9dc6c8fd' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(2, 8) == [2, 4, 6, 8]",
                "assert generate_integers(8, 2) == [2, 4, 6, 8]",
                "assert generate_integers(10, 14) == []",
                "assert generate_integers(1, 1) == []",
                "assert generate_integers(2, 2) == [2]",
                "assert generate_integers(3, 3) == []"
            ],
            "failed_tests": []
        }
    }
]