[
    {
        "task_id": "HumanEval/0",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
                "assert has_close_elements([0.1, 0.2, 0.4], 0.05) == False",
                "assert has_close_elements([1.0, 1.1], 0.05) == False"
            ],
            "failed_tests": [
                "assert has_close_elements([1.5, 2.5, 3.5], 1.0) == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('') == []",
                "assert separate_paren_groups('((((()))))') == ['((((()))))']",
                "assert separate_paren_groups('()((()))()') == ['()', '((()))', '()']",
                "assert separate_paren_groups('(())()') == ['(())', '()']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(5.0) == 0.0",
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(0.75) == 0.75"
            ],
            "failed_tests": [
                "assert truncate_number(1234.5678) == 0.5678 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([1, 2, 3]) == False",
                "assert below_zero([1, 2, -4, 5]) == True",
                "assert below_zero([-1, -2, -3]) == True",
                "assert below_zero([100, -50, -50, -1]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([-2.0, -2.0, -2.0]) == 0.0",
                "assert mean_absolute_deviation([1.0, 1.0, 1.0, 1.0]) == 0.0",
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([5.5, 2.5, 0.0]) == 2.3333333333333335 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([-1, -2, -3], 1) == [-1, 1, -2, 1, -3]",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
                "assert intersperse([1, 2, 3, 4], 0) == [1, 0, 2, 0, 3, 0, 4]",
                "assert intersperse([0, 0, 0], 0) == [0, 0, 0, 0, 0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('()') == [1]",
                "assert parse_nested_parens('((()())())') == [3]",
                "assert parse_nested_parens('(()) (())') == [2, 2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring(['this', 'is', 'a', 'test'], 'is') == ['this', 'is']",
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']",
                "assert filter_by_substring(['mix', 'max', 'mux'], 'm') == ['mix', 'max', 'mux']",
                "assert filter_by_substring(['123', '456', '789'], '1') == ['123']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([0, 2, 3, 4]) == (9, 0)",
                "assert sum_product([1, -1, 1, -1]) == (0, 1)",
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([-1, -2, -3, -4]) == (-10, 24)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([]) == []",
                "assert rolling_max([1]) == [1]",
                "assert rolling_max([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]",
                "assert rolling_max([5, 3, 1, 2, 4]) == [5, 5, 5, 5, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_palindrome(\"a\") == \"a\"",
                "assert make_palindrome(\"cata\") == \"catac\"",
                "assert is_palindrome(\"a\") == True",
                "assert make_palindrome(\"cat\") == \"catac\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('0011', '0011') == '0000'",
                "assert string_xor('1111', '0000') == '1111'",
                "assert string_xor('010', '110') == '100'",
                "assert string_xor('101010', '010101') == '111111'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest(['12345', '1234', '123', '12']) == '12345'",
                "assert longest([]) is None",
                "assert longest(['a', 'b', 'c']) == 'a'",
                "assert longest(['one', 'two', 'three', 'four', 'five']) == 'three'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(0, 5) == 5",
                "assert greatest_common_divisor(3, 5) == 1",
                "assert greatest_common_divisor(25, 15) == 5"
            ],
            "failed_tests": [
                "assert greatest_common_divisor(25, -15) == 5 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('ab') == ['a', 'ab']",
                "assert all_prefixes('xyz') == ['x', 'xy', 'xyz']",
                "assert all_prefixes('1234') == ['1', '12', '123', '1234']",
                "assert all_prefixes('') == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(1) == '0 1'",
                "assert string_sequence(-1) == ''",
                "assert string_sequence(3) == '0 1 2 3'",
                "assert string_sequence(2) == '0 1 2'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('AbCdeFg') == 7",
                "assert count_distinct_characters('xyzXYZ') == 3",
                "assert count_distinct_characters('1234567890') == 10"
            ],
            "failed_tests": [
                "assert count_distinct_characters('Spaces are characters too!') == 18 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
                "assert parse_music('o') == [4]",
                "assert parse_music('.| o| o .|') == [1, 2, 4, 1]",
                "assert parse_music('o| o| o| o|') == [2, 2, 2, 2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('aaaaa', 'aa') == 4",
                "assert how_many_times('hello world', 'o') == 2",
                "assert how_many_times('aaa', 'a') == 3"
            ],
            "failed_tests": [
                "assert how_many_times('ababababa', 'aba') == 3 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('nine one five two') == 'one two five nine'",
                "assert sort_numbers('four four four four') == 'four four four four'",
                "assert sort_numbers('zero two four six') == 'zero two four six'",
                "assert sort_numbers('') == ''"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([10.5, 10.2, 10.3]) == (10.2, 10.3)",
                "assert find_closest_elements([100.0, 200.0, 300.0, 400.0, 401.0]) == (400.0, 401.0)",
                "assert find_closest_elements([-1.0, -2.0, -2.1]) == (-2.1, -2.0)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([10.0, 15.0, 20.0]) == [0.0, 0.5, 1.0]",
                "assert rescale_to_unit([100.0, 200.0, 300.0, 400.0]) == [0.0, 0.3333333333333333, 0.6666666666666666, 1.0]",
                "assert rescale_to_unit([-5.0, 0.0, 5.0]) == [0.0, 0.5, 1.0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_integers(['string', {}, [], (), None]) == []",
                "assert filter_integers([0, 1.1, 2.2, 3]) == [0, 3]",
                "assert filter_integers([-1, -2, -3]) == [-1, -2, -3]"
            ],
            "failed_tests": [
                "assert filter_integers([True, False, 'True', 'False']) == [] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('1234567890') == 10",
                "assert strlen('abc') == 3",
                "assert strlen('hello world') == 11",
                "assert strlen('') == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(50) == 25",
                "assert largest_divisor(100) == 50",
                "assert largest_divisor(37) == 1",
                "assert largest_divisor(15) == 5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(1) == []",
                "assert factorize(70) == [2, 5, 7]",
                "assert factorize(100) == [2, 2, 5, 5]",
                "assert factorize(999) == [3, 3, 3, 37]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1]",
                "assert remove_duplicates([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]",
                "assert remove_duplicates([1, 1, 1, 1, 1]) == []",
                "assert remove_duplicates([10, 20, 20, 30, 30, 30, 40]) == [10, 40]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('12345') == '12345'",
                "assert flip_case('Hello') == 'hELLO'",
                "assert flip_case('hELLO') == 'Hello'",
                "assert flip_case('123abcABC') == '123ABCabc'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate(['single']) == 'single'",
                "assert concatenate(['hello', ' ', 'world']) == 'hello world'",
                "assert concatenate(['', ' ']) == ' '",
                "assert concatenate(['123', '456', '789']) == '123456789'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix(['apple', 'banana', 'apricot', 'cherry'], 'ap') == ['apple', 'apricot']",
                "assert filter_by_prefix(['123', '456', '789'], '1') == ['123']",
                "assert filter_by_prefix(['', ' ', '  ', '   '], '') == ['', ' ', '  ', '   ']",
                "assert filter_by_prefix(['one', 'two', 'three', 'four'], 'f') == ['four']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 0, 1]) == [1]",
                "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
                "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]",
                "assert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(3) == True",
                "assert is_prime(15) == False",
                "assert is_prime(4) == False",
                "assert is_prime(2) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert round(poly([-6, 11, -6, 1], 3.0), 2) == 0",
                "assert round(poly([1, 2], -0.5), 2) == 0",
                "assert round(poly([2, -3, 1], -2.0), 2) != 0",
                "assert round(poly([-6, 11, -6, 1], 2.0), 2) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_third([1]) == [1]",
                "assert sort_third([]) == []",
                "assert sort_third([10, 15, 20, 25, 30, 35, 40]) == [10, 15, 20, 25, 30, 35, 40]",
                "assert sort_third([4, 5, 6, 1, 2, 3]) == [1, 5, 6, 4, 2, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([-3, -2, -1, 0, 1, 2, 3]) == [-3, -2, -1, 0, 1, 2, 3]",
                "assert unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert unique([100]) == [100]",
                "assert unique([1, 1, 1, 1]) == [1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123",
                "assert max_element([-1, -2, -3]) == -1",
                "assert max_element([0, 0, 0, 0]) == 0",
                "assert max_element([1, 2, 3]) == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(79) == 3",
                "assert fizz_buzz(78) == 2"
            ],
            "failed_tests": [
                "assert fizz_buzz(200) == 9 (AssertionError: )",
                "assert fizz_buzz(100) == 4 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_even([]) == []",
                "assert sort_even([1, 2, 3]) == [1, 2, 3]",
                "assert sort_even([1]) == [1]",
                "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode_cyclic(\"abcde\") == \"bcade\"",
                "assert encode_cyclic(\"\") == \"\""
            ],
            "failed_tests": [
                "assert encode_cyclic(\"abcdef\") == \"bcadef\" (AssertionError: )",
                "assert encode_cyclic(\"abcdefg\") == \"bcadefg\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(6) == 233",
                "assert prime_fib(7) == 1597",
                "assert prime_fib(10) == 433494437",
                "assert prime_fib(9) == 514229"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
                "assert triples_sum_to_zero([0, 0, 0]) == True",
                "assert triples_sum_to_zero([-1, 1, 0]) == True",
                "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(50) == 2500",
                "assert car_race_collision(0) == 0",
                "assert car_race_collision(2) == 4",
                "assert car_race_collision(100) == 10000"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([0, 0, 0]) == [1, 1, 1]",
                "assert incr_list([]) == []",
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([-1, -2, -3]) == [0, -1, -2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([]) == False",
                "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True",
                "assert pairs_sum_to_zero([0, 0]) == True",
                "assert pairs_sum_to_zero([-1, -2, -3, 3]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert change_base(15, 8) == '17'",
                "assert change_base(8, 3) == '22'",
                "assert change_base(10, 2) == '1010'",
                "assert change_base(255, 2) == '11111111'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(4.5, 2.2) == 4.95",
                "assert triangle_area(0, 5) == 0.0",
                "assert triangle_area(7, 0) == 0.0",
                "assert triangle_area(1, 1) == 0.5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib4(2) == 2",
                "assert fib4(4) == 2",
                "assert fib4(6) == 8"
            ],
            "failed_tests": [
                "assert fib4(9) == 48 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert median([0, 0, 0, 0]) == 0",
                "assert median([1, 2]) == 1.5",
                "assert median([1]) == 1",
                "assert median([3, 1, 2, 4, 5]) == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('racecar') == True",
                "assert is_palindrome('') == True",
                "assert is_palindrome('123456') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(0, 101) == 1",
                "assert modp(1, 1) == 0",
                "assert modp(3, 5) == 3",
                "assert modp(3, 11) == 8"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_shift(\"xyz\") == \"cde\"",
                "assert decode_shift(\"fghcde\") == \"abcxyz\"",
                "assert encode_shift(\"\") == \"\"",
                "assert encode_shift(\"abc\") == \"fgh\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('zbcd') == 'zbcd'",
                "assert remove_vowels('aaBAA') == 'B'",
                "assert remove_vowels('12345') == '12345'",
                "assert remove_vowels('aaaaa') == ''"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 4, 10], 100) == True",
                "assert below_threshold([1, 2, 3], 4) == True",
                "assert below_threshold([1, 20, 4, 10], 5) == False",
                "assert below_threshold([-1, -2, -3], 0) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(100, 200) == 300",
                "assert add(0, 0) == 0",
                "assert add(5, 7) == 12",
                "assert add(-1, 1) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert same_chars('eabcd', 'dddddddabc') == False",
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
                "assert same_chars('xyz', 'zyx') == True"
            ],
            "failed_tests": [
                "assert same_chars('abc', 'abcc') == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(2) == 1",
                "assert fib(8) == 21",
                "assert fib(10) == 55",
                "assert fib(5) == 5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"><\") == False",
                "assert correct_bracketing(\"><<>\") == False",
                "assert correct_bracketing(\"<\") == False",
                "assert correct_bracketing(\"<<>><<>><<>>\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([100, 50, 25, 12, 6, 3]) == True",
                "assert monotonic([]) == True",
                "assert monotonic([10, 10, 10, 10]) == True",
                "assert monotonic([1, 2, 4, 20]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]",
                "assert common([], [1, 2, 3]) == []",
                "assert common(['a', 'b', 'c'], ['a', 'c', 'd']) == ['a', 'c']",
                "assert common([1, 2, 3], [4, 5, 6]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(100) == 5",
                "assert largest_prime_factor(2048) == 2"
            ],
            "failed_tests": [
                "assert largest_prime_factor(600851475143) == 6857 (TimeoutError: Test case execution exceeded 10 seconds)",
                "assert largest_prime_factor(9973) == 89 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(0) == 0",
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(-5) == 0",
                "assert sum_to_n(30) == 465"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"(()\") == False",
                "assert correct_bracketing(\")(()\") == False",
                "assert correct_bracketing(\"((((()))))\") == True",
                "assert correct_bracketing(\"())(\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([-1, -2, -3, -4]) == [-2, -6, -12]",
                "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
                "assert derivative([0, 0, 0]) == [0, 0]",
                "assert derivative([5, 4, 3, 2, 1]) == [4, 6, 6, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(0) == 0",
                "assert fibfib(6) == 7",
                "assert fibfib(8) == 24",
                "assert fibfib(9) == 44"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"SKY\") == 1",
                "assert vowels_count(\"rhythm\") == 0",
                "assert vowels_count(\"aeiou\") == 5"
            ],
            "failed_tests": [
                "assert vowels_count(\"quickly\") == 2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12345, 5) == \"12345\"",
                "assert circular_shift(123, 4) == \"321\"",
                "assert circular_shift(123, 3) == \"123\"",
                "assert circular_shift(0, 1) == \"0\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"helloE\") == 69",
                "assert digitSum(\"abAB\") == 131",
                "assert digitSum(\"woArBld\") == 131",
                "assert digitSum(\"\") == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"0 apples and 0 oranges\", 5) == 5",
                "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19",
                "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95",
                "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
                "assert pluck([4, 2, 3]) == [2, 1]",
                "assert pluck([1, 3, 5, 7]) == []",
                "assert pluck([0]) == [0, 0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert search([3, 3, 3, 3, 2, 2, 2, 1]) == 3",
                "assert search([4, 1, 2, 2, 3, 1]) == 2",
                "assert search([1, 1, 1, 1]) == 1"
            ],
            "failed_tests": [
                "assert search([1]) == -1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([3, 3, 2, 2, 1, 1]) == [1, 3, 1, 3, 2, 2]",
                "assert strange_sort_list([2, 1]) == [1, 2]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(7, 24, 25) == 84.00",
                "assert triangle_area(10, 10, 10) == 43.30",
                "assert triangle_area(8, 15, 17) == 60.00",
                "assert triangle_area(1, 2, 10) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([], 0) == True",
                "assert will_it_fly([3], 5) == True",
                "assert will_it_fly([1, 2, 3, 2, 1], 10) == True",
                "assert will_it_fly([1, 2, 3, 4, 5], 15) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1, 1, 1, 1, 1, 1]) == 0",
                "assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4",
                "assert smallest_change([1, 3, 5, 7, 9, 7, 5, 3, 1]) == 0",
                "assert smallest_change([1, 2, 3, 2, 1]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match(['a', 'b', 'c'], ['d', 'e']) == ['d', 'e']",
                "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']",
                "assert total_match(['equal', 'length'], ['equal', 'length']) == ['equal', 'length']",
                "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(1) == False",
                "assert is_multiply_prime(2*3*5*7) == False",
                "assert is_multiply_prime(7) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(1, 4) == True",
                "assert is_simple_power(81, 3) == True",
                "assert is_simple_power(5, 3) == False"
            ],
            "failed_tests": [
                "assert is_simple_power(1, 0) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(2) == False",
                "assert iscube(27) == True",
                "assert iscube(64) == True",
                "assert iscube(1) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"9\") == 0",
                "assert hex_key(\"\") == 0",
                "assert hex_key(\"FFFF\") == 0",
                "assert hex_key(\"2B7D\") == 4"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(2) == \"db10db\"",
                "assert decimal_to_binary(64) == \"db1000000db\"",
                "assert decimal_to_binary(32) == \"db100000db\"",
                "assert decimal_to_binary(15) == \"db1111db\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy(\"aabbc\") == False",
                "assert is_happy(\"xyz\") == True",
                "assert is_happy(\"aabb\") == False",
                "assert is_happy(\"aa\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([4.0]) == ['A+']",
                "assert numerical_letter_grade([4.0, 3.8, 3.4, 3.1, 2.8, 2.4, 2.1, 1.8, 1.4, 1.1, 0.8, 0.1, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']",
                "assert numerical_letter_grade([0.0]) == ['E']"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([3.5, 2.5, 1.5, 0.5]) == ['A-', 'B', 'C-', 'D'] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('abcdcba') == True",
                "assert prime_length('kittens') == True",
                "assert prime_length('abcdefg') == True",
                "assert prime_length('Hello') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert starts_one_ends(1) == 2 (AssertionError: )",
                "assert starts_one_ends(4) == 1710 (AssertionError: )",
                "assert starts_one_ends(5) == 16200 (AssertionError: )",
                "assert starts_one_ends(6) == 153090 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solve(1) == \"1\"",
                "assert solve(0) == \"0\""
            ],
            "failed_tests": [
                "assert solve(256) == \"1\" (AssertionError: )",
                "assert solve(255) == \"11111111\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([1, 3, 5, 7, 9]) == 0",
                "assert add([10]) == 0",
                "assert add([2, 4, 6, 8, 10]) == 12"
            ],
            "failed_tests": [
                "assert add([0, 2, 4, 6, 8]) == 2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('123 456 789') == '123 456 789'",
                "assert anti_shuffle('A B C D E F G') == 'A B C D E F G'",
                "assert anti_shuffle('hello') == 'ehllo'"
            ],
            "failed_tests": [
                "assert anti_shuffle('The quick brown fox') == 'Teh cikqu bnoor fiox' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([\n  [7,8,9],\n  [7,8,9,10,11,12],\n  [13,14,15]\n], 7) == [(0, 0), (1, 0)]",
                "assert get_row([\n  [1,2,3,4,5],\n  [5,4,3,2,1],\n  [6,7,8,9,10]\n], 5) == [(0, 4), (1, 0)]",
                "assert get_row([\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n], 10) == []",
                "assert get_row([], 1) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
                "assert sort_array([5]) == [5]"
            ],
            "failed_tests": [
                "assert sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9] (AssertionError: )",
                "assert sort_array([1, 0, 1]) == [1, 0, 1] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encrypt('gf') == 'kj'",
                "assert encrypt('') == ''",
                "assert encrypt('y') == 'c'",
                "assert encrypt('hi') == 'lm'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([-1, -2, -3, -4, -5]) == -4",
                "assert next_smallest([]) == None",
                "assert next_smallest([3, 3, 2, 2]) == 3",
                "assert next_smallest([1, 2, 3, 4, 5]) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"I think, therefore I am. I am bored!\") == 2",
                "assert is_bored(\"Hello world\") == 0",
                "assert is_bored(\"Interesting! I wonder why? I guess.\") == 2"
            ],
            "failed_tests": [
                "assert is_bored(\"I. I. I. I.\") == 4 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(10, 5, 3) == False",
                "assert any_int(3, -2, 1) == True",
                "assert any_int(-1, -1, -2) == True",
                "assert any_int(3.6, -2.2, 2) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'"
            ],
            "failed_tests": [
                "assert encode('world') == 'wMrLD' (AssertionError: )",
                "assert encode('HELLO') == 'hJLLM' (AssertionError: )",
                "assert encode('encode') == 'GMCGCG' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([0]) == 0",
                "assert skjkasdkd([97]) == 16",
                "assert skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 11",
                "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"alllower\":\"yes\", \"stilllower\":\"yes\"}) == True",
                "assert check_dict_case({\"ALLUPPER\":\"YES\", \"STILLUPPER\":\"YES\"}) == True",
                "assert check_dict_case({\"123\":\"numbers\", \"456\":\"are\", \"789\":\"keys\"}) == False",
                "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(1) == []",
                "assert count_up_to(2) == []",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(0) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert multiply(999, 1) == 9",
                "assert multiply(14, -15) == 20",
                "assert multiply(123, 456) == 18"
            ],
            "failed_tests": [
                "assert multiply(-123, 456) == 18 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_upper('aEIOU') == 2",
                "assert count_upper('dBBE') == 0",
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('') == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"-99.99\") == -100",
                "assert closest_integer(\"-14.5\") == -15",
                "assert closest_integer(\"0\") == 0",
                "assert closest_integer(\"99.99\") == 100"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]",
                "assert make_a_pile(3) == [3, 5, 7]",
                "assert make_a_pile(0) == []",
                "assert make_a_pile(1) == [1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
                "assert words_string(\"  Spaces  before\") == [\"Spaces\", \"before\"]",
                "assert words_string(\"After spaces   \") == [\"After\", \"spaces\"]",
                "assert words_string(\"\") == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(0, 1) == 0",
                "assert choose_num(13, 12) == -1",
                "assert choose_num(21, 22) == 22",
                "assert choose_num(8, 13) == 12"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(1, 5) == \"0b11\"",
                "assert rounded_avg(50, 50) == \"0b110010\"",
                "assert rounded_avg(5, 5) == \"0b101\""
            ],
            "failed_tests": [
                "assert rounded_avg(100, 102) == \"0b110011\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([152, 323, 1422, 10]) == []",
                "assert unique_digits([7, 77, 777, 7777]) == [7, 77, 777, 7777]"
            ],
            "failed_tests": [
                "assert unique_digits([11, 22, 35, 47, 59]) == [35, 47, 59] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([9]) == [\"Nine\"]",
                "assert by_length([]) == []",
                "assert by_length([10, 11, 12, 0, -2, -3]) == []",
                "assert by_length([1]) == [\"One\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(5) == [1, 2, 6, 24, 15]",
                "assert f(7) == [1, 2, 6, 24, 15, 720, 28]",
                "assert f(3) == [1, 2, 6]",
                "assert f(0) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(2) == (1, 1)",
                "assert even_odd_palindrome(12) == (4, 6)"
            ],
            "failed_tests": [
                "assert even_odd_palindrome(22) == (9, 12) (AssertionError: )",
                "assert even_odd_palindrome(9) == (3, 6) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_nums([111, 222, 333]) == 3",
                "assert count_nums([10, 20, 30]) == 3"
            ],
            "failed_tests": [
                "assert count_nums([-123, 456, 789]) == 2 (AssertionError: )",
                "assert count_nums([9, -17, 26, 0]) == 2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([1, 3, 5, 2, 4]) == False",
                "assert move_one_ball([5, 1, 2, 3, 4]) == True",
                "assert move_one_ball([3, 5, 4, 1, 2]) == False",
                "assert move_one_ball([1]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1, 3, 5, 7], [1, 3, 5, 7]) == \"NO\"",
                "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"",
                "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
                "assert exchange([2, 4, 6, 8], [2, 4, 6, 8]) == \"YES\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert histogram('') == {}",
                "assert histogram('c c c c c') == {'c': 5}"
            ],
            "failed_tests": [
                "assert histogram('x y z x y z x') == {'x': 3, 'y': 2, 'z': 2} (AssertionError: )",
                "assert histogram('p p p q q r s') == {'p': 3, 'q': 2, 'r': 1, 's': 1} (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)",
                "assert reverse_delete(\"teststring\", \"xyz\") == ('teststring', False)",
                "assert reverse_delete(\"a\", \"a\") == ('', True)",
                "assert reverse_delete(\"\", \"abc\") == ('', True)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['3', '11111111']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
                "assert odd_count(['2468', '13579']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 5n the str5ng 5 of the 5nput.\"]",
                "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]"
            ],
            "failed_tests": [
                "assert odd_count(['', '0024', '567']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([-5]) == -5",
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([-1, 2, -3, 4]) == -3",
                "assert minSubArraySum([-1, -2, -3]) == -6"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,0,0], [0,0,0,0]], 1) == 0",
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
                "assert max_fill([[1]], 1) == 1",
                "assert max_fill([[1,1,1,1], [1,1,1,1], [1,1,1,1]], 4) == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_array([3, 8, 3, 6]) == [8, 3, 3, 6]",
                "assert sort_array([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 4, 8, 3, 5, 6, 9, 10, 7]",
                "assert sort_array([0]) == [0]",
                "assert sort_array([7, 8, 3, 6]) == [8, 3, 6, 7]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"Hello world\", 4) == [\"world\"]",
                "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
                "assert select_words(\"\", 2) == []",
                "assert select_words(\"a e i o u\", 1) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"Sky\") == \"\"",
                "assert get_closest_vowel(\"FULL\") == \"U\"",
                "assert get_closest_vowel(\"yogurt\") == \"u\""
            ],
            "failed_tests": [
                "assert get_closest_vowel(\"bEautiful\") == \"i\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['', '']) == 'Yes'",
                "assert match_parens([')', ')']) == 'No'",
                "assert match_parens(['())(', '']) == 'No'",
                "assert match_parens(['()(', ')']) == 'Yes'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([1], 1) == [1]",
                "assert maximum([100, 200, 300, 400, 500], 0) == []",
                "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
                "assert maximum([-1, -2, -3, -4, -5], 2) == [-2, -1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solution([0, 1, 2, 3, 4, 5]) == 0",
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([2, 4, 6, 8, 10]) == 0"
            ],
            "failed_tests": [
                "assert solution([11, 22, 33, 44, 55]) == 44 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add_elements([99, 1, 1001, 22, 33], 5) == 155",
                "assert add_elements([1, 2, 3, 4, 5], 5) == 15",
                "assert add_elements([123, 456, 789, 12, 34, 56, 78], 7) == 180",
                "assert add_elements([10, 20, 30, 40, 50], 3) == 60"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(2) == [1]"
            ],
            "failed_tests": [
                "assert get_odd_collatz(11) == [1, 3, 5, 7, 11, 17, 26] (AssertionError: )",
                "assert get_odd_collatz(3) == [1, 3, 5, 7, 10] (AssertionError: )",
                "assert get_odd_collatz(7) == [1, 3, 5, 7, 11, 21, 42] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('04-0-2040') == False",
                "assert valid_date('15-01-2012') == False",
                "assert valid_date('04-31-2020') == False"
            ],
            "failed_tests": [
                "assert valid_date('02-29-2021') == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]"
            ],
            "failed_tests": [
                "assert split_words(\"a,c,e,g,i,k\") == 6 (AssertionError: )",
                "assert split_words(\" \") == [\"\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True",
                "assert is_sorted([1, 2]) == True",
                "assert is_sorted([1, 2, 3, 4, 5, 5]) == True",
                "assert is_sorted([1, 2, 3, 4, 5, 6]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersection((3, 7), (8, 10)) == \"NO\"",
                "assert intersection((0, 0), (0, 0)) == \"NO\"",
                "assert intersection((2, 5), (3, 11)) == \"YES\"",
                "assert intersection((1, 2), (2, 3)) == \"NO\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([1, 2, 3, 4, 5]) == 15",
                "assert prod_signs([]) == None",
                "assert prod_signs([-1, 1, -1, 1, -1]) == -5"
            ],
            "failed_tests": [
                "assert prod_signs([-1, -2, -3]) == 6 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[2, 3], [1, 4]], 4) == [1, 2, 1, 2]",
                "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]"
            ],
            "failed_tests": [
                "assert minPath([[3, 1], [2, 4]], 3) == [1, 2, 1] (AssertionError: )",
                "assert minPath([[1]], 1) == [1] (ValueError: min() arg is an empty sequence)"
            ]
        }
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert tri(4) == [1, 3, 2, 8, 3]",
                "assert tri(0) == [1]"
            ],
            "failed_tests": [
                "assert tri(5) == [1, 3, 2, 8, 3, 17] (AssertionError: )",
                "assert tri(6) == [1, 3, 2, 8, 3, 17, 4] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digits(13579) == 945",
                "assert digits(1) == 1",
                "assert digits(1024) == 1",
                "assert digits(4) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[[[[][]]]]') == True",
                "assert is_nested('[[]]') == True",
                "assert is_nested('[[]][[') == True",
                "assert is_nested(']]]') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 3, 5, 7]) == 84",
                "assert sum_squares([]) == 0",
                "assert sum_squares([-2.4, 1, 1]) == 6",
                "assert sum_squares([-1.5, -2.5, -3.5]) == 14"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
                "assert check_if_last_char_is_a_letter(\"a\") == True",
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
                "assert check_if_last_char_is_a_letter(\" \") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([2, 1]) == 1",
                "assert can_arrange([10, 20, 30, 25, 40]) == 3",
                "assert can_arrange([2, 3, 5, 7, 11, 13, 12]) == 6",
                "assert can_arrange([1, 2, 3]) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([-2, -4, -1, -3, -5, -7]) == (-1, None)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([-2, -1, 0, 1, 2]) == (-1, 1)",
                "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(\"5,1\", \"6\") == \"6\"",
                "assert compare_one(-1, \"-2\") == -1",
                "assert compare_one(0, \"0\") == None",
                "assert compare_one(3.5, 2) == 3.5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(200) == True",
                "assert is_equal_to_sum_even(8) == True",
                "assert is_equal_to_sum_even(6) == False"
            ],
            "failed_tests": [
                "assert is_equal_to_sum_even(102) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(1) == 1",
                "assert special_factorial(3) == 12",
                "assert special_factorial(5) == 34560",
                "assert special_factorial(6) == 24883200"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"NoSpacesHere\") == \"NoSpacesHere\"",
                "assert fix_spaces(\"Example\") == \"Example\"",
                "assert fix_spaces(\" Example 2\") == \"_Example_2\""
            ],
            "failed_tests": [
                "assert fix_spaces(\"  Leading and trailing  \") == \"_Leading_and_trailing_\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"Afile.txt\") == 'Yes'",
                "assert file_name_check(\"file.tx\") == 'No'",
                "assert file_name_check(\"2file.txt\") == 'No'",
                "assert file_name_check(\"123file.txt\") == 'No'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([-1, -5, 2, -1, -5]) == -126"
            ],
            "failed_tests": [
                "assert sum_squares([-3, -3, -3, -3, -3, -3, -3, -3, -3]) == -657 (AssertionError: )",
                "assert sum_squares([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 3 (AssertionError: )",
                "assert sum_squares([0, 1, 2, 3, 4, 5, 6]) == 91 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"a\") == \"\"",
                "assert words_in_sentence(\"This is a test\") == \"is\""
            ],
            "failed_tests": [
                "assert words_in_sentence(\"p r i m e s\") == \"p r i e s\" (AssertionError: )",
                "assert words_in_sentence(\"one two three four five six seven\") == \"two three five seven\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"5/2\", \"2/5\") == True",
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"10/1\", \"1/10\") == True",
                "assert simplify(\"100/200\", \"200/100\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]",
                "assert order_by_points([]) == []"
            ],
            "failed_tests": [
                "assert order_by_points([-56, -65, -654, -456]) == [-56, -65, -456, -654] (AssertionError: )",
                "assert order_by_points([-12, 12, 21, -21]) == [-12, 12, 21, -21] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([10, 20, 30, 40, 50]) == 0",
                "assert specialFilter([]) == 0",
                "assert specialFilter([11, 13, 15, 17, 19]) == 5",
                "assert specialFilter([-11, -13, -15, -17, -19]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(1) == 0",
                "assert get_max_triples(5) == 1"
            ],
            "failed_tests": [
                "assert get_max_triples(10) == 19 (AssertionError: )",
                "assert get_max_triples(4) == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Mercury\", \"Neptune\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")",
                "assert bf(\"Earth\", \"Pluto\") == ()",
                "assert bf(\"Venus\", \"Venus\") == ()",
                "assert bf(\"Earth\", \"Mercury\") == (\"Venus\",)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert sorted_list_sum([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == [\"is\"] (AssertionError: )",
                "assert sorted_list_sum([\"even\", \"words\", \"only\"]) == [\"even\", \"words\"] (AssertionError: )",
                "assert sorted_list_sum([\"odd\", \"even\", \"one\", \"two\", \"three\"]) == [\"one\", \"two\"] (AssertionError: )",
                "assert sorted_list_sum([\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\", \"uvwx\", \"yz\"]) == [\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\", \"uvwx\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(15, 8, 5) == 5",
                "assert x_or_y(1, 3, 4) == 4",
                "assert x_or_y(2, 10, 20) == 10",
                "assert x_or_y(9, 7, 8) == 8"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([0]) == 0",
                "assert double_the_difference([2, 4, 6, 8]) == 0",
                "assert double_the_difference([1.5, 2.5, 3.5]) == 0"
            ],
            "failed_tests": [
                "assert double_the_difference([11, 22, 33, 44, 55]) == 121 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1, 2, 3], [3, 2, 1]) == [2, 0, 2]",
                "assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) == [4, 4, 1, 0, 0, 6]",
                "assert compare([], []) == []",
                "assert compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
                "assert Strongest_Extension('Vehicle', ['Car', 'Bike', 'Truck', 'AIRPLANE']) == 'Vehicle.AIRPLANE'",
                "assert Strongest_Extension('Numbers', ['One', 'Two', 'Three', 'Four', 'FIVE']) == 'Numbers.FIVE'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('Empty', []) == 'Empty.' (IndexError: list index out of range)"
            ]
        }
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"hello\", \"ell\") == True",
                "assert cycpattern_check(\"whassup\", \"psus\") == False"
            ],
            "failed_tests": [
                "assert cycpattern_check(\"abcdefg\", \"efgab\") == True (AssertionError: )",
                "assert cycpattern_check(\"nopattern\", \"patternno\") == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(0) == (1, 0)",
                "assert even_odd_count(13579) == (0, 5)",
                "assert even_odd_count(-1) == (0, 1)",
                "assert even_odd_count(-987654) == (3, 3)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(3) == 'iii'",
                "assert int_to_mini_roman(58) == 'lviii'",
                "assert int_to_mini_roman(575) == 'dlxxv'",
                "assert int_to_mini_roman(402) == 'cdii'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(6, 8, 10) == True",
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(5, 12, 13) == True"
            ],
            "failed_tests": [
                "assert right_angle_triangle(0, 0, 0) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"hello\", \"world\", \"python\", \"code\"]) == \"python\"",
                "assert find_max([\"zzzzz\", \"zzzzzz\", \"zzzzzzz\"]) == \"zzzzz\"",
                "assert find_max([\"apple\", \"pear\", \"orange\", \"banana\"]) == \"orange\"",
                "assert find_max([\"a\", \"b\", \"c\", \"d\"]) == \"a\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert eat(10, 5, 0) == [10, 0]",
                "assert eat(500, 0, 0) == [500, 0]"
            ],
            "failed_tests": [
                "assert eat(100, 200, 150) == [250, 50] (AssertionError: )",
                "assert eat(250, 250, 500) == [500, 0] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert do_algebra(['//', '**', '+'], [8, 2, 3, 1]) == 33 (AssertionError: )",
                "assert do_algebra(['**', '//', '*'], [2, 3, 2, 2]) == 32 (AssertionError: )",
                "assert do_algebra(['-', '*', '+', '//', '**'], [1, 2, 3, 4, 5, 2]) == 2 (AssertionError: )",
                "assert do_algebra(['+', '-', '*', '//'], [10, 2, 3, 4, 2]) == 23 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"xyz\") == \"XYZ\"",
                "assert solve(\"12345!@\") == \"@!54321\"",
                "assert solve(\"HelloWorld\") == \"hELLOwORLD\"",
                "assert solve(\"\") == \"\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('') is None",
                "assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'"
            ],
            "failed_tests": [
                "assert string_to_md5('Python3.8') == 'a5b5bd1fbbc11f019f0d5f1a0b8b52e3' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(1, 5) == [2, 4]",
                "assert generate_integers(2, 8) == [2, 4, 6, 8]"
            ],
            "failed_tests": [
                "assert generate_integers(9, 12) == [10, 12] (AssertionError: )",
                "assert generate_integers(0, 4) == [0, 2, 4] (AssertionError: )"
            ]
        }
    }
]