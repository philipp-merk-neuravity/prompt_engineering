[
    {
        "task_id": "HumanEval/0",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([10.0, 20.0, 30.0], 10.1) == True",
                "assert has_close_elements([], 1.0) == False",
                "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True"
            ],
            "failed_tests": [
                "assert has_close_elements([1.5, 2.5, 3.5], 1.0) == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('') == []",
                "assert separate_paren_groups('((((()))))') == ['((((()))))']",
                "assert separate_paren_groups('()((()))()') == ['()', '((()))', '()']",
                "assert separate_paren_groups('(())()') == ['(())', '()']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(0.01) == 0.01",
                "assert truncate_number(3.5) == 0.5"
            ],
            "failed_tests": [
                "assert truncate_number(10.99) == 0.99 (AssertionError: )",
                "assert truncate_number(1.1) == 0.1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([-1, -2, -3]) == True",
                "assert below_zero([1, 2, -4, 5]) == True",
                "assert below_zero([1, 2, 3]) == False",
                "assert below_zero([1, -2, 1, -2, 1, -2, 1, -2]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1.0, 1.0, 1.0, 1.0]) == 0.0",
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
                "assert mean_absolute_deviation([-2.0, -2.0, 2.0, 2.0]) == 2.0"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([10.0, 12.0, 23.0, 23.0, 16.0]) == 5.36 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([5, 5, 5, 5], 5) == [5, 5, 5, 5, 5, 5, 5]",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
                "assert intersperse([1, 2], -1) == [1, -1, 2]",
                "assert intersperse([], 4) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('() () ()') == [1, 1, 1]",
                "assert parse_nested_parens('(()) (())') == [2, 2]",
                "assert parse_nested_parens('((((()))))') == [5]",
                "assert parse_nested_parens('') == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring(['123', '456', '789'], '1') == ['123']",
                "assert filter_by_substring(['aaa', 'aba', 'aca'], 'a') == ['aaa', 'aba', 'aca']",
                "assert filter_by_substring(['python', 'java', 'c++', 'javascript'], 'java') == ['java', 'javascript']",
                "assert filter_by_substring([], 'a') == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([1, -1, 1, -1]) == (0, 1)",
                "assert sum_product([0, 2, 3, 4]) == (9, 0)",
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([1, 2, 3, 4]) == (10, 24)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([5, 3, 1, 2, 4]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([10, 5, 20, 5, 30, 5]) == [10, 10, 20, 20, 30, 30]",
                "assert rolling_max([1]) == [1]",
                "assert rolling_max([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_palindrome(\"\") == \"\"",
                "assert is_palindrome(\"level\") == True",
                "assert make_palindrome(\"cat\") == \"catac\"",
                "assert is_palindrome(\"a\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('1', '1') == '0'",
                "assert string_xor('00110011', '11001100') == '11111111'",
                "assert string_xor('010', '110') == '100'",
                "assert string_xor('111', '000') == '111'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest(['one', 'two', 'three', 'four', 'five']) == 'three'",
                "assert longest(['a', 'bb', 'ccc']) == 'ccc'",
                "assert longest(['a', 'b', 'c']) == 'a'",
                "assert longest(['short', 'longer', 'longest', 'longer']) == 'longest'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(17, 17) == 17",
                "assert greatest_common_divisor(0, 5) == 5"
            ],
            "failed_tests": [
                "assert greatest_common_divisor(-25, -15) == 5 (AssertionError: )",
                "assert greatest_common_divisor(25, -15) == 5 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
                "assert all_prefixes('ab') == ['a', 'ab']",
                "assert all_prefixes('') == []",
                "assert all_prefixes('xyz') == ['x', 'xy', 'xyz']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(5) == '0 1 2 3 4 5'",
                "assert string_sequence(-1) == ''",
                "assert string_sequence(2) == '0 1 2'",
                "assert string_sequence(0) == '0'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('AbCdeFg') == 7",
                "assert count_distinct_characters('xyzXYZ') == 3",
                "assert count_distinct_characters('1234567890') == 10"
            ],
            "failed_tests": [
                "assert count_distinct_characters('Spaces are characters too!') == 18 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o|') == [2]",
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
                "assert parse_music('o .| o|') == [4, 1, 2]",
                "assert parse_music('.| .| .| .|') == [1, 1, 1, 1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('aaaaa', 'aa') == 4",
                "assert how_many_times('hello world', 'o') == 2",
                "assert how_many_times('aaa', 'a') == 3"
            ],
            "failed_tests": [
                "assert how_many_times('ababababa', 'aba') == 3 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('one one two two three three') == 'one one two two three three'",
                "assert sort_numbers('nine eight seven six') == 'six seven eight nine'",
                "assert sort_numbers('') == ''",
                "assert sort_numbers('three one five') == 'one three five'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.25]) == (0.2, 0.25)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
                "assert find_closest_elements([100.0, 101.0, 102.0, 100.1]) == (100.0, 100.1)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([10.0, 15.0, 20.0]) == [0.0, 0.5, 1.0]",
                "assert rescale_to_unit([100.0, 200.0, 300.0, 400.0]) == [0.0, 0.3333333333333333, 0.6666666666666666, 1.0]",
                "assert rescale_to_unit([-5.0, 0.0, 5.0]) == [0.0, 0.5, 1.0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_integers(['string', {}, [], (), None]) == []",
                "assert filter_integers([0, 1.1, 2.2, 3]) == [0, 3]",
                "assert filter_integers([-1, -2, -3]) == [-1, -2, -3]"
            ],
            "failed_tests": [
                "assert filter_integers([True, False, 'True', 'False']) == [] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('hello world') == 11",
                "assert strlen('1234567890') == 10",
                "assert strlen(' ') == 1",
                "assert strlen('abc') == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(50) == 25",
                "assert largest_divisor(100) == 50",
                "assert largest_divisor(37) == 1",
                "assert largest_divisor(15) == 5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(999) == [3, 3, 3, 37]",
                "assert factorize(8) == [2, 2, 2]",
                "assert factorize(49) == [7, 7]",
                "assert factorize(3) == [3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([]) == []",
                "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 8]) == [1, 3, 5, 6, 8]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('12345') == '12345'",
                "assert flip_case('Hello') == 'hELLO'",
                "assert flip_case('hELLO') == 'Hello'",
                "assert flip_case('123abcABC') == '123ABCabc'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate(['a', 'b', 'c', 'd', 'e']) == 'abcde'",
                "assert concatenate(['', '']) == ''",
                "assert concatenate([]) == ''",
                "assert concatenate(['123', '456', '789']) == '123456789'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']",
                "assert filter_by_prefix(['123', '234', '345'], '1') == ['123']",
                "assert filter_by_prefix(['hello', 'world', 'python', 'programming'], 'p') == ['python', 'programming']",
                "assert filter_by_prefix([], 'a') == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-10, -20, -30, -40]) == []",
                "assert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert get_positive([-1, 0, 1]) == [1]",
                "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(-7) == False",
                "assert is_prime(0) == False",
                "assert is_prime(101) == True",
                "assert is_prime(97) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert round(poly([-6, 11, -6, 1], 3.0), 2) == 0",
                "assert round(poly([1, 2], -0.5), 2) == 0",
                "assert round(poly([2, -3, 1], -2.0), 2) != 0",
                "assert round(poly([-6, 11, -6, 1], 2.0), 2) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_third([3, 2, 1]) == [3, 2, 1]",
                "assert sort_third([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [3, 8, 7, 6, 5, 4, 9, 2, 1]",
                "assert sort_third([]) == []",
                "assert sort_third([4, 5, 6, 1, 2, 3]) == [1, 5, 6, 4, 2, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([]) == []",
                "assert unique([-3, -2, -1, 0, 1, 2, 3]) == [-3, -2, -1, 0, 1, 2, 3]",
                "assert unique([1]) == [1]",
                "assert unique([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123",
                "assert max_element([-1, -2, -3]) == -1",
                "assert max_element([0, 0, 0, 0]) == 0",
                "assert max_element([1, 2, 3]) == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(13) == 0",
                "assert fizz_buzz(50) == 0"
            ],
            "failed_tests": [
                "assert fizz_buzz(200) == 9 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_even([4, 1, 2, 3, 6, 5]) == [2, 1, 4, 3, 6, 5]",
                "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]",
                "assert sort_even([]) == []",
                "assert sort_even([1]) == [1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode_cyclic(\"abcde\") == \"bcade\"",
                "assert encode_cyclic(\"\") == \"\""
            ],
            "failed_tests": [
                "assert encode_cyclic(\"abcdef\") == \"bcadef\" (AssertionError: )",
                "assert encode_cyclic(\"abcdefg\") == \"bcadefg\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(1) == 2",
                "assert prime_fib(3) == 5",
                "assert prime_fib(6) == 233",
                "assert prime_fib(4) == 13"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
                "assert triples_sum_to_zero([0, 0, 0]) == True",
                "assert triples_sum_to_zero([-1, 1, 0]) == True",
                "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(0) == 0",
                "assert car_race_collision(10) == 100",
                "assert car_race_collision(2) == 4",
                "assert car_race_collision(3) == 9"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([0, 0, 0]) == [1, 1, 1]",
                "assert incr_list([]) == []",
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([-1, -2, -3]) == [0, -1, -2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([-1, -2, -3, 3]) == True",
                "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
                "assert pairs_sum_to_zero([-4, 4]) == True",
                "assert pairs_sum_to_zero([-1, 1, 2, 3]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert change_base(7, 2) == '111'",
                "assert change_base(8, 3) == '22'"
            ],
            "failed_tests": [
                "assert change_base(0, 2) == '0' (AssertionError: )",
                "assert change_base(255, 16) == 'ff' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(3, 6) == 9.0",
                "assert triangle_area(4.5, 2.2) == 4.95",
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(10, 2) == 10.0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib4(2) == 2",
                "assert fib4(4) == 2",
                "assert fib4(6) == 8"
            ],
            "failed_tests": [
                "assert fib4(9) == 48 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([0, 0, 0, 0]) == 0",
                "assert median([-1, 0, 1]) == 0",
                "assert median([1, 2, 3, 4, 5, 6]) == 3.5"
            ],
            "failed_tests": [
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('racecar') == True",
                "assert is_palindrome('') == True",
                "assert is_palindrome('123456') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(0, 101) == 1",
                "assert modp(1, 1) == 0",
                "assert modp(3, 5) == 3",
                "assert modp(3, 11) == 8"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decode_shift(\"fghcde\") == \"abcxyz\"",
                "assert encode_shift(\"xyz\") == \"cde\"",
                "assert encode_shift(\"\") == \"\"",
                "assert decode_shift(\"mjqqt\") == \"hello\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('zbcd') == 'zbcd'",
                "assert remove_vowels('aaaaa') == ''",
                "assert remove_vowels('abcdef') == 'bcdf'",
                "assert remove_vowels('12345') == '12345'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 3], 4) == True",
                "assert below_threshold([-1, -2, -3], 0) == True",
                "assert below_threshold([10, 20, 30], 10) == False",
                "assert below_threshold([], 5) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(100, 200) == 300",
                "assert add(-1, -1) == -2",
                "assert add(-1, 1) == 0",
                "assert add(0, 0) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert same_chars('abc', 'cba') == True",
                "assert same_chars('abc', 'abcd') == False",
                "assert same_chars('eabcd', 'dddddddabc') == False"
            ],
            "failed_tests": [
                "assert same_chars('abc', 'abcc') == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(2) == 1",
                "assert fib(8) == 21",
                "assert fib(10) == 55",
                "assert fib(5) == 5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"<<<>>>\") == True",
                "assert correct_bracketing(\"><<>\") == False",
                "assert correct_bracketing(\">>\") == False",
                "assert correct_bracketing(\"><><\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 2, 2, 3]) == True",
                "assert monotonic([1]) == True",
                "assert monotonic([1, 20, 4, 10]) == False",
                "assert monotonic([10, 10, 10, 10]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]",
                "assert common([], [1, 2, 3]) == []",
                "assert common(['a', 'b', 'c'], ['a', 'c', 'd']) == ['a', 'c']",
                "assert common([1, 2, 3], [4, 5, 6]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(2048) == 2",
                "assert largest_prime_factor(49) == 7",
                "assert largest_prime_factor(100) == 5"
            ],
            "failed_tests": [
                "assert largest_prime_factor(600851475143) == 6857 (TimeoutError: Test case execution exceeded 10 seconds)"
            ]
        }
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(30) == 465",
                "assert sum_to_n(10) == 55",
                "assert sum_to_n(-5) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"()\") == True",
                "assert correct_bracketing(\"()()()\") == True",
                "assert correct_bracketing(\"(()())\") == True",
                "assert correct_bracketing(\")(()\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([5, 4]) == [4]",
                "assert derivative([-1, -2, -3, -4]) == [-2, -6, -12]",
                "assert derivative([0, 0, 0, 0]) == [0, 0, 0]",
                "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(0) == 0",
                "assert fibfib(6) == 7",
                "assert fibfib(8) == 24",
                "assert fibfib(9) == 44"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"BCDFG\") == 0",
                "assert vowels_count(\"aeiouy\") == 6",
                "assert vowels_count(\"ACEDY\") == 3"
            ],
            "failed_tests": [
                "assert vowels_count(\"\") == 0 (IndexError: string index out of range)"
            ]
        }
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12345, 6) == \"54321\"",
                "assert circular_shift(0, 5) == \"0\"",
                "assert circular_shift(12345, 1) == \"51234\""
            ],
            "failed_tests": [
                "assert circular_shift(12345, 10) == \"12345\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"1234567890\") == 0",
                "assert digitSum(\"woArBld\") == 131",
                "assert digitSum(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 2015",
                "assert digitSum(\"Z\") == 90"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
                "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
                "assert fruit_distribution(\"0 apples and 0 oranges\", 0) == 0",
                "assert fruit_distribution(\"1 apples and 0 oranges\", 2) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([11, 22, 33, 44, 55, 2]) == [2, 5]",
                "assert pluck([]) == []",
                "assert pluck([1, 3, 5, 7]) == []",
                "assert pluck([1, 3, 5]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert search([1, 1, 1, 1]) == 1",
                "assert search([3, 3, 3, 2, 2, 1]) == 3"
            ],
            "failed_tests": [
                "assert search([1]) == -1 (AssertionError: )",
                "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == -1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([3, 3, 2, 2, 1, 1]) == [1, 3, 1, 3, 2, 2]",
                "assert strange_sort_list([2, 1]) == [1, 2]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(7, 24, 25) == 84.00",
                "assert triangle_area(10, 10, 10) == 43.30",
                "assert triangle_area(8, 15, 17) == 60.00",
                "assert triangle_area(1, 2, 10) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([], 0) == True",
                "assert will_it_fly([3], 5) == True",
                "assert will_it_fly([1, 2, 3, 2, 1], 10) == True",
                "assert will_it_fly([1, 2, 3, 4, 5], 15) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1, 2]) == 1",
                "assert smallest_change([5, 4, 3, 2, 1]) == 2",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([1, 2, 2, 1]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match(['a', 'b', 'c'], ['d', 'e']) == ['d', 'e']",
                "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']",
                "assert total_match(['equal', 'length'], ['equal', 'length']) == ['equal', 'length']",
                "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(1) == False",
                "assert is_multiply_prime(2*3*5*7) == False",
                "assert is_multiply_prime(7) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(1, 4) == True",
                "assert is_simple_power(81, 3) == True",
                "assert is_simple_power(5, 3) == False"
            ],
            "failed_tests": [
                "assert is_simple_power(1, 0) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(0) == True",
                "assert iscube(-125) == True",
                "assert iscube(8) == True",
                "assert iscube(-8) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"D2D2D2\") == 6",
                "assert hex_key(\"AB\") == 1",
                "assert hex_key(\"ABED1A33\") == 4",
                "assert hex_key(\"123456789ABCDEF0\") == 6"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(64) == \"db1000000db\"",
                "assert decimal_to_binary(32) == \"db100000db\"",
                "assert decimal_to_binary(2) == \"db10db\"",
                "assert decimal_to_binary(15) == \"db1111db\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy(\"aabbc\") == False",
                "assert is_happy(\"xyz\") == True",
                "assert is_happy(\"aabb\") == False",
                "assert is_happy(\"aa\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([0.0]) == ['E']",
                "assert numerical_letter_grade([4.0, 4.0, 4.0]) == ['A+', 'A+', 'A+']"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([0.0, 3.9, 2.4, 1.6, 0.9]) == ['E', 'A', 'B-', 'C', 'D'] (AssertionError: )",
                "assert numerical_letter_grade([1.5, 1.2, 1.0, 0.8, 0.5]) == ['C-', 'D+', 'D+', 'D', 'D-'] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('a') == False",
                "assert prime_length('abcdcba') == True",
                "assert prime_length('orange') == False",
                "assert prime_length('kittens') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert starts_one_ends(3) == 180"
            ],
            "failed_tests": [
                "assert starts_one_ends(5) == 16200 (AssertionError: )",
                "assert starts_one_ends(6) == 153090 (AssertionError: )",
                "assert starts_one_ends(2) == 19 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solve(1) == \"1\"",
                "assert solve(147) == \"1100\""
            ],
            "failed_tests": [
                "assert solve(1024) == \"1\" (AssertionError: )",
                "assert solve(2023) == \"11111110000\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([1, 3, 5, 7, 9]) == 0",
                "assert add([10]) == 0",
                "assert add([2, 4, 6, 8, 10]) == 12"
            ],
            "failed_tests": [
                "assert add([0, 2, 4, 6, 8]) == 2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('A B C D E F G') == 'A B C D E F G'",
                "assert anti_shuffle('123 456 789') == '123 456 789'",
                "assert anti_shuffle('Hi') == 'Hi'"
            ],
            "failed_tests": [
                "assert anti_shuffle('The quick brown fox') == 'Teh cikqu bnoor fiox' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([\n  [1,1,1],\n  [2,2,2],\n  [3,3,3]\n], 2) == [(1, 2), (1, 1), (1, 0)]",
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]",
                "assert get_row([\n  [9,8,7],\n  [6,5,4],\n  [3,2,1]\n], 9) == [(0, 0)]",
                "assert get_row([], 1) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
                "assert sort_array([5]) == [5]"
            ],
            "failed_tests": [
                "assert sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9] (AssertionError: )",
                "assert sort_array([1, 0, 1]) == [1, 0, 1] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('hi') == 'lm'",
                "assert encrypt('z') == 'd'",
                "assert encrypt('xyz') == 'bcd'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([-1, -2, -3, -4, -5]) == -4",
                "assert next_smallest([]) == None",
                "assert next_smallest([3, 3, 2, 2]) == 3",
                "assert next_smallest([1, 2, 3, 4, 5]) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"I am feeling bored today. What about you?\") == 1",
                "assert is_bored(\"I wonder what's for dinner. I hope it's pizza!\") == 2",
                "assert is_bored(\"It's raining. I wish it were sunny.\") == 1",
                "assert is_bored(\"Hello world\") == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(10, 5, 3) == False",
                "assert any_int(3, -2, 1) == True",
                "assert any_int(-1, -1, -2) == True",
                "assert any_int(3.6, -2.2, 2) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'"
            ],
            "failed_tests": [
                "assert encode('world') == 'wMrLD' (AssertionError: )",
                "assert encode('HELLO') == 'hJLLM' (AssertionError: )",
                "assert encode('encode') == 'GMCGCG' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([0]) == 0",
                "assert skjkasdkd([97]) == 16",
                "assert skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 11",
                "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"alllower\":\"yes\", \"stilllower\":\"yes\"}) == True",
                "assert check_dict_case({}) == False",
                "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
                "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(0) == []",
                "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(3) == [2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert multiply(999, 1) == 9",
                "assert multiply(14, -15) == 20",
                "assert multiply(123, 456) == 18"
            ],
            "failed_tests": [
                "assert multiply(-123, 456) == 18 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('dBBE') == 0",
                "assert count_upper('aBCdEf') == 1"
            ],
            "failed_tests": [
                "assert count_upper('bCdEfGhI') == 1 (AssertionError: )",
                "assert count_upper('ABECEDARIO') == 2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"99.99\") == 100",
                "assert closest_integer(\"-14.5\") == -15",
                "assert closest_integer(\"10\") == 10"
            ],
            "failed_tests": [
                "assert closest_integer(\"-0.1\") == -1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(5) == [5, 7, 9, 11, 13]",
                "assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]",
                "assert make_a_pile(7) == [7, 9, 11, 13, 15, 17, 19]",
                "assert make_a_pile(3) == [3, 5, 7]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"Spaces and,commas, both\") == [\"Spaces\", \"and\", \"commas\", \"both\"]",
                "assert words_string(\"SingleWord\") == [\"SingleWord\"]",
                "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
                "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(14, 20) == 20",
                "assert choose_num(0, 1) == 0",
                "assert choose_num(12, 15) == 14",
                "assert choose_num(0, 0) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(50, 50) == \"0b110010\"",
                "assert rounded_avg(2, 3) == \"0b10\"",
                "assert rounded_avg(5, 5) == \"0b101\""
            ],
            "failed_tests": [
                "assert rounded_avg(99, 100) == \"0b1100011\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([152, 323, 1422, 10]) == []",
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([2, 4, 6, 8]) == []",
                "assert unique_digits([]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([9]) == [\"Nine\"]",
                "assert by_length([]) == []",
                "assert by_length([10, 11, 12, 0, -2, -3]) == []",
                "assert by_length([1]) == [\"One\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(5) == [1, 2, 6, 24, 15]",
                "assert f(7) == [1, 2, 6, 24, 15, 720, 28]",
                "assert f(3) == [1, 2, 6]",
                "assert f(0) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(12) == (4, 6)",
                "assert even_odd_palindrome(3) == (1, 2)"
            ],
            "failed_tests": [
                "assert even_odd_palindrome(9) == (3, 6) (AssertionError: )",
                "assert even_odd_palindrome(22) == (7, 9) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_nums([1, 1, 2]) == 3",
                "assert count_nums([0, 0, 0, 0]) == 0",
                "assert count_nums([-123, 456, 789]) == 3",
                "assert count_nums([-1, -2, -3, -4, -5]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([1, 3, 5, 2, 4]) == False",
                "assert move_one_ball([5, 1, 2, 3, 4]) == True",
                "assert move_one_ball([3, 5, 4, 1, 2]) == False",
                "assert move_one_ball([1]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1], [2]) == \"YES\"",
                "assert exchange([2], [1]) == \"YES\"",
                "assert exchange([1, 3, 5], [1, 3, 5]) == \"NO\"",
                "assert exchange([1, 3, 5], [2, 4, 6]) == \"YES\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('c c c c c') == {'c': 5}"
            ],
            "failed_tests": [
                "assert histogram('x y z x y z x') == {'x': 3, 'y': 2, 'z': 2} (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)",
                "assert reverse_delete(\"teststring\", \"xyz\") == ('teststring', False)",
                "assert reverse_delete(\"a\", \"a\") == ('', True)",
                "assert reverse_delete(\"\", \"abc\") == ('', True)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['3', '11111111']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
                "assert odd_count(['2468', '13579']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 5n the str5ng 5 of the 5nput.\"]",
                "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]"
            ],
            "failed_tests": [
                "assert odd_count(['', '0024', '567']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([-5]) == -5",
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([-1, 2, -3, 4]) == -3",
                "assert minSubArraySum([-1, -2, -3]) == -6"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,0,0], [0,0,0,0]], 1) == 0",
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
                "assert max_fill([[1]], 1) == 1",
                "assert max_fill([[1,1,1,1], [1,1,1,1], [1,1,1,1]], 4) == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_array([3, 8, 3, 6]) == [8, 3, 3, 6]",
                "assert sort_array([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 4, 8, 3, 5, 6, 9, 10, 7]",
                "assert sort_array([0]) == [0]",
                "assert sort_array([7, 8, 3, 6]) == [8, 3, 6, 7]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"Hello world\", 4) == [\"world\"]",
                "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
                "assert select_words(\"\", 2) == []",
                "assert select_words(\"a e i o u\", 1) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"example\") == \"a\"",
                "assert get_closest_vowel(\"b\") == \"\"",
                "assert get_closest_vowel(\"A\") == \"\""
            ],
            "failed_tests": [
                "assert get_closest_vowel(\"loop\") == \"o\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['', '']) == 'Yes'",
                "assert match_parens([')', ')']) == 'No'",
                "assert match_parens(['())(', '']) == 'No'",
                "assert match_parens(['()(', ')']) == 'Yes'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([0, 0, 0, 0], 4) == [0, 0, 0, 0]",
                "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
                "assert maximum([4, -4, 4], 2) == [4, 4]",
                "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9"
            ],
            "failed_tests": [
                "assert solution([-3, -2, -1, 0, 1, 2, 3]) == -3 (AssertionError: )",
                "assert solution([11, 22, 33, 44, 55]) == 44 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
                "assert add_elements([9, 88, 777, 6666, 55555], 3) == 97",
                "assert add_elements([99, 1, 1001, 22, 33], 5) == 155"
            ],
            "failed_tests": [
                "assert add_elements([5, 15, 25, 35, 45, 55], 6) == 125 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(2) == [1]"
            ],
            "failed_tests": [
                "assert get_odd_collatz(10) == [1, 3, 5, 7, 10] (AssertionError: )",
                "assert get_odd_collatz(13) == [1, 5, 7, 10, 13, 20, 40] (AssertionError: )",
                "assert get_odd_collatz(3) == [1, 3, 5, 7, 10] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('04-0-2040') == False",
                "assert valid_date('15-01-2012') == False",
                "assert valid_date('04-31-2020') == False"
            ],
            "failed_tests": [
                "assert valid_date('02-29-2021') == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]"
            ],
            "failed_tests": [
                "assert split_words(\"a,c,e,g,i,k\") == 6 (AssertionError: )",
                "assert split_words(\" \") == [\"\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([1, 2, 2, 3, 3, 4]) == True",
                "assert is_sorted([1, 3, 2, 4, 5]) == False",
                "assert is_sorted([1, 2, 3, 4, 4, 5, 6, 7]) == True",
                "assert is_sorted([1, 2, 3, 4, 5, 6]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersection((3, 7), (8, 10)) == \"NO\"",
                "assert intersection((0, 0), (0, 0)) == \"NO\"",
                "assert intersection((2, 5), (3, 11)) == \"YES\"",
                "assert intersection((1, 2), (2, 3)) == \"NO\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([]) == None",
                "assert prod_signs([-1, 1, -1, 1, -1]) == -5",
                "assert prod_signs([1, 2, 3, 4, 5]) == 15"
            ],
            "failed_tests": [
                "assert prod_signs([-1, -2, -3]) == 6 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[2, 3], [1, 4]], 4) == [1, 2, 1, 2]",
                "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]"
            ],
            "failed_tests": [
                "assert minPath([[3, 1], [2, 4]], 3) == [1, 2, 1] (AssertionError: )",
                "assert minPath([[1]], 1) == [1] (ValueError: min() arg is an empty sequence)"
            ]
        }
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert tri(0) == [1]",
                "assert tri(4) == [1, 3, 2, 8, 3]"
            ],
            "failed_tests": [
                "assert tri(6) == [1, 3, 2, 8, 3, 14, 5] (AssertionError: )",
                "assert tri(5) == [1, 3, 2, 8, 3, 14] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert digits(111) == 1",
                "assert digits(13579) == 945",
                "assert digits(4) == 0"
            ],
            "failed_tests": [
                "assert digits(567) == 105 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[]]]') == False",
                "assert is_nested('[[]]') == True",
                "assert is_nested('[[[]]]') == True",
                "assert is_nested('[]') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 3, 5, 7]) == 84",
                "assert sum_squares([]) == 0",
                "assert sum_squares([-2.4, 1, 1]) == 6",
                "assert sum_squares([-1.5, -2.5, -3.5]) == 14"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
                "assert check_if_last_char_is_a_letter(\"a\") == True",
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
                "assert check_if_last_char_is_a_letter(\" \") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([100, 200, 300]) == -1",
                "assert can_arrange([1]) == -1",
                "assert can_arrange([1, 2, 3]) == -1",
                "assert can_arrange([1, 3, 5, 7, 6, 8]) == 4"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([-2, -4, -1, -3, -5, -7]) == (-1, None)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([-2, -1, 0, 1, 2]) == (-1, 1)",
                "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(-1, \"-2\") == -1",
                "assert compare_one(\"3,5\", 2) == \"3,5\"",
                "assert compare_one(\"3.5\", \"4,2\") == \"4,2\"",
                "assert compare_one(3.5, 2) == 3.5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(12) == True",
                "assert is_equal_to_sum_even(100) == True",
                "assert is_equal_to_sum_even(32) == True"
            ],
            "failed_tests": [
                "assert is_equal_to_sum_even(102) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(1) == 1",
                "assert special_factorial(3) == 12",
                "assert special_factorial(5) == 34560",
                "assert special_factorial(6) == 24883200"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"Example 1\") == \"Example_1\"",
                "assert fix_spaces(\"   \") == \"-\"",
                "assert fix_spaces(\"Example   3\") == \"Example-3\"",
                "assert fix_spaces(\"Example\") == \"Example\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"file.txt.exe\") == 'No'",
                "assert file_name_check(\"file1234.txt\") == 'No'",
                "assert file_name_check(\"file1234\") == 'No'",
                "assert file_name_check(\"file.dll\") == 'Yes'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([-1, -5, 2, -1, -5]) == -126"
            ],
            "failed_tests": [
                "assert sum_squares([4, 3, 2, 1]) == 17 (AssertionError: )",
                "assert sum_squares([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 14 (AssertionError: )",
                "assert sum_squares([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 10582 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"a\") == \"\"",
                "assert words_in_sentence(\"This is a test\") == \"is\""
            ],
            "failed_tests": [
                "assert words_in_sentence(\"p r i m e s\") == \"p r i e s\" (AssertionError: )",
                "assert words_in_sentence(\"one two three four five six seven\") == \"two three five seven\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"5/2\", \"2/5\") == True",
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"10/1\", \"1/10\") == True",
                "assert simplify(\"100/200\", \"200/100\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]",
                "assert order_by_points([]) == []"
            ],
            "failed_tests": [
                "assert order_by_points([-56, -65, -654, -456]) == [-56, -65, -456, -654] (AssertionError: )",
                "assert order_by_points([-12, 12, 21, -21]) == [-12, 12, 21, -21] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([10, 20, 30, 40, 50]) == 0",
                "assert specialFilter([]) == 0",
                "assert specialFilter([11, 13, 15, 17, 19]) == 5",
                "assert specialFilter([-11, -13, -15, -17, -19]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(1) == 0",
                "assert get_max_triples(5) == 1"
            ],
            "failed_tests": [
                "assert get_max_triples(10) == 19 (AssertionError: )",
                "assert get_max_triples(4) == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Mercury\", \"Neptune\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")",
                "assert bf(\"Earth\", \"Pluto\") == ()",
                "assert bf(\"Venus\", \"Venus\") == ()",
                "assert bf(\"Earth\", \"Mercury\") == (\"Venus\",)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert sorted_list_sum([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == [\"is\"] (AssertionError: )",
                "assert sorted_list_sum([\"even\", \"words\", \"only\"]) == [\"even\", \"words\"] (AssertionError: )",
                "assert sorted_list_sum([\"odd\", \"even\", \"one\", \"two\", \"three\"]) == [\"one\", \"two\"] (AssertionError: )",
                "assert sorted_list_sum([\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\", \"uvwx\", \"yz\"]) == [\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\", \"uvwx\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(11, 0, 1) == 0",
                "assert x_or_y(1, 2, 3) == 3",
                "assert x_or_y(2, 10, 20) == 10",
                "assert x_or_y(4, 5, 15) == 15"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([0]) == 0",
                "assert double_the_difference([1, 3, 2, 0]) == 10",
                "assert double_the_difference([1, 2, 3, 4, 5]) == 35"
            ],
            "failed_tests": [
                "assert double_the_difference([1, 3, 5, 7, 9, 11]) == 385 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([100, 200, 300], [300, 100, 200]) == [200, 100, 100]",
                "assert compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]",
                "assert compare([1, 1, 1, 1], [2, 2, 2, 2]) == [1, 1, 1, 1]",
                "assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) == [4, 4, 1, 0, 0, 6]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
                "assert Strongest_Extension('Vehicle', ['Car', 'Bike', 'Truck', 'AIRPLANE']) == 'Vehicle.AIRPLANE'",
                "assert Strongest_Extension('Numbers', ['One', 'Two', 'Three', 'Four', 'FIVE']) == 'Numbers.FIVE'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('Empty', []) == 'Empty.' (IndexError: list index out of range)"
            ]
        }
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"himenss\", \"simen\") == True",
                "assert cycpattern_check(\"abcd\", \"abd\") == False",
                "assert cycpattern_check(\"abab\", \"baa\") == True"
            ],
            "failed_tests": [
                "assert cycpattern_check(\"nopattern\", \"patternno\") == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(-12345) == (2, 3)",
                "assert even_odd_count(102030) == (4, 2)",
                "assert even_odd_count(111) == (0, 3)",
                "assert even_odd_count(0) == (1, 0)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(83) == 'lxxxiii'",
                "assert int_to_mini_roman(3) == 'iii'",
                "assert int_to_mini_roman(1) == 'i'",
                "assert int_to_mini_roman(999) == 'cmxcix'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(10, 6, 8) == True",
                "assert right_angle_triangle(8, 15, 17) == True",
                "assert right_angle_triangle(12, 5, 13) == True",
                "assert right_angle_triangle(5, 3, 4) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"hello\", \"world\", \"python\", \"code\"]) == \"python\"",
                "assert find_max([\"zzzzz\", \"zzzzzz\", \"zzzzzzz\"]) == \"zzzzz\"",
                "assert find_max([\"apple\", \"pear\", \"orange\", \"banana\"]) == \"orange\"",
                "assert find_max([\"a\", \"b\", \"c\", \"d\"]) == \"a\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(0, 1000, 500) == [500, 0]",
                "assert eat(1, 10, 10) == [11, 0]",
                "assert eat(5, 6, 10) == [11, 4]",
                "assert eat(50, 50, 100) == [100, 50]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert do_algebra(['//', '**', '+'], [8, 2, 3, 1]) == 33 (AssertionError: )",
                "assert do_algebra(['**', '//', '*'], [2, 3, 2, 2]) == 32 (AssertionError: )",
                "assert do_algebra(['-', '*', '+', '//', '**'], [1, 2, 3, 4, 5, 2]) == 2 (AssertionError: )",
                "assert do_algebra(['+', '-', '*', '//'], [10, 2, 3, 4, 2]) == 23 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solve(\"Hello World!\") == \"hELLO wORLD!\"",
                "assert solve(\"aBcDeF\") == \"AbCdEf\"",
                "assert solve(\"12345\") == \"54321\""
            ],
            "failed_tests": [
                "assert solve(\"1234abcd\") == \"1234DCBA\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('password123') == '482c811da5d5b4bc6d497ffa98491e38'",
                "assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'",
                "assert string_to_md5('') is None"
            ],
            "failed_tests": [
                "assert string_to_md5('Python3.8') == 'a3f5b4b9ef19b2e1025f1d8e89a918a5' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(1, 5) == [2, 4]",
                "assert generate_integers(2, 8) == [2, 4, 6, 8]"
            ],
            "failed_tests": [
                "assert generate_integers(9, 12) == [10, 12] (AssertionError: )",
                "assert generate_integers(0, 4) == [0, 2, 4] (AssertionError: )"
            ]
        }
    }
]