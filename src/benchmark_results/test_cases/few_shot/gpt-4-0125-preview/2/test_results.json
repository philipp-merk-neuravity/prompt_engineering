[
    {
        "task_id": "HumanEval/0",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
                "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
                "assert has_close_elements([10.0, 20.0, 30.0], 5) == False",
                "assert has_close_elements([1.5, 2.5, 3.5], 1.1) == True",
                "assert has_close_elements([0.1, 0.2, 0.4], 0.15) == True",
                "assert has_close_elements([-1.0, 1.0], 2.5) == True",
                "assert has_close_elements([], 1.0) == False",
                "assert has_close_elements([1.0], 0.1) == False"
            ],
            "failed_tests": [
                "assert has_close_elements([-1.0, -2.0, -3.0], 0.9) == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('((()))') == ['((()))']",
                "assert separate_paren_groups('()()') == ['()', '()']",
                "assert separate_paren_groups('') == []",
                "assert separate_paren_groups('((())())') == ['((())())']",
                "assert separate_paren_groups('(())(())') == ['(())', '(())']",
                "assert separate_paren_groups('((( ))) ((( )))') == ['((()))', '((()))']",
                "assert separate_paren_groups('()(( ))(())') == ['()', '(())', '(())']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(0.99) == 0.99",
                "assert truncate_number(5.0) == 0.0"
            ],
            "failed_tests": [
                "assert truncate_number(10.01) == 0.01 (AssertionError: )",
                "assert truncate_number(99.999) == 0.999 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([1, 2, 3]) == False",
                "assert below_zero([1, 2, -4, 5]) == True",
                "assert below_zero([-1, -2, -3]) == True",
                "assert below_zero([10, -5, -5]) == False",
                "assert below_zero([10, -15, 5]) == True",
                "assert below_zero([0, 0, 0]) == False",
                "assert below_zero([-1, 1, -1, 1, -1]) == True",
                "assert below_zero([100, -50, -50, -1]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
                "assert mean_absolute_deviation([1.0, 1.0, 1.0, 1.0]) == 0.0",
                "assert mean_absolute_deviation([-1.0, 0.0, 1.0]) == 0.6666666666666666"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([10.0, 12.0, 23.0, 23.0, 16.0]) == 4.8 (AssertionError: )",
                "assert mean_absolute_deviation([5.5, 2.5, 0.0]) == 2.3333333333333335 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([], 4) == []",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
                "assert intersperse([1], 0) == [1]",
                "assert intersperse([1, 2], -1) == [1, -1, 2]",
                "assert intersperse([1, 2, 3, 4], 0) == [1, 0, 2, 0, 3, 0, 4]",
                "assert intersperse([-1, -2, -3], 1) == [-1, 1, -2, 1, -3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('') == []",
                "assert parse_nested_parens('()') == [1]",
                "assert parse_nested_parens('(()) (())') == [2, 2]",
                "assert parse_nested_parens('() () ()') == [1, 1, 1]",
                "assert parse_nested_parens('((())()) (()(()))') == [3, 3]",
                "assert parse_nested_parens('((((()))))') == [5]"
            ],
            "failed_tests": [
                "assert parse_nested_parens('((( )))') == [3] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring([], 'a') == []",
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']",
                "assert filter_by_substring(['123', '456', '789'], '1') == ['123']",
                "assert filter_by_substring(['abc', 'def', 'ghi'], 'xyz') == []",
                "assert filter_by_substring(['AAA', 'BBB', 'CCC'], 'A') == ['AAA']",
                "assert filter_by_substring(['mix', 'max', 'mux'], 'm') == ['mix', 'max', 'mux']"
            ],
            "failed_tests": [
                "assert filter_by_substring(['hello', 'world', 'python', 'code'], 'o') == ['hello', 'world', 'code'] (AssertionError: )",
                "assert filter_by_substring(['abc', 'ABC', 'aBc'], 'A') == ['ABC', 'aBc'] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([1, 2, 3, 4]) == (10, 24)",
                "assert sum_product([1, -1, 1, -1]) == (0, 1)",
                "assert sum_product([-1, -2, -3, -4]) == (-10, 24)",
                "assert sum_product([0, 0, 0, 0]) == (0, 0)",
                "assert sum_product([10]) == (10, 10)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
                "assert rolling_max([5, 3, 1, 2, 4]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([-1, -2, -3, -2, -1]) == [-1, -1, -1, -1, -1]",
                "assert rolling_max([1]) == [1]",
                "assert rolling_max([]) == []",
                "assert rolling_max([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome(\"racecar\") == True",
                "assert is_palindrome(\"palindrome\") == False",
                "assert is_palindrome(\"\") == True",
                "assert is_palindrome(\"12321\") == True",
                "assert is_palindrome(\"123456\") == False",
                "assert make_palindrome(\"\") == \"\"",
                "assert make_palindrome(\"cat\") == \"catac\"",
                "assert make_palindrome(\"cata\") == \"catac\"",
                "assert make_palindrome(\"race\") == \"racecar\"",
                "assert make_palindrome(\"a\") == \"a\"",
                "assert make_palindrome(\"aa\") == \"aa\""
            ],
            "failed_tests": [
                "assert is_palindrome(\"A man a plan a canal Panama\").replace(\" \", \"\").lower() == True (AttributeError: 'bool' object has no attribute 'replace')"
            ]
        }
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('010', '110') == '100'",
                "assert string_xor('1', '1') == '0'",
                "assert string_xor('111', '000') == '111'",
                "assert string_xor('101010', '010101') == '111111'",
                "assert string_xor('000', '000') == '000'",
                "assert string_xor('1111', '1111') == '0000'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest([]) is None",
                "assert longest(['a', 'b', 'c']) == 'a'",
                "assert longest(['a', 'bb', 'ccc']) == 'ccc'",
                "assert longest(['hello', 'world', 'python', 'code']) == 'python'",
                "assert longest(['short', 'longer', 'longest', 'longer']) == 'longest'",
                "assert longest(['one', 'two', 'three', 'four', 'five']) == 'three'",
                "assert longest(['abc']) == 'abc'",
                "assert longest(['abc', 'defg', 'hijkl', 'mnopqr', 'st']) == 'mnopqr'",
                "assert longest(['12345', '1234', '123', '12']) == '12345'",
                "assert longest(['', '', '']) == ''"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(3, 5) == 1",
                "assert greatest_common_divisor(25, 15) == 5",
                "assert greatest_common_divisor(100, 10) == 10",
                "assert greatest_common_divisor(17, 17) == 17",
                "assert greatest_common_divisor(0, 5) == 5",
                "assert greatest_common_divisor(5, 0) == 5",
                "assert greatest_common_divisor(-25, 15) == 5"
            ],
            "failed_tests": [
                "assert greatest_common_divisor(25, -15) == 5 (AssertionError: )",
                "assert greatest_common_divisor(-25, -15) == 5 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
                "assert all_prefixes('') == []",
                "assert all_prefixes('a') == ['a']",
                "assert all_prefixes('ab') == ['a', 'ab']",
                "assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(0) == '0'",
                "assert string_sequence(5) == '0 1 2 3 4 5'",
                "assert string_sequence(2) == '0 1 2'",
                "assert string_sequence(1) == '0 1'",
                "assert string_sequence(3) == '0 1 2 3'",
                "assert string_sequence(-1) == ''"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('xyzXYZ') == 3",
                "assert count_distinct_characters('Jerry') == 4",
                "assert count_distinct_characters('') == 0",
                "assert count_distinct_characters('aaaaa') == 1",
                "assert count_distinct_characters('AbCdEfG') == 7",
                "assert count_distinct_characters('1234567890') == 10",
                "assert count_distinct_characters('!@#$%^&*()') == 10",
                "assert count_distinct_characters('AaBbCcDdEeFf') == 6"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
                "assert parse_music('o') == [4]",
                "assert parse_music('o|') == [2]",
                "assert parse_music('.|') == [1]",
                "assert parse_music('o o o') == [4, 4, 4]",
                "assert parse_music('.| .| .| .|') == [1, 1, 1, 1]",
                "assert parse_music('') == []",
                "assert parse_music('o| o| o| o|') == [2, 2, 2, 2]",
                "assert parse_music('o .| o| o') == [4, 1, 2, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('', 'a') == 0",
                "assert how_many_times('aaa', 'a') == 3",
                "assert how_many_times('aaaa', 'aa') == 3",
                "assert how_many_times('abcabcabc', 'abc') == 3",
                "assert how_many_times('abcabcabc', 'a') == 3",
                "assert how_many_times('abcabcabc', 'd') == 0",
                "assert how_many_times('abababab', 'abab') == 3",
                "assert how_many_times('aaa', 'aaaa') == 0",
                "assert how_many_times('aaabaaa', 'aa') == 4"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('three one five') == 'one three five'",
                "assert sort_numbers('nine eight seven six') == 'six seven eight nine'",
                "assert sort_numbers('zero two four six eight') == 'zero two four six eight'",
                "assert sort_numbers('') == ''",
                "assert sort_numbers('four four four') == 'four four four'",
                "assert sort_numbers('nine zero one two three') == 'zero one two three nine'",
                "assert sort_numbers('one one one two two two') == 'one one one two two two'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([-1.0, -2.0, -3.0, -2.5]) == (-2.5, -2.0)",
                "assert find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.55]) == (0.5, 0.55)",
                "assert find_closest_elements([100.0, 200.0, 300.0, 400.0, 150.0]) == (100.0, 150.0)"
            ],
            "failed_tests": [
                "assert find_closest_elements([10.5, 10.1, 10.4, 10.2]) == (10.1, 10.2) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([10.0, 20.0]) == [0.0, 1.0]",
                "assert rescale_to_unit([-2.0, 0.0, 2.0]) == [0.0, 0.5, 1.0]",
                "assert rescale_to_unit([-1.0, 1.0, 0.0]) == [0.0, 1.0, 0.5]"
            ],
            "failed_tests": [
                "assert rescale_to_unit([5.5, 5.5, 5.5, 5.5]) == [0.0, 0.0, 0.0, 0.0] (ZeroDivisionError: float division by zero)"
            ]
        }
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_integers(['a', 3.14, 5]) == [5]",
                "assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]",
                "assert filter_integers([0, 1.1, 2.2, 3]) == [0, 3]",
                "assert filter_integers([-1, 'string', {}, [], 100]) == [-1, 100]",
                "assert filter_integers([]) == []"
            ],
            "failed_tests": [
                "assert filter_integers([True, False, 'True', 'False']) == [] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('') == 0",
                "assert strlen('abc') == 3",
                "assert strlen('hello world') == 11",
                "assert strlen('1234567890') == 10",
                "assert strlen(' ') == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(15) == 5",
                "assert largest_divisor(17) == 1",
                "assert largest_divisor(100) == 50",
                "assert largest_divisor(37) == 1",
                "assert largest_divisor(60) == 30",
                "assert largest_divisor(2) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(8) == [2, 2, 2]",
                "assert factorize(25) == [5, 5]",
                "assert factorize(70) == [2, 5, 7]",
                "assert factorize(1) == []",
                "assert factorize(2) == [2]",
                "assert factorize(100) == [2, 2, 5, 5]",
                "assert factorize(3) == [3]",
                "assert factorize(49) == [7, 7]",
                "assert factorize(360) == [2, 2, 2, 3, 3, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([1, 1, 1, 1, 1]) == []",
                "assert remove_duplicates([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]",
                "assert remove_duplicates([]) == []",
                "assert remove_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('Hello') == 'hELLO'",
                "assert flip_case('hELLO') == 'Hello'",
                "assert flip_case('123') == '123'",
                "assert flip_case('') == ''",
                "assert flip_case('ABCdef') == 'abcDEF'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate(['a', 'b', 'c']) == 'abc'",
                "assert concatenate(['hello', ' ', 'world']) == 'hello world'",
                "assert concatenate([]) == ''",
                "assert concatenate(['single']) == 'single'",
                "assert concatenate(['123', '456', '789']) == '123456789'",
                "assert concatenate(['', ' ']) == ' '"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']",
                "assert filter_by_prefix(['hello', 'world', 'python', 'programming'], 'p') == ['python', 'programming']",
                "assert filter_by_prefix(['test', 'testing', 'tested', 'tester'], 'test') == ['test', 'testing', 'tested', 'tester']",
                "assert filter_by_prefix(['123', '456', '789'], '1') == ['123']",
                "assert filter_by_prefix(['apple', 'banana', 'cherry'], 'z') == []",
                "assert filter_by_prefix(['mix', 'max', 'mux', 'mex'], 'm') == ['mix', 'max', 'mux', 'mex']",
                "assert filter_by_prefix(['', ' ', '  ', '   '], '') == ['', ' ', '  ', '   ']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
                "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]",
                "assert get_positive([-1, -2, -3, -4]) == []",
                "assert get_positive([1, 2, 3, 4]) == [1, 2, 3, 4]",
                "assert get_positive([0, -1, -2, -3]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(0) == False",
                "assert is_prime(1) == False",
                "assert is_prime(13) == True",
                "assert is_prime(101) == True",
                "assert is_prime(25) == False",
                "assert is_prime(3) == True",
                "assert is_prime(13441) == True",
                "assert is_prime(11) == True",
                "assert is_prime(2) == True",
                "assert is_prime(6) == False",
                "assert is_prime(4) == False",
                "assert is_prime(61) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert round(poly([1, 2], -0.5), 2) == 0",
                "assert round(poly([-6, 11, -6, 1], 1.0), 2) == 0"
            ],
            "failed_tests": [
                "assert round(poly([2, 0, -1], 2), 2) == 0  # f(x) = 2 - x^2 (AssertionError: )",
                "assert round(poly([3, -2, 0, 1], -1), 2) == 0  # f(x) = 3 - 2x + x^3 (AssertionError: )",
                "assert round(poly([-2, 1], 2), 2) != 0  # f(x) = -2 + x, not zero at x=2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_third([1, 2, 3]) == [1, 2, 3]",
                "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]",
                "assert sort_third([3, 2, 1]) == [3, 2, 1]",
                "assert sort_third([10, 20, 30, 40, 50, 60]) == [10, 20, 30, 40, 50, 60]",
                "assert sort_third([]) == []",
                "assert sort_third([1]) == [1]"
            ],
            "failed_tests": [
                "assert sort_third([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 8, 7, 6, 5, 4, 3, 2, 9] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
                "assert unique([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert unique([]) == []",
                "assert unique([1, 1, 1, 1]) == [1]",
                "assert unique([-3, -2, -1, 0, 1, 2, 3]) == [-3, -2, -1, 0, 1, 2, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([1, 2, 3]) == 3",
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123",
                "assert max_element([-5, -3, -2, -1]) == -1",
                "assert max_element([0, 0, 0, 0]) == 0",
                "assert max_element([100]) == 100"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(50) == 0",
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(79) == 3",
                "assert fizz_buzz(100) == 3",
                "assert fizz_buzz(200) == 6",
                "assert fizz_buzz(1) == 0"
            ],
            "failed_tests": [
                "assert fizz_buzz(143) == 9  # 143 itself is divisible by 11 and contains a 7 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_even([1, 2, 3]) == [1, 2, 3]",
                "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]",
                "assert sort_even([4, 1, 2, 3, 6]) == [2, 1, 4, 3, 6]",
                "assert sort_even([10, 15, 20, 25, 30, 35, 40]) == [10, 15, 20, 25, 30, 35, 40]",
                "assert sort_even([8, 11, 6, 9, 5]) == [5, 11, 6, 9, 8]",
                "assert sort_even([]) == []",
                "assert sort_even([1]) == [1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert decode_cyclic(encode_cyclic(\"ab\")) == \"ab\"",
                "assert decode_cyclic(encode_cyclic(\"abcdefg\")) == \"abcdefg\"",
                "assert encode_cyclic(\"ab\") == \"ab\"",
                "assert decode_cyclic(encode_cyclic(\"abcdef\")) == \"abcdef\"",
                "assert decode_cyclic(encode_cyclic(\"a\")) == \"a\"",
                "assert decode_cyclic(encode_cyclic(\"\")) == \"\"",
                "assert encode_cyclic(\"abc\") == \"bca\"",
                "assert encode_cyclic(\"a\") == \"a\"",
                "assert encode_cyclic(\"\") == \"\""
            ],
            "failed_tests": [
                "assert encode_cyclic(\"abcdefgh\") == \"bcadefgh\" (AssertionError: )",
                "assert encode_cyclic(\"abcdef\") == \"bcadef\" (AssertionError: )",
                "assert encode_cyclic(\"abcdefg\") == \"bcadefg\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(1) == 2",
                "assert prime_fib(2) == 3",
                "assert prime_fib(3) == 5",
                "assert prime_fib(4) == 13",
                "assert prime_fib(5) == 89",
                "assert prime_fib(6) == 233",
                "assert prime_fib(7) == 1597",
                "assert prime_fib(8) == 28657",
                "assert prime_fib(9) == 514229"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
                "assert triples_sum_to_zero([1, 3, -2, 1]) == True",
                "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
                "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True",
                "assert triples_sum_to_zero([1]) == False",
                "assert triples_sum_to_zero([-1, 1, 0]) == True",
                "assert triples_sum_to_zero([-5, -1, 6, 0]) == True",
                "assert triples_sum_to_zero([0, 0, 0]) == True"
            ],
            "failed_tests": [
                "assert triples_sum_to_zero([-1, -2, -3, 6]) == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(0) == 0",
                "assert car_race_collision(1) == 1",
                "assert car_race_collision(2) == 4",
                "assert car_race_collision(3) == 9",
                "assert car_race_collision(10) == 100",
                "assert car_race_collision(50) == 2500"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([0, 0, 0]) == [1, 1, 1]",
                "assert incr_list([-1, -2, -3]) == [0, -1, -2]",
                "assert incr_list([100, 200, 300]) == [101, 201, 301]",
                "assert incr_list([]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
                "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
                "assert pairs_sum_to_zero([1, 2, 3, 7]) == False",
                "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True",
                "assert pairs_sum_to_zero([1]) == False",
                "assert pairs_sum_to_zero([-1, 1, 3, 5]) == True",
                "assert pairs_sum_to_zero([0, 0]) == True",
                "assert pairs_sum_to_zero([-5, 5, 10]) == True",
                "assert pairs_sum_to_zero([]) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert change_base(8, 3) == '22'",
                "assert change_base(8, 2) == '1000'",
                "assert change_base(7, 2) == '111'",
                "assert change_base(9, 8) == '11'",
                "assert change_base(15, 2) == '1111'",
                "assert change_base(10, 10) == '10'"
            ],
            "failed_tests": [
                "assert change_base(0, 5) == '0' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(10, 2) == 10.0",
                "assert triangle_area(0, 5) == 0.0",
                "assert triangle_area(3, 6) == 9.0",
                "assert triangle_area(4.5, 2.2) == 4.95",
                "assert triangle_area(1, 1) == 0.5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib4(0) == 0",
                "assert fib4(1) == 0",
                "assert fib4(2) == 2",
                "assert fib4(3) == 0",
                "assert fib4(5) == 4",
                "assert fib4(6) == 8",
                "assert fib4(7) == 14"
            ],
            "failed_tests": [
                "assert fib4(4) == 4 (AssertionError: )",
                "assert fib4(8) == 26 (AssertionError: )",
                "assert fib4(9) == 48 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([3, 1, 2, 4, 5]) == 3",
                "assert median([1, 2, 3, 4, 5, 6]) == 3.5",
                "assert median([1]) == 1",
                "assert median([1, 2]) == 1.5",
                "assert median([-5, -3, -1, -2, -4]) == -3",
                "assert median([0, 0, 0, 0]) == 0"
            ],
            "failed_tests": [
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('') == True",
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('aaaaa') == True",
                "assert is_palindrome('zbcd') == False",
                "assert is_palindrome('A man, a plan, a canal, Panama') == False  # Considering case sensitivity and non-alphabetic characters",
                "assert is_palindrome('racecar') == True",
                "assert is_palindrome('12321') == True",
                "assert is_palindrome('123456') == False",
                "assert is_palindrome('Madam') == False  # Case sensitivity"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert modp(3, 5) == 3",
                "assert modp(1101, 101) == 2",
                "assert modp(0, 101) == 1",
                "assert modp(3, 11) == 8",
                "assert modp(100, 101) == 1",
                "assert modp(2, 3) == 1",
                "assert modp(10, 2) == 0",
                "assert modp(4, 17) == 16"
            ],
            "failed_tests": [
                "assert modp(5, 5) == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_shift(\"abc\") == \"fgh\"",
                "assert encode_shift(\"xyz\") == \"cde\"",
                "assert encode_shift(\"hello\") == \"mjqqt\"",
                "assert encode_shift(\"\") == \"\"",
                "assert encode_shift(\"abcxyz\") == \"fghcde\"",
                "assert decode_shift(\"fgh\") == \"abc\"",
                "assert decode_shift(\"cde\") == \"xyz\"",
                "assert decode_shift(\"mjqqt\") == \"hello\"",
                "assert decode_shift(\"\") == \"\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('') == ''",
                "assert remove_vowels('abcdef\\nghijklm') == 'bcdf\\nghjklm'",
                "assert remove_vowels('abcdef') == 'bcdf'",
                "assert remove_vowels('aaaaa') == ''",
                "assert remove_vowels('aaBAA') == 'B'",
                "assert remove_vowels('zbcd') == 'zbcd'",
                "assert remove_vowels('AEIOUaeiou') == ''",
                "assert remove_vowels('Python Programming') == 'Pythn Prgrmmng'",
                "assert remove_vowels('12345') == '12345'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 4, 10], 100) == True",
                "assert below_threshold([1, 20, 4, 10], 5) == False",
                "assert below_threshold([1, 2, 3], 4) == True",
                "assert below_threshold([-1, -2, -3], 0) == True",
                "assert below_threshold([10, 20, 30], 15) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(2, 3) == 5",
                "assert add(5, 7) == 12",
                "assert add(-1, 1) == 0",
                "assert add(-5, -7) == -12",
                "assert add(0, 0) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
                "assert same_chars('abcd', 'dddddddabc') == True",
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('eabcd', 'dddddddabc') == False",
                "assert same_chars('abcd', 'dddddddabce') == False",
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False",
                "assert same_chars('', '') == True",
                "assert same_chars('a', 'a') == True",
                "assert same_chars('abc', 'cba') == True",
                "assert same_chars('abc', 'abcd') == False",
                "assert same_chars('xyz', 'zyx') == True"
            ],
            "failed_tests": [
                "assert same_chars('abc', 'abcc') == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(10) == 55",
                "assert fib(1) == 1",
                "assert fib(8) == 21",
                "assert fib(0) == 0",
                "assert fib(2) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"<\") == False",
                "assert correct_bracketing(\"<>\") == True",
                "assert correct_bracketing(\"<<><>>\") == True",
                "assert correct_bracketing(\"><<>\") == False",
                "assert correct_bracketing(\"><\") == False",
                "assert correct_bracketing(\"<<<>>>\") == True",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"<<>>><<\") == False"
            ],
            "failed_tests": [
                "assert correct_bracketing(\"><<><>>\") == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 2, 4, 20]) == True",
                "assert monotonic([1, 20, 4, 10]) == False",
                "assert monotonic([4, 1, 0, -10]) == True",
                "assert monotonic([10, 10, 10, 10]) == True",
                "assert monotonic([-1, -2, -3, -4]) == True",
                "assert monotonic([1]) == True",
                "assert monotonic([]) == True",
                "assert monotonic([5, 5, 5, 4, 4, 4, 3, 3, 3]) == True",
                "assert monotonic([3, 3, 3, 4, 4, 4, 5, 5, 5]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
                "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]",
                "assert common([], [1, 2, 3]) == []",
                "assert common([1, 2, 3], []) == []",
                "assert common([1, 2, 3], [4, 5, 6]) == []",
                "assert common([1, 1, 1, 1], [1, 1, 1]) == [1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(13195) == 29",
                "assert largest_prime_factor(2048) == 2",
                "assert largest_prime_factor(100) == 5",
                "assert largest_prime_factor(6936) == 17",
                "assert largest_prime_factor(999) == 37"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(30) == 465",
                "assert sum_to_n(100) == 5050",
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(10) == 55",
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(0) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"(\") == False",
                "assert correct_bracketing(\")\") == False",
                "assert correct_bracketing(\"()\") == True",
                "assert correct_bracketing(\"(()())\") == True",
                "assert correct_bracketing(\")(()\") == False",
                "assert correct_bracketing(\"((((()))))\") == True",
                "assert correct_bracketing(\"(()\") == False",
                "assert correct_bracketing(\"())(\") == False",
                "assert correct_bracketing(\"\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
                "assert derivative([1, 2, 3]) == [2, 6]",
                "assert derivative([10]) == []",
                "assert derivative([0, 0, 0]) == [0, 0]",
                "assert derivative([5, 4, 3, 2, 1]) == [4, 6, 6, 4]",
                "assert derivative([-1, -2, -3, -4]) == [-2, -6, -12]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(0) == 0",
                "assert fibfib(1) == 0",
                "assert fibfib(2) == 1",
                "assert fibfib(3) == 1",
                "assert fibfib(4) == 2",
                "assert fibfib(5) == 4",
                "assert fibfib(6) == 7",
                "assert fibfib(7) == 13",
                "assert fibfib(8) == 24",
                "assert fibfib(9) == 44"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"abcde\") == 2",
                "assert vowels_count(\"ACEDY\") == 3",
                "assert vowels_count(\"rhythm\") == 0",
                "assert vowels_count(\"RHYTHMY\") == 1",
                "assert vowels_count(\"aeiouAEIOUY\") == 11",
                "assert vowels_count(\"bcdfgBCDFG\") == 0",
                "assert vowels_count(\"Python\") == 1"
            ],
            "failed_tests": [
                "assert vowels_count(\"\") == 0 (IndexError: string index out of range)",
                "assert vowels_count(\"PYTHONy\") == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12345, 1) == \"51234\"",
                "assert circular_shift(12345, 2) == \"45123\"",
                "assert circular_shift(12345, 5) == \"12345\"",
                "assert circular_shift(12345, 6) == \"54321\"",
                "assert circular_shift(0, 1) == \"0\"",
                "assert circular_shift(98765, 3) == \"76598\""
            ],
            "failed_tests": [
                "assert circular_shift(12345, 10) == \"12345\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"\") == 0",
                "assert digitSum(\"abAB\") == 131",
                "assert digitSum(\"abcCd\") == 67",
                "assert digitSum(\"helloE\") == 69",
                "assert digitSum(\"woArBld\") == 131",
                "assert digitSum(\"aAaaaXa\") == 153",
                "assert digitSum(\"123\") == 0",
                "assert digitSum(\"Z\") == 90",
                "assert digitSum(\"A\") == 65"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
                "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
                "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95",
                "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19",
                "assert fruit_distribution(\"10 apples and 10 oranges\", 30) == 10",
                "assert fruit_distribution(\"1 apples and 0 oranges\", 2) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([4, 2, 3]) == [2, 1]",
                "assert pluck([1, 2, 3]) == [2, 1]",
                "assert pluck([]) == []",
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
                "assert pluck([1, 3, 5, 7]) == []",
                "assert pluck([2, 4, 6, 8]) == [2, 0]",
                "assert pluck([11, 22, 33, 44, 55, 2]) == [2, 5]",
                "assert pluck([0]) == [0, 0]",
                "assert pluck([1, 3, 5]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert search([4, 1, 2, 2, 3, 1]) == 2",
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4",
                "assert search([5, 5, 4, 4, 4]) == -1",
                "assert search([1, 1, 1, 1]) == 1",
                "assert search([3, 3, 3, 2, 2, 1]) == 3",
                "assert search([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 10",
                "assert search([2, 2]) == 2"
            ],
            "failed_tests": [
                "assert search([1]) == -1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([10, 1, 7, 3]) == [1, 10, 3, 7]",
                "assert strange_sort_list([-1, -2, -3, -4]) == [-4, -1, -3, -2]",
                "assert strange_sort_list([1]) == [1]",
                "assert strange_sort_list([2, 1]) == [1, 2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(3, 4, 5) == 6.00",
                "assert triangle_area(1, 2, 10) == -1",
                "assert triangle_area(10, 10, 10) == 43.30",
                "assert triangle_area(5, 5, 8) == 12.00",
                "assert triangle_area(0, 0, 0) == -1",
                "assert triangle_area(7, 24, 25) == 84.00",
                "assert triangle_area(3, 4, 7) == -1",
                "assert triangle_area(8, 15, 17) == 60.00",
                "assert triangle_area(5, 12, 13) == 30.00"
            ],
            "failed_tests": [
                "assert triangle_area(1.5, 2.5, 2) == 1.49 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([1, 2], 5) == False",
                "assert will_it_fly([3, 2, 3], 1) == False",
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([3], 5) == True",
                "assert will_it_fly([1, 2, 1], 4) == True",
                "assert will_it_fly([1, 2, 2, 1], 10) == True",
                "assert will_it_fly([1, 2, 3, 2, 1], 3) == False",
                "assert will_it_fly([], 0) == True",
                "assert will_it_fly([1, 2, 3, 4, 5], 15) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([1, 2, 3, 2, 1]) == 0",
                "assert smallest_change([1, 2, 2, 1]) == 0",
                "assert smallest_change([1, 1, 1, 1, 1]) == 0",
                "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4",
                "assert smallest_change([]) == 0",
                "assert smallest_change([1]) == 0",
                "assert smallest_change([1, 2]) == 1",
                "assert smallest_change([9, 8, 7, 8, 9]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match([], []) == []",
                "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']",
                "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']",
                "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']",
                "assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']",
                "assert total_match(['hello', 'world'], ['hello']) == ['hello']",
                "assert total_match(['a', 'b', 'c'], ['d', 'e']) == ['d', 'e']",
                "assert total_match(['short'], ['longer', 'strings']) == ['short']",
                "assert total_match(['equal', 'length'], ['equal', 'length']) == ['equal', 'length']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(42) == True  # 2 * 3 * 7",
                "assert is_multiply_prime(7) == False  # 7 is prime but not a product of 3 primes",
                "assert is_multiply_prime(1) == False  # 1 is not a product of any prime numbers",
                "assert is_multiply_prime(97) == False  # 97 is prime but not a product of 3 primes"
            ],
            "failed_tests": [
                "assert is_multiply_prime(60) == True  # 2 * 3 * 5 * 2 (AssertionError: )",
                "assert is_multiply_prime(8) == False  # 2 * 2 * 2, not 3 distinct primes (AssertionError: )",
                "assert is_multiply_prime(27) == False  # 3 * 3 * 3, not 3 distinct primes (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(1, 4) == True",
                "assert is_simple_power(2, 2) == True",
                "assert is_simple_power(8, 2) == True",
                "assert is_simple_power(3, 2) == False",
                "assert is_simple_power(3, 1) == False",
                "assert is_simple_power(5, 3) == False",
                "assert is_simple_power(27, 3) == True",
                "assert is_simple_power(16, 4) == True",
                "assert is_simple_power(81, 3) == True",
                "assert is_simple_power(0, 5) == False"
            ],
            "failed_tests": [
                "assert is_simple_power(64, 4) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(27) == True",
                "assert iscube(1) == True",
                "assert iscube(-8) == True",
                "assert iscube(8) == True",
                "assert iscube(0) == True",
                "assert iscube(216) == True",
                "assert iscube(-125) == True",
                "assert iscube(64) == True",
                "assert iscube(-27) == True",
                "assert iscube(125) == True",
                "assert iscube(-1) == True",
                "assert iscube(180) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"AB\") == 1",
                "assert hex_key(\"1077E\") == 2",
                "assert hex_key(\"ABED1A33\") == 4",
                "assert hex_key(\"123456789ABCDEF0\") == 6",
                "assert hex_key(\"2020\") == 2",
                "assert hex_key(\"\") == 0",
                "assert hex_key(\"FFFF\") == 0",
                "assert hex_key(\"2B7D\") == 4",
                "assert hex_key(\"9\") == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(15) == \"db1111db\"",
                "assert decimal_to_binary(32) == \"db100000db\"",
                "assert decimal_to_binary(1) == \"db1db\"",
                "assert decimal_to_binary(0) == \"db0db\"",
                "assert decimal_to_binary(255) == \"db11111111db\"",
                "assert decimal_to_binary(2) == \"db10db\"",
                "assert decimal_to_binary(64) == \"db1000000db\"",
                "assert decimal_to_binary(127) == \"db1111111db\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy(\"a\") == False",
                "assert is_happy(\"aa\") == False",
                "assert is_happy(\"abcd\") == True",
                "assert is_happy(\"aabb\") == False",
                "assert is_happy(\"adb\") == True",
                "assert is_happy(\"xyy\") == False",
                "assert is_happy(\"xyz\") == True",
                "assert is_happy(\"xyx\") == False",
                "assert is_happy(\"abcdefg\") == True",
                "assert is_happy(\"aabbc\") == False",
                "assert is_happy(\"xyzxyz\") == True",
                "assert is_happy(\"xyzz\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([4.0]) == ['A+']",
                "assert numerical_letter_grade([0.0]) == ['E']"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([4.0, 3.8, 3.5, 3.2, 3.0]) == ['A+', 'A', 'A-', 'B+', 'B+'] (AssertionError: )",
                "assert numerical_letter_grade([2.8, 2.5, 2.2, 2.0, 1.8]) == ['B', 'B-', 'C+', 'C+', 'C'] (AssertionError: )",
                "assert numerical_letter_grade([1.5, 1.2, 1.0, 0.8, 0.5]) == ['C-', 'D+', 'D+', 'D', 'D-'] (AssertionError: )",
                "assert numerical_letter_grade([0.0, 3.7, 2.7, 1.3, 0.7]) == ['E', 'A', 'B', 'C-', 'D'] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert prime_length('Hello') == True",
                "assert prime_length('abcdcba') == True",
                "assert prime_length('kittens') == True",
                "assert prime_length('orange') == False",
                "assert prime_length('a') == False",
                "assert prime_length('ab') == True",
                "assert prime_length('') == False"
            ],
            "failed_tests": [
                "assert prime_length('abcdefg') == False (AssertionError: )",
                "assert prime_length('abcdefgh') == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert starts_one_ends(3) == 180"
            ],
            "failed_tests": [
                "assert starts_one_ends(1) == 2 (AssertionError: )",
                "assert starts_one_ends(2) == 19 (AssertionError: )",
                "assert starts_one_ends(4) == 1710 (AssertionError: )",
                "assert starts_one_ends(5) == 16200 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solve(1000) == \"1\"",
                "assert solve(150) == \"110\"",
                "assert solve(147) == \"1100\"",
                "assert solve(0) == \"0\"",
                "assert solve(1) == \"1\""
            ],
            "failed_tests": [
                "assert solve(255) == \"11111111\" (AssertionError: )",
                "assert solve(256) == \"1\" (AssertionError: )",
                "assert solve(1023) == \"1111111111\" (AssertionError: )",
                "assert solve(1024) == \"1\" (AssertionError: )",
                "assert solve(2023) == \"11111110000\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2",
                "assert add([1, 3, 5, 7, 9]) == 0",
                "assert add([2, 4, 6, 8, 10]) == 12"
            ],
            "failed_tests": [
                "assert add([0, 1, 2, 3, 4, 5]) == 1 (AssertionError: )",
                "assert add([-2, -4, -6, -8]) == -4 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('Hi') == 'Hi'",
                "assert anti_shuffle('hello') == 'ehllo'",
                "assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'",
                "assert anti_shuffle('jumps over the lazy dog') == 'jmpsu eorv eht alyz dgo'",
                "assert anti_shuffle('') == ''",
                "assert anti_shuffle('A B C D E F G') == 'A B C D E F G'",
                "assert anti_shuffle('123 456 789') == '123 456 789'"
            ],
            "failed_tests": [
                "assert anti_shuffle('The quick brown fox') == 'The ckiqu bnoor fox' (AssertionError: )",
                "assert anti_shuffle('!@#$%^&*()') == '!@#$%^&*()' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
                "assert get_row([], 1) == []",
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]",
                "assert get_row([\n  [7,8,9],\n  [7,8,9,10,11,12],\n  [13,14,15]\n], 7) == [(0, 0), (1, 0)]",
                "assert get_row([\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n], 10) == []",
                "assert get_row([\n  [1,1,1],\n  [2,2,2],\n  [3,3,3]\n], 2) == [(1, 2), (1, 1), (1, 0)]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([]) == []",
                "assert sort_array([5]) == [5]",
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
                "assert sort_array([1, 3, 2]) == [1, 2, 3]",
                "assert sort_array([10, 20]) == [20, 10]",
                "assert sort_array([11, 20]) == [11, 20]"
            ],
            "failed_tests": [
                "assert sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encrypt('hi') == 'lm'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('gf') == 'kj'",
                "assert encrypt('et') == 'ix'",
                "assert encrypt('z') == 'd'",
                "assert encrypt('y') == 'c'",
                "assert encrypt('abc') == 'efg'",
                "assert encrypt('xyz') == 'bcd'",
                "assert encrypt('') == ''"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([1, 2, 3, 4, 5]) == 2",
                "assert next_smallest([5, 1, 4, 3, 2]) == 2",
                "assert next_smallest([]) == None",
                "assert next_smallest([1, 1]) == None",
                "assert next_smallest([2, 3, 4, 5, 1]) == 2",
                "assert next_smallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2",
                "assert next_smallest([1]) == None",
                "assert next_smallest([3, 3, 2, 2]) == 3",
                "assert next_smallest([-1, -2, -3, -4, -5]) == -4",
                "assert next_smallest([100, 200]) == 200"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"Hello world\") == 0",
                "assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1",
                "assert is_bored(\"Is it? I wonder. It is!\") == 1",
                "assert is_bored(\"\") == 0"
            ],
            "failed_tests": [
                "assert is_bored(\"I am bored. This is great!\") == 2 (AssertionError: )",
                "assert is_bored(\"I think, therefore I am. I am bored? Yes, very much!\") == 3 (AssertionError: )",
                "assert is_bored(\"I. I. I. I.\") == 4 (AssertionError: )",
                "assert is_bored(\"I'm not starting with the right word. But I am now!\") == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert any_int(5, 2, 7) == True",
                "assert any_int(3, 2, 2) == False",
                "assert any_int(3, -2, 1) == True",
                "assert any_int(3.6, -2.2, 2) == False",
                "assert any_int(0, 0, 0) == True",
                "assert any_int(-5, 10, 5) == True",
                "assert any_int(1, 1, 2) == True",
                "assert any_int(-1, -1, -2) == True"
            ],
            "failed_tests": [
                "assert any_int(1, 2, 3) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'",
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
                "assert encode('') == ''"
            ],
            "failed_tests": [
                "assert encode('HELLO') == 'hJLLM' (AssertionError: )",
                "assert encode('world') == 'WMRLD' (AssertionError: )",
                "assert encode('AeIoU') == 'CgKqA' (AssertionError: )",
                "assert encode('Python') == 'pyTHQN' (AssertionError: )",
                "assert encode('ABCD') == 'cBCD' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
                "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
                "assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13",
                "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11",
                "assert skjkasdkd([0,81,12,3,1,21]) == 3",
                "assert skjkasdkd([0,8,1,2,1,7]) == 7",
                "assert skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 11  # Largest prime is 29, sum of digits is 11",
                "assert skjkasdkd([37, 41, 43, 47, 53, 59, 61, 67, 71, 73]) == 10  # Largest prime is 73, sum of digits is 10",
                "assert skjkasdkd([83, 89, 97, 101, 103, 107, 109, 113]) == 5  # Largest prime is 113, sum of digits is 5",
                "assert skjkasdkd([0]) == 0  # No prime numbers, return 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
                "assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False",
                "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False",
                "assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False",
                "assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}) == True",
                "assert check_dict_case({}) == False",
                "assert check_dict_case({\"alllowercase\":\"yes\", \"stilllowercase\":\"yes\"}) == True",
                "assert check_dict_case({\"ALLUPPERCASE\":\"YES\", \"STILLUPPERCASE\":\"YES\"}) == True",
                "assert check_dict_case({\"Mixed\":\"No\", \"case\":\"No\"}) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(5) == [2, 3]",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(0) == []",
                "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(1) == []",
                "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]",
                "assert count_up_to(2) == []",
                "assert count_up_to(3) == [2]",
                "assert count_up_to(10) == [2, 3, 5, 7]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert multiply(148, 412) == 16",
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(14, -15) == 20",
                "assert multiply(5, 7) == 35",
                "assert multiply(0, 10) == 0",
                "assert multiply(111, 111) == 1"
            ],
            "failed_tests": [
                "assert multiply(-9, -8) == 72 (AssertionError: )",
                "assert multiply(-123, 456) == 18 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('aBCdEf') == 1",
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('dBBE') == 0",
                "assert count_upper('') == 0",
                "assert count_upper('12345') == 0",
                "assert count_upper('aEiOu') == 0",
                "assert count_upper('AEIOU') == 3"
            ],
            "failed_tests": [
                "assert count_upper('ABECEDARIO') == 2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"10\") == 10",
                "assert closest_integer(\"15.3\") == 15",
                "assert closest_integer(\"14.5\") == 15",
                "assert closest_integer(\"-14.5\") == -15",
                "assert closest_integer(\"99.99\") == 100",
                "assert closest_integer(\"-99.99\") == -100",
                "assert closest_integer(\"0\") == 0",
                "assert closest_integer(\"-2.5\") == -3"
            ],
            "failed_tests": [
                "assert closest_integer(\"0.1\") == 1 (AssertionError: )",
                "assert closest_integer(\"-0.1\") == -1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(2) == [2, 4]",
                "assert make_a_pile(3) == [3, 5, 7]",
                "assert make_a_pile(4) == [4, 6, 8, 10]",
                "assert make_a_pile(5) == [5, 7, 9, 11, 13]",
                "assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]",
                "assert make_a_pile(10) == [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]",
                "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
                "assert words_string(\"Hello,world\") == [\"Hello\", \"world\"]",
                "assert words_string(\"No,spaces,or,commas\") == [\"No\", \"spaces\", \"or\", \"commas\"]",
                "assert words_string(\"\") == []",
                "assert words_string(\"SingleWord\") == [\"SingleWord\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(12, 15) == 14",
                "assert choose_num(13, 12) == -1",
                "assert choose_num(2, 5) == 4",
                "assert choose_num(5, 5) == -1",
                "assert choose_num(4, 4) == 4",
                "assert choose_num(10, 10) == 10",
                "assert choose_num(11, 11) == -1",
                "assert choose_num(1, 100) == 100",
                "assert choose_num(1, 2) == 2",
                "assert choose_num(1, 1) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(1, 5) == \"0b11\"",
                "assert rounded_avg(7, 5) == -1",
                "assert rounded_avg(10, 20) == \"0b1111\"",
                "assert rounded_avg(20, 33) == \"0b11010\"",
                "assert rounded_avg(5, 5) == \"0b101\"",
                "assert rounded_avg(100, 102) == \"0b1100101\"",
                "assert rounded_avg(2, 3) == \"0b10\"",
                "assert rounded_avg(50, 50) == \"0b110010\"",
                "assert rounded_avg(1, 1) == \"0b1\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([152, 323, 1422, 10]) == []",
                "assert unique_digits([123, 555, 777]) == [555, 777]",
                "assert unique_digits([2, 4, 6, 8]) == []",
                "assert unique_digits([13579, 135, 97531]) == [135, 13579, 97531]",
                "assert unique_digits([111, 222, 333, 444]) == [111, 333]",
                "assert unique_digits([]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]",
                "assert by_length([]) == []",
                "assert by_length([1, -1, 55]) == [\"One\"]",
                "assert by_length([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]",
                "assert by_length([10, 11, 12, 0, -5, 3]) == [\"Three\"]",
                "assert by_length([4, 3, 2, 1, 0, -1, -2, 11, 10, 9]) == [\"Nine\", \"Four\", \"Three\", \"Two\", \"One\"]",
                "assert by_length([7, 7, 7, 7]) == [\"Seven\", \"Seven\", \"Seven\", \"Seven\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(1) == [1]",
                "assert f(2) == [1, 2]",
                "assert f(3) == [1, 2, 6]",
                "assert f(4) == [1, 2, 6, 24]",
                "assert f(5) == [1, 2, 6, 24, 15]",
                "assert f(6) == [1, 2, 6, 24, 15, 720]",
                "assert f(0) == []",
                "assert f(7) == [1, 2, 6, 24, 15, 720, 28]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(3) == (1, 2)",
                "assert even_odd_palindrome(12) == (4, 6)",
                "assert even_odd_palindrome(1) == (0, 1)",
                "assert even_odd_palindrome(2) == (1, 1)"
            ],
            "failed_tests": [
                "assert even_odd_palindrome(22) == (9, 9) (AssertionError: )",
                "assert even_odd_palindrome(100) == (18, 29) (AssertionError: )",
                "assert even_odd_palindrome(9) == (3, 6) (AssertionError: )",
                "assert even_odd_palindrome(99) == (18, 28) (AssertionError: )",
                "assert even_odd_palindrome(101) == (18, 29) (AssertionError: )",
                "assert even_odd_palindrome(10) == (4, 6) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_nums([]) == 0",
                "assert count_nums([-1, 11, -11]) == 1",
                "assert count_nums([1, 1, 2]) == 3",
                "assert count_nums([-123, 456, 789]) == 3",
                "assert count_nums([10, -10, 20, -20, 30, -30]) == 3",
                "assert count_nums([111, 222, 333]) == 3"
            ],
            "failed_tests": [
                "assert count_nums([-5, -23, -77, 0]) == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([3, 4, 5, 1, 2]) == True",
                "assert move_one_ball([3, 5, 4, 1, 2]) == False",
                "assert move_one_ball([1, 2, 3, 4, 5]) == True",
                "assert move_one_ball([5, 1, 2, 3, 4]) == True",
                "assert move_one_ball([2, 3, 4, 5, 1]) == True",
                "assert move_one_ball([1]) == True",
                "assert move_one_ball([]) == True",
                "assert move_one_ball([5, 4, 3, 2, 1]) == False",
                "assert move_one_ball([1, 3, 5, 2, 4]) == False",
                "assert move_one_ball([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"",
                "assert exchange([1, 2, 3, 4], [1, 5, 3, 7]) == \"NO\"",
                "assert exchange([2, 4, 6], [1, 3, 5]) == \"YES\"",
                "assert exchange([1, 3, 5], [2, 4, 6]) == \"YES\"",
                "assert exchange([1, 3, 5], [1, 3, 5]) == \"NO\"",
                "assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"YES\"",
                "assert exchange([1], [2]) == \"YES\"",
                "assert exchange([2], [1]) == \"YES\"",
                "assert exchange([1, 1, 1, 1], [2, 2, 2, 2]) == \"YES\"",
                "assert exchange([2, 2, 2, 2], [1, 1, 1, 1]) == \"YES\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('a b b a') == {'a': 2, 'b': 2}",
                "assert histogram('a b c a b') == {'a': 2, 'b': 2}",
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('') == {}",
                "assert histogram('c c c c c') == {'c': 5}",
                "assert histogram('a b c d e f g h i') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1}"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
                "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)",
                "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)",
                "assert reverse_delete(\"radar\", \"r\") == ('ada', True)",
                "assert reverse_delete(\"teststring\", \"t\") == ('essring', False)",
                "assert reverse_delete(\"a\", \"a\") == ('', True)",
                "assert reverse_delete(\"\", \"abc\") == ('', True)",
                "assert reverse_delete(\"noon\", \"n\") == ('oo', True)"
            ],
            "failed_tests": [
                "assert reverse_delete(\"level\", \"v\") == ('leel', False) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
                "assert odd_count(['3', '11111111']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
                "assert odd_count(['2468', '13579']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 5n the str5ng 5 of the 5nput.\"]"
            ],
            "failed_tests": [
                "assert odd_count(['', '0024', '567']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([-1, -2, -3]) == -6",
                "assert minSubArraySum([1, 2, 3, 4, 5]) == 1",
                "assert minSubArraySum([-1, 2, -3, 4]) == -3",
                "assert minSubArraySum([0, -2, 3, -1, 2]) == -2",
                "assert minSubArraySum([-5, -1, -8, 0, 3]) == -14",
                "assert minSubArraySum([10]) == 10",
                "assert minSubArraySum([-10]) == -10",
                "assert minSubArraySum([0]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
                "assert max_fill([[1,1,1], [1,1,1]], 3) == 2",
                "assert max_fill([[1,1,0,0], [0,0,1,1]], 2) == 2",
                "assert max_fill([[1]], 1) == 1"
            ],
            "failed_tests": [
                "assert max_fill([[1,1,1,1,1], [1,1,1,1,1], [1,1,1,1,1]], 10) == 2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([3, 8, 3, 6]) == [8, 3, 3, 6]",
                "assert sort_array([0, 0, 0, 0]) == [0, 0, 0, 0]",
                "assert sort_array([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 4, 8, 3, 5, 6, 9, 10, 7]",
                "assert sort_array([1023, 511, 255, 127, 63, 31, 15, 7, 3, 1]) == [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023]"
            ],
            "failed_tests": [
                "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] (AssertionError: )",
                "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] (AssertionError: )",
                "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
                "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
                "assert select_words(\"simple white space\", 2) == []",
                "assert select_words(\"Hello world\", 4) == [\"world\"]",
                "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]",
                "assert select_words(\"\", 3) == []",
                "assert select_words(\"a e i o u\", 1) == []",
                "assert select_words(\"b c d f g\", 1) == [\"b\", \"c\", \"d\", \"f\", \"g\"]"
            ],
            "failed_tests": [
                "assert select_words(\"This is a test\", 1) == [\"is\", \"a\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"yogurt\") == \"u\"",
                "assert get_closest_vowel(\"FULL\") == \"U\"",
                "assert get_closest_vowel(\"quick\") == \"\"",
                "assert get_closest_vowel(\"ab\") == \"\"",
                "assert get_closest_vowel(\"Python\") == \"o\"",
                "assert get_closest_vowel(\"example\") == \"a\"",
                "assert get_closest_vowel(\"A\") == \"\"",
                "assert get_closest_vowel(\"BcD\") == \"\""
            ],
            "failed_tests": [
                "assert get_closest_vowel(\"programming\") == \"a\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['()(', ')']) == 'Yes'",
                "assert match_parens([')', ')']) == 'No'",
                "assert match_parens(['(', ')']) == 'Yes'",
                "assert match_parens(['(()', '())']) == 'Yes'",
                "assert match_parens([')(', '']) == 'No'",
                "assert match_parens(['', '']) == 'Yes'",
                "assert match_parens(['(()', ')']) == 'Yes'",
                "assert match_parens([')(', ')(']) == 'No'",
                "assert match_parens(['(', '(()))']) == 'Yes'"
            ],
            "failed_tests": [
                "assert match_parens([')())', '(()(']) == 'No' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
                "assert maximum([4, -4, 4], 2) == [4, 4]",
                "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
                "assert maximum([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
                "assert maximum([5, 4, 3, 2, 1], 3) == [3, 4, 5]",
                "assert maximum([-1, -2, -3, -4, -5], 2) == [-2, -1]",
                "assert maximum([100, 200, 300, 400, 500], 0) == []",
                "assert maximum([0, 0, 0, 0], 4) == [0, 0, 0, 0]",
                "assert maximum([-1000, 1000, 0], 2) == [0, 1000]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9",
                "assert solution([30, 13, 24, 321]) == 0",
                "assert solution([1, 2, 3, 4, 5, 6, 7]) == 16",
                "assert solution([0, 1, 2, 3, 4, 5]) == 0",
                "assert solution([-1, -2, -3, -4, -5]) == -9",
                "assert solution([11]) == 11",
                "assert solution([2, 4, 6, 8, 10]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
                "assert add_elements([10, 20, 30, 40, 50], 5) == 150",
                "assert add_elements([1, 2, 3, 4, 5], 3) == 6",
                "assert add_elements([123, 456, 78, 90, 12], 5) == 180",
                "assert add_elements([0, 0, 0, 0], 4) == 0",
                "assert add_elements([99, 1, 1001, 22], 2) == 100",
                "assert add_elements([5], 1) == 5",
                "assert add_elements([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 10) == 55"
            ],
            "failed_tests": [
                "assert add_elements([-10, -20, 30, 40], 4) == 40 (AssertionError: )",
                "assert add_elements([100, 200, 300, 1], 3) == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(1) == [1]",
                "assert get_odd_collatz(2) == [1]",
                "assert get_odd_collatz(5) == [1, 5]",
                "assert get_odd_collatz(6) == [1, 3, 5]"
            ],
            "failed_tests": [
                "assert get_odd_collatz(3) == [1, 3, 5, 7, 10] (AssertionError: )",
                "assert get_odd_collatz(10) == [1, 3, 5, 7, 10] (AssertionError: )",
                "assert get_odd_collatz(7) == [1, 3, 5, 7, 11, 21, 42] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('02-29-2020') == True  # Leap year",
                "assert valid_date('06-04-2020') == True",
                "assert valid_date('') == False  # Empty string",
                "assert valid_date('03-11-2000') == True",
                "assert valid_date('06/04/2020') == False",
                "assert valid_date('00-00-0000') == False  # Invalid date and month",
                "assert valid_date('02-28-2021') == True",
                "assert valid_date('01-01-0001') == True  # Test minimal valid year",
                "assert valid_date('13-01-2020') == False  # Invalid month",
                "assert valid_date('15-01-2012') == False"
            ],
            "failed_tests": [
                "assert valid_date('12-31-1999') == True (AssertionError: )",
                "assert valid_date('02-29-2021') == False  # Not a leap year (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"abcdef\") == 3",
                "assert split_words(\"Hello world! How are you?\") == [\"Hello\", \"world!\", \"How\", \"are\", \"you?\"]",
                "assert split_words(\"Hello,world!,How,are,you?\") == [\"Hello\", \"world!\", \"How\", \"are\", \"you?\"]",
                "assert split_words(\"\") == 0"
            ],
            "failed_tests": [
                "assert split_words(\"a\") == 1 (AssertionError: )",
                "assert split_words(\"b\") == 0 (AssertionError: )",
                "assert split_words(\" \") == [\"\"] (AssertionError: )",
                "assert split_words(\",\") == [\"\"] (AssertionError: )",
                "assert split_words(\"a,b,c,d,e,f,g\") == 4 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([5]) == True",
                "assert is_sorted([1, 2, 3, 4, 5]) == True",
                "assert is_sorted([1, 3, 2, 4, 5]) == False",
                "assert is_sorted([1, 2, 3, 4, 5, 6]) == True",
                "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True",
                "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False",
                "assert is_sorted([1, 2, 2, 3, 3, 4]) == True",
                "assert is_sorted([1, 2, 2, 2, 3, 4]) == False",
                "assert is_sorted([1, 1, 1, 1, 1, 1, 1]) == False",
                "assert is_sorted([2, 4, 6, 8, 10]) == True",
                "assert is_sorted([10, 8, 6, 4, 2]) == False",
                "assert is_sorted([1, 2, 3, 4, 4, 5]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert intersection((1, 2), (2, 3)) == \"NO\"",
                "assert intersection((-1, 1), (0, 4)) == \"NO\"",
                "assert intersection((-3, -1), (-5, 5)) == \"YES\"",
                "assert intersection((5, 7), (7, 9)) == \"NO\"",
                "assert intersection((1, 5), (6, 9)) == \"NO\"",
                "assert intersection((0, 0), (0, 0)) == \"NO\"",
                "assert intersection((-10, -7), (-8, -5)) == \"NO\"",
                "assert intersection((3, 3), (3, 3)) == \"NO\""
            ],
            "failed_tests": [
                "assert intersection((10, 13), (12, 15)) == \"YES\" (AssertionError: )",
                "assert intersection((2, 11), (3, 7)) == \"YES\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([1, 2, 2, -4]) == -9",
                "assert prod_signs([0, 1]) == 0",
                "assert prod_signs([]) == None",
                "assert prod_signs([1, 2, 3]) == 6",
                "assert prod_signs([0, 0, 0]) == 0",
                "assert prod_signs([-1, 0, 1]) == 0"
            ],
            "failed_tests": [
                "assert prod_signs([-1, -2, -3]) == 6 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]",
                "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]",
                "assert minPath([[1, 2], [3, 4]], 2) == [1, 2]",
                "assert minPath([[2, 3], [1, 4]], 4) == [1, 2, 1, 2]"
            ],
            "failed_tests": [
                "assert minPath([[10, 12, 11], [9, 8, 7], [6, 5, 4]], 4) == [4, 5, 4, 5] (AssertionError: )",
                "assert minPath([[1, 2, 3], [6, 5, 4], [7, 8, 9]], 5) == [1, 2, 3, 2, 1] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert tri(0) == [1]",
                "assert tri(1) == [1, 3]",
                "assert tri(2) == [1, 3, 2]",
                "assert tri(3) == [1, 3, 2, 8]",
                "assert tri(4) == [1, 3, 2, 8, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digits(1) == 1",
                "assert digits(4) == 0",
                "assert digits(235) == 15",
                "assert digits(2222) == 0",
                "assert digits(13579) == 945",
                "assert digits(2468) == 0",
                "assert digits(123456789) == 945",
                "assert digits(111) == 1",
                "assert digits(999) == 729"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[[]]') == True",
                "assert is_nested('[]]]]]]][[[[[]') == False",
                "assert is_nested('[][]') == False",
                "assert is_nested('[]') == False",
                "assert is_nested('[[][]]') == True",
                "assert is_nested('[[]][[') == True",
                "assert is_nested('[[[[[[]]]]]]') == True",
                "assert is_nested('') == False",
                "assert is_nested('[[[]') == False",
                "assert is_nested(']]]') == False",
                "assert is_nested('[[[[]]]]') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 14",
                "assert sum_squares([1, 4, 9]) == 98",
                "assert sum_squares([1, 3, 5, 7]) == 84",
                "assert sum_squares([1.4, 4.2, 0]) == 29",
                "assert sum_squares([-2.4, 1, 1]) == 6",
                "assert sum_squares([0, 0, 0]) == 0",
                "assert sum_squares([-1.5, -2.5, -3.5]) == 14",
                "assert sum_squares([2.5, 2.5, 2.5]) == 27"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
                "assert check_if_last_char_is_a_letter(\"\") == False",
                "assert check_if_last_char_is_a_letter(\"Hello World!\") == False",
                "assert check_if_last_char_is_a_letter(\"Hello World\") == False",
                "assert check_if_last_char_is_a_letter(\"a\") == True",
                "assert check_if_last_char_is_a_letter(\" \") == False",
                "assert check_if_last_char_is_a_letter(\"Hello World a\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1, 2, 4, 3, 5]) == 3",
                "assert can_arrange([1, 2, 3]) == -1",
                "assert can_arrange([10, 20, 30, 25, 40]) == 3",
                "assert can_arrange([1]) == -1",
                "assert can_arrange([2, 1]) == 1",
                "assert can_arrange([1, 3, 5, 7, 6, 8]) == 4"
            ],
            "failed_tests": [
                "assert can_arrange([5, 4, 3, 2, 1]) == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([0]) == (None, None)",
                "assert largest_smallest_integers([-1, -2, -3, -4]) == (-1, None)",
                "assert largest_smallest_integers([1, 2, 3, 4]) == (None, 1)",
                "assert largest_smallest_integers([-5, -4, -3, 2, 4, 6]) == (-3, 2)",
                "assert largest_smallest_integers([-2, -1, 0, 1, 2]) == (-1, 1)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert compare_one(1, 2.5) == 2.5",
                "assert compare_one(1, \"2,3\") == \"2,3\"",
                "assert compare_one(\"5,1\", \"6\") == \"6\"",
                "assert compare_one(\"1\", 1) == None",
                "assert compare_one(3.5, \"3,6\") == \"3,6\"",
                "assert compare_one(\"3.5\", 3.6) == 3.6",
                "assert compare_one(-1, \"-2\") == -1",
                "assert compare_one(\"-1,2\", -1.3) == \"-1,2\""
            ],
            "failed_tests": [
                "assert compare_one(\"3,5\", \"3.5\") == \"3.5\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(4) == False",
                "assert is_equal_to_sum_even(6) == False",
                "assert is_equal_to_sum_even(8) == True",
                "assert is_equal_to_sum_even(12) == True",
                "assert is_equal_to_sum_even(16) == True",
                "assert is_equal_to_sum_even(20) == True",
                "assert is_equal_to_sum_even(24) == True",
                "assert is_equal_to_sum_even(28) == True",
                "assert is_equal_to_sum_even(32) == True",
                "assert is_equal_to_sum_even(100) == True"
            ],
            "failed_tests": [
                "assert is_equal_to_sum_even(10) == False (AssertionError: )",
                "assert is_equal_to_sum_even(14) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(1) == 1",
                "assert special_factorial(2) == 2",
                "assert special_factorial(3) == 12",
                "assert special_factorial(4) == 288",
                "assert special_factorial(5) == 34560",
                "assert special_factorial(6) == 24883200"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"Example\") == \"Example\"",
                "assert fix_spaces(\"Example 1\") == \"Example_1\"",
                "assert fix_spaces(\" Example 2\") == \"_Example_2\"",
                "assert fix_spaces(\" Example   3\") == \"_Example-3\"",
                "assert fix_spaces(\"Example    with    multiple    spaces\") == \"Example-with-multiple-spaces\"",
                "assert fix_spaces(\"NoSpacesHere\") == \"NoSpacesHere\"",
                "assert fix_spaces(\" \") == \"_\"",
                "assert fix_spaces(\"   \") == \"-\""
            ],
            "failed_tests": [
                "assert fix_spaces(\"  Leading and trailing  \") == \"_Leading_and_trailing_\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"file123.txt\") == 'Yes'",
                "assert file_name_check(\"1example.dll\") == 'No'",
                "assert file_name_check(\"file1234.txt\") == 'No'",
                "assert file_name_check(\"file123.jpeg\") == 'No'",
                "assert file_name_check(\"123file.txt\") == 'No'",
                "assert file_name_check(\"file..txt\") == 'No'",
                "assert file_name_check(\"Afile.txt\") == 'Yes'",
                "assert file_name_check(\"example.txt\") == 'Yes'",
                "assert file_name_check(\"file123.exe\") == 'Yes'",
                "assert file_name_check(\"file\") == 'No'",
                "assert file_name_check(\"file.dll\") == 'Yes'",
                "assert file_name_check(\"file.jpeg\") == 'No'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 6",
                "assert sum_squares([]) == 0",
                "assert sum_squares([-1, -5, 2, -1, -5]) == -126",
                "assert sum_squares([0, 0, 0, 0, 0, 0, 0]) == 0"
            ],
            "failed_tests": [
                "assert sum_squares([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 3 (AssertionError: )",
                "assert sum_squares([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1345 (AssertionError: )",
                "assert sum_squares([-2, -3, -4, -5, -6, -7, -8, -9, -10]) == -1345 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"This is a test\") == \"is\"",
                "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
                "assert words_in_sentence(\"a\") == \"\"",
                "assert words_in_sentence(\" \") == \"\""
            ],
            "failed_tests": [
                "assert words_in_sentence(\"prime numbers in a sentence\") == \"prime in a\" (AssertionError: )",
                "assert words_in_sentence(\"one two three four five six seven\") == \"two three five seven\" (AssertionError: )",
                "assert words_in_sentence(\"abcdefg hijklmnop qrstuv wxyz\") == \"qrstuv\" (AssertionError: )",
                "assert words_in_sentence(\"no primes here\") == \"\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"1/6\", \"2/1\") == False",
                "assert simplify(\"7/10\", \"10/2\") == False",
                "assert simplify(\"2/3\", \"3/2\") == True",
                "assert simplify(\"1/2\", \"2/3\") == False",
                "assert simplify(\"3/4\", \"4/3\") == True",
                "assert simplify(\"10/1\", \"1/10\") == True",
                "assert simplify(\"5/2\", \"2/5\") == True",
                "assert simplify(\"9/8\", \"8/9\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]",
                "assert order_by_points([]) == []",
                "assert order_by_points([111, 222, 333, 444]) == [111, 222, 333, 444]"
            ],
            "failed_tests": [
                "assert order_by_points([56, 65, 654, 456]) == [56, 65, 456, 654] (AssertionError: )",
                "assert order_by_points([-56, -65, -654, -456]) == [-56, -65, -456, -654] (AssertionError: )",
                "assert order_by_points([123, 321, 213]) == [123, 213, 321] (AssertionError: )",
                "assert order_by_points([-12, 12, 21, -21]) == [-12, 12, 21, -21] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2",
                "assert specialFilter([11, 13, 15, 17, 19]) == 5",
                "assert specialFilter([-11, -13, -15, -17, -19]) == 0",
                "assert specialFilter([10, 20, 30, 40, 50]) == 0",
                "assert specialFilter([]) == 0",
                "assert specialFilter([135, 246, 357, 468, 579]) == 3",
                "assert specialFilter([101, 202, 303, 404, 505]) == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(5) == 1",
                "assert get_max_triples(3) == 0",
                "assert get_max_triples(6) == 4",
                "assert get_max_triples(1) == 0"
            ],
            "failed_tests": [
                "assert get_max_triples(10) == 19 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
                "assert bf(\"Earth\", \"Mercury\") == (\"Venus\",)",
                "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
                "assert bf(\"Uranus\", \"Jupiter\") == (\"Saturn\",)",
                "assert bf(\"Neptune\", \"Mercury\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")",
                "assert bf(\"Earth\", \"Venus\") == ()",
                "assert bf(\"Pluto\", \"Mars\") == ()",
                "assert bf(\"Mars\", \"Pluto\") == ()",
                "assert bf(\"Mercury\", \"Neptune\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([\"12345\", \"67890\", \"abc\", \"de\", \"fghij\"]) == [\"de\"]",
                "assert sorted_list_sum([]) == []",
                "assert sorted_list_sum([\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\"]) == [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\"]",
                "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\"]) == []"
            ],
            "failed_tests": [
                "assert sorted_list_sum([\"hello\", \"world\", \"hi\", \"bye\"]) == [\"hi\", \"bye\"] (AssertionError: )",
                "assert sorted_list_sum([\"odd\", \"even\", \"one\", \"two\", \"three\"]) == [\"one\", \"two\"] (AssertionError: )",
                "assert sorted_list_sum([\"a\", \"bb\", \"ccc\", \"dddd\"]) == [\"bb\"] (AssertionError: )",
                "assert sorted_list_sum([\"flower\", \"rose\", \"tree\", \"bush\", \"plant\"]) == [\"rose\", \"bush\", \"tree\"] (AssertionError: )",
                "assert sorted_list_sum([\"apple\", \"banana\", \"cherry\", \"date\"]) == [\"date\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(7, 34, 12) == 34",
                "assert x_or_y(15, 8, 5) == 5",
                "assert x_or_y(2, 10, 20) == 10",
                "assert x_or_y(4, 0, 1) == 1",
                "assert x_or_y(11, 22, 33) == 22",
                "assert x_or_y(13, 7, 14) == 7",
                "assert x_or_y(9, 8, 7) == 7",
                "assert x_or_y(23, 45, 67) == 45"
            ],
            "failed_tests": [
                "assert x_or_y(1, 5, 10) == 5 (AssertionError: )",
                "assert x_or_y(0, 3, 6) == 6 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([1, 3, 2, 0]) == 10",
                "assert double_the_difference([-1, -2, 0]) == 0",
                "assert double_the_difference([9, -2]) == 81",
                "assert double_the_difference([0]) == 0",
                "assert double_the_difference([]) == 0",
                "assert double_the_difference([1, 2, 3, 4, 5]) == 35",
                "assert double_the_difference([-3, -5, -7]) == 0",
                "assert double_the_difference([2.5, 3.5, 4.5]) == 0"
            ],
            "failed_tests": [
                "assert double_the_difference([10, 11, 12, 13, 14]) == 170 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]",
                "assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) == [4, 4, 1, 0, 0, 6]",
                "assert compare([], []) == []",
                "assert compare([10, 20, 30], [10, 20, 30]) == [0, 0, 0]",
                "assert compare([1, 1, 1, 1], [2, 2, 2, 2]) == [1, 1, 1, 1]",
                "assert compare([5, 10, 15], [0, 0, 0]) == [5, 10, 15]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('Data', ['Loader', 'ANALYZER', 'visual']) == 'Data.ANALYZER'",
                "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
                "assert Strongest_Extension('Vehicle', ['Car', 'Truck', 'Bicycle']) == 'Vehicle.Car'",
                "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
                "assert Strongest_Extension('Test', ['equal', 'Minus', 'PLUS']) == 'Test.PLUS'",
                "assert Strongest_Extension('Collection', ['Set', 'List', 'Map']) == 'Collection.Set'",
                "assert Strongest_Extension('Algorithm', ['Sort', 'Search', 'Graph']) == 'Algorithm.Sort'",
                "assert Strongest_Extension('Model', ['Linear', 'Logistic', 'SVM']) == 'Model.SVM'",
                "assert Strongest_Extension('Framework', ['React', 'Vue', 'Angular']) == 'Framework.Vue'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('Graph', ['Node', 'Edge', 'Vertex']) == 'Graph.Edge' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"abcd\", \"abd\") == False",
                "assert cycpattern_check(\"hello\", \"ell\") == True",
                "assert cycpattern_check(\"whassup\", \"psus\") == False",
                "assert cycpattern_check(\"abab\", \"baa\") == True",
                "assert cycpattern_check(\"efef\", \"eeff\") == False",
                "assert cycpattern_check(\"himenss\", \"simen\") == True",
                "assert cycpattern_check(\"rotation\", \"tationro\") == True",
                "assert cycpattern_check(\"12345\", \"45123\") == True"
            ],
            "failed_tests": [
                "assert cycpattern_check(\"abcdefg\", \"efgab\") == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(-12) == (1, 1)",
                "assert even_odd_count(123) == (1, 2)",
                "assert even_odd_count(0) == (1, 0)",
                "assert even_odd_count(1111) == (0, 4)",
                "assert even_odd_count(2222) == (4, 0)",
                "assert even_odd_count(123456789) == (4, 5)",
                "assert even_odd_count(-123456789) == (4, 5)",
                "assert even_odd_count(2468) == (4, 0)",
                "assert even_odd_count(13579) == (0, 5)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(1) == 'i'",
                "assert int_to_mini_roman(3) == 'iii'",
                "assert int_to_mini_roman(9) == 'ix'",
                "assert int_to_mini_roman(106) == 'cvi'",
                "assert int_to_mini_roman(294) == 'ccxciv'",
                "assert int_to_mini_roman(399) == 'cccxcix'",
                "assert int_to_mini_roman(444) == 'cdxliv'",
                "assert int_to_mini_roman(521) == 'dxxi'",
                "assert int_to_mini_roman(999) == 'cmxcix'",
                "assert int_to_mini_roman(1000) == 'm'"
            ],
            "failed_tests": [
                "assert int_to_mini_roman(148) == 'cxlvi' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(5, 12, 13) == True",
                "assert right_angle_triangle(1, 2, 3) == False",
                "assert right_angle_triangle(7, 24, 25) == True",
                "assert right_angle_triangle(10, 6, 8) == True",
                "assert right_angle_triangle(1, 1, 1) == False",
                "assert right_angle_triangle(5, 3, 4) == True",
                "assert right_angle_triangle(8, 15, 17) == True",
                "assert right_angle_triangle(12, 5, 13) == True"
            ],
            "failed_tests": [
                "assert right_angle_triangle(0, 0, 0) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
                "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"",
                "assert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"",
                "assert find_max([\"hello\", \"world\", \"python\", \"code\"]) == \"python\"",
                "assert find_max([\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]) == \"abc\"",
                "assert find_max([\"a\", \"b\", \"c\", \"d\"]) == \"a\"",
                "assert find_max([\"zzzzz\", \"zzzzzz\", \"zzzzzzz\"]) == \"zzzzz\"",
                "assert find_max([\"\"]) == \"\""
            ],
            "failed_tests": [
                "assert find_max([\"apple\", \"banana\", \"cherry\"]) == \"banana\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert eat(5, 6, 10) == [11, 4]",
                "assert eat(4, 8, 9) == [12, 1]",
                "assert eat(1, 10, 10) == [11, 0]",
                "assert eat(2, 11, 5) == [7, 0]",
                "assert eat(0, 0, 0) == [0, 0]",
                "assert eat(10, 5, 0) == [10, 0]",
                "assert eat(0, 1000, 500) == [500, 0]"
            ],
            "failed_tests": [
                "assert eat(500, 500, 1000) == [1000, 0] (AssertionError: )",
                "assert eat(250, 250, 500) == [500, 0] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['+'], [1, 2]) == 3"
            ],
            "failed_tests": [
                "assert do_algebra(['-', '+'], [5, 3, 2]) == 0 (AssertionError: )",
                "assert do_algebra(['*', '+', '-'], [2, 3, 4, 1]) == 13 (AssertionError: )",
                "assert do_algebra(['//', '**', '+'], [16, 4, 2, 3]) == 67 (AssertionError: )",
                "assert do_algebra(['**', '*', '+', '-'], [2, 3, 2, 1, 5]) == 31 (AssertionError: )",
                "assert do_algebra(['+', '-', '*', '//'], [10, 2, 3, 4, 2]) == 5 (AssertionError: )",
                "assert do_algebra(['-', '*', '+', '//', '**'], [3, 5, 2, 4, 2, 3]) == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"1234\") == \"4321\"",
                "assert solve(\"ab\") == \"AB\"",
                "assert solve(\"#a@C\") == \"#A@c\"",
                "assert solve(\"Hello World!\") == \"hELLO wORLD!\"",
                "assert solve(\"123a\") == \"123A\"",
                "assert solve(\"\") == \"\"",
                "assert solve(\"12345a\") == \"12345A\"",
                "assert solve(\"AaBbCc\") == \"aAbBcC\"",
                "assert solve(\"##$$%%^^&&\") == \"&&^^%%$$##\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('') is None",
                "assert string_to_md5('password') == '5f4dcc3b5aa765d61d8327deb882cf99'",
                "assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'"
            ],
            "failed_tests": [
                "assert string_to_md5('!@#$%^&*()') == 'f80b3d2c32c6c4a6133d34c2f5b3702e' (AssertionError: )",
                "assert string_to_md5('Python 3.8') == '4b2f5ff47436671a7a0d8acf8b8e08b1' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(2, 8) == [2, 4, 6, 8]",
                "assert generate_integers(8, 2) == [2, 4, 6, 8]",
                "assert generate_integers(10, 14) == []",
                "assert generate_integers(1, 5) == [2, 4]",
                "assert generate_integers(5, 1) == [2, 4]",
                "assert generate_integers(3, 3) == []",
                "assert generate_integers(2, 2) == [2]"
            ],
            "failed_tests": [
                "assert generate_integers(0, 4) == [0, 2, 4] (AssertionError: )"
            ]
        }
    }
]