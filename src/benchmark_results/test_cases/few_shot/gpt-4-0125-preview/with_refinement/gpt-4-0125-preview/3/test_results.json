[
    {
        "task_id": "HumanEval/0",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([], 1.0) == False",
                "assert has_close_elements([1.0, 1.1], 0.05) == False",
                "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
                "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('()') == ['()']",
                "assert separate_paren_groups('()()') == ['()', '()']",
                "assert separate_paren_groups('(()(()))') == ['(()(()))']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5"
            ],
            "failed_tests": [
                "assert truncate_number(10.99) == 0.99 (AssertionError: )",
                "assert truncate_number(999.999) == 0.999 (AssertionError: )",
                "assert truncate_number(100.001) == 0.001 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([10, -15, 5]) == True",
                "assert below_zero([0, 0, 0]) == False",
                "assert below_zero([]) == False",
                "assert below_zero([1, 2, 3]) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([-1.0, 0.0, 1.0]) == 0.6666666666666666",
                "assert mean_absolute_deviation([1.0, 1.0, 1.0, 1.0]) == 0.0",
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([10.0, 12.0, 23.0, 23.0, 16.0]) == 5.36 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([], 4) == []",
                "assert intersperse([1], 0) == [1]",
                "assert intersperse([1, 2, 3, 4], 0) == [1, 0, 2, 0, 3, 0, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('((((()))))') == [5]",
                "assert parse_nested_parens('(((())))') == [4]",
                "assert parse_nested_parens('(())') == [2]",
                "assert parse_nested_parens('()') == [1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring(['hello', 'world'], 'z') == []",
                "assert filter_by_substring(['ABC', 'BCD', 'CDE'], 'a') == []",
                "assert filter_by_substring(['python', 'java', 'c++', 'javascript'], 'java') == ['java', 'javascript']",
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([10, 10]) == (20, 100)",
                "assert sum_product([-1]) == (-1, -1)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([5, 3, 1, 2, 4]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
                "assert rolling_max([-1, -2, -3, -2, -1]) == [-1, -1, -1, -1, -1]",
                "assert rolling_max([]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_palindrome('abcde') == 'abcdedcba'",
                "assert is_palindrome('racecar') == True",
                "assert make_palindrome('') == ''",
                "assert make_palindrome('a') == 'a'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('101010', '010101') == '111111'",
                "assert string_xor('00110011', '11001100') == '11111111'",
                "assert string_xor('0000', '0000') == '0000'",
                "assert string_xor('111', '000') == '111'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest(['a', 'b', 'c']) == 'a'",
                "assert longest(['one', 'two', 'three', 'four', 'five']) == 'three'",
                "assert longest(['short', 'longer', 'longest', 'longer']) == 'longest'",
                "assert longest(['hello', 'world', 'python', 'programming']) == 'programming'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(3, 5) == 1",
                "assert greatest_common_divisor(17, 13) == 1",
                "assert greatest_common_divisor(25, 15) == 5",
                "assert greatest_common_divisor(100, 10) == 10"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']",
                "assert all_prefixes('xyz') == ['x', 'xy', 'xyz']",
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
                "assert all_prefixes('123') == ['1', '12', '123']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(-1) == ''",
                "assert string_sequence(1) == '0 1'",
                "assert string_sequence(3) == '0 1 2 3'",
                "assert string_sequence(5) == '0 1 2 3 4 5'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('') == 0",
                "assert count_distinct_characters('aaaaa') == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o o o') == [4, 4, 4]",
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
                "assert parse_music('o|') == [2]",
                "assert parse_music('.| o o| .|') == [1, 4, 2, 1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('abcabcabc', 'abc') == 3",
                "assert how_many_times('hello world', ' ') == 1",
                "assert how_many_times('aaa', 'a') == 3",
                "assert how_many_times('pythonpython', 'python') == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('zero two four six') == 'zero two four six'",
                "assert sort_numbers('') == ''",
                "assert sort_numbers('four two') == 'two four'",
                "assert sort_numbers('nine eight seven') == 'seven eight nine'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([-1.0, -2.0, -2.1]) == (-2.1, -2.0)",
                "assert find_closest_elements([-5.0, 5.0, 0.0]) == (-5.0, 0.0)",
                "assert find_closest_elements([100.0, 200.0, 300.0, 400.0, 401.0]) == (400.0, 401.0)",
                "assert find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.55]) == (0.5, 0.55)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([100.0, 200.0, 300.0, 400.0]) == [0.0, 0.3333333333333333, 0.6666666666666666, 1.0]",
                "assert rescale_to_unit([-2.0, 0.0, 2.0]) == [0.0, 0.5, 1.0]",
                "assert rescale_to_unit([-1.0, 1.0]) == [0.0, 1.0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_integers([]) == []",
                "assert filter_integers(['string', {}, 3.14, None]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('123456789') == 9",
                "assert strlen('hello world') == 11",
                "assert strlen('a b c') == 5",
                "assert strlen(' ') == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(17) == 1",
                "assert largest_divisor(15) == 5",
                "assert largest_divisor(37) == 1",
                "assert largest_divisor(2) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(2) == [2]",
                "assert factorize(360) == [2, 2, 2, 3, 3, 5]",
                "assert factorize(100) == [2, 2, 5, 5]",
                "assert factorize(70) == [2, 5, 7]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 1, 1, 1, 1]) == []",
                "assert remove_duplicates([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]",
                "assert remove_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1]",
                "assert remove_duplicates([]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('123abcABC') == '123ABCabc'",
                "assert flip_case('python') == 'PYTHON'",
                "assert flip_case('12345') == '12345'",
                "assert flip_case('Python') == 'pYTHON'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate(['a']) == 'a'",
                "assert concatenate([]) == ''",
                "assert concatenate(['a', 'b', 'c']) == 'abc'",
                "assert concatenate(['concatenate', ' ', 'strings']) == 'concatenate strings'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix(['123', '456', '789'], '1') == ['123']",
                "assert filter_by_prefix(['hello', 'world', 'python', 'programming'], 'p') == ['python', 'programming']",
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['AAA', 'BBB', 'AAB', 'ABA'], 'AA') == ['AAA', 'AAB']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
                "assert get_positive([]) == []",
                "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]",
                "assert get_positive([0, -1, -2, -3, -4]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(4) == False",
                "assert is_prime(11) == True",
                "assert is_prime(1) == False",
                "assert is_prime(6) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert round(poly([1, 2], -0.5), 2) == 0",
                "assert round(poly([2, -3, 1], -2.0), 2) != 0",
                "assert round(poly([-6, 11, -6, 1], 1.0), 2) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
                "assert sort_third([]) == []",
                "assert sort_third([3]) == [3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([100]) == [100]",
                "assert unique([1, 1, 1, 1]) == [1]",
                "assert unique([]) == []",
                "assert unique([-3, -2, -1, 0, 1, 2, 3]) == [-3, -2, -1, 0, 1, 2, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([0, 0, 0, 0]) == 0",
                "assert max_element([-10, 0, 10, 20, 30]) == 30",
                "assert max_element([-1, -2, -3, -4]) == -1",
                "assert max_element([1, 2, 3]) == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(1) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_even([]) == []",
                "assert sort_even([1, 2, 3]) == [1, 2, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert decode_cyclic(encode_cyclic(\"ab\")) == \"ab\"",
                "assert decode_cyclic(encode_cyclic(\"\")) == \"\""
            ],
            "failed_tests": [
                "assert encode_cyclic(\"abcdef\") == \"bcadef\" (AssertionError: )",
                "assert encode_cyclic(\"abcdefg\") == \"bcadefg\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(6) == 233",
                "assert prime_fib(7) == 1597",
                "assert prime_fib(2) == 3",
                "assert prime_fib(4) == 13"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
                "assert triples_sum_to_zero([0, 0, 0]) == True",
                "assert triples_sum_to_zero([1, 3, -2, 1]) == True",
                "assert triples_sum_to_zero([1, 2, 3, 7]) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(1) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]",
                "assert incr_list([0, 0, 0]) == [1, 1, 1]",
                "assert incr_list([]) == []",
                "assert incr_list([1, 2, 3]) == [2, 3, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([-1, 1, 2, 3]) == True",
                "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
                "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True",
                "assert pairs_sum_to_zero([-5, 5]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert change_base(8, 3) == '22'",
                "assert change_base(9, 9) == '10'",
                "assert change_base(7, 2) == '111'"
            ],
            "failed_tests": [
                "assert change_base(0, 2) == '0' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(0, 5) == 0.0",
                "assert triangle_area(10, 2) == 10.0",
                "assert triangle_area(100, 50) == 2500.0"
            ],
            "failed_tests": [
                "assert triangle_area(1.5, 4.2) == 3.15 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib4(0) == 0",
                "assert fib4(4) == 2",
                "assert fib4(2) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([0, 0, 0, 0]) == 0",
                "assert median([1, 2, 3, 4, 5, 6]) == 3.5",
                "assert median([-1, 0, 1]) == 0"
            ],
            "failed_tests": [
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('123456') == False",
                "assert is_palindrome('zbcd') == False",
                "assert is_palindrome('aaaaa') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(3, 5) == 3",
                "assert modp(100, 101) == 1",
                "assert modp(4, 17) == 16",
                "assert modp(10, 2) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_shift(\"abcxyz\") == \"fghcde\"",
                "assert encode_shift(\"hello\") == \"mjqqt\"",
                "assert decode_shift(\"fgh\") == \"abc\"",
                "assert decode_shift(\"fghcde\") == \"abcxyz\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('') == ''",
                "assert remove_vowels('AEIOUaeiou') == ''",
                "assert remove_vowels('zbcd') == 'zbcd'",
                "assert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 20, 4, 10], 5) == False",
                "assert below_threshold([], 5) == True",
                "assert below_threshold([10, 20, 30], 10) == False",
                "assert below_threshold([4], 5) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(0, 0) == 0",
                "assert add(-5, -7) == -12",
                "assert add(100, 200) == 300",
                "assert add(5, 7) == 12"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('xyz', 'zyx') == True",
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('', '') == True",
                "assert same_chars('abc', 'cba') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(5) == 5",
                "assert fib(10) == 55",
                "assert fib(3) == 2",
                "assert fib(1) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"<<><>>\") == True",
                "assert correct_bracketing(\">><><><\") == False",
                "assert correct_bracketing(\"><\") == False",
                "assert correct_bracketing(\"<\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([4, 1, 0, -10]) == True",
                "assert monotonic([1, 2, 2, 3]) == True",
                "assert monotonic([-1, -2, -3, -4]) == True",
                "assert monotonic([3, 2, 2, 1]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([], [1, 2, 3]) == []",
                "assert common([1, 1, 1, 1], [1, 1, 1]) == [1]",
                "assert common([], []) == []",
                "assert common([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 3, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(13195) == 29",
                "assert largest_prime_factor(100) == 5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(0) == 0",
                "assert sum_to_n(10) == 55",
                "assert sum_to_n(-1) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"(()())\") == True",
                "assert correct_bracketing(\"(\") == False",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"()()\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([5, 0, 2]) == [0, 4]",
                "assert derivative([1, -1, 1, -1, 1]) == [-1, 2, -3, 4]",
                "assert derivative([10]) == []",
                "assert derivative([1, 2, 3]) == [2, 6]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(1) == 0",
                "assert fibfib(5) == 4",
                "assert fibfib(4) == 2",
                "assert fibfib(8) == 24"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"rhythmy\") == 1"
            ],
            "failed_tests": [
                "assert vowels_count(\"syzygy\") == 0 (AssertionError: )",
                "assert vowels_count(\"SYZYGY\") == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12345, 5) == \"12345\"",
                "assert circular_shift(12345, 6) == \"54321\"",
                "assert circular_shift(1, 1) == \"1\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"abcCd\") == 67",
                "assert digitSum(\"helloE\") == 69",
                "assert digitSum(\"A\") == 65",
                "assert digitSum(\"123\") == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95",
                "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
                "assert fruit_distribution(\"10 apples and 10 oranges\", 30) == 10",
                "assert fruit_distribution(\"1 apples and 0 oranges\", 2) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([2, 4, 6, 8]) == [2, 0]",
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
                "assert pluck([1, 3, 5, 7]) == []",
                "assert pluck([0]) == [0, 0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert search([6, 6, 6, 6, 6, 6, 1, 2, 3, 4, 5]) == 6",
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4",
                "assert search([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 10"
            ],
            "failed_tests": [
                "assert search([1]) == -1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([-1, -2, -3, -4]) == [-4, -1, -3, -2]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([3, 2, 1, 4, 5]) == [1, 5, 2, 4, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(3, 4, 5) == 6.00",
                "assert triangle_area(2, 2, 3) == round(1.98, 2)",
                "assert triangle_area(0, 0, 0) == -1",
                "assert triangle_area(1, 2, 10) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([3], 5) == True",
                "assert will_it_fly([], 0) == True",
                "assert will_it_fly([1, 2, 3, 2, 1], 0) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1, 2, 3, 4, 5]) == 2",
                "assert smallest_change([1, 2, 2, 1]) == 0",
                "assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4",
                "assert smallest_change([1]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match(['a', 'ab', 'abc'], ['abc', 'de']) == ['abc', 'de']",
                "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']",
                "assert total_match(['hello', 'world'], ['hello', 'world']) == ['hello', 'world']",
                "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(1) == False",
                "assert is_multiply_prime(30) == True"
            ],
            "failed_tests": [
                "assert is_multiply_prime(60) == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(3, 2) == False",
                "assert is_simple_power(81, 3) == True",
                "assert is_simple_power(2, 2) == True"
            ],
            "failed_tests": [
                "assert is_simple_power(10, 10) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(-8) == True",
                "assert iscube(-216) == True",
                "assert iscube(180) == False",
                "assert iscube(216) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"AAAA\") == 0",
                "assert hex_key(\"\") == 0",
                "assert hex_key(\"2357\") == 4"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(1023) == \"db1111111111db\"",
                "assert decimal_to_binary(15) == \"db1111db\"",
                "assert decimal_to_binary(0) == \"db0db\"",
                "assert decimal_to_binary(255) == \"db11111111db\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy(\"aabbc\") == False",
                "assert is_happy(\"abcdefg\") == True",
                "assert is_happy(\"aa\") == False",
                "assert is_happy(\"adb\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert numerical_letter_grade([3.3, 2.7, 1.7, 0.7, 3.0]) == ['A-', 'B', 'C', 'D', 'B+'] (AssertionError: )",
                "assert numerical_letter_grade([0.0, 3.7, 2.3, 1.3, 0.7]) == ['E', 'A', 'B-', 'C-', 'D'] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('abcdefgh') == False",
                "assert prime_length('Hello') == True",
                "assert prime_length('') == False",
                "assert prime_length('orange') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert starts_one_ends(4) == 3600 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(0) == \"0\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([10]) == 0",
                "assert add([1, 3, 5, 7, 9]) == 0"
            ],
            "failed_tests": [
                "assert add([1, 2, 3, 4, 5, 6]) == 6 (AssertionError: )",
                "assert add([0, 2, 4, 6]) == 2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('Hi') == 'Hi'",
                "assert anti_shuffle('keep IT as it IS') == 'eekp IT as it IS'",
                "assert anti_shuffle('A B C D E F G') == 'A B C D E F G'"
            ],
            "failed_tests": [
                "assert anti_shuffle('The quick brown fox') == 'Teh cikqu bnoor fiox' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([[1, 2], [3, 4], [5, 6], [7, 8]], 8) == [(3, 1)]",
                "assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [(1, 1)]",
                "assert get_row([[1], [1, 1], [1, 1, 1]], 1) == [(0, 0), (1, 1), (1, 0), (2, 2), (2, 1), (2, 0)]",
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [9, 8, 7, 6, 5, 4, 3, 2, 1]",
                "assert sort_array([5]) == [5]",
                "assert sort_array([1, 3, 2]) == [1, 2, 3]",
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encrypt('y') == 'c'",
                "assert encrypt('et') == 'ix'",
                "assert encrypt('gf') == 'kj'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([]) == None",
                "assert next_smallest([2, 3, 4, 5, 1]) == 2",
                "assert next_smallest([-2, -1, 0, 1, 2]) == -1",
                "assert next_smallest([2]) == None"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"I am happy! Are you happy? I hope so.\") == 2",
                "assert is_bored(\"Hello world\") == 0",
                "assert is_bored(\"It's raining. I wish it was sunny.\") == 1",
                "assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(10, 5, 5) == True",
                "assert any_int(10, -5, -15) == True",
                "assert any_int(3.6, -2.2, 2) == False",
                "assert any_int(5, 2, 7) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11",
                "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
                "assert skjkasdkd([0]) == 0",
                "assert skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 11"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}) == True",
                "assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False",
                "assert check_dict_case({\"mixedCase\":\"No\", \"AnotherMixed\":\"Nope\"}) == False",
                "assert check_dict_case({\"single\":\"value\"}) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(2) == []",
                "assert count_up_to(3) == [2]",
                "assert count_up_to(5) == [2, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(123, 456) == 18",
                "assert multiply(1, 1) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('dBBE') == 0",
                "assert count_upper('12345') == 0",
                "assert count_upper('AEIOU') == 3"
            ],
            "failed_tests": [
                "assert count_upper('aEiOuAEIOU') == 3 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"0\") == 0",
                "assert closest_integer(\"15.3\") == 15",
                "assert closest_integer(\"-2.5\") == -3"
            ],
            "failed_tests": [
                "assert closest_integer(\"0.1\") == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(2) == [2, 4]",
                "assert make_a_pile(5) == [5, 7, 9, 11, 13]",
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(4) == [4, 6, 8, 10]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"SingleWord\") == [\"SingleWord\"]",
                "assert words_string(\"No commas here\") == [\"No\", \"commas\", \"here\"]",
                "assert words_string(\"Hello,world\") == [\"Hello\", \"world\"]",
                "assert words_string(\"\") == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(8, 8) == 8",
                "assert choose_num(2, 2) == 2",
                "assert choose_num(14, 14) == 14",
                "assert choose_num(13, 12) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(2, 2) == \"0b10\"",
                "assert rounded_avg(10, 20) == \"0b1111\"",
                "assert rounded_avg(1, 5) == \"0b11\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([111, 222, 333]) == [111, 333]",
                "assert unique_digits([]) == []",
                "assert unique_digits([13579, 2468, 97531]) == [13579, 97531]",
                "assert unique_digits([152, 323, 1422, 10]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([9]) == [\"Nine\"]",
                "assert by_length([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]",
                "assert by_length([]) == []",
                "assert by_length([3, 3, 3]) == [\"Three\", \"Three\", \"Three\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(4) == [1, 2, 6, 24]",
                "assert f(5) == [1, 2, 6, 24, 15]",
                "assert f(7) == [1, 2, 6, 24, 15, 720, 28]",
                "assert f(2) == [1, 2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(1) == (0, 1)",
                "assert even_odd_palindrome(10) == (4, 5)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_nums([-1, -2, -3, -4, -5]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([5, 1, 2, 3, 4]) == True",
                "assert move_one_ball([1, 3, 5, 2, 4]) == False",
                "assert move_one_ball([5, 4, 3, 2, 1]) == False",
                "assert move_one_ball([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == 'YES'",
                "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == 'NO'",
                "assert exchange([1], [1]) == 'NO'",
                "assert exchange([1], [2]) == 'YES'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('') == {}",
                "assert histogram('c c c c c') == {'c': 5}"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"\", \"a\") == ('', True)",
                "assert reverse_delete(\"a\", \"a\") == ('', True)",
                "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)"
            ],
            "failed_tests": [
                "assert reverse_delete(\"level\", \"v\") == ('leel', False) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['3', \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
                "assert odd_count([]) == []",
                "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
                "assert odd_count(['2468', '13579']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 5n the str5ng 5 of the 5nput.\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([1, 2, 3, 4, 5]) == 1",
                "assert minSubArraySum([-1, 0, 1, 2]) == -1",
                "assert minSubArraySum([0]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[1,0,1], [0,1,0], [1,0,1]], 2) == 3",
                "assert max_fill([[1,1,1,1,1,1,1,1,1,1]], 10) == 1",
                "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
                "assert max_fill([[1]], 1) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([31, 15, 7, 3, 1]) == [1, 3, 7, 15, 31]",
                "assert sort_array([0, 0, 1, 1]) == [0, 0, 1, 1]"
            ],
            "failed_tests": [
                "assert sort_array([7, 8, 9, 10]) == [8, 10, 7, 9] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"b c d f g\", 1) == [\"b\", \"c\", \"d\", \"f\", \"g\"]",
                "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
                "assert select_words(\"simple white space\", 2) == []",
                "assert select_words(\"\", 3) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"yogurt\") == \"u\"",
                "assert get_closest_vowel(\"A\") == \"\"",
                "assert get_closest_vowel(\"b\") == \"\"",
                "assert get_closest_vowel(\"quick\") == \"\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['(()', '())']) == 'Yes'",
                "assert match_parens([')(', ')(']) == 'No'",
                "assert match_parens(['', ')']) == 'No'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
                "assert maximum([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
                "assert maximum([4, -4, 4], 2) == [4, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solution([0, 1, 2, 3, 4, 5]) == 0",
                "assert solution([2, 4, 6, 8, 10]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add_elements([1000, 1001, 1002, 10, 20], 2) == 0",
                "assert add_elements([10, 20, 30, 40, 50], 3) == 60",
                "assert add_elements([123, 456, 789, 12, 34], 5) == 46"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(2) == [1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('06/04/2020') == False",
                "assert valid_date('02-28-2021') == True",
                "assert valid_date('02-29-2020') == True"
            ],
            "failed_tests": [
                "assert valid_date('12-31-1999') == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"abcdef\") == 3",
                "assert split_words(\"\") == 0"
            ],
            "failed_tests": [
                "assert split_words(\",\") == [\"\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True",
                "assert is_sorted([2, 2, 2, 2, 2, 2]) == False",
                "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False",
                "assert is_sorted([1]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersection((0, 0), (0, 0)) == \"NO\"",
                "assert intersection((1, 2), (2, 3)) == \"NO\"",
                "assert intersection((-3, -1), (-5, 5)) == \"YES\"",
                "assert intersection((5, 7), (7, 9)) == \"NO\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([-1, 0, 1]) == 0",
                "assert prod_signs([1, 2, 2, -4]) == -9",
                "assert prod_signs([]) == None",
                "assert prod_signs([0, 0, 0]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minPath([[2, 3], [1, 4]], 5) == [1, 2, 1, 2, 1]",
                "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]",
                "assert minPath([[1, 2], [3, 4]], 2) == [1, 2]",
                "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert tri(2) == [1, 3, 2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digits(2468) == 0",
                "assert digits(1) == 1",
                "assert digits(111) == 1",
                "assert digits(2222) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[[[]') == False",
                "assert is_nested('[[[[[[]]]]]]') == True",
                "assert is_nested('') == False",
                "assert is_nested('[]') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 14",
                "assert sum_squares([0, 0, 0]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pie\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([10, 20, 30, 25, 40, 50]) == 3",
                "assert can_arrange([7]) == -1",
                "assert can_arrange([100, 200, 300, 400]) == -1"
            ],
            "failed_tests": [
                "assert can_arrange([5, 4, 3, 2, 1]) == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([1, 2, 3, -3, -2, -1]) == (-1, 1)",
                "assert largest_smallest_integers([100]) == (None, 100)",
                "assert largest_smallest_integers([-1, 0, 1]) == (-1, 1)",
                "assert largest_smallest_integers([-1, -2, -3, 3, 2, 1]) == (-1, 1)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(\"0.0\", 0) == None",
                "assert compare_one(\"5,1\", \"6\") == \"6\"",
                "assert compare_one(1, \"2,3\") == \"2,3\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(24) == True",
                "assert is_equal_to_sum_even(4) == False"
            ],
            "failed_tests": [
                "assert is_equal_to_sum_even(14) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(3) == 12",
                "assert special_factorial(6) == 24883200",
                "assert special_factorial(2) == 2",
                "assert special_factorial(1) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces('   ') == '-'",
                "assert fix_spaces('Example 1') == 'Example_1'",
                "assert fix_spaces('NoSpacesHere') == 'NoSpacesHere'"
            ],
            "failed_tests": [
                "assert fix_spaces('  ') == '__' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"a.txt\") == 'Yes'",
                "assert file_name_check(\"a.b.txt\") == 'No'",
                "assert file_name_check(\"zfile.dll\") == 'Yes'",
                "assert file_name_check(\"example.txt\") == 'Yes'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 6",
                "assert sum_squares([-1, -5, 2, -1, -5]) == -126"
            ],
            "failed_tests": [
                "assert sum_squares([4, 3, 2, 1, 0, -1, -2, -3, -4]) == 66 (AssertionError: )",
                "assert sum_squares([2, 3, 4, 5]) == 27 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
                "assert words_in_sentence(\" \") == \"\""
            ],
            "failed_tests": [
                "assert words_in_sentence(\"prime numbers are fun\") == \"prime are\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"5/8\", \"8/5\") == True",
                "assert simplify(\"1/2\", \"2/1\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([]) == []",
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]",
                "assert order_by_points([9, 99, 999]) == [9, 99, 999]"
            ],
            "failed_tests": [
                "assert order_by_points([123, 321, 213]) == [123, 213, 321] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([135, 246, 357, 468, 579]) == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(2) == 0",
                "assert get_max_triples(1) == 0",
                "assert get_max_triples(3) == 0"
            ],
            "failed_tests": [
                "assert get_max_triples(10) == 19 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Uranus\", \"Jupiter\") == (\"Saturn\",)",
                "assert bf(\"Earth\", \"Earth\") == ()",
                "assert bf(\"Earth\", \"Mercury\") == (\"Venus\",)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]",
                "assert sorted_list_sum([]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(7, 34, 12) == 34",
                "assert x_or_y(11, 3, 7) == 3",
                "assert x_or_y(2, 10, 20) == 10",
                "assert x_or_y(13, 0, 0) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([5, 7, 9]) == 5**2 + 7**2 + 9**2",
                "assert double_the_difference([1, 3, 2, 0]) == 10",
                "assert double_the_difference([-3, -5, -7]) == 0",
                "assert double_the_difference([4, 6, 8]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]",
                "assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) == [4, 4, 1, 0, 0, 6]",
                "assert compare([], []) == []",
                "assert compare([1, 1, 1, 1], [2, 2, 2, 2]) == [1, 1, 1, 1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
                "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('Model', ['NN', 'CNN', 'RNN', 'DNN']) == 'Model.NN' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"efef\", \"eeff\") == False",
                "assert cycpattern_check(\"hello\", \"ell\") == True",
                "assert cycpattern_check(\"whassup\", \"psus\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(1111) == (0, 4)",
                "assert even_odd_count(-123456789) == (4, 5)",
                "assert even_odd_count(0) == (1, 0)",
                "assert even_odd_count(123) == (1, 2)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(199) == 'cxcix'",
                "assert int_to_mini_roman(3) == 'iii'",
                "assert int_to_mini_roman(9) == 'ix'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(7, 24, 25) == True",
                "assert right_angle_triangle(5, 12, 13) == True",
                "assert right_angle_triangle(8, 15, 17) == True",
                "assert right_angle_triangle(6, 8, 10) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"a\", \"b\", \"c\", \"d\"]) == \"a\"",
                "assert find_max([\"hello\", \"world\", \"python\", \"developer\"]) == \"developer\"",
                "assert find_max([\"123\", \"321\", \"213\"]) == \"123\"",
                "assert find_max([\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]) == \"abc\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(0, 1000, 1000) == [1000, 0]",
                "assert eat(10, 20, 5) == [15, 0]",
                "assert eat(2, 11, 5) == [7, 0]",
                "assert eat(5, 6, 10) == [11, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['//', '*', '+'], [8, 4, 2, 1]) == 5",
                "assert do_algebra(['+'], [1, 2]) == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"Hello World!\") == \"hELLO wORLD!\"",
                "assert solve(\"ab\") == \"AB\"",
                "assert solve(\"aBcDeF\") == \"AbCdEf\"",
                "assert solve(\"\") == \"\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('') is None",
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('password123') == '482c811da5d5b4bc6d497ffa98491e38'"
            ],
            "failed_tests": [
                "assert string_to_md5('Python3.8') == 'a5b5fbeb4c3062df159b8b8b2136481d' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(10, 14) == []",
                "assert generate_integers(1, 3) == [2]"
            ],
            "failed_tests": [
                "assert generate_integers(28, 35) == [28, 30, 32, 34] (AssertionError: )",
                "assert generate_integers(3, 11) == [4, 6, 8, 10] (AssertionError: )"
            ]
        }
    }
]