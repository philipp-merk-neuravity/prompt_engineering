{"task_id": "HumanEval/0", "tests": ["assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True", "assert has_close_elements([1.0, 2.0, 3.0, 4.0], 10.0) == True", "assert has_close_elements([1.0, 2.0, 3.0, 2.1], 0.15) == True", "assert has_close_elements([], 1.0) == False"], "prompt_tokens": 1070, "completion_tokens": 631, "duration": 33.796656131744385}
{"task_id": "HumanEval/1", "tests": ["assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']", "assert separate_paren_groups('((()))') == ['((()))']", "assert separate_paren_groups('') == []", "assert separate_paren_groups('()((()))()') == ['()', '((()))', '()']"], "prompt_tokens": 999, "completion_tokens": 456, "duration": 26.10076332092285}
{"task_id": "HumanEval/2", "tests": ["assert truncate_number(5.0) == 0.0", "assert truncate_number(10.01) == 0.01", "assert truncate_number(1234.5678) == 0.5678", "assert truncate_number(0.75) == 0.75"], "prompt_tokens": 932, "completion_tokens": 389, "duration": 19.96819305419922}
{"task_id": "HumanEval/3", "tests": ["assert below_zero([10, -5, -5]) == False", "assert below_zero([1, 2, 3]) == False", "assert below_zero([-1, 1]) == True", "assert below_zero([10, -15, 5]) == True"], "prompt_tokens": 998, "completion_tokens": 439, "duration": 21.71768355369568}
{"task_id": "HumanEval/4", "tests": ["assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0", "assert mean_absolute_deviation([-2.0, -2.0, 2.0, 2.0]) == 2.0", "assert mean_absolute_deviation([10.0, 12.0, 23.0, 23.0, 16.0]) == 5.36", "assert mean_absolute_deviation([5.5, 5.5, 5.5, 5.5]) == 0.0"], "prompt_tokens": 1066, "completion_tokens": 533, "duration": 44.73436498641968}
{"task_id": "HumanEval/5", "tests": ["assert intersperse([-1, -2, -3], 0) == [-1, 0, -2, 0, -3]", "assert intersperse([0, 0, 0], -1) == [0, -1, 0, -1, 0]", "assert intersperse([1], 0) == [1]"], "prompt_tokens": 993, "completion_tokens": 564, "duration": 27.331316471099854}
{"task_id": "HumanEval/6", "tests": ["assert parse_nested_parens('()') == [1]", "assert parse_nested_parens('((( )))') == [3]", "assert parse_nested_parens('(()) (())') == [2, 2]", "assert parse_nested_parens('((())) (()) ()') == [3, 2, 1]"], "prompt_tokens": 995, "completion_tokens": 433, "duration": 21.276473999023438}
{"task_id": "HumanEval/7", "tests": ["assert filter_by_substring([], 'a') == []", "assert filter_by_substring(['hello', 'world'], 'x') == []", "assert filter_by_substring(['123', '456', '789'], '1') == ['123']", "assert filter_by_substring(['mix', 'max', 'mux'], 'm') == ['mix', 'max', 'mux']"], "prompt_tokens": 964, "completion_tokens": 502, "duration": 21.697672605514526}
{"task_id": "HumanEval/8", "tests": ["assert sum_product([1, 2, 3, 4]) == (10, 24)", "assert sum_product([-1, -2, -3, -4]) == (-10, 24)", "assert sum_product([2, 2, 2, 2]) == (8, 16)", "assert sum_product([1, -1, 1, -1]) == (0, 1)"], "prompt_tokens": 1011, "completion_tokens": 501, "duration": 31.19937825202942}
{"task_id": "HumanEval/9", "tests": ["assert rolling_max([5, 3, 1, 2, 4]) == [5, 5, 5, 5, 5]", "assert rolling_max([-1, -2, -3, -2, -1]) == [-1, -1, -1, -1, -1]", "assert rolling_max([10]) == [10]", "assert rolling_max([1, 3, 2, 5, 4, 6, 3]) == [1, 3, 3, 5, 5, 6, 6]"], "prompt_tokens": 1027, "completion_tokens": 538, "duration": 22.607672452926636}
{"task_id": "HumanEval/10", "tests": ["assert is_palindrome(\"python\") == False", "assert make_palindrome(\"cat\") == \"catac\"", "assert make_palindrome(\"ab\") == \"aba\"", "assert is_palindrome(\"noon\") == True"], "prompt_tokens": 1031, "completion_tokens": 436, "duration": 24.90815019607544}
{"task_id": "HumanEval/11", "tests": ["assert string_xor('00110011', '11001100') == '11111111'", "assert string_xor('000', '000') == '000'", "assert string_xor('1111', '1111') == '0000'", "assert string_xor('1', '1') == '0'"], "prompt_tokens": 916, "completion_tokens": 361, "duration": 22.536633014678955}
{"task_id": "HumanEval/12", "tests": ["assert longest(['a', 'bb', 'ccc']) == 'ccc'", "assert longest(['abc', 'defg', 'hijkl', 'mnopqr', 'stuvwx', 'yz']) == 'mnopqr'", "assert longest(['abc']) == 'abc'", "assert longest(['a', 'b', 'c']) == 'a'"], "prompt_tokens": 976, "completion_tokens": 409, "duration": 32.36654233932495}
{"task_id": "HumanEval/13", "tests": ["assert greatest_common_divisor(100, 10) == 10", "assert greatest_common_divisor(25, -15) == 5", "assert greatest_common_divisor(1, 1) == 1", "assert greatest_common_divisor(17, 17) == 17"], "prompt_tokens": 903, "completion_tokens": 441, "duration": 18.76966881752014}
{"task_id": "HumanEval/14", "tests": ["assert all_prefixes('') == []", "assert all_prefixes('a') == ['a']", "assert all_prefixes('xyz') == ['x', 'xy', 'xyz']", "assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']"], "prompt_tokens": 880, "completion_tokens": 372, "duration": 21.924719095230103}
{"task_id": "HumanEval/15", "tests": ["assert string_sequence(-1) == ''", "assert string_sequence(1) == '0 1'", "assert string_sequence(5) == '0 1 2 3 4 5'", "assert string_sequence(2) == '0 1 2'"], "prompt_tokens": 893, "completion_tokens": 345, "duration": 27.671407222747803}
{"task_id": "HumanEval/16", "tests": ["assert count_distinct_characters('xyzXYZ') == 3", "assert count_distinct_characters('aaaaa') == 1", "assert count_distinct_characters('Jerry') == 4", "assert count_distinct_characters('1234567890') == 10"], "prompt_tokens": 896, "completion_tokens": 419, "duration": 18.326889276504517}
{"task_id": "HumanEval/17", "tests": ["assert parse_music('o o o') == [4, 4, 4]", "assert parse_music('') == []", "assert parse_music('o|') == [2]", "assert parse_music('.|') == [1]"], "prompt_tokens": 1093, "completion_tokens": 474, "duration": 21.79832911491394}
{"task_id": "HumanEval/18", "tests": ["assert how_many_times('abcabcabc', 'a') == 3", "assert how_many_times('aaa', 'aaaa') == 0", "assert how_many_times('ababab', 'aba') == 2", "assert how_many_times('abcabcabc', 'd') == 0"], "prompt_tokens": 941, "completion_tokens": 491, "duration": 35.9784152507782}
{"task_id": "HumanEval/19", "tests": ["assert sort_numbers('') == ''", "assert sort_numbers('nine zero one two') == 'zero one two nine'", "assert sort_numbers('nine eight seven six') == 'six seven eight nine'", "assert sort_numbers('three three three two') == 'two three three three'"], "prompt_tokens": 968, "completion_tokens": 386, "duration": 15.782992839813232}
{"task_id": "HumanEval/20", "tests": ["assert find_closest_elements([-1.0, -2.0, -2.1]) == (-2.1, -2.0)", "assert find_closest_elements([10.5, 10.1, 10.6]) == (10.5, 10.6)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)", "assert find_closest_elements([100.0, 200.0, 300.0, 400.0, 401.0]) == (400.0, 401.0)"], "prompt_tokens": 1184, "completion_tokens": 698, "duration": 51.88628387451172}
{"task_id": "HumanEval/21", "tests": ["assert rescale_to_unit([-1.0, -0.5, 0.0, 0.5, 1.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([2.0, 2.0, 3.0]) == [0.0, 0.0, 1.0]", "assert rescale_to_unit([-2.0, 0.0, 2.0]) == [0.0, 0.5, 1.0]"], "prompt_tokens": 1133, "completion_tokens": 691, "duration": 37.544410943984985}
{"task_id": "HumanEval/22", "tests": ["assert filter_integers(['string', {}, [], (), None]) == []", "assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]", "assert filter_integers([True, False, 'True', 'False']) == []", "assert filter_integers([0, -1, 100, 1000]) == [0, -1, 100, 1000]"], "prompt_tokens": 976, "completion_tokens": 451, "duration": 19.446897983551025}
{"task_id": "HumanEval/23", "tests": ["assert strlen('') == 0", "assert strlen(' ') == 1", "assert strlen('\\n\\t') == 2", "assert strlen('1234567890') == 10"], "prompt_tokens": 827, "completion_tokens": 304, "duration": 19.120490550994873}
{"task_id": "HumanEval/24", "tests": ["assert largest_divisor(37) == 1", "assert largest_divisor(100) == 50", "assert largest_divisor(15) == 5", "assert largest_divisor(16) == 8"], "prompt_tokens": 851, "completion_tokens": 323, "duration": 44.18420386314392}
{"task_id": "HumanEval/25", "tests": ["assert factorize(49) == [7, 7]", "assert factorize(104) == [2, 2, 2, 13]", "assert factorize(2) == [2]"], "prompt_tokens": 1013, "completion_tokens": 507, "duration": 40.2921347618103}
{"task_id": "HumanEval/26", "tests": ["assert remove_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1]", "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]", "assert remove_duplicates([]) == []", "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"], "prompt_tokens": 977, "completion_tokens": 477, "duration": 22.42029905319214}
{"task_id": "HumanEval/27", "tests": ["assert flip_case('Python 3.8') == 'pYTHON 3.8'", "assert flip_case('') == ''", "assert flip_case('123') == '123'", "assert flip_case('hELLO') == 'Hello'"], "prompt_tokens": 848, "completion_tokens": 330, "duration": 13.471253156661987}
{"task_id": "HumanEval/28", "tests": ["assert concatenate(['single']) == 'single'", "assert concatenate(['123', '456', '789']) == '123456789'", "assert concatenate(['', '']) == ''", "assert concatenate(['a', 'b', 'c', 'd', 'e']) == 'abcde'"], "prompt_tokens": 873, "completion_tokens": 361, "duration": 19.65512228012085}
{"task_id": "HumanEval/29", "tests": ["assert filter_by_prefix(['apple', 'banana', 'apricot', 'cherry'], 'ap') == ['apple', 'apricot']", "assert filter_by_prefix(['sun', 'moon', 'star'], '') == ['sun', 'moon', 'star']", "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']", "assert filter_by_prefix(['sun', 'moon', 'star'], 'planet') == []"], "prompt_tokens": 977, "completion_tokens": 470, "duration": 20.606886625289917}
{"task_id": "HumanEval/30", "tests": ["assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]", "assert get_positive([]) == []", "assert get_positive([0, -1, -2, -3, -4]) == []", "assert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"], "prompt_tokens": 1048, "completion_tokens": 467, "duration": 22.605608224868774}
{"task_id": "HumanEval/31", "tests": ["assert is_prime(101) == True", "assert is_prime(6) == False", "assert is_prime(97) == True", "assert is_prime(1) == False"], "prompt_tokens": 937, "completion_tokens": 302, "duration": 16.99698495864868}
{"task_id": "HumanEval/32", "tests": ["assert round(poly([-6, 11, -6, 1], 3.0), 2) == 0", "assert round(poly([-6, 11, -6, 1], 1.0), 2) == 0", "assert round(poly([1, 2], -0.5), 2) == 0", "assert round(poly([10, 0, -1], -10.0), 2) == 0"], "prompt_tokens": 1320, "completion_tokens": 505, "duration": 20.145737886428833}
{"task_id": "HumanEval/33", "tests": ["assert sort_third([3, 2, 1]) == [3, 2, 1]", "assert sort_third([1, 2, 3]) == [1, 2, 3]", "assert sort_third([1]) == [1]"], "prompt_tokens": 1103, "completion_tokens": 733, "duration": 48.82878232002258}
{"task_id": "HumanEval/34", "tests": ["assert unique([1, 1, 1, 1, 1]) == [1]", "assert unique([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]", "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]", "assert unique([-1, -2, -2, -3, -4, -4, -5]) == [-5, -4, -3, -2, -1]"], "prompt_tokens": 996, "completion_tokens": 532, "duration": 42.13172745704651}
{"task_id": "HumanEval/35", "tests": ["assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123", "assert max_element([100]) == 100", "assert max_element([-1, 0, 1]) == 1", "assert max_element([-5, -3, -2, -1]) == -1"], "prompt_tokens": 952, "completion_tokens": 403, "duration": 22.12332797050476}
{"task_id": "HumanEval/36", "tests": ["assert fizz_buzz(79) == 3", "assert fizz_buzz(100) == 4", "assert fizz_buzz(1) == 0", "assert fizz_buzz(78) == 2"], "prompt_tokens": 905, "completion_tokens": 428, "duration": 23.53937864303589}
{"task_id": "HumanEval/37", "tests": ["assert sort_even([]) == []", "assert sort_even([4, 1, 2, 3, 6, 5]) == [2, 1, 4, 3, 6, 5]", "assert sort_even([1, 2, 3]) == [1, 2, 3]", "assert sort_even([1]) == [1]"], "prompt_tokens": 1028, "completion_tokens": 559, "duration": 47.492061376571655}
{"task_id": "HumanEval/38", "tests": ["assert encode_cyclic(\"\") == \"\"", "assert encode_cyclic(\"abcdefg\") == \"bcadefg\"", "assert encode_cyclic(\"a\") == \"a\"", "assert encode_cyclic(\"abcde\") == \"bcade\""], "prompt_tokens": 1065, "completion_tokens": 383, "duration": 32.13479447364807}
{"task_id": "HumanEval/39", "tests": ["assert prime_fib(3) == 5", "assert prime_fib(4) == 13"], "prompt_tokens": 944, "completion_tokens": 415, "duration": 31.847947597503662}
{"task_id": "HumanEval/40", "tests": ["assert triples_sum_to_zero([10, -4, -6, 0]) == True", "assert triples_sum_to_zero([1, 3, 5, 0]) == False", "assert triples_sum_to_zero([-3, 1, 2]) == True", "assert triples_sum_to_zero([1, 3, -2, 1]) == True"], "prompt_tokens": 1098, "completion_tokens": 507, "duration": 35.37436890602112}
{"task_id": "HumanEval/41", "tests": ["assert car_race_collision(5) == 25", "assert car_race_collision(3) == 9", "assert car_race_collision(10) == 100", "assert car_race_collision(0) == 0"], "prompt_tokens": 1049, "completion_tokens": 351, "duration": 25.179983139038086}
{"task_id": "HumanEval/42", "tests": ["assert incr_list([-1, -2, -3]) == [0, -1, -2]", "assert incr_list([1, 2, 3]) == [2, 3, 4]", "assert incr_list([0, 0, 0]) == [1, 1, 1]", "assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]"], "prompt_tokens": 1043, "completion_tokens": 466, "duration": 18.711385488510132}
{"task_id": "HumanEval/43", "tests": ["assert pairs_sum_to_zero([1, 3, 5, 0]) == False", "assert pairs_sum_to_zero([-1, -2, -3, -4]) == False", "assert pairs_sum_to_zero([1, 3, -2, 1]) == False", "assert pairs_sum_to_zero([-5, 5]) == True"], "prompt_tokens": 1091, "completion_tokens": 448, "duration": 37.52473592758179}
{"task_id": "HumanEval/44", "tests": ["assert change_base(0, 2) == '0'", "assert change_base(9, 9) == '10'", "assert change_base(10, 5) == '20'", "assert change_base(7, 2) == '111'"], "prompt_tokens": 937, "completion_tokens": 405, "duration": 26.160173654556274}
{"task_id": "HumanEval/45", "tests": ["assert triangle_area(5, 3) == 7.5", "assert triangle_area(1, 1) == 0.5", "assert triangle_area(10, 2) == 10.0", "assert triangle_area(0, 5) == 0.0"], "prompt_tokens": 855, "completion_tokens": 332, "duration": 18.82058811187744}
{"task_id": "HumanEval/46", "tests": ["assert fib4(8) == 26", "assert fib4(9) == 48", "assert fib4(7) == 14", "assert fib4(1) == 0"], "prompt_tokens": 1085, "completion_tokens": 451, "duration": 27.119077920913696}
{"task_id": "HumanEval/47", "tests": ["assert median([3, 1, 2, 4, 5]) == 3", "assert median([0, 0, 0, 0]) == 0", "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0", "assert median([-5, -3, -1, 1, 3, 5]) == 0.0"], "prompt_tokens": 945, "completion_tokens": 449, "duration": 25.789668560028076}
{"task_id": "HumanEval/48", "tests": ["assert is_palindrome('123456') == False", "assert is_palindrome('aaaaa') == True"], "prompt_tokens": 897, "completion_tokens": 458, "duration": 31.585460424423218}
{"task_id": "HumanEval/49", "tests": ["assert modp(7, 13) == 11", "assert modp(3, 5) == 3", "assert modp(1101, 101) == 2", "assert modp(0, 101) == 1"], "prompt_tokens": 966, "completion_tokens": 433, "duration": 17.039109706878662}
{"task_id": "HumanEval/50", "tests": ["assert encode_shift(\"\") == \"\"", "assert decode_shift(\"cde\") == \"xyz\"", "assert encode_shift(\"abc\") == \"fgh\"", "assert decode_shift(\"fgh\") == \"abc\""], "prompt_tokens": 922, "completion_tokens": 449, "duration": 39.85903525352478}
{"task_id": "HumanEval/51", "tests": ["assert remove_vowels('12345') == '12345'", "assert remove_vowels('aaBAA') == 'B'", "assert remove_vowels('Python Programming') == 'Pythn Prgrmmng'", "assert remove_vowels('zbcd') == 'zbcd'"], "prompt_tokens": 1008, "completion_tokens": 400, "duration": 15.561718225479126}
{"task_id": "HumanEval/52", "tests": ["assert below_threshold([1, 20, 4, 10], 5) == False", "assert below_threshold([10, 20, 30], 15) == False", "assert below_threshold([], 10) == True", "assert below_threshold([-1, -2, -3], 0) == True"], "prompt_tokens": 928, "completion_tokens": 434, "duration": 20.139113187789917}
{"task_id": "HumanEval/53", "tests": ["assert add(0, 0) == 0", "assert add(-5, 5) == 0", "assert add(5, 7) == 12", "assert add(2, 3) == 5"], "prompt_tokens": 857, "completion_tokens": 334, "duration": 30.497447729110718}
{"task_id": "HumanEval/54", "tests": ["assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True", "assert same_chars('', '') == True", "assert same_chars('a', 'a') == True", "assert same_chars('abcd', 'dddddddabc') == True"], "prompt_tokens": 1039, "completion_tokens": 406, "duration": 20.777654886245728}
{"task_id": "HumanEval/55", "tests": ["assert fib(1) == 1", "assert fib(10) == 55", "assert fib(0) == 0", "assert fib(3) == 2"], "prompt_tokens": 843, "completion_tokens": 285, "duration": 29.65073323249817}
{"task_id": "HumanEval/56", "tests": ["assert correct_bracketing(\"<<<>>>\") == True", "assert correct_bracketing(\"<<>><<>><<>>\") == True", "assert correct_bracketing(\"<<><>>\") == True", "assert correct_bracketing(\"<<>>><<\") == False"], "prompt_tokens": 943, "completion_tokens": 372, "duration": 27.245365858078003}
{"task_id": "HumanEval/57", "tests": ["assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([]) == True", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([10, 10, 10, 10]) == True"], "prompt_tokens": 939, "completion_tokens": 411, "duration": 20.93222451210022}
{"task_id": "HumanEval/58", "tests": ["assert common([1, 1, 1, 2], [1, 2, 2, 3]) == [1, 2]", "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([1, 2, 3], [4, 5, 6]) == []", "assert common([], [1, 2, 3]) == []"], "prompt_tokens": 1054, "completion_tokens": 531, "duration": 39.861722469329834}
{"task_id": "HumanEval/59", "tests": ["assert largest_prime_factor(2048) == 2", "assert largest_prime_factor(999) == 37", "assert largest_prime_factor(13195) == 29", "assert largest_prime_factor(100) == 5"], "prompt_tokens": 875, "completion_tokens": 365, "duration": 21.239169597625732}
{"task_id": "HumanEval/60", "tests": ["assert sum_to_n(10) == 55", "assert sum_to_n(-5) == 0", "assert sum_to_n(5) == 15", "assert sum_to_n(1) == 1"], "prompt_tokens": 935, "completion_tokens": 366, "duration": 12.224123477935791}
{"task_id": "HumanEval/61", "tests": ["assert correct_bracketing(\")\") == False", "assert correct_bracketing(\"((((()))))\") == True", "assert correct_bracketing(\")()(\") == False", "assert correct_bracketing(\")(()\") == False"], "prompt_tokens": 928, "completion_tokens": 369, "duration": 13.133450746536255}
{"task_id": "HumanEval/62", "tests": ["assert derivative([10]) == []", "assert derivative([5, 4, 3, 2, 1]) == [4, 6, 6, 4]", "assert derivative([1, 2, 3]) == [2, 6]", "assert derivative([-1, -2, -3, -4]) == [-2, -6, -12]"], "prompt_tokens": 998, "completion_tokens": 480, "duration": 33.84267616271973}
{"task_id": "HumanEval/63", "tests": ["assert fibfib(9) == 44", "assert fibfib(7) == 13", "assert fibfib(4) == 2", "assert fibfib(6) == 7"], "prompt_tokens": 1041, "completion_tokens": 339, "duration": 15.200634002685547}
{"task_id": "HumanEval/64", "tests": ["assert vowels_count(\"aeiouyAEIOUY\") == 12", "assert vowels_count(\"abcde\") == 2", "assert vowels_count(\"AEIOUY\") == 6", "assert vowels_count(\"BCDFGHJKLMNPQRSTVWXYZY\") == 1"], "prompt_tokens": 1011, "completion_tokens": 390, "duration": 16.062657594680786}
{"task_id": "HumanEval/65", "tests": ["assert circular_shift(12345, 2) == '45123'"], "prompt_tokens": 929, "completion_tokens": 455, "duration": 23.066853523254395}
{"task_id": "HumanEval/66", "tests": ["assert digitSum(\"aAaaaXa\") == 153", "assert digitSum(\"Z\") == 90", "assert digitSum(\"woArBld\") == 131", "assert digitSum(\"\") == 0"], "prompt_tokens": 972, "completion_tokens": 384, "duration": 14.693716287612915}
{"task_id": "HumanEval/67", "tests": ["assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95", "assert fruit_distribution(\"0 apples and 0 oranges\", 5) == 5", "assert fruit_distribution(\"1 apples and 0 oranges\", 2) == 1", "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19"], "prompt_tokens": 1195, "completion_tokens": 386, "duration": 22.33235502243042}
{"task_id": "HumanEval/68", "tests": ["assert pluck([2, 4, 6, 8]) == [2, 0]", "assert pluck([6, 4, 2, 8]) == [2, 2]", "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]", "assert pluck([11, 22, 33, 44, 2, 4]) == [2, 4]"], "prompt_tokens": 1427, "completion_tokens": 533, "duration": 18.629931926727295}
{"task_id": "HumanEval/69", "tests": ["assert search([2, 2]) == 2", "assert search([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 10", "assert search([1, 1, 1, 1]) == 1", "assert search([4, 1, 2, 2, 3, 1]) == 2"], "prompt_tokens": 1123, "completion_tokens": 549, "duration": 21.192474365234375}
{"task_id": "HumanEval/70", "tests": ["assert strange_sort_list([10, 9, 8, 7, 6]) == [6, 10, 7, 9, 8]", "assert strange_sort_list([7, 3, 5, 1, 9]) == [1, 9, 3, 7, 5]", "assert strange_sort_list([]) == []", "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]"], "prompt_tokens": 1058, "completion_tokens": 505, "duration": 35.74855351448059}
{"task_id": "HumanEval/71", "tests": ["assert triangle_area(10, 10, 10) == 43.30", "assert triangle_area(3, 4, 7) == -1", "assert triangle_area(3, 4, 5) == 6.00", "assert triangle_area(0, 0, 0) == -1"], "prompt_tokens": 1013, "completion_tokens": 554, "duration": 40.6825315952301}
{"task_id": "HumanEval/72", "tests": ["assert will_it_fly([1, 1, 1, 1], 4) == True", "assert will_it_fly([], 0) == True", "assert will_it_fly([1, 2, 2, 1], 10) == True", "assert will_it_fly([3], 5) == True"], "prompt_tokens": 1235, "completion_tokens": 536, "duration": 32.46407198905945}
{"task_id": "HumanEval/73", "tests": ["assert smallest_change([1]) == 0", "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1", "assert smallest_change([1, 2, 3, 2, 1]) == 0", "assert smallest_change([]) == 0"], "prompt_tokens": 1086, "completion_tokens": 491, "duration": 34.53563833236694}
{"task_id": "HumanEval/74", "tests": ["assert total_match(['hello', 'world'], ['hello', 'worlds']) == ['hello', 'world']", "assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']", "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']", "assert total_match(['a', 'b', 'c'], ['d', 'e']) == ['d', 'e']"], "prompt_tokens": 1190, "completion_tokens": 551, "duration": 43.85965275764465}
{"task_id": "HumanEval/75", "tests": ["assert is_multiply_prime(97) == False", "assert is_multiply_prime(30) == True", "assert is_multiply_prime(42) == True", "assert is_multiply_prime(60) == True"], "prompt_tokens": 901, "completion_tokens": 414, "duration": 19.97878408432007}
{"task_id": "HumanEval/76", "tests": ["assert is_simple_power(27, 3) == True", "assert is_simple_power(5, 3) == False"], "prompt_tokens": 1039, "completion_tokens": 533, "duration": 37.92147183418274}
{"task_id": "HumanEval/77", "tests": ["assert iscube(-125) == True", "assert iscube(8) == True", "assert iscube(216) == True", "assert iscube(2) == False"], "prompt_tokens": 959, "completion_tokens": 377, "duration": 30.2108051776886}
{"task_id": "HumanEval/78", "tests": ["assert hex_key(\"2020\") == 2", "assert hex_key(\"ABED1A33\") == 4", "assert hex_key(\"FFFF\") == 0", "assert hex_key(\"2B7D\") == 4"], "prompt_tokens": 1349, "completion_tokens": 395, "duration": 19.091028690338135}
{"task_id": "HumanEval/79", "tests": ["assert decimal_to_binary(64) == \"db1000000db\"", "assert decimal_to_binary(127) == \"db1111111db\"", "assert decimal_to_binary(1) == \"db1db\"", "assert decimal_to_binary(0) == \"db0db\""], "prompt_tokens": 1037, "completion_tokens": 386, "duration": 32.334413290023804}
{"task_id": "HumanEval/80", "tests": ["assert is_happy(\"aa\") == False", "assert is_happy(\"xyz\") == True", "assert is_happy(\"a\") == False", "assert is_happy(\"xyzxyz\") == True"], "prompt_tokens": 986, "completion_tokens": 368, "duration": 33.94340944290161}
{"task_id": "HumanEval/81", "tests": ["assert numerical_letter_grade([0.0, 3.9, 2.4, 1.6, 0.3]) == ['E', 'A', 'B-', 'C', 'D-']", "assert numerical_letter_grade([]) == []"], "prompt_tokens": 1389, "completion_tokens": 591, "duration": 31.86365580558777}
{"task_id": "HumanEval/82", "tests": ["assert prime_length('orange') == False", "assert prime_length('abcdefgh') == False", "assert prime_length('kittens') == True", "assert prime_length('ab') == True"], "prompt_tokens": 903, "completion_tokens": 323, "duration": 26.57585310935974}
{"task_id": "HumanEval/83", "tests": ["assert starts_one_ends(4) == 1710", "assert starts_one_ends(5) == 16200", "assert starts_one_ends(6) == 153900", "assert starts_one_ends(3) == 180"], "prompt_tokens": 838, "completion_tokens": 773, "duration": 29.571520566940308}
{"task_id": "HumanEval/84", "tests": ["assert solve(0) == \"0\"", "assert solve(147) == \"1100\""], "prompt_tokens": 1010, "completion_tokens": 390, "duration": 19.683756113052368}
{"task_id": "HumanEval/85", "tests": ["assert add([2, 4, 6, 8, 10]) == 12", "assert add([-2, -4, -6, -8]) == -4", "assert add([4, 2, 6, 7]) == 2"], "prompt_tokens": 891, "completion_tokens": 558, "duration": 19.25194025039673}
{"task_id": "HumanEval/86", "tests": ["assert anti_shuffle('multiple    spaces') == 'eilmpstu    acepss'", "assert anti_shuffle('') == ''", "assert anti_shuffle('123 456 789') == '123 456 789'", "assert anti_shuffle('A B C D E F G') == 'A B C D E F G'"], "prompt_tokens": 1028, "completion_tokens": 454, "duration": 21.898032903671265}
{"task_id": "HumanEval/87", "tests": ["assert get_row([], 1) == []", "assert get_row([[1,1,1], [2,2,2], [3,3,3]], 2) == [(1, 2), (1, 1), (1, 0)]"], "prompt_tokens": 1413, "completion_tokens": 770, "duration": 46.6712121963501}
{"task_id": "HumanEval/88", "tests": ["assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]", "assert sort_array([5]) == [5]"], "prompt_tokens": 1209, "completion_tokens": 587, "duration": 38.05166792869568}
{"task_id": "HumanEval/89", "tests": ["assert encrypt('asdfghjkl') == 'ewhjklnop'", "assert encrypt('et') == 'ix'", "assert encrypt('abc') == 'efg'", "assert encrypt('hi') == 'lm'"], "prompt_tokens": 967, "completion_tokens": 401, "duration": 37.72466588020325}
{"task_id": "HumanEval/90", "tests": ["assert next_smallest([5, 1, 4, 3, 2]) == 2", "assert next_smallest([2]) == None", "assert next_smallest([1, 1]) == None"], "prompt_tokens": 1017, "completion_tokens": 483, "duration": 25.767229557037354}
{"task_id": "HumanEval/91", "tests": ["assert is_bored(\"I am feeling bored today. What about you?\") == 1", "assert is_bored(\"I! I? I.\") == 3", "assert is_bored(\"Hello world\") == 0"], "prompt_tokens": 992, "completion_tokens": 453, "duration": 21.263280630111694}
{"task_id": "HumanEval/92", "tests": ["assert any_int(1, 2, 3) == False", "assert any_int(3, -2, 1) == True", "assert any_int(1, 1, 2) == True", "assert any_int(3.6, -2.2, 2) == False"], "prompt_tokens": 1037, "completion_tokens": 456, "duration": 25.738316774368286}
{"task_id": "HumanEval/93", "tests": ["assert encode('This is a message') == 'tHKS KS C MGSSCGG'", "assert encode('world') == 'WMRLD'"], "prompt_tokens": 978, "completion_tokens": 504, "duration": 23.71730899810791}
{"task_id": "HumanEval/94", "tests": ["assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11", "assert skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 11", "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10", "assert skjkasdkd([4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0"], "prompt_tokens": 1446, "completion_tokens": 737, "duration": 51.39041090011597}
{"task_id": "HumanEval/95", "tests": ["assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}) == True", "assert check_dict_case({\"ALLUPPER\":\"YES\", \"STILLUPPER\":\"YES\"}) == True", "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True", "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False"], "prompt_tokens": 1120, "completion_tokens": 461, "duration": 34.16857147216797}
{"task_id": "HumanEval/96", "tests": ["assert count_up_to(10) == [2, 3, 5, 7]", "assert count_up_to(1) == []", "assert count_up_to(22) == [2, 3, 5, 7, 11, 13, 17, 19]", "assert count_up_to(5) == [2, 3]"], "prompt_tokens": 1068, "completion_tokens": 463, "duration": 29.34868335723877}
{"task_id": "HumanEval/97", "tests": ["assert multiply(19, 28) == 72", "assert multiply(148, 412) == 16", "assert multiply(-9, -8) == 72", "assert multiply(14, -15) == 20"], "prompt_tokens": 947, "completion_tokens": 340, "duration": 17.873183727264404}
{"task_id": "HumanEval/98", "tests": ["assert count_upper('dBBE') == 0", "assert count_upper('12345') == 0", "assert count_upper('bCdEfGhI') == 1"], "prompt_tokens": 899, "completion_tokens": 464, "duration": 18.95650839805603}
{"task_id": "HumanEval/99", "tests": ["assert closest_integer(\"-0.1\") == -1", "assert closest_integer(\"15.3\") == 15", "assert closest_integer(\"10\") == 10", "assert closest_integer(\"-99.99\") == -100"], "prompt_tokens": 1061, "completion_tokens": 370, "duration": 13.501594543457031}
{"task_id": "HumanEval/100", "tests": ["assert make_a_pile(2) == [2, 4]", "assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]", "assert make_a_pile(5) == [5, 7, 9, 11, 13]", "assert make_a_pile(4) == [4, 6, 8, 10]"], "prompt_tokens": 1054, "completion_tokens": 451, "duration": 23.800690412521362}
{"task_id": "HumanEval/101", "tests": ["assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]", "assert words_string(\"Hello,world\") == [\"Hello\", \"world\"]", "assert words_string(\"Commas,without,spaces\") == [\"Commas\", \"without\", \"spaces\"]"], "prompt_tokens": 1034, "completion_tokens": 497, "duration": 31.830541372299194}
{"task_id": "HumanEval/102", "tests": ["assert choose_num(8, 11) == 10", "assert choose_num(5, 5) == -1", "assert choose_num(2, 2) == 2", "assert choose_num(12, 15) == 14"], "prompt_tokens": 943, "completion_tokens": 399, "duration": 16.27292776107788}
{"task_id": "HumanEval/103", "tests": ["assert rounded_avg(5, 5) == \"0b101\"", "assert rounded_avg(1, 5) == \"0b11\"", "assert rounded_avg(99, 100) == \"0b1100011\"", "assert rounded_avg(7, 5) == -1"], "prompt_tokens": 1043, "completion_tokens": 453, "duration": 21.674290895462036}
{"task_id": "HumanEval/104", "tests": ["assert unique_digits([9, 7, 5, 3, 1]) == [1, 3, 5, 7, 9]", "assert unique_digits([111, 222, 333, 444]) == [111, 333]", "assert unique_digits([]) == []", "assert unique_digits([2, 4, 6, 8]) == []"], "prompt_tokens": 987, "completion_tokens": 490, "duration": 16.271003007888794}
{"task_id": "HumanEval/105", "tests": ["assert by_length([10, 11, 12, 0, -2, -3]) == []", "assert by_length([3, 3, 3]) == [\"Three\", \"Three\", \"Three\"]", "assert by_length([1, -1, 55]) == [\"One\"]", "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]"], "prompt_tokens": 1368, "completion_tokens": 643, "duration": 28.616328716278076}
{"task_id": "HumanEval/106", "tests": ["assert f(5) == [1, 2, 6, 24, 15]", "assert f(1) == [1]", "assert f(4) == [1, 2, 6, 24]", "assert f(2) == [1, 2]"], "prompt_tokens": 1011, "completion_tokens": 501, "duration": 19.88394045829773}
{"task_id": "HumanEval/107", "tests": ["assert even_odd_palindrome(1) == (0, 1)", "assert even_odd_palindrome(3) == (1, 2)"], "prompt_tokens": 1185, "completion_tokens": 465, "duration": 40.16694474220276}
{"task_id": "HumanEval/108", "tests": ["assert count_nums([]) == 0", "assert count_nums([1, 1, 2]) == 3", "assert count_nums([-1, 2, -3, 4, -5, 6]) == 6"], "prompt_tokens": 1020, "completion_tokens": 593, "duration": 31.38369870185852}
{"task_id": "HumanEval/109", "tests": ["assert move_one_ball([]) == True", "assert move_one_ball([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == True", "assert move_one_ball([3, 4, 5, 1, 2]) == True", "assert move_one_ball([1]) == True"], "prompt_tokens": 1379, "completion_tokens": 487, "duration": 28.644706964492798}
{"task_id": "HumanEval/110", "tests": ["assert exchange([1], [1]) == \"NO\"", "assert exchange([2], [2]) == \"YES\"", "assert exchange([2, 4, 6], [2, 4, 6]) == \"YES\"", "assert exchange([1], [2]) == \"YES\""], "prompt_tokens": 1157, "completion_tokens": 468, "duration": 23.344266653060913}
{"task_id": "HumanEval/111", "tests": ["assert histogram('x y z x y z x y') == {'x': 3, 'y': 3}", "assert histogram('a b b a') == {'a': 2, 'b': 2}", "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}", "assert histogram('a b c d e f g h i') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1}"], "prompt_tokens": 1145, "completion_tokens": 636, "duration": 43.2285270690918}
{"task_id": "HumanEval/112", "tests": ["assert reverse_delete(\"teststring\", \"t\") == ('essring', False)", "assert reverse_delete(\"aabbcc\", \"abc\") == ('', True)", "assert reverse_delete(\"\", \"abc\") == ('', True)", "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)"], "prompt_tokens": 1088, "completion_tokens": 449, "duration": 14.055210828781128}
{"task_id": "HumanEval/113", "tests": ["assert odd_count(['2468', '13579']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 5n the str5ng 5 of the 5nput.\"]", "assert odd_count(['000', '111', '222']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\"]", "assert odd_count([]) == []", "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]"], "prompt_tokens": 1222, "completion_tokens": 691, "duration": 28.932466745376587}
{"task_id": "HumanEval/114", "tests": ["assert minSubArraySum([-1, 2, -3, 4, -5]) == -5", "assert minSubArraySum([-5]) == -5", "assert minSubArraySum([1]) == 1", "assert minSubArraySum([10, -2, 3, -1, 5, -6]) == -6"], "prompt_tokens": 954, "completion_tokens": 519, "duration": 16.83186388015747}
{"task_id": "HumanEval/115", "tests": ["assert max_fill([[1,1,0,0], [0,0,1,1]], 2) == 2", "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5", "assert max_fill([[1,0,1], [0,1,0], [1,0,1]], 1) == 4", "assert max_fill([[1,1,1,1], [1,1,1,1], [1,1,1,1]], 4) == 3"], "prompt_tokens": 1491, "completion_tokens": 674, "duration": 33.49455213546753}
{"task_id": "HumanEval/116", "tests": ["assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]", "assert sort_array([7, 8, 6, 5]) == [8, 5, 6, 7]"], "prompt_tokens": 1167, "completion_tokens": 787, "duration": 43.10779047012329}
{"task_id": "HumanEval/117", "tests": ["assert select_words(\"Hello world\", 4) == [\"world\"]", "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]", "assert select_words(\"\", 3) == []"], "prompt_tokens": 1121, "completion_tokens": 441, "duration": 31.43465781211853}
{"task_id": "HumanEval/118", "tests": ["assert get_closest_vowel(\"Programming\") == \"a\"", "assert get_closest_vowel(\"yogurt\") == \"u\"", "assert get_closest_vowel(\"bacon\") == \"o\"", "assert get_closest_vowel(\"sky\") == \"\""], "prompt_tokens": 1054, "completion_tokens": 395, "duration": 35.69478511810303}
{"task_id": "HumanEval/119", "tests": ["assert match_parens(['', '']) == 'Yes'", "assert match_parens([')', ')']) == 'No'", "assert match_parens([')(', ')(']) == 'No'", "assert match_parens(['(', '(()))']) == 'Yes'"], "prompt_tokens": 1095, "completion_tokens": 407, "duration": 22.11873745918274}
{"task_id": "HumanEval/120", "tests": ["assert maximum([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]", "assert maximum([0, 0, 0, 0], 4) == [0, 0, 0, 0]", "assert maximum([100, 200, 300, 400, 500], 0) == []"], "prompt_tokens": 1252, "completion_tokens": 587, "duration": 49.84504675865173}
{"task_id": "HumanEval/121", "tests": ["assert solution([1]) == 1", "assert solution([0]) == 0", "assert solution([0, 1, 2, 3, 4, 5]) == 0"], "prompt_tokens": 960, "completion_tokens": 547, "duration": 29.019737720489502}
{"task_id": "HumanEval/122", "tests": ["assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24", "assert add_elements([0, 0, 0, 0], 4) == 0", "assert add_elements([10, 20, 30, 40, 50], 3) == 60", "assert add_elements([1, 2, 3, 4, 5], 5) == 15"], "prompt_tokens": 1069, "completion_tokens": 550, "duration": 34.26702523231506}
{"task_id": "HumanEval/123", "tests": ["assert get_odd_collatz(1) == [1]", "assert get_odd_collatz(5) == [1, 5]"], "prompt_tokens": 1249, "completion_tokens": 511, "duration": 20.160181045532227}
{"task_id": "HumanEval/124", "tests": ["assert valid_date('00-00-0000') == False", "assert valid_date('12-31-1999') == True", "assert valid_date('07-22-1987') == True", "assert valid_date('11-31-2020') == False"], "prompt_tokens": 1285, "completion_tokens": 592, "duration": 34.47181963920593}
{"task_id": "HumanEval/125", "tests": ["assert split_words(\"Hello,world!,How,are,you?\") == [\"Hello\", \"world!\", \"How\", \"are\", \"you?\"]", "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]", "assert split_words(\"Hello world! How are you?\") == [\"Hello\", \"world!\", \"How\", \"are\", \"you?\"]", "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]"], "prompt_tokens": 1075, "completion_tokens": 465, "duration": 26.763481616973877}
{"task_id": "HumanEval/126", "tests": ["assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False", "assert is_sorted([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == False", "assert is_sorted([2, 4, 6, 8, 10]) == True"], "prompt_tokens": 1318, "completion_tokens": 630, "duration": 39.87614154815674}
{"task_id": "HumanEval/127", "tests": ["assert intersection((2, 3), (3, 4)) == \"NO\"", "assert intersection((5, 7), (7, 9)) == \"NO\"", "assert intersection((-1, 1), (0, 4)) == \"NO\""], "prompt_tokens": 1283, "completion_tokens": 534, "duration": 31.606532335281372}
{"task_id": "HumanEval/128", "tests": ["assert prod_signs([1, -1, 1, -1, 1]) == -5", "assert prod_signs([-1, 0, 1]) == 0", "assert prod_signs([1, 2, 3]) == 6", "assert prod_signs([-1, -2, -3]) == 6"], "prompt_tokens": 1021, "completion_tokens": 448, "duration": 18.91722059249878}
{"task_id": "HumanEval/129", "tests": ["assert minPath([[1, 3, 5], [2, 4, 6]], 5) == [1, 2, 1, 2, 1]", "assert minPath([[3, 2], [1, 4]], 2) == [1, 2]", "assert minPath([[10, 12, 11], [9, 8, 7], [6, 5, 4]], 4) == [4, 5, 4, 5]", "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]"], "prompt_tokens": 1649, "completion_tokens": 708, "duration": 42.82768106460571}
{"task_id": "HumanEval/130", "tests": ["assert tri(0) == [1]", "assert tri(1) == [1, 3]"], "prompt_tokens": 1227, "completion_tokens": 506, "duration": 35.96869349479675}
{"task_id": "HumanEval/131", "tests": ["assert digits(1111) == 1", "assert digits(13579) == 945", "assert digits(1) == 1", "assert digits(123456789) == 945"], "prompt_tokens": 885, "completion_tokens": 369, "duration": 16.52238154411316}
{"task_id": "HumanEval/132", "tests": ["assert is_nested('') == False", "assert is_nested('[[]]') == True", "assert is_nested('[[[[]]]]') == True", "assert is_nested('[[[]]]') == True"], "prompt_tokens": 1011, "completion_tokens": 373, "duration": 22.1413676738739}
{"task_id": "HumanEval/133", "tests": ["assert sum_squares([1.4, 4.2, 0]) == 29", "assert sum_squares([1, 2, 3]) == 14", "assert sum_squares([2.5, 2.5, 2.5]) == 27", "assert sum_squares([1, 3, 5, 7]) == 84"], "prompt_tokens": 1098, "completion_tokens": 531, "duration": 25.75099778175354}
{"task_id": "HumanEval/134", "tests": ["assert check_if_last_char_is_a_letter(\"apple pie\") == False", "assert check_if_last_char_is_a_letter(\"Hello World\") == False", "assert check_if_last_char_is_a_letter(\"a\") == True", "assert check_if_last_char_is_a_letter(\"12345\") == False"], "prompt_tokens": 1036, "completion_tokens": 395, "duration": 18.383352756500244}
{"task_id": "HumanEval/135", "tests": ["assert can_arrange([1, 3, 5, 7, 6, 8]) == 4", "assert can_arrange([2, 1]) == 1", "assert can_arrange([3, 5, 7, 8, 10]) == -1", "assert can_arrange([1, 2, 3]) == -1"], "prompt_tokens": 989, "completion_tokens": 485, "duration": 33.902602434158325}
{"task_id": "HumanEval/136", "tests": ["assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)", "assert largest_smallest_integers([0]) == (None, None)", "assert largest_smallest_integers([]) == (None, None)", "assert largest_smallest_integers([-5, -4, -3, 1, 2, 3]) == (-3, 1)"], "prompt_tokens": 1070, "completion_tokens": 486, "duration": 30.399945735931396}
{"task_id": "HumanEval/137", "tests": ["assert compare_one(-1, \"-2\") == -1", "assert compare_one(1, 2.5) == 2.5", "assert compare_one(0.1, \"0,2\") == \"0,2\""], "prompt_tokens": 1053, "completion_tokens": 559, "duration": 26.780109167099}
{"task_id": "HumanEval/138", "tests": ["assert is_equal_to_sum_even(100) == True", "assert is_equal_to_sum_even(32) == True", "assert is_equal_to_sum_even(10) == False"], "prompt_tokens": 905, "completion_tokens": 510, "duration": 28.375192165374756}
{"task_id": "HumanEval/139", "tests": ["assert special_factorial(1) == 1", "assert special_factorial(4) == 288", "assert special_factorial(2) == 2", "assert special_factorial(5) == 34560"], "prompt_tokens": 938, "completion_tokens": 367, "duration": 29.383516550064087}
{"task_id": "HumanEval/140", "tests": ["assert fix_spaces(\"Single space\") == \"Single_space\"", "assert fix_spaces(\"Example 1\") == \"Example_1\"", "assert fix_spaces(\"Example\") == \"Example\"", "assert fix_spaces(\"Example    with    multiple    spaces\") == \"Example-with-multiple-spaces\""], "prompt_tokens": 972, "completion_tokens": 388, "duration": 17.13224148750305}
{"task_id": "HumanEval/141", "tests": ["assert file_name_check(\"a..txt\") == 'No'", "assert file_name_check(\"1example.dll\") == 'No'", "assert file_name_check(\"Example.dll\") == 'Yes'", "assert file_name_check(\"99file.txt\") == 'No'"], "prompt_tokens": 1182, "completion_tokens": 576, "duration": 40.25029969215393}
{"task_id": "HumanEval/142", "tests": ["assert sum_squares([0, 0, 0, 0, 0, 0, 0]) == 0"], "prompt_tokens": 1150, "completion_tokens": 649, "duration": 34.73862433433533}
{"task_id": "HumanEval/143", "tests": ["assert words_in_sentence(\"a\") == \"\"", "assert words_in_sentence(\"I have a dream\") == \"a\"", "assert words_in_sentence(\"Python programming is fun\") == \"is\"", "assert words_in_sentence(\"This is a test\") == \"is\""], "prompt_tokens": 1048, "completion_tokens": 426, "duration": 29.304152727127075}
{"task_id": "HumanEval/144", "tests": ["assert simplify(\"100/200\", \"200/100\") == True", "assert simplify(\"2/3\", \"3/2\") == True", "assert simplify(\"1/5\", \"5/1\") == True", "assert simplify(\"1/2\", \"2/3\") == False"], "prompt_tokens": 1073, "completion_tokens": 442, "duration": 33.41693329811096}
{"task_id": "HumanEval/145", "tests": ["assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]", "assert order_by_points([]) == []", "assert order_by_points([10, 20, 30, 40]) == [10, 20, 30, 40]", "assert order_by_points([56, 65, 654, 456]) == [56, 65, 456, 654]"], "prompt_tokens": 1034, "completion_tokens": 520, "duration": 41.709319829940796}
{"task_id": "HumanEval/146", "tests": ["assert specialFilter([11, 13, 15, 17, 19, 21]) == 6", "assert specialFilter([10, 20, 30, 40, 50]) == 0", "assert specialFilter([12, 23, 34, 45, 56, 67, 78, 89, 90]) == 1", "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2"], "prompt_tokens": 1047, "completion_tokens": 476, "duration": 18.839393377304077}
{"task_id": "HumanEval/147", "tests": ["assert get_max_triples(4) == 0", "assert get_max_triples(10) == 19", "assert get_max_triples(3) == 0", "assert get_max_triples(7) == 5"], "prompt_tokens": 1081, "completion_tokens": 476, "duration": 15.903493404388428}
{"task_id": "HumanEval/148", "tests": ["assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "assert bf(\"Pluto\", \"Mars\") == ()", "assert bf(\"Jupiter\", \"Saturn\") == ()"], "prompt_tokens": 1211, "completion_tokens": 562, "duration": 28.458533763885498}
{"task_id": "HumanEval/149", "tests": ["assert sorted_list_sum([\"12345\", \"67890\", \"abcde\", \"fghij\", \"klmno\"]) == []", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"b\", \"bb\"]) == [\"aa\", \"bb\"]", "assert sorted_list_sum([]) == []"], "prompt_tokens": 1165, "completion_tokens": 564, "duration": 17.44347643852234}
{"task_id": "HumanEval/150", "tests": ["assert x_or_y(2, 10, 20) == 10", "assert x_or_y(13, -5, -10) == -5", "assert x_or_y(4, 10, 20) == 20", "assert x_or_y(15, 8, 5) == 5"], "prompt_tokens": 943, "completion_tokens": 454, "duration": 17.728983402252197}
{"task_id": "HumanEval/151", "tests": ["assert double_the_difference([0]) == 0", "assert double_the_difference([1, 2, 3, 4, 5]) == 35", "assert double_the_difference([-5, -3, -1, 0, 1, 2, 3]) == 10"], "prompt_tokens": 1061, "completion_tokens": 559, "duration": 30.77835202217102}
{"task_id": "HumanEval/152", "tests": ["assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]", "assert compare([5,5,5,5],[5,5,5,5]) == [0,0,0,0]", "assert compare([100,200,300],[100,199,301]) == [0,1,1]", "assert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]"], "prompt_tokens": 1297, "completion_tokens": 520, "duration": 24.127558946609497}
{"task_id": "HumanEval/153", "tests": [], "prompt_tokens": 1360, "completion_tokens": 595, "duration": 34.976906538009644}
{"task_id": "HumanEval/154", "tests": ["assert cycpattern_check(\"himenss\", \"simen\") == True", "assert cycpattern_check(\"whassup\", \"psus\") == False"], "prompt_tokens": 1023, "completion_tokens": 543, "duration": 24.118266105651855}
{"task_id": "HumanEval/155", "tests": ["assert even_odd_count(1111) == (0, 4)", "assert even_odd_count(123) == (1, 2)", "assert even_odd_count(-13579) == (0, 5)", "assert even_odd_count(2468) == (4, 0)"], "prompt_tokens": 892, "completion_tokens": 394, "duration": 13.57229995727539}
{"task_id": "HumanEval/156", "tests": ["assert int_to_mini_roman(106) == 'cvi'", "assert int_to_mini_roman(444) == 'cdxliv'", "assert int_to_mini_roman(999) == 'cmxcix'", "assert int_to_mini_roman(399) == 'cccxcix'"], "prompt_tokens": 964, "completion_tokens": 437, "duration": 31.765880346298218}
{"task_id": "HumanEval/157", "tests": ["assert right_angle_triangle(3, 4, 5) == True", "assert right_angle_triangle(1, 1, 1) == False", "assert right_angle_triangle(12, 5, 13) == True", "assert right_angle_triangle(0, 0, 0) == False"], "prompt_tokens": 983, "completion_tokens": 415, "duration": 13.384030818939209}
{"task_id": "HumanEval/158", "tests": ["assert find_max(['hello', 'world', 'python', 'developer']) == 'developer'", "assert find_max(['123', '321', '213']) == '123'", "assert find_max(['name', 'of', 'string']) == 'string'"], "prompt_tokens": 1016, "completion_tokens": 488, "duration": 32.707470655441284}
{"task_id": "HumanEval/159", "tests": ["assert eat(100, 200, 150) == [250, 0]", "assert eat(4, 8, 9) == [12, 1]", "assert eat(0, 1000, 500) == [500, 0]", "assert eat(0, 0, 0) == [0, 0]"], "prompt_tokens": 1330, "completion_tokens": 544, "duration": 20.81885004043579}
{"task_id": "HumanEval/160", "tests": ["assert do_algebra(['+'], [1, 2]) == 3", "assert do_algebra(['//', '*', '+', '-'], [10, 5, 2, 3, 1]) == 5", "assert do_algebra(['-', '+'], [5, 3, 2]) == 0"], "prompt_tokens": 1215, "completion_tokens": 582, "duration": 30.0552077293396}
{"task_id": "HumanEval/161", "tests": ["assert solve(\"\") == \"\"", "assert solve(\"Hello World!\") == \"hELLO wORLD!\"", "assert solve(\"12345a\") == \"12345A\"", "assert solve(\"aBcDeF\") == \"AbCdEf\""], "prompt_tokens": 964, "completion_tokens": 375, "duration": 15.430331707000732}
{"task_id": "HumanEval/162", "tests": ["assert string_to_md5('') is None", "assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'", "assert string_to_md5('Python3.8') == '9e107d9d372bb6826bd81d3542a419d6'", "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'"], "prompt_tokens": 957, "completion_tokens": 461, "duration": 26.933794260025024}
{"task_id": "HumanEval/163", "tests": ["assert generate_integers(1, 5) == [2, 4]", "assert generate_integers(0, 0) == []", "assert generate_integers(8, 2) == [2, 4, 6, 8]", "assert generate_integers(3, 3) == []"], "prompt_tokens": 975, "completion_tokens": 408, "duration": 19.007861614227295}
