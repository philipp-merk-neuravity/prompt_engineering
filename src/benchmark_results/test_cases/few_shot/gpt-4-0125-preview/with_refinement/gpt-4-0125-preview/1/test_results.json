[
    {
        "task_id": "HumanEval/0",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
                "assert has_close_elements([1.0, 2.0, 3.0, 4.0], 10.0) == True",
                "assert has_close_elements([1.0, 2.0, 3.0, 2.1], 0.15) == True",
                "assert has_close_elements([], 1.0) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('((()))') == ['((()))']",
                "assert separate_paren_groups('') == []",
                "assert separate_paren_groups('()((()))()') == ['()', '((()))', '()']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(5.0) == 0.0",
                "assert truncate_number(0.75) == 0.75"
            ],
            "failed_tests": [
                "assert truncate_number(10.01) == 0.01 (AssertionError: )",
                "assert truncate_number(1234.5678) == 0.5678 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([10, -5, -5]) == False",
                "assert below_zero([1, 2, 3]) == False",
                "assert below_zero([-1, 1]) == True",
                "assert below_zero([10, -15, 5]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
                "assert mean_absolute_deviation([-2.0, -2.0, 2.0, 2.0]) == 2.0",
                "assert mean_absolute_deviation([5.5, 5.5, 5.5, 5.5]) == 0.0"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([10.0, 12.0, 23.0, 23.0, 16.0]) == 5.36 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([-1, -2, -3], 0) == [-1, 0, -2, 0, -3]",
                "assert intersperse([0, 0, 0], -1) == [0, -1, 0, -1, 0]",
                "assert intersperse([1], 0) == [1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('()') == [1]",
                "assert parse_nested_parens('(()) (())') == [2, 2]",
                "assert parse_nested_parens('((())) (()) ()') == [3, 2, 1]"
            ],
            "failed_tests": [
                "assert parse_nested_parens('((( )))') == [3] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring([], 'a') == []",
                "assert filter_by_substring(['hello', 'world'], 'x') == []",
                "assert filter_by_substring(['123', '456', '789'], '1') == ['123']",
                "assert filter_by_substring(['mix', 'max', 'mux'], 'm') == ['mix', 'max', 'mux']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([1, 2, 3, 4]) == (10, 24)",
                "assert sum_product([-1, -2, -3, -4]) == (-10, 24)",
                "assert sum_product([2, 2, 2, 2]) == (8, 16)",
                "assert sum_product([1, -1, 1, -1]) == (0, 1)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([5, 3, 1, 2, 4]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([-1, -2, -3, -2, -1]) == [-1, -1, -1, -1, -1]",
                "assert rolling_max([10]) == [10]",
                "assert rolling_max([1, 3, 2, 5, 4, 6, 3]) == [1, 3, 3, 5, 5, 6, 6]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome(\"python\") == False",
                "assert make_palindrome(\"cat\") == \"catac\"",
                "assert make_palindrome(\"ab\") == \"aba\"",
                "assert is_palindrome(\"noon\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('00110011', '11001100') == '11111111'",
                "assert string_xor('000', '000') == '000'",
                "assert string_xor('1111', '1111') == '0000'",
                "assert string_xor('1', '1') == '0'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest(['a', 'bb', 'ccc']) == 'ccc'",
                "assert longest(['abc', 'defg', 'hijkl', 'mnopqr', 'stuvwx', 'yz']) == 'mnopqr'",
                "assert longest(['abc']) == 'abc'",
                "assert longest(['a', 'b', 'c']) == 'a'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(100, 10) == 10",
                "assert greatest_common_divisor(1, 1) == 1",
                "assert greatest_common_divisor(17, 17) == 17"
            ],
            "failed_tests": [
                "assert greatest_common_divisor(25, -15) == 5 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('') == []",
                "assert all_prefixes('a') == ['a']",
                "assert all_prefixes('xyz') == ['x', 'xy', 'xyz']",
                "assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(-1) == ''",
                "assert string_sequence(1) == '0 1'",
                "assert string_sequence(5) == '0 1 2 3 4 5'",
                "assert string_sequence(2) == '0 1 2'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('xyzXYZ') == 3",
                "assert count_distinct_characters('aaaaa') == 1",
                "assert count_distinct_characters('Jerry') == 4",
                "assert count_distinct_characters('1234567890') == 10"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o o o') == [4, 4, 4]",
                "assert parse_music('') == []",
                "assert parse_music('o|') == [2]",
                "assert parse_music('.|') == [1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('abcabcabc', 'a') == 3",
                "assert how_many_times('aaa', 'aaaa') == 0",
                "assert how_many_times('ababab', 'aba') == 2",
                "assert how_many_times('abcabcabc', 'd') == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('') == ''",
                "assert sort_numbers('nine zero one two') == 'zero one two nine'",
                "assert sort_numbers('nine eight seven six') == 'six seven eight nine'",
                "assert sort_numbers('three three three two') == 'two three three three'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([-1.0, -2.0, -2.1]) == (-2.1, -2.0)",
                "assert find_closest_elements([10.5, 10.1, 10.6]) == (10.5, 10.6)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([100.0, 200.0, 300.0, 400.0, 401.0]) == (400.0, 401.0)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([-1.0, -0.5, 0.0, 0.5, 1.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([2.0, 2.0, 3.0]) == [0.0, 0.0, 1.0]",
                "assert rescale_to_unit([-2.0, 0.0, 2.0]) == [0.0, 0.5, 1.0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_integers(['string', {}, [], (), None]) == []",
                "assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]",
                "assert filter_integers([0, -1, 100, 1000]) == [0, -1, 100, 1000]"
            ],
            "failed_tests": [
                "assert filter_integers([True, False, 'True', 'False']) == [] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('') == 0",
                "assert strlen(' ') == 1",
                "assert strlen('\\n\\t') == 2",
                "assert strlen('1234567890') == 10"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(37) == 1",
                "assert largest_divisor(100) == 50",
                "assert largest_divisor(15) == 5",
                "assert largest_divisor(16) == 8"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(49) == [7, 7]",
                "assert factorize(104) == [2, 2, 2, 13]",
                "assert factorize(2) == [2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1]",
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([]) == []",
                "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('Python 3.8') == 'pYTHON 3.8'",
                "assert flip_case('') == ''",
                "assert flip_case('123') == '123'",
                "assert flip_case('hELLO') == 'Hello'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate(['single']) == 'single'",
                "assert concatenate(['123', '456', '789']) == '123456789'",
                "assert concatenate(['', '']) == ''",
                "assert concatenate(['a', 'b', 'c', 'd', 'e']) == 'abcde'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix(['apple', 'banana', 'apricot', 'cherry'], 'ap') == ['apple', 'apricot']",
                "assert filter_by_prefix(['sun', 'moon', 'star'], '') == ['sun', 'moon', 'star']",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']",
                "assert filter_by_prefix(['sun', 'moon', 'star'], 'planet') == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]",
                "assert get_positive([]) == []",
                "assert get_positive([0, -1, -2, -3, -4]) == []",
                "assert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(101) == True",
                "assert is_prime(6) == False",
                "assert is_prime(97) == True",
                "assert is_prime(1) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert round(poly([-6, 11, -6, 1], 3.0), 2) == 0",
                "assert round(poly([-6, 11, -6, 1], 1.0), 2) == 0",
                "assert round(poly([1, 2], -0.5), 2) == 0"
            ],
            "failed_tests": [
                "assert round(poly([10, 0, -1], -10.0), 2) == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_third([3, 2, 1]) == [3, 2, 1]",
                "assert sort_third([1, 2, 3]) == [1, 2, 3]",
                "assert sort_third([1]) == [1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([1, 1, 1, 1, 1]) == [1]",
                "assert unique([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
                "assert unique([-1, -2, -2, -3, -4, -4, -5]) == [-5, -4, -3, -2, -1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123",
                "assert max_element([100]) == 100",
                "assert max_element([-1, 0, 1]) == 1",
                "assert max_element([-5, -3, -2, -1]) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(79) == 3",
                "assert fizz_buzz(1) == 0",
                "assert fizz_buzz(78) == 2"
            ],
            "failed_tests": [
                "assert fizz_buzz(100) == 4 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_even([]) == []",
                "assert sort_even([4, 1, 2, 3, 6, 5]) == [2, 1, 4, 3, 6, 5]",
                "assert sort_even([1, 2, 3]) == [1, 2, 3]",
                "assert sort_even([1]) == [1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode_cyclic(\"\") == \"\"",
                "assert encode_cyclic(\"a\") == \"a\"",
                "assert encode_cyclic(\"abcde\") == \"bcade\""
            ],
            "failed_tests": [
                "assert encode_cyclic(\"abcdefg\") == \"bcadefg\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(3) == 5",
                "assert prime_fib(4) == 13"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([10, -4, -6, 0]) == True",
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
                "assert triples_sum_to_zero([-3, 1, 2]) == True",
                "assert triples_sum_to_zero([1, 3, -2, 1]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(5) == 25",
                "assert car_race_collision(3) == 9",
                "assert car_race_collision(10) == 100",
                "assert car_race_collision(0) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([-1, -2, -3]) == [0, -1, -2]",
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([0, 0, 0]) == [1, 1, 1]",
                "assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
                "assert pairs_sum_to_zero([-1, -2, -3, -4]) == False",
                "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
                "assert pairs_sum_to_zero([-5, 5]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert change_base(9, 9) == '10'",
                "assert change_base(10, 5) == '20'",
                "assert change_base(7, 2) == '111'"
            ],
            "failed_tests": [
                "assert change_base(0, 2) == '0' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(1, 1) == 0.5",
                "assert triangle_area(10, 2) == 10.0",
                "assert triangle_area(0, 5) == 0.0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib4(7) == 14",
                "assert fib4(1) == 0"
            ],
            "failed_tests": [
                "assert fib4(8) == 26 (AssertionError: )",
                "assert fib4(9) == 48 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([3, 1, 2, 4, 5]) == 3",
                "assert median([0, 0, 0, 0]) == 0",
                "assert median([-5, -3, -1, 1, 3, 5]) == 0.0"
            ],
            "failed_tests": [
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('123456') == False",
                "assert is_palindrome('aaaaa') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(7, 13) == 11",
                "assert modp(3, 5) == 3",
                "assert modp(1101, 101) == 2",
                "assert modp(0, 101) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_shift(\"\") == \"\"",
                "assert decode_shift(\"cde\") == \"xyz\"",
                "assert encode_shift(\"abc\") == \"fgh\"",
                "assert decode_shift(\"fgh\") == \"abc\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('12345') == '12345'",
                "assert remove_vowels('aaBAA') == 'B'",
                "assert remove_vowels('Python Programming') == 'Pythn Prgrmmng'",
                "assert remove_vowels('zbcd') == 'zbcd'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 20, 4, 10], 5) == False",
                "assert below_threshold([10, 20, 30], 15) == False",
                "assert below_threshold([], 10) == True",
                "assert below_threshold([-1, -2, -3], 0) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(0, 0) == 0",
                "assert add(-5, 5) == 0",
                "assert add(5, 7) == 12",
                "assert add(2, 3) == 5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
                "assert same_chars('', '') == True",
                "assert same_chars('a', 'a') == True",
                "assert same_chars('abcd', 'dddddddabc') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(1) == 1",
                "assert fib(10) == 55",
                "assert fib(0) == 0",
                "assert fib(3) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"<<<>>>\") == True",
                "assert correct_bracketing(\"<<>><<>><<>>\") == True",
                "assert correct_bracketing(\"<<><>>\") == True",
                "assert correct_bracketing(\"<<>>><<\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 2, 4, 20]) == True",
                "assert monotonic([]) == True",
                "assert monotonic([4, 1, 0, -10]) == True",
                "assert monotonic([10, 10, 10, 10]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 1, 1, 2], [1, 2, 2, 3]) == [1, 2]",
                "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
                "assert common([1, 2, 3], [4, 5, 6]) == []",
                "assert common([], [1, 2, 3]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(2048) == 2",
                "assert largest_prime_factor(999) == 37",
                "assert largest_prime_factor(13195) == 29",
                "assert largest_prime_factor(100) == 5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(10) == 55",
                "assert sum_to_n(-5) == 0",
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(1) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\")\") == False",
                "assert correct_bracketing(\"((((()))))\") == True",
                "assert correct_bracketing(\")()(\") == False",
                "assert correct_bracketing(\")(()\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([10]) == []",
                "assert derivative([5, 4, 3, 2, 1]) == [4, 6, 6, 4]",
                "assert derivative([1, 2, 3]) == [2, 6]",
                "assert derivative([-1, -2, -3, -4]) == [-2, -6, -12]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(9) == 44",
                "assert fibfib(7) == 13",
                "assert fibfib(4) == 2",
                "assert fibfib(6) == 7"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"abcde\") == 2",
                "assert vowels_count(\"AEIOUY\") == 6",
                "assert vowels_count(\"BCDFGHJKLMNPQRSTVWXYZY\") == 1"
            ],
            "failed_tests": [
                "assert vowels_count(\"aeiouyAEIOUY\") == 12 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12345, 2) == '45123'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"aAaaaXa\") == 153",
                "assert digitSum(\"Z\") == 90",
                "assert digitSum(\"woArBld\") == 131",
                "assert digitSum(\"\") == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95",
                "assert fruit_distribution(\"0 apples and 0 oranges\", 5) == 5",
                "assert fruit_distribution(\"1 apples and 0 oranges\", 2) == 1",
                "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([2, 4, 6, 8]) == [2, 0]",
                "assert pluck([6, 4, 2, 8]) == [2, 2]",
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
                "assert pluck([11, 22, 33, 44, 2, 4]) == [2, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert search([2, 2]) == 2",
                "assert search([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 10",
                "assert search([1, 1, 1, 1]) == 1",
                "assert search([4, 1, 2, 2, 3, 1]) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([10, 9, 8, 7, 6]) == [6, 10, 7, 9, 8]",
                "assert strange_sort_list([7, 3, 5, 1, 9]) == [1, 9, 3, 7, 5]",
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(10, 10, 10) == 43.30",
                "assert triangle_area(3, 4, 7) == -1",
                "assert triangle_area(3, 4, 5) == 6.00",
                "assert triangle_area(0, 0, 0) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([1, 1, 1, 1], 4) == True",
                "assert will_it_fly([], 0) == True",
                "assert will_it_fly([1, 2, 2, 1], 10) == True",
                "assert will_it_fly([3], 5) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1]) == 0",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([1, 2, 3, 2, 1]) == 0",
                "assert smallest_change([]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match(['hello', 'world'], ['hello', 'worlds']) == ['hello', 'world']",
                "assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']",
                "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']",
                "assert total_match(['a', 'b', 'c'], ['d', 'e']) == ['d', 'e']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(97) == False",
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(42) == True"
            ],
            "failed_tests": [
                "assert is_multiply_prime(60) == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(27, 3) == True",
                "assert is_simple_power(5, 3) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(-125) == True",
                "assert iscube(8) == True",
                "assert iscube(216) == True",
                "assert iscube(2) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"2020\") == 2",
                "assert hex_key(\"ABED1A33\") == 4",
                "assert hex_key(\"FFFF\") == 0",
                "assert hex_key(\"2B7D\") == 4"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(64) == \"db1000000db\"",
                "assert decimal_to_binary(127) == \"db1111111db\"",
                "assert decimal_to_binary(1) == \"db1db\"",
                "assert decimal_to_binary(0) == \"db0db\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy(\"aa\") == False",
                "assert is_happy(\"xyz\") == True",
                "assert is_happy(\"a\") == False",
                "assert is_happy(\"xyzxyz\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([]) == []"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([0.0, 3.9, 2.4, 1.6, 0.3]) == ['E', 'A', 'B-', 'C', 'D-'] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('orange') == False",
                "assert prime_length('abcdefgh') == False",
                "assert prime_length('kittens') == True",
                "assert prime_length('ab') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert starts_one_ends(3) == 180"
            ],
            "failed_tests": [
                "assert starts_one_ends(4) == 1710 (AssertionError: )",
                "assert starts_one_ends(5) == 16200 (AssertionError: )",
                "assert starts_one_ends(6) == 153900 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(0) == \"0\"",
                "assert solve(147) == \"1100\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([2, 4, 6, 8, 10]) == 12",
                "assert add([4, 2, 6, 7]) == 2"
            ],
            "failed_tests": [
                "assert add([-2, -4, -6, -8]) == -4 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('') == ''",
                "assert anti_shuffle('123 456 789') == '123 456 789'",
                "assert anti_shuffle('A B C D E F G') == 'A B C D E F G'"
            ],
            "failed_tests": [
                "assert anti_shuffle('multiple    spaces') == 'eilmpstu    acepss' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([], 1) == []",
                "assert get_row([[1,1,1], [2,2,2], [3,3,3]], 2) == [(1, 2), (1, 1), (1, 0)]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([5]) == [5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('et') == 'ix'",
                "assert encrypt('abc') == 'efg'",
                "assert encrypt('hi') == 'lm'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([5, 1, 4, 3, 2]) == 2",
                "assert next_smallest([2]) == None",
                "assert next_smallest([1, 1]) == None"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"I am feeling bored today. What about you?\") == 1",
                "assert is_bored(\"Hello world\") == 0"
            ],
            "failed_tests": [
                "assert is_bored(\"I! I? I.\") == 3 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert any_int(3, -2, 1) == True",
                "assert any_int(1, 1, 2) == True",
                "assert any_int(3.6, -2.2, 2) == False"
            ],
            "failed_tests": [
                "assert any_int(1, 2, 3) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'"
            ],
            "failed_tests": [
                "assert encode('world') == 'WMRLD' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11",
                "assert skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 11",
                "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
                "assert skjkasdkd([4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}) == True",
                "assert check_dict_case({\"ALLUPPER\":\"YES\", \"STILLUPPER\":\"YES\"}) == True",
                "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
                "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(10) == [2, 3, 5, 7]",
                "assert count_up_to(1) == []",
                "assert count_up_to(22) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(5) == [2, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert multiply(19, 28) == 72",
                "assert multiply(148, 412) == 16",
                "assert multiply(14, -15) == 20"
            ],
            "failed_tests": [
                "assert multiply(-9, -8) == 72 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('dBBE') == 0",
                "assert count_upper('12345') == 0"
            ],
            "failed_tests": [
                "assert count_upper('bCdEfGhI') == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"15.3\") == 15",
                "assert closest_integer(\"10\") == 10",
                "assert closest_integer(\"-99.99\") == -100"
            ],
            "failed_tests": [
                "assert closest_integer(\"-0.1\") == -1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(2) == [2, 4]",
                "assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]",
                "assert make_a_pile(5) == [5, 7, 9, 11, 13]",
                "assert make_a_pile(4) == [4, 6, 8, 10]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
                "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]",
                "assert words_string(\"Hello,world\") == [\"Hello\", \"world\"]",
                "assert words_string(\"Commas,without,spaces\") == [\"Commas\", \"without\", \"spaces\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(8, 11) == 10",
                "assert choose_num(5, 5) == -1",
                "assert choose_num(2, 2) == 2",
                "assert choose_num(12, 15) == 14"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(5, 5) == \"0b101\"",
                "assert rounded_avg(1, 5) == \"0b11\"",
                "assert rounded_avg(7, 5) == -1"
            ],
            "failed_tests": [
                "assert rounded_avg(99, 100) == \"0b1100011\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([9, 7, 5, 3, 1]) == [1, 3, 5, 7, 9]",
                "assert unique_digits([111, 222, 333, 444]) == [111, 333]",
                "assert unique_digits([]) == []",
                "assert unique_digits([2, 4, 6, 8]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([10, 11, 12, 0, -2, -3]) == []",
                "assert by_length([3, 3, 3]) == [\"Three\", \"Three\", \"Three\"]",
                "assert by_length([1, -1, 55]) == [\"One\"]",
                "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(5) == [1, 2, 6, 24, 15]",
                "assert f(1) == [1]",
                "assert f(4) == [1, 2, 6, 24]",
                "assert f(2) == [1, 2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(1) == (0, 1)",
                "assert even_odd_palindrome(3) == (1, 2)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_nums([]) == 0",
                "assert count_nums([1, 1, 2]) == 3"
            ],
            "failed_tests": [
                "assert count_nums([-1, 2, -3, 4, -5, 6]) == 6 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([]) == True",
                "assert move_one_ball([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == True",
                "assert move_one_ball([3, 4, 5, 1, 2]) == True",
                "assert move_one_ball([1]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1], [1]) == \"NO\"",
                "assert exchange([2], [2]) == \"YES\"",
                "assert exchange([2, 4, 6], [2, 4, 6]) == \"YES\"",
                "assert exchange([1], [2]) == \"YES\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert histogram('x y z x y z x y') == {'x': 3, 'y': 3}",
                "assert histogram('a b b a') == {'a': 2, 'b': 2}",
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('a b c d e f g h i') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1}"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"teststring\", \"t\") == ('essring', False)",
                "assert reverse_delete(\"aabbcc\", \"abc\") == ('', True)",
                "assert reverse_delete(\"\", \"abc\") == ('', True)",
                "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['2468', '13579']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 5n the str5ng 5 of the 5nput.\"]",
                "assert odd_count(['000', '111', '222']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count([]) == []",
                "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([-1, 2, -3, 4, -5]) == -5",
                "assert minSubArraySum([-5]) == -5",
                "assert minSubArraySum([1]) == 1",
                "assert minSubArraySum([10, -2, 3, -1, 5, -6]) == -6"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[1,1,0,0], [0,0,1,1]], 2) == 2",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
                "assert max_fill([[1,1,1,1], [1,1,1,1], [1,1,1,1]], 4) == 3"
            ],
            "failed_tests": [
                "assert max_fill([[1,0,1], [0,1,0], [1,0,1]], 1) == 4 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([7, 8, 6, 5]) == [8, 5, 6, 7]"
            ],
            "failed_tests": [
                "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"Hello world\", 4) == [\"world\"]",
                "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
                "assert select_words(\"\", 3) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"yogurt\") == \"u\"",
                "assert get_closest_vowel(\"bacon\") == \"o\"",
                "assert get_closest_vowel(\"sky\") == \"\""
            ],
            "failed_tests": [
                "assert get_closest_vowel(\"Programming\") == \"a\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['', '']) == 'Yes'",
                "assert match_parens([')', ')']) == 'No'",
                "assert match_parens([')(', ')(']) == 'No'",
                "assert match_parens(['(', '(()))']) == 'Yes'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
                "assert maximum([0, 0, 0, 0], 4) == [0, 0, 0, 0]",
                "assert maximum([100, 200, 300, 400, 500], 0) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solution([1]) == 1",
                "assert solution([0]) == 0",
                "assert solution([0, 1, 2, 3, 4, 5]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
                "assert add_elements([0, 0, 0, 0], 4) == 0",
                "assert add_elements([10, 20, 30, 40, 50], 3) == 60",
                "assert add_elements([1, 2, 3, 4, 5], 5) == 15"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(1) == [1]",
                "assert get_odd_collatz(5) == [1, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('00-00-0000') == False",
                "assert valid_date('07-22-1987') == True",
                "assert valid_date('11-31-2020') == False"
            ],
            "failed_tests": [
                "assert valid_date('12-31-1999') == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"Hello,world!,How,are,you?\") == [\"Hello\", \"world!\", \"How\", \"are\", \"you?\"]",
                "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"Hello world! How are you?\") == [\"Hello\", \"world!\", \"How\", \"are\", \"you?\"]",
                "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False",
                "assert is_sorted([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == False",
                "assert is_sorted([2, 4, 6, 8, 10]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersection((2, 3), (3, 4)) == \"NO\"",
                "assert intersection((5, 7), (7, 9)) == \"NO\"",
                "assert intersection((-1, 1), (0, 4)) == \"NO\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([-1, 0, 1]) == 0",
                "assert prod_signs([1, 2, 3]) == 6"
            ],
            "failed_tests": [
                "assert prod_signs([1, -1, 1, -1, 1]) == -5 (AssertionError: )",
                "assert prod_signs([-1, -2, -3]) == 6 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1, 3, 5], [2, 4, 6]], 5) == [1, 2, 1, 2, 1]",
                "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]"
            ],
            "failed_tests": [
                "assert minPath([[3, 2], [1, 4]], 2) == [1, 2] (AssertionError: )",
                "assert minPath([[10, 12, 11], [9, 8, 7], [6, 5, 4]], 4) == [4, 5, 4, 5] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert tri(0) == [1]",
                "assert tri(1) == [1, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digits(1111) == 1",
                "assert digits(13579) == 945",
                "assert digits(1) == 1",
                "assert digits(123456789) == 945"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('') == False",
                "assert is_nested('[[]]') == True",
                "assert is_nested('[[[[]]]]') == True",
                "assert is_nested('[[[]]]') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1.4, 4.2, 0]) == 29",
                "assert sum_squares([1, 2, 3]) == 14",
                "assert sum_squares([2.5, 2.5, 2.5]) == 27",
                "assert sum_squares([1, 3, 5, 7]) == 84"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
                "assert check_if_last_char_is_a_letter(\"Hello World\") == False",
                "assert check_if_last_char_is_a_letter(\"a\") == True",
                "assert check_if_last_char_is_a_letter(\"12345\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1, 3, 5, 7, 6, 8]) == 4",
                "assert can_arrange([2, 1]) == 1",
                "assert can_arrange([3, 5, 7, 8, 10]) == -1",
                "assert can_arrange([1, 2, 3]) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
                "assert largest_smallest_integers([0]) == (None, None)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([-5, -4, -3, 1, 2, 3]) == (-3, 1)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(-1, \"-2\") == -1",
                "assert compare_one(1, 2.5) == 2.5",
                "assert compare_one(0.1, \"0,2\") == \"0,2\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(100) == True",
                "assert is_equal_to_sum_even(32) == True"
            ],
            "failed_tests": [
                "assert is_equal_to_sum_even(10) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(1) == 1",
                "assert special_factorial(4) == 288",
                "assert special_factorial(2) == 2",
                "assert special_factorial(5) == 34560"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"Single space\") == \"Single_space\"",
                "assert fix_spaces(\"Example 1\") == \"Example_1\"",
                "assert fix_spaces(\"Example\") == \"Example\"",
                "assert fix_spaces(\"Example    with    multiple    spaces\") == \"Example-with-multiple-spaces\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"a..txt\") == 'No'",
                "assert file_name_check(\"1example.dll\") == 'No'",
                "assert file_name_check(\"Example.dll\") == 'Yes'",
                "assert file_name_check(\"99file.txt\") == 'No'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([0, 0, 0, 0, 0, 0, 0]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"a\") == \"\"",
                "assert words_in_sentence(\"This is a test\") == \"is\""
            ],
            "failed_tests": [
                "assert words_in_sentence(\"I have a dream\") == \"a\" (AssertionError: )",
                "assert words_in_sentence(\"Python programming is fun\") == \"is\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"100/200\", \"200/100\") == True",
                "assert simplify(\"2/3\", \"3/2\") == True",
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"1/2\", \"2/3\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]",
                "assert order_by_points([]) == []",
                "assert order_by_points([10, 20, 30, 40]) == [10, 20, 30, 40]"
            ],
            "failed_tests": [
                "assert order_by_points([56, 65, 654, 456]) == [56, 65, 456, 654] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([10, 20, 30, 40, 50]) == 0",
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2"
            ],
            "failed_tests": [
                "assert specialFilter([11, 13, 15, 17, 19, 21]) == 6 (AssertionError: )",
                "assert specialFilter([12, 23, 34, 45, 56, 67, 78, 89, 90]) == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(3) == 0"
            ],
            "failed_tests": [
                "assert get_max_triples(4) == 0 (AssertionError: )",
                "assert get_max_triples(10) == 19 (AssertionError: )",
                "assert get_max_triples(7) == 5 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
                "assert bf(\"Pluto\", \"Mars\") == ()",
                "assert bf(\"Jupiter\", \"Saturn\") == ()"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([\"12345\", \"67890\", \"abcde\", \"fghij\", \"klmno\"]) == []",
                "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"b\", \"bb\"]) == [\"aa\", \"bb\"]",
                "assert sorted_list_sum([]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(2, 10, 20) == 10",
                "assert x_or_y(13, -5, -10) == -5",
                "assert x_or_y(4, 10, 20) == 20",
                "assert x_or_y(15, 8, 5) == 5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([0]) == 0",
                "assert double_the_difference([1, 2, 3, 4, 5]) == 35",
                "assert double_the_difference([-5, -3, -1, 0, 1, 2, 3]) == 10"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
                "assert compare([5,5,5,5],[5,5,5,5]) == [0,0,0,0]",
                "assert compare([100,200,300],[100,199,301]) == [0,1,1]",
                "assert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": true,
        "test_results": {
            "passed_tests": [],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"himenss\", \"simen\") == True",
                "assert cycpattern_check(\"whassup\", \"psus\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(1111) == (0, 4)",
                "assert even_odd_count(123) == (1, 2)",
                "assert even_odd_count(-13579) == (0, 5)",
                "assert even_odd_count(2468) == (4, 0)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(106) == 'cvi'",
                "assert int_to_mini_roman(444) == 'cdxliv'",
                "assert int_to_mini_roman(999) == 'cmxcix'",
                "assert int_to_mini_roman(399) == 'cccxcix'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(1, 1, 1) == False",
                "assert right_angle_triangle(12, 5, 13) == True"
            ],
            "failed_tests": [
                "assert right_angle_triangle(0, 0, 0) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_max(['hello', 'world', 'python', 'developer']) == 'developer'",
                "assert find_max(['123', '321', '213']) == '123'",
                "assert find_max(['name', 'of', 'string']) == 'string'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(100, 200, 150) == [250, 0]",
                "assert eat(4, 8, 9) == [12, 1]",
                "assert eat(0, 1000, 500) == [500, 0]",
                "assert eat(0, 0, 0) == [0, 0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['+'], [1, 2]) == 3"
            ],
            "failed_tests": [
                "assert do_algebra(['//', '*', '+', '-'], [10, 5, 2, 3, 1]) == 5 (AssertionError: )",
                "assert do_algebra(['-', '+'], [5, 3, 2]) == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"\") == \"\"",
                "assert solve(\"Hello World!\") == \"hELLO wORLD!\"",
                "assert solve(\"12345a\") == \"12345A\"",
                "assert solve(\"aBcDeF\") == \"AbCdEf\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('') is None",
                "assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'",
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'"
            ],
            "failed_tests": [
                "assert string_to_md5('Python3.8') == '9e107d9d372bb6826bd81d3542a419d6' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(1, 5) == [2, 4]",
                "assert generate_integers(0, 0) == []",
                "assert generate_integers(8, 2) == [2, 4, 6, 8]",
                "assert generate_integers(3, 3) == []"
            ],
            "failed_tests": []
        }
    }
]