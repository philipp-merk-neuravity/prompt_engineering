[
    {
        "task_id": "HumanEval/0",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([10, 20, 30, 40], 9.9) == False",
                "assert has_close_elements([1.0, 1.1, 2.5, 3.6], 0.15) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('') == []",
                "assert separate_paren_groups('((( ))) ((( )))') == ['((()))', '((()))']",
                "assert separate_paren_groups('((()))') == ['((()))']",
                "assert separate_paren_groups('(())(())') == ['(())', '(())']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(1.0) == 0.0"
            ],
            "failed_tests": [
                "assert truncate_number(1234.5678) == 0.5678 (AssertionError: )",
                "assert truncate_number(10.99) == 0.99 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([0, 0, 0, 0]) == False",
                "assert below_zero([5, -1, -1, -1, -1, -1]) == False",
                "assert below_zero([1, 2, 3]) == False",
                "assert below_zero([-1, 1, -1, 1, -1, 1]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([-2.0, -2.0, -2.0]) == 0.0",
                "assert mean_absolute_deviation([-1.0, 0.0, 1.0]) == 0.6666666666666666",
                "assert mean_absolute_deviation([0.0]) == 0.0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([1, 2], -1) == [1, -1, 2]",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
                "assert intersperse([-1, -2, -3], 1) == [-1, 1, -2, 1, -3]",
                "assert intersperse([1, 2, 3, 4], 0) == [1, 0, 2, 0, 3, 0, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('() () ()') == [1, 1, 1]",
                "assert parse_nested_parens('(()) (())') == [2, 2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']",
                "assert filter_by_substring(['hello', 'world'], 'x') == []",
                "assert filter_by_substring(['python', 'java', 'c++', 'javascript'], 'java') == ['java', 'javascript']",
                "assert filter_by_substring([], 'a') == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([0, 2, 3, 4]) == (9, 0)",
                "assert sum_product([0]) == (0, 0)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]",
                "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
                "assert rolling_max([5, 3, 1, 2, 4]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([10]) == [10]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_palindrome('race') == 'racecar'",
                "assert is_palindrome('aa') == True",
                "assert make_palindrome('racecar') == 'racecar'",
                "assert is_palindrome('a') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('', '') == ''",
                "assert string_xor('010', '110') == '100'",
                "assert string_xor('1', '1') == '0'",
                "assert string_xor('111', '111') == '000'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest(['', 'a', '']) == 'a'",
                "assert longest(['a', 'bb', 'ccc']) == 'ccc'",
                "assert longest(['', '', '']) == ''",
                "assert longest(['same', 'size', 'test']) == 'same'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(25, 15) == 5",
                "assert greatest_common_divisor(17, 17) == 17",
                "assert greatest_common_divisor(5, 0) == 5",
                "assert greatest_common_divisor(14, 49) == 7"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']",
                "assert all_prefixes('a') == ['a']",
                "assert all_prefixes('ab') == ['a', 'ab']",
                "assert all_prefixes('xyz') == ['x', 'xy', 'xyz']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(3) == '0 1 2 3'",
                "assert string_sequence(-1) == ''",
                "assert string_sequence(5) == '0 1 2 3 4 5'",
                "assert string_sequence(0) == '0'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('1234567890') == 10",
                "assert count_distinct_characters('AbCdEfG') == 7",
                "assert count_distinct_characters('') == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('.| .| .| .|') == [1, 1, 1, 1]",
                "assert parse_music('o| .| o o| .|') == [2, 1, 4, 2, 1]",
                "assert parse_music('') == []",
                "assert parse_music('o o o') == [4, 4, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('abcabcabc', 'bc') == 3",
                "assert how_many_times('aaa', 'aaaa') == 0",
                "assert how_many_times('123123123', '4') == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('three one five') == 'one three five'",
                "assert sort_numbers('zero two four six eight') == 'zero two four six eight'",
                "assert sort_numbers('nine eight seven six') == 'six seven eight nine'",
                "assert sort_numbers('one three two') == 'one two three'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([-5.5, -5.4]) == (-5.5, -5.4)",
                "assert find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.55]) == (0.5, 0.55)",
                "assert find_closest_elements([1.01, 1.02, 2.0, 3.0]) == (1.01, 1.02)",
                "assert find_closest_elements([10.5, 10.1, 10.6]) == (10.5, 10.6)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([2.0, 2.0, 3.0]) == [0.0, 0.0, 1.0]",
                "assert rescale_to_unit([10.0, 20.0]) == [0.0, 1.0]",
                "assert rescale_to_unit([-2.0, -1.0, 0.0, 1.0, 2.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([-5.0, 0.0, 5.0]) == [0.0, 0.5, 1.0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_integers([0, -1, 100, 1000]) == [0, -1, 100, 1000]",
                "assert filter_integers(['a', 3.14, 5]) == [5]",
                "assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('hello world') == 11",
                "assert strlen(' ') == 1",
                "assert strlen('abc') == 3",
                "assert strlen('') == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(2) == 1",
                "assert largest_divisor(15) == 5",
                "assert largest_divisor(50) == 25",
                "assert largest_divisor(120) == 60"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(25) == [5, 5]",
                "assert factorize(2) == [2]",
                "assert factorize(8) == [2, 2, 2]",
                "assert factorize(49) == [7, 7]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([10, 20, 20, 10, 30]) == [30]",
                "assert remove_duplicates([-1, -2, -2, -1, -3]) == [-3]",
                "assert remove_duplicates([]) == []",
                "assert remove_duplicates([5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('') == ''",
                "assert flip_case('Hello') == 'hELLO'",
                "assert flip_case('hELLO') == 'Hello'",
                "assert flip_case('12345') == '12345'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate(['a', 'b', 'c', 'd', 'e']) == 'abcde'",
                "assert concatenate([]) == ''",
                "assert concatenate(['123', '456', '789']) == '123456789'",
                "assert concatenate(['Hello', 'World']) == 'HelloWorld'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix(['123', '456', '1234'], '123') == ['123', '1234']",
                "assert filter_by_prefix(['apple', 'banana', 'apricot', 'cherry'], '') == ['apple', 'banana', 'apricot', 'cherry']",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']",
                "assert filter_by_prefix(['apple', 'banana', 'apricot', 'cherry'], 'a') == ['apple', 'apricot']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([1, 2, 3, 4]) == [1, 2, 3, 4]",
                "assert get_positive([-1, -2, -3, -4]) == []",
                "assert get_positive([0, 0, 0, 0]) == []",
                "assert get_positive([]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(11) == True",
                "assert is_prime(13441) == True",
                "assert is_prime(97) == True",
                "assert is_prime(-7) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert round(poly([1, -1, 1, -1, 1], 1), 2) == 1",
                "assert round(poly([3, -2, 1], 1), 2) == 2",
                "assert round(poly([-6, 11, -6, 1], 1.0), 2) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_third([10, 15, 20, 25, 30, 35, 40]) == [10, 15, 20, 25, 30, 35, 40]",
                "assert sort_third([3, 2, 1]) == [3, 2, 1]",
                "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([1, 2, 2, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
                "assert unique([]) == []",
                "assert unique([1]) == [1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([-5, -3, -2, -1]) == -1",
                "assert max_element([0, 0, 0, 0]) == 0",
                "assert max_element([1, 2, 3]) == 3",
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(79) == 3",
                "assert fizz_buzz(78) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_even([]) == []",
                "assert sort_even([1]) == [1]",
                "assert sort_even([1, 2, 3]) == [1, 2, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert decode_cyclic(encode_cyclic(\"a\")) == \"a\"",
                "assert decode_cyclic(encode_cyclic(\"ab\")) == \"ab\""
            ],
            "failed_tests": [
                "assert encode_cyclic(\"abcdefg\") == \"bcadefg\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(4) == 13",
                "assert prime_fib(5) == 89",
                "assert prime_fib(10) == 433494437",
                "assert prime_fib(9) == 514229"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([10, 22, -32]) == True",
                "assert triples_sum_to_zero([1]) == False",
                "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(50) == 2500",
                "assert car_race_collision(3) == 9",
                "assert car_race_collision(2) == 4",
                "assert car_race_collision(10) == 100"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([-1, -2, -3]) == [0, -1, -2]",
                "assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]",
                "assert incr_list([]) == []",
                "assert incr_list([100, 200, 300]) == [101, 201, 301]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
                "assert pairs_sum_to_zero([-5, -4, 0, 4, 5, 6]) == True",
                "assert pairs_sum_to_zero([-4, 4]) == True",
                "assert pairs_sum_to_zero([1]) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert change_base(8, 2) == '1000'",
                "assert change_base(9, 9) == '10'",
                "assert change_base(15, 4) == '33'"
            ],
            "failed_tests": [
                "assert change_base(0, 2) == '0' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(0, 5) == 0.0",
                "assert triangle_area(7, 0) == 0.0",
                "assert triangle_area(3, 6.5) == 9.75",
                "assert triangle_area(10, 2) == 10.0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib4(5) == 4",
                "assert fib4(4) == 2",
                "assert fib4(1) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([3, 1, 2, 4, 5]) == 3",
                "assert median([0]) == 0",
                "assert median([1]) == 1"
            ],
            "failed_tests": [
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('aaaaa') == True",
                "assert is_palindrome('123456') == False",
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('racecar') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(1101, 101) == 2",
                "assert modp(3, 11) == 8",
                "assert modp(2, 3) == 1",
                "assert modp(3, 5) == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decode_shift(\"mjqqt\") == \"hello\"",
                "assert encode_shift(\"hello\") == \"mjqqt\"",
                "assert decode_shift(\"\") == \"\"",
                "assert encode_shift(\"xyz\") == \"cde\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('zbcd') == 'zbcd'",
                "assert remove_vowels('12345') == '12345'",
                "assert remove_vowels('abcdef') == 'bcdf'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 4, 10], 100) == True",
                "assert below_threshold([10, 20, 30], 15) == False",
                "assert below_threshold([-1, -2, -3], 0) == True",
                "assert below_threshold([1, 2, 3], 4) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(5, 7) == 12",
                "assert add(-1, -1) == -2",
                "assert add(0, 0) == 0",
                "assert add(100, 200) == 300"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('abc', 'cba') == True",
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('', '') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(10) == 55",
                "assert fib(0) == 0",
                "assert fib(2) == 1",
                "assert fib(5) == 5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"<<>>\") == True",
                "assert correct_bracketing(\"><\") == False",
                "assert correct_bracketing(\"<<>><<>>><\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([4, 1, 0, -10]) == True",
                "assert monotonic([]) == True",
                "assert monotonic([1, 20, 4, 10]) == False",
                "assert monotonic([-1, -2, -3, -4]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 2, 3], [4, 5, 6]) == []",
                "assert common([1, 2, 2, 3], [2, 2, 3, 4]) == [2, 3]",
                "assert common([1.1, 2.2, 3.3], [2.2, 3.3, 4.4]) == [2.2, 3.3]",
                "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(13195) == 29",
                "assert largest_prime_factor(999) == 37",
                "assert largest_prime_factor(100) == 5",
                "assert largest_prime_factor(2048) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(10) == 55",
                "assert sum_to_n(30) == 465",
                "assert sum_to_n(100) == 5050",
                "assert sum_to_n(3) == 6"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"(()())\") == True",
                "assert correct_bracketing(\"()()()\") == True",
                "assert correct_bracketing(\"()\") == True",
                "assert correct_bracketing(\")(()\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([1, 2, 3]) == [2, 6]",
                "assert derivative([1, 0, 2, 0, 3]) == [0, 4, 0, 12]",
                "assert derivative([5, 3]) == [3]",
                "assert derivative([10]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(4) == 2",
                "assert fibfib(6) == 7",
                "assert fibfib(0) == 0",
                "assert fibfib(1) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"bcdfg\") == 0"
            ],
            "failed_tests": [
                "assert vowels_count(\"PYTHONY\") == 1 (AssertionError: )",
                "assert vowels_count(\"\") == 0 (IndexError: string index out of range)"
            ]
        }
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(987654321, 10) == \"123456789\"",
                "assert circular_shift(12345, 5) == \"12345\"",
                "assert circular_shift(0, 5) == \"0\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"aAaaaXa\") == 153",
                "assert digitSum(\"woArBld\") == 131",
                "assert digitSum(\"abAB\") == 131",
                "assert digitSum(\"Z\") == 90"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19",
                "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
                "assert fruit_distribution(\"10 apples and 10 oranges\", 30) == 10",
                "assert fruit_distribution(\"0 apples and 0 oranges\", 5) == 5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([11, 22, 33, 44, 55, 2, 4]) == [2, 5]",
                "assert pluck([1, 2, 3]) == [2, 1]",
                "assert pluck([2, 4, 6, 8]) == [2, 0]",
                "assert pluck([0]) == [0, 0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert search([1, 1, 1, 1]) == 1",
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4",
                "assert search([4, 1, 2, 2, 3, 1]) == 2"
            ],
            "failed_tests": [
                "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([2, 1]) == [1, 2]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([10, 1, 7, 3]) == [1, 10, 3, 7]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(8, 15, 17) == round(60.00, 2)",
                "assert triangle_area(10, 10, 10) == round(43.30, 2)",
                "assert triangle_area(3, 4, 6) == round(5.33, 2)",
                "assert triangle_area(3, 4, 5) == 6.00"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([], 0) == True",
                "assert will_it_fly([10], 10) == True",
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([1, 2, 2], 10) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1, 1, 1, 1, 1]) == 0",
                "assert smallest_change([5, 4, 3, 2, 1]) == 2",
                "assert smallest_change([1, 2]) == 1",
                "assert smallest_change([1, 2, 3, 4, 5]) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match([], []) == []",
                "assert total_match(['a', 'b', 'c'], ['d', 'e']) == ['d', 'e']",
                "assert total_match(['equal', 'length'], ['equal', 'length']) == ['equal', 'length']",
                "assert total_match(['more', 'chars'], ['less']) == ['less']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(2*3*11) == True",
                "assert is_multiply_prime(7) == False",
                "assert is_multiply_prime(1) == False",
                "assert is_multiply_prime(97) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(2, 2) == True",
                "assert is_simple_power(27, 3) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(-1) == True",
                "assert iscube(216) == True",
                "assert iscube(27) == True",
                "assert iscube(2) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"AB\") == 1",
                "assert hex_key(\"123456789ABCDEF0\") == 6",
                "assert hex_key(\"\") == 0",
                "assert hex_key(\"89\") == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(32) == \"db100000db\"",
                "assert decimal_to_binary(255) == \"db11111111db\"",
                "assert decimal_to_binary(2) == \"db10db\"",
                "assert decimal_to_binary(15) == \"db1111db\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy(\"xyz\") == True",
                "assert is_happy(\"aabbc\") == False",
                "assert is_happy(\"aa\") == False",
                "assert is_happy(\"abcd\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert numerical_letter_grade([4.0, 3.8, 3.5, 3.2, 3.0]) == ['A+', 'A', 'A-', 'B+', 'B+'] (AssertionError: )",
                "assert numerical_letter_grade([4.0, 0.0, 2.7, 3.3, 1.0]) == ['A+', 'E', 'B', 'A-', 'D+'] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('abcdefg') == True",
                "assert prime_length('Hello') == True",
                "assert prime_length('abcdefgh') == False",
                "assert prime_length('kittens') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert starts_one_ends(10) == 1999990000 (AssertionError: )",
                "assert starts_one_ends(5) == 46000 (AssertionError: )",
                "assert starts_one_ends(2) == 19 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(1000) == \"1\"",
                "assert solve(0) == \"0\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([1, 3, 5, 7, 9]) == 0",
                "assert add([2, 4, 6, 8, 10]) == 12"
            ],
            "failed_tests": [
                "assert add([1, 2, 3, 4, 5, 6]) == 6 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('123 456 789') == '123 456 789'",
                "assert anti_shuffle('A B C D E F G') == 'A B C D E F G'",
                "assert anti_shuffle('') == ''"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([[5,4,3,2,1], [0,0,0], [1,2,3,4,5]], 5) == [(0, 0), (2, 4)]",
                "assert get_row([], 1) == []",
                "assert get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
                "assert get_row([[1,1,1], [2,2,2], [3,3,3]], 2) == [(1, 2), (1, 1), (1, 0)]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
                "assert sort_array([1, 3, 2]) == [1, 2, 3]",
                "assert sort_array([10, 20]) == [20, 10]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encrypt('y') == 'c'",
                "assert encrypt('xyz') == 'bcd'",
                "assert encrypt('et') == 'ix'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([2]) == None",
                "assert next_smallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2",
                "assert next_smallest([1, 2, 3, 4, 5]) == 2",
                "assert next_smallest([2, 3, 4, 5, 1]) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"\") == 0",
                "assert is_bored(\"I'm not sure. Is it raining? I think I left my umbrella.\") == 1",
                "assert is_bored(\"Hello world\") == 0"
            ],
            "failed_tests": [
                "assert is_bored(\"I. I. I. I.\") == 4 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(0, 0, 0) == True",
                "assert any_int(3, 2, 2) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'",
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'"
            ],
            "failed_tests": [
                "assert encode('A') == 'C' (AssertionError: )",
                "assert encode('ZOO') == 'bqq' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([83, 89, 97, 101, 103, 107, 109, 113]) == 5",
                "assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13"
            ],
            "failed_tests": [
                "assert skjkasdkd([0, 1, 4, 6, 8, 10]) == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"ALLUPPERCASE\":\"YES\", \"STILLUPPERCASE\":\"YES\"}) == True",
                "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False",
                "assert check_dict_case({\"alllowercase\":\"yes\", \"stilllowercase\":\"yes\"}) == True",
                "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(1) == []",
                "assert count_up_to(2) == []",
                "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(5) == [2, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(148, 412) == 16",
                "assert multiply(111, 111) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('AEIOU') == 3",
                "assert count_upper('aBCdEf') == 1",
                "assert count_upper('12345') == 0"
            ],
            "failed_tests": [
                "assert count_upper('ABECEDARIO') == 2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"-14.5\") == -15",
                "assert closest_integer(\"10\") == 10",
                "assert closest_integer(\"99.99\") == 100"
            ],
            "failed_tests": [
                "assert closest_integer(\"-0.1\") == -1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]",
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(2) == [2, 4]",
                "assert make_a_pile(4) == [4, 6, 8, 10]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"1, 2, 3, 4, 5\") == [\"1\", \"2\", \"3\", \"4\", \"5\"]",
                "assert words_string(\"Apple, Banana, Cherry\") == [\"Apple\", \"Banana\", \"Cherry\"]",
                "assert words_string(\"\") == []",
                "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(5, 5) == -1",
                "assert choose_num(10, 10) == 10",
                "assert choose_num(4, 4) == 4",
                "assert choose_num(14, 14) == 14"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(20, 33) == \"0b11010\"",
                "assert rounded_avg(10, 20) == \"0b1111\"",
                "assert rounded_avg(1, 1) == \"0b1\"",
                "assert rounded_avg(50, 50) == \"0b110010\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([123, 555, 777]) == [555, 777]",
                "assert unique_digits([13579, 135, 931]) == [135, 931, 13579]",
                "assert unique_digits([152, 323, 1422, 10]) == []",
                "assert unique_digits([2, 4, 6, 8]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([]) == []",
                "assert by_length([9]) == [\"Nine\"]",
                "assert by_length([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]",
                "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(1) == [1]",
                "assert f(7) == [1, 2, 6, 24, 15, 720, 28]",
                "assert f(5) == [1, 2, 6, 24, 15]",
                "assert f(0) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(2) == (1, 1)",
                "assert even_odd_palindrome(12) == (4, 6)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_nums([10, -101, 99, 1]) == 3",
                "assert count_nums([1, 1, 2]) == 3",
                "assert count_nums([0, 0, 0]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([5, 1, 2, 3, 4]) == True",
                "assert move_one_ball([1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == False",
                "assert move_one_ball([2, 3, 4, 5, 1]) == True",
                "assert move_one_ball([3, 5, 4, 1, 2]) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([2, 4, 6], [1, 3, 5]) == \"YES\"",
                "assert exchange([1, 1, 1], [2, 2, 2]) == \"YES\"",
                "assert exchange([2, 2, 2], [1, 1, 1]) == \"YES\"",
                "assert exchange([1, 3, 5], [1, 3, 5]) == \"NO\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c d e f g h i') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1}",
                "assert histogram('c c c c c') == {'c': 5}",
                "assert histogram('x y z x y z x y') == {'x': 3, 'y': 3}",
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)",
                "assert reverse_delete(\"abcba\", \"fgh\") == ('abcba', True)",
                "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['3', '11111111']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
                "assert odd_count(['', '12345', '67890']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]",
                "assert odd_count(['0']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['2468', '13579']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 5n the str5ng 5 of the 5nput.\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([0, -2, 3, -1, 2]) == -2",
                "assert minSubArraySum([-5]) == -5",
                "assert minSubArraySum([-1, 2, -3, 4]) == -3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
                "assert max_fill([[1,0,1], [0,1,0], [1,0,1]], 1) == 5",
                "assert max_fill([[1,1,1], [1,1,1]], 3) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] (AssertionError: )",
                "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"\", 3) == []",
                "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]",
                "assert select_words(\"simple white space\", 2) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"bcdfghjklmnpqrstvwxyz\") == \"\"",
                "assert get_closest_vowel(\"yogurt\") == \"u\"",
                "assert get_closest_vowel(\"rhythm\") == \"\"",
                "assert get_closest_vowel(\"AEIOU\") == \"\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['(', ')']) == 'Yes'",
                "assert match_parens(['', '']) == 'Yes'",
                "assert match_parens(['(()', '())']) == 'Yes'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([-1000, 1000, 0], 2) == [0, 1000]",
                "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
                "assert maximum([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
                "assert maximum([-1, -2, -3, -4, -5], 2) == [-2, -1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solution([11]) == 11",
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add_elements([9], 1) == 9",
                "assert add_elements([-1, -2, -3, -4], 4) == -10",
                "assert add_elements([1, 2, 3, 4, 5], 3) == 6",
                "assert add_elements([0, 0, 0, 0], 4) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(5) == [1, 5]",
                "assert get_odd_collatz(6) == [1, 3, 5]",
                "assert get_odd_collatz(2) == [1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('') == False",
                "assert valid_date('02-29-2020') == True",
                "assert valid_date('04-31-2020') == False"
            ],
            "failed_tests": [
                "assert valid_date('12-31-1999') == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"abcdef\") == 3",
                "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True",
                "assert is_sorted([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == False",
                "assert is_sorted([1, 2, 2, 2, 3, 4]) == False",
                "assert is_sorted([1, 1, 1, 1, 1, 1, 1]) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert intersection((1, 2), (2, 3)) == \"NO\"",
                "assert intersection((3, 3), (3, 3)) == \"NO\""
            ],
            "failed_tests": [
                "assert intersection((-10, -5), (-7, -3)) == \"NO\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([]) == None",
                "assert prod_signs([1]) == 1",
                "assert prod_signs([-1, 0, 1]) == 0",
                "assert prod_signs([0, 0, 0]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]",
                "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]"
            ],
            "failed_tests": [
                "assert minPath([[7, 6, 5], [4, 3, 2], [1, 9, 8]], 5) == [1, 2, 3, 2, 1] (AssertionError: )",
                "assert minPath([[10, 12, 11], [9, 8, 7], [6, 5, 4]], 4) == [4, 5, 4, 5] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert tri(2) == [1, 3, 2]",
                "assert tri(0) == [1]",
                "assert tri(1) == [1, 3]",
                "assert tri(3) == [1, 3, 2, 8]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digits(1111111) == 1",
                "assert digits(2) == 0",
                "assert digits(2222222) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('][') == False",
                "assert is_nested('[][]') == False",
                "assert is_nested('[[]]') == True",
                "assert is_nested('[[][]]') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([0, 0, 0]) == 0",
                "assert sum_squares([]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\" \") == False",
                "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
                "assert check_if_last_char_is_a_letter(\"a\") == True",
                "assert check_if_last_char_is_a_letter(\"apple pi e\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1, 2, 3]) == -1",
                "assert can_arrange([1]) == -1",
                "assert can_arrange([2, 3, 5, 7, 11, 13, 12]) == 6"
            ],
            "failed_tests": [
                "assert can_arrange([5, 4, 3, 2, 1]) == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([-1, 0, 1]) == (-1, 1)",
                "assert largest_smallest_integers([-10, -20, 30, 40]) == (-10, 30)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([-1, -2, -3, -4]) == (-1, None)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(\"0\", 0) == None",
                "assert compare_one(\"5,1\", \"6\") == \"6\"",
                "assert compare_one(\"-1\", -2) == \"-1\"",
                "assert compare_one(\"3,5\", 2) == \"3,5\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(32) == True",
                "assert is_equal_to_sum_even(20) == True",
                "assert is_equal_to_sum_even(8) == True",
                "assert is_equal_to_sum_even(28) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(2) == 2",
                "assert special_factorial(1) == 1",
                "assert special_factorial(3) == 12",
                "assert special_factorial(5) == 34560"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"Example    with    multiple    spaces\") == \"Example-with-multiple-spaces\"",
                "assert fix_spaces(\" Example 2\") == \"_Example_2\"",
                "assert fix_spaces(\" \") == \"_\""
            ],
            "failed_tests": [
                "assert fix_spaces(\"  Leading and trailing  \") == \"_Leading_and_trailing_\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"Example2.dll\") == 'Yes'",
                "assert file_name_check(\"exampletxt\") == 'No'",
                "assert file_name_check(\"file-name.dll\") == 'Yes'"
            ],
            "failed_tests": [
                "assert file_name_check(\"file123name.txt\") == 'No' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"This is a test\") == \"is\"",
                "assert words_in_sentence(\" \") == \"\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"10/1\", \"1/10\") == True",
                "assert simplify(\"5/2\", \"2/5\") == True",
                "assert simplify(\"11/13\", \"13/11\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([101, 202, 303, 404, 505]) == 3",
                "assert specialFilter([10, 20, 30, 40, 50]) == 0"
            ],
            "failed_tests": [
                "assert specialFilter([11, 13, 15, 17, 19, 21]) == 6 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(3) == 0",
                "assert get_max_triples(1) == 0"
            ],
            "failed_tests": [
                "assert get_max_triples(4) == 0 (AssertionError: )",
                "assert get_max_triples(10) == 19 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
                "assert bf(\"Pluto\", \"Mars\") == ()"
            ],
            "failed_tests": [
                "assert bf(\"Earth\", \"Mars\") == (\"Venus\",) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"b\", \"bb\"]) == [\"aa\", \"bb\"]",
                "assert sorted_list_sum([]) == []"
            ],
            "failed_tests": [
                "assert sorted_list_sum([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"ffffff\"]) == [\"bb\", \"dddd\"] (AssertionError: )",
                "assert sorted_list_sum([\"odd\", \"even\", \"one\", \"two\", \"three\"]) == [\"one\", \"two\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(15, 8, 5) == 5",
                "assert x_or_y(9, 7, 8) == 8",
                "assert x_or_y(4, 0, 1) == 1",
                "assert x_or_y(13, 5, 6) == 5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([1, 3, 2, 0]) == 10",
                "assert double_the_difference([1.5, 2.5, 3.5]) == 0",
                "assert double_the_difference([-3, -5, -7]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([3, 6, 9], [3, 7, 8]) == [0, 1, 1]",
                "assert compare([], []) == []",
                "assert compare([1, 1, 1, 1], [2, 2, 2, 2]) == [1, 1, 1, 1]",
                "assert compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('File', ['Read', 'Write', 'Execute']) == 'File.Read'",
                "assert Strongest_Extension('Data', ['Loader', 'ANALYZER', 'visual']) == 'Data.ANALYZER'",
                "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
                "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"whassup\", \"psus\") == False",
                "assert cycpattern_check(\"hello\", \"ell\") == True"
            ],
            "failed_tests": [
                "assert cycpattern_check(\"nopattern\", \"patternno\") == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(-0) == (1, 0)",
                "assert even_odd_count(24680) == (5, 0)",
                "assert even_odd_count(12345) == (2, 3)",
                "assert even_odd_count(-1357) == (0, 4)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(1000) == 'm'",
                "assert int_to_mini_roman(999) == 'cmxcix'",
                "assert int_to_mini_roman(9) == 'ix'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(2, 2, 2) == False",
                "assert right_angle_triangle(3, 4, 5) == True"
            ],
            "failed_tests": [
                "assert right_angle_triangle(0, 0, 0) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"a\", \"b\", \"c\", \"d\"]) == \"a\"",
                "assert find_max([\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]) == \"abc\"",
                "assert find_max([\"\"]) == \"\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(0, 0, 0) == [0, 0]",
                "assert eat(2, 11, 5) == [7, 0]",
                "assert eat(1, 10, 10) == [11, 0]",
                "assert eat(5, 6, 10) == [11, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['**', '//'], [2, 4, 16]) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"\") == \"\"",
                "assert solve(\"ab\") == \"AB\"",
                "assert solve(\"123aBc\") == \"123AbC\"",
                "assert solve(\"1234\") == \"4321\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'",
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('') is None"
            ],
            "failed_tests": [
                "assert string_to_md5('Python 3.8') == 'b2f5ff47436671b6e533d8dc3614845d' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(1, 5) == [2, 4]",
                "assert generate_integers(2, 8) == [2, 4, 6, 8]"
            ],
            "failed_tests": [
                "assert generate_integers(0, 4) == [0, 2, 4] (AssertionError: )"
            ]
        }
    }
]