{"task_id": "HumanEval/0", "tests": ["assert has_close_elements([0.1, 0.2, 0.4], 0.15) == True", "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False", "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True"], "prompt_tokens": 1069, "completion_tokens": 646, "duration": 29.529200792312622}
{"task_id": "HumanEval/1", "tests": ["assert separate_paren_groups('((())())(()(()))') == ['((())())', '(()(()))']", "assert separate_paren_groups('()') == ['()']", "assert separate_paren_groups('') == []", "assert separate_paren_groups('()((()))()') == ['()', '((()))', '()']"], "prompt_tokens": 998, "completion_tokens": 411, "duration": 19.101990222930908}
{"task_id": "HumanEval/2", "tests": ["assert truncate_number(1234.5678) == 0.5678", "assert truncate_number(100.001) == 0.001", "assert truncate_number(1.0) == 0.0", "assert truncate_number(0.01) == 0.01"], "prompt_tokens": 932, "completion_tokens": 352, "duration": 22.449352025985718}
{"task_id": "HumanEval/3", "tests": ["assert below_zero([1, 2, 3]) == False", "assert below_zero([-1, 1, -1, 1, -1, 1]) == True", "assert below_zero([100, -50, 25, -75]) == True"], "prompt_tokens": 1022, "completion_tokens": 492, "duration": 26.65839910507202}
{"task_id": "HumanEval/4", "tests": ["assert mean_absolute_deviation([10.0, 12.0, 23.0, 23.0, 16.0]) == 5.36", "assert mean_absolute_deviation([1.0, 1.0, 1.0, 1.0]) == 0.0", "assert mean_absolute_deviation([-2.0, -2.0, 2.0, 2.0]) == 2.0", "assert mean_absolute_deviation([0.0]) == 0.0"], "prompt_tokens": 1051, "completion_tokens": 538, "duration": 25.365700721740723}
{"task_id": "HumanEval/5", "tests": ["assert intersperse([1, 2, 3, 4, 5], 100) == [1, 100, 2, 100, 3, 100, 4, 100, 5]", "assert intersperse([1], 0) == [1]", "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]", "assert intersperse([], 4) == []"], "prompt_tokens": 989, "completion_tokens": 481, "duration": 27.993075847625732}
{"task_id": "HumanEval/6", "tests": ["assert parse_nested_parens('()') == [1]", "assert parse_nested_parens('((()())())') == [3]", "assert parse_nested_parens('(()) (())') == [2, 2]", "assert parse_nested_parens('() () ()') == [1, 1, 1]"], "prompt_tokens": 995, "completion_tokens": 416, "duration": 23.25139570236206}
{"task_id": "HumanEval/7", "tests": ["assert filter_by_substring(['mix', 'max', 'mux'], 'm') == ['mix', 'max', 'mux']", "assert filter_by_substring(['AAA', 'BBB', 'CCC'], 'a') == []", "assert filter_by_substring([], 'a') == []", "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']"], "prompt_tokens": 980, "completion_tokens": 517, "duration": 21.509201526641846}
{"task_id": "HumanEval/8", "tests": ["assert sum_product([1, 2, 3, 4]) == (10, 24)", "assert sum_product([]) == (0, 1)", "assert sum_product([0, 2, 3, 4]) == (9, 0)", "assert sum_product([-1, -2, -3, -4]) == (-10, 24)"], "prompt_tokens": 1001, "completion_tokens": 472, "duration": 26.603418111801147}
{"task_id": "HumanEval/9", "tests": ["assert rolling_max([1]) == [1]", "assert rolling_max([10, 5, 20, 5]) == [10, 10, 20, 20]", "assert rolling_max([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]", "assert rolling_max([]) == []"], "prompt_tokens": 982, "completion_tokens": 500, "duration": 28.432709455490112}
{"task_id": "HumanEval/10", "tests": ["assert make_palindrome(\"madam\") == \"madam\"", "assert make_palindrome(\"level\") == \"level\"", "assert is_palindrome(\"noon\") == True", "assert make_palindrome(\"a\") == \"a\""], "prompt_tokens": 1032, "completion_tokens": 419, "duration": 23.90836262702942}
{"task_id": "HumanEval/11", "tests": ["assert string_xor('0000', '0000') == '0000'", "assert string_xor('0011', '1100') == '1111'", "assert string_xor('1111', '1111') == '0000'", "assert string_xor('111', '000') == '111'"], "prompt_tokens": 916, "completion_tokens": 388, "duration": 28.465898752212524}
{"task_id": "HumanEval/12", "tests": ["assert longest(['a', 'bb', 'ccc']) == 'ccc'", "assert longest(['short', 'longer', 'longest', 'longer']) == 'longest'", "assert longest(['hello', 'world', 'python', 'code']) == 'python'", "assert longest(['one', 'two', 'three', 'four', 'five']) == 'three'"], "prompt_tokens": 983, "completion_tokens": 406, "duration": 20.464160203933716}
{"task_id": "HumanEval/13", "tests": ["assert greatest_common_divisor(14, 49) == 7", "assert greatest_common_divisor(25, 15) == 5", "assert greatest_common_divisor(-25, 15) == 5", "assert greatest_common_divisor(5, 0) == 5"], "prompt_tokens": 903, "completion_tokens": 489, "duration": 23.512275218963623}
{"task_id": "HumanEval/14", "tests": ["assert all_prefixes('abc') == ['a', 'ab', 'abc']", "assert all_prefixes('') == []", "assert all_prefixes('ab') == ['a', 'ab']", "assert all_prefixes('a') == ['a']"], "prompt_tokens": 871, "completion_tokens": 354, "duration": 18.337676763534546}
{"task_id": "HumanEval/15", "tests": ["assert string_sequence(0) == '0'", "assert string_sequence(3) == '0 1 2 3'", "assert string_sequence(5) == '0 1 2 3 4 5'", "assert string_sequence(1) == '0 1'"], "prompt_tokens": 897, "completion_tokens": 392, "duration": 22.863734483718872}
{"task_id": "HumanEval/16", "tests": ["assert count_distinct_characters('AaBbCcDdEeFf') == 6", "assert count_distinct_characters('1234567890') == 10", "assert count_distinct_characters('aaaaa') == 1", "assert count_distinct_characters('Jerry') == 4"], "prompt_tokens": 905, "completion_tokens": 417, "duration": 28.51557207107544}
{"task_id": "HumanEval/17", "tests": ["assert parse_music('o o o') == [4, 4, 4]", "assert parse_music('o .| o| .| o') == [4, 1, 2, 1, 4]", "assert parse_music('o') == [4]", "assert parse_music('o| .| o o| .|') == [2, 1, 4, 2, 1]"], "prompt_tokens": 1134, "completion_tokens": 531, "duration": 31.04764747619629}
{"task_id": "HumanEval/18", "tests": ["assert how_many_times('abcabcabc', 'd') == 0", "assert how_many_times('aaa', 'aaaa') == 0", "assert how_many_times('abcabcabc', 'abc') == 3", "assert how_many_times('aaabaaa', 'aa') == 4"], "prompt_tokens": 941, "completion_tokens": 451, "duration": 22.734113216400146}
{"task_id": "HumanEval/19", "tests": ["assert sort_numbers('zero two four six') == 'zero two four six'", "assert sort_numbers('') == ''", "assert sort_numbers('four four four four') == 'four four four four'", "assert sort_numbers('nine one five two') == 'one two five nine'"], "prompt_tokens": 968, "completion_tokens": 343, "duration": 24.034899711608887}
{"task_id": "HumanEval/20", "tests": ["assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)", "assert find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.55]) == (0.5, 0.55)"], "prompt_tokens": 1204, "completion_tokens": 730, "duration": 56.8775897026062}
{"task_id": "HumanEval/21", "tests": ["assert rescale_to_unit([-1.0, 1.0, 0.0]) == [0.0, 1.0, 0.5]", "assert rescale_to_unit([-2.0, 0.0, 2.0]) == [0.0, 0.5, 1.0]"], "prompt_tokens": 1103, "completion_tokens": 649, "duration": 30.900917530059814}
{"task_id": "HumanEval/22", "tests": ["assert filter_integers(['string', {}, None, 100, -50]) == [100, -50]", "assert filter_integers([1.0, 2.0, 3.0]) == []", "assert filter_integers([0, 1.1, 2.2, 3]) == [0, 3]", "assert filter_integers([True, False, 'True', 'False']) == []"], "prompt_tokens": 973, "completion_tokens": 428, "duration": 20.60644292831421}
{"task_id": "HumanEval/23", "tests": ["assert strlen('') == 0", "assert strlen('hello world') == 11", "assert strlen('1234567890') == 10", "assert strlen(' ') == 1"], "prompt_tokens": 827, "completion_tokens": 317, "duration": 12.818023681640625}
{"task_id": "HumanEval/24", "tests": ["assert largest_divisor(2) == 1", "assert largest_divisor(15) == 5", "assert largest_divisor(17) == 1"], "prompt_tokens": 851, "completion_tokens": 319, "duration": 12.65822172164917}
{"task_id": "HumanEval/25", "tests": ["assert factorize(2) == [2]", "assert factorize(91) == [7, 13]", "assert factorize(12) == [2, 2, 3]", "assert factorize(9) == [3, 3]"], "prompt_tokens": 1007, "completion_tokens": 373, "duration": 20.207237720489502}
{"task_id": "HumanEval/26", "tests": ["assert remove_duplicates([10, 20, 20, 30, 40, 40, 40]) == [10, 30]", "assert remove_duplicates([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]", "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]", "assert remove_duplicates([]) == []"], "prompt_tokens": 971, "completion_tokens": 454, "duration": 32.494805097579956}
{"task_id": "HumanEval/27", "tests": ["assert flip_case('Hello') == 'hELLO'", "assert flip_case('123') == '123'", "assert flip_case('hELLO') == 'Hello'", "assert flip_case('Python 3.8') == 'pYTHON 3.8'"], "prompt_tokens": 853, "completion_tokens": 338, "duration": 20.10834240913391}
{"task_id": "HumanEval/28", "tests": ["assert concatenate(['', ' ']) == ' '", "assert concatenate(['-', '+', '=']) == '-+='", "assert concatenate(['single']) == 'single'", "assert concatenate(['a', 'b', 'c']) == 'abc'"], "prompt_tokens": 863, "completion_tokens": 321, "duration": 14.884412288665771}
{"task_id": "HumanEval/29", "tests": ["assert filter_by_prefix(['123', '234', '345'], '1') == ['123']", "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']"], "prompt_tokens": 969, "completion_tokens": 519, "duration": 24.624268531799316}
{"task_id": "HumanEval/30", "tests": ["assert get_positive([-1, -2, -3, -4]) == []", "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]", "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]", "assert get_positive([]) == []"], "prompt_tokens": 1039, "completion_tokens": 460, "duration": 31.510365962982178}
{"task_id": "HumanEval/31", "tests": ["assert is_prime(4) == False", "assert is_prime(97) == True", "assert is_prime(61) == True", "assert is_prime(1) == False"], "prompt_tokens": 937, "completion_tokens": 351, "duration": 31.296396255493164}
{"task_id": "HumanEval/32", "tests": ["assert round(poly([3, -5, 2], 1.0), 2) == 0", "assert round(poly([1, 2], -0.5), 2) == 0", "assert round(poly([-2, 4, -2, 1], -1.0), 2) == 0", "assert round(poly([2, 0, -1], 2.0), 2) == 0"], "prompt_tokens": 1317, "completion_tokens": 500, "duration": 32.26214528083801}
{"task_id": "HumanEval/33", "tests": ["assert sort_third([]) == []", "assert sort_third([3, 2, 1]) == [3, 2, 1]"], "prompt_tokens": 1148, "completion_tokens": 850, "duration": 56.13186001777649}
{"task_id": "HumanEval/34", "tests": ["assert unique([1, 2, 2, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]", "assert unique([]) == []", "assert unique([-1, -2, -2, -3, -4, -4, -4, -5]) == [-5, -4, -3, -2, -1]", "assert unique([1, 1, 1, 1, 1, 1]) == [1]"], "prompt_tokens": 963, "completion_tokens": 506, "duration": 26.90647292137146}
{"task_id": "HumanEval/35", "tests": ["assert max_element([-1, 0, 1]) == 1", "assert max_element([0, 0, 0, 0]) == 0", "assert max_element([100]) == 100", "assert max_element([1, 2, 3]) == 3"], "prompt_tokens": 928, "completion_tokens": 383, "duration": 22.736428022384644}
{"task_id": "HumanEval/36", "tests": ["assert fizz_buzz(79) == 3", "assert fizz_buzz(50) == 0"], "prompt_tokens": 905, "completion_tokens": 386, "duration": 18.631080150604248}
{"task_id": "HumanEval/37", "tests": ["assert sort_even([1, 2, 3]) == [1, 2, 3]", "assert sort_even([4, 1, 2, 3, 6, 5]) == [2, 1, 4, 3, 6, 5]", "assert sort_even([7]) == [7]", "assert sort_even([8, 11, 6, 9, 4]) == [4, 11, 6, 9, 8]"], "prompt_tokens": 1055, "completion_tokens": 546, "duration": 32.44707798957825}
{"task_id": "HumanEval/38", "tests": ["assert encode_cyclic(\"abcde\") == \"bcade\"", "assert decode_cyclic(encode_cyclic(\"a\")) == \"a\"", "assert decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"", "assert encode_cyclic(\"abcdef\") == \"bcadef\""], "prompt_tokens": 1075, "completion_tokens": 531, "duration": 32.638237953186035}
{"task_id": "HumanEval/39", "tests": ["assert prime_fib(2) == 3", "assert prime_fib(1) == 2"], "prompt_tokens": 944, "completion_tokens": 375, "duration": 21.659586429595947}
{"task_id": "HumanEval/40", "tests": ["assert triples_sum_to_zero([-1, -1, 2]) == True", "assert triples_sum_to_zero([10, 22, 5, -17, -15]) == False", "assert triples_sum_to_zero([1, 2, 3, 7]) == False", "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True"], "prompt_tokens": 1107, "completion_tokens": 478, "duration": 22.200241088867188}
{"task_id": "HumanEval/41", "tests": ["assert car_race_collision(1) == 1", "assert car_race_collision(0) == 0", "assert car_race_collision(3) == 9", "assert car_race_collision(2) == 4"], "prompt_tokens": 1049, "completion_tokens": 317, "duration": 13.984735488891602}
{"task_id": "HumanEval/42", "tests": ["assert incr_list([-1, -2, -3]) == [0, -1, -2]", "assert incr_list([0, 0, 0]) == [1, 1, 1]", "assert incr_list([100, 200, 300]) == [101, 201, 301]", "assert incr_list([1, 2, 3]) == [2, 3, 4]"], "prompt_tokens": 1007, "completion_tokens": 418, "duration": 31.089497089385986}
{"task_id": "HumanEval/43", "tests": ["assert pairs_sum_to_zero([1, 3, -2, 1]) == False", "assert pairs_sum_to_zero([]) == False", "assert pairs_sum_to_zero([1, 2, 3, 7]) == False"], "prompt_tokens": 1087, "completion_tokens": 435, "duration": 25.315879583358765}
{"task_id": "HumanEval/44", "tests": ["assert change_base(2, 2) == '10'", "assert change_base(7, 2) == '111'", "assert change_base(1, 2) == '1'"], "prompt_tokens": 937, "completion_tokens": 388, "duration": 20.419185638427734}
{"task_id": "HumanEval/45", "tests": ["assert triangle_area(5, 3) == 7.5", "assert triangle_area(4.5, 2.2) == 4.95", "assert triangle_area(0, 5) == 0.0", "assert triangle_area(1, 1) == 0.5"], "prompt_tokens": 859, "completion_tokens": 361, "duration": 22.89102029800415}
{"task_id": "HumanEval/46", "tests": ["assert fib4(8) == 26", "assert fib4(3) == 0", "assert fib4(7) == 14"], "prompt_tokens": 1085, "completion_tokens": 391, "duration": 23.906638622283936}
{"task_id": "HumanEval/47", "tests": ["assert median([-5, -4, -3, -2, -1]) == -3", "assert median([1]) == 1", "assert median([1, 2, 3, 4, 5, 6]) == 3.5", "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0"], "prompt_tokens": 936, "completion_tokens": 430, "duration": 18.939979553222656}
{"task_id": "HumanEval/48", "tests": ["assert is_palindrome('aba') == True", "assert is_palindrome('') == True", "assert is_palindrome('racecar') == True"], "prompt_tokens": 886, "completion_tokens": 407, "duration": 23.73400855064392}
{"task_id": "HumanEval/49", "tests": ["assert modp(2, 3) == 1", "assert modp(1, 1) == 0", "assert modp(100, 101) == 1"], "prompt_tokens": 965, "completion_tokens": 502, "duration": 28.52302646636963}
{"task_id": "HumanEval/50", "tests": ["assert encode_shift(\"abcxyz\") == \"fghcde\"", "assert decode_shift(\"fgh\") == \"abc\"", "assert encode_shift(\"xyz\") == \"cde\"", "assert decode_shift(\"\") == \"\""], "prompt_tokens": 925, "completion_tokens": 482, "duration": 22.50759196281433}
{"task_id": "HumanEval/51", "tests": ["assert remove_vowels('AEIOUaeiou') == ''", "assert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'", "assert remove_vowels('aaaaa') == ''", "assert remove_vowels('aaBAA') == 'B'"], "prompt_tokens": 1008, "completion_tokens": 419, "duration": 18.789055347442627}
{"task_id": "HumanEval/52", "tests": ["assert below_threshold([1, 2, 3], 4) == True", "assert below_threshold([1, 20, 4, 10], 5) == False", "assert below_threshold([1, 2, 4, 10], 100) == True", "assert below_threshold([5], 5) == False"], "prompt_tokens": 933, "completion_tokens": 401, "duration": 17.565041065216064}
{"task_id": "HumanEval/53", "tests": ["assert add(0, 0) == 0", "assert add(2, 3) == 5", "assert add(5, 7) == 12", "assert add(-1, -1) == -2"], "prompt_tokens": 857, "completion_tokens": 327, "duration": 18.702999353408813}
{"task_id": "HumanEval/54", "tests": ["assert same_chars('abcd', 'dddddddabce') == False", "assert same_chars('abcd', 'dddddddabc') == True", "assert same_chars('', '') == True", "assert same_chars('eabcd', 'dddddddabc') == False"], "prompt_tokens": 1035, "completion_tokens": 403, "duration": 22.238641262054443}
{"task_id": "HumanEval/55", "tests": ["assert fib(0) == 0", "assert fib(10) == 55", "assert fib(8) == 21", "assert fib(5) == 5"], "prompt_tokens": 843, "completion_tokens": 290, "duration": 15.755829334259033}
{"task_id": "HumanEval/56", "tests": ["assert correct_bracketing('<') == False", "assert correct_bracketing('') == True", "assert correct_bracketing('<<>>><') == False"], "prompt_tokens": 933, "completion_tokens": 384, "duration": 23.940128803253174}
{"task_id": "HumanEval/57", "tests": ["assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([1]) == True", "assert monotonic([]) == True"], "prompt_tokens": 930, "completion_tokens": 408, "duration": 23.273706912994385}
{"task_id": "HumanEval/58", "tests": ["assert common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]", "assert common([1, 1, 1, 2], [1, 2, 2, 3]) == [1, 2]", "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([1, 2, 3], [4, 5, 6]) == []"], "prompt_tokens": 1070, "completion_tokens": 548, "duration": 31.43805480003357}
{"task_id": "HumanEval/59", "tests": ["assert largest_prime_factor(6936) == 17", "assert largest_prime_factor(600851475143) == 6857", "assert largest_prime_factor(49) == 7", "assert largest_prime_factor(100) == 5"], "prompt_tokens": 878, "completion_tokens": 300, "duration": 18.304153203964233}
{"task_id": "HumanEval/60", "tests": ["assert sum_to_n(2) == 3", "assert sum_to_n(5) == 15", "assert sum_to_n(20) == 210", "assert sum_to_n(3) == 6"], "prompt_tokens": 935, "completion_tokens": 367, "duration": 20.04539656639099}
{"task_id": "HumanEval/61", "tests": ["assert correct_bracketing('()()()') == True", "assert correct_bracketing(')(()') == False", "assert correct_bracketing('(()())') == True", "assert correct_bracketing('(()') == False"], "prompt_tokens": 929, "completion_tokens": 365, "duration": 18.545783519744873}
{"task_id": "HumanEval/62", "tests": ["assert derivative([0]) == []", "assert derivative([-1, -2, -3, -4]) == [-2, -6, -12]", "assert derivative([5, 4, 3, 2, 1]) == [4, 6, 6, 4]"], "prompt_tokens": 998, "completion_tokens": 448, "duration": 26.040854692459106}
{"task_id": "HumanEval/63", "tests": ["assert fibfib(0) == 0", "assert fibfib(3) == 1", "assert fibfib(9) == 44", "assert fibfib(10) == 81"], "prompt_tokens": 1041, "completion_tokens": 387, "duration": 19.272981643676758}
{"task_id": "HumanEval/64", "tests": ["assert vowels_count(\"AEIOUY\") == 6", "assert vowels_count(\"aeiouy\") == 6", "assert vowels_count(\"AEIOU\") == 5"], "prompt_tokens": 1002, "completion_tokens": 423, "duration": 29.541258811950684}
{"task_id": "HumanEval/65", "tests": ["assert circular_shift(12345, 5) == \"12345\"", "assert circular_shift(987654321, 9) == \"987654321\"", "assert circular_shift(12345, 2) == \"45123\"", "assert circular_shift(1, 1) == \"1\""], "prompt_tokens": 927, "completion_tokens": 406, "duration": 23.41752600669861}
{"task_id": "HumanEval/66", "tests": ["assert digitSum(\"\") == 0", "assert digitSum(\"woArBld\") == 131", "assert digitSum(\"123\") == 0"], "prompt_tokens": 968, "completion_tokens": 414, "duration": 19.243549346923828}
{"task_id": "HumanEval/67", "tests": ["assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95", "assert fruit_distribution(\"1 apples and 0 oranges\", 2) == 1", "assert fruit_distribution(\"10 apples and 10 oranges\", 30) == 10", "assert fruit_distribution(\"0 apples and 0 oranges\", 5) == 5"], "prompt_tokens": 1195, "completion_tokens": 404, "duration": 22.873475074768066}
{"task_id": "HumanEval/68", "tests": ["assert pluck([11, 22, 33, 44, 55, 2]) == [2, 5]", "assert pluck([1, 3, 5, 7]) == []", "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]", "assert pluck([2, 4, 6, 8]) == [2, 0]"], "prompt_tokens": 1422, "completion_tokens": 502, "duration": 28.079261302947998}
{"task_id": "HumanEval/69", "tests": ["assert search([1, 1]) == 1", "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10]) == -1", "assert search([3, 3, 3]) == 3", "assert search([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 10"], "prompt_tokens": 1147, "completion_tokens": 576, "duration": 26.60734272003174}
{"task_id": "HumanEval/70", "tests": ["assert strange_sort_list([1]) == [1]", "assert strange_sort_list([10, 1, 7, 3]) == [1, 10, 3, 7]", "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]"], "prompt_tokens": 1049, "completion_tokens": 497, "duration": 24.157301425933838}
{"task_id": "HumanEval/71", "tests": ["assert triangle_area(8, 15, 17) == round(60.00, 2)", "assert triangle_area(1, 2, 10) == -1", "assert triangle_area(3, 4, 7) == -1"], "prompt_tokens": 1021, "completion_tokens": 534, "duration": 28.291167736053467}
{"task_id": "HumanEval/72", "tests": ["assert will_it_fly([3], 5) == True", "assert will_it_fly([], 0) == True", "assert will_it_fly([10], 10) == True", "assert will_it_fly([1, 2], 5) == False"], "prompt_tokens": 1220, "completion_tokens": 486, "duration": 26.346646070480347}
{"task_id": "HumanEval/73", "tests": ["assert smallest_change([1, 2, 3, 2, 1]) == 0", "assert smallest_change([1, 2, 2, 1]) == 0", "assert smallest_change([]) == 0", "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1"], "prompt_tokens": 1095, "completion_tokens": 487, "duration": 22.039246320724487}
{"task_id": "HumanEval/74", "tests": ["assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']", "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']"], "prompt_tokens": 1182, "completion_tokens": 580, "duration": 34.2767870426178}
{"task_id": "HumanEval/75", "tests": ["assert is_multiply_prime(7) == False", "assert is_multiply_prime(0) == False", "assert is_multiply_prime(30) == True", "assert is_multiply_prime(1) == False"], "prompt_tokens": 901, "completion_tokens": 450, "duration": 20.17881441116333}
{"task_id": "HumanEval/76", "tests": ["assert is_simple_power(64, 4) == False", "assert is_simple_power(81, 3) == True", "assert is_simple_power(27, 3) == True"], "prompt_tokens": 1039, "completion_tokens": 447, "duration": 18.182613611221313}
{"task_id": "HumanEval/77", "tests": ["assert iscube(-216) == True", "assert iscube(125) == True", "assert iscube(-1) == True", "assert iscube(216) == True"], "prompt_tokens": 959, "completion_tokens": 387, "duration": 20.461188793182373}
{"task_id": "HumanEval/78", "tests": ["assert hex_key(\"FFFF\") == 0", "assert hex_key(\"ABED1A33\") == 4", "assert hex_key(\"123456789ABCDEF0\") == 6", "assert hex_key(\"237B\") == 4"], "prompt_tokens": 1351, "completion_tokens": 391, "duration": 18.539931297302246}
{"task_id": "HumanEval/79", "tests": ["assert decimal_to_binary(15) == \"db1111db\"", "assert decimal_to_binary(0) == \"db0db\"", "assert decimal_to_binary(32) == \"db100000db\"", "assert decimal_to_binary(1) == \"db1db\""], "prompt_tokens": 1035, "completion_tokens": 357, "duration": 18.022172212600708}
{"task_id": "HumanEval/80", "tests": ["assert is_happy(\"xyy\") == False", "assert is_happy(\"aabb\") == False", "assert is_happy(\"abcd\") == True", "assert is_happy(\"a\") == False"], "prompt_tokens": 987, "completion_tokens": 348, "duration": 21.178324460983276}
{"task_id": "HumanEval/81", "tests": ["assert numerical_letter_grade([0.0]) == ['E']", "assert numerical_letter_grade([0.0, 3.7, 2.7, 1.3, 0.7]) == ['E', 'A', 'B', 'C-', 'D']", "assert numerical_letter_grade([3.4, 2.4, 1.4, 0.4]) == ['A-', 'B-', 'C-', 'D-']"], "prompt_tokens": 1385, "completion_tokens": 607, "duration": 26.35653328895569}
{"task_id": "HumanEval/82", "tests": ["assert prime_length('abcdefg') == True", "assert prime_length('kittens') == True", "assert prime_length('Hello') == True", "assert prime_length('abcdcba') == True"], "prompt_tokens": 905, "completion_tokens": 344, "duration": 18.22510600090027}
{"task_id": "HumanEval/83", "tests": ["assert starts_one_ends(6) == 198000", "assert starts_one_ends(4) == 1980", "assert starts_one_ends(2) == 18", "assert starts_one_ends(5) == 19800"], "prompt_tokens": 838, "completion_tokens": 707, "duration": 72.766437292099}
{"task_id": "HumanEval/84", "tests": ["assert solve(147) == \"1100\""], "prompt_tokens": 1012, "completion_tokens": 391, "duration": 18.847509145736694}
{"task_id": "HumanEval/85", "tests": ["assert add([1, 3, 5, 7, 9]) == 0", "assert add([4, 2, 6, 7]) == 2", "assert add([10]) == 0"], "prompt_tokens": 885, "completion_tokens": 408, "duration": 21.5315899848938}
{"task_id": "HumanEval/86", "tests": ["assert anti_shuffle('The quick brown fox') == 'Teh cikqu borwn fox'", "assert anti_shuffle('jumps over the lazy dog') == 'jmpsu eo rv the adl yzog'", "assert anti_shuffle('A B C D E F G') == 'A B C D E F G'"], "prompt_tokens": 1045, "completion_tokens": 494, "duration": 21.501795530319214}
{"task_id": "HumanEval/87", "tests": ["assert get_row([[1,1,1], [2,2,2], [3,3,3]], 2) == [(1, 2), (1, 1), (1, 0)]", "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]", "assert get_row([[1,2,3,4,5], [5,4,3,2,1], [6,7,8,9,10]], 5) == [(0, 4), (1, 0)]", "assert get_row([[1,2,3], [1,2,2,3,3,3], [1,1,1,2,2,2,3,3,3,3]], 3) == [(1, 5), (1, 4), (2, 9), (2, 8), (2, 7), (2, 6)]"], "prompt_tokens": 1445, "completion_tokens": 840, "duration": 42.96388912200928}
{"task_id": "HumanEval/88", "tests": ["assert sort_array([5]) == [5]", "assert sort_array([]) == []", "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]"], "prompt_tokens": 1194, "completion_tokens": 547, "duration": 33.44272041320801}
{"task_id": "HumanEval/89", "tests": ["assert encrypt('et') == 'ix'", "assert encrypt('z') == 'd'", "assert encrypt('gf') == 'kj'", "assert encrypt('asdfghjkl') == 'ewhjklnop'"], "prompt_tokens": 966, "completion_tokens": 299, "duration": 19.33115005493164}
{"task_id": "HumanEval/90", "tests": ["assert next_smallest([1]) == None", "assert next_smallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2", "assert next_smallest([1, 2, 3, 4, 5]) == 2"], "prompt_tokens": 1045, "completion_tokens": 529, "duration": 32.74515986442566}
{"task_id": "HumanEval/91", "tests": ["assert is_bored(\"Hello world\") == 0", "assert is_bored(\"I! You? We. They? I. I? I!\") == 4", "assert is_bored(\"I. I? I! Not I. But I?\") == 4", "assert is_bored(\"I\") == 1"], "prompt_tokens": 985, "completion_tokens": 464, "duration": 29.660429000854492}
{"task_id": "HumanEval/92", "tests": ["assert any_int(5, 2, 7) == True", "assert any_int(0, 0, 0) == True", "assert any_int(1, 1, 2) == True", "assert any_int(-5, 10, 5) == True"], "prompt_tokens": 1033, "completion_tokens": 459, "duration": 27.134459018707275}
{"task_id": "HumanEval/93", "tests": ["assert encode('This is a message') == 'tHKS KS C MGSSCGG'", "assert encode('test') == 'TGST'", "assert encode('a') == 'c'"], "prompt_tokens": 973, "completion_tokens": 350, "duration": 33.80842709541321}
{"task_id": "HumanEval/94", "tests": ["assert skjkasdkd([0,81,12,3,1,21]) == 3", "assert skjkasdkd([4, 6, 8, 10]) == 0", "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10"], "prompt_tokens": 1414, "completion_tokens": 712, "duration": 39.39869952201843}
{"task_id": "HumanEval/95", "tests": ["assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}) == True", "assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False", "assert check_dict_case({}) == False", "assert check_dict_case({\"ALLUPPERCASE\":\"YES\", \"STILLUPPERCASE\":\"YES\"}) == True"], "prompt_tokens": 1114, "completion_tokens": 441, "duration": 36.618876218795776}
{"task_id": "HumanEval/96", "tests": ["assert count_up_to(11) == [2, 3, 5, 7]", "assert count_up_to(2) == []", "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]", "assert count_up_to(1) == []"], "prompt_tokens": 1060, "completion_tokens": 466, "duration": 20.59627079963684}
{"task_id": "HumanEval/97", "tests": ["assert multiply(148, 412) == 16", "assert multiply(123, 456) == 18", "assert multiply(0, 10) == 0", "assert multiply(-9, -8) == 72"], "prompt_tokens": 947, "completion_tokens": 409, "duration": 16.215410709381104}
{"task_id": "HumanEval/98", "tests": ["assert count_upper('aBCdEf') == 1", "assert count_upper('12345') == 0", "assert count_upper('') == 0"], "prompt_tokens": 894, "completion_tokens": 370, "duration": 18.811112880706787}
{"task_id": "HumanEval/99", "tests": ["assert closest_integer(\"15.3\") == 15", "assert closest_integer(\"99.99\") == 100", "assert closest_integer(\"0\") == 0", "assert closest_integer(\"-99.99\") == -100"], "prompt_tokens": 1061, "completion_tokens": 410, "duration": 28.99259042739868}
{"task_id": "HumanEval/100", "tests": ["assert make_a_pile(2) == [2, 4]", "assert make_a_pile(4) == [4, 6, 8, 10]", "assert make_a_pile(5) == [5, 7, 9, 11, 13]", "assert make_a_pile(3) == [3, 5, 7]"], "prompt_tokens": 1045, "completion_tokens": 542, "duration": 31.83610725402832}
{"task_id": "HumanEval/101", "tests": ["assert words_string(\"No,spaces,or,commas\") == [\"No\", \"spaces\", \"or\", \"commas\"]", "assert words_string(\"  Spaces  before\") == [\"Spaces\", \"before\"]", "assert words_string(\"Hello,world\") == [\"Hello\", \"world\"]", "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"], "prompt_tokens": 1028, "completion_tokens": 488, "duration": 29.69550585746765}
{"task_id": "HumanEval/102", "tests": ["assert choose_num(13, 12) == -1", "assert choose_num(1, 5) == 4", "assert choose_num(14, 13) == -1", "assert choose_num(5, 5) == -1"], "prompt_tokens": 943, "completion_tokens": 410, "duration": 27.12572169303894}
{"task_id": "HumanEval/103", "tests": ["assert rounded_avg(7, 5) == -1"], "prompt_tokens": 1044, "completion_tokens": 438, "duration": 18.725810289382935}
{"task_id": "HumanEval/104", "tests": ["assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]", "assert unique_digits([]) == []", "assert unique_digits([123, 456, 789, 135]) == [135, 789]", "assert unique_digits([13579, 2468, 97531]) == [13579, 97531]"], "prompt_tokens": 986, "completion_tokens": 433, "duration": 27.203322172164917}
{"task_id": "HumanEval/105", "tests": ["assert by_length([1, -1, 55]) == [\"One\"]", "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]", "assert by_length([3, 3, 3]) == [\"Three\", \"Three\", \"Three\"]", "assert by_length([10, 11, 12, 0, -2, -3]) == []"], "prompt_tokens": 1368, "completion_tokens": 543, "duration": 49.44250416755676}
{"task_id": "HumanEval/106", "tests": ["assert f(5) == [1, 2, 6, 24, 15]", "assert f(7) == [1, 2, 6, 24, 15, 720, 28]", "assert f(1) == [1]", "assert f(2) == [1, 2]"], "prompt_tokens": 1020, "completion_tokens": 559, "duration": 27.441922187805176}
{"task_id": "HumanEval/107", "tests": ["assert even_odd_palindrome(2) == (1, 1)", "assert even_odd_palindrome(1) == (0, 1)", "assert even_odd_palindrome(12) == (4, 6)"], "prompt_tokens": 1185, "completion_tokens": 590, "duration": 42.623146295547485}
{"task_id": "HumanEval/108", "tests": ["assert count_nums([10, 20, 30, -40]) == 3", "assert count_nums([9, 99, 999]) == 3", "assert count_nums([-5, -23, -77, 0]) == 0"], "prompt_tokens": 1022, "completion_tokens": 483, "duration": 28.510260820388794}
{"task_id": "HumanEval/109", "tests": ["assert move_one_ball([5, 4, 3, 2, 1]) == False", "assert move_one_ball([5, 1, 2, 3, 4]) == True", "assert move_one_ball([3, 5, 4, 1, 2]) == False", "assert move_one_ball([1, 3, 5, 2, 4]) == False"], "prompt_tokens": 1389, "completion_tokens": 501, "duration": 34.94069027900696}
{"task_id": "HumanEval/110", "tests": ["assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"YES\"", "assert exchange([1], [1]) == \"NO\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\""], "prompt_tokens": 1181, "completion_tokens": 544, "duration": 30.331862688064575}
{"task_id": "HumanEval/111", "tests": ["assert histogram('c c c c c') == {'c': 5}", "assert histogram('') == {}"], "prompt_tokens": 1088, "completion_tokens": 566, "duration": 29.70262312889099}
{"task_id": "HumanEval/112", "tests": ["assert reverse_delete(\"palindrome\", \"pndrome\") == ('ali', False)", "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)", "assert reverse_delete(\"radar\", \"r\") == ('ada', True)"], "prompt_tokens": 1093, "completion_tokens": 444, "duration": 19.369115114212036}
{"task_id": "HumanEval/113", "tests": ["assert odd_count(['', '0024', '567']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]", "assert odd_count(['2468', '13579']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 5n the str5ng 5 of the 5nput.\"]", "assert odd_count(['3', \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]", "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]"], "prompt_tokens": 1271, "completion_tokens": 663, "duration": 30.74461007118225}
{"task_id": "HumanEval/114", "tests": ["assert minSubArraySum([0, -1, -2, -3, 0]) == -6", "assert minSubArraySum([-5]) == -5"], "prompt_tokens": 960, "completion_tokens": 491, "duration": 28.166526079177856}
{"task_id": "HumanEval/115", "tests": ["assert max_fill([[1,1,1,1,1,1,1,1,1,1]], 10) == 1", "assert max_fill([[1,1,1], [1,1,1], [1,1,1]], 3) == 3", "assert max_fill([[1,0,1], [0,1,0], [1,0,1]], 2) == 3", "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5"], "prompt_tokens": 1488, "completion_tokens": 627, "duration": 34.32616567611694}
{"task_id": "HumanEval/116", "tests": ["assert sort_array([0, 0, 0, 0]) == [0, 0, 0, 0]", "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]"], "prompt_tokens": 1176, "completion_tokens": 600, "duration": 32.700927734375}
{"task_id": "HumanEval/117", "tests": ["assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]", "assert select_words(\"simple white space\", 2) == []", "assert select_words(\"Hello world\", 4) == [\"world\"]"], "prompt_tokens": 1124, "completion_tokens": 475, "duration": 23.8564932346344}
{"task_id": "HumanEval/118", "tests": ["assert get_closest_vowel(\"quick\") == \"\"", "assert get_closest_vowel(\"baeb\") == \"a\"", "assert get_closest_vowel(\"programming\") == \"a\"", "assert get_closest_vowel(\"Strengthen\") == \"e\""], "prompt_tokens": 1054, "completion_tokens": 479, "duration": 30.791688680648804}
{"task_id": "HumanEval/119", "tests": ["assert match_parens(['(', '']) == 'No'", "assert match_parens([')', ')']) == 'No'", "assert match_parens(['()(', ')']) == 'Yes'", "assert match_parens(['', '']) == 'Yes'"], "prompt_tokens": 1092, "completion_tokens": 374, "duration": 20.334701538085938}
{"task_id": "HumanEval/120", "tests": ["assert maximum([1], 1) == [1]", "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]", "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]", "assert maximum([5, 4, 3, 2, 1], 3) == [3, 4, 5]"], "prompt_tokens": 1233, "completion_tokens": 544, "duration": 21.076804876327515}
{"task_id": "HumanEval/121", "tests": ["assert solution([30, 13, 24, 321]) == 0", "assert solution([2, 4, 6, 8, 10]) == 0"], "prompt_tokens": 981, "completion_tokens": 503, "duration": 26.34758472442627}
{"task_id": "HumanEval/122", "tests": ["assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24", "assert add_elements([1, 2, 3, 4, 5], 3) == 6", "assert add_elements([100, 200, 300], 2) == 0", "assert add_elements([123, 456, 78, 90, 12], 5) == 180"], "prompt_tokens": 1066, "completion_tokens": 529, "duration": 23.058699369430542}
{"task_id": "HumanEval/123", "tests": ["assert get_odd_collatz(2) == [1]"], "prompt_tokens": 1255, "completion_tokens": 657, "duration": 36.199055433273315}
{"task_id": "HumanEval/124", "tests": ["assert valid_date('00-00-0000') == False", "assert valid_date('12-31-1999') == True", "assert valid_date('03-11-2000') == True", "assert valid_date('02-29-2020') == True"], "prompt_tokens": 1285, "completion_tokens": 540, "duration": 28.29016375541687}
{"task_id": "HumanEval/125", "tests": ["assert split_words(\"\") == 0", "assert split_words(\"a\") == 1", "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]"], "prompt_tokens": 1026, "completion_tokens": 431, "duration": 32.57437491416931}
{"task_id": "HumanEval/126", "tests": ["assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False", "assert is_sorted([1, 2, 3, 4, 5]) == True", "assert is_sorted([1, 3, 2, 4, 5]) == False", "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True"], "prompt_tokens": 1297, "completion_tokens": 584, "duration": 68.12670946121216}
{"task_id": "HumanEval/127", "tests": ["assert intersection((0, 0), (0, 0)) == \"NO\"", "assert intersection((10, 13), (13, 15)) == \"NO\"", "assert intersection((1, 2), (2, 3)) == \"NO\""], "prompt_tokens": 1283, "completion_tokens": 553, "duration": 35.91223502159119}
{"task_id": "HumanEval/128", "tests": ["assert prod_signs([1, -1, 0, 1, -1]) == 0", "assert prod_signs([1, 2, 3, 4, 5]) == 15", "assert prod_signs([]) == None", "assert prod_signs([0, 1]) == 0"], "prompt_tokens": 1016, "completion_tokens": 423, "duration": 24.425034761428833}
{"task_id": "HumanEval/129", "tests": ["assert minPath([[2, 3], [1, 4]], 5) == [1, 2, 1, 2, 1]", "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]", "assert minPath([[10, 12, 11], [9, 8, 7], [6, 5, 4]], 4) == [4, 5, 4, 5]", "assert minPath([[1]], 1) == [1]"], "prompt_tokens": 1625, "completion_tokens": 617, "duration": 35.27760362625122}
{"task_id": "HumanEval/130", "tests": ["assert tri(2) == [1, 3, 2]", "assert tri(3) == [1, 3, 2, 8]"], "prompt_tokens": 1251, "completion_tokens": 495, "duration": 43.549835205078125}
{"task_id": "HumanEval/131", "tests": ["assert digits(2468) == 0", "assert digits(999) == 729", "assert digits(1) == 1", "assert digits(2222) == 0"], "prompt_tokens": 883, "completion_tokens": 347, "duration": 22.77032995223999}
{"task_id": "HumanEval/132", "tests": ["assert is_nested('[][]') == False", "assert is_nested('[[[]]]') == True", "assert is_nested('[[]][[') == True", "assert is_nested('[[]]') == True"], "prompt_tokens": 1010, "completion_tokens": 355, "duration": 18.314179182052612}
{"task_id": "HumanEval/133", "tests": ["assert sum_squares([]) == 0", "assert sum_squares([1.4, 4.2, 0]) == 29"], "prompt_tokens": 1090, "completion_tokens": 656, "duration": 32.65692162513733}
{"task_id": "HumanEval/134", "tests": ["assert check_if_last_char_is_a_letter(\"Hello World!\") == False", "assert check_if_last_char_is_a_letter(\"apple pi e\") == True"], "prompt_tokens": 1038, "completion_tokens": 452, "duration": 23.365214347839355}
{"task_id": "HumanEval/135", "tests": ["assert can_arrange([10, 20, 30, 25, 40]) == 3", "assert can_arrange([1, 3, 5, 7, 6, 8]) == 4", "assert can_arrange([100, 200]) == -1"], "prompt_tokens": 1001, "completion_tokens": 535, "duration": 45.28311848640442}
{"task_id": "HumanEval/136", "tests": ["assert largest_smallest_integers([-10, -20, 30, 40]) == (-10, 30)", "assert largest_smallest_integers([-100]) == (-100, None)", "assert largest_smallest_integers([1, 2, 3, 4, 5]) == (None, 1)", "assert largest_smallest_integers([-2, -1, 0, 1, 2]) == (-1, 1)"], "prompt_tokens": 1075, "completion_tokens": 540, "duration": 33.62750792503357}
{"task_id": "HumanEval/137", "tests": ["assert compare_one(\"5,1\", \"6\") == \"6\"", "assert compare_one(-1, \"-2\") == -1", "assert compare_one(\"3,5\", 2) == \"3,5\"", "assert compare_one(\"3.5\", \"4,2\") == \"4,2\""], "prompt_tokens": 1049, "completion_tokens": 513, "duration": 39.81731963157654}
{"task_id": "HumanEval/138", "tests": ["assert is_equal_to_sum_even(24) == True", "assert is_equal_to_sum_even(200) == True", "assert is_equal_to_sum_even(32) == True", "assert is_equal_to_sum_even(14) == False"], "prompt_tokens": 905, "completion_tokens": 500, "duration": 16.202772617340088}
{"task_id": "HumanEval/139", "tests": ["assert special_factorial(1) == 1", "assert special_factorial(2) == 2", "assert special_factorial(5) == 34560", "assert special_factorial(4) == 288"], "prompt_tokens": 938, "completion_tokens": 327, "duration": 22.49928331375122}
{"task_id": "HumanEval/140", "tests": ["assert fix_spaces(\"  Example    4  \") == \"_Example-4_\"", "assert fix_spaces(\"   \") == \"-\""], "prompt_tokens": 975, "completion_tokens": 421, "duration": 29.450353860855103}
{"task_id": "HumanEval/141", "tests": ["assert file_name_check(\"123TestFile.exe\") == 'No'", "assert file_name_check(\"tooManyDigits1234.exe\") == 'No'", "assert file_name_check(\"dotAtEnd.\") == 'No'", "assert file_name_check(\"test.abc\") == 'No'"], "prompt_tokens": 1187, "completion_tokens": 578, "duration": 30.026604652404785}
{"task_id": "HumanEval/142", "tests": ["assert sum_squares([]) == 0", "assert sum_squares([1, 2, 3]) == 6"], "prompt_tokens": 1152, "completion_tokens": 634, "duration": 44.049293518066406}
{"task_id": "HumanEval/143", "tests": ["assert words_in_sentence(\"lets go for swimming\") == \"go for\""], "prompt_tokens": 1072, "completion_tokens": 470, "duration": 24.40545916557312}
{"task_id": "HumanEval/144", "tests": ["assert simplify(\"5/2\", \"2/5\") == True", "assert simplify(\"3/4\", \"8/3\") == True", "assert simplify(\"1/2\", \"2/3\") == False", "assert simplify(\"10/1\", \"1/10\") == True"], "prompt_tokens": 1073, "completion_tokens": 429, "duration": 16.373164892196655}
{"task_id": "HumanEval/145", "tests": ["assert order_by_points([111, 222, 333, 444]) == [111, 222, 333, 444]", "assert order_by_points([-56, -65, -654, -456]) == [-56, -65, -456, -654]", "assert order_by_points([123, 321, 213]) == [123, 213, 321]", "assert order_by_points([]) == []"], "prompt_tokens": 1022, "completion_tokens": 561, "duration": 24.682605504989624}
{"task_id": "HumanEval/146", "tests": ["assert specialFilter([]) == 0", "assert specialFilter([10, 20, 30, 40, 50]) == 0", "assert specialFilter([-11, -13, -15, -17, -19]) == 0", "assert specialFilter([12, 23, 34, 45, 56, 67, 78, 89, 90]) == 1"], "prompt_tokens": 1028, "completion_tokens": 522, "duration": 21.182037353515625}
{"task_id": "HumanEval/147", "tests": ["assert get_max_triples(10) == 4", "assert get_max_triples(6) == 1", "assert get_max_triples(8) == 4"], "prompt_tokens": 1081, "completion_tokens": 382, "duration": 15.760624885559082}
{"task_id": "HumanEval/148", "tests": ["assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")", "assert bf(\"Pluto\", \"Mars\") == ()", "assert bf(\"Earth\", \"Mercury\") == (\"Venus\",)", "assert bf(\"Venus\", \"Venus\") == ()"], "prompt_tokens": 1184, "completion_tokens": 459, "duration": 35.38677954673767}
{"task_id": "HumanEval/149", "tests": ["assert sorted_list_sum([\"a\", \"b\", \"c\"]) == []", "assert sorted_list_sum([]) == []"], "prompt_tokens": 1156, "completion_tokens": 609, "duration": 41.62980818748474}
{"task_id": "HumanEval/150", "tests": ["assert x_or_y(15, 8, 5) == 5", "assert x_or_y(4, 5, 15) == 15", "assert x_or_y(13, -1, -2) == -1", "assert x_or_y(7, 34, 12) == 34"], "prompt_tokens": 943, "completion_tokens": 400, "duration": 25.46723437309265}
{"task_id": "HumanEval/151", "tests": ["assert double_the_difference([1, 3, 2, 0]) == 10", "assert double_the_difference([10, 22, 33, 47]) == 2580", "assert double_the_difference([-1, -2, 0]) == 0", "assert double_the_difference([1, 2, 3, 4, 5]) == 35"], "prompt_tokens": 1058, "completion_tokens": 492, "duration": 25.853872776031494}
{"task_id": "HumanEval/152", "tests": ["assert compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]", "assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) == [4, 4, 1, 0, 0, 6]", "assert compare([100, 200, 300], [300, 100, 200]) == [200, 100, 100]", "assert compare([10, 20, 30], [10, 20, 30]) == [0, 0, 0]"], "prompt_tokens": 1337, "completion_tokens": 635, "duration": 28.302537441253662}
{"task_id": "HumanEval/153", "tests": ["assert Strongest_Extension('Task', ['simpleTask', 'ComplexTask', 'easyTask']) == 'Task.ComplexTask'", "assert Strongest_Extension('Language', ['Python', 'Java', 'CSharp']) == 'Language.CSharp'", "assert Strongest_Extension('Algorithm', ['QuickSort', 'MergeSort', 'HeapSort']) == 'Algorithm.HeapSort'"], "prompt_tokens": 1363, "completion_tokens": 700, "duration": 32.13005757331848}
{"task_id": "HumanEval/154", "tests": ["assert cycpattern_check(\"rotation\", \"tationro\") == True", "assert cycpattern_check(\"himenss\", \"simen\") == True", "assert cycpattern_check(\"efef\", \"eeff\") == False", "assert cycpattern_check(\"hello\", \"ell\") == True"], "prompt_tokens": 1020, "completion_tokens": 453, "duration": 24.306113243103027}
{"task_id": "HumanEval/155", "tests": ["assert even_odd_count(1234567890) == (5, 5)", "assert even_odd_count(-12345) == (2, 3)", "assert even_odd_count(0) == (1, 0)", "assert even_odd_count(111) == (0, 3)"], "prompt_tokens": 893, "completion_tokens": 428, "duration": 21.810378313064575}
{"task_id": "HumanEval/156", "tests": ["assert int_to_mini_roman(1) == 'i'", "assert int_to_mini_roman(399) == 'cccxcix'", "assert int_to_mini_roman(3) == 'iii'", "assert int_to_mini_roman(294) == 'ccxciv'"], "prompt_tokens": 961, "completion_tokens": 410, "duration": 25.674137830734253}
{"task_id": "HumanEval/157", "tests": ["assert right_angle_triangle(1, 1, 1) == False", "assert right_angle_triangle(8, 15, 17) == True", "assert right_angle_triangle(7, 24, 25) == True", "assert right_angle_triangle(1, 2, 3) == False"], "prompt_tokens": 983, "completion_tokens": 533, "duration": 44.58369326591492}
{"task_id": "HumanEval/158", "tests": ["assert find_max([\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]) == \"abc\"", "assert find_max([\"123\", \"321\", \"213\"]) == \"123\"", "assert find_max([\"apple\", \"banana\", \"cherry\"]) == \"banana\""], "prompt_tokens": 1020, "completion_tokens": 511, "duration": 30.40979814529419}
{"task_id": "HumanEval/159", "tests": ["assert eat(0, 1000, 500) == [500, 0]", "assert eat(1, 10, 10) == [11, 0]", "assert eat(10, 0, 100) == [10, 100]", "assert eat(500, 1000, 1000) == [1500, 500]"], "prompt_tokens": 1333, "completion_tokens": 515, "duration": 26.863138914108276}
{"task_id": "HumanEval/160", "tests": [], "prompt_tokens": 1218, "completion_tokens": 624, "duration": 37.13038992881775}
{"task_id": "HumanEval/161", "tests": ["assert solve('AaBbCc') == 'aAbBcC'", "assert solve('12345a') == '12345A'", "assert solve('1234') == '4321'"], "prompt_tokens": 967, "completion_tokens": 423, "duration": 20.53823184967041}
{"task_id": "HumanEval/162", "tests": ["assert string_to_md5('Python3.8') == '9dd4e461268c8034f5c8564e155c67a6'", "assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'", "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'", "assert string_to_md5('') is None"], "prompt_tokens": 958, "completion_tokens": 482, "duration": 32.332358598709106}
{"task_id": "HumanEval/163", "tests": ["assert generate_integers(1, 5) == [2, 4]", "assert generate_integers(0, 4) == [0, 2, 4]", "assert generate_integers(11, 11) == []", "assert generate_integers(8, 2) == [2, 4, 6, 8]"], "prompt_tokens": 983, "completion_tokens": 440, "duration": 17.04134964942932}
