{"task_id": "HumanEval/0", "tests": ["assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False", "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True", "assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 0.2) == False", "assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 1.5) == True"], "prompt_tokens": 1113, "completion_tokens": 508, "duration": 9.812651872634888}
{"task_id": "HumanEval/1", "tests": ["assert separate_paren_groups('()((()))()') == ['()', '((()))', '()']", "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']", "assert separate_paren_groups('((()))') == ['((()))']", "assert separate_paren_groups('()()()()') == ['()', '()', '()', '()']"], "prompt_tokens": 1030, "completion_tokens": 338, "duration": 7.005544900894165}
{"task_id": "HumanEval/2", "tests": ["assert truncate_number(3.5) == 0.5", "assert truncate_number(7.0) == 0.0", "assert truncate_number(1.234) == 0.234", "assert truncate_number(0.123) == 0.123"], "prompt_tokens": 948, "completion_tokens": 322, "duration": 6.567980051040649}
{"task_id": "HumanEval/3", "tests": ["assert below_zero([-1, -2, -3]) == True", "assert below_zero([1, 2, 3]) == False", "assert below_zero([1, 2, -4, 5]) == True", "assert below_zero([0, 0, 0, 0]) == False"], "prompt_tokens": 1026, "completion_tokens": 343, "duration": 7.142597436904907}
{"task_id": "HumanEval/4", "tests": ["assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.0", "assert mean_absolute_deviation([5.0, 5.0, 5.0, 5.0]) == 0.0", "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0", "assert mean_absolute_deviation([0.0, 0.0, 0.0, 0.0]) == 0.0"], "prompt_tokens": 1085, "completion_tokens": 453, "duration": 7.1398797035217285}
{"task_id": "HumanEval/5", "tests": ["assert intersperse([], 4) == []", "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]"], "prompt_tokens": 946, "completion_tokens": 172, "duration": 3.101318836212158}
{"task_id": "HumanEval/6", "tests": ["assert parse_nested_parens('((()(())))') == [4]", "assert parse_nested_parens('((()))') == [3]", "assert parse_nested_parens('((()()))') == [4]", "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]"], "prompt_tokens": 1021, "completion_tokens": 379, "duration": 6.644980430603027}
{"task_id": "HumanEval/7", "tests": ["assert filter_by_substring(['apple', 'banana', 'cherry', 'date'], 'e') == ['apple', 'date']", "assert filter_by_substring(['hello', 'world', 'python', 'programming'], 'ing') == ['programming']", "assert filter_by_substring([], 'a') == []", "assert filter_by_substring(['red', 'green', 'blue', 'yellow'], 'l') == ['blue', 'yellow']"], "prompt_tokens": 998, "completion_tokens": 437, "duration": 7.485008716583252}
{"task_id": "HumanEval/8", "tests": ["assert sum_product([0, 0, 0, 0]) == (0, 0)", "assert sum_product([-1, -2, -3, -4]) == (-10, -24)", "assert sum_product([1, 2, 3, 4]) == (10, 24)", "assert sum_product([5, 5, 5, 5]) == (20, 625)"], "prompt_tokens": 1030, "completion_tokens": 386, "duration": 6.254444360733032}
{"task_id": "HumanEval/9", "tests": ["assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]", "assert rolling_max([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]", "assert rolling_max([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]", "assert rolling_max([10, 5, 8, 12, 7]) == [10, 10, 10, 12, 12]"], "prompt_tokens": 1070, "completion_tokens": 497, "duration": 9.12793517112732}
{"task_id": "HumanEval/10", "tests": ["assert make_palindrome('') == ''", "assert make_palindrome('cata') == 'catac'", "assert is_palindrome('hello') == False", "assert is_palindrome('racecar') == True"], "prompt_tokens": 1049, "completion_tokens": 318, "duration": 5.665551662445068}
{"task_id": "HumanEval/11", "tests": ["assert string_xor('010', '110') == '100'", "assert string_xor('010', '000') == '010'", "assert string_xor('111', '111') == '000'", "assert string_xor('101', '111') == '010'"], "prompt_tokens": 926, "completion_tokens": 302, "duration": 5.551198959350586}
{"task_id": "HumanEval/12", "tests": ["assert longest([]) == None", "assert longest(['a', 'bb', 'ccc']) == 'ccc'"], "prompt_tokens": 963, "completion_tokens": 221, "duration": 4.374215602874756}
{"task_id": "HumanEval/13", "tests": ["assert greatest_common_divisor(3, 5) == 1", "assert greatest_common_divisor(25, 15) == 5"], "prompt_tokens": 892, "completion_tokens": 151, "duration": 2.9959864616394043}
{"task_id": "HumanEval/14", "tests": ["assert all_prefixes('abc') == ['a', 'ab', 'abc']", "assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']", "assert all_prefixes('12345') == ['1', '12', '123', '1234', '12345']", "assert all_prefixes('') == []"], "prompt_tokens": 914, "completion_tokens": 344, "duration": 6.232199192047119}
{"task_id": "HumanEval/15", "tests": ["assert string_sequence(0) == '0'", "assert string_sequence(5) == '0 1 2 3 4 5'"], "prompt_tokens": 888, "completion_tokens": 153, "duration": 3.310152530670166}
{"task_id": "HumanEval/16", "tests": ["assert count_distinct_characters('xyzXYZ') == 3", "assert count_distinct_characters('Jerry') == 4"], "prompt_tokens": 887, "completion_tokens": 176, "duration": 4.384880065917969}
{"task_id": "HumanEval/17", "tests": ["assert parse_music('o o o o o o o o o o') == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]", "assert parse_music('o o| o| o| o| o| o| o| o| o o') == [4, 2, 2, 2, 2, 2, 2, 2, 4, 4]", "assert parse_music('o| o| o| o| o| o| o| o| o| o|') == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]", "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"], "prompt_tokens": 1284, "completion_tokens": 734, "duration": 11.853785037994385}
{"task_id": "HumanEval/18", "tests": ["assert how_many_times('', 'a') == 0", "assert how_many_times('aaa', 'a') == 3", "assert how_many_times('aaaa', 'aa') == 3"], "prompt_tokens": 938, "completion_tokens": 265, "duration": 5.552043676376343}
{"task_id": "HumanEval/19", "tests": ["assert sort_numbers('three one five') == 'one three five'", "assert sort_numbers('nine eight seven') == 'seven eight nine'", "assert sort_numbers('zero two four') == 'zero two four'"], "prompt_tokens": 974, "completion_tokens": 219, "duration": 4.404551982879639}
{"task_id": "HumanEval/20", "tests": ["assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"], "prompt_tokens": 1146, "completion_tokens": 285, "duration": 5.899063348770142}
{"task_id": "HumanEval/21", "tests": ["assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([5.0, 4.0, 3.0, 2.0, 1.0]) == [1.0, 0.75, 0.5, 0.25, 0.0]", "assert rescale_to_unit([10.0, 20.0, 30.0, 40.0, 50.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([0.0, 0.0, 0.0, 0.0, 0.0]) == [0.0, 0.0, 0.0, 0.0, 0.0]"], "prompt_tokens": 1192, "completion_tokens": 663, "duration": 10.431373119354248}
{"task_id": "HumanEval/22", "tests": ["assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]", "assert filter_integers([1, 2, 3]) == [1, 2, 3]", "assert filter_integers(['a', 3.14, 5]) == [5]"], "prompt_tokens": 994, "completion_tokens": 403, "duration": 7.059128999710083}
{"task_id": "HumanEval/23", "tests": ["assert strlen('') == 0", "assert strlen('abc') == 3"], "prompt_tokens": 825, "completion_tokens": 145, "duration": 3.521735906600952}
{"task_id": "HumanEval/24", "tests": ["assert largest_divisor(15) == 5", "assert largest_divisor(3) == 1", "assert largest_divisor(7) == 1", "assert largest_divisor(20) == 10"], "prompt_tokens": 870, "completion_tokens": 287, "duration": 5.048750877380371}
{"task_id": "HumanEval/25", "tests": ["assert factorize(8) == [2, 2, 2]", "assert factorize(25) == [5, 5]", "assert factorize(70) == [2, 5, 7]"], "prompt_tokens": 1019, "completion_tokens": 228, "duration": 4.59604024887085}
{"task_id": "HumanEval/26", "tests": ["assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]", "assert remove_duplicates([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == []", "assert remove_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1]", "assert remove_duplicates([1, 1, 1, 1, 1]) == [1]"], "prompt_tokens": 1012, "completion_tokens": 458, "duration": 8.256233215332031}
{"task_id": "HumanEval/27", "tests": ["assert flip_case('Hello') == 'hELLO'", "assert flip_case('wORLD') == 'World'", "assert flip_case('123abcXYZ') == '123ABCxyz'"], "prompt_tokens": 855, "completion_tokens": 235, "duration": 4.637017726898193}
{"task_id": "HumanEval/28", "tests": ["assert concatenate(['123', '456', '789']) == '123456789'", "assert concatenate([]) == ''", "assert concatenate(['apple', 'banana', 'cherry']) == 'applebananacherry'", "assert concatenate(['a', 'b', 'c']) == 'abc'"], "prompt_tokens": 894, "completion_tokens": 304, "duration": 6.095702409744263}
{"task_id": "HumanEval/29", "tests": ["assert filter_by_prefix([], 'a') == []", "assert filter_by_prefix(['car', 'bus', 'train', 'bike'], 't') == ['train']", "assert filter_by_prefix(['sun', 'moon', 'star', 'planet'], 's') == ['sun', 'star']", "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']"], "prompt_tokens": 982, "completion_tokens": 473, "duration": 9.44287657737732}
{"task_id": "HumanEval/30", "tests": ["assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]", "assert get_positive([-1, -2, -3]) == []", "assert get_positive([0, 0, 0]) == []", "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]"], "prompt_tokens": 1062, "completion_tokens": 440, "duration": 8.12935471534729}
{"task_id": "HumanEval/31", "tests": ["assert is_prime(61) == True", "assert is_prime(1) == False", "assert is_prime(4) == False", "assert is_prime(101) == True"], "prompt_tokens": 956, "completion_tokens": 242, "duration": 7.20501184463501}
{"task_id": "HumanEval/32", "tests": ["assert round(find_zero([1, 2]), 2) == -0.5", "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0"], "prompt_tokens": 1284, "completion_tokens": 297, "duration": 4.742929458618164}
{"task_id": "HumanEval/33", "tests": ["assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]", "assert sort_third([1, 2, 3]) == [1, 2, 3]", "assert sort_third([9, 6, 3, 12, 15, 18, 21, 24]) == [3, 6, 9, 12, 15, 18, 21, 24]"], "prompt_tokens": 1200, "completion_tokens": 583, "duration": 14.399897336959839}
{"task_id": "HumanEval/34", "tests": ["assert unique([1, 1, 1, 1, 1]) == [1]", "assert unique([4, 3, 2, 1]) == [1, 2, 3, 4]", "assert unique([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]"], "prompt_tokens": 1021, "completion_tokens": 529, "duration": 8.766911506652832}
{"task_id": "HumanEval/35", "tests": ["assert max_element([1, 2, 3]) == 3", "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123"], "prompt_tokens": 942, "completion_tokens": 202, "duration": 4.153512001037598}
{"task_id": "HumanEval/36", "tests": ["assert fizz_buzz(50) == 0", "assert fizz_buzz(78) == 2", "assert fizz_buzz(79) == 3"], "prompt_tokens": 913, "completion_tokens": 233, "duration": 4.487905979156494}
{"task_id": "HumanEval/37", "tests": ["assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]", "assert sort_even([1, 3, 5, 7, 9]) == [1, 9, 5, 7, 3]", "assert sort_even([9, 8, 7, 6, 5, 4]) == [5, 8, 7, 6, 9, 4]", "assert sort_even([1, 2, 3]) == [1, 2, 3]"], "prompt_tokens": 1092, "completion_tokens": 441, "duration": 8.914677619934082}
{"task_id": "HumanEval/38", "tests": ["assert encode_cyclic(\"python\") == \"ythpon\"", "assert encode_cyclic(\"world\") == \"orldw\"", "assert encode_cyclic(\"abcdef\") == \"bcdefa\"", "assert encode_cyclic(\"hello\") == \"elloh\""], "prompt_tokens": 1087, "completion_tokens": 271, "duration": 5.091237306594849}
{"task_id": "HumanEval/39", "tests": ["assert prime_fib(4) == 13", "assert prime_fib(3) == 5", "assert prime_fib(1) == 2", "assert prime_fib(2) == 3"], "prompt_tokens": 960, "completion_tokens": 267, "duration": 6.775169134140015}
{"task_id": "HumanEval/40", "tests": ["assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True", "assert triples_sum_to_zero([1, 3, 5, 0]) == False", "assert triples_sum_to_zero([1, 3, -2, 1]) == True", "assert triples_sum_to_zero([1]) == False"], "prompt_tokens": 1117, "completion_tokens": 362, "duration": 7.015497446060181}
{"task_id": "HumanEval/41", "tests": ["assert car_race_collision(10) == 10", "assert car_race_collision(2) == 2", "assert car_race_collision(1) == 1", "assert car_race_collision(3) == 3"], "prompt_tokens": 1068, "completion_tokens": 297, "duration": 9.77985429763794}
{"task_id": "HumanEval/42", "tests": ["assert incr_list([1, 2, 3]) == [2, 3, 4]", "assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]"], "prompt_tokens": 1018, "completion_tokens": 248, "duration": 5.109660863876343}
{"task_id": "HumanEval/43", "tests": ["assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "assert pairs_sum_to_zero([1, 2, 3, 7]) == False", "assert pairs_sum_to_zero([1, 3, 5, 0]) == False"], "prompt_tokens": 1122, "completion_tokens": 382, "duration": 7.223004579544067}
{"task_id": "HumanEval/44", "tests": ["assert change_base(8, 3) == '22'", "assert change_base(8, 2) == '1000'", "assert change_base(7, 2) == '111'"], "prompt_tokens": 944, "completion_tokens": 237, "duration": 4.7058258056640625}
{"task_id": "HumanEval/45", "tests": ["assert triangle_area(5, 3) == 7.5"], "prompt_tokens": 829, "completion_tokens": 90, "duration": 6.533206462860107}
{"task_id": "HumanEval/46", "tests": ["assert fib4(6) == 8", "assert fib4(7) == 14", "assert fib4(2) == 2", "assert fib4(4) == 2"], "prompt_tokens": 1104, "completion_tokens": 304, "duration": 8.533575773239136}
{"task_id": "HumanEval/47", "tests": ["assert median([10, 20, 30, 40, 50]) == 30", "assert median([2, 4, 6, 8, 10, 12, 14, 16]) == 9.0", "assert median([3, 1, 2, 4, 5]) == 3"], "prompt_tokens": 973, "completion_tokens": 521, "duration": 8.316329002380371}
{"task_id": "HumanEval/48", "tests": ["assert is_palindrome('') == True", "assert is_palindrome('aba') == True", "assert is_palindrome('aaaaa') == True", "assert is_palindrome('zbcd') == False"], "prompt_tokens": 905, "completion_tokens": 258, "duration": 6.081450939178467}
{"task_id": "HumanEval/49", "tests": ["assert modp(0, 101) == 1", "assert modp(3, 11) == 8", "assert modp(3, 5) == 3", "assert modp(100, 101) == 1"], "prompt_tokens": 984, "completion_tokens": 286, "duration": 7.951085090637207}
{"task_id": "HumanEval/50", "tests": ["assert decode_shift(\"fgh\") == \"abc\"", "assert decode_shift(\"btwqi\") == \"world\"", "assert encode_shift(\"z\") == \"e\"", "assert encode_shift(\"world\") == \"btwqi\""], "prompt_tokens": 947, "completion_tokens": 341, "duration": 6.460736036300659}
{"task_id": "HumanEval/51", "tests": ["assert remove_vowels('abcdef') == 'bcdf'"], "prompt_tokens": 979, "completion_tokens": 228, "duration": 6.783466815948486}
{"task_id": "HumanEval/52", "tests": ["assert below_threshold([1, 2, 4, 10], 100) == True", "assert below_threshold([-1, -2, -3], 0) == True", "assert below_threshold([0, 0, 0], 1) == True", "assert below_threshold([1, 20, 4, 10], 5) == False"], "prompt_tokens": 958, "completion_tokens": 385, "duration": 7.226898431777954}
{"task_id": "HumanEval/53", "tests": ["assert add(2, 3) == 5", "assert add(5, 7) == 12"], "prompt_tokens": 852, "completion_tokens": 140, "duration": 3.4365968704223633}
{"task_id": "HumanEval/54", "tests": ["assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True", "assert same_chars('abcd', 'dddddddabce') == False", "assert same_chars('dddddddabc', 'abcd') == True", "assert same_chars('abcd', 'dddddddabc') == True"], "prompt_tokens": 1067, "completion_tokens": 330, "duration": 9.530559539794922}
{"task_id": "HumanEval/55", "tests": ["assert fib(10) == 55", "assert fib(1) == 1", "assert fib(8) == 21"], "prompt_tokens": 853, "completion_tokens": 173, "duration": 3.40669584274292}
{"task_id": "HumanEval/56", "tests": ["assert correct_bracketing(\"<\") == False", "assert correct_bracketing(\"<>\") == True", "assert correct_bracketing(\"<<><>>\") == True", "assert correct_bracketing(\"><>\") == False"], "prompt_tokens": 951, "completion_tokens": 283, "duration": 4.682285308837891}
{"task_id": "HumanEval/57", "tests": ["assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([4, 1, 0, -10]) == True"], "prompt_tokens": 950, "completion_tokens": 261, "duration": 5.369664192199707}
{"task_id": "HumanEval/58", "tests": ["assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]"], "prompt_tokens": 1031, "completion_tokens": 257, "duration": 4.746527194976807}
{"task_id": "HumanEval/59", "tests": ["assert largest_prime_factor(13195) == 29", "assert largest_prime_factor(2048) == 2"], "prompt_tokens": 872, "completion_tokens": 135, "duration": 3.313157081604004}
{"task_id": "HumanEval/60", "tests": ["assert sum_to_n(100) == 5050", "assert sum_to_n(1) == 1", "assert sum_to_n(5) == 15"], "prompt_tokens": 955, "completion_tokens": 295, "duration": 5.971238136291504}
{"task_id": "HumanEval/61", "tests": ["assert correct_bracketing(\"(\") == False", "assert correct_bracketing(\"()\") == True", "assert correct_bracketing(\"(()())\") == True", "assert correct_bracketing(\")(())\") == False"], "prompt_tokens": 945, "completion_tokens": 287, "duration": 5.043645620346069}
{"task_id": "HumanEval/62", "tests": ["assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]", "assert derivative([1, 2, 3]) == [2, 6]"], "prompt_tokens": 986, "completion_tokens": 177, "duration": 4.191173553466797}
{"task_id": "HumanEval/63", "tests": ["assert fibfib(1) == 0", "assert fibfib(2) == 1", "assert fibfib(5) == 4", "assert fibfib(8) == 24"], "prompt_tokens": 1060, "completion_tokens": 290, "duration": 5.562924146652222}
{"task_id": "HumanEval/64", "tests": ["assert vowels_count(\"abcde\") == 2", "assert vowels_count(\"ACEDY\") == 3"], "prompt_tokens": 1017, "completion_tokens": 275, "duration": 5.752875566482544}
{"task_id": "HumanEval/65", "tests": ["assert circular_shift(12345, 5) == '12345'", "assert circular_shift(12345, 1) == '51234'", "assert circular_shift(12345, 3) == '34512'", "assert circular_shift(12345, 4) == '23451'"], "prompt_tokens": 946, "completion_tokens": 362, "duration": 6.219373464584351}
{"task_id": "HumanEval/66", "tests": ["assert digitSum(\"abcCd\") == 67", "assert digitSum(\"aAaaaXa\") == 153", "assert digitSum(\"abAB\") == 131", "assert digitSum(\"helloE\") == 69"], "prompt_tokens": 993, "completion_tokens": 298, "duration": 7.059239387512207}
{"task_id": "HumanEval/67", "tests": ["assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8", "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2", "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95", "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19"], "prompt_tokens": 1214, "completion_tokens": 348, "duration": 5.812052249908447}
{"task_id": "HumanEval/68", "tests": ["assert pluck([4, 2, 3]) == [2, 1]", "assert pluck([1, 2, 3]) == [2, 1]", "assert pluck([]) == []", "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]"], "prompt_tokens": 1419, "completion_tokens": 348, "duration": 7.121109485626221}
{"task_id": "HumanEval/69", "tests": ["assert search([4, 1, 2, 2, 3, 1]) == 2", "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3", "assert search([5, 5, 4, 4, 4]) == -1"], "prompt_tokens": 1130, "completion_tokens": 286, "duration": 5.137366056442261}
{"task_id": "HumanEval/70", "tests": ["assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]", "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert strange_sort_list([]) == []"], "prompt_tokens": 1036, "completion_tokens": 324, "duration": 6.26028037071228}
{"task_id": "HumanEval/71", "tests": ["assert triangle_area(7, 24, 25) == 84.00", "assert triangle_area(1, 2, 10) == -1", "assert triangle_area(8, 15, 17) == 60.00", "assert triangle_area(5, 12, 13) == 30.00"], "prompt_tokens": 1034, "completion_tokens": 398, "duration": 6.680475234985352}
{"task_id": "HumanEval/72", "tests": ["assert will_it_fly([1, 2], 5) == False", "assert will_it_fly([3, 2, 3], 1) == False", "assert will_it_fly([3, 2, 3], 9) == True", "assert will_it_fly([3], 5) == True"], "prompt_tokens": 1253, "completion_tokens": 375, "duration": 7.618939399719238}
{"task_id": "HumanEval/73", "tests": ["assert smallest_change([1,2,3,5,4,7,9,6]) == 4", "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1", "assert smallest_change([1, 2, 3, 2, 1]) == 0"], "prompt_tokens": 1110, "completion_tokens": 282, "duration": 5.3659679889678955}
{"task_id": "HumanEval/74", "tests": ["assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']", "assert total_match([], []) == []", "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']", "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']"], "prompt_tokens": 1194, "completion_tokens": 422, "duration": 8.444642305374146}
{"task_id": "HumanEval/75", "tests": ["assert is_multiply_prime(30) == True", "assert is_multiply_prime(6) == False", "assert is_multiply_prime(24) == False", "assert is_multiply_prime(77) == False"], "prompt_tokens": 920, "completion_tokens": 324, "duration": 5.580498933792114}
{"task_id": "HumanEval/76", "tests": ["assert is_simple_power(3, 2) == False", "assert is_simple_power(3, 1) == False", "assert is_simple_power(2, 2) == True", "assert is_simple_power(1, 4) == True"], "prompt_tokens": 1058, "completion_tokens": 320, "duration": 5.957770586013794}
{"task_id": "HumanEval/77", "tests": ["assert iscube(180) == False", "assert iscube(0) == True", "assert iscube(1) == True", "assert iscube(2) == False"], "prompt_tokens": 978, "completion_tokens": 242, "duration": 4.518125772476196}
{"task_id": "HumanEval/78", "tests": ["assert hex_key(\"ABED1A33\") == 4", "assert hex_key(\"1077E\") == 2", "assert hex_key(\"2020\") == 2", "assert hex_key(\"123456789ABCDEF0\") == 6"], "prompt_tokens": 1372, "completion_tokens": 279, "duration": 5.682440757751465}
{"task_id": "HumanEval/79", "tests": ["assert decimal_to_binary(0) == \"db0db\"", "assert decimal_to_binary(32) == \"db100000db\"", "assert decimal_to_binary(100) == \"db1100100db\"", "assert decimal_to_binary(15) == \"db1111db\""], "prompt_tokens": 1056, "completion_tokens": 367, "duration": 11.84813404083252}
{"task_id": "HumanEval/80", "tests": ["assert is_happy(\"aa\") == False", "assert is_happy(\"a\") == False", "assert is_happy(\"adb\") == True", "assert is_happy(\"abcd\") == True"], "prompt_tokens": 1004, "completion_tokens": 343, "duration": 6.269404888153076}
{"task_id": "HumanEval/81", "tests": [], "prompt_tokens": 1442, "completion_tokens": 606, "duration": 12.986269235610962}
{"task_id": "HumanEval/82", "tests": ["assert prime_length('Hello') == True", "assert prime_length('abcdcba') == True", "assert prime_length('kittens') == True", "assert prime_length('orange') == False"], "prompt_tokens": 923, "completion_tokens": 266, "duration": 4.8002331256866455}
{"task_id": "HumanEval/83", "tests": ["assert starts_one_ends(15) == 3", "assert starts_one_ends(10) == 2", "assert starts_one_ends(100) == 20", "assert starts_one_ends(111) == 30"], "prompt_tokens": 854, "completion_tokens": 380, "duration": 8.949415683746338}
{"task_id": "HumanEval/84", "tests": ["assert solve(150) == \"110\"", "assert solve(10) == \"1\"", "assert solve(0) == \"0\"", "assert solve(1000) == \"1\""], "prompt_tokens": 1025, "completion_tokens": 299, "duration": 5.196254730224609}
{"task_id": "HumanEval/85", "tests": ["assert add([4, 2, 6, 7]) == 2", "assert add([1, 3, 5, 7]) == 0", "assert add([2, 4, 6, 8]) == 0", "assert add([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6"], "prompt_tokens": 919, "completion_tokens": 365, "duration": 5.5553224086761475}
{"task_id": "HumanEval/86", "tests": ["assert anti_shuffle('Hi') == 'Hi'", "assert anti_shuffle('hello') == 'ehllo'", "assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'"], "prompt_tokens": 1020, "completion_tokens": 235, "duration": 5.989226818084717}
{"task_id": "HumanEval/87", "tests": ["assert get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]", "assert get_row([], 1) == []", "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"], "prompt_tokens": 1357, "completion_tokens": 392, "duration": 9.705347299575806}
{"task_id": "HumanEval/88", "tests": ["assert sort_array([]) == []", "assert sort_array([5]) == [5]", "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]", "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"], "prompt_tokens": 1231, "completion_tokens": 402, "duration": 7.753694295883179}
{"task_id": "HumanEval/89", "tests": ["assert encrypt('hi') == 'lm'", "assert encrypt('asdfghjkl') == 'ewhjklnop'", "assert encrypt('gf') == 'kj'", "assert encrypt('et') == 'ix'"], "prompt_tokens": 985, "completion_tokens": 314, "duration": 7.628185510635376}
{"task_id": "HumanEval/90", "tests": ["assert next_smallest([1, 2, 3, 4, 5]) == 2", "assert next_smallest([5, 1, 4, 3, 2]) == 2", "assert next_smallest([]) == None", "assert next_smallest([1, 1]) == None"], "prompt_tokens": 1038, "completion_tokens": 334, "duration": 5.799248695373535}
{"task_id": "HumanEval/91", "tests": ["assert is_bored(\"Hello world\") == 0", "assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1", "assert is_bored(\"I like to code. I am learning Python. I want to improve my skills.\") == 3", "assert is_bored(\"I am happy. I am sad. I am confused.\") == 3"], "prompt_tokens": 1019, "completion_tokens": 369, "duration": 7.2313525676727295}
{"task_id": "HumanEval/92", "tests": ["assert any_int(5, 2, 7) == True", "assert any_int(3, 2, 2) == False", "assert any_int(3, -2, 1) == True", "assert any_int(3.6, -2.2, 2) == False"], "prompt_tokens": 1056, "completion_tokens": 272, "duration": 5.2494893074035645}
{"task_id": "HumanEval/93", "tests": ["assert encode('test') == 'TGST'", "assert encode('This is a message') == 'tHKS KS C MGSSCGG'"], "prompt_tokens": 970, "completion_tokens": 165, "duration": 3.5788216590881348}
{"task_id": "HumanEval/94", "tests": [], "prompt_tokens": 1457, "completion_tokens": 621, "duration": 9.13090443611145}
{"task_id": "HumanEval/95", "tests": ["assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False", "assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False", "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True", "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False"], "prompt_tokens": 1143, "completion_tokens": 388, "duration": 6.913418292999268}
{"task_id": "HumanEval/96", "tests": ["assert count_up_to(5) == [2, 3]", "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]", "assert count_up_to(11) == [2, 3, 5, 7]", "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]"], "prompt_tokens": 1107, "completion_tokens": 405, "duration": 7.322188138961792}
{"task_id": "HumanEval/97", "tests": ["assert multiply(148, 412) == 16", "assert multiply(19, 28) == 72", "assert multiply(2020, 1851) == 0", "assert multiply(14, -15) == 20"], "prompt_tokens": 968, "completion_tokens": 250, "duration": 8.445948600769043}
{"task_id": "HumanEval/98", "tests": ["assert count_upper('aBCdEf') == 1", "assert count_upper('abcdefg') == 0", "assert count_upper('dBBE') == 0"], "prompt_tokens": 902, "completion_tokens": 265, "duration": 7.118661642074585}
{"task_id": "HumanEval/99", "tests": ["assert closest_integer(\"0\") == 0", "assert closest_integer(\"14.5\") == 15", "assert closest_integer(\"10\") == 10", "assert closest_integer(\"-14.5\") == -15"], "prompt_tokens": 1078, "completion_tokens": 293, "duration": 5.794787645339966}
{"task_id": "HumanEval/100", "tests": ["assert make_a_pile(1) == [1]", "assert make_a_pile(3) == [3, 5, 7]", "assert make_a_pile(4) == [4, 6, 8, 10]", "assert make_a_pile(2) == [2, 4]"], "prompt_tokens": 1052, "completion_tokens": 357, "duration": 6.066871166229248}
{"task_id": "HumanEval/101", "tests": ["assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]", "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"], "prompt_tokens": 1016, "completion_tokens": 246, "duration": 4.070847749710083}
{"task_id": "HumanEval/102", "tests": ["assert choose_num(1, 10) == 10", "assert choose_num(2, 4) == 4", "assert choose_num(8, 11) == 10", "assert choose_num(13, 12) == -1"], "prompt_tokens": 962, "completion_tokens": 343, "duration": 6.373419523239136}
{"task_id": "HumanEval/103", "tests": ["assert rounded_avg(1, 5) == \"0b11\"", "assert rounded_avg(7, 5) == -1", "assert rounded_avg(10, 20) == \"0b1111\"", "assert rounded_avg(20, 33) == \"0b11010\""], "prompt_tokens": 1062, "completion_tokens": 341, "duration": 5.934052228927612}
{"task_id": "HumanEval/104", "tests": ["assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]", "assert unique_digits([152, 323, 1422, 10]) == []"], "prompt_tokens": 970, "completion_tokens": 196, "duration": 5.379619121551514}
{"task_id": "HumanEval/105", "tests": ["assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]", "assert by_length([]) == []"], "prompt_tokens": 1349, "completion_tokens": 296, "duration": 4.842806100845337}
{"task_id": "HumanEval/106", "tests": ["assert f(5) == [1, 2, 6, 24, 15]", "assert f(4) == [1, 2, 6, 24]", "assert f(3) == [1, 2, 6]", "assert f(1) == [1]"], "prompt_tokens": 1033, "completion_tokens": 333, "duration": 5.743111610412598}
{"task_id": "HumanEval/107", "tests": ["assert even_odd_palindrome(11) == (4, 5)", "assert even_odd_palindrome(3) == (1, 2)", "assert even_odd_palindrome(1) == (0, 1)", "assert even_odd_palindrome(100) == (20, 30)"], "prompt_tokens": 1204, "completion_tokens": 386, "duration": 8.083261013031006}
{"task_id": "HumanEval/108", "tests": ["assert count_nums([-123, 456, -789]) == 3", "assert count_nums([0, 0, 0]) == 0", "assert count_nums([1, 1, 2]) == 3", "assert count_nums([]) == 0"], "prompt_tokens": 1027, "completion_tokens": 339, "duration": 7.579333543777466}
{"task_id": "HumanEval/109", "tests": ["assert move_one_ball([3, 4, 5, 1, 2]) == True", "assert move_one_ball([]) == True", "assert move_one_ball([1, 2, 3, 4, 5]) == True", "assert move_one_ball([3, 5, 4, 1, 2]) == False"], "prompt_tokens": 1395, "completion_tokens": 365, "duration": 39.7719144821167}
{"task_id": "HumanEval/110", "tests": ["assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"YES\"", "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"", "assert exchange([1, 3, 5, 7], [2, 4, 6, 8]) == \"YES\"", "assert exchange([1, 3, 5, 7], [1, 3, 5, 7]) == \"NO\""], "prompt_tokens": 1236, "completion_tokens": 491, "duration": 8.145992517471313}
{"task_id": "HumanEval/111", "tests": ["assert histogram('b b b b a') == {'b': 4}", "assert histogram('') == {}", "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}", "assert histogram('a b c a b') == {'a': 2, 'b': 2}"], "prompt_tokens": 1094, "completion_tokens": 356, "duration": 10.336920022964478}
{"task_id": "HumanEval/112", "tests": ["assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)", "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)", "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)"], "prompt_tokens": 1097, "completion_tokens": 326, "duration": 5.2766029834747314}
{"task_id": "HumanEval/113", "tests": ["assert odd_count(['3', '11111111']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"], "prompt_tokens": 1154, "completion_tokens": 286, "duration": 5.349500417709351}
{"task_id": "HumanEval/114", "tests": ["assert minSubArraySum([-1, -2, -3]) == -6", "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1"], "prompt_tokens": 991, "completion_tokens": 525, "duration": 8.45327353477478}
{"task_id": "HumanEval/115", "tests": ["assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6", "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5", "assert max_fill([[0,0,0], [0,0,0]], 5) == 0"], "prompt_tokens": 1475, "completion_tokens": 358, "duration": 5.665127992630005}
{"task_id": "HumanEval/116", "tests": ["assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]", "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]", "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]"], "prompt_tokens": 1164, "completion_tokens": 366, "duration": 6.235687255859375}
{"task_id": "HumanEval/117", "tests": ["assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]", "assert select_words(\"simple white space\", 2) == []"], "prompt_tokens": 1151, "completion_tokens": 349, "duration": 5.610661268234253}
{"task_id": "HumanEval/118", "tests": ["assert get_closest_vowel(\"hello\") == \"e\"", "assert get_closest_vowel(\"quick\") == \"\"", "assert get_closest_vowel(\"yogurt\") == \"u\"", "assert get_closest_vowel(\"FULL\") == \"U\""], "prompt_tokens": 1072, "completion_tokens": 337, "duration": 7.379356145858765}
{"task_id": "HumanEval/119", "tests": ["assert match_parens([')', ')']) == 'No'", "assert match_parens(['()(', ')']) == 'Yes'", "assert match_parens(['(', '(']) == 'No'", "assert match_parens(['(', ')']) == 'Yes'"], "prompt_tokens": 1111, "completion_tokens": 321, "duration": 6.041073799133301}
{"task_id": "HumanEval/120", "tests": ["assert maximum([-3, -4, 5], 3) == [-4, -3, 5]", "assert maximum([4, -4, 4], 2) == [4, 4]", "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]"], "prompt_tokens": 1231, "completion_tokens": 319, "duration": 5.861889123916626}
{"task_id": "HumanEval/121", "tests": ["assert solution([5, 8, 7, 1]) == 12", "assert solution([3, 3, 3, 3, 3]) == 9", "assert solution([30, 13, 24, 321]) == 0"], "prompt_tokens": 973, "completion_tokens": 279, "duration": 5.0760204792022705}
{"task_id": "HumanEval/122", "tests": ["assert add_elements([10, 20, 30, 40, 50, 60, 70, 80, 90], 3) == 60", "assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24", "assert add_elements([11, 22, 33, 44, 55, 66, 77, 88, 99], 9) == 495", "assert add_elements([100, 200, 300, 400, 500, 600, 700, 800, 900], 2) == 300"], "prompt_tokens": 1119, "completion_tokens": 517, "duration": 10.342040061950684}
{"task_id": "HumanEval/123", "tests": ["assert get_odd_collatz(5) == [1, 5]", "assert get_odd_collatz(1) == [1]"], "prompt_tokens": 1253, "completion_tokens": 369, "duration": 5.907823801040649}
{"task_id": "HumanEval/124", "tests": ["assert valid_date('03-11-2000') == True", "assert valid_date('06-04-2020') == True", "assert valid_date('06/04/2020') == False", "assert valid_date('15-01-2012') == False"], "prompt_tokens": 1304, "completion_tokens": 344, "duration": 5.747845888137817}
{"task_id": "HumanEval/125", "tests": ["assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]", "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]", "assert split_words(\"abcdef\") == 3"], "prompt_tokens": 1043, "completion_tokens": 249, "duration": 7.608868837356567}
{"task_id": "HumanEval/126", "tests": ["assert is_sorted([1, 2, 2, 3, 3, 4]) == True", "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True", "assert is_sorted([1, 2, 3, 4, 5]) == True", "assert is_sorted([1, 3, 2, 4, 5]) == False"], "prompt_tokens": 1313, "completion_tokens": 466, "duration": 8.559453248977661}
{"task_id": "HumanEval/127", "tests": ["assert intersection((2, 5), (6, 8)) == \"NO\"", "assert intersection((0, 0), (1, 1)) == \"NO\"", "assert intersection((1, 2), (2, 3)) == \"NO\""], "prompt_tokens": 1302, "completion_tokens": 411, "duration": 7.473445415496826}
{"task_id": "HumanEval/128", "tests": ["assert prod_signs([1, 2, 2, -4]) == -9", "assert prod_signs([0, 1]) == 0", "assert prod_signs([]) == None"], "prompt_tokens": 1009, "completion_tokens": 232, "duration": 4.390838146209717}
{"task_id": "HumanEval/129", "tests": ["assert minPath([[1,2,3], [4,5,6], [7,8,9]], 3) == [1, 2, 1]", "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]"], "prompt_tokens": 1582, "completion_tokens": 249, "duration": 4.370343923568726}
{"task_id": "HumanEval/130", "tests": ["assert tri(2) == [3, 1, 2]", "assert tri(1) == [3, 1]"], "prompt_tokens": 1258, "completion_tokens": 351, "duration": 6.784970283508301}
{"task_id": "HumanEval/131", "tests": ["assert digits(4) == 0", "assert digits(987654321) == 945", "assert digits(2468) == 0", "assert digits(1) == 1"], "prompt_tokens": 903, "completion_tokens": 293, "duration": 5.11394739151001}
{"task_id": "HumanEval/132", "tests": ["assert is_nested('[][]') == False", "assert is_nested('[[][]]') == True", "assert is_nested('[[]][[') == True", "assert is_nested('[]') == False"], "prompt_tokens": 1027, "completion_tokens": 287, "duration": 5.2083680629730225}
{"task_id": "HumanEval/133", "tests": ["assert sum_squares([-2.4, 1, 1]) == 6", "assert sum_squares([1, 4, 9]) == 98", "assert sum_squares([1.4, 4.2, 0]) == 29", "assert sum_squares([1, 3, 5, 7]) == 84"], "prompt_tokens": 1113, "completion_tokens": 343, "duration": 6.427999496459961}
{"task_id": "HumanEval/134", "tests": ["assert check_if_last_char_is_a_letter(\"12345a\") == True", "assert check_if_last_char_is_a_letter(\"12345 a \") == False", "assert check_if_last_char_is_a_letter(\"apple pie\") == False", "assert check_if_last_char_is_a_letter(\"apple pi e \") == False"], "prompt_tokens": 1068, "completion_tokens": 456, "duration": 7.851834297180176}
{"task_id": "HumanEval/135", "tests": ["assert can_arrange([10, 8, 6, 7, 5, 3]) == 2", "assert can_arrange([1, 3, 5, 7, 6, 4, 2]) == 4", "assert can_arrange([1,2,3]) == -1"], "prompt_tokens": 1017, "completion_tokens": 461, "duration": 7.744260549545288}
{"task_id": "HumanEval/136", "tests": ["assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)", "assert largest_smallest_integers([2, 4, -1, 3, 5, -7]) == (None, -1)", "assert largest_smallest_integers([-2, -4, -1, -3, -5, -7]) == (-1, None)", "assert largest_smallest_integers([]) == (None, None)"], "prompt_tokens": 1104, "completion_tokens": 413, "duration": 6.760818958282471}
{"task_id": "HumanEval/137", "tests": ["assert compare_one(1, 2.5) == 2.5", "assert compare_one(1, \"2,3\") == \"2,3\"", "assert compare_one(\"5,1\", \"6\") == \"6\"", "assert compare_one(\"1\", 1) == None"], "prompt_tokens": 1065, "completion_tokens": 320, "duration": 5.662553071975708}
{"task_id": "HumanEval/138", "tests": ["assert is_equal_to_sum_even(6) == False", "assert is_equal_to_sum_even(10) == False", "assert is_equal_to_sum_even(8) == True", "assert is_equal_to_sum_even(4) == False"], "prompt_tokens": 924, "completion_tokens": 292, "duration": 6.788028955459595}
{"task_id": "HumanEval/139", "tests": ["assert special_factorial(1) == 1"], "prompt_tokens": 957, "completion_tokens": 357, "duration": 8.121668100357056}
{"task_id": "HumanEval/140", "tests": ["assert fix_spaces(\"Example\") == \"Example\"", "assert fix_spaces(\"Example 1\") == \"Example_1\"", "assert fix_spaces(\" Example 2\") == \"_Example_2\"", "assert fix_spaces(\" Example   3\") == \"_Example-3\""], "prompt_tokens": 987, "completion_tokens": 309, "duration": 5.713912010192871}
{"task_id": "HumanEval/141", "tests": ["assert file_name_check(\"example.txt\") == 'Yes'", "assert file_name_check(\"file.txt\") == 'Yes'", "assert file_name_check(\"file_name.123\") == 'No'", "assert file_name_check(\"file.name.txt\") == 'No'"], "prompt_tokens": 1201, "completion_tokens": 326, "duration": 6.138067007064819}
{"task_id": "HumanEval/142", "tests": ["assert sum_squares([]) == 0", "assert sum_squares([-1, -5, 2, -1, -5]) == -126", "assert sum_squares([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 285", "assert sum_squares([1, 2, 3]) == 6"], "prompt_tokens": 1150, "completion_tokens": 372, "duration": 6.385393857955933}
{"task_id": "HumanEval/143", "tests": ["assert words_in_sentence(\"This is a test\") == \"is\"", "assert words_in_sentence(\"lets go for swimming\") == \"go for\""], "prompt_tokens": 1045, "completion_tokens": 163, "duration": 7.230392217636108}
{"task_id": "HumanEval/144", "tests": ["assert simplify(\"1/5\", \"5/1\") == True", "assert simplify(\"1/6\", \"2/1\") == False"], "prompt_tokens": 1077, "completion_tokens": 260, "duration": 7.126977443695068}
{"task_id": "HumanEval/145", "tests": ["assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]", "assert order_by_points([]) == []"], "prompt_tokens": 995, "completion_tokens": 192, "duration": 4.066227436065674}
{"task_id": "HumanEval/146", "tests": ["assert specialFilter([10, 20, 30, 40, 50, 60, 70, 80, 90]) == 0", "assert specialFilter([22, 24, 26, 28, 31, 33, 35, 37, 39]) == 3", "assert specialFilter([15, -73, 14, -15]) == 1", "assert specialFilter([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 5"], "prompt_tokens": 1084, "completion_tokens": 468, "duration": 10.341429948806763}
{"task_id": "HumanEval/147", "tests": ["assert get_max_triples(3) == 1", "assert get_max_triples(1) == 0", "assert get_max_triples(2) == 0", "assert get_max_triples(5) == 4"], "prompt_tokens": 1100, "completion_tokens": 302, "duration": 7.587299108505249}
{"task_id": "HumanEval/148", "tests": ["assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "assert bf(\"Pluto\", \"Mars\") == ()", "assert bf(\"Mars\", \"Venus\") == (\"Earth\")", "assert bf(\"Earth\", \"Mercury\") == (\"Venus\")"], "prompt_tokens": 1215, "completion_tokens": 364, "duration": 9.722491979598999}
{"task_id": "HumanEval/149", "tests": ["assert sorted_list_sum([\"abc\", \"def\", \"ghi\", \"jkl\"]) == [\"abc\", \"def\", \"ghi\", \"jkl\"]", "assert sorted_list_sum([\"apple\", \"banana\", \"cherry\", \"date\"]) == [\"apple\", \"date\"]", "assert sorted_list_sum([\"abcd\", \"efgh\", \"ijkl\", \"mnop\"]) == []", "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]"], "prompt_tokens": 1187, "completion_tokens": 415, "duration": 10.12360143661499}
{"task_id": "HumanEval/150", "tests": ["assert x_or_y(2, 100, 200) == 100", "assert x_or_y(15, 8, 5) == 5", "assert x_or_y(7, 34, 12) == 34", "assert x_or_y(4, 4, 16) == 16"], "prompt_tokens": 962, "completion_tokens": 401, "duration": 6.047379732131958}
{"task_id": "HumanEval/151", "tests": ["assert double_the_difference([-1, -2, 0]) == 0", "assert double_the_difference([]) == 0", "assert double_the_difference([1, 3, 2, 0]) == 10", "assert double_the_difference([9, -2]) == 81"], "prompt_tokens": 1057, "completion_tokens": 344, "duration": 7.184910297393799}
{"task_id": "HumanEval/152", "tests": ["assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]", "assert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]"], "prompt_tokens": 1264, "completion_tokens": 255, "duration": 4.258314847946167}
{"task_id": "HumanEval/153", "tests": ["assert Strongest_Extension('example', ['ExAmPle', 'exAMPle', 'EXAMPLE']) == 'example.ExAmPle'", "assert Strongest_Extension('test_class', ['aBc', 'DeF', 'GhI']) == 'test_class.DeF'", "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'", "assert Strongest_Extension('class2', ['zZzZ', 'YyYy', 'XxXx']) == 'class2.zZzZ'"], "prompt_tokens": 1397, "completion_tokens": 516, "duration": 9.5626802444458}
{"task_id": "HumanEval/154", "tests": ["assert cycpattern_check(\"abcd\",\"abd\") == False", "assert cycpattern_check(\"whassup\",\"psus\") == False", "assert cycpattern_check(\"himenss\",\"simen\") == True", "assert cycpattern_check(\"efef\",\"eeff\") == False"], "prompt_tokens": 1036, "completion_tokens": 353, "duration": 7.2103424072265625}
{"task_id": "HumanEval/155", "tests": ["assert even_odd_count(-12) == (1, 1)", "assert even_odd_count(13579) == (0, 5)", "assert even_odd_count(2468) == (4, 0)", "assert even_odd_count(111222333) == (3, 6)"], "prompt_tokens": 912, "completion_tokens": 359, "duration": 6.33003306388855}
{"task_id": "HumanEval/156", "tests": ["assert int_to_mini_roman(19) == 'xix'", "assert int_to_mini_roman(152) == 'clii'", "assert int_to_mini_roman(426) == 'cdxxvi'"], "prompt_tokens": 967, "completion_tokens": 207, "duration": 4.312057971954346}
{"task_id": "HumanEval/157", "tests": ["assert right_angle_triangle(6, 8, 10) == True", "assert right_angle_triangle(8, 15, 17) == True", "assert right_angle_triangle(5, 12, 13) == True", "assert right_angle_triangle(1, 2, 3) == False"], "prompt_tokens": 1002, "completion_tokens": 356, "duration": 6.280912160873413}
{"task_id": "HumanEval/158", "tests": ["assert find_max([\"name\", \"of\", \"string\"]) == \"string\"", "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"", "assert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\""], "prompt_tokens": 1014, "completion_tokens": 277, "duration": 5.532063722610474}
{"task_id": "HumanEval/159", "tests": ["assert eat(5, 6, 10) == [11, 4]", "assert eat(4, 8, 9) == [12, 1]", "assert eat(1, 10, 10) == [11, 0]", "assert eat(2, 11, 5) == [7, 0]"], "prompt_tokens": 1348, "completion_tokens": 332, "duration": 5.123378753662109}
{"task_id": "HumanEval/160", "tests": ["assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9", "assert do_algebra(['**', '+', '-'], [2, 3, 4, 5]) == -6", "assert do_algebra(['*', '+', '-'], [1, 2, 3, 4, 5]) == 0", "assert do_algebra(['-', '+', '*'], [5, 4, 3, 2]) == 3"], "prompt_tokens": 1243, "completion_tokens": 432, "duration": 8.037939310073853}
{"task_id": "HumanEval/161", "tests": ["assert solve(\"1234\") == \"4321\"", "assert solve(\"ab\") == \"AB\"", "assert solve(\"aBcDeF\") == \"AbCdEf\""], "prompt_tokens": 980, "completion_tokens": 277, "duration": 4.963714599609375}
{"task_id": "HumanEval/162", "tests": ["assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'", "assert string_to_md5('Python is awesome') == 'b6b6c1d2b1e4e3a5d8a5c0d0c8f4c7d1'", "assert string_to_md5('1234567890') == 'e807f1fcf82d132f9bb018ca6738a19f'", "assert string_to_md5('') == None"], "prompt_tokens": 992, "completion_tokens": 397, "duration": 6.180542469024658}
{"task_id": "HumanEval/163", "tests": ["assert generate_integers(2, 8) == [2, 4, 6, 8]", "assert generate_integers(8, 2) == [2, 4, 6, 8]", "assert generate_integers(10, 14) == []"], "prompt_tokens": 988, "completion_tokens": 278, "duration": 4.978928089141846}
