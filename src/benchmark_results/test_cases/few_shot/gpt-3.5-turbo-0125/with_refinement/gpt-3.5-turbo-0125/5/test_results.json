[
    {
        "task_id": "HumanEval/0",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
                "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
                "assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 0.2) == False",
                "assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 1.5) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1113,
        "completion_tokens": 508
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('()((()))()') == ['()', '((()))', '()']",
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('((()))') == ['((()))']",
                "assert separate_paren_groups('()()()()') == ['()', '()', '()', '()']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1030,
        "completion_tokens": 338
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(7.0) == 0.0",
                "assert truncate_number(0.123) == 0.123"
            ],
            "failed_tests": [
                "assert truncate_number(1.234) == 0.234 (AssertionError: )"
            ]
        },
        "prompt_tokens": 948,
        "completion_tokens": 322
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([-1, -2, -3]) == True",
                "assert below_zero([1, 2, 3]) == False",
                "assert below_zero([1, 2, -4, 5]) == True",
                "assert below_zero([0, 0, 0, 0]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1026,
        "completion_tokens": 343
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([5.0, 5.0, 5.0, 5.0]) == 0.0",
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
                "assert mean_absolute_deviation([0.0, 0.0, 0.0, 0.0]) == 0.0"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 1085,
        "completion_tokens": 453
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([], 4) == []",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 946,
        "completion_tokens": 172
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('((()(())))') == [4]",
                "assert parse_nested_parens('((()))') == [3]",
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]"
            ],
            "failed_tests": [
                "assert parse_nested_parens('((()()))') == [4] (AssertionError: )"
            ]
        },
        "prompt_tokens": 1021,
        "completion_tokens": 379
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring(['hello', 'world', 'python', 'programming'], 'ing') == ['programming']",
                "assert filter_by_substring([], 'a') == []",
                "assert filter_by_substring(['red', 'green', 'blue', 'yellow'], 'l') == ['blue', 'yellow']"
            ],
            "failed_tests": [
                "assert filter_by_substring(['apple', 'banana', 'cherry', 'date'], 'e') == ['apple', 'date'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 998,
        "completion_tokens": 437
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_product([0, 0, 0, 0]) == (0, 0)",
                "assert sum_product([1, 2, 3, 4]) == (10, 24)",
                "assert sum_product([5, 5, 5, 5]) == (20, 625)"
            ],
            "failed_tests": [
                "assert sum_product([-1, -2, -3, -4]) == (-10, -24) (AssertionError: )"
            ]
        },
        "prompt_tokens": 1030,
        "completion_tokens": 386
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
                "assert rolling_max([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
                "assert rolling_max([10, 5, 8, 12, 7]) == [10, 10, 10, 12, 12]"
            ],
            "failed_tests": [
                "assert rolling_max([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1] (AssertionError: )"
            ]
        },
        "prompt_tokens": 1070,
        "completion_tokens": 497
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_palindrome('') == ''",
                "assert make_palindrome('cata') == 'catac'",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('racecar') == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1049,
        "completion_tokens": 318
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('010', '110') == '100'",
                "assert string_xor('010', '000') == '010'",
                "assert string_xor('111', '111') == '000'",
                "assert string_xor('101', '111') == '010'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 926,
        "completion_tokens": 302
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest([]) == None",
                "assert longest(['a', 'bb', 'ccc']) == 'ccc'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 963,
        "completion_tokens": 221
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(3, 5) == 1",
                "assert greatest_common_divisor(25, 15) == 5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 892,
        "completion_tokens": 151
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
                "assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']",
                "assert all_prefixes('12345') == ['1', '12', '123', '1234', '12345']",
                "assert all_prefixes('') == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 914,
        "completion_tokens": 344
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(0) == '0'",
                "assert string_sequence(5) == '0 1 2 3 4 5'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 888,
        "completion_tokens": 153
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('xyzXYZ') == 3",
                "assert count_distinct_characters('Jerry') == 4"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 887,
        "completion_tokens": 176
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o o o o o o o o o o') == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]",
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"
            ],
            "failed_tests": [
                "assert parse_music('o o| o| o| o| o| o| o| o| o o') == [4, 2, 2, 2, 2, 2, 2, 2, 4, 4] (AssertionError: )",
                "assert parse_music('o| o| o| o| o| o| o| o| o| o|') == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2] (AssertionError: )"
            ]
        },
        "prompt_tokens": 1284,
        "completion_tokens": 734
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('', 'a') == 0",
                "assert how_many_times('aaa', 'a') == 3",
                "assert how_many_times('aaaa', 'aa') == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 938,
        "completion_tokens": 265
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('three one five') == 'one three five'",
                "assert sort_numbers('nine eight seven') == 'seven eight nine'",
                "assert sort_numbers('zero two four') == 'zero two four'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 974,
        "completion_tokens": 219
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1146,
        "completion_tokens": 285
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([5.0, 4.0, 3.0, 2.0, 1.0]) == [1.0, 0.75, 0.5, 0.25, 0.0]",
                "assert rescale_to_unit([10.0, 20.0, 30.0, 40.0, 50.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
            ],
            "failed_tests": [
                "assert rescale_to_unit([0.0, 0.0, 0.0, 0.0, 0.0]) == [0.0, 0.0, 0.0, 0.0, 0.0] (ZeroDivisionError: float division by zero)"
            ]
        },
        "prompt_tokens": 1192,
        "completion_tokens": 663
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]",
                "assert filter_integers([1, 2, 3]) == [1, 2, 3]",
                "assert filter_integers(['a', 3.14, 5]) == [5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 994,
        "completion_tokens": 403
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('') == 0",
                "assert strlen('abc') == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 825,
        "completion_tokens": 145
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(15) == 5",
                "assert largest_divisor(3) == 1",
                "assert largest_divisor(7) == 1",
                "assert largest_divisor(20) == 10"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 870,
        "completion_tokens": 287
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(8) == [2, 2, 2]",
                "assert factorize(25) == [5, 5]",
                "assert factorize(70) == [2, 5, 7]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1019,
        "completion_tokens": 228
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == []",
                "assert remove_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1]"
            ],
            "failed_tests": [
                "assert remove_duplicates([1, 1, 1, 1, 1]) == [1] (AssertionError: )"
            ]
        },
        "prompt_tokens": 1012,
        "completion_tokens": 458
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('Hello') == 'hELLO'",
                "assert flip_case('wORLD') == 'World'",
                "assert flip_case('123abcXYZ') == '123ABCxyz'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 855,
        "completion_tokens": 235
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate(['123', '456', '789']) == '123456789'",
                "assert concatenate([]) == ''",
                "assert concatenate(['apple', 'banana', 'cherry']) == 'applebananacherry'",
                "assert concatenate(['a', 'b', 'c']) == 'abc'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 894,
        "completion_tokens": 304
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['car', 'bus', 'train', 'bike'], 't') == ['train']",
                "assert filter_by_prefix(['sun', 'moon', 'star', 'planet'], 's') == ['sun', 'star']",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 982,
        "completion_tokens": 473
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
                "assert get_positive([-1, -2, -3]) == []",
                "assert get_positive([0, 0, 0]) == []",
                "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1062,
        "completion_tokens": 440
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(61) == True",
                "assert is_prime(1) == False",
                "assert is_prime(4) == False",
                "assert is_prime(101) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 956,
        "completion_tokens": 242
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert round(find_zero([1, 2]), 2) == -0.5",
                "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1284,
        "completion_tokens": 297
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]",
                "assert sort_third([1, 2, 3]) == [1, 2, 3]"
            ],
            "failed_tests": [
                "assert sort_third([9, 6, 3, 12, 15, 18, 21, 24]) == [3, 6, 9, 12, 15, 18, 21, 24] (AssertionError: )"
            ]
        },
        "prompt_tokens": 1200,
        "completion_tokens": 583
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([1, 1, 1, 1, 1]) == [1]",
                "assert unique([4, 3, 2, 1]) == [1, 2, 3, 4]",
                "assert unique([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1021,
        "completion_tokens": 529
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([1, 2, 3]) == 3",
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 942,
        "completion_tokens": 202
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(50) == 0",
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(79) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 913,
        "completion_tokens": 233
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]",
                "assert sort_even([9, 8, 7, 6, 5, 4]) == [5, 8, 7, 6, 9, 4]",
                "assert sort_even([1, 2, 3]) == [1, 2, 3]"
            ],
            "failed_tests": [
                "assert sort_even([1, 3, 5, 7, 9]) == [1, 9, 5, 7, 3] (AssertionError: )"
            ]
        },
        "prompt_tokens": 1092,
        "completion_tokens": 441
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert encode_cyclic(\"python\") == \"ythpon\" (AssertionError: )",
                "assert encode_cyclic(\"world\") == \"orldw\" (AssertionError: )",
                "assert encode_cyclic(\"abcdef\") == \"bcdefa\" (AssertionError: )",
                "assert encode_cyclic(\"hello\") == \"elloh\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 1087,
        "completion_tokens": 271
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(4) == 13",
                "assert prime_fib(3) == 5",
                "assert prime_fib(1) == 2",
                "assert prime_fib(2) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 960,
        "completion_tokens": 267
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True",
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
                "assert triples_sum_to_zero([1, 3, -2, 1]) == True",
                "assert triples_sum_to_zero([1]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1117,
        "completion_tokens": 362
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(1) == 1"
            ],
            "failed_tests": [
                "assert car_race_collision(10) == 10 (AssertionError: )",
                "assert car_race_collision(2) == 2 (AssertionError: )",
                "assert car_race_collision(3) == 3 (AssertionError: )"
            ]
        },
        "prompt_tokens": 1068,
        "completion_tokens": 297
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1018,
        "completion_tokens": 248
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True",
                "assert pairs_sum_to_zero([1, 2, 3, 7]) == False",
                "assert pairs_sum_to_zero([1, 3, 5, 0]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1122,
        "completion_tokens": 382
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert change_base(8, 3) == '22'",
                "assert change_base(8, 2) == '1000'",
                "assert change_base(7, 2) == '111'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 944,
        "completion_tokens": 237
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 829,
        "completion_tokens": 90
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib4(6) == 8",
                "assert fib4(7) == 14",
                "assert fib4(2) == 2",
                "assert fib4(4) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1104,
        "completion_tokens": 304
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert median([10, 20, 30, 40, 50]) == 30",
                "assert median([2, 4, 6, 8, 10, 12, 14, 16]) == 9.0",
                "assert median([3, 1, 2, 4, 5]) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 973,
        "completion_tokens": 521
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('') == True",
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('aaaaa') == True",
                "assert is_palindrome('zbcd') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 905,
        "completion_tokens": 258
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(0, 101) == 1",
                "assert modp(3, 11) == 8",
                "assert modp(3, 5) == 3",
                "assert modp(100, 101) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 984,
        "completion_tokens": 286
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decode_shift(\"fgh\") == \"abc\"",
                "assert decode_shift(\"btwqi\") == \"world\"",
                "assert encode_shift(\"z\") == \"e\"",
                "assert encode_shift(\"world\") == \"btwqi\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 947,
        "completion_tokens": 341
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('abcdef') == 'bcdf'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 979,
        "completion_tokens": 228
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 4, 10], 100) == True",
                "assert below_threshold([-1, -2, -3], 0) == True",
                "assert below_threshold([0, 0, 0], 1) == True",
                "assert below_threshold([1, 20, 4, 10], 5) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 958,
        "completion_tokens": 385
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(2, 3) == 5",
                "assert add(5, 7) == 12"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 852,
        "completion_tokens": 140
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
                "assert same_chars('abcd', 'dddddddabce') == False",
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('abcd', 'dddddddabc') == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1067,
        "completion_tokens": 330
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(10) == 55",
                "assert fib(1) == 1",
                "assert fib(8) == 21"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 853,
        "completion_tokens": 173
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"<\") == False",
                "assert correct_bracketing(\"<>\") == True",
                "assert correct_bracketing(\"<<><>>\") == True",
                "assert correct_bracketing(\"><>\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 951,
        "completion_tokens": 283
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 2, 4, 20]) == True",
                "assert monotonic([1, 20, 4, 10]) == False",
                "assert monotonic([4, 1, 0, -10]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 950,
        "completion_tokens": 261
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
                "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1031,
        "completion_tokens": 257
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(13195) == 29",
                "assert largest_prime_factor(2048) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 872,
        "completion_tokens": 135
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(100) == 5050",
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(5) == 15"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 955,
        "completion_tokens": 295
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"(\") == False",
                "assert correct_bracketing(\"()\") == True",
                "assert correct_bracketing(\"(()())\") == True",
                "assert correct_bracketing(\")(())\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 945,
        "completion_tokens": 287
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
                "assert derivative([1, 2, 3]) == [2, 6]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 986,
        "completion_tokens": 177
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(1) == 0",
                "assert fibfib(2) == 1",
                "assert fibfib(5) == 4",
                "assert fibfib(8) == 24"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1060,
        "completion_tokens": 290
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"abcde\") == 2",
                "assert vowels_count(\"ACEDY\") == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1017,
        "completion_tokens": 275
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12345, 5) == '12345'",
                "assert circular_shift(12345, 1) == '51234'",
                "assert circular_shift(12345, 3) == '34512'",
                "assert circular_shift(12345, 4) == '23451'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 946,
        "completion_tokens": 362
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"abcCd\") == 67",
                "assert digitSum(\"aAaaaXa\") == 153",
                "assert digitSum(\"abAB\") == 131",
                "assert digitSum(\"helloE\") == 69"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 993,
        "completion_tokens": 298
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
                "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
                "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95",
                "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1214,
        "completion_tokens": 348
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([4, 2, 3]) == [2, 1]",
                "assert pluck([1, 2, 3]) == [2, 1]",
                "assert pluck([]) == []",
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1419,
        "completion_tokens": 348
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert search([4, 1, 2, 2, 3, 1]) == 2",
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
                "assert search([5, 5, 4, 4, 4]) == -1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1130,
        "completion_tokens": 286
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1036,
        "completion_tokens": 324
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(7, 24, 25) == 84.00",
                "assert triangle_area(1, 2, 10) == -1",
                "assert triangle_area(8, 15, 17) == 60.00",
                "assert triangle_area(5, 12, 13) == 30.00"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1034,
        "completion_tokens": 398
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([1, 2], 5) == False",
                "assert will_it_fly([3, 2, 3], 1) == False",
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([3], 5) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1253,
        "completion_tokens": 375
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([1, 2, 3, 2, 1]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1110,
        "completion_tokens": 282
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']",
                "assert total_match([], []) == []",
                "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']",
                "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1194,
        "completion_tokens": 422
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(6) == False",
                "assert is_multiply_prime(24) == False",
                "assert is_multiply_prime(77) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 920,
        "completion_tokens": 324
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(3, 2) == False",
                "assert is_simple_power(3, 1) == False",
                "assert is_simple_power(2, 2) == True",
                "assert is_simple_power(1, 4) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1058,
        "completion_tokens": 320
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(180) == False",
                "assert iscube(0) == True",
                "assert iscube(1) == True",
                "assert iscube(2) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 978,
        "completion_tokens": 242
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"ABED1A33\") == 4",
                "assert hex_key(\"1077E\") == 2",
                "assert hex_key(\"2020\") == 2",
                "assert hex_key(\"123456789ABCDEF0\") == 6"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1372,
        "completion_tokens": 279
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(0) == \"db0db\"",
                "assert decimal_to_binary(32) == \"db100000db\"",
                "assert decimal_to_binary(100) == \"db1100100db\"",
                "assert decimal_to_binary(15) == \"db1111db\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1056,
        "completion_tokens": 367
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy(\"aa\") == False",
                "assert is_happy(\"a\") == False",
                "assert is_happy(\"adb\") == True",
                "assert is_happy(\"abcd\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1004,
        "completion_tokens": 343
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": true,
        "test_results": {
            "passed_tests": [],
            "failed_tests": []
        },
        "prompt_tokens": 1442,
        "completion_tokens": 606
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('Hello') == True",
                "assert prime_length('abcdcba') == True",
                "assert prime_length('kittens') == True",
                "assert prime_length('orange') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 923,
        "completion_tokens": 266
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert starts_one_ends(15) == 3 (AssertionError: )",
                "assert starts_one_ends(10) == 2 (AssertionError: )",
                "assert starts_one_ends(100) == 20 (AssertionError: )",
                "assert starts_one_ends(111) == 30 (AssertionError: )"
            ]
        },
        "prompt_tokens": 854,
        "completion_tokens": 380
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(150) == \"110\"",
                "assert solve(10) == \"1\"",
                "assert solve(0) == \"0\"",
                "assert solve(1000) == \"1\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1025,
        "completion_tokens": 299
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2",
                "assert add([1, 3, 5, 7]) == 0"
            ],
            "failed_tests": [
                "assert add([2, 4, 6, 8]) == 0 (AssertionError: )",
                "assert add([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6 (AssertionError: )"
            ]
        },
        "prompt_tokens": 919,
        "completion_tokens": 365
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('Hi') == 'Hi'",
                "assert anti_shuffle('hello') == 'ehllo'",
                "assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1020,
        "completion_tokens": 235
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
                "assert get_row([], 1) == []",
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1357,
        "completion_tokens": 392
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_array([]) == []",
                "assert sort_array([5]) == [5]",
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1231,
        "completion_tokens": 402
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encrypt('hi') == 'lm'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('gf') == 'kj'",
                "assert encrypt('et') == 'ix'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 985,
        "completion_tokens": 314
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([1, 2, 3, 4, 5]) == 2",
                "assert next_smallest([5, 1, 4, 3, 2]) == 2",
                "assert next_smallest([]) == None",
                "assert next_smallest([1, 1]) == None"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1038,
        "completion_tokens": 334
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"Hello world\") == 0",
                "assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1",
                "assert is_bored(\"I like to code. I am learning Python. I want to improve my skills.\") == 3",
                "assert is_bored(\"I am happy. I am sad. I am confused.\") == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1019,
        "completion_tokens": 369
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(5, 2, 7) == True",
                "assert any_int(3, 2, 2) == False",
                "assert any_int(3, -2, 1) == True",
                "assert any_int(3.6, -2.2, 2) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1056,
        "completion_tokens": 272
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'",
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 970,
        "completion_tokens": 165
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [],
            "failed_tests": []
        },
        "prompt_tokens": 1457,
        "completion_tokens": 621
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False",
                "assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False",
                "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
                "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1143,
        "completion_tokens": 388
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(5) == [2, 3]",
                "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1107,
        "completion_tokens": 405
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert multiply(148, 412) == 16",
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(14, -15) == 20"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 968,
        "completion_tokens": 250
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_upper('aBCdEf') == 1",
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('dBBE') == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 902,
        "completion_tokens": 265
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"0\") == 0",
                "assert closest_integer(\"14.5\") == 15",
                "assert closest_integer(\"10\") == 10",
                "assert closest_integer(\"-14.5\") == -15"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1078,
        "completion_tokens": 293
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(3) == [3, 5, 7]",
                "assert make_a_pile(4) == [4, 6, 8, 10]",
                "assert make_a_pile(2) == [2, 4]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1052,
        "completion_tokens": 357
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]",
                "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1016,
        "completion_tokens": 246
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(1, 10) == 10",
                "assert choose_num(2, 4) == 4",
                "assert choose_num(8, 11) == 10",
                "assert choose_num(13, 12) == -1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 962,
        "completion_tokens": 343
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(1, 5) == \"0b11\"",
                "assert rounded_avg(7, 5) == -1",
                "assert rounded_avg(10, 20) == \"0b1111\"",
                "assert rounded_avg(20, 33) == \"0b11010\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1062,
        "completion_tokens": 341
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([152, 323, 1422, 10]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 970,
        "completion_tokens": 196
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]",
                "assert by_length([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1349,
        "completion_tokens": 296
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(5) == [1, 2, 6, 24, 15]",
                "assert f(4) == [1, 2, 6, 24]",
                "assert f(3) == [1, 2, 6]",
                "assert f(1) == [1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1033,
        "completion_tokens": 333
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(3) == (1, 2)",
                "assert even_odd_palindrome(1) == (0, 1)"
            ],
            "failed_tests": [
                "assert even_odd_palindrome(11) == (4, 5) (AssertionError: )",
                "assert even_odd_palindrome(100) == (20, 30) (AssertionError: )"
            ]
        },
        "prompt_tokens": 1204,
        "completion_tokens": 386
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_nums([-123, 456, -789]) == 3",
                "assert count_nums([0, 0, 0]) == 0",
                "assert count_nums([1, 1, 2]) == 3",
                "assert count_nums([]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1027,
        "completion_tokens": 339
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([3, 4, 5, 1, 2]) == True",
                "assert move_one_ball([]) == True",
                "assert move_one_ball([1, 2, 3, 4, 5]) == True",
                "assert move_one_ball([3, 5, 4, 1, 2]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1395,
        "completion_tokens": 365
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"YES\"",
                "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"",
                "assert exchange([1, 3, 5, 7], [2, 4, 6, 8]) == \"YES\"",
                "assert exchange([1, 3, 5, 7], [1, 3, 5, 7]) == \"NO\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1236,
        "completion_tokens": 491
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('') == {}",
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('a b c a b') == {'a': 2, 'b': 2}"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1094,
        "completion_tokens": 356
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
                "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)",
                "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1097,
        "completion_tokens": 326
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['3', '11111111']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1154,
        "completion_tokens": 286
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([-1, -2, -3]) == -6",
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 991,
        "completion_tokens": 525
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1475,
        "completion_tokens": 358
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] (AssertionError: )",
                "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] (AssertionError: )",
                "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4] (AssertionError: )"
            ]
        },
        "prompt_tokens": 1164,
        "completion_tokens": 366
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
                "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
                "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]",
                "assert select_words(\"simple white space\", 2) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1151,
        "completion_tokens": 349
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"hello\") == \"e\"",
                "assert get_closest_vowel(\"quick\") == \"\"",
                "assert get_closest_vowel(\"yogurt\") == \"u\"",
                "assert get_closest_vowel(\"FULL\") == \"U\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1072,
        "completion_tokens": 337
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert match_parens([')', ')']) == 'No'",
                "assert match_parens(['()(', ')']) == 'Yes'",
                "assert match_parens(['(', '(']) == 'No'",
                "assert match_parens(['(', ')']) == 'Yes'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1111,
        "completion_tokens": 321
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
                "assert maximum([4, -4, 4], 2) == [4, 4]",
                "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1231,
        "completion_tokens": 319
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9",
                "assert solution([30, 13, 24, 321]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 973,
        "completion_tokens": 279
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add_elements([10, 20, 30, 40, 50, 60, 70, 80, 90], 3) == 60",
                "assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24",
                "assert add_elements([11, 22, 33, 44, 55, 66, 77, 88, 99], 9) == 495"
            ],
            "failed_tests": [
                "assert add_elements([100, 200, 300, 400, 500, 600, 700, 800, 900], 2) == 300 (AssertionError: )"
            ]
        },
        "prompt_tokens": 1119,
        "completion_tokens": 517
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(5) == [1, 5]",
                "assert get_odd_collatz(1) == [1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1253,
        "completion_tokens": 369
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert valid_date('03-11-2000') == True",
                "assert valid_date('06-04-2020') == True",
                "assert valid_date('06/04/2020') == False",
                "assert valid_date('15-01-2012') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1304,
        "completion_tokens": 344
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"abcdef\") == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1043,
        "completion_tokens": 249
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([1, 2, 2, 3, 3, 4]) == True",
                "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True",
                "assert is_sorted([1, 2, 3, 4, 5]) == True",
                "assert is_sorted([1, 3, 2, 4, 5]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1313,
        "completion_tokens": 466
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersection((2, 5), (6, 8)) == \"NO\"",
                "assert intersection((0, 0), (1, 1)) == \"NO\"",
                "assert intersection((1, 2), (2, 3)) == \"NO\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1302,
        "completion_tokens": 411
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([1, 2, 2, -4]) == -9",
                "assert prod_signs([0, 1]) == 0",
                "assert prod_signs([]) == None"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1009,
        "completion_tokens": 232
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 3) == [1, 2, 1]",
                "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1582,
        "completion_tokens": 249
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert tri(2) == [3, 1, 2] (AssertionError: )",
                "assert tri(1) == [3, 1] (AssertionError: )"
            ]
        },
        "prompt_tokens": 1258,
        "completion_tokens": 351
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digits(4) == 0",
                "assert digits(987654321) == 945",
                "assert digits(2468) == 0",
                "assert digits(1) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 903,
        "completion_tokens": 293
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[][]') == False",
                "assert is_nested('[[][]]') == True",
                "assert is_nested('[[]][[') == True",
                "assert is_nested('[]') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1027,
        "completion_tokens": 287
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([-2.4, 1, 1]) == 6",
                "assert sum_squares([1, 4, 9]) == 98",
                "assert sum_squares([1.4, 4.2, 0]) == 29",
                "assert sum_squares([1, 3, 5, 7]) == 84"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1113,
        "completion_tokens": 343
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"12345 a \") == False",
                "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False"
            ],
            "failed_tests": [
                "assert check_if_last_char_is_a_letter(\"12345a\") == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 1068,
        "completion_tokens": 456
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1,2,3]) == -1"
            ],
            "failed_tests": [
                "assert can_arrange([10, 8, 6, 7, 5, 3]) == 2 (AssertionError: )",
                "assert can_arrange([1, 3, 5, 7, 6, 4, 2]) == 4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 1017,
        "completion_tokens": 461
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
                "assert largest_smallest_integers([-2, -4, -1, -3, -5, -7]) == (-1, None)",
                "assert largest_smallest_integers([]) == (None, None)"
            ],
            "failed_tests": [
                "assert largest_smallest_integers([2, 4, -1, 3, 5, -7]) == (None, -1) (AssertionError: )"
            ]
        },
        "prompt_tokens": 1104,
        "completion_tokens": 413
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(1, 2.5) == 2.5",
                "assert compare_one(1, \"2,3\") == \"2,3\"",
                "assert compare_one(\"5,1\", \"6\") == \"6\"",
                "assert compare_one(\"1\", 1) == None"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1065,
        "completion_tokens": 320
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(6) == False",
                "assert is_equal_to_sum_even(8) == True",
                "assert is_equal_to_sum_even(4) == False"
            ],
            "failed_tests": [
                "assert is_equal_to_sum_even(10) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 924,
        "completion_tokens": 292
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(1) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 957,
        "completion_tokens": 357
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"Example\") == \"Example\"",
                "assert fix_spaces(\"Example 1\") == \"Example_1\"",
                "assert fix_spaces(\" Example 2\") == \"_Example_2\"",
                "assert fix_spaces(\" Example   3\") == \"_Example-3\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 987,
        "completion_tokens": 309
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"example.txt\") == 'Yes'",
                "assert file_name_check(\"file.txt\") == 'Yes'",
                "assert file_name_check(\"file_name.123\") == 'No'",
                "assert file_name_check(\"file.name.txt\") == 'No'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1201,
        "completion_tokens": 326
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([]) == 0",
                "assert sum_squares([-1, -5, 2, -1, -5]) == -126",
                "assert sum_squares([1, 2, 3]) == 6"
            ],
            "failed_tests": [
                "assert sum_squares([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 285 (AssertionError: )"
            ]
        },
        "prompt_tokens": 1150,
        "completion_tokens": 372
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"This is a test\") == \"is\"",
                "assert words_in_sentence(\"lets go for swimming\") == \"go for\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1045,
        "completion_tokens": 163
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"1/6\", \"2/1\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1077,
        "completion_tokens": 260
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]",
                "assert order_by_points([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 995,
        "completion_tokens": 192
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([10, 20, 30, 40, 50, 60, 70, 80, 90]) == 0",
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 5"
            ],
            "failed_tests": [
                "assert specialFilter([22, 24, 26, 28, 31, 33, 35, 37, 39]) == 3 (AssertionError: )"
            ]
        },
        "prompt_tokens": 1084,
        "completion_tokens": 468
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(1) == 0",
                "assert get_max_triples(2) == 0"
            ],
            "failed_tests": [
                "assert get_max_triples(3) == 1 (AssertionError: )",
                "assert get_max_triples(5) == 4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 1100,
        "completion_tokens": 302
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
                "assert bf(\"Pluto\", \"Mars\") == ()"
            ],
            "failed_tests": [
                "assert bf(\"Mars\", \"Venus\") == (\"Earth\") (AssertionError: )",
                "assert bf(\"Earth\", \"Mercury\") == (\"Venus\") (AssertionError: )"
            ]
        },
        "prompt_tokens": 1215,
        "completion_tokens": 364
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]"
            ],
            "failed_tests": [
                "assert sorted_list_sum([\"abc\", \"def\", \"ghi\", \"jkl\"]) == [\"abc\", \"def\", \"ghi\", \"jkl\"] (AssertionError: )",
                "assert sorted_list_sum([\"apple\", \"banana\", \"cherry\", \"date\"]) == [\"apple\", \"date\"] (AssertionError: )",
                "assert sorted_list_sum([\"abcd\", \"efgh\", \"ijkl\", \"mnop\"]) == [] (AssertionError: )"
            ]
        },
        "prompt_tokens": 1187,
        "completion_tokens": 415
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(2, 100, 200) == 100",
                "assert x_or_y(15, 8, 5) == 5",
                "assert x_or_y(7, 34, 12) == 34",
                "assert x_or_y(4, 4, 16) == 16"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 962,
        "completion_tokens": 401
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([-1, -2, 0]) == 0",
                "assert double_the_difference([]) == 0",
                "assert double_the_difference([1, 3, 2, 0]) == 10",
                "assert double_the_difference([9, -2]) == 81"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1057,
        "completion_tokens": 344
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
                "assert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1264,
        "completion_tokens": 255
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('test_class', ['aBc', 'DeF', 'GhI']) == 'test_class.DeF'",
                "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
                "assert Strongest_Extension('class2', ['zZzZ', 'YyYy', 'XxXx']) == 'class2.zZzZ'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('example', ['ExAmPle', 'exAMPle', 'EXAMPLE']) == 'example.ExAmPle' (AssertionError: )"
            ]
        },
        "prompt_tokens": 1397,
        "completion_tokens": 516
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"abcd\",\"abd\") == False",
                "assert cycpattern_check(\"whassup\",\"psus\") == False",
                "assert cycpattern_check(\"himenss\",\"simen\") == True",
                "assert cycpattern_check(\"efef\",\"eeff\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1036,
        "completion_tokens": 353
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(-12) == (1, 1)",
                "assert even_odd_count(13579) == (0, 5)",
                "assert even_odd_count(2468) == (4, 0)",
                "assert even_odd_count(111222333) == (3, 6)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 912,
        "completion_tokens": 359
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(19) == 'xix'",
                "assert int_to_mini_roman(152) == 'clii'",
                "assert int_to_mini_roman(426) == 'cdxxvi'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 967,
        "completion_tokens": 207
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(6, 8, 10) == True",
                "assert right_angle_triangle(8, 15, 17) == True",
                "assert right_angle_triangle(5, 12, 13) == True",
                "assert right_angle_triangle(1, 2, 3) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1002,
        "completion_tokens": 356
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
                "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"",
                "assert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1014,
        "completion_tokens": 277
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(5, 6, 10) == [11, 4]",
                "assert eat(4, 8, 9) == [12, 1]",
                "assert eat(1, 10, 10) == [11, 0]",
                "assert eat(2, 11, 5) == [7, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 1348,
        "completion_tokens": 332
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9"
            ],
            "failed_tests": [
                "assert do_algebra(['**', '+', '-'], [2, 3, 4, 5]) == -6 (AssertionError: )",
                "assert do_algebra(['*', '+', '-'], [1, 2, 3, 4, 5]) == 0 (AssertionError: )",
                "assert do_algebra(['-', '+', '*'], [5, 4, 3, 2]) == 3 (AssertionError: )"
            ]
        },
        "prompt_tokens": 1243,
        "completion_tokens": 432
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"1234\") == \"4321\"",
                "assert solve(\"ab\") == \"AB\"",
                "assert solve(\"aBcDeF\") == \"AbCdEf\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 980,
        "completion_tokens": 277
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('1234567890') == 'e807f1fcf82d132f9bb018ca6738a19f'",
                "assert string_to_md5('') == None"
            ],
            "failed_tests": [
                "assert string_to_md5('Python is awesome') == 'b6b6c1d2b1e4e3a5d8a5c0d0c8f4c7d1' (AssertionError: )"
            ]
        },
        "prompt_tokens": 992,
        "completion_tokens": 397
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(2, 8) == [2, 4, 6, 8]",
                "assert generate_integers(8, 2) == [2, 4, 6, 8]",
                "assert generate_integers(10, 14) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 988,
        "completion_tokens": 278
    }
]