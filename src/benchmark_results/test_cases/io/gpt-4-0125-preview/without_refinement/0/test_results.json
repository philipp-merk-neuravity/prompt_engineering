[
    {
        "task_id": "HumanEval/0",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 1.0001], 0.0001) == True",
                "assert has_close_elements([1.0, 3.0, 5.0, 7.0], 1.5) == False",
                "assert has_close_elements([1.0, 1.05], 0.1) == True"
            ],
            "failed_tests": [
                "assert has_close_elements([0.0, 0.0], 0.0) == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('(()())(())') == ['(()())', '(())']",
                "assert separate_paren_groups('((()))') == ['((()))']",
                "assert separate_paren_groups('(( )( ))') == ['(()())']",
                "assert separate_paren_groups('((()))()') == ['((()))', '()']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(100.0) == 0.0",
                "assert truncate_number(5.75) == 0.75",
                "assert truncate_number(0.999999) == 0.999999"
            ],
            "failed_tests": [
                "assert truncate_number(999.999) == 0.999 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([1, 2, 3]) == False",
                "assert below_zero([10, -5, -5]) == False",
                "assert below_zero([100, -50, -50, -1]) == True",
                "assert below_zero([1, 2, -4, 5]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([-2.0, -1.0, 0.0, 1.0, 2.0]) == 1.2",
                "assert mean_absolute_deviation([100.0, 200.0, 300.0, 400.0, 500.0]) == 120.0",
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([1.1, 2.2, 3.3]) == 0.8888888888888888 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([1, 2, 3, 4, 5], -1) == [1, -1, 2, -1, 3, -1, 4, -1, 5]",
                "assert intersperse([5], 5) == [5]",
                "assert intersperse([100, 200], 50) == [100, 50, 200]",
                "assert intersperse([1, 2, 3, 4], 0) == [1, 0, 2, 0, 3, 0, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('(()) (())') == [2, 2]",
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('') == []",
                "assert parse_nested_parens('() ((())) (())') == [1, 3, 2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring(['mix', 'max', 'mux'], 'm') == ['mix', 'max', 'mux']",
                "assert filter_by_substring(['hello', 'world', 'python'], 'py') == ['python']",
                "assert filter_by_substring(['AAA', 'BBB', 'CCC'], 'A') == ['AAA']"
            ],
            "failed_tests": [
                "assert filter_by_substring(['case', 'base', 'race', 'face'], 'ace') == ['case', 'base', 'race', 'face'] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([1, -1]) == (0, -1)",
                "assert sum_product([10]) == (10, 10)",
                "assert sum_product([-1, -2, -3]) == (-6, -6)",
                "assert sum_product([100, 200, 300]) == (600, 6000000)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([-1, -2, -3, -2, -1]) == [-1, -1, -1, -1, -1]",
                "assert rolling_max([1]) == [1]",
                "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
                "assert rolling_max([-5, -4, -6, -7, -3, -2]) == [-5, -4, -4, -4, -3, -2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome(\"Racecar\") == False",
                "assert is_palindrome(\"racecar\") == True",
                "assert make_palindrome(\"a\") == \"a\"",
                "assert is_palindrome(\"Able was I ere I saw Elba\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('11110000', '11110000') == '00000000'",
                "assert string_xor('1', '1') == '0'",
                "assert string_xor('', '') == ''",
                "assert string_xor('101010', '010101') == '111111'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest(['a', 'bb', 'ccc']) == 'ccc'",
                "assert longest(['hello', 'world', 'python', 'is', 'awesome']) == 'awesome'",
                "assert longest(['one', 'two', 'three', 'four', 'five']) == 'three'",
                "assert longest(['12345', '1234', '123', '12']) == '12345'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(1, 1) == 1",
                "assert greatest_common_divisor(3, 5) == 1",
                "assert greatest_common_divisor(5, 0) == 5",
                "assert greatest_common_divisor(24, 18) == 6"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes(\" \") == [\" \"]",
                "assert all_prefixes(\"abc \") == [\"a\", \"ab\", \"abc\", \"abc \"]",
                "assert all_prefixes(\" a\") == [\" \", \" a\"]",
                "assert all_prefixes(\"a b\") == [\"a\", \"a \", \"a b\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert '5' in string_sequence(5)",
                "assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'",
                "assert string_sequence(0) == '0'",
                "assert string_sequence(6).split()[-1] == '6'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('123abcABC') == 6",
                "assert count_distinct_characters('abcABC') == 3",
                "assert count_distinct_characters('\ud83d\ude42\ud83d\ude02\ud83d\ude43\ud83d\ude09\ud83d\ude0a') == 5"
            ],
            "failed_tests": [
                "assert count_distinct_characters('The quick brown fox jumps over the lazy dog') == 26 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o') == [4]",
                "assert parse_music('.|') == [1]",
                "assert parse_music('') == []",
                "assert parse_music('o|') == [2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert how_many_times(\"overlapping\", \"app\") == 1",
                "assert how_many_times(\"banana\", \"na\") == 2"
            ],
            "failed_tests": [
                "assert how_many_times(\"111222111\", \"11\") == 3 (AssertionError: )",
                "assert how_many_times(\"python\", \"\") == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('') == ''",
                "assert sort_numbers('seven six five four') == 'four five six seven'",
                "assert sort_numbers('five five five') == 'five five five'",
                "assert sort_numbers('nine three seven one') == 'one three seven nine'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([2.0, 4.0, 6.0, 8.0, 3.0]) == (2.0, 3.0)",
                "assert find_closest_elements([-1.0, -2.0, -3.0, -2.5]) == (-2.5, -2.0)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
                "assert find_closest_elements([1.234, 1.233, 1.235]) == (1.233, 1.234)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([-10.0, -5.0, 0.0, 5.0, 10.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([-2.0, 0.0, 2.0]) == [0.0, 0.5, 1.0]",
                "assert rescale_to_unit([10.0, 15.0]) == [0.0, 1.0]",
                "assert rescale_to_unit([100.0, 200.0, 300.0, 400.0]) == [0.0, 0.3333333333333333, 0.6666666666666666, 1.0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_integers([]) == []",
                "assert filter_integers([[], [1], {}, {'a': 1}, (1,), 'hello', 123]) == [123]",
                "assert filter_integers(['1', '2', '3']) == []",
                "assert filter_integers(['a', 3.14, 5]) == [5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('hello world') == 11",
                "assert strlen('\u3053\u3093\u306b\u3061\u306f') == 5",
                "assert strlen('1234567890') == 10",
                "assert strlen('\\n') == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(64) == 32",
                "assert largest_divisor(17) == 1",
                "assert largest_divisor(97) == 1",
                "assert largest_divisor(49) == 7"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(8) == [2, 2, 2]",
                "assert factorize(3) == [3]",
                "assert factorize(144) == [2, 2, 2, 2, 3, 3]",
                "assert factorize(2) == [2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([-1, -2, -2, -1, -3]) == [-3]",
                "assert remove_duplicates([2, 2, 3, 3, 4, 4, 5, 5, 6]) == [6]",
                "assert remove_duplicates([1, 1, 1, 1, 1]) == []",
                "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('') == ''",
                "assert flip_case('Python3.8') == 'pYTHON3.8'",
                "assert flip_case('hELLO') == 'Hello'",
                "assert flip_case('123') == '123'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate(['hello', ' ', 'world']) == 'hello world'",
                "assert concatenate(['longer string', ' combined with', ' another string']) == 'longer string combined with another string'",
                "assert concatenate(['123', '456', '789']) == '123456789'",
                "assert concatenate(['a', 'b', 'c']) == 'abc'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix(['dog', 'cat', 'camel', 'duck'], 'ca') == ['cat', 'camel']",
                "assert filter_by_prefix(['test', 'testing', 'tested', 'tester'], 'test') == ['test', 'testing', 'tested', 'tester']",
                "assert filter_by_prefix(['multi', 'many', 'much', 'more'], '') == ['multi', 'many', 'much', 'more']",
                "assert filter_by_prefix(['apple', 'banana', 'apricot', 'cherry'], 'ap') == ['apple', 'apricot']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, -2, -3]) == []",
                "assert get_positive([-10, 10, -20, 20, 0]) == [10, 20]",
                "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
                "assert get_positive([1, 2, 3]) == [1, 2, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(999983) == True",
                "assert is_prime(13441) == True",
                "assert is_prime(4) == False",
                "assert is_prime(999981) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert round(poly([1, 0, -1], 3), 2) == -8"
            ],
            "failed_tests": [
                "assert round(find_zero([-2, 0, 1]), 2) == 1.41 or round(find_zero([-2, 0, 1]), 2) == -1.41 (OverflowError: math range error)",
                "assert round(find_zero([1, -2]), 2) == 2.0 (AssertionError: )",
                "assert round(find_zero([0, 0, 1]), 2) == 0.0 (OverflowError: math range error)"
            ]
        }
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_third([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [3, 8, 7, 6, 5, 4, 9, 2, 1]",
                "assert sort_third([]) == []",
                "assert sort_third([0, 0, 0, 1, 1, 1, 2, 2, 2]) == [0, 0, 0, 1, 1, 1, 2, 2, 2]",
                "assert sort_third([1, 2, 3, 4]) == [1, 2, 3, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]",
                "assert unique([1, 1, 1, 1]) == [1]",
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
                "assert unique(['apple', 'banana', 'apple', 'cherry']) == ['apple', 'banana', 'cherry']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([-10, 0, 10]) == 10",
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123",
                "assert max_element([0]) == 0",
                "assert max_element([-1, -2, -3, -4]) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(0) == 0"
            ],
            "failed_tests": [
                "assert fizz_buzz(200) == 4 (AssertionError: )",
                "assert fizz_buzz(143) == 2 (AssertionError: )",
                "assert fizz_buzz(1000) == 20 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_even([3, 3, 3, 3, 3, 3]) == [3, 3, 3, 3, 3, 3]",
                "assert sort_even([10, 5, 20, 15, 30, 25]) == [10, 5, 20, 15, 30, 25]",
                "assert sort_even([4, 1, 2, 3, 6]) == [2, 1, 4, 3, 6]",
                "assert sort_even([]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"",
                "assert encode_cyclic(\"ab\") == \"ab\"",
                "assert decode_cyclic(encode_cyclic(\"\")) == \"\""
            ],
            "failed_tests": [
                "assert encode_cyclic(\"abcdef\") == \"bcadef\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(3) == 5",
                "assert prime_fib(9) == 514229",
                "assert prime_fib(2) == 3",
                "assert prime_fib(5) == 89"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, -1]) == False",
                "assert triples_sum_to_zero([-5, 5, 0]) == True",
                "assert triples_sum_to_zero([]) == False",
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(100) == 10000",
                "assert car_race_collision(1) == 1",
                "assert car_race_collision(0) == 0",
                "assert car_race_collision(10) == 100"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([0]) == [1]",
                "assert incr_list([100, 200, 300]) == [101, 201, 301]",
                "assert incr_list([-10, 10, -20, 20]) == [-9, 11, -19, 21]",
                "assert incr_list([-1, -2, -3]) == [0, -1, -2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True",
                "assert pairs_sum_to_zero([-1, 2, 1, -2]) == True",
                "assert pairs_sum_to_zero([]) == False",
                "assert pairs_sum_to_zero([-5, -4, 0, 4, 5]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert change_base(64, 8) == '100'",
                "assert change_base(9, 3) == '100'",
                "assert change_base(81, 3) == '10000'"
            ],
            "failed_tests": [
                "assert change_base(0, 2) == '0' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(-5, 3) == -7.5",
                "assert triangle_area(5, -3) == -7.5",
                "assert triangle_area(0, 0) == 0",
                "assert triangle_area(7, 7) == 24.5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib4(0) == 0",
                "assert fib4(6) == 8",
                "assert fib4(3) == 0"
            ],
            "failed_tests": [
                "assert fib4(25) == 178922 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert median([100, 200, 300, 400, 500, 600]) == 350",
                "assert median([3, 1, 4, 1, 5, 9, 2]) == 3",
                "assert median([0]) == 0",
                "assert median([-10, -20, -30, -40, -50]) == -30"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome(' ') == True",
                "assert is_palindrome('racecar') == True",
                "assert is_palindrome('A man, a plan, a canal: Panama') == False",
                "assert is_palindrome('!a!') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(2, 1) == 0",
                "assert modp(20, 17) == 16",
                "assert modp(1, 7) == 2",
                "assert modp(5, 13) == 6"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_shift(\"xyz\") == \"cde\", \"Test 2 Failed: Wrap around encoding\"",
                "assert encode_shift(\"hello\") == \"mjqqt\", \"Test 4 Failed: Word encoding\"",
                "assert encode_shift(\"mjqqt\") != \"hello\", \"Test 5 Failed: Incorrect decoding assumption\"",
                "assert decode_shift(\"fgh\") == \"abc\", \"Test 10 Failed: Basic decoding\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('The quick brown fox') == 'Th qck brwn fx'",
                "assert remove_vowels('') == ''",
                "assert remove_vowels('zbcd') == 'zbcd'",
                "assert remove_vowels('abcdef') == 'bcdf'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([10], 10) == False",
                "assert below_threshold([1, 2, 3, 4, 5], 6) == True",
                "assert below_threshold([10, 20, 30], -10) == False",
                "assert below_threshold([5, 6, 7], 5) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(2**31 - 1, -2**31) == -1",
                "assert add(-5, -5) == -10",
                "assert add(0, 0) == 0",
                "assert add(-1, 1) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('xyz', 'zyx') == True",
                "assert same_chars('different', 'letters') == False",
                "assert same_chars('a', 'a') == True",
                "assert same_chars('with spaces', 'spaces with') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(2) == 1",
                "assert fib(10) == 55",
                "assert fib(1) == 1",
                "assert fib(12) == 144"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"<\") == False",
                "assert correct_bracketing(\"<>\") == True",
                "assert correct_bracketing(\"<<>>><<\") == False",
                "assert correct_bracketing(\"<<><>>\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([]) == True",
                "assert monotonic([-1, -2, -3, -4]) == True",
                "assert monotonic([5]) == True",
                "assert monotonic([1, 2, 4, 20]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 1, 1, 1], [1, 1, 1]) == [1]",
                "assert common([1, 2, 3, 4], [4, 3, 2, 1]) == [1, 2, 3, 4]",
                "assert common([], []) == []",
                "assert common(['a', 'b', 'c'], ['A', 'B', 'C']) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(6936) == 17",
                "assert largest_prime_factor(841) == 29",
                "assert largest_prime_factor(221) == 17",
                "assert largest_prime_factor(999) == 37"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(2) == 3",
                "assert sum_to_n(3) == 6",
                "assert sum_to_n(100) == 5050"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"(\") == False",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"(()(()))\") == True",
                "assert correct_bracketing(\"())(()\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([0]) == []",
                "assert derivative([5]) == []",
                "assert derivative([1, 2, 3]) == [2, 6]",
                "assert derivative([10, 0, 10]) == [0, 20]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(8) == 24",
                "assert fibfib(2) == 1",
                "assert fibfib(10) == 81",
                "assert fibfib(0) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"Y\") == 1",
                "assert vowels_count(\"abcde\") == 2",
                "assert vowels_count(\"aEiOuY\") == 6"
            ],
            "failed_tests": [
                "assert vowels_count(\"quick brown fox\") == 3 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12345, 5) == \"12345\"",
                "assert circular_shift(12345, 1) == \"51234\"",
                "assert circular_shift(1, 1) == \"1\""
            ],
            "failed_tests": [
                "assert circular_shift(987654321, 18) == \"987654321\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"abcdefghijklmnopqrstuvwxyz\") == 0",
                "assert digitSum(\"abcCd\") == 67",
                "assert digitSum(\"helloE\") == 69"
            ],
            "failed_tests": [
                "assert digitSum(\"The Quick Brown Fox\") == 488 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"0 apples and 0 oranges\", 5) == 5",
                "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95",
                "assert fruit_distribution(\"20 apples and 30 oranges\", 75) == 25",
                "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([1]) == []",
                "assert pluck([11, 13, 15, 17, 2]) == [2, 4]",
                "assert pluck([3, 3, 2, 2, 4, 4]) == [2, 2]",
                "assert pluck([2, 2, 2, 2]) == [2, 0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert search([3, 3, 3]) == 3",
                "assert search([2, 2]) == 2"
            ],
            "failed_tests": [
                "assert search([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]) == -1 (AssertionError: )",
                "assert search([1]) == -1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([-1, -2, -3, -4]) == [-4, -1, -3, -2]",
                "assert strange_sort_list([1, 3, 2, 4, 5]) == [1, 5, 2, 4, 3]",
                "assert strange_sort_list([10, 9, 8, 7, 6]) == [6, 10, 7, 9, 8]",
                "assert strange_sort_list([2, 2, 1, 3]) == [1, 3, 2, 2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(3, 3, 5) == 4.15",
                "assert triangle_area(3, 4, -5) == -1",
                "assert triangle_area(5, 5, 5) == 10.83",
                "assert triangle_area(7, 24, 25) == 84.00"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([5, 5, 5, 5], 20) == True",
                "assert will_it_fly([1, 2], 5) == False",
                "assert will_it_fly([3], 5) == True",
                "assert will_it_fly([1, 2, 2, 1], 10) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1, 2]) == 1",
                "assert smallest_change([5, 9, 9, 5]) == 0",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([1,2,3,5,4,7,9,6]) == 4"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match([], []) == []",
                "assert total_match(['a', 'b', 'c'], ['d', 'e']) == ['d', 'e']",
                "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']",
                "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(0) == False",
                "assert is_multiply_prime(2*7*13) == True",
                "assert is_multiply_prime(2*3*17) == True",
                "assert is_multiply_prime(89) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(3, 1) == False",
                "assert is_simple_power(27, 3) == True",
                "assert is_simple_power(8, 2) == True",
                "assert is_simple_power(1024, 2) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(-8) == True",
                "assert iscube(1) == True",
                "assert iscube(-27) == True",
                "assert iscube(-343) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"1\") == 0",
                "assert hex_key(\"123456789ABCDEF0\") == 6",
                "assert hex_key(\"AB\") == 1",
                "assert hex_key(\"2020\") == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(0) == \"db0db\"",
                "assert decimal_to_binary(256) == \"db100000000db\"",
                "assert decimal_to_binary(15) == \"db1111db\"",
                "assert decimal_to_binary(255) == \"db11111111db\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy(\"abcd\") == True",
                "assert is_happy(\"xyzxyz\") == True",
                "assert is_happy(\"aabbc\") == False",
                "assert is_happy(\"a\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([4.0]) == ['A+']",
                "assert numerical_letter_grade([4.0, 3.8, 3.4, 3.1, 2.8, 2.4, 2.1, 1.8, 1.4, 1.1, 0.8, 0.1, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']",
                "assert numerical_letter_grade([]) == []"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([3.75, 2.75, 1.75, 0.75]) == ['A', 'B+', 'C', 'D+'] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('abcdcba') == True",
                "assert prime_length('abcdefg') == True",
                "assert prime_length('') == False",
                "assert prime_length('Hello') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert starts_one_ends(4) == 1800",
                "assert starts_one_ends(2) == 18",
                "assert starts_one_ends(5) != 500"
            ],
            "failed_tests": [
                "assert starts_one_ends(1) == 2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solve(1) == \"1\"",
                "assert solve(150) == \"110\"",
                "assert solve(1000) == \"1\""
            ],
            "failed_tests": [
                "assert solve(4321) == \"11010\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2"
            ],
            "failed_tests": [
                "assert add([2, 3, 4, 5, 6]) == 3 (AssertionError: )",
                "assert add([0, 1, 2, 3, 4, 5]) == 1 (AssertionError: )",
                "assert add([-2, -4, -6, -8]) == -4 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('123 456') == '123 456'",
                "assert anti_shuffle('abc def') == 'abc def'"
            ],
            "failed_tests": [
                "assert anti_shuffle('CAPITALS and lower') == 'ACILPT a adelnorw' (AssertionError: )",
                "assert anti_shuffle('The quick brown fox') == 'The ckiqu bnoorw fox' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([[7, 7, 7], [7, 8, 9], [10, 11, 12]], 7) == [(0, 2), (0, 1), (0, 0), (1, 0)]",
                "assert get_row([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]], 4) == [(0, 3), (1, 2), (2, 1)]",
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]",
                "assert get_row([[1, 2], [3, 4], [5, 6]], 7) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_array([1, 0, 0, 0]) == [0, 0, 0, 1]",
                "assert sort_array([1, 3, 2]) == [1, 2, 3]",
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([5]) == [5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encrypt('wxyz') == 'abcd'",
                "assert encrypt('123') == '123'",
                "assert encrypt('') == ''"
            ],
            "failed_tests": [
                "assert encrypt('Hello, World!') == 'Jgnnq, Yqtnf!' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2",
                "assert next_smallest([-1, 0, 1, 2]) == 0",
                "assert next_smallest([1, 2, 3, 4, 5]) == 2",
                "assert next_smallest([5, 1, 4, 3, 2]) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"Hello world\") == 0"
            ],
            "failed_tests": [
                "assert is_bored(\"I! I? I.\") == 3 (AssertionError: )",
                "assert is_bored(\"I think, therefore I am. Who am I? I am me!\") == 3 (AssertionError: )",
                "assert is_bored(\"I'm not starting with a capital I. but this does. I do too!\") == 2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(3.6, -2.2, 2) == False",
                "assert any_int(-1, -2, -3) == True",
                "assert any_int(2, 2, 2) == False",
                "assert any_int(1, 1, 1) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert encode('E') == 'G' (AssertionError: )",
                "assert encode('world') == 'WMRLD' (AssertionError: )",
                "assert encode('e') == 'g' (AssertionError: )",
                "assert encode('u') == 'w' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([9973]) == 28",
                "assert skjkasdkd([0]) == 0",
                "assert skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 11",
                "assert skjkasdkd([4, 6, 8, 10]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}) == True",
                "assert check_dict_case({\"UPPER\":\"CASE\", \"KEYS\":\"ONLY\"}) == True",
                "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False",
                "assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(25) == [2, 3, 5, 7, 11, 13, 17, 19, 23]",
                "assert count_up_to(23) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(0) == []",
                "assert count_up_to(100)[0] == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert multiply(-10, 5) == 0",
                "assert multiply(148, 412) == 16",
                "assert multiply(0, 0) == 0"
            ],
            "failed_tests": [
                "assert multiply(-1, -1) == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('dBBE') == 0",
                "assert count_upper('') == 0",
                "assert count_upper('aBCdEf') == 1"
            ],
            "failed_tests": [
                "assert count_upper('a'*1000 + 'E') == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"10\") == 10",
                "assert closest_integer(\"-1.999\") == -2",
                "assert closest_integer(\"-2.9\") == -3",
                "assert closest_integer(\"-999.5\") == -1000"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(2) == [2, 4]",
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]",
                "assert make_a_pile(5) == [5, 7, 9, 11, 13]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"Commas,are,not,spaces\") == [\"Commas\", \"are\", \"not\", \"spaces\"]",
                "assert words_string(\"  Leading and trailing  \") == [\"Leading\", \"and\", \"trailing\"]",
                "assert words_string(\"Hello World\") == [\"Hello\", \"World\"]",
                "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(9, 9) == -1",
                "assert choose_num(21, 29) == 28",
                "assert choose_num(111, 112) == 112",
                "assert choose_num(14, 14) == 14"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(7, 5) == -1",
                "assert rounded_avg(50, 52) == \"0b110011\"",
                "assert rounded_avg(1, 5) == \"0b11\""
            ],
            "failed_tests": [
                "assert rounded_avg(1, 100) == \"0b1100101\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([13579, 2468, 97531]) == [13579, 97531]",
                "assert unique_digits([9, 7, 5, 3, 1]) == [1, 3, 5, 7, 9]",
                "assert unique_digits([152, 323, 1422, 10]) == []"
            ],
            "failed_tests": [
                "assert unique_digits([111, 123, 135, 147, 159]) == [111, 135, 147, 159] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([1, -1, 55]) == [\"One\"]",
                "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]",
                "assert by_length([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]",
                "assert by_length([10, 11, 12]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert f(3) == [1, 2, 6]",
                "assert f(0) == []",
                "assert f(2) == [1, 2]"
            ],
            "failed_tests": [
                "assert f(10) == [1, 2, 6, 24, 15, 720, 28, 5040, 36, 362880] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(10) == (4, 5)"
            ],
            "failed_tests": [
                "assert even_odd_palindrome(22) == (9, 9) (AssertionError: )",
                "assert even_odd_palindrome(999) == (90, 141) (AssertionError: )",
                "assert even_odd_palindrome(1000) == (90, 141) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_nums([]) == 0",
                "assert count_nums([1, 1, 2]) == 3",
                "assert count_nums([-123, 456, 789]) == 3"
            ],
            "failed_tests": [
                "assert count_nums([-5, -23, -77]) == 0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([3, 4, 5, 1, 2]) == True",
                "assert move_one_ball([1, 3, 2]) == False",
                "assert move_one_ball([5, 4, 3, 2, 1]) == False",
                "assert move_one_ball([2, 3, 4, 5, 1]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1], [1]) == \"NO\"",
                "assert exchange([2, 4, 6], [1, 3, 5, 8]) == \"YES\"",
                "assert exchange([2, 4, 6], [1, 3, 5]) == \"YES\"",
                "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c a b') == {'a': 2, 'b': 2}",
                "assert histogram('d d d d d') == {'d': 5}",
                "assert histogram('') == {}"
            ],
            "failed_tests": [
                "assert histogram('a a a b b c') == {'a': 3, 'b': 2} (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
                "assert reverse_delete(\"\", \"ae\") == ('', True)",
                "assert reverse_delete(\"abccba\", \"abc\") == ('', True)"
            ],
            "failed_tests": [
                "assert reverse_delete(\"A man a plan a canal Panama\", \" \") == ('AmanaplanacanalPanama', True) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['0']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count([]) == []",
                "assert odd_count(['13579', '02468', '987654321']) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 5n the str5ng 5 of the 5nput.\"]",
                "assert odd_count(['2468']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([-1, -2, -3]) == -6",
                "assert minSubArraySum([1]) == 1",
                "assert minSubArraySum([-2, -1, -3, -4]) == -10",
                "assert minSubArraySum([100, -200, 300, -400, 500]) == -400"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
                "assert max_fill([[0,0,0,0], [0,0,0,0], [0,0,0,0]], 1) == 0"
            ],
            "failed_tests": [
                "assert max_fill([[1,1,1,1,1], [1,1,1,1,1]], 10) == 1 (AssertionError: )",
                "assert max_fill([[1,1,0,0], [0,0,1,1]], 4) == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([0]) == [0]",
                "assert sort_array([1023, 511, 255, 127, 63, 31, 15, 7, 3, 1]) == [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023]"
            ],
            "failed_tests": [
                "assert sort_array([10, 11, 12, 13, 14, 15]) == [8, 10, 12, 14, 9, 11, 13, 15] (AssertionError: )",
                "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"a e i o u\", 1) == []",
                "assert select_words(\"Hello world\", 4) == [\"world\"]",
                "assert select_words(\"simple white space\", 2) == []",
                "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"AEIOU\") == \"\"",
                "assert get_closest_vowel(\"ab\") == \"\"",
                "assert get_closest_vowel(\"FULL\") == \"U\""
            ],
            "failed_tests": [
                "assert get_closest_vowel(\"Alphabet\") == \"a\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['()(', ')']) == 'Yes'",
                "assert match_parens([')))', ')))']) == 'No'",
                "assert match_parens(['', '']) == 'Yes'"
            ],
            "failed_tests": [
                "assert match_parens(['(()))', '((()']) == 'Yes' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
                "assert maximum([0, 0, 0, 0], 2) == [0, 0]",
                "assert maximum([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
                "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solution([30, 13, 24, 321]) == 0",
                "assert solution([3, 3, 3, 3, 3]) == 9",
                "assert solution([1]) == 1"
            ],
            "failed_tests": [
                "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 16 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add_elements([10, 20, 30, 40], 4) == 100",
                "assert add_elements([0, 0, 0, 0], 4) == 0",
                "assert add_elements([100, 200, 300, 400], 2) == 0"
            ],
            "failed_tests": [
                "assert add_elements([-10, -20, 30, 40], 4) == 40 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert get_odd_collatz(20) == [1, 3, 5] (AssertionError: )",
                "assert get_odd_collatz(50) == [1, 3, 5, 7, 25] (AssertionError: )",
                "assert get_odd_collatz(15) == [1, 3, 5, 7, 11, 15, 23, 47] (AssertionError: )",
                "assert get_odd_collatz(11) == [1, 3, 5, 7, 11, 17, 21, 85, 341] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('03-11-2000') == True",
                "assert valid_date('01-00-2000') == False",
                "assert valid_date('') == False"
            ],
            "failed_tests": [
                "assert valid_date('11-30-2000') == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"abcdef\") == 3",
                "assert split_words(\"123 456 789\") == [\"123\", \"456\", \"789\"]"
            ],
            "failed_tests": [
                "assert split_words(\" \") == [\"\"] (AssertionError: )",
                "assert split_words(\",\") == [\"\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([50, 40, 30, 20, 10]) == False",
                "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False",
                "assert is_sorted([1, 2, 3, 4, 5]) == True"
            ],
            "failed_tests": [
                "assert is_sorted([2, 2]) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersection((-10, -5), (-7, -3)) == \"YES\"",
                "assert intersection((-2, 2), (-1, 1)) == \"YES\"",
                "assert intersection((5, 7), (7, 9)) == \"NO\"",
                "assert intersection((-1, 1), (0, 4)) == \"NO\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([1, 2, 2, -4]) == -9",
                "assert prod_signs([0, 1]) == 0"
            ],
            "failed_tests": [
                "assert prod_signs([-1, -2, -3]) == 6 (AssertionError: )",
                "assert prod_signs([10, -1, -1, -1]) == -10 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[15,14,13,12], [11,10,9,8], [7,6,5,4], [3,2,1,16]], 4) == [1, 2, 1, 2]",
                "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]"
            ],
            "failed_tests": [
                "assert minPath([[3,2,1], [6,5,4], [9,8,7]], 3) == [1, 2, 3] (AssertionError: )",
                "assert minPath([[1]], 1) == [1] (ValueError: min() arg is an empty sequence)"
            ]
        }
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert tri(1) == [1, 3], \"Test with n=1\"",
                "assert tri(2) == [1, 3, 2], \"Test with n=2\"",
                "assert tri(7)[-1] == tri(6)[-1] + tri(5)[-1] + tri(8)[-1], \"Test recurrence relation for n=7\""
            ],
            "failed_tests": [
                "assert all(isinstance(x, int) for x in tri(7)), \"Test all elements are integers for n=7\" (AssertionError: Test all elements are integers for n=7)"
            ]
        }
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digits(999999999) == 387420489",
                "assert digits(1024) == 1",
                "assert digits(333) == 27",
                "assert digits(4) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[[]][[') == True",
                "assert is_nested('[][]') == False",
                "assert is_nested('[]]]]]]][[[[[]') == False",
                "assert is_nested('[[[[][]]]]') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([0.9, 1.1, 1.5]) == 9",
                "assert sum_squares([1, 4, 9]) == 98",
                "assert sum_squares([1.4, 4.2, 0]) == 29",
                "assert sum_squares([1, 2, 3]) == 14"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"Hello World!\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
                "assert check_if_last_char_is_a_letter(\"a\") == True"
            ],
            "failed_tests": [
                "assert check_if_last_char_is_a_letter(\"Hello!a\") == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1, 2, 4, 3, 5]) == 3",
                "assert can_arrange([1, 1.5, 2, 2.5, 3, 2.6]) == 5",
                "assert can_arrange([1, 2, 3]) == -1",
                "assert can_arrange([10]) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([100]) == (None, 100)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([1, 2, 3, 4, 5]) == (None, 1)",
                "assert largest_smallest_integers([-100]) == (-100, None)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(99.99, \"100,0\") == \"100,0\"",
                "assert compare_one(0.1, \"0,2\") == \"0,2\"",
                "assert compare_one(\"0.0001\", \"0,0002\") == \"0,0002\"",
                "assert compare_one(\"100\", 100) == None"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(12) == True",
                "assert is_equal_to_sum_even(32) == True",
                "assert is_equal_to_sum_even(44) == True",
                "assert is_equal_to_sum_even(-8) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(7) == 125411328000",
                "assert special_factorial(2) == 2",
                "assert special_factorial(5) == 34560",
                "assert special_factorial(6) == 24883200"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"Example\") == \"Example\"",
                "assert fix_spaces(\"Example    4\") == \"Example-4\"",
                "assert fix_spaces(\" Example   3\") == \"_Example-3\"",
                "assert fix_spaces(\" Example 2\") == \"_Example_2\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"file123pdf\") == 'No'",
                "assert file_name_check(\"file..txt\") == 'No'",
                "assert file_name_check(\"file.123\") == 'No'",
                "assert file_name_check(\"Afile.txt\") == 'Yes'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([10]) == 100"
            ],
            "failed_tests": [
                "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10432 (AssertionError: )",
                "assert sum_squares([3, 5, 7, 9]) == 738 (AssertionError: )",
                "assert sum_squares([2, 4, 6, 8, 10, 12, 14, 16]) == 10368 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"This is a test\") == \"is\"",
                "assert words_in_sentence(\"p\") == \"\""
            ],
            "failed_tests": [
                "assert words_in_sentence(\"one two three four five six seven eight nine ten\") == \"two three five seven\" (AssertionError: )",
                "assert words_in_sentence(\"abcdefg hijklmnop qrstuv wxyz\") == \"qrstuv\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"1/100\", \"100/1\") == True",
                "assert simplify(\"1/1\", \"1/1\") == True",
                "assert simplify(\"1/6\", \"2/1\") == False",
                "assert simplify(\"2/3\", \"3/2\") == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([10, 20, 30, 40]) == [10, 20, 30, 40]"
            ],
            "failed_tests": [
                "assert order_by_points([12, 21, 3, 30]) == [3, 12, 21, 30] (AssertionError: )",
                "assert order_by_points([56, 65, 654, 456]) == [56, 65, 456, 654] (AssertionError: )",
                "assert order_by_points([-3, -12, -21, -111]) == [-3, -111, -12, -21] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([135, 137, 139, 147]) == 4",
                "assert specialFilter([11, 13, 15, 17, 19]) == 5",
                "assert specialFilter([15, -73, 14, -15]) == 1"
            ],
            "failed_tests": [
                "assert specialFilter([12, 23, 34, 45, 56, 67, 78, 89, 90]) == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(5) == 1",
                "assert get_max_triples(1) == 0",
                "assert get_max_triples(2) == 0",
                "assert get_max_triples(3) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Pluto\", \"Mars\") == ()",
                "assert bf(\"Uranus\", \"Jupiter\") == (\"Saturn\",)",
                "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
                "assert bf(\"Saturn\", \"Saturn\") == ()"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert sorted_list_sum([\"odd\", \"even\", \"evening\", \"day\", \"night\"]) == [\"day\", \"even\", \"night\", \"evening\"] (AssertionError: )",
                "assert sorted_list_sum([\"race\", \"car\", \"arc\", \"racer\", \"races\"]) == [\"arc\", \"car\", \"race\", \"races\", \"racer\"] (AssertionError: )",
                "assert sorted_list_sum([\"dog\", \"cat\", \"elephant\", \"bee\", \"ant\"]) == [\"ant\", \"bee\", \"cat\", \"dog\"] (AssertionError: )",
                "assert sorted_list_sum([\"same\", \"length\", \"words\", \"order\"]) == [\"order\", \"same\", \"words\", \"length\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(13, 0, -1) == 0",
                "assert x_or_y(22, -5, -10) == -10",
                "assert x_or_y(1, 100, 200) == 200",
                "assert x_or_y(2, 10, 20) == 10"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([1.5, 2.5, 3.5]) == 0",
                "assert double_the_difference([5]) == 25",
                "assert double_the_difference([2, 4, 6, 8]) == 0",
                "assert double_the_difference([11, 13, 15]) == 11**2 + 13**2 + 15**2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([],[]) == []",
                "assert compare([10],[10]) == [0]",
                "assert compare([1,1,1,1],[2,2,2,2]) == [1,1,1,1]",
                "assert compare([5,5,5,5,5],[5,5,5,5,5]) == [0,0,0,0,0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('Game', ['RPG', 'FPS', 'MMO']) == 'Game.RPG'",
                "assert Strongest_Extension('Fruit', ['Apple', 'Banana', 'Cherry']) == 'Fruit.Apple'",
                "assert Strongest_Extension('Music', ['Rock', 'Jazz', 'Blues']) == 'Music.Rock'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('Language', ['Python', 'Java', 'CSharp']) == 'Language.Python' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"single\", \"le\") == True",
                "assert cycpattern_check(\"efef\", \"eeff\") == False",
                "assert cycpattern_check(\"capital\", \"Cap\") == False",
                "assert cycpattern_check(\"abcd\", \"abd\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(-101010) == (3, 3)",
                "assert even_odd_count(1) == (0, 1)",
                "assert even_odd_count(123456) == (3, 3)",
                "assert even_odd_count(-1234567890) == (5, 5)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(58) == 'lviii'",
                "assert int_to_mini_roman(199) == 'cxcix'",
                "assert int_to_mini_roman(207) == 'ccvii'",
                "assert int_to_mini_roman(42) == 'xlii'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(10, 6, 8) == True",
                "assert right_angle_triangle(0.3, 0.4, 0.5) == True",
                "assert right_angle_triangle(5, 5, 5) == False",
                "assert right_angle_triangle(7, 24, 25) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"123\", \"321\", \"213\"]) == \"123\"",
                "assert find_max([\"longest\", \"short\", \"tiny\"]) == \"longest\"",
                "assert find_max([\"same\", \"same\", \"same\"]) == \"same\"",
                "assert find_max([\"z\", \"y\", \"x\"]) == \"x\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(0, 0, 0) == [0, 0]",
                "assert eat(250, 0, 750) == [250, 750]",
                "assert eat(500, 500, 1000) == [1000, 500]",
                "assert eat(0, 10, 20) == [10, 10]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['//'], [10, 2]) == 5",
                "assert do_algebra(['+', '-', '*', '//'], [0, 0, 0, 0, 1]) == 0",
                "assert do_algebra(['**'], [9, 5]) == 59049"
            ],
            "failed_tests": [
                "assert do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 2, 3]) == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"12345a\") == \"12345A\"",
                "assert solve(\"Hello World!\") == \"hELLO wORLD!\"",
                "assert solve(\"\") == \"\"",
                "assert solve(\"1a2B3c4D\") == \"1A2b3C4d\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('password123') == '482c811da5d5b4bc6d497ffa98491e38'",
                "assert string_to_md5('') is None",
                "assert string_to_md5('Hello world!') != '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(2, 8) == [2, 4, 6, 8]",
                "assert generate_integers(5, 5) == []",
                "assert generate_integers(0, 1) == []"
            ],
            "failed_tests": [
                "assert generate_integers(28, 35) == [28, 30, 32, 34] (AssertionError: )"
            ]
        }
    }
]