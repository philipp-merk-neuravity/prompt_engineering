[
    {
        "task_id": "HumanEval/0",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
                "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
                "assert has_close_elements([5.5, 6.0, 6.5, 7.0], 0.2) == False"
            ],
            "failed_tests": [
                "assert has_close_elements([10.0, 10.1, 10.2, 10.3], 0.05) == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('()()()()') == ['()', '()', '()', '()']",
                "assert separate_paren_groups('((()))') == ['((()))']",
                "assert separate_paren_groups('()((()))()') == ['()', '((()))', '()']",
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(9.75) == 0.75",
                "assert truncate_number(7.0) == 0.0"
            ],
            "failed_tests": [
                "assert truncate_number(15.123) == 0.123 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert below_zero([1, 2, -4, 5]) == True",
                "assert below_zero([1, 2, 3]) == False"
            ],
            "failed_tests": [
                "assert below_zero([10, 20, 30, -15, 5]) == True (AssertionError: )",
                "assert below_zero([100, -50, 20, 30, 40]) == True (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
                "assert mean_absolute_deviation([5.0, 5.0, 5.0, 5.0]) == 0.0",
                "assert mean_absolute_deviation([2.5, 3.5, 4.5, 5.5]) == 1.0"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([10.0, 20.0, 30.0, 40.0]) == 15.0 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([], 4) == []",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('()') == [1]",
                "assert parse_nested_parens('() ()') == [1, 1]",
                "assert parse_nested_parens('((()))') == [3]",
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']",
                "assert filter_by_substring(['cat', 'dog', 'fish'], 'x') == []",
                "assert filter_by_substring([], 'a') == []"
            ],
            "failed_tests": [
                "assert filter_by_substring(['hello', 'world', 'python'], 'o') == ['hello', 'world'] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_product([5, 5, 5, 5]) == (20, 625)",
                "assert sum_product([1, 2, 3, 4]) == (10, 24)",
                "assert sum_product([10]) == (10, 10)"
            ],
            "failed_tests": [
                "assert sum_product([-1, -2, -3, -4]) == (-10, -24) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([10, 20, 15, 30, 25, 40]) == [10, 20, 20, 30, 30, 40]",
                "assert rolling_max([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_palindrome('cata') == 'catac'",
                "assert make_palindrome('cat') == 'catac'",
                "assert is_palindrome('radar') == True",
                "assert is_palindrome('hello') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('101', '111') == '010'",
                "assert string_xor('000', '111') == '111'",
                "assert string_xor('010', '110') == '100'",
                "assert string_xor('001', '001') == '000'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest(['aaa', 'bb', 'cc']) == 'aaa'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(3, 5) == 1",
                "assert greatest_common_divisor(25, 15) == 5",
                "assert greatest_common_divisor(18, 24) == 6",
                "assert greatest_common_divisor(81, 27) == 27"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
                "assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']",
                "assert all_prefixes('12345') == ['1', '12', '123', '1234', '12345']",
                "assert all_prefixes('') == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(0) == '0'",
                "assert string_sequence(1) == '0 1'",
                "assert string_sequence(5) == '0 1 2 3 4 5'",
                "assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('xyzXYZ') == 3",
                "assert count_distinct_characters('12345') == 5"
            ],
            "failed_tests": [
                "assert count_distinct_characters('aAaAaA') == 2 (AssertionError: )",
                "assert count_distinct_characters('Hello World') == 7 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o o o o o o o o') == [4, 4, 4, 4, 4, 4, 4, 4]",
                "assert parse_music('.| .| .| .| .| .| .| .|') == [1, 1, 1, 1, 1, 1, 1, 1]",
                "assert parse_music('o| .| o| .| o| .| o| .|') == [2, 1, 2, 1, 2, 1, 2, 1]",
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('ababab', 'aba') == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('eight six zero') == 'zero six eight'",
                "assert sort_numbers('nine seven two four') == 'two four seven nine'",
                "assert sort_numbers('three one five') == 'one three five'",
                "assert sort_numbers('five') == 'five'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)"
            ],
            "failed_tests": [
                "assert find_closest_elements([100.0, 200.0, 150.0, 120.0, 180.0]) == (150.0, 120.0) (AssertionError: )",
                "assert find_closest_elements([10.5, 20.3, 15.2, 18.7, 12.1]) == (15.2, 18.7) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([5.0, 4.0, 3.0, 2.0, 1.0]) == [1.0, 0.75, 0.5, 0.25, 0.0]",
                "assert rescale_to_unit([10.0, 20.0, 30.0, 40.0]) == [0.0, 0.3333333333333333, 0.6666666666666666, 1.0]"
            ],
            "failed_tests": [
                "assert rescale_to_unit([0.0, 0.0, 0.0, 0.0]) == [0.0, 0.0, 0.0, 0.0] (ZeroDivisionError: float division by zero)"
            ]
        }
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_integers([]) == []",
                "assert filter_integers(['a', 3.14, 5]) == [5]",
                "assert filter_integers([0, '0', -1, 1.5, '2']) == [0, -1]"
            ],
            "failed_tests": [
                "assert filter_integers([True, False, 10.5, -4, 'string']) == [10, -4] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('abc') == 3",
                "assert strlen('1234567890') == 10",
                "assert strlen('Hello, World!') == 13",
                "assert strlen(' ') == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(7) == 1",
                "assert largest_divisor(20) == 10",
                "assert largest_divisor(15) == 5"
            ],
            "failed_tests": [
                "assert largest_divisor(1) == 0 (ZeroDivisionError: integer division or modulo by zero)"
            ]
        }
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(97) == [97]",
                "assert factorize(144) == [2, 2, 2, 2, 3, 3]",
                "assert factorize(25) == [5, 5]",
                "assert factorize(70) == [2, 5, 7]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]",
                "assert remove_duplicates([1, 2, 3, 4, 5, 4, 3, 2, 1]) == [5]"
            ],
            "failed_tests": [
                "assert remove_duplicates([1, 1, 1, 2, 2, 3, 3, 3]) == [2] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('Hello') == 'hELLO'",
                "assert flip_case('wORLD') == 'World'",
                "assert flip_case('123abc') == '123ABC'",
                "assert flip_case('') == ''"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate(['123', '456', '789']) == '123456789'",
                "assert concatenate(['a', 'b', 'c']) == 'abc'",
                "assert concatenate(['hello', 'world']) == 'helloworld'",
                "assert concatenate([]) == ''"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix(['python', 'java', 'javascript'], 'j') == ['java', 'javascript']",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']",
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['apple', 'banana', 'cherry'], 'b') == ['banana']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
                "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(101) == True",
                "assert is_prime(13441) == True",
                "assert is_prime(61) == True",
                "assert is_prime(1) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert poly([1, 2, 3], 2) == 17",
                "assert poly([0, 0, 0, 1], 3) == 27",
                "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0",
                "assert round(find_zero([1, 2]), 2) == -0.5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_third([1, 2, 3]) == [1, 2, 3]",
                "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]"
            ],
            "failed_tests": [
                "assert sort_third([9, 12, 15, 18, 21, 24]) == [12, 12, 15, 18, 21, 24] (AssertionError: )",
                "assert sort_third([1, 3, 5, 7, 9, 11, 13, 15, 17]) == [5, 3, 5, 7, 9, 11, 13, 15, 17] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([1, 1, 1, 1, 1]) == [1]",
                "assert unique([]) == []",
                "assert unique([7, 7, 7, 7, 7, 7]) == [7]",
                "assert unique([4, 3, 2, 1]) == [1, 2, 3, 4]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([0, 0, 0, 0, 0]) == 0",
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123",
                "assert max_element([1]) == 1",
                "assert max_element([-10, -20, -30, -5]) == -5"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(50) == 0",
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(79) == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]"
            ],
            "failed_tests": [
                "assert sort_even([2, 4, 6, 8, 10]) == [2, 8, 4, 6, 10] (AssertionError: )",
                "assert sort_even([9, 8, 7, 6, 5, 4]) == [7, 8, 5, 6, 9, 4] (AssertionError: )",
                "assert sort_even([1, 3, 5, 7, 9]) == [1, 7, 5, 3, 9] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert decode_cyclic(\"bca\") == \"abc\"",
                "assert encode_cyclic(\"abc\") == \"bca\""
            ],
            "failed_tests": [
                "assert encode_cyclic(\"abcdef\") == \"bcdaef\" (AssertionError: )",
                "assert decode_cyclic(\"bcdaef\") == \"abcdef\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(5) == 89",
                "assert prime_fib(3) == 5",
                "assert prime_fib(1) == 2",
                "assert prime_fib(2) == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
                "assert triples_sum_to_zero([1]) == False",
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
                "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert car_race_collision(100) == 100 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([-1, -2, -3]) == [0, -1, -2]",
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([]) == []",
                "assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True",
                "assert pairs_sum_to_zero([1]) == False",
                "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
                "assert pairs_sum_to_zero([1, 2, 3, 7]) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert change_base(8, 3) == '22'",
                "assert change_base(8, 2) == '1000'",
                "assert change_base(7, 2) == '111'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(4, 6) == 12.0",
                "assert triangle_area(10, 2) == 10.0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib4(7) == 14"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert median([1, 2, 3, 4, 5, 6, 7]) == 4",
                "assert median([10, 20, 30, 40, 50]) == 30",
                "assert median([3, 1, 2, 4, 5, 6]) == 3.5",
                "assert median([100, 200, 300, 400]) == 250.0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('hello') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(3, 11) == 8",
                "assert modp(3, 5) == 3",
                "assert modp(100, 101) == 1",
                "assert modp(0, 101) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_shift(\"hello\") == \"mjqqt\"",
                "assert encode_shift(\"abcxyz\") == \"fghcde\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('abcdef') == 'bcdf'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert below_threshold([-10, 5, 2, -3], 10) == False (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(2, 3) == 5",
                "assert add(5, 7) == 12",
                "assert add(-1, 1) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('abcd', 'dddddddabce') == False",
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('abcd', 'dddddddabc') == True",
                "assert same_chars('eabcd', 'dddddddabc') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(15) == 610"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"<\") == False",
                "assert correct_bracketing(\"<>\") == True",
                "assert correct_bracketing(\"<<><>>\") == True",
                "assert correct_bracketing(\"><<>\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 20, 4, 10]) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([5, 6, 7], [8, 9, 10]) == []",
                "assert common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]",
                "assert common([1, 2, 3, 4], [2, 3, 4, 5]) == [2, 3, 4]",
                "assert common([1, 2, 3, 4, 5], [4, 5, 6, 7]) == [4, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(13195) == 29",
                "assert largest_prime_factor(2048) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(100) == 5050",
                "assert sum_to_n(30) == 465"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"(\") == False",
                "assert correct_bracketing(\"()\") == True",
                "assert correct_bracketing(\"(()())\") == True",
                "assert correct_bracketing(\")(()\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
                "assert derivative([1, 2, 3]) == [2, 6]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(8) == 24"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert vowels_count(\"happy\") == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12345, 1) == \"51234\"",
                "assert circular_shift(123, 5) == \"321\""
            ],
            "failed_tests": [
                "assert circular_shift(456789, 6) == \"987654\" (AssertionError: )",
                "assert circular_shift(987654321, 3) == \"219876543\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"abAB\") == 131",
                "assert digitSum(\"\") == 0",
                "assert digitSum(\"woArBld\") == 131",
                "assert digitSum(\"helloE\") == 69"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"3 apples and 2 oranges\", 20) == 15"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([4, 2, 3]) == [2, 1]",
                "assert pluck([1, 2, 3]) == [2, 1]",
                "assert pluck([]) == []",
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([7, 3, 9, 1, 5]) == [1, 9, 3, 7, 5]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(8, 15, 17) == 60.00",
                "assert triangle_area(7, 24, 25) == 84.00",
                "assert triangle_area(5, 12, 13) == 30.00",
                "assert triangle_area(3, 4, 5) == 6.00"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([], 10) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([5]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match([], []) == []",
                "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']",
                "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']",
                "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(24) == False",
                "assert is_multiply_prime(77) == False",
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(6) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(1, 4) == True",
                "assert is_simple_power(16, 4) == True",
                "assert is_simple_power(9, 3) == True",
                "assert is_simple_power(2, 2) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(2) == False",
                "assert iscube(-1) == True",
                "assert iscube(0) == True",
                "assert iscube(1) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"123456789ABCDEF0\") == 6",
                "assert hex_key(\"ABED1A33\") == 4",
                "assert hex_key(\"2020\") == 2",
                "assert hex_key(\"1077E\") == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(7) == \"db111db\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy(\"a\") == False",
                "assert is_happy(\"xyy\") == False",
                "assert is_happy(\"aa\") == False",
                "assert is_happy(\"aabb\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([0.7, 1.8, 2.5, 3.6, 4.0]) == ['D', 'C-', 'C', 'A-', 'A+'] (AssertionError: )",
                "assert numerical_letter_grade([3.8, 2.5, 1.0, 3.2, 0.5]) == ['A', 'C', 'D+', 'B-', 'D-'] (AssertionError: )",
                "assert numerical_letter_grade([3.9, 2.8, 1.4, 0.9, 3.3]) == ['A', 'B', 'D', 'D+', 'B-'] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('orange') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert starts_one_ends(1) == 1"
            ],
            "failed_tests": [
                "assert starts_one_ends(99) == 20 (AssertionError: )",
                "assert starts_one_ends(9) == 1 (AssertionError: )",
                "assert starts_one_ends(10) == 2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solve(1111) == \"100\"",
                "assert solve(10) == \"1\"",
                "assert solve(147) == \"1100\""
            ],
            "failed_tests": [
                "assert solve(10000) == \"100\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2",
                "assert add([1, 3, 5, 7]) == 0"
            ],
            "failed_tests": [
                "assert add([2, 4, 6, 8]) == 0 (AssertionError: )",
                "assert add([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert anti_shuffle('The quick brown fox jumps over the lazy dog.') == 'ehT cikqu bnoor fow jmps over eht aelz dgo.' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_array([]) == []",
                "assert sort_array([5]) == [5]",
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encrypt('hi') == 'lm'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('gf') == 'kj'",
                "assert encrypt('et') == 'ix'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([-5, -2, -3, -4, -1]) == -4"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"No sentences start with I here. Just a regular text.\") == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(5, 2, 7) == True",
                "assert any_int(0, 0, 0) == True",
                "assert any_int(3.6, -2.2, 2) == False",
                "assert any_int(3, -2, 1) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'",
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'"
            ],
            "failed_tests": [
                "assert encode('Hello World') == 'hELLO WERLD' (AssertionError: )",
                "assert encode('Alphabet') == 'lLPHLBT' (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([0,81,12,3,1,21]) == 3",
                "assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13",
                "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11",
                "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({}) == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(5) == [2, 3]",
                "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]",
                "assert count_up_to(1) == []",
                "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert multiply(148, 412) == 16",
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(14, -15) == 20"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('aBCdEf') == 1",
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('dBBE') == 0"
            ],
            "failed_tests": [
                "assert count_upper('AEIOUaeiou') == 2 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"15.3\") == 15",
                "assert closest_integer(\"-15.3\") == -15",
                "assert closest_integer(\"10\") == 10",
                "assert closest_integer(\"-14.4\") == -14"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(10) == [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"Apple, banana, cherry and grape\") == [\"Apple\", \"banana\", \"cherry\", \"and\", \"grape\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(10, 20) == 20",
                "assert choose_num(7, 9) == 8",
                "assert choose_num(12, 15) == 14",
                "assert choose_num(1, 5) == 4"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(1, 5) == \"0b11\"",
                "assert rounded_avg(7, 5) == -1",
                "assert rounded_avg(3, 3) == \"0b11\"",
                "assert rounded_avg(8, 8) == \"0b1000\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([152, 323, 1422, 10]) == []"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([3, 3, 3, 3, 3]) == [\"Three\", \"Three\", \"Three\", \"Three\", \"Three\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert f(1) == [1]"
            ],
            "failed_tests": [
                "assert f(5) == [1, 3, 6, 24, 15] (AssertionError: )",
                "assert f(2) == [1, 3] (AssertionError: )",
                "assert f(3) == [1, 3, 6] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(12) == (4, 6)",
                "assert even_odd_palindrome(1) == (0, 1)",
                "assert even_odd_palindrome(3) == (1, 2)"
            ],
            "failed_tests": [
                "assert even_odd_palindrome(100) == (20, 30) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_nums([123456789, -987654321]) == 2"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([2]*1000, [1]*1000) == \"YES\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('') == {}",
                "assert histogram('a b b a') == {'a': 2, 'b': 2}"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
                "assert odd_count(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([5, -3, 2, 1, -4]) == -4",
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([-1, -2, -3]) == -6",
                "assert minSubArraySum([1, 2, 3, 4, 5]) == 1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
                "assert max_fill([[0,0,0,0], [0,0,0,0], [0,0,0,0]], 1) == 0",
                "assert max_fill([[1,1,1], [1,1,1], [1,1,1]], 3) == 3"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"FULL\") == \"U\"",
                "assert get_closest_vowel(\"python\") == \"o\"",
                "assert get_closest_vowel(\"yogurt\") == \"u\""
            ],
            "failed_tests": [
                "assert get_closest_vowel(\"algorithm\") == \"o\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['()', '()']) == 'Yes'",
                "assert match_parens(['(', '(']) == 'No'",
                "assert match_parens(['(', ')']) == 'Yes'",
                "assert match_parens([')', ')']) == 'No'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert maximum([1, 2, 3, 4, 5], 3) == [3, 4, 5]",
                "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
                "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]"
            ],
            "failed_tests": [
                "assert maximum([-5, -10, -2, -8, -3], 4) == [-10, -8, -5, -3] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9",
                "assert solution([30, 13, 24, 321]) == 0"
            ],
            "failed_tests": [
                "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 16 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 15",
                "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24"
            ],
            "failed_tests": [
                "assert add_elements([55, 66, 77, 88, 99], 4) == 288 (AssertionError: )",
                "assert add_elements([99, 100, 101, 102, 103], 2) == 199 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(1) == [1]",
                "assert get_odd_collatz(5) == [1, 5]",
                "assert get_odd_collatz(13) == [1, 5, 13]"
            ],
            "failed_tests": [
                "assert get_odd_collatz(20) == [1, 5, 13] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert valid_date('13-04-2020') == False",
                "assert valid_date('03-11-2000') == True",
                "assert valid_date('15-01-2012') == False",
                "assert valid_date('02-30-2020') == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"123,456,789\") == [\"123\", \"456\", \"789\"]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([1, 2, 2, 2, 3, 4]) == False",
                "assert is_sorted([1, 3, 2, 4, 5]) == False",
                "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True",
                "assert is_sorted([1, 2, 2, 3, 3, 4]) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersection((10, 15), (12, 18)) == \"YES\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([]) == None"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 3) == [1, 2, 1]",
                "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]"
            ],
            "failed_tests": [
                "assert minPath([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]], 4) == [1, 2, 3, 4] (AssertionError: )",
                "assert minPath([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]], 8) == [1, 2, 3, 4, 8, 12, 16, 15] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert tri(4) == [3, 3, 2, 8, 13] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert digits(13579) == 105 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[[]][[') == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([-2.4, 1, 1]) == 6",
                "assert sum_squares([1, 2, 3]) == 14",
                "assert sum_squares([1.4, 4.2, 0]) == 29",
                "assert sum_squares([1, 4, 9]) == 98"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
                "assert check_if_last_char_is_a_letter(\"\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
                "assert check_if_last_char_is_a_letter(\"12345\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([]) == -1"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert largest_smallest_integers([2, -4, 1, -3, 5, -7]) == (None, 1) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(\"7.8\", 7.8) == None"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(4) == False",
                "assert is_equal_to_sum_even(6) == False",
                "assert is_equal_to_sum_even(8) == True",
                "assert is_equal_to_sum_even(10) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(3) == 12",
                "assert special_factorial(2) == 2",
                "assert special_factorial(5) == 34560",
                "assert special_factorial(4) == 288"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"Example\") == \"Example\"",
                "assert fix_spaces(\"Example 1\") == \"Example_1\"",
                "assert fix_spaces(\" Example 2\") == \"_Example_2\"",
                "assert fix_spaces(\" Example   3\") == \"_Example-3\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"file.name.txt\") == 'No'",
                "assert file_name_check(\"file_name.exe\") == 'Yes'",
                "assert file_name_check(\"file_name.123\") == 'No'",
                "assert file_name_check(\"example.txt\") == 'Yes'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([-1, -5, 2, -1, -5]) == -126",
                "assert sum_squares([0, 0, 0, 0, 0]) == 0",
                "assert sum_squares([1, 2, 3]) == 6"
            ],
            "failed_tests": [
                "assert sum_squares([2, 3, 4, 5, 6, 7, 8]) == 180 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert words_in_sentence(\"The quick brown fox jumps over the lazy dog\") == \"The fox over dog\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"7/10\", \"10/2\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([-9, -99, -999, -9999]) == [-9, -99, -999, -9999]",
                "assert order_by_points([]) == []",
                "assert order_by_points([9, 99, 999, 9999]) == [9, 99, 999, 9999]",
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2"
            ],
            "failed_tests": [
                "assert specialFilter([123, 456, 789]) == 0 (AssertionError: )",
                "assert specialFilter([111, 222, 333, 444, 555]) == 5 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(2) == 0",
                "assert get_max_triples(1) == 0"
            ],
            "failed_tests": [
                "assert get_max_triples(5) == 4 (AssertionError: )",
                "assert get_max_triples(3) == 1 (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"
            ],
            "failed_tests": [
                "assert bf(\"Mars\", \"Venus\") == (\"Earth\") (AssertionError: )",
                "assert bf(\"Uranus\", \"Mercury\") == () (AssertionError: )",
                "assert bf(\"Earth\", \"Mercury\") == (\"Venus\") (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]"
            ],
            "failed_tests": [
                "assert sorted_list_sum([\"dog\", \"cat\", \"bird\", \"fish\"]) == [] (AssertionError: )",
                "assert sorted_list_sum([\"python\", \"java\", \"ruby\", \"c++\"]) == [\"java\", \"ruby\"] (AssertionError: )",
                "assert sorted_list_sum([\"apple\", \"banana\", \"kiwi\", \"pear\"]) == [\"kiwi\", \"pear\"] (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(4, -10, -20) == -20",
                "assert x_or_y(13, 1, 0) == 1",
                "assert x_or_y(7, 34, 12) == 34",
                "assert x_or_y(2, 100, 200) == 100"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([]) == 0"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]",
                "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
                "assert compare([10,20,30,40],[10,20,30,50]) == [0,0,0,10]",
                "assert compare([5,5,5,5,5],[5,5,5,5,5]) == [0,0,0,0,0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
                "assert Strongest_Extension('class1', ['Extension1', 'EXTENSION2', 'extension3']) == 'class1.EXTENSION2'",
                "assert Strongest_Extension('class2', ['aBcDeF', 'GhIjKl', 'MnOpQr']) == 'class2.aBcDeF'",
                "assert Strongest_Extension('class3', ['XYZ', 'abc', '123']) == 'class3.XYZ'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"whassup\", \"psus\") == False",
                "assert cycpattern_check(\"efef\", \"eeff\") == False",
                "assert cycpattern_check(\"hello\", \"ell\") == True",
                "assert cycpattern_check(\"abcd\", \"abd\") == False"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert even_odd_count(987654321) == (5, 4) (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(152) == 'clii'",
                "assert int_to_mini_roman(19) == 'xix'",
                "assert int_to_mini_roman(1000) == 'm'",
                "assert int_to_mini_roman(426) == 'cdxxvi'"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(7, 24, 26) == False",
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(7, 24, 25) == True",
                "assert right_angle_triangle(5, 12, 13) == True"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
                "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"",
                "assert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\""
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(2, 11, 5) == [7, 0]"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['**'], [2, 3, 2]) == 8"
            ],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solve(\"1234\") == \"4321\"",
                "assert solve(\"ab\") == \"AB\"",
                "assert solve(\"Hello World\") == \"hELLO wORLD\""
            ],
            "failed_tests": [
                "assert solve(\"123ABC\") == \"cba321\" (AssertionError: )"
            ]
        }
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": true,
        "test_results": {
            "passed_tests": [],
            "failed_tests": []
        }
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(3, 3) == []",
                "assert generate_integers(7, 7) == []"
            ],
            "failed_tests": [
                "assert generate_integers(500, 600) == [0, 2, 4, 6] (AssertionError: )",
                "assert generate_integers(100, 200) == [2, 4, 6, 8] (AssertionError: )"
            ]
        }
    }
]