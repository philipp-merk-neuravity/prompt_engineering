[
    {
        "task_id": "HumanEval/0",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 3.0, 5.0], 1.0) == False",
                "assert has_close_elements([1.0, 2.0, 3.0], 1.0) == False",
                "assert has_close_elements([1.0, 1.5, 2.5], 0.6) == True",
                "assert has_close_elements([-1.0, -1.4, -2.0], 0.5) == True",
                "assert has_close_elements([-1.0, 0.5, 1.0], 1.6) == True",
                "assert has_close_elements([], 1.0) == False",
                "assert has_close_elements([1.0], 1.0) == False",
                "assert has_close_elements([2.0, 2.0, 2.0], 0.1) == True",
                "assert has_close_elements([1000.0, 2000.0, 3000.0], 500.0) == False",
                "assert has_close_elements([1.0001, 1.0002], 0.00015) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 423
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('()') == ['()']",
                "assert separate_paren_groups('(())') == ['(())']",
                "assert separate_paren_groups('()()') == ['()', '()']",
                "assert separate_paren_groups('()(())') == ['()', '(())']",
                "assert separate_paren_groups('( ) ( ( ) )') == ['()', '(())']",
                "assert separate_paren_groups('(()())((()))') == ['(()())', '((()))']",
                "assert separate_paren_groups('') == []",
                "assert separate_paren_groups('(())()(()(()))') == ['(())', '()', '(()(()))']",
                "assert separate_paren_groups('()((()))(())(()(()))') == ['()', '((()))', '(())', '(()(()))']",
                "assert separate_paren_groups('     ') == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 197,
        "completion_tokens": 285
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(4.0) == 0.0",
                "assert truncate_number(0.0001) == 0.0001",
                "assert truncate_number(0.9999) == 0.9999"
            ],
            "failed_tests": [
                "assert truncate_number(123456.789) == 0.789 (AssertionError: )",
                "assert truncate_number(5.0001) == 0.0001 (AssertionError: )",
                "assert truncate_number(10.123456789) == 0.123456789 (AssertionError: )"
            ]
        },
        "prompt_tokens": 167,
        "completion_tokens": 186
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([]) == False",
                "assert below_zero([100]) == False",
                "assert below_zero([-1]) == True",
                "assert below_zero([1, 2, -2, 1]) == False",
                "assert below_zero([5, -3, -2]) == False",
                "assert below_zero([10, -5, -10, 5]) == True",
                "assert below_zero([3, -4, 2]) == True",
                "assert below_zero([1]*10000 + [-1]*9999) == False",
                "assert below_zero([1]*10000 + [-1]*10001) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 201,
        "completion_tokens": 311
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1, 2, 3, 4]) == 1.0, \"Test with integers failed\"",
                "assert mean_absolute_deviation([1.5, 2.5, 3.5, 4.5]) == 1.0, \"Test with floats failed\"",
                "assert mean_absolute_deviation([-1, -2, -3, -4]) == 1.0, \"Test with negative numbers failed\"",
                "assert mean_absolute_deviation([-2, -1, 0, 1, 2]) == 1.2, \"Test with mixed numbers failed\"",
                "assert mean_absolute_deviation([5]) == 0.0, \"Test with single value failed\"",
                "assert mean_absolute_deviation([2, 2, 2, 2]) == 0.0, \"Test with repeating values failed\""
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([0, 1, 2, 3, 4]) == 1.6, \"Test with zero included failed\" (AssertionError: Test with zero included failed)",
                "assert mean_absolute_deviation([10, 20, 30, 40, 50]) == 14.0, \"Test with larger range failed\" (AssertionError: Test with larger range failed)",
                "assert mean_absolute_deviation([1.1, 2.2, 3.3]) == 0.8888888888888888, \"Test with floating point precision failed\" (AssertionError: Test with floating point precision failed)"
            ]
        },
        "prompt_tokens": 199,
        "completion_tokens": 372
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([], 4) == []",
                "assert intersperse([1], 4) == [1]",
                "assert intersperse([1, 2], 4) == [1, 4, 2]",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
                "assert intersperse([5, 5, 5], 1) == [5, 1, 5, 1, 5]",
                "assert intersperse([-1, -2, -3], -4) == [-1, -4, -2, -4, -3]",
                "assert intersperse([1, 2, 3], 0) == [1, 0, 2, 0, 3]",
                "assert intersperse([0, 1, 0], 2) == [0, 2, 1, 2, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 174,
        "completion_tokens": 358
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('()') == [1]",
                "assert parse_nested_parens('(())') == [2]",
                "assert parse_nested_parens('((()))') == [3]",
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('(()()) ((())) () ((())()()) ()') == [2, 3, 1, 3, 1]",
                "assert parse_nested_parens('(((())))') == [4]",
                "assert parse_nested_parens('     ') == []",
                "assert parse_nested_parens('') == []",
                "assert parse_nested_parens('(()) (())') == [2, 2]",
                "assert parse_nested_parens('(()()(()))') == [3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 194,
        "completion_tokens": 296
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring([], 'a') == []",
                "assert filter_by_substring(['xyz', 'bcd', 'efg'], 'a') == []",
                "assert filter_by_substring(['abc', 'bac', 'ca'], 'a') == ['abc', 'bac', 'ca']",
                "assert filter_by_substring(['hello', 'world', 'apple', 'banana'], 'a') == ['apple', 'banana']",
                "assert filter_by_substring(['one', 'two', 'three'], '') == ['one', 'two', 'three']",
                "assert filter_by_substring(['Apple', 'Banana', 'Grape', 'berry'], 'a') == ['Banana', 'Grape']",
                "assert filter_by_substring(['apple', 'apricot', 'banana', 'berry'], 'ap') == ['apple', 'apricot']",
                "assert filter_by_substring(['cherry', 'berry', 'terry'], 'err') == ['cherry', 'berry', 'terry']",
                "assert filter_by_substring(['repeat', 'repeat', 'repeat'], 'eat') == ['repeat', 'repeat', 'repeat']"
            ],
            "failed_tests": [
                "assert filter_by_substring(['hello', 'world', 'bell', 'well'], 'll') == ['bell', 'well'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 175,
        "completion_tokens": 485
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([5]) == (5, 5)",
                "assert sum_product([1, 2, 3, 4]) == (10, 24)",
                "assert sum_product([0, 1, 2, 3]) == (6, 0)",
                "assert sum_product([-1, -2, -3]) == (-6, -6)",
                "assert sum_product([-1, 2, -3, 4]) == (2, 24)",
                "assert sum_product([-5]) == (-5, -5)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 192,
        "completion_tokens": 229
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([3, 3, 3, 3, 3]) == [3, 3, 3, 3, 3]",
                "assert rolling_max([-1, -2, -3, 2, 1]) == [-1, -1, -1, 2, 2]",
                "assert rolling_max([-3, -2, -1, 0, 1, 2, 3]) == [-3, -2, -1, 0, 1, 2, 3]",
                "assert rolling_max([1, -1, 2, -2, 3, -3]) == [1, 1, 2, 2, 3, 3]",
                "assert rolling_max([]) == []",
                "assert rolling_max([5]) == [5]",
                "assert rolling_max([1, 2, 5, 4, 3, 2, 1]) == [1, 2, 5, 5, 5, 5, 5]",
                "assert rolling_max([1, 2, 5, 5, 3, 2, 1]) == [1, 2, 5, 5, 5, 5, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 182,
        "completion_tokens": 441
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert make_palindrome(\"racecar\") == \"racecar\", \"Palindrome string should return the same string\"",
                "assert make_palindrome(\"a\") == \"a\", \"Single character should return the same character\"",
                "assert is_palindrome(\"hello\") == False, \"Non-palindrome string should return False\"",
                "assert is_palindrome(\"\") == True, \"Empty string should return True\"",
                "assert is_palindrome(\"Madam\") == False, \"Case sensitive palindrome should return False\"",
                "assert make_palindrome(\"cata\") == \"catac\", \"String with palindromic end should return the shortest palindrome\"",
                "assert make_palindrome(\"123\") == \"12321\", \"Numeric string should return the shortest palindrome\""
            ],
            "failed_tests": [
                "assert make_palindrome(\"engine\") == \"enginene\", \"String with complex palindromic end should return the shortest palindrome\" (AssertionError: String with complex palindromic end should return the shortest palindrome)",
                "assert is_palindrome(\"a man a plan a canal panama\") == True, \"Palindrome with spaces should return True\" (AssertionError: Palindrome with spaces should return True)",
                "assert make_palindrome(\"hyper\") == \"hyperpyh\", \"Long non-palindrome string should return the shortest palindrome\" (AssertionError: Long non-palindrome string should return the shortest palindrome)"
            ]
        },
        "prompt_tokens": 224,
        "completion_tokens": 618
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_xor('010', '110') == '100'",
                "assert string_xor('0', '0') == '0'",
                "assert string_xor('10101010', '01010101') == '11111111'",
                "assert string_xor('11110000', '00001111') == '11111111'",
                "assert string_xor('111', '111') == '000'",
                "assert string_xor('1', '1') == '0'"
            ],
            "failed_tests": [
                "assert string_xor('01', '110') == '111' (AssertionError: )",
                "assert string_xor('', '110') == '110' (AssertionError: )",
                "assert string_xor('101', '') == '101' (AssertionError: )",
                "assert string_xor('1111', '110') == '1001' (AssertionError: )"
            ]
        },
        "prompt_tokens": 158,
        "completion_tokens": 231
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest([]) is None",
                "assert longest(['a', 'b', 'c']) == 'a'",
                "assert longest(['a', 'bb', 'ccc']) == 'ccc'",
                "assert longest(['ccc', 'bb', 'a']) == 'ccc'",
                "assert longest(['three', 'seven', 'eight', 'five']) == 'three'",
                "assert longest(['', '', 'a', 'bb', 'ccc', '', 'dd']) == 'ccc'",
                "assert longest(['', '', '']) == ''",
                "assert longest(['single']) == 'single'",
                "assert longest(['short', 'medium', 'longeststring', 'medium', 'short']) == 'longeststring'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 184,
        "completion_tokens": 288
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(3, 5) == 1",
                "assert greatest_common_divisor(5, 15) == 5",
                "assert greatest_common_divisor(24, 36) == 12",
                "assert greatest_common_divisor(-24, 36) == 12",
                "assert greatest_common_divisor(0, 5) == 5",
                "assert greatest_common_divisor(0, 0) == 0",
                "assert greatest_common_divisor(7, 7) == 7"
            ],
            "failed_tests": [
                "assert greatest_common_divisor(-24, -36) == 12 (AssertionError: )"
            ]
        },
        "prompt_tokens": 152,
        "completion_tokens": 280
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
                "assert all_prefixes('a') == ['a']",
                "assert all_prefixes('') == []",
                "assert all_prefixes('a b') == ['a', 'a ', 'a b']",
                "assert all_prefixes('123') == ['1', '12', '123']",
                "assert all_prefixes('aaa') == ['a', 'aa', 'aaa']",
                "assert all_prefixes('a1!') == ['a', 'a1', 'a1!']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 141,
        "completion_tokens": 176
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(0) == '0'",
                "assert string_sequence(5) == '0 1 2 3 4 5'",
                "assert string_sequence(1) == '0 1'",
                "assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'"
            ],
            "failed_tests": [
                "assert string_sequence(-1) == '0' (AssertionError: )"
            ]
        },
        "prompt_tokens": 150,
        "completion_tokens": 202
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('abcABC') == 3",
                "assert count_distinct_characters('banana') == 3",
                "assert count_distinct_characters('') == 0",
                "assert count_distinct_characters('AAAAAaaaaa') == 1",
                "assert count_distinct_characters('\u00f1\u00d1') == 1",
                "assert count_distinct_characters('Abc123') == 6"
            ],
            "failed_tests": [
                "assert count_distinct_characters('a b c') == 3 (AssertionError: )"
            ]
        },
        "prompt_tokens": 152,
        "completion_tokens": 198
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o') == [4]",
                "assert parse_music('.| .| .| .| .| .| .| .| .| .|') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
                "assert parse_music('') == []",
                "assert parse_music('.|') == [1]",
                "assert parse_music('o| o| o|') == [2, 2, 2]",
                "assert parse_music('o o| .|') == [4, 2, 1]",
                "assert parse_music('o    o|       .|') == [4, 2, 1]",
                "assert parse_music('o o o') == [4, 4, 4]"
            ],
            "failed_tests": [
                "assert parse_music('oo|.||o') == [] (KeyError: 'oo|.||o')"
            ]
        },
        "prompt_tokens": 254,
        "completion_tokens": 383
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('', 'a') == 0",
                "assert how_many_times('hello', 'h') == 1",
                "assert how_many_times('hello hello', 'hello') == 2",
                "assert how_many_times('aaaa', 'aa') == 3",
                "assert how_many_times('hello', 'hello') == 1",
                "assert how_many_times('hello', 'world') == 0",
                "assert how_many_times('aaa', 'a') == 3",
                "assert how_many_times('abababab', 'abab') == 3",
                "assert how_many_times('Hello hello', 'hello') == 1"
            ],
            "failed_tests": [
                "assert how_many_times('hello', '') == 0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 170,
        "completion_tokens": 320
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('seven') == 'seven'",
                "assert sort_numbers('one two three') == 'one two three'",
                "assert sort_numbers('nine eight seven') == 'seven eight nine'",
                "assert sort_numbers('four one nine two') == 'one two four nine'",
                "assert sort_numbers('six six two two') == 'two two six six'",
                "assert sort_numbers('nine eight seven six five four three two one zero') == 'zero one two three four five six seven eight nine'",
                "assert sort_numbers('') == ''",
                "assert sort_numbers('zero two four six eight') == 'zero two four six eight'",
                "assert sort_numbers('five three five three two') == 'two three three five five'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 187,
        "completion_tokens": 227
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.1]) == (2.0, 2.1)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([-5.0, -4.1, -4.0, -3.0]) == (-4.1, -4.0)",
                "assert find_closest_elements([0.001, 0.002, 0.003]) == (0.001, 0.002)",
                "assert find_closest_elements([0.1, 0.2, 5.0, 6.0]) == (0.1, 0.2)",
                "assert find_closest_elements([5.0, 6.0, 10.1, 10.2]) == (10.1, 10.2)",
                "assert find_closest_elements([2.0, 2.0, 2.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([1.0, 2.0]) == (1.0, 2.0)",
                "assert find_closest_elements([10.0, 1.0, 1.1, 20.0]) == (1.0, 1.1)"
            ],
            "failed_tests": [
                "assert find_closest_elements([-2.0, -1.5, 0.0, 1.5, 2.0]) == (-1.5, -2.0) (AssertionError: )"
            ]
        },
        "prompt_tokens": 248,
        "completion_tokens": 509
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([1.5, 2.5, 3.5, 4.5, 5.5]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([1.0, 1.0, 2.0, 3.0]) == [0.0, 0.0, 0.5, 1.0]",
                "assert rescale_to_unit([-100.0, 0.0, 50.0, 100.0]) == [0.0, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([0.001, 0.002, 0.003, 0.004, 0.005]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
            ],
            "failed_tests": [
                "assert rescale_to_unit([-5.0, -3.0, 0.0, 2.0, 4.0]) == [0.0, 0.25, 0.5, 0.75, 1.0] (AssertionError: )",
                "assert rescale_to_unit([2.0, 2.0, 2.0, 2.0]) == [0.0, 0.0, 0.0, 0.0] (ZeroDivisionError: float division by zero)"
            ]
        },
        "prompt_tokens": 205,
        "completion_tokens": 459
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_integers([1, 2.5, 'string', 3]) == [1, 3]",
                "assert filter_integers([10, 20, 30]) == [10, 20, 30]",
                "assert filter_integers(['a', {}, [], 100, 200]) == [100, 200]",
                "assert filter_integers([]) == []",
                "assert filter_integers(['string', 3.14, [], {}]) == []",
                "assert filter_integers([-1, 0, -10, 'text']) == [-1, 0, -10]"
            ],
            "failed_tests": [
                "assert filter_integers([True, False, 1, 0]) == [1, 0] (AssertionError: )"
            ]
        },
        "prompt_tokens": 173,
        "completion_tokens": 229
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('') == 0",
                "assert strlen('a') == 1",
                "assert strlen('hello') == 5",
                "assert strlen('hello world') == 11",
                "assert strlen('line1\\nline2') == 11",
                "assert strlen('hello\\tworld') == 11",
                "assert strlen('\u4f60\u597d') == 2",
                "assert strlen('\ud83d\ude0a') == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 125,
        "completion_tokens": 177
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(13) == 1",
                "assert largest_divisor(10) == 5",
                "assert largest_divisor(15) == 5",
                "assert largest_divisor(100) == 50",
                "assert largest_divisor(2) == 1",
                "assert largest_divisor(101) == 1",
                "assert largest_divisor(49) == 7"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 134,
        "completion_tokens": 201
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(7) == [7]",
                "assert factorize(15) == [3, 5]",
                "assert factorize(49) == [7, 7]",
                "assert factorize(360) == [2, 2, 2, 3, 3, 5]",
                "assert factorize(1) == []",
                "assert factorize(97) == [97]",
                "assert factorize(30) == [2, 3, 5]",
                "assert factorize(27) == [3, 3, 3]",
                "assert factorize(30030) == [2, 3, 5, 7, 11, 13]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 208,
        "completion_tokens": 336
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([2, 2, 2, 2]) == []",
                "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert remove_duplicates([]) == []",
                "assert remove_duplicates([-1, -2, -2, -3, -1]) == [-3]",
                "assert remove_duplicates([1, 2, 3, 1, 4, 5, 5]) == [2, 3, 4]",
                "assert remove_duplicates([1]) == [1]",
                "assert remove_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 5]) == [1, 5]"
            ],
            "failed_tests": [
                "assert remove_duplicates([-1, 1, -1, 2, 3, 2, -3, 4]) == [3, -3, 4] (AssertionError: )"
            ]
        },
        "prompt_tokens": 166,
        "completion_tokens": 323
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('Hello') == 'hELLO'",
                "assert flip_case('WORLD') == 'world'",
                "assert flip_case('python') == 'PYTHON'",
                "assert flip_case('Python3.8!') == 'pYTHON3.8!'",
                "assert flip_case('') == ''",
                "assert flip_case('Hello World') == 'hELLO wORLD'",
                "assert flip_case('p') == 'P'",
                "assert flip_case('D') == 'd'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 130,
        "completion_tokens": 225
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate([]) == ''",
                "assert concatenate(['hello']) == 'hello'",
                "assert concatenate(['a', 'b', 'c']) == 'abc'",
                "assert concatenate(['hello', ' ', 'world']) == 'hello world'",
                "assert concatenate(['1', '2', '3']) == '123'",
                "assert concatenate(['a1', 'b2', 'c3']) == 'a1b2c3'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 139,
        "completion_tokens": 181
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['hello', 'world', 'python'], 'x') == []",
                "assert filter_by_prefix(['apple', 'banana', 'apricot'], 'b') == ['banana']",
                "assert filter_by_prefix(['apple', 'banana', 'apricot', 'berry'], 'a') == ['apple', 'apricot']",
                "assert filter_by_prefix(['dog', 'dolphin', 'duck'], 'd') == ['dog', 'dolphin', 'duck']",
                "assert filter_by_prefix(['one', 'two', 'three'], '') == ['one', 'two', 'three']",
                "assert filter_by_prefix(['restart', 'restore', 'stop', 'star'], 'res') == ['restart', 'restore']",
                "assert filter_by_prefix(['1_start', '2_end', '_begin', 'start_'], '1_') == ['1_start']",
                "assert filter_by_prefix(['Apple', 'apricot', 'Banana'], 'a') == ['apricot']",
                "assert filter_by_prefix(['Apple', 'apricot', 'Banana'], 'A') == ['Apple']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 169,
        "completion_tokens": 437
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 2, -4, 5, 6, 0]) == [2, 5, 6]",
                "assert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert get_positive([-5, -4, -3, -2, -1, 0]) == []",
                "assert get_positive([]) == []",
                "assert get_positive([-1000, 5000, -300, 200, -100, 0, 10000]) == [5000, 200, 10000]",
                "assert get_positive([-1.5, 2.5, -4.0, 5.1, 6.0]) == [2.5, 5.1, 6.0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 195,
        "completion_tokens": 253
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(11) == True",
                "assert is_prime(4) == False",
                "assert is_prime(1) == False",
                "assert is_prime(2) == True",
                "assert is_prime(6) == False",
                "assert is_prime(61) == True",
                "assert is_prime(0) == False",
                "assert is_prime(-7) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 181,
        "completion_tokens": 190
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert round(find_zero([-6, 11, -6, 1]), 2) in [1.0, 2.0, 3.0]",
                "assert round(find_zero([6, 3]), 2) == -2.0",
                "assert poly([3, 2], -1) == 1",
                "assert poly([2, 3, 4], 1) == 9",
                "assert round(find_zero([3, -4, 1]), 2) in [1.0, 3.0]",
                "assert poly([3, 2], 0) == 3",
                "assert round(find_zero([-4, 2]), 2) == 2.0",
                "assert poly([5], 0) == 5",
                "assert poly([2, 3, 4], -1) == 3"
            ],
            "failed_tests": [
                "assert isinstance(find_zero([4, 0, 2]), complex) or isinstance(find_zero([4, 0, 2]), float) (OverflowError: math range error)"
            ]
        },
        "prompt_tokens": 341,
        "completion_tokens": 629
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_third([1, 2]) == [1, 2]",
                "assert sort_third([1, 2, 3]) == [1, 2, 3]",
                "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]",
                "assert sort_third([7, 7, 7, 7, 7, 7, 7]) == [7, 7, 7, 7, 7, 7, 7]",
                "assert sort_third([]) == []"
            ],
            "failed_tests": [
                "assert sort_third([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 8, 7, 3, 5, 4, 6, 2, 9] (AssertionError: )",
                "assert sort_third([\"c\", \"b\", \"a\", \"f\", \"e\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"] (AssertionError: )",
                "assert sort_third([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 9, 8, 3, 6, 5, 4, 1, 2, 7, 10] (AssertionError: )"
            ]
        },
        "prompt_tokens": 232,
        "completion_tokens": 445
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
                "assert unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert unique([1.1, 2, 2, 3.3, 1.1]) == [1.1, 2, 3.3]",
                "assert unique([]) == []",
                "assert unique([\"apple\", \"banana\", \"apple\", \"cherry\"]) == [\"apple\", \"banana\", \"cherry\"]",
                "assert unique([-1, -3, -2, -3, -1]) == [-3, -2, -1]",
                "assert unique([True, False, True, False, True]) == [False, True]",
                "assert unique([42, 42, 42, 42]) == [42]",
                "assert unique([(1, 2), (3, 4), (1, 2), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 155,
        "completion_tokens": 356
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([1, 2, 3, 4, 5]) == 5",
                "assert max_element([-1, -2, 3, 4, -5]) == 4",
                "assert max_element([-1, -2, -3, -4, -5]) == -1",
                "assert max_element([42]) == 42",
                "assert max_element([2, 2, 2, 2, 2]) == 2",
                "assert max_element([0, -1, -2, -3, -4, -5]) == 0",
                "assert max_element(list(range(-1000, 1001))) == 1000",
                "assert max_element([1.5, 2.5, 3.5, -4.5, 5.5]) == 5.5",
                "assert max_element([-1.1, -2.2, -3.3, -4.4, 5.5]) == 5.5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 164,
        "completion_tokens": 392
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(10) == 0",
                "assert fizz_buzz(12) == 0",
                "assert fizz_buzz(50) == 0",
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(79) == 3",
                "assert fizz_buzz(144) > 3",
                "assert fizz_buzz(78) == 2"
            ],
            "failed_tests": [
                "assert fizz_buzz(100) > 3 (AssertionError: )"
            ]
        },
        "prompt_tokens": 161,
        "completion_tokens": 458
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_even([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert sort_even([5, 6, 3, 4, 2]) == [2, 6, 3, 4, 5]",
                "assert sort_even([-1, 0, -3, 5, 0]) == [-3, 0, -1, 5, 0]",
                "assert sort_even([2, 1, 2, 3, 2]) == [2, 1, 2, 3, 2]",
                "assert sort_even([1]) == [1]",
                "assert sort_even([]) == []",
                "assert sort_even([\"a\", 1, \"b\", 2, \"c\"]) == [\"a\", 1, \"b\", 2, \"c\"]",
                "assert sort_even([4, 3, 2, 1]) == [2, 3, 4, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 205,
        "completion_tokens": 330
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert decode_cyclic(\"bca\") == \"abc\", \"Test with encoded string of length 3 failed.\"",
                "assert encode_cyclic(\"abc\") == \"bca\", \"Test with string of length 3 failed.\"",
                "assert encode_cyclic(\"a\") == \"a\", \"Test with single character failed.\"",
                "assert decode_cyclic(\"\") == \"\", \"Test with empty string failed.\"",
                "assert decode_cyclic(encode_cyclic(\"abcdef\")) == \"abcdef\", \"Decoding encoded string did not return original string.\"",
                "assert decode_cyclic(\"a\") == \"a\", \"Test with single character failed.\"",
                "assert encode_cyclic(\"ab\") == \"ab\", \"Test with two characters failed.\""
            ],
            "failed_tests": [
                "assert decode_cyclic(\"bcadef\") == \"abcdef\", \"Test with longer encoded string failed.\" (AssertionError: Test with longer encoded string failed.)",
                "assert encode_cyclic(\"abcdefg\") == \"bcadefg\", \"Test with string length leaving one character at the end failed.\" (AssertionError: Test with string length leaving one character at the end failed.)",
                "assert encode_cyclic(\"abcxyz\") == \"bcaxyz\", \"Test with string length divisible by 3 failed.\" (AssertionError: Test with string length divisible by 3 failed.)"
            ]
        },
        "prompt_tokens": 240,
        "completion_tokens": 435
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(1) == 2",
                "assert prime_fib(2) == 3",
                "assert prime_fib(3) == 5",
                "assert prime_fib(4) == 13",
                "assert prime_fib(5) == 89",
                "assert prime_fib(6) == 233",
                "assert True",
                "assert True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 179,
        "completion_tokens": 220
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, 3, -4, 2, -2]) == True",
                "assert triples_sum_to_zero([1, 2, 4, 5, 7]) == False",
                "assert triples_sum_to_zero([-5, 2, 3]) == True",
                "assert triples_sum_to_zero([-1, -2, -3, -4]) == False",
                "assert triples_sum_to_zero([0, -1, 1, -2, 2, -3, 3]) == True",
                "assert triples_sum_to_zero([0, 0, 0, 0]) == True",
                "assert triples_sum_to_zero([1]) == False",
                "assert triples_sum_to_zero([-1, 1]) == False",
                "assert triples_sum_to_zero([]) == False",
                "assert triples_sum_to_zero([-1, 0, 1, 5]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 241,
        "completion_tokens": 325
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(0) == 0",
                "assert car_race_collision(1) == 1",
                "assert car_race_collision(2) == 4",
                "assert car_race_collision(3) == 9",
                "assert car_race_collision(10) == 100",
                "assert car_race_collision(100) == 10000"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 233,
        "completion_tokens": 240
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([0, 1, 2]) == [1, 2, 3]",
                "assert incr_list([-1, -2, -3]) == [0, -1, -2]",
                "assert incr_list([-5, 0, 5]) == [-4, 1, 6]",
                "assert incr_list([100, 200, 300]) == [101, 201, 301]",
                "assert incr_list([]) == []",
                "assert incr_list([42]) == [43]",
                "assert incr_list([2, 2, 2]) == [3, 3, 3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 190,
        "completion_tokens": 230
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([1, -1, 3, 5]) == True",
                "assert pairs_sum_to_zero([1, 2, 3, 4]) == False",
                "assert pairs_sum_to_zero([-2, 2, 3, -3, 4]) == True",
                "assert pairs_sum_to_zero([0, 1, 2, 3]) == False",
                "assert pairs_sum_to_zero([1]) == False",
                "assert pairs_sum_to_zero([]) == False",
                "assert pairs_sum_to_zero([-1, -2, -3, 4, 5]) == False",
                "assert pairs_sum_to_zero([1000, -1000, 2000, -2000]) == True",
                "assert pairs_sum_to_zero([1, 1, 2, -2, 3, -3]) == True"
            ],
            "failed_tests": [
                "assert pairs_sum_to_zero([0, 0]) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 239,
        "completion_tokens": 342
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert change_base(10, 5) == '20'",
                "assert change_base(1, 2) == '1'",
                "assert change_base(8, 3) == '22'",
                "assert change_base(15, 8) == '17'",
                "assert change_base(256, 2) == '100000000'",
                "assert change_base(8, 2) == '1000'",
                "assert change_base(31, 5) == '111'",
                "assert change_base(255, 2) == '11111111'",
                "assert change_base(15, 2) == '1111'"
            ],
            "failed_tests": [
                "assert change_base(0, 2) == '0' (AssertionError: )"
            ]
        },
        "prompt_tokens": 173,
        "completion_tokens": 371
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(10, 10) == 50.0",
                "assert triangle_area(0, 10) == 0",
                "assert triangle_area(10, 0) == 0",
                "assert triangle_area(0, 0) == 0",
                "assert triangle_area(0.001, 0.002) == 0.000001"
            ],
            "failed_tests": [
                "assert triangle_area(5.5, 2.2) == 6.05 (AssertionError: )",
                "assert triangle_area(1234.56, 789.10) == 486850.728 (AssertionError: )"
            ]
        },
        "prompt_tokens": 128,
        "completion_tokens": 211
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib4(0) == 0, \"fib4(0) should be 0\"",
                "assert fib4(1) == 0, \"fib4(1) should be 0\"",
                "assert fib4(2) == 2, \"fib4(2) should be 2\"",
                "assert fib4(3) == 0, \"fib4(3) should be 0\"",
                "assert fib4(5) == 4, \"fib4(5) should be 4\"",
                "assert fib4(6) == 8, \"fib4(6) should be 8\"",
                "assert fib4(7) == 14, \"fib4(7) should be 14\""
            ],
            "failed_tests": [
                "assert fib4(4) == 4, \"fib4(4) should be 4 (0+0+2+2)\" (AssertionError: fib4(4) should be 4 (0+0+2+2))",
                "assert fib4(10) == 68, \"fib4(10) should be 68\" (AssertionError: fib4(10) should be 68)",
                "assert fib4(20) == 46368, \"fib4(20) should be 46368\" (AssertionError: fib4(20) should be 46368)"
            ]
        },
        "prompt_tokens": 253,
        "completion_tokens": 282
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([3, 1, 2, 4, 5]) == 3",
                "assert median([-5, -1, -3]) == -3",
                "assert median([-10, -20, -30, -40]) == -25.0",
                "assert median([1, 2, 2, 3, 4]) == 2",
                "assert median([1, 2, 3, 4, 5]) == 3",
                "assert median([42]) == 42",
                "assert median([7, 7, 7, 7]) == 7",
                "assert median([1.5, 2.5, 3.5, 4.5, 5.5]) == 3.5",
                "assert median(list(range(1, 10001))) == 5000.5"
            ],
            "failed_tests": [
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 157,
        "completion_tokens": 347
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('') == True",
                "assert is_palindrome('a') == True",
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('racecar') == True",
                "assert is_palindrome('python') == False",
                "assert is_palindrome('Aba') == False",
                "assert is_palindrome('12321') == True",
                "assert is_palindrome('123456') == False"
            ],
            "failed_tests": [
                "assert is_palindrome('a man a plan a canal panama') == True (AssertionError: )",
                "assert is_palindrome('A man, a plan, a canal: Panama') == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 153,
        "completion_tokens": 280
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(3, 5) == 3",
                "assert modp(1101, 101) == 2",
                "assert modp(0, 101) == 1",
                "assert modp(3, 11) == 8",
                "assert modp(100, 101) == 1",
                "assert modp(7, 7) != 1",
                "assert modp(10, 1) == 0",
                "assert modp(1, 2) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 187,
        "completion_tokens": 346
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_shift(\"a\") == \"f\"",
                "assert encode_shift(\"z\") == \"e\"",
                "assert encode_shift(\"abcdefghijklmnopqrstuvwxyz\") == \"fghijklmnopqrstuvwxyzabcde\"",
                "assert encode_shift(\"\") == \"\"",
                "assert decode_shift(\"f\") == \"a\"",
                "assert decode_shift(\"e\") == \"z\"",
                "assert decode_shift(\"fghijklmnopqrstuvwxyzabcde\") == \"abcdefghijklmnopqrstuvwxyz\"",
                "assert decode_shift(\"\") == \"\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 172,
        "completion_tokens": 240
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('') == ''",
                "assert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'",
                "assert remove_vowels('abcdef') == 'bcdf'",
                "assert remove_vowels('aaaaa') == ''",
                "assert remove_vowels('aaBAA') == 'B'",
                "assert remove_vowels('zbcd') == 'zbcd'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 204,
        "completion_tokens": 162
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 4, 10], 100) == True",
                "assert below_threshold([1, 20, 4, 10], 5) == False",
                "assert below_threshold([], 10) == True",
                "assert below_threshold([5, 5, 5], 5) == False",
                "assert below_threshold([-1, -2, -3], 0) == True",
                "assert below_threshold([-1, 10, 3, -4], 5) == False",
                "assert below_threshold([1, 2, 3], -1) == False",
                "assert below_threshold([1, 2, 3, 4], 1000) == True",
                "assert below_threshold([100, 200, 300], 10) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 161,
        "completion_tokens": 300
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(2, 3) == 5",
                "assert add(-4, -6) == -10",
                "assert add(5, -2) == 3",
                "assert add(-3, 7) == 4",
                "assert add(0, 5) == 5",
                "assert add(-5, 0) == -5",
                "assert add(0, 0) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 135,
        "completion_tokens": 158
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False",
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
                "assert same_chars('abcd', 'dddddddabce') == False",
                "assert same_chars('abcd', 'dddddddabc') == True",
                "assert same_chars('', '') == True",
                "assert same_chars('eabcd', 'dddddddabc') == False",
                "assert same_chars('abc', 'cba') == True",
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('abc', 'abc') == True",
                "assert same_chars('abc', 'xyz') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 222,
        "completion_tokens": 331
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib(3) == 2",
                "assert fib(20) == 6765",
                "assert fib(1) == 1",
                "assert fib(2) == 1",
                "assert fib(5) == 5",
                "assert True",
                "assert fib(8) == 21",
                "assert fib(10) == 55",
                "assert fib(0) == 0"
            ],
            "failed_tests": [
                "assert False (AssertionError: )"
            ]
        },
        "prompt_tokens": 134,
        "completion_tokens": 280
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"<\") == False",
                "assert correct_bracketing(\"<>\") == True",
                "assert correct_bracketing(\"<<><>>\") == True",
                "assert correct_bracketing(\"><<>\") == False",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"<<>><<>><>\") == True",
                "assert correct_bracketing(\">>>>\") == False",
                "assert correct_bracketing(\"><><\") == False",
                "assert correct_bracketing(\"<<<<<<<<>>>>>>>>\") == True"
            ],
            "failed_tests": [
                "assert correct_bracketing(\"<><<><>><<>>><<><>>>\") == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 174,
        "completion_tokens": 270
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 2, 4, 20]) == True",
                "assert monotonic([1, 20, 4, 10]) == False",
                "assert monotonic([4, 1, 0, -10]) == True",
                "assert monotonic([1, 1, 2, 3]) == True",
                "assert monotonic([3, 2, 2, 1]) == True",
                "assert monotonic([5, 5, 5, 5]) == True",
                "assert monotonic([1]) == True",
                "assert monotonic([]) == True",
                "assert monotonic([1, 2, 3, 2, 1]) == False",
                "assert monotonic([3, 2, 1, 2, 3]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 169,
        "completion_tokens": 284
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
                "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]",
                "assert common([10, 20, 30], [1, 2, 3]) == []",
                "assert common([], [1, 2, 3]) == []",
                "assert common([], []) == []",
                "assert common([1, 2, 3], [1, 2, 3, 4, 5]) == [1, 2, 3]",
                "assert common([\"apple\", \"banana\", \"cherry\"], [\"banana\", \"cherry\", \"fig\"]) == [\"banana\", \"cherry\"]",
                "assert common([\"1\", \"2\", \"3\"], [1, 2, 3]) == []",
                "assert common([1, 1, 1, 2, 2, 3], [1, 2, 2, 2, 3, 3, 3]) == [1, 2, 3]",
                "assert common([True, 1, 0], [0, False, True]) == [0, True]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 196,
        "completion_tokens": 414
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(15) == 5",
                "assert largest_prime_factor(49) == 7"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 145,
        "completion_tokens": 161
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(100) == 5050",
                "assert sum_to_n(30) == 465",
                "assert sum_to_n(10) == 55",
                "assert sum_to_n(0) == 0"
            ],
            "failed_tests": [
                "assert False, \"Expected a ValueError for negative input\" (AssertionError: Expected a ValueError for negative input)"
            ]
        },
        "prompt_tokens": 176,
        "completion_tokens": 283
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"(\") == False",
                "assert correct_bracketing(\"()\") == True",
                "assert correct_bracketing(\"(()())\") == True",
                "assert correct_bracketing(\")(()\") == False",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"()()\") == True",
                "assert correct_bracketing(\"(((())))\") == True",
                "assert correct_bracketing(\"((((())\") == False",
                "assert correct_bracketing(\"(()()(()))\") == True"
            ],
            "failed_tests": [
                "assert correct_bracketing(\"(()(()))\") == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 171,
        "completion_tokens": 296
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
                "assert derivative([1, 2, 3]) == [2, 6]",
                "assert derivative([5]) == []",
                "assert derivative([2, 3]) == [3]",
                "assert derivative([0, 0, 0, 3]) == [0, 0, 9]",
                "assert derivative([-3, -2, -1]) == [-2, -2]",
                "assert derivative([]) == []",
                "assert derivative([0, 4]) == [4]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 190,
        "completion_tokens": 370
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fibfib(0) == 0, \"Test case fibfib(0) failed\"",
                "assert fibfib(1) == 0, \"Test case fibfib(1) failed\"",
                "assert fibfib(2) == 1, \"Test case fibfib(2) failed\"",
                "assert fibfib(3) == 1, \"Test case fibfib(3) failed\"",
                "assert fibfib(4) == 2, \"Test case fibfib(4) failed\"",
                "assert fibfib(5) == 4, \"Test case fibfib(5) failed\"",
                "assert fibfib(8) == 24, \"Test case fibfib(8) failed\"",
                "assert fibfib(10) == 81, \"Test case fibfib(10) failed\""
            ],
            "failed_tests": [
                "assert fibfib(15) == 3136, \"Test case fibfib(15) failed\" (AssertionError: Test case fibfib(15) failed)"
            ]
        },
        "prompt_tokens": 231,
        "completion_tokens": 309
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"aeiou\") == 5",
                "assert vowels_count(\"bcdfg\") == 0",
                "assert vowels_count(\"AEIOU\") == 5",
                "assert vowels_count(\"Hello, world! Yay!\") == 4",
                "assert vowels_count(\"rhythm\") == 0",
                "assert vowels_count(\"syzygy\") == 1"
            ],
            "failed_tests": [
                "assert vowels_count(\"happy\") == 1 (AssertionError: )",
                "assert vowels_count(\"hAppY\") == 1 (AssertionError: )",
                "assert vowels_count(\"\") == 0 (IndexError: string index out of range)"
            ]
        },
        "prompt_tokens": 208,
        "completion_tokens": 277
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(123, 1) == \"312\"",
                "assert circular_shift(12, 1) == \"21\"",
                "assert circular_shift(5, 10) == \"5\"",
                "assert circular_shift(123, 4) == \"321\"",
                "assert circular_shift(123, 2) == \"231\"",
                "assert circular_shift(12, 2) == \"12\"",
                "assert circular_shift(123456, 2) == \"561234\"",
                "assert circular_shift(123, 3) == \"123\"",
                "assert circular_shift(5, 1) == \"5\""
            ],
            "failed_tests": [
                "assert circular_shift(-123, 1) == \"312\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 164,
        "completion_tokens": 381
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"\") == 0",
                "assert digitSum(\"abAB\") == 131",
                "assert digitSum(\"abcCd\") == 67",
                "assert digitSum(\"helloE\") == 69",
                "assert digitSum(\"woArBld\") == 131",
                "assert digitSum(\"aAaaaXa\") == 153",
                "assert digitSum(\"lowercase\") == 0",
                "assert digitSum(\"UPPER\") == sum([ord(c) for c in \"UPPER\"])",
                "assert digitSum(\"AAABBB\") == (65*3 + 66*3)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 194,
        "completion_tokens": 358
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"5 apples and 6 oranges\", 11) == 0",
                "assert fruit_distribution(\"0 apples and 0 oranges\", 10) == 10",
                "assert fruit_distribution(\"4 apples and 5 oranges\", 9) == 0",
                "assert fruit_distribution(\"100 apples and 200 oranges\", 500) == 200",
                "assert fruit_distribution(\"  3 apples and 2 oranges  \", 10) == 5",
                "assert fruit_distribution(\"1 apples and 1 oranges\", 3) == 1",
                "assert fruit_distribution(\"999 apples and 1 oranges\", 2000) == 1000",
                "assert fruit_distribution(\"2 apples and 3 oranges\", 1000) == 995",
                "assert fruit_distribution(\"10 apples and 10 oranges\", 15) == -5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 292,
        "completion_tokens": 303
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([2] * 1000) == [2, 0]",
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
                "assert pluck(list(range(1, 1001)) + [0]) == [0, 1000]",
                "assert pluck([2, 3, 2, 4]) == [2, 0]",
                "assert pluck([2, 4, 6]) == [2, 0]",
                "assert pluck([]) == []",
                "assert pluck([0, 0, 0]) == [0, 0]",
                "assert pluck([1, 3, 5]) == []",
                "assert pluck([1, 2, 3, 4]) == [2, 1]",
                "assert pluck([4, 6, 2]) == [2, 2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 394,
        "completion_tokens": 444
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert search([4, 1, 2, 2, 3, 1]) == 2",
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
                "assert search([5, 5, 4, 4, 4]) == -1",
                "assert search([1]) == 1",
                "assert search([3, 3, 3, 2, 2, 1]) == 3",
                "assert search([2, 2, 3, 1]) == 2",
                "assert search([1, 1, 1, 1, 2, 2, 2]) == 2",
                "assert search([4, 4, 4, 4]) == 4",
                "assert search([5, 5, 4, 2, 2]) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 247,
        "completion_tokens": 490
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([4, 3, 2, 1]) == [1, 4, 2, 3]",
                "assert strange_sort_list([-1, -2, -3, -4]) == [-4, -1, -3, -2]",
                "assert strange_sort_list([-2, -1, 1, 2]) == [-2, 2, -1, 1]",
                "assert strange_sort_list([10, 2, 7, 3, 11, 5]) == [2, 11, 3, 10, 5, 7]",
                "assert strange_sort_list([0, 1, -1, 2, -2]) == [-2, 2, -1, 1, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 311
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 5, 5) == 10.83",
                "assert triangle_area(1000, 1000, 1000) == 433012.70",
                "assert triangle_area(2, 3, -1) == -1",
                "assert triangle_area(-1, 2, 3) == -1",
                "assert triangle_area(4, 5, 6) == 9.92",
                "assert triangle_area(2, -1, 3) == -1",
                "assert triangle_area(1, 2, 3) == -1",
                "assert triangle_area(2, 3, 0) == -1"
            ],
            "failed_tests": [
                "assert triangle_area(0.1, 0.1, 0.1) == 0.04 (AssertionError: )",
                "assert triangle_area(3.5, 4.5, 5.5) == 7.48 (AssertionError: )"
            ]
        },
        "prompt_tokens": 203,
        "completion_tokens": 436
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([1, 2], 5) == False",
                "assert will_it_fly([3, 2, 3], 1) == False",
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([3], 5) == True",
                "assert will_it_fly([], 0) == True",
                "assert will_it_fly([2, 2], 4) == True",
                "assert will_it_fly([1, 3], 4) == False",
                "assert will_it_fly([-1, -2, -1], -3) == True",
                "assert will_it_fly([1, 2, 3, 2, 1], 10) == True",
                "assert will_it_fly([1, 2, 3, 4, 5], 20) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 312,
        "completion_tokens": 397
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1, 2, 3, 2, 1]) == 0",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4",
                "assert smallest_change([]) == 0",
                "assert smallest_change([5]) == 0",
                "assert smallest_change([1, 1]) == 0",
                "assert smallest_change([1, 2]) == 1",
                "assert smallest_change([7, 7, 7, 7, 7]) == 0",
                "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 0"
            ],
            "failed_tests": [
                "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 239,
        "completion_tokens": 468
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match([], []) == []",
                "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']",
                "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']",
                "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']",
                "assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']",
                "assert total_match(['short', 'list'], ['longer', 'list', 'with', 'more', 'chars']) == ['short', 'list']",
                "assert total_match(['longer', 'list', 'with', 'more', 'chars'], ['short', 'list']) == ['short', 'list']",
                "assert total_match(['abc', 'def'], ['ghi', 'jkl']) == ['abc', 'def']",
                "assert total_match(['a', 'b', 'cdef'], ['ab', 'cd', 'ef']) == ['a', 'b', 'cdef']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 275,
        "completion_tokens": 366
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(27) == True",
                "assert is_multiply_prime(2*3*5) == True",
                "assert is_multiply_prime(7) == False",
                "assert is_multiply_prime(2*3) == False",
                "assert is_multiply_prime(1) == False",
                "assert is_multiply_prime(2*3*17) == True",
                "assert is_multiply_prime(3**2) == False"
            ],
            "failed_tests": [
                "assert is_multiply_prime(8) == False (AssertionError: )",
                "assert is_multiply_prime(99) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 161,
        "completion_tokens": 300
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(-8, 2) == False",
                "assert is_simple_power(0, 0) == False",
                "assert is_simple_power(5, 3) == False",
                "assert is_simple_power(0, 2) == False",
                "assert is_simple_power(4, 2) == True",
                "assert is_simple_power(3, 1) == False",
                "assert is_simple_power(1, 4) == True",
                "assert is_simple_power(8, -2) == False",
                "assert is_simple_power(3, 2) == False",
                "assert is_simple_power(8, 2) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 224,
        "completion_tokens": 412
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(27) == True",
                "assert iscube(-8) == True",
                "assert iscube(5) == False",
                "assert iscube(1) == True",
                "assert iscube(0) == True",
                "assert iscube(729) == True",
                "assert iscube(500) == False",
                "assert iscube(-27) == True",
                "assert iscube(-2) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 192,
        "completion_tokens": 189
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"2\") == 1",
                "assert hex_key(\"6\") == 0",
                "assert hex_key(\"2357BD\") == 6",
                "assert hex_key(\"468ACEF0\") == 0",
                "assert hex_key(\"123456789ABCDEF0123456789ABCDEF0\") == 12",
                "assert hex_key(\"\") == 0",
                "assert hex_key(\"7777\") == 4"
            ],
            "failed_tests": [
                "assert hex_key(\"1A3B\") == 3 (AssertionError: )",
                "assert hex_key(\"abed1a33\") == 4 (AssertionError: )",
                "assert hex_key(\"19\") == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 381,
        "completion_tokens": 294
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(0) == \"db0db\"",
                "assert decimal_to_binary(1) == \"db1db\"",
                "assert decimal_to_binary(2) == \"db10db\"",
                "assert decimal_to_binary(15) == \"db1111db\"",
                "assert decimal_to_binary(32) == \"db100000db\"",
                "assert decimal_to_binary(255) == \"db11111111db\"",
                "assert decimal_to_binary(170) == \"db10101010db\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 221,
        "completion_tokens": 288
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy(\"abc\") == True",
                "assert is_happy(\"xyyz\") == False",
                "assert is_happy(\"xyy\") == False",
                "assert is_happy(\"aa\") == False",
                "assert is_happy(\"abcdefghiaa\") == False",
                "assert is_happy(\"aabb\") == False",
                "assert is_happy(\"abcd\") == True",
                "assert is_happy(\"a\") == False",
                "assert is_happy(\"aab\") == False",
                "assert is_happy(\"adbce\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 203,
        "completion_tokens": 269
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([4.0, 0.0]) == ['A+', 'E']",
                "assert numerical_letter_grade([]) == []",
                "assert numerical_letter_grade([3.5]) == ['A-']"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([4.0, 3.8, 3.5, 3.2, 3.0, 2.8, 2.5, 2.2, 2.0, 1.8, 1.5, 1.2, 1.0, 0.8, 0.5, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'] (AssertionError: )",
                "assert numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == ['A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D'] (AssertionError: )",
                "assert numerical_letter_grade([2.0, 2.0, 2.0]) == ['C+', 'C+', 'C+'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 352,
        "completion_tokens": 383
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('Hello') == True",
                "assert prime_length('abcdcba') == True",
                "assert prime_length('kittens') == True",
                "assert prime_length('orange') == False",
                "assert prime_length('') == False",
                "assert prime_length('Hi') == True",
                "assert prime_length('A') == False",
                "assert prime_length('abcdefghijk') == True",
                "assert prime_length('test') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 163,
        "completion_tokens": 226
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert starts_one_ends(1) == 1",
                "assert starts_one_ends(3) == 180"
            ],
            "failed_tests": [
                "assert starts_one_ends(2) == 19 (AssertionError: )",
                "assert starts_one_ends(4) == 1900 (AssertionError: )",
                "assert starts_one_ends(5) == 19000 (AssertionError: )",
                "assert starts_one_ends(6) == 190000 (AssertionError: )"
            ]
        },
        "prompt_tokens": 126,
        "completion_tokens": 212
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(0) == \"0\"",
                "assert solve(5) == \"101\"",
                "assert solve(11) == \"10\"",
                "assert solve(23) == \"101\"",
                "assert solve(123) == \"110\"",
                "assert solve(9999) == \"100100\"",
                "assert solve(10000) == \"1\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 215,
        "completion_tokens": 352
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2",
                "assert add([1, 4, 3, 6, 5, 8]) == 18",
                "assert add([2, 3, 4, 5, 6, 7]) == 0",
                "assert add([2]) == 0",
                "assert add([1]) == 0",
                "assert add([1, 3, 5, 7, 9, 11]) == 0",
                "assert add([-1, 2, -3, 4, -5, 6, -7, 8]) == 20",
                "assert add([]) == 0"
            ],
            "failed_tests": [
                "assert add([2, 4, 6, 8, 10, 12]) == 12 (AssertionError: )",
                "assert add([-1, -2, -3, -4, -5, -6]) == -6 (AssertionError: )"
            ]
        },
        "prompt_tokens": 137,
        "completion_tokens": 337
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('Hi') == 'Hi'",
                "assert anti_shuffle('hello') == 'ehllo'",
                "assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'",
                "assert anti_shuffle('') == ''",
                "assert anti_shuffle('Hello   World!!!') == 'Hello   !!!Wdlor'",
                "assert anti_shuffle('cba') == 'abc'",
                "assert anti_shuffle('123 456') == '123 456'"
            ],
            "failed_tests": [
                "assert anti_shuffle('Python Programming') == 'Phnoty Gimamnoprr' (AssertionError: )",
                "assert anti_shuffle('letters and words') == 'eelrst adn dorsw' (AssertionError: )"
            ]
        },
        "prompt_tokens": 212,
        "completion_tokens": 237
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
                "assert get_row([], 1) == []",
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]",
                "assert get_row([\n  [2,3,4],\n  [5,6,7]\n], 1) == []",
                "assert get_row([\n  [1,1,1],\n  [2,2,2]\n], 1) == [(0, 2), (0, 1), (0, 0)]",
                "assert get_row([\n  [1],\n  [2,3,4],\n  [5]\n], 1) == [(0, 0)]",
                "assert get_row([\n  [1],\n  [1],\n  [2,3,4]\n], 1) == [(0, 0), (1, 0)]",
                "assert get_row([\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n], 10) == []",
                "assert get_row([\n  [2,3,4,1],\n  [5,6,7,8]\n], 1) == [(0, 3)]",
                "assert get_row([\n  [1,2,3],\n  [4,5,6],\n  [7,8,1]\n], 1) == [(0, 0), (2, 2)]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 341,
        "completion_tokens": 608
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([2, 2, 2, 2]) == [2, 2, 2, 2]",
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
                "assert sort_array([]) == []",
                "assert sort_array(list(range(1000, 0, -1))) == list(range(1, 1001))",
                "assert sort_array([0, 1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
                "assert sort_array([3, 3, 3, 3]) == [3, 3, 3, 3]",
                "assert sort_array([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([5]) == [5]"
            ],
            "failed_tests": [
                "assert sort_array([-1, -2, -3, -4]) == [-1, -2, -3, -4] (AssertionError: )"
            ]
        },
        "prompt_tokens": 285,
        "completion_tokens": 537
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encrypt('hi') == 'lm'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('gf') == 'kj'",
                "assert encrypt('et') == 'ix'",
                "assert encrypt('xyz') == 'bcd'",
                "assert encrypt('') == ''",
                "assert encrypt('hello world!') == 'lipps asvph!'",
                "assert encrypt('abcdefghijklmnopqrstuvwxyz') == 'efghijklmnopqrstuvwxyzabcd'"
            ],
            "failed_tests": [
                "assert encrypt('AbCdEf') == 'EfGhIj' (AssertionError: )"
            ]
        },
        "prompt_tokens": 192,
        "completion_tokens": 247
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([2, 3, 2, 1, 4]) == 2",
                "assert next_smallest([2, 1]) == 2",
                "assert next_smallest([1, 1]) == None",
                "assert next_smallest([3, 4, 5, 1, 2]) == 2",
                "assert next_smallest([]) == None",
                "assert next_smallest([-1, 0, 1]) == 0",
                "assert next_smallest([-3, -1, -2]) == -2",
                "assert next_smallest(list(range(1, 10001))) == 2",
                "assert next_smallest([2, 3, 4, 5, 1]) == 2",
                "assert next_smallest([1, 2, 3, 4, 5]) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 385
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"Hello world\") == 0",
                "assert is_bored(\"I am feeling bored today.\") == 1",
                "assert is_bored(\"The sky is blue. I love sunny days. What about you?\") == 1",
                "assert is_bored(\"I am bored. I don't know what to do!\") == 2",
                "assert is_bored(\"Today, I am feeling great. It's a wonderful day. I think I'll go outside.\") == 1",
                "assert is_bored(\"\") == 0",
                "assert is_bored(\"i am feeling bored today. i don't know what to do!\") == 0",
                "assert is_bored(\"I am bored! I really don't know what to do. I think I'll go outside?\") == 3",
                "assert is_bored(\"Today is a good day. I think I'll go for a walk. It's sunny outside.\") == 1"
            ],
            "failed_tests": [
                "assert is_bored(\" I am bored. I really don't know what to do. \") == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 189,
        "completion_tokens": 379
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(5, 2, 7) == True",
                "assert any_int(3, 2, 2) == False",
                "assert any_int(3, -2, 1) == True",
                "assert any_int(3.6, -2.2, 2) == False",
                "assert any_int(2, 2, 2) == False",
                "assert any_int(0, -5, 5) == True",
                "assert any_int(100, 50, 50) == True",
                "assert any_int(-10, -20, -10) == True",
                "assert any_int(0, 3, 5) == False",
                "assert any_int(0, 0, 0) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 217,
        "completion_tokens": 315
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'",
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
                "assert encode('bcdfg') == 'BCDFG'",
                "assert encode('') == ''"
            ],
            "failed_tests": [
                "assert encode('aeiou') == 'CGKQO' (AssertionError: )",
                "assert encode('AEIOU') == 'cgkqo' (AssertionError: )",
                "assert encode('Hello World') == 'hKLLQ wQRLD' (AssertionError: )",
                "assert encode('abcdefghijklmnopqrstuvwxyz') == 'cBgDKfGhJKlMnOpQrStUvWxYz' (AssertionError: )",
                "assert encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'cBgDKfGhJKlMnOpQrStUvWxYz'.upper() (AssertionError: )"
            ]
        },
        "prompt_tokens": 191,
        "completion_tokens": 296
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
                "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
                "assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13",
                "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11",
                "assert skjkasdkd([0,81,12,3,1,21]) == 3",
                "assert skjkasdkd([0,8,1,2,1,7]) == 7",
                "assert skjkasdkd([]) == 0",
                "assert skjkasdkd([0,4,6,8,10,12,14,16]) == 0"
            ],
            "failed_tests": [
                "assert skjkasdkd([-3, -5, -7, 5, 11, 13]) == 5 (AssertionError: )"
            ]
        },
        "prompt_tokens": 368,
        "completion_tokens": 476
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) == True",
                "assert check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}) == False",
                "assert check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}) == False",
                "assert check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) == True",
                "assert check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}) == False",
                "assert check_dict_case({}) == False",
                "assert check_dict_case({\"single\": \"value\"}) == True",
                "assert check_dict_case({\"SINGLE\": \"value\"}) == True",
                "assert check_dict_case({\"one\": 1, \"two\": 2, \"three\": 3}) == True",
                "assert check_dict_case({\"ONE\": 1, \"TWO\": \"two\", \"THREE\": [3]}) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 251,
        "completion_tokens": 333
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(0) == []",
                "assert count_up_to(1) == []",
                "assert count_up_to(2) == []",
                "assert count_up_to(5) == [2, 3]",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]",
                "assert count_up_to(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
                "assert count_up_to(-5) == []",
                "assert count_up_to(7) == [2, 3, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 227,
        "completion_tokens": 479
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert multiply(148, 412) == 16",
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(14, -15) == 20",
                "assert multiply(-123, -567) == 21",
                "assert multiply(123456789, 987654321) == 9",
                "assert multiply(1, 1) == 1"
            ],
            "failed_tests": [
                "assert multiply(1, -1) == 1 (AssertionError: )",
                "assert multiply(-1, -1) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 180,
        "completion_tokens": 275
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('aBCdEf') == 1",
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('dBBE') == 0",
                "assert count_upper('AeIoU') == 3",
                "assert count_upper('') == 0",
                "assert count_upper('A') == 1",
                "assert count_upper('a') == 0",
                "assert count_upper('bAcEd') == 0"
            ],
            "failed_tests": [
                "assert count_upper('AbEcIdOF') == 2 (AssertionError: )",
                "assert count_upper('AbCdEfGhIj') == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 154,
        "completion_tokens": 264
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"0.1\") == 0",
                "assert closest_integer(\"0\") == 0",
                "assert closest_integer(\"14.5\") == 15",
                "assert closest_integer(\"-20\") == -20",
                "assert closest_integer(\"15.3\") == 15",
                "assert closest_integer(\"-14.5\") == -15",
                "assert closest_integer(\"-123456789.987654321\") == -123456790",
                "assert closest_integer(\"123456789.123456789\") == 123456789",
                "assert closest_integer(\"-0.1\") == 0",
                "assert closest_integer(\"-15.7\") == -16"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 238,
        "completion_tokens": 259
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(2) == [2, 4]",
                "assert make_a_pile(3) == [3, 5, 7]",
                "assert make_a_pile(4) == [4, 6, 8, 10]",
                "assert make_a_pile(5) == [5, 7, 9, 11, 13]",
                "assert make_a_pile(10) == [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]",
                "assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 214,
        "completion_tokens": 308
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]",
                "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
                "assert words_string(\"Hello, world \") == [\"Hello\", \"world\"]",
                "assert words_string(\" Test,case\") == [\"Test\", \"case\"]",
                "assert words_string(\"Multiple   spaces\") == [\"Multiple\", \"spaces\"]",
                "assert words_string(\"Only,commas,no,spaces\") == [\"Only\", \"commas\", \"no\", \"spaces\"]",
                "assert words_string(\"\") == []",
                "assert words_string(\"Special&characters,are,here!\") == [\"Special&characters\", \"are\", \"here!\"]",
                "assert words_string(\"Numbers,1,2,3\") == [\"Numbers\", \"1\", \"2\", \"3\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 198,
        "completion_tokens": 290
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert choose_num(10, 20) == 20",
                "assert choose_num(-5, -1) == -2",
                "assert choose_num(13, 13) == -1",
                "assert choose_num(-2, 2) == 2",
                "assert choose_num(12, 15) == 14",
                "assert choose_num(13, 14) == 14",
                "assert choose_num(14, 14) == 14"
            ],
            "failed_tests": [
                "assert choose_num(13, 15) == -1 (AssertionError: )",
                "assert choose_num(15, 12) == 14 (AssertionError: )",
                "assert choose_num(-3, -1) == -1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 176,
        "completion_tokens": 371
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(1, 5) == \"0b11\"",
                "assert rounded_avg(7, 5) == -1",
                "assert rounded_avg(10, 10) == bin(10)",
                "assert rounded_avg(10, 20) == \"0b1111\"",
                "assert rounded_avg(20, 33) == \"0b11010\"",
                "assert rounded_avg(100, 200) == bin((100 + 200) // 2)",
                "assert rounded_avg(100000, 200000) == bin((100000 + 200000) // 2)"
            ],
            "failed_tests": [
                "assert rounded_avg(2, 3) == bin(3) (AssertionError: )"
            ]
        },
        "prompt_tokens": 222,
        "completion_tokens": 289
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([152, 323, 1422, 10]) == []",
                "assert unique_digits([]) == []",
                "assert unique_digits([135, 57, 9]) == [9, 57, 135]",
                "assert unique_digits([111]) == [111]",
                "assert unique_digits([124]) == []",
                "assert unique_digits([111, 333, 555]) == [111, 333, 555]",
                "assert unique_digits([13579, 2468, 123456, 97531]) == [13579, 97531]",
                "assert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]"
            ],
            "failed_tests": [
                "assert unique_digits([22, 33, 44, 55, 33, 55]) == [33, 55] (AssertionError: )"
            ]
        },
        "prompt_tokens": 184,
        "completion_tokens": 371
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([2, 10, 1, 4, 5, 8, 2, 3, 0, -1, 11]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"]",
                "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]",
                "assert by_length([]) == []",
                "assert by_length([10, 11, 0, -1, 12]) == []",
                "assert by_length([5]) == [\"Five\"]",
                "assert by_length([3, 3, 3, 3]) == [\"Three\", \"Three\", \"Three\", \"Three\"]",
                "assert by_length([0]) == []",
                "assert by_length([-2, -1, 10, 15, 20]) == []",
                "assert by_length([1, -1, 55, 2, 3, 8]) == [\"Eight\", \"Three\", \"Two\", \"One\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 358,
        "completion_tokens": 377
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert f(0) == []",
                "assert f(1) == [1]",
                "assert f(2) == [1, 2]",
                "assert f(3) == [1, 2, 6]",
                "assert f(4) == [1, 2, 6, 24]",
                "assert f(5) == [1, 2, 6, 24, 15]",
                "assert f(7) == [1, 2, 6, 24, 15, 720, 28]",
                "assert f(5)[-1] == 15"
            ],
            "failed_tests": [
                "assert f(7)[-1] == 720 (AssertionError: )"
            ]
        },
        "prompt_tokens": 206,
        "completion_tokens": 408
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(1) == (0, 1)",
                "assert even_odd_palindrome(2) == (1, 1)",
                "assert even_odd_palindrome(10) == (4, 5)",
                "assert even_odd_palindrome(12) == (4, 6)"
            ],
            "failed_tests": [
                "assert even_odd_palindrome(20) == (5, 6) (AssertionError: )",
                "assert even_odd_palindrome(100) == (10, 9) (AssertionError: )",
                "assert even_odd_palindrome(99) == (10, 9) (AssertionError: )",
                "assert even_odd_palindrome(123) == (10, 9) (AssertionError: )"
            ]
        },
        "prompt_tokens": 293,
        "completion_tokens": 428
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_nums([]) == 0",
                "assert count_nums([-1, 11, -11]) == 1",
                "assert count_nums([1, 1, 2]) == 3",
                "assert count_nums([0, 10, 100]) == 2",
                "assert count_nums([-10, -20, -30]) == 0"
            ],
            "failed_tests": [
                "assert count_nums([12, -34, 56, -78, 90]) == 3 (AssertionError: )",
                "assert count_nums([-9, 9, 18, -18]) == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 206,
        "completion_tokens": 287
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([1, 2, 3, 4, 5]) == True",
                "assert move_one_ball([5, 1, 2, 3, 4]) == True",
                "assert move_one_ball([3, 4, 5, 1, 2]) == True",
                "assert move_one_ball([3, 5, 4, 1, 2]) == False",
                "assert move_one_ball([]) == True",
                "assert move_one_ball([1]) == True",
                "assert move_one_ball([10] + list(range(1, 10))) == True",
                "assert move_one_ball(list(range(1, 50)) + [100, 51, 52]) == False"
            ],
            "failed_tests": [
                "assert move_one_ball([5, 4, 3, 2, 1]) == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 381,
        "completion_tokens": 308
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1, 3, 5, 7], [2, 4, 6, 8]) == \"YES\"",
                "assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"YES\"",
                "assert exchange([1, 3, 5], [1, 3, 5]) == \"NO\"",
                "assert exchange([1, 2, 3, 4], [5, 6, 7, 8]) == \"YES\"",
                "assert exchange([1, 3, 5, 7, 9], [2, 4, 6, 8]) == \"NO\"",
                "assert exchange([2, 4, 6], [8, 10, 12]) == \"YES\"",
                "assert exchange([1, 3, 5], [7, 9, 11]) == \"NO\"",
                "assert exchange([2], [1]) == \"YES\"",
                "assert exchange([1], [2]) == \"YES\"",
                "assert exchange([1], [3]) == \"NO\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 279,
        "completion_tokens": 413
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('a b b a') == {'a': 2, 'b': 2}",
                "assert histogram('a b c a b') == {'a': 2, 'b': 2}",
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('') == {}",
                "assert histogram('a') == {'a': 1}",
                "assert histogram('a a a') == {'a': 3}",
                "assert histogram('a b c a b c a b') == {'a': 3, 'b': 3}",
                "assert histogram('     ') == {}"
            ],
            "failed_tests": [
                "assert histogram('a b c d e f g a b c d e a b c d a b c a b a') == {'a': 6, 'b': 6} (AssertionError: )"
            ]
        },
        "prompt_tokens": 233,
        "completion_tokens": 313
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"abcdcba\", \"\") == (\"abcdcba\", True)",
                "assert reverse_delete(\"abcdefg\", \"\") == (\"abcdefg\", False)",
                "assert reverse_delete(\"\", \"\") == (\"\", True)",
                "assert reverse_delete(\"\", \"a\") == (\"\", True)",
                "assert reverse_delete(\"aabbcc\", \"ab\") == (\"cc\", True)",
                "assert reverse_delete(\"aabbcc\", \"c\") == (\"aabb\", False)",
                "assert reverse_delete(\"abc\", \"abc\") == (\"\", True)",
                "assert reverse_delete(\"1a2b3c\", \"123\") == (\"abc\", False)",
                "assert reverse_delete(\"AaBbCc\", \"a\") == (\"ABbCc\", False)"
            ],
            "failed_tests": [
                "assert reverse_delete(\"abbaccd\", \"d\") == (\"abbacca\", True) (AssertionError: )"
            ]
        },
        "prompt_tokens": 244,
        "completion_tokens": 348
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
                "assert odd_count(['13579', '24680']) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\",\n                                     \"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['2222', '4444']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\",\n                                   \"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['111', '333']) == [\"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n                                 \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]",
                "assert odd_count(['1', '2', '3', '4']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n                                       \"the number of odd elements 0n the str0ng 0 of the 0nput.\",\n                                       \"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n                                       \"the number of odd elements 0n the str0ng 0 of the 0nput.\"]"
            ],
            "failed_tests": [
                "assert odd_count(['102', '405']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n                                 \"the number of odd elements 2n the str2ng 2 of the 2nput.\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 255,
        "completion_tokens": 506
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([-1, -2, -3]) == -6",
                "assert minSubArraySum([5, -1, 3, 2]) == -1",
                "assert minSubArraySum([10]) == 10",
                "assert minSubArraySum([-5]) == -5",
                "assert minSubArraySum([1, 2, -5, 2, 3]) == -5",
                "assert minSubArraySum([3, -4, 2, -3]) == -5",
                "assert minSubArraySum([0, 0, 0]) == 0"
            ],
            "failed_tests": [
                "assert minSubArraySum([]) == \"Invalid input\" (ValueError: max() arg is an empty sequence)"
            ]
        },
        "prompt_tokens": 170,
        "completion_tokens": 387
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
                "assert max_fill([[1]], 1) == 1",
                "assert max_fill([[0,1,1,0,1], [1,1,1,1,0], [0,1,0,1,1], [1,0,1,0,1]], 3) == 5",
                "assert max_fill([[0,0,0,0], [1,1,1,1], [0,0,0,0], [1,1,1,1]], 4) == 2",
                "assert max_fill([[1,1,1,1,1,1,1,1,1,1]], 3) == 4",
                "assert max_fill([[1,0,1,0,1,0,1,0,1]], 1) == 5"
            ],
            "failed_tests": [
                "assert max_fill([[1,1,1,1], [1,1,1,1]], 8) == 1 (AssertionError: )",
                "assert max_fill([[1,1,0,1,0,1,1,1,0,1], [0,1,1,1,0,1,0,1,1,0]], 10) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 405,
        "completion_tokens": 608
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([-5, 5, -1, 1]) == [-1, 1, -5, 5]",
                "assert sort_array([3, 5, 6, 9]) == [3, 5, 6, 9]",
                "assert sort_array([]) == []",
                "assert sort_array([0, 0, 0, 0]) == [0, 0, 0, 0]",
                "assert sort_array([7, 7, 7, 7]) == [7, 7, 7, 7]",
                "assert sort_array([10, 4, 2, 8]) == [2, 4, 8, 10]"
            ],
            "failed_tests": [
                "assert sort_array([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4] (AssertionError: )",
                "assert sort_array([4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4] (AssertionError: )",
                "assert sort_array([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5] (AssertionError: )",
                "assert sort_array(list(range(100, -1, -1))) == sorted(list(range(101))) (AssertionError: )"
            ]
        },
        "prompt_tokens": 252,
        "completion_tokens": 476
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"\", 3) == []",
                "assert select_words(\"ae iou\", 1) == []",
                "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
                "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
                "assert select_words(\"ae iou bee oo\", 0) == [\"ae\", \"iou\", \"oo\"]",
                "assert select_words(\"cat bat hat\", 2) == [\"cat\", \"bat\", \"hat\"]",
                "assert select_words(\"Hello World\", 4) == [\"World\"]",
                "assert select_words(\"Uncle Sam\", 3) == [\"Uncle\"]",
                "assert select_words(\" hello world \", 4) == [\"world\"]",
                "assert select_words(\"Mary  had   a    little     lamb\", 3) == [\"Mary\", \"lamb\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 263,
        "completion_tokens": 326
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"characteristic\") == \"i\"",
                "assert get_closest_vowel(\"understandable\") == \"a\"",
                "assert get_closest_vowel(\"a\") == \"\"",
                "assert get_closest_vowel(\"quick\") == \"\"",
                "assert get_closest_vowel(\"\") == \"\"",
                "assert get_closest_vowel(\"Alphabetical\") == \"a\"",
                "assert get_closest_vowel(\"yogurt\") == \"u\"",
                "assert get_closest_vowel(\"FULL\") == \"U\"",
                "assert get_closest_vowel(\"ab\") == \"\"",
                "assert get_closest_vowel(\"b\") == \"\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 231,
        "completion_tokens": 338
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['(()', '())']) == 'Yes'",
                "assert match_parens(['((((', '))))']) == 'Yes'",
                "assert match_parens(['', '']) == 'Yes'",
                "assert match_parens(['()(', ')']) == 'Yes'",
                "assert match_parens([')', ')']) == 'No'",
                "assert match_parens(['(', ')(']) == 'No'",
                "assert match_parens(['(', ')']) == 'Yes'",
                "assert match_parens(['(', '(']) == 'No'",
                "assert match_parens(['', '()']) == 'Yes'",
                "assert match_parens(['()', '()']) == 'Yes'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 250,
        "completion_tokens": 381
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
                "assert maximum([4, -4, 4], 2) == [4, 4]",
                "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
                "assert maximum([1, 2, 3, 4, 5], 3) == [3, 4, 5]",
                "assert maximum([-5, -4, -3, -2, -1], 2) == [-2, -1]",
                "assert maximum([1, 2, 3, 4, 5], 0) == []",
                "assert maximum([7, 7, 7, 7], 3) == [7, 7, 7]",
                "assert maximum([10, 20, 30, 40, 50], 5) == [10, 20, 30, 40, 50]",
                "assert maximum([-1000, 1000, 0], 2) == [0, 1000]",
                "assert maximum([999], 1) == [999]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 299,
        "completion_tokens": 403
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9",
                "assert solution([30, 13, 24, 321]) == 0",
                "assert solution([2, 4, 6, 8, 10]) == 0",
                "assert solution([3]) == 3",
                "assert solution([2]) == 0",
                "assert solution([-1, -2, -3, -4, -5]) == -9"
            ],
            "failed_tests": [
                "assert solution([2, 7, 4, 8, 6]) == 7 (AssertionError: )",
                "assert solution([10, 15, 20, 25, 30, 35, 40, 45]) == 60 (AssertionError: )"
            ]
        },
        "prompt_tokens": 179,
        "completion_tokens": 306
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add_elements([10, 20, 30, 40], 4) == 100",
                "assert add_elements([100, 200, 300, 400], 4) == 0",
                "assert add_elements([100, 20, 300, 40, 50], 4) == 60",
                "assert add_elements([1, 2, 3, 4, 5, 6], 3) == 6",
                "assert add_elements([50, 100, 150], 1) == 50",
                "assert add_elements([1, 2, 3, 1000, 2000, 3000], 3) == 6",
                "assert add_elements([1, 22, 333, 4444, 55, 666, 7777], 5) == 78",
                "assert add_elements([99], 1) == 99"
            ],
            "failed_tests": [
                "assert add_elements([-10, 20, -30, 40], 4) == 20 (AssertionError: )",
                "assert add_elements(list(range(1, 101)), 100) == 5050 (AssertionError: )"
            ]
        },
        "prompt_tokens": 210,
        "completion_tokens": 398
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(1) == [1]",
                "assert get_odd_collatz(6) == [1, 3, 5]",
                "assert get_odd_collatz(3) == [1, 3, 5]",
                "assert get_odd_collatz(7) == [1, 5, 7, 11, 13, 17]"
            ],
            "failed_tests": [
                "assert get_odd_collatz(11) == [1, 11, 13, 17] (AssertionError: )"
            ]
        },
        "prompt_tokens": 313,
        "completion_tokens": 464
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('01-32-2020') == False",
                "assert valid_date('01-01-2000') == True",
                "assert valid_date('13-15-2020') == False",
                "assert valid_date('03-11-2000') == True",
                "assert valid_date('2020-04-30') == False",
                "assert valid_date('') == False",
                "assert valid_date('02-29-2020') == True"
            ],
            "failed_tests": [
                "assert valid_date('12-31-1999') == True (AssertionError: )",
                "assert valid_date('02-29-1900') == False (AssertionError: )",
                "assert valid_date('02-29-2021') == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 345,
        "completion_tokens": 396
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"ABCDEFG\") == 0",
                "assert split_words(\"abcdef\") == 3",
                "assert split_words(\"Hello    world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"Hello 123 world!\") == [\"Hello\", \"123\", \"world!\"]",
                "assert split_words(\"Hello, world!\") == [\"Hello,\", \"world!\"]",
                "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]"
            ],
            "failed_tests": [
                "assert split_words(\"Hello\") == [\"Hello\"] (AssertionError: )",
                "assert split_words(\"Hello,,world!\") == [\"Hello\", \"\", \"world!\"] (AssertionError: )",
                "assert split_words(\"\") == [] (AssertionError: )"
            ]
        },
        "prompt_tokens": 222,
        "completion_tokens": 444
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([5]) == True",
                "assert is_sorted([1, 2, 3, 4, 5]) == True",
                "assert is_sorted([1, 3, 2, 4, 5]) == False",
                "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True",
                "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False",
                "assert is_sorted([1, 2, 2, 3, 3, 4]) == True",
                "assert is_sorted([1, 2, 2, 2, 3, 4]) == False",
                "assert is_sorted([10, 20, 30, 40, 50]) == True",
                "assert is_sorted([10, 20, 30, 40, 39]) == False",
                "assert is_sorted([1, 2, 3, 4, 1]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 331,
        "completion_tokens": 394
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert intersection((1, 2), (3, 4)) == \"NO\"",
                "assert intersection((1, 2), (2, 3)) == \"NO\"",
                "assert intersection((1, 5), (1, 5)) == \"NO\"",
                "assert intersection((2, 5), (2, 5)) == \"YES\"",
                "assert intersection((-10, -7), (-9, -6)) == \"YES\""
            ],
            "failed_tests": [
                "assert intersection((-3, 0), (-1, 2)) == \"YES\" (AssertionError: )",
                "assert intersection((0, 4), (2, 6)) == \"NO\" (AssertionError: )",
                "assert intersection((-10, -5), (-8, -3)) == \"NO\" (AssertionError: )",
                "assert intersection((1, 10), (3, 4)) == \"YES\" (AssertionError: )",
                "assert intersection((1, 10), (2, 5)) == \"NO\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 336,
        "completion_tokens": 313
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([1, 2, 2, -4]) == -9",
                "assert prod_signs([0, 1]) == 0",
                "assert prod_signs([]) == None",
                "assert prod_signs([1, 3, 5]) == 9",
                "assert prod_signs([-1, -2, -3]) == -6",
                "assert prod_signs([5]) == 5",
                "assert prod_signs([-5]) == -5",
                "assert prod_signs([0]) == 0",
                "assert prod_signs([0, 0, 0]) == 0",
                "assert prod_signs([-1, 0, 1]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 204,
        "completion_tokens": 229
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]",
                "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]",
                "assert minPath([[1, 4], [2, 3]], 2) == [1, 2]",
                "assert minPath([[1, 1], [1, 1]], 5) == [1, 1, 1, 1, 1]",
                "assert minPath([[3, 1], [4, 2]], 4) == [1, 2, 1, 2]"
            ],
            "failed_tests": [
                "assert minPath([[10, 11, 12], [9, 8, 7], [6, 5, 4]], 4) == [4, 5, 6, 5] (AssertionError: )",
                "assert minPath([[15, 14, 13, 12], [11, 10, 9, 8], [7, 6, 5, 4], [3, 2, 1, 16]], 6) == [1, 2, 3, 2, 1, 2] (AssertionError: )"
            ]
        },
        "prompt_tokens": 478,
        "completion_tokens": 538
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert tri(0) == [1]",
                "assert tri(1) == [1, 3]",
                "assert tri(2) == [1, 3, 2]",
                "assert tri(3) == [1, 3, 2, 8]",
                "assert tri(4) == [1, 3, 2, 8, 3]"
            ],
            "failed_tests": [
                "assert tri(5) == [1, 3, 2, 8, 3, 14] (AssertionError: )",
                "assert tri(6) == [1, 3, 2, 8, 3, 14, 4] (AssertionError: )",
                "assert tri(7) == [1, 3, 2, 8, 3, 14, 4, 25] (AssertionError: )"
            ]
        },
        "prompt_tokens": 317,
        "completion_tokens": 310
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digits(1) == 1",
                "assert digits(4) == 0",
                "assert digits(235) == 15",
                "assert digits(2468) == 0",
                "assert digits(1357) == 105",
                "assert digits(123456789) == 945",
                "assert digits(7) == 7",
                "assert digits(333) == 27",
                "assert digits(103) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 153,
        "completion_tokens": 273
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[[]]') == True",
                "assert is_nested('[]]]]]]][[[[[]') == False",
                "assert is_nested('[][]') == False",
                "assert is_nested('[]') == False",
                "assert is_nested('[[][]]') == True",
                "assert is_nested('[[]][[') == True",
                "assert is_nested('') == False",
                "assert is_nested('[[[[]]]]') == True",
                "assert is_nested('[[]][][[]]') == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 215,
        "completion_tokens": 206
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 14",
                "assert sum_squares([1, 4, 9]) == 98",
                "assert sum_squares([1, 3, 5, 7]) == 84",
                "assert sum_squares([1.4, 4.2, 0]) == 29",
                "assert sum_squares([-2.4, 1, 1]) == 6",
                "assert sum_squares([4.5]) == 25",
                "assert sum_squares([]) == 0",
                "assert sum_squares([100, 200, 300]) == 140000",
                "assert sum_squares([0.01, 0.02, 0.03]) == 3"
            ],
            "failed_tests": [
                "assert sum_squares([-1.1, -2.5, -3.3]) == 15 (AssertionError: )"
            ]
        },
        "prompt_tokens": 239,
        "completion_tokens": 291
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
                "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
                "assert check_if_last_char_is_a_letter(\"\") == False",
                "assert check_if_last_char_is_a_letter(\"e\") == True",
                "assert check_if_last_char_is_a_letter(\"e \") == False",
                "assert check_if_last_char_is_a_letter(\"apple  pi   e\") == True",
                "assert check_if_last_char_is_a_letter(\"apple pi e!\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi 3\") == False",
                "assert check_if_last_char_is_a_letter(\"Apple Pi E\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 219,
        "completion_tokens": 302
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1, 2, 4, 3, 5]) == 3",
                "assert can_arrange([1, 2, 3]) == -1",
                "assert can_arrange([1]) == -1",
                "assert can_arrange([1, 2]) == -1",
                "assert can_arrange([2, 1]) == 1",
                "assert can_arrange([1, 2, 3, 4, 6, 5]) == 5",
                "assert can_arrange([-3, -2, -4, -1]) == 2",
                "assert can_arrange([-1, 2, -3, 4, 3]) == 4"
            ],
            "failed_tests": [
                "assert can_arrange([5, 4, 3, 2, 1]) == 1 (AssertionError: )",
                "assert can_arrange([10, 1, 2, 3, 4]) == -1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 185,
        "completion_tokens": 375
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([-2, -1, 0, 1, 2, 3]) == (-1, 1)",
                "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
                "assert largest_smallest_integers([-5, -3, -1, -4]) == (-1, None)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([0, 0, 1, 2]) == (None, 1)",
                "assert largest_smallest_integers([-2, -3, 0, 0]) == (-2, None)",
                "assert largest_smallest_integers([1]) == (None, 1)",
                "assert largest_smallest_integers([-1]) == (-1, None)",
                "assert largest_smallest_integers([0]) == (None, None)",
                "assert largest_smallest_integers([-1, -1, 2, 2]) == (-1, 2)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 220,
        "completion_tokens": 329
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(\"1.1\", \"1,2\") == \"1,2\"",
                "assert compare_one(\"4,5\", 3) == \"4,5\"",
                "assert compare_one(\"3.5\", 2) == \"3.5\"",
                "assert compare_one(\"7,5\", \"7,4\") == \"7,5\"",
                "assert compare_one(5.5, \"5\") == 5.5",
                "assert compare_one(1, \"2,3\") == \"2,3\"",
                "assert compare_one(123456, 123456.1) == 123456.1",
                "assert compare_one(\"-3,5\", \"-2,5\") == \"-2,5\"",
                "assert compare_one(\"5,1\", \"6\") == \"6\"",
                "assert compare_one(1, 2.5) == 2.5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 223,
        "completion_tokens": 473
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(4) == False",
                "assert is_equal_to_sum_even(6) == False",
                "assert is_equal_to_sum_even(8) == True",
                "assert is_equal_to_sum_even(16) == True",
                "assert is_equal_to_sum_even(40) == True",
                "assert is_equal_to_sum_even(25) == False",
                "assert is_equal_to_sum_even(101) == False",
                "assert is_equal_to_sum_even(10000) == True",
                "assert is_equal_to_sum_even(0) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 159,
        "completion_tokens": 306
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(1) == 1",
                "assert special_factorial(2) == 2",
                "assert special_factorial(3) == 12",
                "assert special_factorial(4) == 288"
            ],
            "failed_tests": [
                "assert special_factorial(5) == 2880 (AssertionError: )",
                "assert special_factorial(6) == 34560 (AssertionError: )"
            ]
        },
        "prompt_tokens": 177,
        "completion_tokens": 297
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\" Example 2\") == \"_Example_2\"",
                "assert fix_spaces(\"A B C D\") == \"A_B_C_D\"",
                "assert fix_spaces(\"Example\") == \"Example\"",
                "assert fix_spaces(\"Example   3\") == \"Example-3\"",
                "assert fix_spaces(\" \") == \"_\"",
                "assert fix_spaces(\"Example 1\") == \"Example_1\"",
                "assert fix_spaces(\"   \") == \"-\"",
                "assert fix_spaces(\" Example \") == \"_Example_\""
            ],
            "failed_tests": [
                "assert fix_spaces(\"  Example  \") == \"-Example-\" (AssertionError: )",
                "assert fix_spaces(\"  \") == \"-\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 188,
        "completion_tokens": 374
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"1example.dll\") == 'No'",
                "assert file_name_check(\"file1234.txt\") == 'No'",
                "assert file_name_check(\".txt\") == 'No'",
                "assert file_name_check(\"wrongextension.pdf\") == 'No'",
                "assert file_name_check(\"valid_file_name.txt\") == 'Yes'",
                "assert file_name_check(\"too.many.dots.txt\") == 'No'",
                "assert file_name_check(\"example.txt\") == 'Yes'",
                "assert file_name_check(\"library.dll\") == 'Yes'",
                "assert file_name_check(\"program.exe\") == 'Yes'",
                "assert file_name_check(\"CaseSensitive.TXT\") == 'No'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 296,
        "completion_tokens": 428
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([-1, -5, 2, -1, -5]) == -126",
                "assert sum_squares([]) == 0",
                "assert sum_squares([0, 0, 0, 0, 0, 0]) == 0"
            ],
            "failed_tests": [
                "assert sum_squares([1, 2, 5, 7]) == 15 (AssertionError: )",
                "assert sum_squares([1, 2, 5, 7, 11]) == 64 (AssertionError: )",
                "assert sum_squares([1, 2, 5, 7, 11, 13]) == 1364 (AssertionError: )",
                "assert sum_squares([1, 2, 5, 7, 11, 13, 17, 19, 23, 29, 31, 0]) == 1045 (AssertionError: )",
                "assert sum_squares([2, 3, 4, 5, 6, 7, 8]) == 373 (AssertionError: )",
                "assert sum_squares(list(range(1, 21))) == 25350 (AssertionError: )"
            ]
        },
        "prompt_tokens": 252,
        "completion_tokens": 369
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"This is a test\") == \"is\"",
                "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
                "assert words_in_sentence(\"prime\") == \"prime\"",
                "assert words_in_sentence(\"a \" * 48 + \"b\" * 97) == \"b\" * 97"
            ],
            "failed_tests": [
                "assert words_in_sentence(\"a an the\") == \"\" (AssertionError: )",
                "assert words_in_sentence(\"by day she sells sea shells\") == \"by day she sea\" (AssertionError: )",
                "assert words_in_sentence(\"no\") == \"\" (AssertionError: )",
                "assert words_in_sentence(\"I love programming in Python\") == \"love in\" (AssertionError: )",
                "assert words_in_sentence(\"Exploring the vast universe we find countless stars\") == \"the we find stars\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 229,
        "completion_tokens": 309
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"3/5\", \"3/5\") == False",
                "assert simplify(\"123/456\", \"789/123\") == False",
                "assert simplify(\"3/4\", \"4/3\") == True",
                "assert simplify(\"2/2\", \"2/2\") == True",
                "assert simplify(\"1/4\", \"4/1\") == True",
                "assert simplify(\"7/10\", \"10/2\") == False",
                "assert simplify(\"100/200\", \"200/100\") == True",
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"1/1\", \"5/5\") == True",
                "assert simplify(\"1/1\", \"2/3\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 237,
        "completion_tokens": 370
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([11, 12, 21]) == [11, 12, 21]",
                "assert order_by_points([0, 10, 100]) == [0, 10, 100]",
                "assert order_by_points([]) == []",
                "assert order_by_points([111, 12, 21, 102]) == [111, 12, 21, 102]"
            ],
            "failed_tests": [
                "assert order_by_points([-21, -12, -11]) == [-11, -12, -21] (AssertionError: )",
                "assert order_by_points([-11, 11, -22, 22]) == [-11, 11, -22, 22] (AssertionError: )",
                "assert order_by_points([1, 10, 91, 19]) == [1, 10, 19, 91] (AssertionError: )"
            ]
        },
        "prompt_tokens": 197,
        "completion_tokens": 504
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([]) == 0",
                "assert specialFilter([2, 4, 8, 10, 12, -14, -16]) == 0",
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2",
                "assert specialFilter([-11, -13, -15, -17]) == 0",
                "assert specialFilter([11, 33, 55, 77, 99]) == 5",
                "assert specialFilter([139, 248, 3579, 4670]) == 2"
            ],
            "failed_tests": [
                "assert specialFilter([10, 11, 13, 15]) == 2 (AssertionError: )",
                "assert specialFilter([13579, 24680, 123456789]) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 201,
        "completion_tokens": 353
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(1) == 0",
                "assert get_max_triples(2) == 0",
                "assert get_max_triples(5) == 1",
                "assert get_max_triples(3) == 0",
                "assert get_max_triples(10) > 0",
                "assert get_max_triples(6) > 0",
                "assert get_max_triples(8) > 0"
            ],
            "failed_tests": [
                "assert get_max_triples(4) == 0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 247,
        "completion_tokens": 397
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Venus\", \"Earth\") == ()",
                "assert bf(\"Mercury\", \"Earth\") == (\"Venus\",)",
                "assert bf(\"Uranus\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
                "assert bf(\"Earth\", \"Krypton\") == ()",
                "assert bf(\"Earth\", \"mars\") == ()",
                "assert bf(\"Earth\", \"Mercury\") == (\"Venus\",)",
                "assert bf(\"earth\", \"Mars\") == ()",
                "assert bf(\"Pluto\", \"Mars\") == ()",
                "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
                "assert bf(\"Mercury\", \"Neptune\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 293,
        "completion_tokens": 351
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([]) == []",
                "assert sorted_list_sum([\"a\", \"abc\", \"abcde\"]) == []",
                "assert sorted_list_sum([\"abcd\", \"ef\", \"ghij\", \"lm\", \"no\"]) == [\"ef\", \"lm\", \"no\", \"abcd\", \"ghij\"]"
            ],
            "failed_tests": [
                "assert sorted_list_sum([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"two\", \"six\", \"four\"] (AssertionError: )",
                "assert sorted_list_sum([\"apple\", \"banana\", \"apple\", \"cherry\", \"date\", \"egg\"]) == [\"egg\"] (AssertionError: )",
                "assert sorted_list_sum([\"go\", \"to\", \"the\", \"zoo\"]) == [\"go\", \"to\", \"the\"] (AssertionError: )",
                "assert sorted_list_sum([\"bat\", \"cat\", \"art\", \"dog\", \"egg\", \"fog\"]) == [\"art\", \"bat\", \"cat\", \"dog\", \"egg\", \"fog\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 269,
        "completion_tokens": 351
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(7, 34, 12) == 34",
                "assert x_or_y(15, 8, 5) == 5",
                "assert x_or_y(2, 10, 20) == 10",
                "assert x_or_y(1, 3, 4) == 4",
                "assert x_or_y(29, 100, 200) == 100",
                "assert x_or_y(100, 50, 75) == 75",
                "assert x_or_y(11, 30, 30) == 30",
                "assert x_or_y(12, 30, 30) == 30"
            ],
            "failed_tests": [
                "assert x_or_y(-3, 1, 2) == 2 (AssertionError: )",
                "assert x_or_y(0, 5, 10) == 10 (AssertionError: )"
            ]
        },
        "prompt_tokens": 168,
        "completion_tokens": 331
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([1, 3, 2, 0]) == 10",
                "assert double_the_difference([-1, -2, 0]) == 0",
                "assert double_the_difference([9, -2]) == 81",
                "assert double_the_difference([0]) == 0",
                "assert double_the_difference([]) == 0",
                "assert double_the_difference([-3, -5, -7]) == 0",
                "assert double_the_difference([1, 5, 7]) == 1 + 25 + 49",
                "assert double_the_difference([2, 4, 6]) == 0",
                "assert double_the_difference([1.5, 2.5, 3.5, 4]) == 0",
                "assert double_the_difference([1, 2.5, 3, 4.5]) == 1 + 9"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 219,
        "completion_tokens": 303
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]",
                "assert compare([10, 20, 30, 40, 50], [1, 2, 3, 4, 5]) == [9, 18, 27, 36, 45]",
                "assert compare([-1, -2, -3, -4, -5], [-5, -4, -3, -2, -1]) == [4, 2, 0, 2, 4]",
                "assert compare([1, -2, 3, -4, 5], [-1, 2, -3, 4, -5]) == [2, 4, 6, 8, 10]",
                "assert compare([0, 0, 0, 0, 0], [0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]",
                "assert compare([5, 0, 7, 0, 9], [5, 0, 0, 0, 9]) == [0, 0, 7, 0, 0]",
                "assert compare([], []) == []",
                "assert compare([1000, 2000, 3000], [1000, 1999, 2999]) == [0, 1, 1]",
                "assert compare([42], [42]) == [0]",
                "assert compare([42], [24]) == [18]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 312,
        "completion_tokens": 444
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('Vehicle', ['Engine', 'WHEELS', 'Seats']) == 'Vehicle.WHEELS'",
                "assert Strongest_Extension('House', ['Roof', 'Door', 'Wall']) == 'House.Roof'",
                "assert Strongest_Extension('Computer', ['Keyboard', 'mouse', 'Monitor']) == 'Computer.mouse'",
                "assert Strongest_Extension('Element', ['a', 'B', 'c']) == 'Element.B'",
                "assert Strongest_Extension('Tool', ['Hammer']) == 'Tool.Hammer'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('Gadget', []) == 'Gadget' (IndexError: list index out of range)",
                "assert Strongest_Extension('Fruit', ['APPLE', 'BANANA', 'CHERRY']) == 'Fruit.APPLE' (AssertionError: )",
                "assert Strongest_Extension('Planet', ['Earth', 'Mars', 'Venus']) == 'Planet.Earth' (AssertionError: )"
            ]
        },
        "prompt_tokens": 359,
        "completion_tokens": 352
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"whassup\", \"psus\") == False",
                "assert cycpattern_check(\"abab\", \"baa\") == True",
                "assert cycpattern_check(\"same\", \"same\") == True",
                "assert cycpattern_check(\"hello\", \"ell\") == True",
                "assert cycpattern_check(\"abcd\", \"abd\") == False",
                "assert cycpattern_check(\"\", \"notempty\") == False",
                "assert cycpattern_check(\"\", \"\") == True",
                "assert cycpattern_check(\"a\", \"b\") == False",
                "assert cycpattern_check(\"abc\", \"abcd\") == False",
                "assert cycpattern_check(\"himenss\", \"simen\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 211,
        "completion_tokens": 381
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(2468) == (4, 0)",
                "assert even_odd_count(13579) == (0, 5)",
                "assert even_odd_count(-1234) == (2, 2)",
                "assert even_odd_count(2) == (1, 0)",
                "assert even_odd_count(3) == (0, 1)",
                "assert even_odd_count(1234567890) == (5, 5)",
                "assert even_odd_count(111222) == (3, 3)",
                "assert even_odd_count(0) == (1, 0)"
            ],
            "failed_tests": [
                "assert even_odd_count(102030) == (3, 2) (AssertionError: )"
            ]
        },
        "prompt_tokens": 147,
        "completion_tokens": 224
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(1) == 'i'",
                "assert int_to_mini_roman(5) == 'v'",
                "assert int_to_mini_roman(8) == 'viii'",
                "assert int_to_mini_roman(44) == 'xliv'",
                "assert int_to_mini_roman(152) == 'clii'",
                "assert int_to_mini_roman(999) == 'cmxcix'",
                "assert int_to_mini_roman(1000) == 'm'",
                "assert int_to_mini_roman(3) == 'iii'",
                "assert int_to_mini_roman(276) == 'cclxxvi'",
                "assert int_to_mini_roman(49) == 'xlix'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 183,
        "completion_tokens": 338
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(1, 2, 3) == False",
                "assert right_angle_triangle(5, 3, 4) == True",
                "assert right_angle_triangle(6, 8, 10) == True",
                "assert right_angle_triangle(5, 5, 5) == False",
                "assert right_angle_triangle(3.0, 4.0, 5.0) == True",
                "assert right_angle_triangle(0.1, 0.2, 0.3) == False",
                "assert right_angle_triangle(0, 4, 5) == False",
                "assert right_angle_triangle(9, 12, 15) == True"
            ],
            "failed_tests": [
                "assert right_angle_triangle(-3, -4, -5) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 190,
        "completion_tokens": 360
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
                "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"",
                "assert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"",
                "assert find_max([\"123\", \"@@@@\", \"abcd\"]) == \"abcd\"",
                "assert find_max([\"planet\", \"word\", \"words\"]) == \"planet\"",
                "assert find_max([\"hi\", \"hello\", \"alphabet\"]) == \"alphabet\"",
                "assert find_max([\"single\"]) == \"single\"",
                "assert find_max([\"test\", \"sett\", \"tset\"]) == \"sett\""
            ],
            "failed_tests": [
                "assert find_max([]) == \"\" (IndexError: list index out of range)"
            ]
        },
        "prompt_tokens": 202,
        "completion_tokens": 292
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(5, 5, 5) == [10, 0]",
                "assert eat(3, 7, 10) == [10, 3]",
                "assert eat(2, 10, 5) == [7, 0]",
                "assert eat(6, 4, 0) == [6, 0]",
                "assert eat(10, 0, 5) == [10, 5]",
                "assert eat(0, 0, 0) == [0, 0]",
                "assert eat(1000, 1000, 1000) == [2000, 0]",
                "assert eat(500, 500, 500) == [1000, 0]",
                "assert eat(0, 1000, 500) == [500, 0]",
                "assert eat(1000, 500, 250) == [1250, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 359,
        "completion_tokens": 336
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['+', '*'], [2, 3, 4]) == 14",
                "assert do_algebra(['-', '//'], [10, 5, 2]) == 8",
                "assert do_algebra(['**'], [2, 3]) == 8",
                "assert do_algebra(['+', '+', '+'], [1, 2, 3, 4]) == 10",
                "assert do_algebra(['*'], [5, 5]) == 25",
                "assert do_algebra(['-', '-'], [10, 5, 15]) == -10",
                "assert do_algebra(['//', '//'], [1, 2, 3]) == 0"
            ],
            "failed_tests": [
                "assert do_algebra(['+', '-', '*', '//', '**'], [2, 3, 1, 4, 2, 3]) == 4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 289,
        "completion_tokens": 532
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"1234\") == \"4321\"",
                "assert solve(\"abcd\") == \"ABCD\"",
                "assert solve(\"ABCD\") == \"abcd\"",
                "assert solve(\"aBcD\") == \"AbCd\"",
                "assert solve(\"\") == \"\"",
                "assert solve(\"1234!\") == \"!4321\"",
                "assert solve(\"a\") == \"A\"",
                "assert solve(\"1\") == \"1\"",
                "assert solve(\"Hello World! 123\") == \"hELLO wORLD! 123\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 189,
        "completion_tokens": 288
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('') is None",
                "assert string_to_md5('123') == '202cb962ac59075b964b07152d234b70'"
            ],
            "failed_tests": [
                "assert string_to_md5('This is a very long string to check how md5 handles it') == 'd2ddea18f00665ce8623e36bd4e3c7c5' (AssertionError: )",
                "assert string_to_md5('  padded  ') == 'f3ebb25d835b6f99a726b9b3f9a10876' (AssertionError: )",
                "assert string_to_md5('     ') == '7215ee9c7d9dc229d2921a40e899ec5f' (AssertionError: )"
            ]
        },
        "prompt_tokens": 158,
        "completion_tokens": 279
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(2, 8) == [2, 4, 6, 8]",
                "assert generate_integers(8, 2) == [2, 4, 6, 8]",
                "assert generate_integers(10, 14) == []",
                "assert generate_integers(4, 4) == [4]",
                "assert generate_integers(5, 5) == []",
                "assert generate_integers(3, 8) == [4, 6, 8]",
                "assert generate_integers(2, 7) == [2, 4, 6]"
            ],
            "failed_tests": [
                "assert generate_integers(1, 20) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] (AssertionError: )",
                "assert generate_integers(-1, 5) == \"Error\" (AssertionError: )",
                "assert generate_integers(0, 3) == [0, 2] (AssertionError: )"
            ]
        },
        "prompt_tokens": 186,
        "completion_tokens": 440
    }
]