[
    {
        "task_id": "HumanEval/0",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 3.0, 5.0], 1.0) == False",
                "assert has_close_elements([1.0, 2.0, 3.0], 1.0) == False",
                "assert has_close_elements([1.0, 1.5, 2.5], 0.6) == True",
                "assert has_close_elements([-1.0, -1.2, -2.0], 0.3) == True",
                "assert has_close_elements([-1.0, 0.1, 1.0], 1.2) == True",
                "assert has_close_elements([], 0.5) == False",
                "assert has_close_elements([1.0], 0.5) == False",
                "assert has_close_elements([2.0, 2.0, 2.0], 0.1) == True",
                "assert has_close_elements([1.0, 100.0, 200.0], 101.0) == True",
                "assert has_close_elements([1.0001, 1.0002], 0.0002) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 420
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('()') == ['()']",
                "assert separate_paren_groups('()()') == ['()', '()']",
                "assert separate_paren_groups('(())') == ['(())']",
                "assert separate_paren_groups('(()())') == ['(()())']",
                "assert separate_paren_groups('()(())(()())') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('() (()) ( () () )') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('(((())))') == ['(((())))']",
                "assert separate_paren_groups('') == []",
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('     ') == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 197,
        "completion_tokens": 257
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(4.0) == 0.0",
                "assert truncate_number(0.0001) == 0.0001",
                "assert truncate_number(0.00000001) == 0.00000001"
            ],
            "failed_tests": [
                "assert truncate_number(123456.789) == 0.789 (AssertionError: )",
                "assert truncate_number(1.123456789) == 0.123456789 (AssertionError: )",
                "assert truncate_number(5.999999) == 0.999999 (AssertionError: )",
                "assert truncate_number(7.10) == 0.10 (AssertionError: )"
            ]
        },
        "prompt_tokens": 167,
        "completion_tokens": 305
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([10, 20, 30, 40]) == False",
                "assert below_zero([100, -50, -25, 10]) == False",
                "assert below_zero([50, -20, -40, 10]) == True",
                "assert below_zero([-1, 2, 3, 4]) == True",
                "assert below_zero([]) == False",
                "assert below_zero([5, -5, -1, 1]) == True",
                "assert below_zero([-10, -20, -30]) == True",
                "assert below_zero([1]) == False",
                "assert below_zero([-1]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 201,
        "completion_tokens": 318
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1, 2, 3, 4]) == 1.0",
                "assert mean_absolute_deviation([1, 2, 3]) == 0.6666666666666666",
                "assert mean_absolute_deviation([1.5, 2.5, 3.5, 4.5]) == 1.0",
                "assert mean_absolute_deviation([-1, -2, -3, -4]) == 1.0",
                "assert mean_absolute_deviation([-2, -1, 0, 1, 2]) == 1.2",
                "assert mean_absolute_deviation([5]) == 0.0",
                "assert mean_absolute_deviation([7, 7, 7, 7]) == 0.0",
                "assert mean_absolute_deviation([0, 5, 10, 15]) == 5.0"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 27.0 (AssertionError: )",
                "assert mean_absolute_deviation([1, 1, 1, 1, 9]) == 2.4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 199,
        "completion_tokens": 373
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([], 4) == []",
                "assert intersperse([1], 4) == [1]",
                "assert intersperse([1, 2], 4) == [1, 4, 2]",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
                "assert intersperse([1, 1, 1], 4) == [1, 4, 1, 4, 1]",
                "assert intersperse([-1, -2, -3], 4) == [-1, 4, -2, 4, -3]",
                "assert intersperse([1, -2, 3], 4) == [1, 4, -2, 4, 3]",
                "assert intersperse([1, 2, 3], -4) == [1, -4, 2, -4, 3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 174,
        "completion_tokens": 391
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('()') == [1]",
                "assert parse_nested_parens('(())') == [2]",
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('(((())))') == [4]",
                "assert parse_nested_parens('() () ()') == [1, 1, 1]",
                "assert parse_nested_parens('') == []",
                "assert parse_nested_parens('     ') == []",
                "assert parse_nested_parens('(()(())) (()) (((()))) (()()())') == [3, 2, 4, 2]",
                "assert parse_nested_parens('(((())())())') == [4]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 194,
        "completion_tokens": 297
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring([], 'a') == []",
                "assert filter_by_substring(['bcd', 'cde', 'def'], 'a') == []",
                "assert filter_by_substring(['abc', 'bac', 'ca'], 'a') == ['abc', 'bac', 'ca']",
                "assert filter_by_substring(['abc', 'def', 'ghi', 'jkl', 'amn'], 'a') == ['abc', 'amn']",
                "assert filter_by_substring(['abc', 'def', 'ghi'], '') == ['abc', 'def', 'ghi']",
                "assert filter_by_substring(['start', 'middle', 'end'], 'd') == ['middle', 'end']",
                "assert filter_by_substring(['hello world', 'hi', 'good morning', 'bye'], ' ') == ['hello world', 'good morning']",
                "assert filter_by_substring(['hello!', 'hi', 'good morning', 'bye!'], '!') == ['hello!', 'bye!']"
            ],
            "failed_tests": [
                "assert filter_by_substring(['hello', 'world', 'hel', 'low'], 'low') == ['hello', 'low'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 175,
        "completion_tokens": 436
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([1, 2, 3, 4]) == (10, 24)",
                "assert sum_product([0, 1, 2, 3]) == (6, 0)",
                "assert sum_product([-1, 2, -3, 4]) == (2, 24)",
                "assert sum_product([5]) == (5, 5)",
                "assert sum_product([-5]) == (-5, -5)",
                "assert sum_product([100, 200, 300, 400]) == (1000, 2400000000)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 192,
        "completion_tokens": 272
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([1, 2, 2, 3, 3, 3, 2, 2, 4, 4, 4]) == [1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4]",
                "assert rolling_max([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]",
                "assert rolling_max([1]) == [1]",
                "assert rolling_max([]) == []",
                "assert rolling_max([-3, -2, -1, 0, 1, 2, 3]) == [-3, -2, -1, 0, 1, 2, 3]",
                "assert rolling_max([10, 1, 2, 3, 4, 5]) == [10, 10, 10, 10, 10, 10]",
                "assert rolling_max([0, 1, 2, 3, 2, 1, 0]) == [0, 1, 2, 3, 3, 3, 3]",
                "assert rolling_max([1, 3, 2, 4, 3, 5, 4]) == [1, 3, 3, 4, 4, 5, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 182,
        "completion_tokens": 478
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert make_palindrome(\"cat\") == \"catac\"",
                "assert make_palindrome(\"racecar\") == \"racecar\"",
                "assert is_palindrome(\"a\") == True",
                "assert is_palindrome(\"\") == True",
                "assert is_palindrome(\"madam\") == True",
                "assert make_palindrome(\"\") == \"\"",
                "assert is_palindrome(\"Madam\".lower()) == True"
            ],
            "failed_tests": [
                "assert make_palindrome(\"Cat\") == \"Catac\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 224,
        "completion_tokens": 523
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('', '') == ''",
                "assert string_xor('1111', '0000') == '1111'",
                "assert string_xor('10101010', '01010101') == '11111111'",
                "assert string_xor('1010', '0101') == '1111'",
                "assert string_xor('01010101', '10101010') == '11111111'",
                "assert string_xor('11110000', '00001111') == '11111111'",
                "assert string_xor('00000000', '11111111') == '11111111'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 158,
        "completion_tokens": 227
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest([]) is None",
                "assert longest(['hello']) == 'hello'",
                "assert longest(['a', 'b', 'c']) == 'a'",
                "assert longest(['short', 'longer', 'longest']) == 'longest'",
                "assert longest(['short', 'longest', 'longer']) == 'longest'",
                "assert longest(['first', 'second', 'third', 'fourth']) == 'second'",
                "assert longest(['', '', 'non-empty', '']) == 'non-empty'",
                "assert longest(['', '', '']) == ''",
                "assert longest(['one', 'two', ' three ']) == ' three '",
                "assert longest(['12345', '123456789', '1234', '123']) == '123456789'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 184,
        "completion_tokens": 366
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(100, 25) == 25",
                "assert greatest_common_divisor(14, 49) == 7",
                "assert greatest_common_divisor(12, 12) == 12",
                "assert greatest_common_divisor(17, 19) == 1",
                "assert greatest_common_divisor(1, 789) == 1",
                "assert greatest_common_divisor(0, 5) == 5",
                "assert greatest_common_divisor(0, 0) == 0",
                "assert greatest_common_divisor(-100, 25) == 25"
            ],
            "failed_tests": [
                "assert greatest_common_divisor(-25, -5) == 5 (AssertionError: )"
            ]
        },
        "prompt_tokens": 152,
        "completion_tokens": 235
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
                "assert all_prefixes('a') == ['a']",
                "assert all_prefixes('') == []",
                "assert all_prefixes('hello world') == ['h', 'he', 'hel', 'hell', 'hello', 'hello ', 'hello w', 'hello wo', 'hello wor', 'hello worl', 'hello world']",
                "assert all_prefixes('123$%^') == ['1', '12', '123', '123$', '123$%', '123$%^']",
                "assert all_prefixes('aaa') == ['a', 'aa', 'aaa']",
                "assert len(all_prefixes('abcdefghijklmnopqrstuvwxyz')) == 26"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 141,
        "completion_tokens": 209
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(0) == '0'",
                "assert string_sequence(1) == '0 1'",
                "assert string_sequence(-1) == ''",
                "assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'",
                "assert string_sequence(2) == '0 1 2'",
                "assert string_sequence(1000).endswith('1000')"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 150,
        "completion_tokens": 302
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('AbCdeFG') == 7",
                "assert count_distinct_characters('AAAAaaaa') == 1",
                "assert count_distinct_characters('') == 0",
                "assert count_distinct_characters('\u00f1\u00d1\u00fc\u00dc') == 2",
                "assert count_distinct_characters('Mississippi') == 4"
            ],
            "failed_tests": [
                "assert count_distinct_characters('a A a') == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 152,
        "completion_tokens": 256
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o') == [4]",
                "assert parse_music('o o o') == [4, 4, 4]",
                "assert parse_music('') == []",
                "assert parse_music('o|') == [2]",
                "assert parse_music('o o| .|') == [4, 2, 1]",
                "assert parse_music('o| o| o|') == [2, 2, 2]",
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
                "assert parse_music('.| .| .|') == [1, 1, 1]",
                "assert parse_music('o    o|       .|') == [4, 2, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 254,
        "completion_tokens": 321
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('', 'a') == 0",
                "assert how_many_times('hello world', 'world') == 1",
                "assert how_many_times('hello world', 'mars') == 0",
                "assert how_many_times('abc abc abc', 'abc') == 3",
                "assert how_many_times('aaaa', 'aa') == 3",
                "assert how_many_times('aaa', 'a') == 3",
                "assert how_many_times('abababab', 'aba') == 3",
                "assert how_many_times('hello', 'hello') == 1",
                "assert how_many_times('short', 'longerSubstring') == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 170,
        "completion_tokens": 331
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('four') == 'four'",
                "assert sort_numbers('one two three') == 'one two three'",
                "assert sort_numbers('nine eight seven') == 'seven eight nine'",
                "assert sort_numbers('five two nine') == 'two five nine'",
                "assert sort_numbers('six six two') == 'two six six'",
                "assert sort_numbers('nine eight seven six five four three two one zero') == 'zero one two three four five six seven eight nine'",
                "assert sort_numbers('') == ''",
                "assert sort_numbers('nine one') == 'one nine'",
                "assert sort_numbers('three one five seven two') == 'one two three five seven'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 187,
        "completion_tokens": 215
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.1]) == (2.0, 2.1)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([-5.0, -4.0, -3.0, -2.0, -1.0, -1.1]) == (-1.1, -1.0)",
                "assert find_closest_elements([-5.0, -4.0, -3.0, -2.0, -1.0, -1.0]) == (-1.0, -1.0)",
                "assert find_closest_elements([-2.0, 0.0, 2.0, 3.0, 4.0]) == (2.0, 3.0)",
                "assert find_closest_elements([1.05, 1.07, 2.0, 3.0]) == (1.05, 1.07)",
                "assert find_closest_elements([1.0, 3.0, 3.05, 5.0, 6.0]) == (3.0, 3.05)",
                "assert find_closest_elements([0.01, 0.02, 1.0, 2.0, 3.0]) == (0.01, 0.02)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 5.98, 5.99]) == (5.98, 5.99)"
            ],
            "failed_tests": [
                "assert find_closest_elements([-1.0, 0.0, 1.0]) == (0.0, 1.0) (AssertionError: )"
            ]
        },
        "prompt_tokens": 248,
        "completion_tokens": 568
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1, 2, 3, 4, 5]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([5, 4, 3, 2, 1]) == [1.0, 0.75, 0.5, 0.25, 0.0]",
                "assert rescale_to_unit([-2, -1, 0, 1, 2]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([1.5, 2.5, 3.5]) == [0.0, 0.5, 1.0]",
                "assert rescale_to_unit([-100, 0, 100, 200]) == [0.0, 0.3333333333333333, 0.6666666666666666, 1.0]",
                "assert rescale_to_unit([1, 2, 2, 3]) == [0.0, 0.5, 0.5, 1.0]",
                "assert rescale_to_unit([-1e9, 0, 1e9]) == [0.0, 0.5, 1.0]"
            ],
            "failed_tests": [
                "assert rescale_to_unit([2, 2, 2, 2]) == [0.0, 0.0, 0.0, 0.0] (ZeroDivisionError: division by zero)"
            ]
        },
        "prompt_tokens": 205,
        "completion_tokens": 439
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_integers([1, 2.5, '3', 4]) == [1, 4]",
                "assert filter_integers(['a', [], {}]) == []",
                "assert filter_integers([10, 20, 30]) == [10, 20, 30]",
                "assert filter_integers([]) == []",
                "assert filter_integers([1+2j, 3+4j, 5]) == [5]",
                "assert filter_integers([None, 1, None, 2]) == [1, 2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 173,
        "completion_tokens": 231
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('') == 0",
                "assert strlen('a') == 1",
                "assert strlen('hello') == 5",
                "assert strlen('hello world') == 11",
                "assert strlen('line1\\nline2\\nline3') == 17",
                "assert strlen('\u4f60\u597d') == 2",
                "assert strlen('a' * 1000) == 1000"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 125,
        "completion_tokens": 159
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(13) == 1",
                "assert largest_divisor(28) == 14",
                "assert largest_divisor(2) == 1",
                "assert largest_divisor(49) == 7",
                "assert largest_divisor(100) == 50",
                "assert largest_divisor(27) == 9"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 134,
        "completion_tokens": 171
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(13) == [13]",
                "assert factorize(100) == [2, 2, 5, 5]",
                "assert factorize(8) == [2, 2, 2]",
                "assert factorize(27) == [3, 3, 3]",
                "assert factorize(46) == [2, 23]",
                "assert factorize(1) == []",
                "assert factorize(123456) == [2, 2, 2, 2, 2, 2, 3, 643]",
                "assert factorize(121) == [11, 11]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 208,
        "completion_tokens": 277
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([1, 2, 2, 3, 3, 4, 4, 5]) == [1, 5]",
                "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert remove_duplicates([2, 2, 2, 2]) == []",
                "assert remove_duplicates([]) == []",
                "assert remove_duplicates([-1, -2, -2, -3, -1, -4]) == [-3, -4]",
                "assert remove_duplicates([10, 9, 10, 8, 7, 6, 7, 5]) == [9, 8, 6, 5]",
                "assert remove_duplicates([5, 3, 2, 3, 4, 5]) == [2, 4]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 166,
        "completion_tokens": 309
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('Hello') == 'hELLO'",
                "assert flip_case('WORLD') == 'world'",
                "assert flip_case('python') == 'PYTHON'",
                "assert flip_case('Hello World') == 'hELLO wORLD'",
                "assert flip_case('') == ''",
                "assert flip_case('Python 3.8!') == 'pYTHON 3.8!'",
                "assert flip_case('p') == 'P'",
                "assert flip_case('Q') == 'q'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 130,
        "completion_tokens": 215
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate([]) == ''",
                "assert concatenate(['a', 'b', 'c']) == 'abc'",
                "assert concatenate(['hello', 'world']) == 'helloworld'",
                "assert concatenate(['single']) == 'single'",
                "assert concatenate(['hello', ' ', 'world']) == 'hello world'",
                "assert concatenate(['hello', '', 'world']) == 'helloworld'",
                "assert concatenate(['1', '2', '3']) == '123'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 139,
        "completion_tokens": 232
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['bcd', 'cde', 'def'], 'a') == []",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']",
                "assert filter_by_prefix(['apple', 'apricot', 'amber'], 'a') == ['apple', 'apricot', 'amber']",
                "assert filter_by_prefix(['a', 'ab', 'abc'], 'abcd') == []",
                "assert filter_by_prefix(['abc', 'bcd', 'cde'], '') == ['abc', 'bcd', 'cde']",
                "assert filter_by_prefix(['abc', 'def', 'ghi', 'abc'], 'abc') == ['abc', 'abc']",
                "assert filter_by_prefix([' abc', 'def', ' ghi'], ' ') == [' abc', ' ghi']",
                "assert filter_by_prefix(['Apple', 'apple', 'Apricot'], 'a') == ['apple']",
                "assert filter_by_prefix(['1abc', '2bcd', '3cde'], '1') == ['1abc']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 169,
        "completion_tokens": 461
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
                "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]",
                "assert get_positive([-5, -3, -2, -1, 0]) == []",
                "assert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert get_positive([]) == []",
                "assert get_positive([0, 0, 0, 0]) == []",
                "assert get_positive([42]) == [42]",
                "assert get_positive([-42]) == []",
                "assert get_positive([0]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 195,
        "completion_tokens": 322
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(11) == True",
                "assert is_prime(6) == False",
                "assert is_prime(13441) == True",
                "assert is_prime(2) == True",
                "assert is_prime(1) == False",
                "assert is_prime(100) == False",
                "assert is_prime(0) == False",
                "assert is_prime(-7) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 181,
        "completion_tokens": 162
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert poly([1, -4, 3], 0) == 1",
                "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0",
                "assert poly([2, 3], 0) == 2",
                "assert poly([2, 3], 1) == 5",
                "assert poly([5], 10) == 5",
                "assert poly([2, 3], -1) == -1"
            ],
            "failed_tests": [
                "assert poly([1, -4, 3], 2) == 3 (AssertionError: )"
            ]
        },
        "prompt_tokens": 341,
        "completion_tokens": 498
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_third([]) == []",
                "assert sort_third([1]) == [1]",
                "assert sort_third([1, 2]) == [1, 2]",
                "assert sort_third([1, 2, 3]) == [1, 2, 3]",
                "assert sort_third([7, 7, 7, 7, 7, 7, 7]) == [7, 7, 7, 7, 7, 7, 7]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 232,
        "completion_tokens": 517
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
                "assert unique([7, 1, 4, 2]) == [1, 2, 4, 7]",
                "assert unique([]) == []",
                "assert unique([-3, -1, -7, -1, -3]) == [-7, -3, -1]",
                "assert unique([True, False, True, False]) == [False, True]",
                "assert unique([42]) == [42]",
                "assert unique([1.1, 2.2, 3.3, 2.2, 1.1]) == [1.1, 2.2, 3.3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 155,
        "completion_tokens": 328
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([1, 2, 3, 4, 5]) == 5",
                "assert max_element([-5, -4, -3, -2, -1]) == -1",
                "assert max_element([-10, 0, 10, 20, -20]) == 20",
                "assert max_element([42]) == 42",
                "assert max_element([7, 7, 7, 7, 7]) == 7",
                "assert max_element([0, -1, -2, -3, -4]) == 0",
                "assert max_element([0, 1, 2, 3, 0]) == 3",
                "assert max_element([1.5, 2.5, 0.5, 3.5, 2.5]) == 3.5",
                "assert max_element([-1.1, -2.2, -3.3, -0.4]) == -0.4"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 164,
        "completion_tokens": 326
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(10) == 0",
                "assert fizz_buzz(11) == 0",
                "assert fizz_buzz(12) == 0",
                "assert fizz_buzz(50) == 0",
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(78) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 161,
        "completion_tokens": 401
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_even([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert sort_even([5, 4, 3, 2, 1]) == [1, 4, 3, 2, 5]",
                "assert sort_even([7, 1, 7, 2, 7]) == [7, 1, 7, 2, 7]",
                "assert sort_even([3, 9, 1, 9, 2]) == [1, 9, 2, 9, 3]",
                "assert sort_even([]) == []",
                "assert sort_even([1]) == [1]",
                "assert sort_even([2, 1]) == [2, 1]",
                "assert sort_even([-3, -2, -1, 0, 1]) == [-3, -2, -1, 0, 1]",
                "assert sort_even([5, -1, 3, -2, 1]) == [1, -1, 3, -2, 5]",
                "assert sort_even([4, 5, 4, 6, 4, 7]) == [4, 5, 4, 6, 4, 7]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 205,
        "completion_tokens": 460
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode_cyclic('ab') == 'ab'",
                "assert encode_cyclic('abc') == 'bca'",
                "assert decode_cyclic('a') == 'a'",
                "assert decode_cyclic('bcad') == 'abcd'",
                "assert encode_cyclic('a') == 'a'",
                "assert decode_cyclic('bca') == 'abc'"
            ],
            "failed_tests": [
                "assert encode_cyclic('abcdef') == 'bcadef' (AssertionError: )",
                "assert encode_cyclic('abcdefg') == 'bcadefg' (AssertionError: )",
                "assert decode_cyclic('bcadefg') == 'abcdefg' (AssertionError: )",
                "assert decode_cyclic('bcadef') == 'abcdef' (AssertionError: )"
            ]
        },
        "prompt_tokens": 240,
        "completion_tokens": 361
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(1) == 2",
                "assert prime_fib(2) == 3",
                "assert prime_fib(3) == 5",
                "assert prime_fib(4) == 13",
                "assert prime_fib(5) == 89",
                "assert prime_fib(6) == 233"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 179,
        "completion_tokens": 234
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, -1, 0]) == True",
                "assert triples_sum_to_zero([1, 2, 4]) == False",
                "assert triples_sum_to_zero([1, 2, -3, 4]) == True",
                "assert triples_sum_to_zero([-1, -2, -4, -5]) == False",
                "assert triples_sum_to_zero([10, -3, 1, 2, -1, -4, 1]) == True",
                "assert triples_sum_to_zero([3, 5, 1]) == False",
                "assert triples_sum_to_zero([3, -2, -1]) == True",
                "assert triples_sum_to_zero([]) == False",
                "assert triples_sum_to_zero([0, 0, 0, 0]) == True",
                "assert triples_sum_to_zero([1]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 241,
        "completion_tokens": 360
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(0) == 0",
                "assert car_race_collision(1) == 1"
            ],
            "failed_tests": [
                "assert car_race_collision(2) == 2 (AssertionError: )",
                "assert car_race_collision(10) == 10 (AssertionError: )",
                "assert car_race_collision(5) == 5 (AssertionError: )",
                "assert car_race_collision(1000) == 1000 (AssertionError: )"
            ]
        },
        "prompt_tokens": 233,
        "completion_tokens": 171
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([-1, -2, -3]) == [0, -1, -2]",
                "assert incr_list([0, 5, -2, 3, -1]) == [1, 6, -1, 4, 0]",
                "assert incr_list([2, 2, 2]) == [3, 3, 3]",
                "assert incr_list([99]) == [100]",
                "assert incr_list([]) == []",
                "assert incr_list(list(range(-5, 6))) == list(range(-4, 7))"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 190,
        "completion_tokens": 211
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([0, 0, 1, -1]) == True",
                "assert pairs_sum_to_zero(list(range(1, 100))) == False",
                "assert pairs_sum_to_zero([1]) == False",
                "assert pairs_sum_to_zero(list(range(-50, 51))) == True",
                "assert pairs_sum_to_zero([0, 1, 2, 3]) == False",
                "assert pairs_sum_to_zero([-1, 1, -3]) == True",
                "assert pairs_sum_to_zero([1, 1, -1, -1]) == True",
                "assert pairs_sum_to_zero([1, -1, 2, -2]) == True",
                "assert pairs_sum_to_zero([0, 1, 2, -1]) == True",
                "assert pairs_sum_to_zero([]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 239,
        "completion_tokens": 389
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert change_base(15, 2) == '1111'",
                "assert change_base(2, 10) == '2'",
                "assert change_base(15, 8) == '17'",
                "assert change_base(8, 2) == '1000'",
                "assert change_base(8, 3) == '22'",
                "assert change_base(7, 2) == '111'",
                "assert change_base(1, 2) == '1'"
            ],
            "failed_tests": [
                "assert change_base(0, 2) == '0' (AssertionError: )"
            ]
        },
        "prompt_tokens": 173,
        "completion_tokens": 400
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(0, 10) == 0",
                "assert triangle_area(10, 0) == 0",
                "assert triangle_area(0, 0) == 0",
                "assert triangle_area(4.5, 2.2) == 4.95",
                "assert triangle_area(1000, 300) == 150000"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 128,
        "completion_tokens": 292
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib4(0) == 0, \"Base case fib4(0) should return 0\"",
                "assert fib4(1) == 0, \"Base case fib4(1) should return 0\"",
                "assert fib4(2) == 2, \"Base case fib4(2) should return 2\"",
                "assert fib4(3) == 0, \"Base case fib4(3) should return 0\""
            ],
            "failed_tests": [
                "assert fib4(4) == 4, \"fib4(4) should return 4 as it's the sum of the previous 4 terms: 0+0+2+0\" (AssertionError: fib4(4) should return 4 as it's the sum of the previous 4 terms: 0+0+2+0)"
            ]
        },
        "prompt_tokens": 253,
        "completion_tokens": 389
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([3, 1, 2, 4, 5]) == 3",
                "assert median([-5, -1, -3, -2, -4]) == -3",
                "assert median([42]) == 42",
                "assert median([7, 7, 7, 7, 7]) == 7",
                "assert median([2, 2, 2, 2]) == 2",
                "assert median([1.5, 2.5, 3.5, 4.5, 5.5]) == 3.5",
                "assert median([1, 2, 3, 4, 5, 6]) == 3.5",
                "assert median([6, 5, 4, 3, 2, 1]) == 3.5"
            ],
            "failed_tests": [
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 157,
        "completion_tokens": 378
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('a') == True",
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('racecar') == True",
                "assert is_palindrome('this is not a palindrome') == False",
                "assert is_palindrome('') == True",
                "assert is_palindrome('Aba'.lower()) == True",
                "assert is_palindrome('12321') == True",
                "assert is_palindrome('Aba') == False",
                "assert is_palindrome('python') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 153,
        "completion_tokens": 366
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(3, 5) == 3",
                "assert modp(1101, 101) == 2",
                "assert modp(0, 101) == 1",
                "assert modp(3, 11) == 8",
                "assert modp(100, 101) == 1",
                "assert modp(1, 1) == 0",
                "assert modp(1, 2) == 0",
                "assert modp(123456789, 98765) == pow(2, 123456789, 98765)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 187,
        "completion_tokens": 497
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_shift('a') == 'f'",
                "assert encode_shift('hello') == 'mjqqt'",
                "assert encode_shift('xyz') == 'cde'",
                "assert encode_shift('') == ''",
                "assert encode_shift('abcdefghijklmnopqrstuvwxyz') == 'fghijklmnopqrstuvwxyzabcde'",
                "assert decode_shift('f') == 'a'",
                "assert decode_shift('mjqqt') == 'hello'",
                "assert decode_shift('cde') == 'xyz'",
                "assert decode_shift('') == ''",
                "assert decode_shift('fghijklmnopqrstuvwxyzabcde') == 'abcdefghijklmnopqrstuvwxyz'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 172,
        "completion_tokens": 286
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('') == ''",
                "assert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'",
                "assert remove_vowels('abcdef') == 'bcdf'",
                "assert remove_vowels('aaaaa') == ''",
                "assert remove_vowels('aaBAA') == 'B'",
                "assert remove_vowels('zbcd') == 'zbcd'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 204,
        "completion_tokens": 170
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 4, 10], 100) == True",
                "assert below_threshold([1, 2, 4, 99], 100) == True",
                "assert below_threshold([1, 20, 4, 10], 5) == False",
                "assert below_threshold([], 10) == True",
                "assert below_threshold([-10, -20, -30], -5) == True",
                "assert below_threshold([-1, -2, -3, 0], 0) == False",
                "assert below_threshold([1], 2) == True",
                "assert below_threshold([10], 5) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 161,
        "completion_tokens": 289
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(2, 3) == 5",
                "assert add(-4, -6) == -10",
                "assert add(10, -4) == 6",
                "assert add(-3, 2) == -1",
                "assert add(0, 5) == 5",
                "assert add(-5, 0) == -5",
                "assert add(0, 0) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 135,
        "completion_tokens": 156
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
                "assert same_chars('abcd', 'dddddddabc') == True",
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('eabcd', 'dddddddabc') == False",
                "assert same_chars('abcd', 'dddddddabce') == False",
                "assert same_chars('abc', 'abc') == True",
                "assert same_chars('', 'abc') == False",
                "assert same_chars('', '') == True",
                "assert same_chars('Abc', 'abc') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 222,
        "completion_tokens": 348
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(0) == 0",
                "assert fib(1) == 1",
                "assert fib(2) == 1",
                "assert fib(3) == 2",
                "assert fib(5) == 5",
                "assert fib(10) == 55",
                "assert fib(8) == 21"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 134,
        "completion_tokens": 247
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing('<') == False",
                "assert correct_bracketing('<>') == True",
                "assert correct_bracketing('<<><>>') == True",
                "assert correct_bracketing('><<>') == False",
                "assert correct_bracketing('') == True",
                "assert correct_bracketing('<<>><<>><>') == True",
                "assert correct_bracketing('>>>>') == False",
                "assert correct_bracketing('<<<>') == False",
                "assert correct_bracketing('<>>>>') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 174,
        "completion_tokens": 224
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 2, 4, 20]) == True",
                "assert monotonic([1, 20, 4, 10]) == False",
                "assert monotonic([4, 1, 0, -10]) == True",
                "assert monotonic([1, 1, 2, 3]) == True",
                "assert monotonic([3, 2, 2, 1]) == True",
                "assert monotonic([5, 5, 5, 5]) == True",
                "assert monotonic([1]) == True",
                "assert monotonic([]) == True",
                "assert monotonic([-10, -5, -2, -1]) == True",
                "assert monotonic([-1, -2, -5, -10]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 169,
        "completion_tokens": 281
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
                "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]",
                "assert common([10, 20, 30], [1, 2, 3]) == []",
                "assert common([], [1, 2, 3]) == []",
                "assert common([], []) == []",
                "assert common([-1, -2, -3, 1], [1, -1]) == [-1, 1]",
                "assert common([1, 1, 1, 1], [1, 1, 1]) == [1]",
                "assert common([\"apple\", \"banana\", \"cherry\"], [\"banana\", \"dragonfruit\", \"apple\"]) == [\"apple\", \"banana\"]",
                "assert common([1, 2, 3], [\"1\", \"2\", \"3\"]) == []"
            ],
            "failed_tests": [
                "assert common([1, \"apple\", 2, \"banana\"], [\"banana\", 1, \"apple\"]) == [1, \"apple\", \"banana\"] (TypeError: '<' not supported between instances of 'str' and 'int')"
            ]
        },
        "prompt_tokens": 196,
        "completion_tokens": 379
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(15) == 5",
                "assert largest_prime_factor(49) == 7"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 145,
        "completion_tokens": 161
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(100) == 5050",
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(10) == 55",
                "assert sum_to_n(0) == 0",
                "assert sum_to_n(-5) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 176,
        "completion_tokens": 232
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"(\") == False",
                "assert correct_bracketing(\"()\") == True",
                "assert correct_bracketing(\"(()())\") == True",
                "assert correct_bracketing(\")(()\") == False",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"()()\") == True",
                "assert correct_bracketing(\"(((())))\") == True",
                "assert correct_bracketing(\"((((())\") == False",
                "assert correct_bracketing(\")()\") == False",
                "assert correct_bracketing(\"(())()()((()))\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 171,
        "completion_tokens": 301
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert derivative([3]) == []",
                "assert derivative([3, 2]) == [2]",
                "assert derivative([3, 2, 1]) == [2, 2]",
                "assert derivative([1, 2, 3, 4, 5]) == [2, 6, 12, 20]",
                "assert derivative([3, 2, 0, 1]) == [2, 0, 3]",
                "assert derivative([-1, -2, -3]) == [-2, -6]",
                "assert derivative([0]) == []"
            ],
            "failed_tests": [
                "assert derivative([0, 0, 0, 0]) == [] (AssertionError: )"
            ]
        },
        "prompt_tokens": 190,
        "completion_tokens": 538
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fibfib(0) == 0",
                "assert fibfib(1) == 0",
                "assert fibfib(2) == 1",
                "assert fibfib(8) == 24",
                "assert fibfib(10) == 81"
            ],
            "failed_tests": [
                "assert fibfib(3) == 2 (AssertionError: )",
                "assert fibfib(-1) == \"Error\" (RecursionError: maximum recursion depth exceeded in comparison)"
            ]
        },
        "prompt_tokens": 231,
        "completion_tokens": 286
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"AEIOU\") == 5",
                "assert vowels_count(\"BANANA\") == 3",
                "assert vowels_count(\"cyst\") == 0",
                "assert vowels_count(\"aeiou\") == 5",
                "assert vowels_count(\"aAeEiIoOuUy\") == 11",
                "assert vowels_count(\"banana\") == 3",
                "assert vowels_count(\"shyly\") == 1",
                "assert vowels_count(\"bcdfg\") == 0"
            ],
            "failed_tests": [
                "assert vowels_count(\"happy\") == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 208,
        "completion_tokens": 370
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(1234, 1) == \"4123\"",
                "assert circular_shift(1234, 4) == \"1234\"",
                "assert circular_shift(1234, 5) == \"4321\"",
                "assert circular_shift(7, 3) == \"7\"",
                "assert circular_shift(1234, 0) == \"1234\"",
                "assert circular_shift(123456789, 10) == \"987654321\"",
                "assert circular_shift(1020, 2) == \"2010\"",
                "assert circular_shift(12321, 2) == \"21123\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 164,
        "completion_tokens": 294
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"\") == 0",
                "assert digitSum(\"abAB\") == 131",
                "assert digitSum(\"abcCd\") == 67",
                "assert digitSum(\"helloE\") == 69",
                "assert digitSum(\"woArBld\") == 131",
                "assert digitSum(\"aAaaaXa\") == 153",
                "assert digitSum(\"lowercase\") == 0",
                "assert digitSum(\"UPPER\") == sum([ord(c) for c in \"UPPER\"])",
                "assert digitSum(\"123AaB\") == 131"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 194,
        "completion_tokens": 349
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"5 apples and 5 oranges\", 10) == 0",
                "assert fruit_distribution(\"0 apples and 0 oranges\", 10) == 10",
                "assert fruit_distribution(\"1 apples and 2 oranges\", 1000) == 997",
                "assert fruit_distribution(\"0 apples and 0 oranges\", 1) == 1",
                "assert fruit_distribution(\"123 apples and 456 oranges\", 1000) == 421",
                "assert fruit_distribution(\"  10 apples and 20 oranges  \", 50) == 20",
                "assert fruit_distribution(\"999 apples and 1 oranges\", 100000) == 99000",
                "assert fruit_distribution(\"0 apples and 0 oranges\", 0) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 292,
        "completion_tokens": 404
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert pluck([1024, 512, 256, 128]) == [128, 3]",
                "assert pluck([2, 4, 6, 8, 10]) == [2, 0]",
                "assert pluck([1, 3, 2, 4]) == [2, 2]",
                "assert pluck([2]) == [2, 0]",
                "assert pluck([]) == []",
                "assert pluck([0, 4, 2, 0]) == [0, 0]",
                "assert pluck([1, 3, 5, 7]) == []",
                "assert pluck([2, 4, 6, 8]) == [2, 0]"
            ],
            "failed_tests": [
                "assert pluck([-2, -4, 0, 2]) == [0, 2] (AssertionError: )"
            ]
        },
        "prompt_tokens": 394,
        "completion_tokens": 385
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert search([4, 1, 2, 2, 3, 1]) == 2",
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
                "assert search([5, 5, 4, 4, 4]) == -1",
                "assert search([1]) == 1",
                "assert search([2, 2, 3, 3, 3]) == 3",
                "assert search([10]*10) == 10",
                "assert search([3]*2) == -1",
                "assert search(list(range(1, 101)) + [50]*50) == 50"
            ],
            "failed_tests": [
                "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9]) == -1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 247,
        "completion_tokens": 407
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([4, 3, 2, 1]) == [1, 4, 2, 3]",
                "assert strange_sort_list([-1, -2, -3, -4]) == [-4, -1, -3, -2]",
                "assert strange_sort_list([-2, 1, 3, -1, 2]) == [-2, 3, -1, 2, 1]",
                "assert strange_sort_list([0, 1, 2, 3, -1]) == [-1, 3, 0, 2, 1]",
                "assert strange_sort_list([10, 2, 8, 6, 3, 7, 1, 9, 5, 4]) == [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 342
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(1000, 1000, 1000) == 433012.70",
                "assert triangle_area(-1, 2, 3) == -1",
                "assert triangle_area(2, -1, 3) == -1",
                "assert triangle_area(5, 5, 5) == 10.83",
                "assert triangle_area(2, 3, -1) == -1",
                "assert triangle_area(5, 5, 8) == 12.00",
                "assert triangle_area(1, 2, 10) == -1",
                "assert triangle_area(3, 4, 5) == 6.00",
                "assert triangle_area(3.5, 4.2, 5.1) > 0",
                "assert triangle_area(0.3, 0.4, 0.5) == 0.06"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 203,
        "completion_tokens": 413
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([1, 2], 5) == False",
                "assert will_it_fly([3, 2, 3], 1) == False",
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([3], 5) == True",
                "assert will_it_fly([2, 2], 4) == True",
                "assert will_it_fly([], 1) == True",
                "assert will_it_fly([1, 2, 3, 2, 1], 10) == True",
                "assert will_it_fly([1, 2, 3, 4, 5], 20) == False",
                "assert will_it_fly([-1, -2, -1], 0) == True",
                "assert will_it_fly([0, 0, 0], 0) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 312,
        "completion_tokens": 375
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1, 2, 3, 2, 1]) == 0",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4",
                "assert smallest_change([]) == 0",
                "assert smallest_change([7, 7, 7, 7, 7]) == 0",
                "assert smallest_change([9]) == 0",
                "assert smallest_change([1, 3, 5, 7, 9, 7, 5, 3, 2]) == 1",
                "assert smallest_change([4, 6, 6, 4]) == 0",
                "assert smallest_change([4, 6, 5, 4]) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 239,
        "completion_tokens": 366
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match([], []) == []",
                "assert total_match(['a', 'bc'], ['def', 'gh']) == ['a', 'bc']",
                "assert total_match(['hello', 'world'], ['hi', 'there']) == ['hi', 'there']",
                "assert total_match(['123'], ['1', '2']) == ['1', '2']",
                "assert total_match(['Hi', 'There'], ['hi', 'there']) == ['Hi', 'There']",
                "assert total_match(['short', 'list'], ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 275,
        "completion_tokens": 339
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(2*3*5) == True",
                "assert is_multiply_prime(2) == False",
                "assert is_multiply_prime(2*3) == False",
                "assert is_multiply_prime(49) == False",
                "assert is_multiply_prime(5*7*13) == True",
                "assert is_multiply_prime(1) == False"
            ],
            "failed_tests": [
                "assert is_multiply_prime(28) == False (AssertionError: )",
                "assert is_multiply_prime(8) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 161,
        "completion_tokens": 283
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(-8, 2) == False",
                "assert is_simple_power(8, 2) == True",
                "assert is_simple_power(1, 4) == True",
                "assert is_simple_power(3, 2) == False",
                "assert is_simple_power(0, 3) == False",
                "assert is_simple_power(3, 1) == False",
                "assert is_simple_power(5, 3) == False",
                "assert is_simple_power(0, 0) == False"
            ],
            "failed_tests": [
                "assert is_simple_power(4, -2) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 224,
        "completion_tokens": 421
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(27) == True",
                "assert iscube(-8) == True",
                "assert iscube(2) == False",
                "assert iscube(0) == True",
                "assert iscube(1) == True",
                "assert iscube(729) == True",
                "assert iscube(500) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 192,
        "completion_tokens": 149
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"2\") == 1",
                "assert hex_key(\"A\") == 0",
                "assert hex_key(\"AB\") == 1",
                "assert hex_key(\"777\") == 3",
                "assert hex_key(\"123456789ABCDEF0\") == 6",
                "assert hex_key(\"ABED1A33\") == 4",
                "assert hex_key(\"AECF0\") == 0",
                "assert hex_key(\"\") == 0",
                "assert hex_key(\"2020\") == 2",
                "assert hex_key(\"BDBD\") == 4"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 381,
        "completion_tokens": 230
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(0) == \"db0db\"",
                "assert decimal_to_binary(1) == \"db1db\"",
                "assert decimal_to_binary(2) == \"db10db\"",
                "assert decimal_to_binary(15) == \"db1111db\"",
                "assert decimal_to_binary(32) == \"db100000db\"",
                "assert decimal_to_binary(21) == \"db10101db\"",
                "assert decimal_to_binary(255) == \"db11111111db\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 221,
        "completion_tokens": 291
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_happy(\"a\") == False",
                "assert is_happy(\"abc\") == True",
                "assert is_happy(\"adb\") == True",
                "assert is_happy(\"aebdcfghh\") == False",
                "assert is_happy(\"aaa\") == False",
                "assert is_happy(\"abdc\") == True",
                "assert is_happy(\"xyy\") == False",
                "assert is_happy(\"abcd\") == True",
                "assert is_happy(\"abcdc\") == False"
            ],
            "failed_tests": [
                "assert is_happy(\"abcdefga\") == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 203,
        "completion_tokens": 310
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([]) == []",
                "assert numerical_letter_grade([4.0, 4.0, 4.0]) == ['A+', 'A+', 'A+']",
                "assert numerical_letter_grade([0.0, 0.0, 0.0]) == ['E', 'E', 'E']",
                "assert numerical_letter_grade([3.69, 3.29, 2.69, 2.29, 1.69, 1.29, 0.69]) == ['A-', 'B+', 'B-', 'C+', 'C-', 'D+', 'D-']"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'E'] (AssertionError: )",
                "assert numerical_letter_grade([3.71, 3.31, 2.71, 2.31, 1.71, 1.31, 0.71]) == ['A', 'B+', 'B', 'C+', 'C', 'D+', 'D'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 352,
        "completion_tokens": 555
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('Hello') == True",
                "assert prime_length('abcdcba') == True",
                "assert prime_length('kittens') == True",
                "assert prime_length('orange') == False",
                "assert prime_length('') == False",
                "assert prime_length('Hi') == True",
                "assert prime_length('Hello World') == True",
                "assert prime_length('A') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 163,
        "completion_tokens": 203
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert starts_one_ends(1) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 126,
        "completion_tokens": 192
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(0) == \"0\"",
                "assert solve(5) == \"101\"",
                "assert solve(11) == \"10\"",
                "assert solve(23) == \"101\"",
                "assert solve(100) == \"1\"",
                "assert solve(111) == \"11\"",
                "assert solve(123) == \"110\"",
                "assert solve(1000) == \"1\"",
                "assert solve(2345) == \"1110\"",
                "assert solve(10000) == \"1\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 215,
        "completion_tokens": 489
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2",
                "assert add([1, 3, 5, 7, 9]) == 0",
                "assert add([2]) == 0",
                "assert add([1, 2]) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 137,
        "completion_tokens": 362
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('Hi') == 'Hi'",
                "assert anti_shuffle('hello') == 'ehllo'",
                "assert anti_shuffle('') == ''",
                "assert anti_shuffle('cba') == 'abc'",
                "assert anti_shuffle('mississippi') == 'iiiimppssss'"
            ],
            "failed_tests": [
                "assert anti_shuffle('A man a plan a canal Panama') == 'A a mn a alnp a a aclmn Aaanmp' (AssertionError: )",
                "assert anti_shuffle('B4n4n4') == '4B4n4' (AssertionError: )",
                "assert anti_shuffle('dCbA') == 'ABCd' (AssertionError: )"
            ]
        },
        "prompt_tokens": 212,
        "completion_tokens": 296
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
                "assert get_row([], 1) == []",
                "assert get_row([[2,3,4], [5,6,7]], 1) == []",
                "assert get_row([[1,2,3], [4,5,6]], 3) == [(0, 2)]",
                "assert get_row([[1,1,1,2,3]], 1) == [(0, 2), (0, 1), (0, 0)]",
                "assert get_row([[1], [2], [1], [3]], 1) == [(0, 0), (2, 0)]",
                "assert get_row([[1,2,3], [4,5], [6,1,2,1,3]], 1) == [(0, 0), (2, 3), (2, 1)]",
                "assert get_row([[1, \"a\", 2], [\"a\", 3, 4]], \"a\") == [(0, 1), (1, 0)]",
                "assert get_row([[-1, -2, -3], [1, 2, 3], [-1, 2, -1]], -1) == [(0, 0), (2, 2), (2, 0)]"
            ],
            "failed_tests": [
                "assert get_row([[1,2,3], [4,5,6,1]], 1) == [(1, 3)] (AssertionError: )"
            ]
        },
        "prompt_tokens": 341,
        "completion_tokens": 531
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([]) == []",
                "assert sort_array([5]) == [5]",
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
                "assert sort_array([1, 1, 1, 1]) == [1, 1, 1, 1]",
                "assert sort_array([4, 3, 2, 1]) == [1, 2, 3, 4]",
                "assert sort_array([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]"
            ],
            "failed_tests": [
                "assert sort_array([0, 4, 2, 3]) == [4, 3, 2, 0] (AssertionError: )",
                "assert sort_array([3, 1, 4, 1, 5, 9, 2]) == [9, 5, 4, 3, 2, 1, 1] (AssertionError: )"
            ]
        },
        "prompt_tokens": 285,
        "completion_tokens": 525
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encrypt('hi') == 'lm'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('gf') == 'kj'",
                "assert encrypt('et') == 'ix'",
                "assert encrypt('xyz') == 'bcd'",
                "assert encrypt('') == ''",
                "assert encrypt('abc123') == 'efg123'"
            ],
            "failed_tests": [
                "assert encrypt('HelloWorld') == 'JgnnqYqtnf' (AssertionError: )",
                "assert encrypt('hello world') == 'jgnnq yqtnf' (AssertionError: )",
                "assert encrypt('hello, world!') == 'jgnnq, yqtnf!' (AssertionError: )"
            ]
        },
        "prompt_tokens": 192,
        "completion_tokens": 234
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([1, 2, 3, 4, 5]) == 2",
                "assert next_smallest([5, 1, 4, 3, 2]) == 2",
                "assert next_smallest([]) == None",
                "assert next_smallest([1, 1]) == None",
                "assert next_smallest([2, 3, 1, 4, 3, 2, 1]) == 2",
                "assert next_smallest([1]) == None",
                "assert next_smallest([2, 1]) == 2",
                "assert next_smallest([1, 2, 5, 5, 6, 7]) == 2"
            ],
            "failed_tests": [
                "assert next_smallest([-1, 0, -2, -3]) == -1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 206,
        "completion_tokens": 336
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"Hello world. The sky is blue. It's a sunny day.\") == 0",
                "assert is_bored(\"I am feeling great today. The weather is nice.\") == 1",
                "assert is_bored(\"I am feeling great today! I love this weather. Isn't it lovely? I think so.\") == 3",
                "assert is_bored(\"\") == 0",
                "assert is_bored(\"i am feeling great today. i love this weather.\") == 0",
                "assert is_bored(\"I am feeling great today!!!\") == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 189,
        "completion_tokens": 344
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(5, 2, 7) == True",
                "assert any_int(3, 2, 2) == False",
                "assert any_int(3, -2, 1) == True",
                "assert any_int(-1, -3, -4) == True",
                "assert any_int(3.6, -2.2, 2) == False",
                "assert any_int(3, -2, 1.5) == False",
                "assert any_int(0, -5, 5) == True",
                "assert any_int(1000, 500, 500) == True",
                "assert any_int(0, 0, 0) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 217,
        "completion_tokens": 266
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'",
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
                "assert encode('bCd') == 'BcD'",
                "assert encode('bcd') == 'BCD'"
            ],
            "failed_tests": [
                "assert encode('AEIOU') == 'cgkqy'.upper() (AssertionError: )"
            ]
        },
        "prompt_tokens": 191,
        "completion_tokens": 280
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([4, 6, 8, 10, 12, 14, 16]) == 0",
                "assert skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11",
                "assert skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25",
                "assert skjkasdkd([]) == 0",
                "assert skjkasdkd([0, 81, 12, 3, 1, 21]) == 3",
                "assert skjkasdkd([0, 8, 1, 2, 1, 7]) == 7",
                "assert skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10",
                "assert skjkasdkd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 7",
                "assert skjkasdkd([7]) == 7"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 368,
        "completion_tokens": 639
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) == True",
                "assert check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}) == False",
                "assert check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}) == False",
                "assert check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) == True",
                "assert check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}) == False",
                "assert check_dict_case({}) == False",
                "assert check_dict_case({\"a\": \"apple\"}) == True",
                "assert check_dict_case({\"A\": \"apple\"}) == True",
                "assert check_dict_case({\"one\": 1, \"two\": 2, \"three\": 3}) == True",
                "assert check_dict_case({\"ONE\": 1, \"TWO\": 2, \"THREE\": 3}) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 251,
        "completion_tokens": 312
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(0) == []",
                "assert count_up_to(1) == []",
                "assert count_up_to(2) == []",
                "assert count_up_to(5) == [2, 3]",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]",
                "assert count_up_to(50) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]",
                "assert count_up_to(10) == [2, 3, 5, 7]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 227,
        "completion_tokens": 403
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert multiply(148, 412) == 16",
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(14, -15) == 20",
                "assert multiply(7, 3) == 21",
                "assert multiply(0, 123) == 0",
                "assert multiply(0, 0) == 0",
                "assert multiply(123456789, 987654321) == 9"
            ],
            "failed_tests": [
                "assert multiply(-12, -22) == 4 (AssertionError: )",
                "assert multiply(-4, -5) == 20 (AssertionError: )"
            ]
        },
        "prompt_tokens": 180,
        "completion_tokens": 235
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('aBCdEf') == 1",
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('dBBE') == 0",
                "assert count_upper('') == 0",
                "assert count_upper('A') == 1",
                "assert count_upper('a') == 0"
            ],
            "failed_tests": [
                "assert count_upper('AbEcIdOF') == 2 (AssertionError: )",
                "assert count_upper('AbCdEfGhIj') == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 154,
        "completion_tokens": 258
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"10\") == 10",
                "assert closest_integer(\"15.3\") == 15",
                "assert closest_integer(\"2.8\") == 3",
                "assert closest_integer(\"-3.2\") == -3",
                "assert closest_integer(\"-7.9\") == -8",
                "assert closest_integer(\"14.5\") == 15",
                "assert closest_integer(\"-14.5\") == -15",
                "assert closest_integer(\"0\") == 0"
            ],
            "failed_tests": [
                "assert closest_integer(\"0.1\") == 1 (AssertionError: )",
                "assert closest_integer(\"-0.1\") == -1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 238,
        "completion_tokens": 252
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(2) == [2, 4]",
                "assert make_a_pile(3) == [3, 5, 7]",
                "assert make_a_pile(4) == [4, 6, 8, 10]",
                "assert make_a_pile(5) == [5, 7, 9, 11, 13]",
                "assert make_a_pile(10) == [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]",
                "assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 214,
        "completion_tokens": 305
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]",
                "assert words_string(\"One,two,three,four,five,six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
                "assert words_string(\"Hello world program\") == [\"Hello\", \"world\", \"program\"]",
                "assert words_string(\"Python\") == [\"Python\"]",
                "assert words_string(\"\") == []",
                "assert words_string(\"  Leading and trailing spaces  \") == [\"Leading\", \"and\", \"trailing\", \"spaces\"]",
                "assert words_string(\",Leading,and,trailing,commas,\") == [\"Leading\", \"and\", \"trailing\", \"commas\"]",
                "assert words_string(\"Multiple   spaces, and,commas,   here\") == [\"Multiple\", \"spaces\", \"and\", \"commas\", \"here\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 198,
        "completion_tokens": 269
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(13, 12) == -1",
                "assert choose_num(9, 9) == -1",
                "assert choose_num(8, 8) == 8",
                "assert choose_num(12, 15) == 14",
                "assert choose_num(-2, 2) == 2",
                "assert choose_num(4, 4) == 4",
                "assert choose_num(13, 15) == 14",
                "assert choose_num(11, 14) == 14",
                "assert choose_num(5, 5) == -1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 176,
        "completion_tokens": 362
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(7, 5) == -1",
                "assert rounded_avg(10, 10) == bin(10)",
                "assert rounded_avg(10, 20) == \"0b1111\"",
                "assert rounded_avg(1, 2) == bin(2)"
            ],
            "failed_tests": [
                "assert rounded_avg(1, 4) == bin(3) (AssertionError: )"
            ]
        },
        "prompt_tokens": 222,
        "completion_tokens": 309
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([152, 323, 1422, 10]) == []",
                "assert unique_digits([123]) == []",
                "assert unique_digits([135]) == [135]",
                "assert unique_digits([]) == []",
                "assert unique_digits([9, 7, 555, 31]) == [7, 9, 31, 555]",
                "assert unique_digits([15, 777777777777777777, 33]) == [15, 33, 777777777777777777]",
                "assert unique_digits([0, 11, 222, 3]) == [3, 11]"
            ],
            "failed_tests": [
                "assert unique_digits([4321, 321, 213, 135, 31]) == [31, 135, 213, 321] (AssertionError: )"
            ]
        },
        "prompt_tokens": 184,
        "completion_tokens": 368
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']",
                "assert by_length([]) == []",
                "assert by_length([1, -1, 55]) == ['One']",
                "assert by_length([-10, 0, 10, 20]) == []",
                "assert by_length([9, 8, 7, 6, 5, 4, 3, 2, 1]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']",
                "assert by_length([2]) == ['Two']",
                "assert by_length([3, 3, 3, 3]) == ['Three', 'Three', 'Three', 'Three']",
                "assert by_length([1, 11, 1, 10, 2, 2]) == ['Two', 'Two', 'One', 'One']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 358,
        "completion_tokens": 360
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(0) == []",
                "assert f(1) == [1]",
                "assert f(2) == [1, 2]",
                "assert f(4) == [1, 2, 6, 24]",
                "assert f(5) == [1, 2, 6, 24, 15]",
                "assert f(6) == [1, 2, 6, 24, 15, 720]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 482
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(1) == (0, 1)",
                "assert even_odd_palindrome(2) == (1, 1)",
                "assert even_odd_palindrome(10) == (4, 5)",
                "assert even_odd_palindrome(11) == (4, 6)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 293,
        "completion_tokens": 464
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_nums([]) == 0",
                "assert count_nums([5]) == 1",
                "assert count_nums([-5]) == 0",
                "assert count_nums([1, 1, 2]) == 3",
                "assert count_nums([10, 99, 123]) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 351
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([1, 2, 3, 4, 5]) == True",
                "assert move_one_ball([]) == True",
                "assert move_one_ball([5, 1, 2, 3, 4]) == True",
                "assert move_one_ball([4, 5, 1, 2, 3]) == True",
                "assert move_one_ball([2, 1, 3, 5, 4]) == False",
                "assert move_one_ball([-3, -2, -1, 0, 1]) == True",
                "assert move_one_ball([1]) == True",
                "assert move_one_ball([2, 3, 4, 5, 1]) == True",
                "assert move_one_ball([5, 4, 3, 2, 1]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 381,
        "completion_tokens": 287
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1, 3, 5], [2, 4, 6]) == \"YES\"",
                "assert exchange([1, 3, 5], [1, 3, 7]) == \"NO\"",
                "assert exchange([2, 4, 6], [1, 3, 5]) == \"YES\"",
                "assert exchange([2, 4, 6], [8, 10, 12]) == \"YES\"",
                "assert exchange([1, 3, 5], [2, 4, 6]) == \"YES\"",
                "assert exchange([2, 4, 6], [1, 3, 5]) == \"YES\"",
                "assert exchange([1, 3, 5, 7], [2, 4]) == \"NO\"",
                "assert exchange([1, 3, 5], [2, 4, 6]) == \"YES\"",
                "assert exchange([1], [2]) == \"YES\"",
                "assert exchange([1], [3]) == \"NO\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 279,
        "completion_tokens": 424
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('a b b a') == {'a': 2, 'b': 2}",
                "assert histogram('a b c a b') == {'a': 2, 'b': 2}",
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('') == {}",
                "assert histogram('a a a a') == {'a': 4}",
                "assert histogram('a b c d e f g a b c d e') == {'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2}",
                "assert histogram('a b b c c c') == {'c': 3}",
                "assert histogram('x y z') == {'x': 1, 'y': 1, 'z': 1}",
                "assert histogram('z') == {'z': 1}"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 233,
        "completion_tokens": 324
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"\", \"a\") == (\"\", True)",
                "assert reverse_delete(\"\", \"\") == (\"\", True)",
                "assert reverse_delete(\"abc\", \"\") == (\"abc\", False)",
                "assert reverse_delete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)",
                "assert reverse_delete(\"abcdef\", \"b\") == (\"acdef\", False)",
                "assert reverse_delete(\"racecar\", \"xyz\") == (\"racecar\", True)",
                "assert reverse_delete(\"banana\", \"ban\") == (\"\", True)",
                "assert reverse_delete(\"a man a plan a canal panama\", \" \") == (\"amanaplanacanalpanama\", True)",
                "assert reverse_delete(\"aaaaa\", \"a\") == (\"\", True)"
            ],
            "failed_tests": [
                "assert reverse_delete(\"AbcBA\", \"a\") == (\"bcB\", False) (AssertionError: )"
            ]
        },
        "prompt_tokens": 244,
        "completion_tokens": 508
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['123456']) == [\"the number of odd elements 3n the str3ng 3 of the 3nput.\"]",
                "assert odd_count(['13579']) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\"]",
                "assert odd_count(['2468']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['', '', '']) == [\n\"the number of odd elements 0n the str0ng 0 of the 0nput.\",\n\"the number of odd elements 0n the str0ng 0 of the 0nput.\",\n\"the number of odd elements 0n the str0ng 0 of the 0nput.\"\n]",
                "assert odd_count(['001', '0202', '300']) == [\n\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\"the number of odd elements 0n the str0ng 0 of the 0nput.\",\n\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\n]"
            ],
            "failed_tests": [
                "assert odd_count(['123', '4567', '890']) == [\n\"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n\"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\n] (AssertionError: )"
            ]
        },
        "prompt_tokens": 255,
        "completion_tokens": 457
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([-1, -2, -3]) == -6",
                "assert minSubArraySum([5, -1, 3, 2]) == -1",
                "assert minSubArraySum([10]) == 10",
                "assert minSubArraySum([-5]) == -5",
                "assert minSubArraySum([1, 2, -4, 3, 4]) == -4",
                "assert minSubArraySum([0, -1, 2, -3, 4]) == -3",
                "assert minSubArraySum([0, 0, 0, 0]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 170,
        "completion_tokens": 373
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
                "assert max_fill([[1,1,1], [1,1,1], [1,1,1]], 4) == 3",
                "assert max_fill([], 1) == 0",
                "assert max_fill([[1]], 10) == 1",
                "assert max_fill([[1,0,1,1], [0,1,1,0], [1,0,0,1]], 3) == 3",
                "assert max_fill([[0,0,0,0], [0,0,0,0], [0,0,0,0]], 3) == 0"
            ],
            "failed_tests": [
                "assert max_fill([[1,1,1], [1,1,1], [1,1,1]], 9) == 1 (AssertionError: )",
                "assert max_fill([[1,1,1,1], [1,1,1,1], [1,1,1,1], [1,1,1,1]], 10) == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 405,
        "completion_tokens": 505
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([5, 9, 3, 1]) == [1, 3, 5, 9]",
                "assert sort_array([]) == []",
                "assert sort_array([42]) == [42]",
                "assert sort_array([1023, 511, 255, 127, 63, 31, 15, 7, 3, 1]) == [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023]",
                "assert sort_array([2, 0, 4, 6]) == [0, 2, 4, 6]",
                "assert sort_array([1024, 2048, 4096, 8192]) == [1024, 2048, 4096, 8192]"
            ],
            "failed_tests": [
                "assert sort_array([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4] (AssertionError: )",
                "assert sort_array([4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4] (AssertionError: )"
            ]
        },
        "prompt_tokens": 252,
        "completion_tokens": 552
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
                "assert select_words(\"Hello world\", 4) == [\"world\"]",
                "assert select_words(\"simple white space\", 2) == []",
                "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]",
                "assert select_words(\"\", 3) == []",
                "assert select_words(\"Hello\", 3) == [\"Hello\"]",
                "assert select_words(\"a e i o u\", 1) == []",
                "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]"
            ],
            "failed_tests": [
                "assert select_words(\"big dog has a bone\", 2) == [\"big\", \"dog\", \"bone\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 263,
        "completion_tokens": 366
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"characteristic\") == \"i\"",
                "assert get_closest_vowel(\"bAnAnA\") == \"A\"",
                "assert get_closest_vowel(\"ab\") == \"\"",
                "assert get_closest_vowel(\"I\") == \"\"",
                "assert get_closest_vowel(\"quick\") == \"\"",
                "assert get_closest_vowel(\"FULL\") == \"U\"",
                "assert get_closest_vowel(\"aeiou\") == \"\"",
                "assert get_closest_vowel(\"apple\") == \"\"",
                "assert get_closest_vowel(\"x\") == \"\""
            ],
            "failed_tests": [
                "assert get_closest_vowel(\"graph\") == \"\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 231,
        "completion_tokens": 348
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['()(', ')']) == 'Yes'",
                "assert match_parens([')', '(()']) == 'Yes'",
                "assert match_parens([')', ')']) == 'No'",
                "assert match_parens(['()', '()']) == 'Yes'",
                "assert match_parens(['', '()']) == 'Yes'",
                "assert match_parens(['', '(()']) == 'No'",
                "assert match_parens(['', '']) == 'Yes'",
                "assert match_parens(['(()', '())']) == 'Yes'",
                "assert match_parens(['(()(', '())']) == 'No'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 250,
        "completion_tokens": 297
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
                "assert maximum([4, -4, 4], 2) == [4, 4]",
                "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
                "assert maximum([1, 2, 3, 4, 5], 3) == [3, 4, 5]",
                "assert maximum([1, 2, 3], 0) == []",
                "assert maximum([100], 1) == [100]",
                "assert maximum([7, 7, 7, 7], 3) == [7, 7, 7]",
                "assert maximum(list(range(1000)), 1000) == list(range(1000))",
                "assert maximum([-1000, 1000], 2) == [-1000, 1000]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 299,
        "completion_tokens": 370
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9",
                "assert solution([30, 13, 24, 321]) == 0",
                "assert solution([2, 4, 6, 8, 10]) == 0",
                "assert solution([3]) == 3",
                "assert solution([2]) == 0"
            ],
            "failed_tests": [
                "assert solution([2, 7, 6, 8, 10]) == 7 (AssertionError: )",
                "assert solution([1, 3, 5, 7, 9, 11, 13, 15]) == 24 (AssertionError: )"
            ]
        },
        "prompt_tokens": 179,
        "completion_tokens": 350
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add_elements([11, 22, 33, 44, 55], 4) == 110",
                "assert add_elements([111, 222, 333, 444, 555], 3) == 0",
                "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
                "assert add_elements([10, 20, 30], 3) == 60",
                "assert add_elements([1, 2, 3, 4, 5, 6], 3) == 6",
                "assert add_elements([100, 200, 3, 4000], 1) == 0",
                "assert add_elements([99, 100, 101], 1) == 99",
                "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 45"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 210,
        "completion_tokens": 408
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(1) == [1]",
                "assert get_odd_collatz(3) == [1, 3, 5]",
                "assert get_odd_collatz(2) == [1]"
            ],
            "failed_tests": [
                "assert get_odd_collatz(7) == [1, 7, 11, 17, 21, 23] (AssertionError: )",
                "assert get_odd_collatz(9) == [1, 3, 5, 7, 9, 15, 19, 21, 27, 29, 31, 45, 63, 73, 91] (AssertionError: )",
                "assert get_odd_collatz(10) == [1, 3, 5, 7, 15, 31] (AssertionError: )",
                "assert len(get_odd_collatz(27)) > 100 (AssertionError: )"
            ]
        },
        "prompt_tokens": 313,
        "completion_tokens": 551
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('02-29-2020') == True",
                "assert valid_date('12/25/2020') == False",
                "assert valid_date('25-12-2020') == False",
                "assert valid_date('12-25-2020') == True",
                "assert valid_date('04-31-2020') == False",
                "assert valid_date('') == False",
                "assert valid_date('13-15-2020') == False",
                "assert valid_date('02-28-2021') == True"
            ],
            "failed_tests": [
                "assert valid_date('02-29-2021') == False (AssertionError: )",
                "assert valid_date('12-31-2020') == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 345,
        "completion_tokens": 394
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"abcdef\") == 3",
                "assert split_words(\"Hello    world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"ABCDEFG\") == 0",
                "assert split_words(\"abcdefghijklmnopqrstuvwxyz\") == 13",
                "assert split_words(\"\") == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 222,
        "completion_tokens": 279
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False",
                "assert is_sorted([5]) == True",
                "assert is_sorted([1, 3, 2, 4, 5]) == False",
                "assert is_sorted([1, 2, 2, 2, 3, 4]) == False",
                "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True",
                "assert is_sorted([1, 2, 3, 4, 5]) == True",
                "assert is_sorted([]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 331,
        "completion_tokens": 377
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersection((1, 2), (3, 4)) == \"NO\"",
                "assert intersection((1, 2), (3, 4)) == \"NO\"",
                "assert intersection((1, 3), (1, 3)) == \"YES\"",
                "assert intersection((-5, 0), (-2, 3)) == \"YES\"",
                "assert intersection((1, 2), (2, 3)) == \"NO\"",
                "assert intersection((1, 10), (2, 3)) == \"NO\"",
                "assert intersection((1, 10), (2, 4)) == \"YES\"",
                "assert intersection((1, 5), (1, 5)) == \"NO\"",
                "assert intersection((100, 200), (199, 300)) == \"NO\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 336,
        "completion_tokens": 353
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([0]) == 0",
                "assert prod_signs([1, 3, 5]) == 9",
                "assert prod_signs([10, -5, 0, 2]) == 0",
                "assert prod_signs([0, 0, 0]) == 0",
                "assert prod_signs([0, 1]) == 0",
                "assert prod_signs([5]) == 5",
                "assert prod_signs([]) == None",
                "assert prod_signs([1, 2, 2, -4]) == -9"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 204,
        "completion_tokens": 297
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]",
                "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]",
                "assert minPath([[1, 2], [3, 4]], 2) == [1, 2]",
                "assert minPath([[1, 2], [4, 3]], 4) == [1, 2, 1, 2]",
                "assert minPath([[10, 15, 20], [5, 1, 25], [30, 35, 40]], 2) == [1, 5]",
                "assert minPath([[10, 15, 20], [5, 1, 25], [30, 35, 40]], 3) == [1, 5, 1]"
            ],
            "failed_tests": [
                "assert minPath([[1, 2, 3], [8, 7, 4], [9, 6, 5]], 5) == [1, 2, 3, 2, 1] (AssertionError: )",
                "assert minPath([[1]], 1) == [1] (ValueError: min() arg is an empty sequence)"
            ]
        },
        "prompt_tokens": 478,
        "completion_tokens": 667
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": true,
        "test_results": {
            "passed_tests": [],
            "failed_tests": []
        },
        "prompt_tokens": 317,
        "completion_tokens": 415
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digits(1) == 1",
                "assert digits(4) == 0",
                "assert digits(235) == 15",
                "assert digits(2468) == 0",
                "assert digits(357) == 105",
                "assert digits(123456789) == 945",
                "assert digits(1) == 1",
                "assert digits(2) == 0",
                "assert digits(333) == 27",
                "assert digits(2222) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 153,
        "completion_tokens": 322
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[[]]') == True",
                "assert is_nested('[]]]]]]][[[[[]') == False",
                "assert is_nested('[][]') == False",
                "assert is_nested('[]') == False",
                "assert is_nested('[[][]]') == True",
                "assert is_nested('[[]][[') == True",
                "assert is_nested('') == False",
                "assert is_nested('[[[[]]]]') == True",
                "assert is_nested('[][[]][[][]]') == True",
                "assert is_nested(']]][[[') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 215,
        "completion_tokens": 264
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 14",
                "assert sum_squares([1, 4, 9]) == 98",
                "assert sum_squares([1, 3, 5, 7]) == 84",
                "assert sum_squares([1.4, 4.2, 0]) == 29",
                "assert sum_squares([-2.4, 1, 1]) == 6",
                "assert sum_squares([]) == 0",
                "assert sum_squares([-2, -1, 0]) == 5",
                "assert sum_squares([0, 1, 2]) == 5",
                "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 385",
                "assert sum_squares([100, 200, 300]) == 140000"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 239,
        "completion_tokens": 324
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
                "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
                "assert check_if_last_char_is_a_letter(\"\") == False",
                "assert check_if_last_char_is_a_letter(\"a\") == True",
                "assert check_if_last_char_is_a_letter(\" \") == False",
                "assert check_if_last_char_is_a_letter(\"   a\") == True",
                "assert check_if_last_char_is_a_letter(\"a   \") == False",
                "assert check_if_last_char_is_a_letter(\"Hello, world!\") == False",
                "assert check_if_last_char_is_a_letter(\"Hello, world! a\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 219,
        "completion_tokens": 302
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1, 2, 4, 3, 5]) == 3",
                "assert can_arrange([1, 2, 3]) == -1",
                "assert can_arrange([1, 3, 5, 7, 9, 8]) == 5",
                "assert can_arrange([2, 1, 3, 4, 5]) == 1",
                "assert can_arrange([-3, -1, 0, -2, 1]) == 3",
                "assert can_arrange([1]) == -1",
                "assert can_arrange([]) == -1",
                "assert can_arrange([1, 3, 5, 4, 6, 7, 8]) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 185,
        "completion_tokens": 363
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([2, -4, 1, -3, 5, 7]) == (-3, 1)",
                "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
                "assert largest_smallest_integers([-2, -4, -1, -3, -5, -7]) == (-1, None)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([0, 2, 4, 1]) == (None, 1)",
                "assert largest_smallest_integers([0, -2, -4, -1]) == (-1, None)",
                "assert largest_smallest_integers([0, 0, 0]) == (None, None)",
                "assert largest_smallest_integers([5]) == (None, 5)",
                "assert largest_smallest_integers([-5]) == (-5, None)",
                "assert largest_smallest_integers([-2, 0, 3, -4, 1, 5]) == (-2, 1)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 220,
        "completion_tokens": 350
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(\"4.5\", 3) == \"4.5\"",
                "assert compare_one(-1, 1) == 1",
                "assert compare_one(1, \"2,3\") == \"2,3\"",
                "assert compare_one(\"7,8\", \"7,7\") == \"7,8\"",
                "assert compare_one(3.5, 2) == 3.5",
                "assert compare_one(\"1\", 1) == None",
                "assert compare_one(2.5, 2.5) == None",
                "assert compare_one(-1, -2) == -1",
                "assert compare_one(1000000, \"999999,9\") == 1000000",
                "assert compare_one(1, 2.5) == 2.5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 223,
        "completion_tokens": 475
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(2) == False",
                "assert is_equal_to_sum_even(4) == False",
                "assert is_equal_to_sum_even(20) == True",
                "assert is_equal_to_sum_even(15) == False",
                "assert is_equal_to_sum_even(25) == False",
                "assert is_equal_to_sum_even(1000) == True",
                "assert is_equal_to_sum_even(1001) == False"
            ],
            "failed_tests": [
                "assert is_equal_to_sum_even(10) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 159,
        "completion_tokens": 352
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(1) == 1",
                "assert special_factorial(2) == 2",
                "assert special_factorial(3) == 12",
                "assert special_factorial(4) == 288"
            ],
            "failed_tests": [
                "assert special_factorial(5) == 2880 (AssertionError: )",
                "assert special_factorial(6) == 34560 (AssertionError: )"
            ]
        },
        "prompt_tokens": 177,
        "completion_tokens": 324
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"Example\") == \"Example\"",
                "assert fix_spaces(\"Example 1\") == \"Example_1\"",
                "assert fix_spaces(\" Example 2\") == \"_Example_2\"",
                "assert fix_spaces(\"Example   3\") == \"Example-3\"",
                "assert fix_spaces(\"Example  4\") == \"Example__4\"",
                "assert fix_spaces(\"A B  C   D\") == \"A_B__C-D\"",
                "assert fix_spaces(\"\") == \"\"",
                "assert fix_spaces(\"   \") == \"-\""
            ],
            "failed_tests": [
                "assert fix_spaces(\"Example   has    many     spaces\") == \"Example-has--many---spaces\" (AssertionError: )",
                "assert fix_spaces(\"  \") == \"__\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 188,
        "completion_tokens": 315
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"example.txt\") == 'Yes'",
                "assert file_name_check(\"1example.dll\") == 'No'",
                "assert file_name_check(\"program.exe\") == 'Yes'",
                "assert file_name_check(\"library.dll\") == 'Yes'",
                "assert file_name_check(\"file1234.txt\") == 'No'",
                "assert file_name_check(\"my.file.txt\") == 'No'",
                "assert file_name_check(\".txt\") == 'No'",
                "assert file_name_check(\"document.pdf\") == 'No'",
                "assert file_name_check(\"Document.txt\") == 'Yes'",
                "assert file_name_check(\"file123.txt\") == 'Yes'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 296,
        "completion_tokens": 270
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([]) == 0",
                "assert sum_squares([0, 0, 0, 0, 0]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 252,
        "completion_tokens": 474
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"This is a test\") == \"is\"",
                "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
                "assert words_in_sentence(\"hello\") == \"hello\"",
                "assert words_in_sentence(\"I a I a I\") == \"\""
            ],
            "failed_tests": [
                "assert words_in_sentence(\"by day she sells sea shells\") == \"by day she sea\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 229,
        "completion_tokens": 261
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"1/6\", \"2/1\") == False",
                "assert simplify(\"7/10\", \"10/2\") == False",
                "assert simplify(\"2/4\", \"2/1\") == True",
                "assert simplify(\"3/4\", \"2/3\") == False",
                "assert simplify(\"100/200\", \"200/100\") == True",
                "assert simplify(\"100/100\", \"100/100\") == True",
                "assert simplify(\"1/1\", \"1/3\") == False",
                "assert simplify(\"2/3\", \"2/3\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 237,
        "completion_tokens": 316
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([12, 34, 23, 45]) == [12, 23, 34, 45]",
                "assert order_by_points([0, 10, 20, 110]) == [0, 10, 20, 110]",
                "assert order_by_points([9, 99, 999, 1]) == [1, 9, 99, 999]",
                "assert order_by_points([]) == []",
                "assert order_by_points([5, 5, 5, 5]) == [5, 5, 5, 5]"
            ],
            "failed_tests": [
                "assert order_by_points([-12, -34, -23, -45]) == [-12, -23, -34, -45] (AssertionError: )",
                "assert order_by_points([12, -34, 23, -45]) == [-34, 12, 23, -45] (AssertionError: )",
                "assert order_by_points([21, 12, 3, 30]) == [3, 12, 21, 30] (AssertionError: )"
            ]
        },
        "prompt_tokens": 197,
        "completion_tokens": 351
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([]) == 0",
                "assert specialFilter([2, 4, 6, 8, 10, 12]) == 0",
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2",
                "assert specialFilter([-11, -13, -15, -17, -19]) == 0",
                "assert specialFilter([12, 14, 16, 18, 20]) == 0",
                "assert specialFilter([30, 50, 70, 90]) == 0",
                "assert specialFilter([1331, 1571, 1979, 3153]) == 4",
                "assert specialFilter([10, 11, 13, 15]) == 3",
                "assert specialFilter([999999999]) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 201,
        "completion_tokens": 401
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(1) == 0",
                "assert get_max_triples(3) == 0",
                "assert get_max_triples(5) == 1",
                "assert get_max_triples(6) > 0"
            ],
            "failed_tests": [
                "assert get_max_triples(4) == 0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 247,
        "completion_tokens": 566
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Pluto\", \"Vulcan\") == ()",
                "assert bf(\"Mercury\", \"Jupiter\") == (\"Venus\", \"Earth\", \"Mars\")",
                "assert bf(\"Mercury\", \"Neptune\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")",
                "assert bf(\"Pluto\", \"Mars\") == ()"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 293,
        "completion_tokens": 336
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([\"hello\", \"world\", \"in\", \"a\", \"frame\"]) == [\"in\"]",
                "assert sorted_list_sum([\"even\", \"word\", \"test\", \"list\"]) == [\"even\", \"list\", \"test\", \"word\"]",
                "assert sorted_list_sum([]) == []",
                "assert sorted_list_sum([\"duplicate\", \"test\", \"test\", \"words\"]) == [\"test\", \"test\"]",
                "assert sorted_list_sum([\"go\", \"be\", \"do\", \"it\"]) == [\"be\", \"do\", \"go\", \"it\"]",
                "assert sorted_list_sum([\"a\", \"ab\", \"abc\", \"abcd\"]) == [\"ab\", \"abcd\"]"
            ],
            "failed_tests": [
                "assert sorted_list_sum([\"odd\", \"words\", \"only\"]) == [] (AssertionError: )",
                "assert sorted_list_sum([\"dog\", \"cat\", \"elephant\", \"bee\", \"ant\"]) == [\"ant\", \"bee\", \"dog\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 269,
        "completion_tokens": 287
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(7, 34, 12) == 34",
                "assert x_or_y(15, 8, 5) == 5",
                "assert x_or_y(2, 10, 20) == 10",
                "assert x_or_y(97, 1, 2) == 1",
                "assert x_or_y(100, 3, 4) == 4",
                "assert x_or_y(1, 5, 6) == 6",
                "assert x_or_y(3, 10, 10) == 10"
            ],
            "failed_tests": [
                "assert x_or_y(-7, 8, 9) == 9 (AssertionError: )"
            ]
        },
        "prompt_tokens": 168,
        "completion_tokens": 275
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([1, 3, 2, 0]) == 10",
                "assert double_the_difference([-1, -2, 0]) == 0",
                "assert double_the_difference([9, -2]) == 81",
                "assert double_the_difference([0]) == 0",
                "assert double_the_difference([]) == 0",
                "assert double_the_difference([1, 5, 7]) == 1 + 25 + 49",
                "assert double_the_difference([2, 4, 6]) == 0",
                "assert double_the_difference([1.5, 2, 3.5, 4]) == 0",
                "assert double_the_difference([10, -3, 3, 4.5]) == 9"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 219,
        "completion_tokens": 319
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]",
                "assert compare([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) == [1, 1, 1, 1, 1]",
                "assert compare([-1, -2, -3, -4, -5], [-5, -4, -3, -2, -1]) == [4, 2, 0, 2, 4]",
                "assert compare([10, 20, 30, 40, 50], [10, 25, 30, 35, 50]) == [0, 5, 0, 5, 0]",
                "assert compare([0, 0, 0, 0, 0], [0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]",
                "assert compare([-10, 0, 10, 20, -30], [-5, 0, 15, 25, -25]) == [5, 0, 5, 5, 5]",
                "assert compare([100], [90]) == [10]",
                "assert compare([1000, 2000, 3000], [1000, 2500, 2000]) == [0, 500, 1000]",
                "assert compare([], []) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 312,
        "completion_tokens": 431
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('Data', ['Loader', 'PROCESSOR', 'Visualizer']) == 'Data.PROCESSOR'",
                "assert Strongest_Extension('Network', ['Node', 'Edge', 'Graph']) == 'Network.Node'",
                "assert Strongest_Extension('', ['alpha', 'BETA', 'gamma']) == '.BETA'",
                "assert Strongest_Extension('Optimizer', ['gradientDescent', 'ADAM', 'RMSprop']) == 'Optimizer.ADAM'",
                "assert Strongest_Extension('Single', ['OnlyOne']) == 'Single.OnlyOne'",
                "assert Strongest_Extension('Special', ['_private', 'CamelCase', '__magic__']) == 'Special.CamelCase'",
                "assert Strongest_Extension('Class1', ['Ext1', 'Ext2', '3xt3']) == 'Class1.Ext1'",
                "assert Strongest_Extension('', ['Solo']) == '.Solo'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('EmptyClass', []) == 'EmptyClass' (IndexError: list index out of range)",
                "assert Strongest_Extension('Model', ['ConvNet', 'ResNet', 'Inception']) == 'Model.ConvNet' (AssertionError: )"
            ]
        },
        "prompt_tokens": 359,
        "completion_tokens": 392
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"hi\", \"hello\") == False",
                "assert cycpattern_check(\"\", \"\") == True",
                "assert cycpattern_check(\"a\", \"b\") == False",
                "assert cycpattern_check(\"\", \"abc\") == False",
                "assert cycpattern_check(\"himenss\", \"simen\") == True",
                "assert cycpattern_check(\"abcd\", \"abd\") == False",
                "assert cycpattern_check(\"efef\", \"eeff\") == False",
                "assert cycpattern_check(\"abc\", \"\") == True",
                "assert cycpattern_check(\"abab\", \"baa\") == True",
                "assert cycpattern_check(\"a\", \"a\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 211,
        "completion_tokens": 375
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(2468) == (4, 0)",
                "assert even_odd_count(13579) == (0, 5)",
                "assert even_odd_count(1234) == (2, 2)",
                "assert even_odd_count(2) == (1, 0)",
                "assert even_odd_count(3) == (0, 1)",
                "assert even_odd_count(-2468) == (4, 0)",
                "assert even_odd_count(-13579) == (0, 5)",
                "assert even_odd_count(-1234) == (2, 2)",
                "assert even_odd_count(0) == (1, 0)",
                "assert even_odd_count(1234567890) == (5, 5)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 147,
        "completion_tokens": 255
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(1) == 'i'",
                "assert int_to_mini_roman(5) == 'v'",
                "assert int_to_mini_roman(8) == 'viii'",
                "assert int_to_mini_roman(4) == 'iv'",
                "assert int_to_mini_roman(35) == 'xxxv'",
                "assert int_to_mini_roman(90) == 'xc'",
                "assert int_to_mini_roman(444) == 'cdxliv'",
                "assert int_to_mini_roman(1000) == 'm'",
                "assert int_to_mini_roman(388) == 'ccclxxxviii'",
                "assert int_to_mini_roman(166) == 'clxvi'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 183,
        "completion_tokens": 339
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(6, 8, 10) == True",
                "assert right_angle_triangle(5, 3, 4) == True",
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(1, 2, 3) == False",
                "assert right_angle_triangle(5.0, 12.0, 13.0) == True",
                "assert right_angle_triangle(30000, 40000, 50000) == True",
                "assert right_angle_triangle(0, 4, 5) == False",
                "assert right_angle_triangle(6, 8, 11) == False"
            ],
            "failed_tests": [
                "assert right_angle_triangle(0, 0, 0) == False (AssertionError: )",
                "assert right_angle_triangle(-3, -4, -5) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 190,
        "completion_tokens": 379
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
                "assert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"",
                "assert find_max([\"zebra\", \"dog\", \"duck\", \"dove\"]) == \"zebra\"",
                "assert find_max([\"dog\", \"duck\", \"dove\", \"zebra\"]) == \"zebra\"",
                "assert find_max([\"z\", \"b\", \"y\", \"a\"]) == \"a\"",
                "assert find_max([\"single\"]) == \"single\"",
                "assert find_max([\"abc\", \"bca\", \"cab\"]) == \"abc\""
            ],
            "failed_tests": [
                "assert find_max([]) == \"\" (IndexError: list index out of range)"
            ]
        },
        "prompt_tokens": 202,
        "completion_tokens": 301
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(5, 5, 5) == [10, 0]",
                "assert eat(3, 4, 10) == [7, 6]",
                "assert eat(2, 10, 5) == [7, 0]",
                "assert eat(10, 5, 0) == [10, 0]",
                "assert eat(10, 0, 10) == [10, 10]",
                "assert eat(0, 0, 0) == [0, 0]",
                "assert eat(0, 5, 10) == [5, 5]",
                "assert eat(1000, 1000, 1000) == [2000, 0]",
                "assert eat(500, 500, 500) == [1000, 0]",
                "assert eat(0, 1000, 500) == [500, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 359,
        "completion_tokens": 336
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['+'], [10, 5]) == 15",
                "assert do_algebra(['+', '-'], [1, 2, 3]) == 0",
                "assert do_algebra(['-'], [10, 5]) == 5",
                "assert do_algebra(['*', '//'], [4, 2, 8]) == 1",
                "assert do_algebra(['//'], [10, 5]) == 2",
                "assert do_algebra(['**'], [2, 5]) == 32",
                "assert do_algebra(['*'], [10, 5]) == 50"
            ],
            "failed_tests": [
                "assert do_algebra(['*', '*'], [2, 3, 4, 5]) == 120 (AssertionError: )",
                "assert do_algebra(['+', '+'], [1, 2, 3, 4]) == 10 (AssertionError: )",
                "assert do_algebra(['+', '-', '*', '//', '**'], [3, 5, 2, 6, 2, 3]) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 289,
        "completion_tokens": 505
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"1234\") == \"4321\"",
                "assert solve(\"abcd\") == \"ABCD\"",
                "assert solve(\"ABCD\") == \"abcd\"",
                "assert solve(\"AbCd\") == \"aBcD\"",
                "assert solve(\"\") == \"\"",
                "assert solve(\"a\") == \"A\"",
                "assert solve(\"A\") == \"a\"",
                "assert solve(\"1\") == \"1\"",
                "assert solve(\"Abc123\") == \"aBC123\"",
                "assert solve(\"123Abc\") == \"123aBC\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 189,
        "completion_tokens": 375
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('') is None",
                "assert string_to_md5('123') == '202cb962ac59075b964b07152d234b70'"
            ],
            "failed_tests": [
                "assert string_to_md5('This is a very long string to test the md5 hash function with more characters') == 'd2ddea18f00665ce8623e36bd4e3c7c5' (AssertionError: )",
                "assert string_to_md5('  trimmed  ') == '3d5293e89200d4b3ed9592914939b342' (AssertionError: )",
                "assert string_to_md5('     ') == '7215ee9c7d9dc229d2921a40e899ec5f' (AssertionError: )"
            ]
        },
        "prompt_tokens": 158,
        "completion_tokens": 279
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(8, 2) == [2, 4, 6, 8]",
                "assert generate_integers(5, 5) == []",
                "assert generate_integers(4, 4) == [4]",
                "assert generate_integers(2, 8) == [2, 4, 6, 8]",
                "assert generate_integers(999999, 1000001) == []",
                "assert generate_integers(1, 8) == [2, 4, 6, 8]",
                "assert generate_integers(2, 9) == [2, 4, 6, 8]",
                "assert generate_integers(10, 1) == [2, 4, 6, 8]"
            ],
            "failed_tests": [
                "assert generate_integers(0, 6) == [0, 2, 4, 6] (AssertionError: )"
            ]
        },
        "prompt_tokens": 186,
        "completion_tokens": 435
    }
]