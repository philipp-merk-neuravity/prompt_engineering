[
    {
        "task_id": "HumanEval/0",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
                "assert has_close_elements([1.0, 1.4, 2.0], 0.5) == True",
                "assert has_close_elements([-1.0, -1.2, -2.0], 0.3) == True",
                "assert has_close_elements([-1.0, 0.0, 1.0], 1.0) == False",
                "assert has_close_elements([], 0.5) == False",
                "assert has_close_elements([2.0, 2.0, 2.0], 0.1) == True",
                "assert has_close_elements([1.0], 0.5) == False",
                "assert has_close_elements([1.0, 2.0, 3.0], 0.0001) == False",
                "assert has_close_elements([1.0, 100.0, 200.0], 100.1) == True",
                "assert has_close_elements([1.0, 1.4999, 2.0], 0.5) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 409
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('()') == ['()']",
                "assert separate_paren_groups('(())') == ['(())']",
                "assert separate_paren_groups('()()') == ['()', '()']",
                "assert separate_paren_groups('(())()') == ['(())', '()']",
                "assert separate_paren_groups(' ( ) ( ( ) ) ') == ['()', '(())']",
                "assert separate_paren_groups('((()))(())()') == ['((()))', '(())', '()']",
                "assert separate_paren_groups('') == []",
                "assert separate_paren_groups('(((())))') == ['(((())))']",
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 197,
        "completion_tokens": 257
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(150.0) == 0.0",
                "assert truncate_number(0.123) == 0.123",
                "assert truncate_number(0.0000001) == 0.0000001"
            ],
            "failed_tests": [
                "assert truncate_number(1234.5678) == 0.5678 (AssertionError: )",
                "assert truncate_number(99.9999) == 0.9999 (AssertionError: )",
                "assert truncate_number(10.0001) == 0.0001 (AssertionError: )",
                "assert truncate_number(100.0000001) == 0.0000001 (AssertionError: )"
            ]
        },
        "prompt_tokens": 167,
        "completion_tokens": 235
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert below_zero([10, 20, 30]) == False",
                "assert below_zero([50, -30, 20]) == False",
                "assert below_zero([-10]) == True",
                "assert below_zero([10, 20, -15, -20]) == True",
                "assert below_zero([5, -3, -2]) == False",
                "assert below_zero([10, -5, -5]) == False",
                "assert below_zero([3, -4, 2, -3]) == True",
                "assert below_zero([]) == False",
                "assert below_zero([10, -20, 15]) == True"
            ],
            "failed_tests": [
                "assert below_zero([5, -10, 5, -1, 2]) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 201,
        "completion_tokens": 300
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1, 2, 3, 4]) == 1.0",
                "assert mean_absolute_deviation([1.5, 2.5, 3.5, 4.5]) == 1.0",
                "assert mean_absolute_deviation([-1, -2, -3, -4]) == 1.0",
                "assert mean_absolute_deviation([-2, -1, 0, 1, 2]) == 1.2",
                "assert mean_absolute_deviation([5]) == 0.0",
                "assert mean_absolute_deviation([2, 2, 2, 2]) == 0.0",
                "assert mean_absolute_deviation([-1, 0, 1]) == 0.6666666666666666",
                "assert mean_absolute_deviation([0.001, 0.002, 0.003]) == 0.0006666666666666666",
                "assert mean_absolute_deviation([1000000, 1000001, 1000002]) == 0.6666666666666666"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([10, 20, 30, 40, 50]) == 14.0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 199,
        "completion_tokens": 358
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([], 4) == []",
                "assert intersperse([1], 4) == [1]",
                "assert intersperse([1, 2], 4) == [1, 4, 2]",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
                "assert intersperse([-1, -2, -3], 4) == [-1, 4, -2, 4, -3]",
                "assert intersperse([1, 2, 3], -4) == [1, -4, 2, -4, 3]",
                "assert intersperse([1, 2, 3, 4, 5], 0) == [1, 0, 2, 0, 3, 0, 4, 0, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 174,
        "completion_tokens": 368
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('()') == [1]",
                "assert parse_nested_parens('(())') == [2]",
                "assert parse_nested_parens('((()))') == [3]",
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('(()()) () ((())) (((())))') == [2, 1, 3, 4]",
                "assert parse_nested_parens('    ') == []",
                "assert parse_nested_parens('') == []",
                "assert parse_nested_parens('(()) (()) (())') == [2, 2, 2]",
                "assert parse_nested_parens('(()()(()))') == [3]",
                "assert parse_nested_parens('(()()) ((())) (((()))) (()) ()') == [2, 3, 4, 2, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 194,
        "completion_tokens": 336
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring([], 'a') == []",
                "assert filter_by_substring(['xyz', 'bcd', 'efg'], 'a') == []",
                "assert filter_by_substring(['abc', 'bac', 'ca'], 'a') == ['abc', 'bac', 'ca']",
                "assert filter_by_substring(['abc', 'xyz', 'bac', 'def'], 'a') == ['abc', 'bac']",
                "assert filter_by_substring(['abc', 'def', 'ghi'], '') == ['abc', 'def', 'ghi']",
                "assert filter_by_substring(['hello world', 'hi', 'good morning'], ' ') == ['hello world', 'good morning']",
                "assert filter_by_substring(['hello!', 'world', 'good morning', 'hi!'], '!') == ['hello!', 'hi!']"
            ],
            "failed_tests": [
                "assert filter_by_substring(['hello', 'world', 'hel', 'low'], 'low') == ['hello', 'low'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 175,
        "completion_tokens": 384
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([]) == (0, 1), \"Test with an empty list failed.\"",
                "assert sum_product([5]) == (5, 5), \"Test with a list of one positive integer failed.\"",
                "assert sum_product([1, 2, 3, 4]) == (10, 24), \"Test with a list of multiple positive integers failed.\"",
                "assert sum_product([0, 1, 2, 3]) == (6, 0), \"Test with a list that includes a zero failed.\"",
                "assert sum_product([0, -1, -2, -3]) == (-6, 0), \"Test with a list that includes both zero and negative integers failed.\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 192,
        "completion_tokens": 285
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]",
                "assert rolling_max([1, 3, 2, 5, 4, 1]) == [1, 3, 3, 5, 5, 5]",
                "assert rolling_max([7]) == [7]",
                "assert rolling_max([-1, -3, -2, -5, -4]) == [-1, -1, -1, -1, -1]",
                "assert rolling_max([-2, 3, 1, -1, 5, -3, 4]) == [-2, 3, 3, 3, 5, 5, 5]",
                "assert rolling_max([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 182,
        "completion_tokens": 329
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome(\"a\") == True",
                "assert make_palindrome(\"\") == \"\"",
                "assert make_palindrome(\"racecar\") == \"racecar\"",
                "assert is_palindrome(\"hello\") == False",
                "assert make_palindrome(\"a\") == \"a\"",
                "assert make_palindrome(\"cat\") == \"catac\"",
                "assert is_palindrome(\"\") == True",
                "assert is_palindrome(\"Madam\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 224,
        "completion_tokens": 515
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('000', '000') == '000'",
                "assert string_xor('101010', '010101') == '111111'",
                "assert string_xor('', '') == ''",
                "assert string_xor('110010101011', '001101010101') == '111111111110'",
                "assert string_xor('0101', '1010') == '1111'",
                "assert string_xor('111', '111') == '000'",
                "assert string_xor('1111', '0000') == '1111'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 158,
        "completion_tokens": 243
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest([]) is None",
                "assert longest(['hello']) == 'hello'",
                "assert longest(['a', 'b', 'c']) == 'a'",
                "assert longest(['short', 'longer', 'longest']) == 'longest'",
                "assert longest(['', '', 'not empty']) == 'not empty'",
                "assert longest(['', '', '']) == ''",
                "assert longest(['longest', 'short', 'tiny']) == 'longest'",
                "assert longest(['short', 'tiny', 'longest']) == 'longest'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 184,
        "completion_tokens": 327
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(3, 5) == 1",
                "assert greatest_common_divisor(5, 15) == 5",
                "assert greatest_common_divisor(24, 36) == 12",
                "assert greatest_common_divisor(17, 17) == 17",
                "assert greatest_common_divisor(0, 9) == 9",
                "assert greatest_common_divisor(10, 0) == 10",
                "assert greatest_common_divisor(0, 0) == 0",
                "assert greatest_common_divisor(-24, 36) == 12"
            ],
            "failed_tests": [
                "assert greatest_common_divisor(24, -36) == 12 (AssertionError: )",
                "assert greatest_common_divisor(-24, -36) == 12 (AssertionError: )"
            ]
        },
        "prompt_tokens": 152,
        "completion_tokens": 289
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
                "assert all_prefixes('a') == ['a']",
                "assert all_prefixes('') == []",
                "assert all_prefixes('ab c') == ['a', 'ab', 'ab ', 'ab c']",
                "assert all_prefixes('aaa') == ['a', 'aa', 'aaa']",
                "assert all_prefixes('123') == ['1', '12', '123']",
                "assert all_prefixes('a1b2') == ['a', 'a1', 'a1b', 'a1b2']",
                "assert all_prefixes('a!@') == ['a', 'a!', 'a!@']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 141,
        "completion_tokens": 210
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(0) == '0'",
                "assert string_sequence(5) == '0 1 2 3 4 5'",
                "assert string_sequence(1) == '0 1'",
                "assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'",
                "assert string_sequence(-1) == ''"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 150,
        "completion_tokens": 200
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('abcABC') == 3",
                "assert count_distinct_characters('banana') == 3",
                "assert count_distinct_characters('') == 0",
                "assert count_distinct_characters('aaaaa') == 1",
                "assert count_distinct_characters('AaBbCc') == 3",
                "assert count_distinct_characters('\u00e1bcABC') == 4"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 152,
        "completion_tokens": 199
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
                "assert parse_music('o|') == [2]",
                "assert parse_music('.| .|') == [1, 1]",
                "assert parse_music('     ') == []",
                "assert parse_music('o o') == [4, 4]",
                "assert parse_music(' o o| .| ') == [4, 2, 1]",
                "assert parse_music('') == []",
                "assert parse_music('o| o|') == [2, 2]",
                "assert parse_music('o o| .|') == [4, 2, 1]",
                "assert parse_music('.|') == [1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 254,
        "completion_tokens": 289
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('abc', 'abc') == 1",
                "assert how_many_times('a', 'abc') == 0",
                "assert how_many_times('abc', 'd') == 0",
                "assert how_many_times('aaaa', 'aa') == 3",
                "assert how_many_times('aaa', 'a') == 3",
                "assert how_many_times('abc', 'a') == 1",
                "assert how_many_times('aaaaaa', 'aaa') == 4",
                "assert how_many_times('abcabc', 'abc') == 2",
                "assert how_many_times('abcabcabc', 'abc') == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 170,
        "completion_tokens": 447
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('seven') == 'seven'",
                "assert sort_numbers('one two three') == 'one two three'",
                "assert sort_numbers('nine eight seven') == 'seven eight nine'",
                "assert sort_numbers('four one nine two') == 'one two four nine'",
                "assert sort_numbers('five five two two') == 'two two five five'",
                "assert sort_numbers('nine eight seven six five four three two one zero') == 'zero one two three four five six seven eight nine'",
                "assert sort_numbers('') == ''",
                "assert sort_numbers('eight five four nine one seven six three two zero') == 'zero one two three four five six seven eight nine'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 187,
        "completion_tokens": 205
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.1]) == (2.0, 2.1)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([1.001, 1.002, 2.0, 3.0]) == (1.001, 1.002)",
                "assert find_closest_elements([0.1, 5.0, 5.1, 10.0]) == (5.0, 5.1)",
                "assert find_closest_elements([2.0, 2.0, 2.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([-1.0, 0.0, 1.0, 2.0]) == (-1.0, 0.0)",
                "assert find_closest_elements([0.0001, 0.0002, 1.0, 2.0]) == (0.0001, 0.0002)"
            ],
            "failed_tests": [
                "assert find_closest_elements([-2.0, -1.0, 0.0, 1.0, 2.0]) == (-1.0, 0.0) (AssertionError: )",
                "assert find_closest_elements([-5.0, -4.5, -4.0, -3.5]) == (-4.5, -4.0) (AssertionError: )"
            ]
        },
        "prompt_tokens": 248,
        "completion_tokens": 486
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([1.5, 2.5, 3.5, 4.5, 5.5]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([1.0, 1.0, 1.0, 2.0]) == [0.0, 0.0, 0.0, 1.0]",
                "assert rescale_to_unit([0.123456789, 0.987654321]) == [0.0, 1.0]"
            ],
            "failed_tests": [
                "assert rescale_to_unit([-5.0, -3.0, 0.0, 2.0, 4.0]) == [0.0, 0.25, 0.5, 0.75, 1.0] (AssertionError: )",
                "assert rescale_to_unit([2.0, 2.0, 2.0, 2.0]) == [0.0, 0.0, 0.0, 0.0] (ZeroDivisionError: float division by zero)"
            ]
        },
        "prompt_tokens": 205,
        "completion_tokens": 503
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_integers([1, 2.5, 'string', 3]) == [1, 3]",
                "assert filter_integers([2.5, 'hello', [], {}]) == []",
                "assert filter_integers([10, 20, 30]) == [10, 20, 30]",
                "assert filter_integers([]) == []",
                "assert filter_integers([1+2j, 3+4j, 5]) == [5]",
                "assert filter_integers([None, 1, 'text', 2]) == [1, 2]",
                "assert filter_integers([[], {}, [1, 2], {'a': 1}]) == []",
                "assert filter_integers(['1', '2.5', 3, 4.5]) == [3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 173,
        "completion_tokens": 326
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('') == 0",
                "assert strlen('a') == 1",
                "assert strlen('hello') == 5",
                "assert strlen('hello world') == 11",
                "assert strlen('1234567890') == 10",
                "assert strlen('HelloWorld') == 10",
                "assert strlen('hello\\nworld') == 11",
                "assert strlen('hello\\tworld') == 11"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 125,
        "completion_tokens": 173
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(13) == 1",
                "assert largest_divisor(10) == 5",
                "assert largest_divisor(15) == 5",
                "assert largest_divisor(100) == 50",
                "assert largest_divisor(2) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 134,
        "completion_tokens": 168
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(7) == [7]",
                "assert factorize(15) == [3, 5]",
                "assert factorize(49) == [7, 7]",
                "assert factorize(100) == [2, 2, 5, 5]",
                "assert factorize(1) == []",
                "assert factorize(360) == [2, 2, 2, 3, 3, 5]",
                "assert factorize(46) == [2, 23]",
                "assert factorize(27) == [3, 3, 3]",
                "assert factorize(2) == [2]",
                "assert factorize(30) == [2, 3, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 208,
        "completion_tokens": 323
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([1, 2, 2, 3, 3, 3, 4]) == [1, 4]",
                "assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]",
                "assert remove_duplicates([]) == []",
                "assert remove_duplicates([5, 5, 5, 5]) == []",
                "assert remove_duplicates([-1, -2, -2, -3, -1]) == [-3]",
                "assert remove_duplicates([-1, 1, 2, -1, 2, 3]) == [1, 3]",
                "assert remove_duplicates([2, 3, 2, 4, 5, 3]) == [4, 5]",
                "assert remove_duplicates([7]) == [7]",
                "assert remove_duplicates([8, 8, 8, 9, 8]) == [9]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 166,
        "completion_tokens": 340
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('Hello') == 'hELLO'",
                "assert flip_case('WORLD') == 'world'",
                "assert flip_case('python') == 'PYTHON'",
                "assert flip_case('Python3.8!') == 'pYTHON3.8!'",
                "assert flip_case('') == ''",
                "assert flip_case('Hello World') == 'hELLO wORLD'",
                "assert flip_case('p') == 'P'",
                "assert flip_case('Q') == 'q'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 130,
        "completion_tokens": 188
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate([]) == ''",
                "assert concatenate(['hello']) == 'hello'",
                "assert concatenate(['a', 'b', 'c']) == 'abc'",
                "assert concatenate(['Python ', 'is ', 'awesome!']) == 'Python is awesome!'",
                "assert concatenate(['1', '2', '3']) == '123'",
                "assert concatenate(['first', '', 'last']) == 'firstlast'",
                "assert concatenate(['special', '@', 'characters']) == 'special@characters'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 139,
        "completion_tokens": 183
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['xyz', 'bcd', 'cde'], 'a') == []",
                "assert filter_by_prefix(['abc', 'array', 'apple'], 'a') == ['abc', 'array', 'apple']",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']",
                "assert filter_by_prefix(['a', 'b', 'c'], 'longprefix') == []",
                "assert filter_by_prefix(['abc', 'bcd', 'cde'], '') == ['abc', 'bcd', 'cde']",
                "assert filter_by_prefix(['abc', 'abcde', 'cde', 'abc'], 'abc') == ['abc', 'abcde', 'abc']",
                "assert filter_by_prefix(['apple', 'banana', 'apricot', 'berry'], 'a') == ['apple', 'apricot']",
                "assert filter_by_prefix(['Apple', 'apricot', 'Banana'], 'a') == ['apricot']",
                "assert filter_by_prefix(['Apple', 'apricot', 'Banana'], 'A') == ['Apple']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 169,
        "completion_tokens": 457
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 2, -4, 5, 6, 0]) == [2, 5, 6]",
                "assert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert get_positive([-1, -2, -3, -4, -5]) == []",
                "assert get_positive([]) == []",
                "assert get_positive([0]) == []",
                "assert get_positive([0, 1, 2, 3]) == [1, 2, 3]",
                "assert get_positive([-1, -2, -3, 0]) == []",
                "assert get_positive(list(range(-50, 51))) == list(range(1, 51))"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 195,
        "completion_tokens": 241
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(11) == True",
                "assert is_prime(6) == False",
                "assert is_prime(2) == True",
                "assert is_prime(100) == False",
                "assert is_prime(1) == False",
                "assert is_prime(4) == False",
                "assert is_prime(9) == False",
                "assert is_prime(3) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 181,
        "completion_tokens": 199
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert poly([5], 0) == 5",
                "assert poly([5], 1) == 5",
                "assert poly([2, 3], 0) == 2",
                "assert poly([2, 3], 1) == 5",
                "assert poly([1, -2, 1], 1) == 0",
                "assert round(find_zero([1, 2]), 2) == -0.5",
                "assert round(find_zero([-6, 11, -6, 1]), 2) in [1.0, 2.0, 3.0]",
                "assert round(find_zero([4, 0, -1]), 2) in [-2.0, 2.0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 341,
        "completion_tokens": 395
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_third([1, 2, 3]) == [1, 2, 3]",
                "assert sort_third([]) == []",
                "assert sort_third([2, 4, 6, 2, 5, 7, 2]) == [2, 4, 6, 2, 5, 7, 2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 232,
        "completion_tokens": 421
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
                "assert unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert unique([-3, -1, -2, -3, -1]) == [-3, -2, -1]",
                "assert unique([-1, 1, 0, -1, 1]) == [-1, 0, 1]",
                "assert unique(['apple', 'banana', 'apple', 'cherry']) == ['apple', 'banana', 'cherry']",
                "assert unique([]) == []",
                "assert unique([1.1, 2.2, 3.3, 2.2, 1.1]) == [1.1, 2.2, 3.3]",
                "assert unique([True, False, True, False]) == [False, True]",
                "assert unique([(1, 2), (3, 4), (1, 2)]) == [(1, 2), (3, 4)]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 155,
        "completion_tokens": 398
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([1, 2, 3]) == 3",
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123",
                "assert max_element([-1, -2, -3, -4]) == -1",
                "assert max_element([42]) == 42",
                "assert max_element([7, 7, 7, 7, 7]) == 7",
                "assert max_element([1.5, 2.5, 3.5, 2, 3]) == 3.5",
                "assert max_element([0, 0, 0, 0]) == 0",
                "assert max_element([-1.1, -2.2, 3.3, 2.2]) == 3.3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 164,
        "completion_tokens": 342
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(10) == 0",
                "assert fizz_buzz(13) == 0",
                "assert fizz_buzz(11) == 0",
                "assert fizz_buzz(14) == 0",
                "assert fizz_buzz(78) == 2"
            ],
            "failed_tests": [
                "assert fizz_buzz(1000) == 20 (AssertionError: )",
                "assert fizz_buzz(200) == 4 (AssertionError: )",
                "assert fizz_buzz(100) == 2 (AssertionError: )",
                "assert fizz_buzz(10000) == 279 (AssertionError: )"
            ]
        },
        "prompt_tokens": 161,
        "completion_tokens": 473
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_even([1, 3, 5]) == [1, 3, 5]",
                "assert sort_even([1, 2, 3, 4]) == [1, 2, 3, 4]",
                "assert sort_even([4, 1, 2, 3]) == [2, 1, 4, 3]",
                "assert sort_even([-3, 1, -1, 2]) == [-3, 1, -1, 2]",
                "assert sort_even([5, -1, 3, 2, -3]) == [-3, -1, 3, 2, 5]",
                "assert sort_even([2, 2, 2, 3, 3]) == [2, 2, 2, 3, 3]",
                "assert sort_even([]) == []",
                "assert sort_even([1]) == [1]",
                "assert sort_even([0, 5, 0, -1, 2]) == [0, 5, 0, -1, 2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 205,
        "completion_tokens": 341
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode_cyclic(\"hi\") == \"hi\"",
                "assert decode_cyclic(\"bca\") == \"abc\"",
                "assert decode_cyclic(\"hi\") == \"hi\"",
                "assert decode_cyclic(\"\") == \"\""
            ],
            "failed_tests": [
                "assert encode_cyclic(\"Python\") == \"ytPhon\" (AssertionError: )",
                "assert decode_cyclic(\"ytPhon\") == \"Python\" (AssertionError: )",
                "assert encode_cyclic(\"hello\") == \"ellho\" (AssertionError: )",
                "assert decode_cyclic(\"bcaxyz\") == \"abcxyz\" (AssertionError: )",
                "assert decode_cyclic(\"ellho\") == \"hello\" (AssertionError: )",
                "assert encode_cyclic(\"abcxyz\") == \"bcaxyz\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 240,
        "completion_tokens": 460
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(1) == 2",
                "assert prime_fib(2) == 3",
                "assert prime_fib(3) == 5",
                "assert prime_fib(4) == 13",
                "assert prime_fib(5) == 89",
                "assert prime_fib(6) == 233"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 179,
        "completion_tokens": 225
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
                "assert triples_sum_to_zero([1]) == False",
                "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
                "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True",
                "assert triples_sum_to_zero([-1, -2, -3, -4]) == False",
                "assert triples_sum_to_zero([0, 0, 0]) == True",
                "assert triples_sum_to_zero([-2, -1, 0, 1, 2]) == True",
                "assert triples_sum_to_zero([]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 241,
        "completion_tokens": 358
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(0) == 0",
                "assert car_race_collision(1) == 1"
            ],
            "failed_tests": [
                "assert car_race_collision(2) == 2 (AssertionError: )",
                "assert car_race_collision(10) == 10 (AssertionError: )",
                "assert car_race_collision(5) == 5 (AssertionError: )",
                "assert car_race_collision(1000) == 1000 (AssertionError: )"
            ]
        },
        "prompt_tokens": 233,
        "completion_tokens": 168
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([-1, -2, -3]) == [0, -1, -2]",
                "assert incr_list([0, 5, -2, 3, -1]) == [1, 6, -1, 4, 0]",
                "assert incr_list([2, 2, 2]) == [3, 3, 3]",
                "assert incr_list([99]) == [100]",
                "assert incr_list([]) == []",
                "assert incr_list([10, 20, 30, 40, 50]) == [11, 21, 31, 41, 51]",
                "assert incr_list([0, 0, 0]) == [1, 1, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 190,
        "completion_tokens": 256
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([2, -2, 4, 5]) == True",
                "assert pairs_sum_to_zero([1, 2, 3, 4, 5]) == False",
                "assert pairs_sum_to_zero([-1, 1, -2, 2, 3]) == True",
                "assert pairs_sum_to_zero([0, 1, 2, 3]) == False",
                "assert pairs_sum_to_zero([-1, -2, -3, -4]) == False",
                "assert pairs_sum_to_zero([]) == False",
                "assert pairs_sum_to_zero([1]) == False",
                "assert pairs_sum_to_zero([0, 2, -2, 3]) == True",
                "assert pairs_sum_to_zero([2, 2, -2, -2]) == True",
                "assert pairs_sum_to_zero([-5, -4, 1, 2, 3]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 239,
        "completion_tokens": 338
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert change_base(10, 5) == '20'",
                "assert change_base(1, 2) == '1'",
                "assert change_base(9, 9) == '10'",
                "assert change_base(8, 3) == '22'",
                "assert change_base(7, 2) == '111'",
                "assert True",
                "assert change_base(8, 2) == '1000'",
                "assert True",
                "assert change_base(15, 4) == '33'"
            ],
            "failed_tests": [
                "assert change_base(0, 2) == '0' (AssertionError: )"
            ]
        },
        "prompt_tokens": 173,
        "completion_tokens": 415
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(0, 10) == 0",
                "assert triangle_area(10, 0) == 0",
                "assert triangle_area(0, 0) == 0",
                "assert triangle_area(4.5, 2.2) == 4.95",
                "assert triangle_area(1000, 300) == 150000"
            ],
            "failed_tests": [
                "assert triangle_area(0.1, 0.2) == 0.01 (AssertionError: )"
            ]
        },
        "prompt_tokens": 128,
        "completion_tokens": 365
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib4(10) == 104",
                "assert fib4(8) != 8",
                "assert fib4(5) == 4",
                "assert fib4(2) == 2",
                "assert fib4(3) == 0",
                "assert fib4(1) == 0",
                "assert fib4(7) == 14",
                "assert fib4(6) == 8",
                "assert fib4(4) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 253,
        "completion_tokens": 327
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([3, 1, 2, 4, 5]) == 3",
                "assert median([-5, -1, -3, -2, -4]) == -3",
                "assert median([1, 2, 2, 3, 4]) == 2",
                "assert median([42]) == 42",
                "assert median([1, 3]) == 2.0",
                "assert median([7, 7, 7, 7, 7]) == 7",
                "assert median([1.5, 2.5, 3.5, 4.5, 5.5]) == 3.5",
                "assert median([1, 2.5, 3, 4.5, 5]) == 3"
            ],
            "failed_tests": [
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 157,
        "completion_tokens": 371
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('') == True",
                "assert is_palindrome('a') == True",
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('racecar') == True",
                "assert is_palindrome('python') == False",
                "assert is_palindrome('a ba') == False",
                "assert is_palindrome('12321') == True",
                "assert is_palindrome('1a2b3') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 153,
        "completion_tokens": 246
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(3, 5) == 3",
                "assert modp(1101, 101) == 2",
                "assert modp(0, 101) == 1",
                "assert modp(3, 11) == 8",
                "assert modp(100, 101) == 1",
                "assert modp(1, 3) == 2",
                "assert modp(2, 2) == 0",
                "assert modp(1234, 101) == 2**1234 % 101"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 187,
        "completion_tokens": 355
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode_shift('a') == 'f'",
                "assert encode_shift('vwxyz') == 'abcde'",
                "assert encode_shift('') == ''",
                "assert encode_shift('abcdefghijklmnopqrstuvwxyz') == 'fghijklmnopqrstuvwxyzabcde'",
                "assert decode_shift('f') == 'a'",
                "assert decode_shift('abcde') == 'vwxyz'",
                "assert decode_shift('') == ''",
                "assert decode_shift('fghijklmnopqrstuvwxyzabcde') == 'abcdefghijklmnopqrstuvwxyz'"
            ],
            "failed_tests": [
                "assert encode_shift('hello') == 'jgnnq' (AssertionError: )",
                "assert decode_shift('jgnnq') == 'hello' (AssertionError: )"
            ]
        },
        "prompt_tokens": 172,
        "completion_tokens": 310
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('') == ''",
                "assert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'",
                "assert remove_vowels('aaaaa') == ''",
                "assert remove_vowels('aaBAA') == 'B'",
                "assert remove_vowels('zbcd') == 'zbcd'",
                "assert remove_vowels('aeiouAEIOU') == ''",
                "assert remove_vowels('a1b2c3d4e!') == '1b2c3d4!'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 204,
        "completion_tokens": 251
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 4, 10], 100) == True",
                "assert below_threshold([1, 2, 4, 100], 100) == False",
                "assert below_threshold([1, 20, 4, 10], 5) == False",
                "assert below_threshold([], 10) == True",
                "assert below_threshold([1, 2, 3], 10) == True",
                "assert below_threshold([-1, -2, -3], 0) == True",
                "assert below_threshold([-1, -2, -3], -4) == False",
                "assert below_threshold([-1, 2, 3], -2) == False",
                "assert below_threshold([5, 5, 5, 5], 6) == True",
                "assert below_threshold([5, 5, 5, 5], 5) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 161,
        "completion_tokens": 334
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(2, 3) == 5",
                "assert add(-2, -3) == -5",
                "assert add(-2, 3) == 1",
                "assert add(-3, 2) == -1",
                "assert add(0, 5) == 5",
                "assert add(0, -5) == -5",
                "assert add(0, 0) == 0",
                "assert add(1000000, 2000000) == 3000000"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 135,
        "completion_tokens": 178
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('', '') == True",
                "assert same_chars('abc', 'abc') == True",
                "assert same_chars('1a2b3c', 'c3b2a1') == True",
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('123', '321') == True",
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
                "assert same_chars('', 'abc') == False",
                "assert same_chars('eabcd', 'dddddddabc') == False",
                "assert same_chars('abcd', 'dddddddabce') == False",
                "assert same_chars('Abc', 'abc') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 222,
        "completion_tokens": 351
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib(0) == 0",
                "assert fib(1) == 1",
                "assert fib(2) == 1",
                "assert fib(3) == 2",
                "assert fib(4) == 3",
                "assert fib(5) == 5",
                "assert fib(10) == 55",
                "assert fib(8) == 21",
                "assert fib(20) == 6765"
            ],
            "failed_tests": [
                "assert fib(-1) == \"Error\" (RecursionError: maximum recursion depth exceeded in comparison)"
            ]
        },
        "prompt_tokens": 134,
        "completion_tokens": 309
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing('<') == False",
                "assert correct_bracketing('<>') == True",
                "assert correct_bracketing('<<><>>') == True",
                "assert correct_bracketing('><<>') == False",
                "assert correct_bracketing('') == True",
                "assert correct_bracketing('<<<>>>') == True",
                "assert correct_bracketing('<><><><>') == True",
                "assert correct_bracketing('<<<<') == False",
                "assert correct_bracketing('>>>>') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 174,
        "completion_tokens": 265
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 2, 4, 20]) == True",
                "assert monotonic([1, 20, 4, 10]) == False",
                "assert monotonic([4, 1, 0, -10]) == True",
                "assert monotonic([1, 1, 2, 3]) == True",
                "assert monotonic([3, 2, 2, 1]) == True",
                "assert monotonic([5, 5, 5, 5]) == True",
                "assert monotonic([1]) == True",
                "assert monotonic([]) == True",
                "assert monotonic([-10, -5, -2, -1]) == True",
                "assert monotonic([-1, -2, -5, -10]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 169,
        "completion_tokens": 281
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
                "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]",
                "assert common([10, 20, 30], [1, 2, 3]) == []",
                "assert common([], [1, 2, 3]) == []",
                "assert common([], []) == []",
                "assert common([1, 2, 3, 4], [2, 2, 4, 4]) == [2, 4]",
                "assert common([\"apple\", \"banana\", \"cherry\"], [\"banana\", \"cherry\", \"fig\"]) == [\"banana\", \"cherry\"]",
                "assert common([1, \"apple\", 3.14], [\"banana\", 2, 2.72]) == []",
                "assert common([1, 1, 1, 1], [1, 1, 1, 1]) == [1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 196,
        "completion_tokens": 356
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(2048) == 2",
                "assert largest_prime_factor(100) == 5",
                "assert largest_prime_factor(10) == 5",
                "assert largest_prime_factor(45) == 5",
                "assert largest_prime_factor(49) == 7",
                "assert largest_prime_factor(77) == 11"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 145,
        "completion_tokens": 256
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(100) == 5050",
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(10) == 55"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 176,
        "completion_tokens": 196
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"(\") == False",
                "assert correct_bracketing(\"()\") == True",
                "assert correct_bracketing(\"(()())\") == True",
                "assert correct_bracketing(\")(()\") == False",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"()()\") == True",
                "assert correct_bracketing(\"((())())\") == True",
                "assert correct_bracketing(\"((())()\") == False",
                "assert correct_bracketing(\")\") == False",
                "assert correct_bracketing(\")())(()\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 171,
        "completion_tokens": 252
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
                "assert derivative([1, 2, 3]) == [2, 6]",
                "assert derivative([5]) == []",
                "assert derivative([2, 3]) == [3]",
                "assert derivative([0, 0, 0, 3]) == [0, 0, 9]",
                "assert derivative([]) == []",
                "assert derivative([-3, -2, -1]) == [-2, -2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 190,
        "completion_tokens": 368
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fibfib(0) == 0, \"The 0th element should be 0\"",
                "assert fibfib(1) == 0, \"The 1st element should be 0\"",
                "assert fibfib(2) == 1, \"The 2nd element should be 1\"",
                "assert fibfib(8) == 24, \"The 8th element should be 24\"",
                "assert fibfib(10) == 81, \"The 10th element should be 81\""
            ],
            "failed_tests": [
                "assert fibfib(3) == 2, \"The 3rd element should be 2 (0+0+1)\" (AssertionError: The 3rd element should be 2 (0+0+1))",
                "assert fibfib(4) == 4, \"The 4th element should be 4 (0+1+2)\" (AssertionError: The 4th element should be 4 (0+1+2))"
            ]
        },
        "prompt_tokens": 231,
        "completion_tokens": 321
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"aeiou\") == 5",
                "assert vowels_count(\"sky\") == 1",
                "assert vowels_count(\"bcdfg\") == 0",
                "assert vowels_count(\"banana\") == 3"
            ],
            "failed_tests": [
                "assert vowels_count(\"\") == 0 (IndexError: string index out of range)",
                "assert vowels_count(\"candy\") == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 208,
        "completion_tokens": 301
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12, 2) == \"12\"",
                "assert circular_shift(123, 1) == \"312\"",
                "assert circular_shift(12, 1) == \"21\"",
                "assert circular_shift(0, 5) == \"0\"",
                "assert circular_shift(5, 1) == \"5\"",
                "assert circular_shift(123456, 4) == \"345612\"",
                "assert circular_shift(123, 3) == \"123\"",
                "assert circular_shift(123, 2) == \"231\"",
                "assert circular_shift(5, 10) == \"5\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 164,
        "completion_tokens": 441
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"\") == 0",
                "assert digitSum(\"abAB\") == 131",
                "assert digitSum(\"abcCd\") == 67",
                "assert digitSum(\"helloE\") == 69",
                "assert digitSum(\"woArBld\") == 131",
                "assert digitSum(\"aAaaaXa\") == 153",
                "assert digitSum(\"lowercase\") == 0",
                "assert digitSum(\"UPPER\") == sum(map(ord, \"UPPER\"))"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 194,
        "completion_tokens": 314
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"5 apples and 5 oranges\", 10) == 0",
                "assert fruit_distribution(\"0 apples and 0 oranges\", 10) == 10",
                "assert fruit_distribution(\"100 apples and 200 oranges\", 1000) == 700",
                "assert fruit_distribution(\"10 apples and 10 oranges\", 20) == 0",
                "assert fruit_distribution(\"0 apples and 10 oranges\", 10) == 0",
                "assert fruit_distribution(\"10 apples and 0 oranges\", 10) == 0",
                "assert fruit_distribution(\"1000 apples and 1000 oranges\", 3000) == 1000",
                "assert fruit_distribution(\"999 apples and 1 oranges\", 1000) == 0",
                "assert fruit_distribution(\"1 apples and 1 oranges\", 10000) == 9998"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 292,
        "completion_tokens": 300
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([]) == []",
                "assert pluck([2]) == [2, 0]",
                "assert pluck([1, 3, 5]) == []",
                "assert pluck([4, 2, 3, 2]) == [2, 1]",
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
                "assert pluck(list(range(1, 10001))) == [2, 1]",
                "assert pluck([0, 2, 4, 6]) == [0, 0]",
                "assert pluck([5, 7, 10, 12]) == [10, 2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 394,
        "completion_tokens": 361
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert search([4, 1, 2, 2, 3, 1]) == 2",
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
                "assert search([5, 5, 4, 4, 4]) == -1",
                "assert search([3, 3, 3, 2, 2, 1]) == 3",
                "assert search([2, 2, 3, 1]) == 2",
                "assert search([2, 2, 2, 2, 1]) == 2",
                "assert search([2]) == -1",
                "assert search([2, 2]) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 247,
        "completion_tokens": 445
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([4, 3, 2, 1]) == [1, 4, 2, 3]",
                "assert strange_sort_list([10, 2, 7, 3, 5]) == [2, 10, 3, 7, 5]",
                "assert strange_sort_list([-1, -2, -3, -4]) == [-4, -1, -3, -2]",
                "assert strange_sort_list([-5, 0, 5, -10, 10]) == [-10, 10, -5, 5, 0]",
                "assert strange_sort_list([42]) == [42]",
                "assert strange_sort_list([2, 1]) == [1, 2]",
                "assert strange_sort_list([3, 1, 2]) == [1, 3, 2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 347
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(0, 4, 5) == -1",
                "assert triangle_area(3, 4, 5) == 6.00",
                "assert triangle_area(3, -4, 5) == -1",
                "assert triangle_area(3, 4, -5) == -1",
                "assert triangle_area(1, 2, 10) == -1",
                "assert triangle_area(5, 5, 5) == round(10.825317547305483, 2)",
                "assert triangle_area(0.1, 0.1, 0.1) == round(0.004330127018922193, 2)",
                "assert triangle_area(-3, 4, 5) == -1"
            ],
            "failed_tests": [
                "assert triangle_area(3.5, 4.5, 5.5) == round(7.77, 2) (AssertionError: )"
            ]
        },
        "prompt_tokens": 203,
        "completion_tokens": 344
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([3, 2, 3], 1) == False",
                "assert will_it_fly([1, 2], 5) == False",
                "assert will_it_fly([3], 5) == True",
                "assert will_it_fly([], 1) == True",
                "assert will_it_fly([1, 2, 3, 2, 1], 9) == True",
                "assert will_it_fly([1, 2, 3, 4, 5], 20) == False",
                "assert will_it_fly([10, 20, 30, 20, 10], 50) == False",
                "assert will_it_fly([-1, -2, -1], 0) == True",
                "assert will_it_fly([-1, -2, -3], 0) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 312,
        "completion_tokens": 398
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1, 2, 3, 2, 1]) == 0",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4",
                "assert smallest_change([]) == 0",
                "assert smallest_change([1]) == 0",
                "assert smallest_change([1, 2]) == 1",
                "assert smallest_change([2, 2]) == 0",
                "assert smallest_change([7, 7, 7, 7, 7]) == 0"
            ],
            "failed_tests": [
                "assert smallest_change([1, 3, 5, 3, 1, 2, 4, 2]) == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 239,
        "completion_tokens": 303
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert total_match([], []) == []",
                "assert total_match(['a', 'bc'], ['def', 'gh']) == ['a', 'bc']",
                "assert total_match(['hello', 'world'], ['hi', 'there']) == ['hi', 'there']",
                "assert total_match(['1', '23'], ['456', '7']) == ['1', '23']",
                "assert total_match(['1234'], ['1', '2']) == ['1', '2']",
                "assert total_match(['long', 'list', 'of', 'words'], ['short', 'list']) == ['short', 'list']"
            ],
            "failed_tests": [
                "assert total_match(['one', 'two'], ['three']) == ['one', 'two'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 275,
        "completion_tokens": 371
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(2*3*5) == True",
                "assert is_multiply_prime(3) == False",
                "assert is_multiply_prime(2*3) == False",
                "assert is_multiply_prime(2*2*2*3) == False",
                "assert is_multiply_prime(1) == False"
            ],
            "failed_tests": [
                "assert is_multiply_prime(8) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 161,
        "completion_tokens": 295
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(3, 2) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 224,
        "completion_tokens": 491
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(1) == True",
                "assert iscube(2) == False",
                "assert iscube(-1) == True",
                "assert iscube(64) == True",
                "assert iscube(0) == True",
                "assert iscube(180) == False",
                "assert iscube(27) == True",
                "assert iscube(-27) == True",
                "assert iscube(26) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 192,
        "completion_tokens": 281
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"ABED1A33\") == 4",
                "assert hex_key(\"2357BD2357BD\") == 12",
                "assert hex_key(\"B\") == 1",
                "assert hex_key(\"\") == 0",
                "assert hex_key(\"123456789ABCDEF0\") == 6",
                "assert hex_key(\"468A0E\") == 0",
                "assert hex_key(\"2\") == 1",
                "assert hex_key(\"F0E0A0C\") == 0",
                "assert hex_key(\"777\") == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 381,
        "completion_tokens": 381
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(0) == \"db0db\"",
                "assert decimal_to_binary(1) == \"db1db\"",
                "assert decimal_to_binary(2) == \"db10db\"",
                "assert decimal_to_binary(5) == \"db101db\"",
                "assert decimal_to_binary(15) == \"db1111db\"",
                "assert decimal_to_binary(32) == \"db100000db\"",
                "assert decimal_to_binary(255) == \"db11111111db\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 221,
        "completion_tokens": 277
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy(\"a\") == False",
                "assert is_happy(\"abc\") == True",
                "assert is_happy(\"abcdefg\") == True",
                "assert is_happy(\"xyy\") == False",
                "assert is_happy(\"aaabcdefg\") == False",
                "assert is_happy(\"xyzabccba\") == False",
                "assert is_happy(\"abcd\") == True",
                "assert is_happy(\"aab\") == False",
                "assert is_happy(\"aa\") == False",
                "assert is_happy(\"adb\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 203,
        "completion_tokens": 234
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([4.0]) == ['A+']",
                "assert numerical_letter_grade([0.0]) == ['E']",
                "assert numerical_letter_grade([3.8, 3.9, 4.0]) == ['A', 'A', 'A+']",
                "assert numerical_letter_grade([]) == []",
                "assert numerical_letter_grade([3.71, 3.31, 2.71, 2.31, 1.71, 1.31, 0.71]) == ['A', 'A-', 'B', 'B-', 'C', 'C-', 'D']"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([4.0, 3.8, 3.5, 3.2, 3.0, 2.8, 2.5, 2.2, 2.0, 1.8, 1.5, 1.2, 1.0, 0.8, 0.5, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'] (AssertionError: )",
                "assert numerical_letter_grade([3.69, 3.29, 2.69, 2.29, 1.69, 1.29, 0.69]) == ['A-', 'B+', 'B-', 'C+', 'C-', 'D+', 'D'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 352,
        "completion_tokens": 412
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('Hello') == True",
                "assert prime_length('abcdcba') == True",
                "assert prime_length('kittens') == True",
                "assert prime_length('orange') == False",
                "assert prime_length('') == False",
                "assert prime_length('Hi') == True",
                "assert prime_length('Hello World') == True",
                "assert prime_length('A') == False",
                "assert prime_length('cat') == True",
                "assert prime_length('dogs') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 163,
        "completion_tokens": 239
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert starts_one_ends(1) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 126,
        "completion_tokens": 214
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(0) == \"0\"",
                "assert solve(5) == \"101\"",
                "assert solve(11) == \"10\"",
                "assert solve(29) == \"1011\"",
                "assert solve(100) == \"1\"",
                "assert solve(111) == \"11\"",
                "assert solve(123) == \"110\"",
                "assert solve(10000) == \"1\"",
                "assert solve(4) == \"100\"",
                "assert solve(99) == \"10010\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 215,
        "completion_tokens": 495
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2",
                "assert add([2, 3, 4, 5, 6, 7]) == 0",
                "assert add([2, 4, 6, 8, 10, 12]) == 24",
                "assert add([1, 3, 5, 7, 9, 11]) == 0",
                "assert add([1, 2]) == 2",
                "assert add([1, 3]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 137,
        "completion_tokens": 351
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('Hi') == 'Hi'",
                "assert anti_shuffle('hello') == 'ehllo'",
                "assert anti_shuffle('') == ''",
                "assert anti_shuffle('cba') == 'abc'",
                "assert anti_shuffle('abc123') == '123abc'",
                "assert anti_shuffle('letters') == 'eelrstt'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 212,
        "completion_tokens": 253
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_row([[10, 20, 30], [40, 50, 60], [70, 80, 90]], 50) == [(1, 1)]",
                "assert get_row([[2, 3, 4], [5, 6, 7], [1, 1, 1]], 1) == [(2, 2), (2, 1), (2, 0)]",
                "assert get_row([[1, 2, 3], [4, 5, 6]], 1) == [(0, 0)]",
                "assert get_row([], 1) == []",
                "assert get_row([[1, 2, 1, 3, 1], [4, 5, 6]], 1) == [(0, 4), (0, 2), (0, 0)]",
                "assert get_row([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]], -5) == [(1, 1)]",
                "assert get_row([[2, 3, 4], [5, 6, 7]], 1) == []",
                "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
                "assert get_row([[-1, -2, 3], [-4, 5, -6], [7, -8, 9]], 7) == [(2, 0)]"
            ],
            "failed_tests": [
                "assert get_row([[1, 2, 3], [4, 5, 1]], 1) == [(1, 2)] (AssertionError: )"
            ]
        },
        "prompt_tokens": 341,
        "completion_tokens": 726
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_array([]) == []",
                "assert sort_array([1, 1, 1, 1]) == [1, 1, 1, 1]",
                "assert sort_array([5]) == [5]",
                "assert sort_array([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 285,
        "completion_tokens": 603
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encrypt('hi') == 'lm'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('gf') == 'kj'",
                "assert encrypt('xy') == 'bc'",
                "assert encrypt('a') == 'e'",
                "assert encrypt('') == ''",
                "assert encrypt('hello world!') == 'lipps asvph!'",
                "assert encrypt('123abc') == '123efg'"
            ],
            "failed_tests": [
                "assert encrypt('AbCd') == 'EfGh' (AssertionError: )"
            ]
        },
        "prompt_tokens": 192,
        "completion_tokens": 211
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([1, 2, 3, 4, 5]) == 2",
                "assert next_smallest([5, 1, 4, 3, 2]) == 2",
                "assert next_smallest([]) == None",
                "assert next_smallest([1, 1]) == None",
                "assert next_smallest([-3, -2, -1, 0, 1]) == -2",
                "assert next_smallest([2, 3, 4, 5, 6]) == 3",
                "assert next_smallest([5, 4, 3, 2, 1]) == 2",
                "assert next_smallest([1, 1, 2, 3, 4]) == 2",
                "assert next_smallest([2, 3, 3, 4, 5]) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 316
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"Hello world\") == 0",
                "assert is_bored(\"I am feeling bored today.\") == 1",
                "assert is_bored(\"The sky is blue. I love sunny days. What about you?\") == 1",
                "assert is_bored(\"I am bored! I want to go outside. Why is it raining? I hate this weather.\") == 3",
                "assert is_bored(\"\") == 0",
                "assert is_bored(\"i am not sure. I think I am bored.\") == 1"
            ],
            "failed_tests": [
                "assert is_bored(\" I am trying to study. I really need to focus!\") == 2 (AssertionError: )",
                "assert is_bored(\"This is what I think: I am not sure.\") == 1 (AssertionError: )",
                "assert is_bored(\"I! Is it true? I think so. I? Really?\") == 3 (AssertionError: )"
            ]
        },
        "prompt_tokens": 189,
        "completion_tokens": 326
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(5, 2, 7) == True",
                "assert any_int(3, 2, 2) == False",
                "assert any_int(3, -2, 1) == True",
                "assert any_int(-1, -3, -4) == True",
                "assert any_int(3.6, -2.2, 2) == False",
                "assert any_int(5, 5, 0) == True",
                "assert any_int(0, 0, 0) == True",
                "assert any_int(1000, 500, 500) == True",
                "assert any_int(-1000, 1500, 500) == True",
                "assert any_int(10, 10, 10) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 217,
        "completion_tokens": 324
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'",
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
                "assert encode('go') == 'GQ'",
                "assert encode('bcdfg') == 'BCDFG'",
                "assert encode('TGST') == 'tgst'",
                "assert encode('') == ''"
            ],
            "failed_tests": [
                "assert encode('aeiou') == 'CGKQO' (AssertionError: )",
                "assert encode('AEIOU') == 'cgkqo' (AssertionError: )",
                "assert encode('Hello World') == 'hKLLQ wQRLD' (AssertionError: )"
            ]
        },
        "prompt_tokens": 191,
        "completion_tokens": 271
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
                "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
                "assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13",
                "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11",
                "assert skjkasdkd([0,81,12,3,1,21]) == 3",
                "assert skjkasdkd([0,8,1,2,1,7]) == 7",
                "assert skjkasdkd([]) == 0",
                "assert skjkasdkd([29]) == 11",
                "assert skjkasdkd([4,6,8,10,12]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 368,
        "completion_tokens": 471
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) == True",
                "assert check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}) == False",
                "assert check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}) == False",
                "assert check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) == True",
                "assert check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}) == False",
                "assert check_dict_case({}) == False",
                "assert check_dict_case({\"single\": \"value\"}) == True",
                "assert check_dict_case({\"SINGLE\": \"value\"}) == True",
                "assert check_dict_case({\"one\": 1, \"two\": 2}) == True",
                "assert check_dict_case({\"ONE\": 1, \"TWO\": 2}) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 251,
        "completion_tokens": 312
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(0) == []",
                "assert count_up_to(1) == []",
                "assert count_up_to(5) == [2, 3]",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]",
                "assert count_up_to(50) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]",
                "assert count_up_to(2) == []",
                "assert count_up_to(-1) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 227,
        "completion_tokens": 387
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert multiply(148, 412) == 16",
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(14, -15) == 20",
                "assert multiply(123456789, 987654321) == 9",
                "assert multiply(7, 123) == 21",
                "assert multiply(-5, 123) == 15"
            ],
            "failed_tests": [
                "assert multiply(-34, -52) == 8 (AssertionError: )"
            ]
        },
        "prompt_tokens": 180,
        "completion_tokens": 280
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('aBCdEf') == 1",
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('dBBE') == 0",
                "assert count_upper('') == 0",
                "assert count_upper('A') == 1",
                "assert count_upper('a') == 0",
                "assert count_upper('bAcEd') == 0",
                "assert count_upper('AEIOU') == 3"
            ],
            "failed_tests": [
                "assert count_upper('AeIoUaEiOu') == 3 (AssertionError: )",
                "assert count_upper('AbCdEfGhIj') == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 154,
        "completion_tokens": 262
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"10\") == 10",
                "assert closest_integer(\"15.3\") == 15",
                "assert closest_integer(\"2.8\") == 3",
                "assert closest_integer(\"-3.2\") == -3",
                "assert closest_integer(\"-7.9\") == -8",
                "assert closest_integer(\"14.5\") == 15",
                "assert closest_integer(\"-14.5\") == -15",
                "assert closest_integer(\"0\") == 0"
            ],
            "failed_tests": [
                "assert closest_integer(\"0.1\") == 1 (AssertionError: )",
                "assert closest_integer(\"-0.1\") == -1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 238,
        "completion_tokens": 252
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(2) == [2, 4]",
                "assert make_a_pile(3) == [3, 5, 7]",
                "assert make_a_pile(4) == [4, 6, 8, 10]",
                "assert make_a_pile(5) == [5, 7, 9, 11, 13]",
                "assert make_a_pile(10) == [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]",
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(7) == [7, 9, 11, 13, 15, 17, 19]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 214,
        "completion_tokens": 358
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]",
                "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
                "assert words_string(\"Hello, world \") == [\"Hello\", \"world\"]",
                "assert words_string(\" Hello, world\") == [\"Hello\", \"world\"]",
                "assert words_string(\"Hi,  my  name  is  John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]",
                "assert words_string(\"One,two,three,four,five,six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
                "assert words_string(\"\") == []",
                "assert words_string(\"Hello, world! This is, a test.\") == [\"Hello\", \"world!\", \"This\", \"is\", \"a\", \"test.\"]",
                "assert words_string(\"1, 2, 3, go\") == [\"1\", \"2\", \"3\", \"go\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 198,
        "completion_tokens": 324
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert choose_num(12, 15) == 14",
                "assert choose_num(10, 14) == 14",
                "assert choose_num(8, 8) == 8",
                "assert choose_num(2, 2) == 2",
                "assert choose_num(3, 3) == -1",
                "assert choose_num(1, 20) == 20",
                "assert choose_num(11, 18) == 18"
            ],
            "failed_tests": [
                "assert choose_num(13, 15) == -1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 176,
        "completion_tokens": 280
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(1, 3) == \"0b10\", \"Test case where n=1, m=3, average is 2\"",
                "assert rounded_avg(1, 2) == \"0b10\", \"Test case where n=1, m=2, average is 1.5 but rounds up to 2\"",
                "assert rounded_avg(5, 5) == \"0b101\", \"Test case where n=m=5, average is 5\"",
                "assert rounded_avg(10, 5) == -1, \"Test case where n=10, m=5, should return -1\"",
                "assert rounded_avg(10, 20) == \"0b1111\", \"Test case where n=10, m=20, average is 15\"",
                "assert rounded_avg(1, 1) == \"0b1\", \"Test case where n=m=1, average is 1\""
            ],
            "failed_tests": [
                "assert rounded_avg(100, 200) == \"0b1110111\", \"Test case where n=100, m=200, average is 150\" (AssertionError: Test case where n=100, m=200, average is 150)"
            ]
        },
        "prompt_tokens": 222,
        "completion_tokens": 501
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([152, 323, 1422, 10]) == []",
                "assert unique_digits([99, 55, 77]) == [55, 77, 99]",
                "assert unique_digits([]) == []",
                "assert unique_digits([111]) == [111]",
                "assert unique_digits([222]) == []"
            ],
            "failed_tests": [
                "assert unique_digits([123, 456, 789, 321]) == [123, 321, 789] (AssertionError: )",
                "assert unique_digits([10, 23, 45, 60, 78, 90, 123, 345, 567, 789]) == [23, 45, 123, 345, 567, 789] (AssertionError: )"
            ]
        },
        "prompt_tokens": 184,
        "completion_tokens": 331
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]",
                "assert by_length([]) == []",
                "assert by_length([0, 10, 11, 12, -1, -2]) == []",
                "assert by_length([1, 1, 1, 2, 2, 2]) == [\"Two\", \"Two\", \"Two\", \"One\", \"One\", \"One\"]",
                "assert by_length([5]) == [\"Five\"]",
                "assert by_length([10]) == []",
                "assert by_length([-5, 15, 20, 1]) == [\"One\"]",
                "assert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 358,
        "completion_tokens": 399
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(1) == [1]",
                "assert f(3) == [1, 2, 6]",
                "assert f(4) == [1, 2, 6, 24]",
                "assert f(5) == [1, 2, 6, 24, 15]",
                "assert f(6) == [1, 2, 6, 24, 15, 720]",
                "assert f(0) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 364
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(1) == (0, 1)",
                "assert even_odd_palindrome(2) == (1, 1)",
                "assert even_odd_palindrome(10) == (4, 5)",
                "assert even_odd_palindrome(11) == (4, 6)",
                "assert even_odd_palindrome(12) == (4, 6)"
            ],
            "failed_tests": [
                "assert even_odd_palindrome(99) == (20, 29) (AssertionError: )",
                "assert even_odd_palindrome(100) == (20, 29) (AssertionError: )",
                "assert even_odd_palindrome(101) == (20, 30) (AssertionError: )"
            ]
        },
        "prompt_tokens": 293,
        "completion_tokens": 474
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_nums([]) == 0",
                "assert count_nums([5]) == 1",
                "assert count_nums([1, 1, 2]) == 3",
                "assert count_nums([0, -0, 0]) == 0",
                "assert count_nums([123, -456, 789]) == 3"
            ],
            "failed_tests": [
                "assert count_nums([-5]) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 206,
        "completion_tokens": 285
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([-3, -1, -4, -2]) == False",
                "assert move_one_ball([5, 1, 2, 3, 4]) == True",
                "assert move_one_ball([4, 5, 1, 2, 3]) == True",
                "assert move_one_ball([1, 2, 3, 4, 5]) == True",
                "assert move_one_ball([2, 3, 4, 5, 1]) == True",
                "assert move_one_ball([]) == True",
                "assert move_one_ball([-4, -3, -2, -1]) == True",
                "assert move_one_ball([2, 3, 5, 4, 1]) == False",
                "assert move_one_ball([1]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 381,
        "completion_tokens": 366
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1, 3, 5], [2, 4, 6]) == \"YES\"",
                "assert exchange([2, 4, 6], [1, 3, 5]) == \"YES\"",
                "assert exchange([1, 3, 5], [1, 3, 5]) == \"NO\"",
                "assert exchange([1, 2, 4], [3, 5, 6]) == \"YES\"",
                "assert exchange([2, 4, 6], [8, 10, 12]) == \"YES\"",
                "assert exchange([1, 3, 5], [7, 9, 11]) == \"NO\"",
                "assert exchange([102, 154, 206, 3], [405, 303, 202]) == \"YES\"",
                "assert exchange([2, 4, 6], [1, 3, 5]) == \"YES\"",
                "assert exchange([1, 2, 4], [3, 5, 6]) == \"YES\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 279,
        "completion_tokens": 412
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('a b b a') == {'a': 2, 'b': 2}",
                "assert histogram('a b c a b') == {'a': 2, 'b': 2}",
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('') == {}",
                "assert histogram('a a a a') == {'a': 4}",
                "assert histogram('a b c d e f g h a b c d e f g h i') == {'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2, 'f': 2, 'g': 2, 'h': 2}",
                "assert histogram('a b b c c c') == {'c': 3}",
                "assert histogram('a') == {'a': 1}",
                "assert histogram('a   a   a') == {'a': 3}"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 233,
        "completion_tokens": 335
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"abc\", \"abc\") == (\"\", True)",
                "assert reverse_delete(\"aba\", \"c\") == (\"aba\", True)",
                "assert reverse_delete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)",
                "assert reverse_delete(\"a@bc!d\", \"@!\") == (\"abcd\", False)",
                "assert reverse_delete(\"abc\", \"d\") == (\"abc\", False)",
                "assert reverse_delete(\"\", \"\") == (\"\", True)",
                "assert reverse_delete(\"AbcBA\", \"A\") == (\"bcB\", False)",
                "assert reverse_delete(\"123321\", \"2\") == (\"1331\", True)",
                "assert reverse_delete(\"abcdefg\", \"b\") == (\"acdefg\", False)"
            ],
            "failed_tests": [
                "assert reverse_delete(\"a1b2c3c2b1a\", \"123\") == (\"abcba\", True) (AssertionError: )"
            ]
        },
        "prompt_tokens": 244,
        "completion_tokens": 421
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['13579']) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\"]",
                "assert odd_count(['2468']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['123456789']) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\"]",
                "assert odd_count(['135', '579', '111']) == [\n\"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n\"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n\"the number of odd elements 3n the str3ng 3 of the 3nput.\"\n]",
                "assert odd_count(['246', '468', '802']) == [\n\"the number of odd elements 0n the str0ng 0 of the 0nput.\",\n\"the number of odd elements 0n the str0ng 0 of the 0nput.\",\n\"the number of odd elements 0n the str0ng 0 of the 0nput.\"\n]",
                "assert odd_count([]) == []",
                "assert odd_count(['']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]"
            ],
            "failed_tests": [
                "assert odd_count(['123', '4567', '890123']) == [\n\"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n\"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n\"the number of odd elements 3n the str3ng 3 of the 3nput.\"\n] (AssertionError: )"
            ]
        },
        "prompt_tokens": 255,
        "completion_tokens": 481
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([-1, -2, -3]) == -6",
                "assert minSubArraySum([5, -1, 3, 2]) == -1",
                "assert minSubArraySum([7]) == 7",
                "assert minSubArraySum([-5]) == -5",
                "assert minSubArraySum([0, 0, 0, 0]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 170,
        "completion_tokens": 426
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
                "assert max_fill([[1,1,1], [1,1,1], [1,1,1]], 3) == 3",
                "assert max_fill([[1,0,1,0,1]], 1) == 3",
                "assert max_fill([[0]*100 for _ in range(100)], 10) == 0",
                "assert max_fill([[1]*100 for _ in range(100)], 10) == 1000",
                "assert max_fill([[1]], 1) == 1"
            ],
            "failed_tests": [
                "assert max_fill([[1,1,1,1,1], [1,1,1,1,1]], 2) == 5 (AssertionError: )",
                "assert max_fill([[1,0,1], [0,1,1], [1,1,0]], 4) == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 405,
        "completion_tokens": 457
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([]) == []",
                "assert sort_array([1]) == [1]",
                "assert sort_array([3, 7, 8, 9]) == [8, 3, 9, 7]",
                "assert sort_array([0, 1, 2, 3, 4]) == [0, 1, 2, 4, 3]",
                "assert sort_array([0, 1, 2, 4, 8]) == [0, 1, 2, 4, 8]",
                "assert sort_array([5, 4, 3, 2, 1, 0]) == [0, 1, 2, 4, 3, 5]"
            ],
            "failed_tests": [
                "assert sort_array([10, 6, 2, 3]) == [2, 10, 6, 3] (AssertionError: )"
            ]
        },
        "prompt_tokens": 252,
        "completion_tokens": 426
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"\", 3) == []",
                "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
                "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
                "assert select_words(\"simple white space\", 2) == []",
                "assert select_words(\"Hello world\", 4) == [\"world\"]",
                "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]",
                "assert select_words(\"a i u e o\", 0) == [\"a\", \"i\", \"u\", \"e\", \"o\"]",
                "assert select_words(\"Hello   world\", 4) == [\"world\"]"
            ],
            "failed_tests": [
                "assert select_words(\"AeIoU some Consonants\", 1) == [\"some\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 263,
        "completion_tokens": 344
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"b\") == \"\"",
                "assert get_closest_vowel(\"ab\") == \"\"",
                "assert get_closest_vowel(\"oboe\") == \"\"",
                "assert get_closest_vowel(\"quick\") == \"\"",
                "assert get_closest_vowel(\"yogurt\") == \"u\"",
                "assert get_closest_vowel(\"a\") == \"\"",
                "assert get_closest_vowel(\"rhythm\") == \"\"",
                "assert get_closest_vowel(\"FULL\") == \"U\""
            ],
            "failed_tests": [
                "assert get_closest_vowel(\"ApplE\") == \"E\" (AssertionError: )",
                "assert get_closest_vowel(\"bob\") == \"\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 231,
        "completion_tokens": 300
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['', '']) == 'Yes'",
                "assert match_parens(['', '()']) == 'Yes'",
                "assert match_parens(['()', '()']) == 'Yes'",
                "assert match_parens(['()(', ')']) == 'Yes'",
                "assert match_parens(['(', ')(']) == 'No'",
                "assert match_parens(['(', '(']) == 'No'",
                "assert match_parens([')', ')']) == 'No'",
                "assert match_parens(['(', ')']) == 'Yes'",
                "assert match_parens(['(()', '())']) == 'Yes'",
                "assert match_parens(['(()(', ')))']) == 'No'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 250,
        "completion_tokens": 319
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([5, 4, 3, 2, 1], 0) == []",
                "assert maximum([-1000], 1) == [-1000]",
                "assert maximum([-999, 0, 1000], 1) == [1000]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 299,
        "completion_tokens": 407
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9",
                "assert solution([30, 13, 24, 321]) == 0",
                "assert solution([7]) == 7",
                "assert solution([2]) == 0"
            ],
            "failed_tests": [
                "assert solution([10, 3, 5, 2, 7, 6, 11, 4, 9]) == 21 (AssertionError: )",
                "assert solution([-2, -3, -4, -5, -6, -7]) == -10 (AssertionError: )",
                "assert solution([1000, 3001, 2000, 7001, 4000, 5001]) == 8002 (AssertionError: )"
            ]
        },
        "prompt_tokens": 179,
        "completion_tokens": 337
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add_elements([10, 20, 30, 40], 4) == 100",
                "assert add_elements([100, 200, 300, 400], 4) == 0",
                "assert add_elements([100, 20, 300, 40, 50], 4) == 60",
                "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 15",
                "assert add_elements([10, 20, 30, 40], 1) == 10",
                "assert add_elements([99], 1) == 99",
                "assert add_elements([10, 11, 12, 13, 14], 5) == 60",
                "assert add_elements([1, 2, 300, 4000, 50000], 2) == 3"
            ],
            "failed_tests": [
                "assert add_elements([-10, -20, 100, 200], 4) == -30 (AssertionError: )",
                "assert add_elements([-10, 20, -30, 40], 4) == 20 (AssertionError: )"
            ]
        },
        "prompt_tokens": 210,
        "completion_tokens": 384
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(1) == [1]",
                "assert get_odd_collatz(5) == [1, 5]",
                "assert get_odd_collatz(16) == [1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 313,
        "completion_tokens": 903
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('11-31-2021') == False",
                "assert valid_date('02-28-2021') == True",
                "assert valid_date('08-32-2021') == False",
                "assert valid_date('00-15-2021') == False",
                "assert valid_date('02-29-2020') == True",
                "assert valid_date('') == False",
                "assert valid_date('12/31/2021') == False"
            ],
            "failed_tests": [
                "assert valid_date('02-29-2021') == False (AssertionError: )",
                "assert valid_date('12-31-9999') == True (AssertionError: )",
                "assert valid_date('07-31-2021') == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 345,
        "completion_tokens": 427
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"abcdef\") == 3",
                "assert split_words(\"\") == 0",
                "assert split_words(\"AbCdEf\") == 3",
                "assert split_words(\"ABCDEF\") == 0"
            ],
            "failed_tests": [
                "assert split_words(\",Hello world!\") == [\"\", \"Hello\", \"world!\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 222,
        "completion_tokens": 289
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([1, 3, 2, 4, 5]) == False",
                "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False",
                "assert is_sorted([]) == True",
                "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True",
                "assert is_sorted([1, 2, 2, 2, 3, 4]) == False",
                "assert is_sorted([1, 2, 3, 4, 5]) == True",
                "assert is_sorted([5]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 331,
        "completion_tokens": 414
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert intersection((1, 2), (2, 3)) == \"NO\"",
                "assert intersection((-5, -4), (-3, -2)) == \"NO\"",
                "assert intersection((2, 5), (3, 5)) == \"YES\"",
                "assert intersection((1, 3), (1, 4)) == \"YES\"",
                "assert intersection((1, 3), (1, 3)) == \"YES\"",
                "assert intersection((-3, -1), (-5, 5)) == \"YES\""
            ],
            "failed_tests": [
                "assert intersection((1, 10), (2, 3)) == \"YES\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 336,
        "completion_tokens": 342
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([1, 2, 2, -4]) == -9",
                "assert prod_signs([0, 1]) == 0",
                "assert prod_signs([]) == None",
                "assert prod_signs([1, 2, 3]) == 6",
                "assert prod_signs([-1, -2, -3]) == -6",
                "assert prod_signs([5]) == 5",
                "assert prod_signs([-5]) == -5",
                "assert prod_signs([0]) == 0",
                "assert prod_signs([0, 0, 0]) == 0",
                "assert prod_signs([-1, 0, 1]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 204,
        "completion_tokens": 229
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]",
                "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]",
                "assert minPath([[1, 3], [2, 4]], 4) == [1, 2, 1, 2]",
                "assert minPath([[8, 7, 6], [5, 1, 2], [4, 3, 9]], 2) == [1, 2]",
                "assert minPath([[15, 14, 13, 12], [11, 10, 9, 8], [7, 6, 5, 4], [3, 2, 1, 16]], 6) == [1, 2, 1, 2, 1, 2]",
                "assert minPath([[1, 2], [3, 4]], 1) == [1]"
            ],
            "failed_tests": [
                "assert minPath([[10, 11, 12, 13], [14, 15, 16, 17], [18, 19, 20, 21], [22, 23, 24, 25]], 5) == [10, 11, 10, 11, 10] (AssertionError: )",
                "assert minPath([[8, 4, 2], [5, 9, 7], [6, 1, 3]], 4) == [1, 2, 1, 2] (AssertionError: )"
            ]
        },
        "prompt_tokens": 478,
        "completion_tokens": 556
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": true,
        "test_results": {
            "passed_tests": [],
            "failed_tests": []
        },
        "prompt_tokens": 317,
        "completion_tokens": 331
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert digits(1) == 1",
                "assert digits(4) == 0",
                "assert digits(235) == 15",
                "assert digits(2468) == 0",
                "assert digits(13579) == 945",
                "assert digits(333) == 27",
                "assert digits(103) == 3",
                "assert digits(1) == 1"
            ],
            "failed_tests": [
                "assert digits(1024506789) == 945 (AssertionError: )"
            ]
        },
        "prompt_tokens": 153,
        "completion_tokens": 290
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[[]]') == True",
                "assert is_nested('[][]') == False",
                "assert is_nested('[]]]]]]][[[[[]') == False",
                "assert is_nested('[]') == False",
                "assert is_nested('[[][]]') == True",
                "assert is_nested('[[]][[') == True",
                "assert is_nested('[[[[]]]]') == True",
                "assert is_nested('') == False",
                "assert is_nested('[][][[]][][]') == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 215,
        "completion_tokens": 227
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 14",
                "assert sum_squares([1, 4, 9]) == 98",
                "assert sum_squares([1, 3, 5, 7]) == 84",
                "assert sum_squares([1.4, 4.2, 0]) == 29",
                "assert sum_squares([-2.4, 1, 1]) == 6",
                "assert sum_squares([]) == 0",
                "assert sum_squares([5]) == 25",
                "assert sum_squares([0, 2, 4]) == 20"
            ],
            "failed_tests": [
                "assert sum_squares([-3.7]) == 16 (AssertionError: )"
            ]
        },
        "prompt_tokens": 239,
        "completion_tokens": 289
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"Hello World a\") == True",
                "assert check_if_last_char_is_a_letter(\"Hello World\") == False",
                "assert check_if_last_char_is_a_letter(\"12345!\") == False",
                "assert check_if_last_char_is_a_letter(\"\") == False",
                "assert check_if_last_char_is_a_letter(\"Hello   b\") == True",
                "assert check_if_last_char_is_a_letter(\"Hello World \") == False",
                "assert check_if_last_char_is_a_letter(\"a\") == True",
                "assert check_if_last_char_is_a_letter(\"a \") == False",
                "assert check_if_last_char_is_a_letter(\"Hello, World!\") == False"
            ],
            "failed_tests": [
                "assert check_if_last_char_is_a_letter(\"Hello, World!a\") == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 219,
        "completion_tokens": 291
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1, 2, 4, 3, 5]) == 3",
                "assert can_arrange([1, 2, 3]) == -1",
                "assert can_arrange([1, 3, 5, 7, 9, 11, 10]) == 6",
                "assert can_arrange([-3, -1, 0, 1, -2]) == 4",
                "assert can_arrange([2, 1, 3, 4, 5]) == 1",
                "assert can_arrange([1]) == -1",
                "assert can_arrange([]) == -1",
                "assert can_arrange([1, 2, 0, -1, 3]) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 185,
        "completion_tokens": 367
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([0]) == (None, None)",
                "assert largest_smallest_integers([-2, -4, -1, -3, -5, -7]) == (-1, None)",
                "assert largest_smallest_integers([-2, 4, 1, -3, 5, -7]) == (-2, 1)",
                "assert largest_smallest_integers([-2, 0, 4, 1, -3, 5, -7]) == (-2, 1)",
                "assert largest_smallest_integers([-1, -1, 2, 2]) == (-1, 2)",
                "assert largest_smallest_integers([5]) == (None, 5)",
                "assert largest_smallest_integers([-5]) == (-5, None)",
                "assert largest_smallest_integers([-1000, 1000]) == (-1000, 1000)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 220,
        "completion_tokens": 340
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(\"3,5\", \"2.5\") == \"3,5\"",
                "assert compare_one(\"7,7\", 7.7) == None",
                "assert compare_one(\"5\", 5) == None",
                "assert compare_one(3, 2.5) == 3",
                "assert compare_one(2.5, 3) == 3",
                "assert compare_one(3, \"2.5\") == 3",
                "assert compare_one(\"1.1\", \"2.2\") == \"2.2\"",
                "assert compare_one(\"6.6\", 6.6) == None",
                "assert compare_one(1.1, 2.2) == 2.2",
                "assert compare_one(\"1,5\", 2) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 223,
        "completion_tokens": 735
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(8) == True",
                "assert is_equal_to_sum_even(10001) == False",
                "assert is_equal_to_sum_even(4) == False",
                "assert is_equal_to_sum_even(10000) == True",
                "assert is_equal_to_sum_even(2) == False",
                "assert is_equal_to_sum_even(9) == False",
                "assert is_equal_to_sum_even(-8) == False",
                "assert is_equal_to_sum_even(20) == True"
            ],
            "failed_tests": [
                "assert is_equal_to_sum_even(22) == False (AssertionError: )",
                "assert is_equal_to_sum_even(10) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 159,
        "completion_tokens": 402
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(1) == 1",
                "assert special_factorial(2) == 2",
                "assert special_factorial(3) == 12",
                "assert special_factorial(4) == 288",
                "assert special_factorial(5) == 34560"
            ],
            "failed_tests": [
                "assert special_factorial(6) == 2488320 (AssertionError: )"
            ]
        },
        "prompt_tokens": 177,
        "completion_tokens": 333
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\" Example   3\") == \"_Example-3\"",
                "assert fix_spaces(\" \") == \"_\"",
                "assert fix_spaces(\"This   is   a   test\") == \"This-is-a-test\"",
                "assert fix_spaces(\"Example\") == \"Example\"",
                "assert fix_spaces(\"Example   3\") == \"Example-3\"",
                "assert fix_spaces(\"Example 1\") == \"Example_1\"",
                "assert fix_spaces(\"   \") == \"-\"",
                "assert fix_spaces(\"This is   a test\") == \"This_is-a_test\"",
                "assert fix_spaces(\"Trailing space \") == \"Trailing_space_\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 188,
        "completion_tokens": 355
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"nofileextension\") == 'No'",
                "assert file_name_check(\"library.dll\") == 'Yes'",
                "assert file_name_check(\"a.txt\") == 'Yes'",
                "assert file_name_check(\"program.exe\") == 'Yes'",
                "assert file_name_check(\"unsupported.pdf\") == 'No'",
                "assert file_name_check(\"example.txt\") == 'Yes'",
                "assert file_name_check(\"file123.txt\") == 'Yes'",
                "assert file_name_check(\"multiple.dots.txt\") == 'No'",
                "assert file_name_check(\"1example.dll\") == 'No'"
            ],
            "failed_tests": [
                "assert file_name_check(\"ValidFile.EXE\") == 'Yes' (AssertionError: )"
            ]
        },
        "prompt_tokens": 296,
        "completion_tokens": 362
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 252,
        "completion_tokens": 341
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"This is a test\") == \"is\"",
                "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
                "assert words_in_sentence(\"hello\") == \"hello\""
            ],
            "failed_tests": [
                "assert words_in_sentence(\"a an the\") == \"\" (AssertionError: )",
                "assert words_in_sentence(\"see bee tree\") == \"see bee tree\" (AssertionError: )",
                "assert words_in_sentence(\"a \" * 96 + \"b\") == \"b\" (AssertionError: )",
                "assert words_in_sentence(\"I  really like  python\") == \"really python\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 229,
        "completion_tokens": 275
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"1/6\", \"2/1\") == False",
                "assert simplify(\"2/3\", \"3/2\") == True",
                "assert simplify(\"100/200\", \"200/100\") == True",
                "assert simplify(\"123/456\", \"789/123\") == False",
                "assert simplify(\"9/4\", \"4/9\") == True",
                "assert simplify(\"1/1\", \"2/1\") == True",
                "assert simplify(\"1/2\", \"1/1\") == False",
                "assert simplify(\"1/1000\", \"1000/1\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 237,
        "completion_tokens": 311
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]",
                "assert order_by_points([0, 10, 20, 111]) == [0, 10, 20, 111]",
                "assert order_by_points([]) == []",
                "assert order_by_points([9, 1, 3, 7, 4]) == [1, 3, 4, 7, 9]",
                "assert order_by_points([5, 5, 5]) == [5, 5, 5]"
            ],
            "failed_tests": [
                "assert order_by_points([1, 11, 2, 22]) == [1, 2, 11, 22] (AssertionError: )",
                "assert order_by_points([-1, -11, -2, -22]) == [-1, -2, -11, -22] (AssertionError: )",
                "assert order_by_points([21, 12, 3, 30]) == [3, 12, 21, 30] (AssertionError: )"
            ]
        },
        "prompt_tokens": 197,
        "completion_tokens": 360
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([]) == 0",
                "assert specialFilter([2, 4, 6, 8, 10, 12]) == 0",
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2",
                "assert specialFilter([-35, 22, 7, 9, 11]) == 1",
                "assert specialFilter([13, 35, 157]) == 3",
                "assert specialFilter([10, 22, 44, 66, 88]) == 0",
                "assert specialFilter([1019, 2020, 3030, 4040]) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 201,
        "completion_tokens": 413
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(1) == 0",
                "assert get_max_triples(3) == 0",
                "assert get_max_triples(5) == 1",
                "assert get_max_triples(8) > 1",
                "assert get_max_triples(10) >= 1"
            ],
            "failed_tests": [
                "assert get_max_triples(6) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 247,
        "completion_tokens": 361
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Pluto\", \"Vulcan\") == ()",
                "assert bf(\"Earth\", \"Pluto\") == ()",
                "assert bf(\"Mercury\", \"Neptune\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")",
                "assert bf(\"Mercury\", \"Venus\") == ()",
                "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
                "assert bf(\"Mars\", \"Mars\") == ()",
                "assert bf(\"Venus\", \"Mercury\") == ()"
            ],
            "failed_tests": [
                "assert bf(\"Neptune\", \"Mercury\") == (\"Uranus\", \"Saturn\", \"Jupiter\", \"Mars\", \"Earth\", \"Venus\") (AssertionError: )"
            ]
        },
        "prompt_tokens": 293,
        "completion_tokens": 349
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([]) == []",
                "assert sorted_list_sum(['a', 'abc', 'abcde']) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 269,
        "completion_tokens": 327
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(7, 34, 12) == 34",
                "assert x_or_y(15, 8, 5) == 5",
                "assert x_or_y(2, 10, 20) == 10",
                "assert x_or_y(97, 1, 0) == 1",
                "assert x_or_y(100, 1, 0) == 0"
            ],
            "failed_tests": [
                "assert x_or_y(-7, 10, 20) == 20 (AssertionError: )",
                "assert x_or_y(0, 5, 15) == 15 (AssertionError: )"
            ]
        },
        "prompt_tokens": 168,
        "completion_tokens": 268
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([1, 3, 2, 0]) == 10",
                "assert double_the_difference([-1, -2, 0]) == 0",
                "assert double_the_difference([9, -2]) == 81",
                "assert double_the_difference([0]) == 0",
                "assert double_the_difference([]) == 0",
                "assert double_the_difference([-3, -5, -7]) == 0",
                "assert double_the_difference([1, 5, 7]) == 1 + 25 + 49",
                "assert double_the_difference([1001, 2002]) == 1001**2"
            ],
            "failed_tests": [
                "assert double_the_difference([1.5, 2, 3, 'a']) == 9 (TypeError: '>' not supported between instances of 'str' and 'int')"
            ]
        },
        "prompt_tokens": 219,
        "completion_tokens": 309
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]",
                "assert compare([10, 20, 30, 40, 50], [1, 21, 29, 60, 40]) == [9, 1, 1, 20, 10]",
                "assert compare([-10, -20, -30], [-5, -25, -30]) == [5, 5, 0]",
                "assert compare([5, -5, 10, -10], [10, -10, 5, -5]) == [5, 5, 5, 5]",
                "assert compare([0, 0, 0, 0], [0, 0, 0, 0]) == [0, 0, 0, 0]",
                "assert compare([100], [90]) == [10]",
                "assert compare([1000, 2000, 3000], [1000, 1999, 3001]) == [0, 1, 1]",
                "assert compare([], []) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 312,
        "completion_tokens": 331
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('Vehicle', ['Engine']) == 'Vehicle.Engine'",
                "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
                "assert Strongest_Extension('Model3', ['Version1', 'Version2', 'Version3']) == 'Model3.Version1'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('Game', ['RPG', 'FPS', 'MMO']) == 'Game.FPS' (AssertionError: )",
                "assert Strongest_Extension('data', ['json', 'xml', 'csv']) == 'data.json' (AssertionError: )",
                "assert Strongest_Extension('Device', ['LED', 'OLED', 'LCD']) == 'Device.LED' (AssertionError: )",
                "assert Strongest_Extension('Alone', []) == 'Alone' (IndexError: list index out of range)"
            ]
        },
        "prompt_tokens": 359,
        "completion_tokens": 391
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"hello\", \"ell\") == True",
                "assert cycpattern_check(\"abab\", \"baa\") == True",
                "assert cycpattern_check(\"abcd\", \"abd\") == False",
                "assert cycpattern_check(\"efef\", \"eeff\") == False",
                "assert cycpattern_check(\"himenss\", \"simen\") == True",
                "assert cycpattern_check(\"whassup\", \"psus\") == False",
                "assert cycpattern_check(\"a\", \"a\") == True",
                "assert cycpattern_check(\"a\", \"b\") == False",
                "assert cycpattern_check(\"anything\", \"\") == True",
                "assert cycpattern_check(\"\", \"\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 211,
        "completion_tokens": 338
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(1234) == (2, 2)",
                "assert even_odd_count(-13579) == (0, 5)",
                "assert even_odd_count(24680) == (5, 0)",
                "assert even_odd_count(2) == (1, 0)",
                "assert even_odd_count(3) == (0, 1)",
                "assert even_odd_count(2222) == (4, 0)",
                "assert even_odd_count(333) == (0, 3)",
                "assert even_odd_count(0) == (1, 0)",
                "assert even_odd_count(1234567890) == (5, 5)",
                "assert even_odd_count(-7) == (0, 1)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 147,
        "completion_tokens": 252
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(1) == 'i'",
                "assert int_to_mini_roman(5) == 'v'",
                "assert int_to_mini_roman(10) == 'x'",
                "assert int_to_mini_roman(19) == 'xix'",
                "assert int_to_mini_roman(4) == 'iv'",
                "assert int_to_mini_roman(99) == 'xcix'",
                "assert int_to_mini_roman(101) == 'ci'",
                "assert int_to_mini_roman(152) == 'clii'",
                "assert int_to_mini_roman(891) == 'dcccxci'",
                "assert int_to_mini_roman(1000) == 'm'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 183,
        "completion_tokens": 337
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(1.5, 2.5, 3.5) == False",
                "assert right_angle_triangle(6, 8, 10) == True",
                "assert right_angle_triangle(5, 3, 4) == True",
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(0, 4, 5) == False",
                "assert right_angle_triangle(3.0, 4.0, 5.0) == True",
                "assert right_angle_triangle(1, 2, 3) == False",
                "assert right_angle_triangle(1, 1, 2) == False",
                "assert right_angle_triangle(20, 21, 29) == True"
            ],
            "failed_tests": [
                "assert right_angle_triangle(-3, -4, -5) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 190,
        "completion_tokens": 406
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
                "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"",
                "assert find_max([\"z\", \"b\", \"a\"]) == \"a\"",
                "assert find_max([\"123\", \"@@@@\", \"abcd\"]) == \"abcd\"",
                "assert find_max([\"aabbcc\", \"abc\", \"aabbccdd\"]) == \"aabbccdd\"",
                "assert find_max([\"hello\", \"world\", \"python\", \"code\"]) == \"python\""
            ],
            "failed_tests": [
                "assert find_max([]) == \"\" (IndexError: list index out of range)"
            ]
        },
        "prompt_tokens": 202,
        "completion_tokens": 278
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(5, 10, 10) == [15, 0]",
                "assert eat(3, 7, 10) == [10, 3]",
                "assert eat(2, 15, 8) == [10, 0]",
                "assert eat(10, 0, 5) == [10, 5]",
                "assert eat(4, 8, 0) == [4, 0]",
                "assert eat(0, 0, 0) == [0, 0]",
                "assert eat(0, 5, 10) == [5, 5]",
                "assert eat(1000, 1000, 1000) == [2000, 0]",
                "assert eat(10, 0, 0) == [10, 0]",
                "assert eat(0, 1000, 0) == [0, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 359,
        "completion_tokens": 362
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['+', '-'], [1, 2, 3]) == 0",
                "assert do_algebra(['*', '//'], [4, 5, 2]) == 10",
                "assert do_algebra(['**'], [2, 3]) == 8",
                "assert do_algebra(['+', '+', '+'], [1, 1, 1, 1]) == 4",
                "assert do_algebra(['-', '-'], [10, 5, 6]) == -1",
                "assert do_algebra(['*', '*', '*'], [2, 3, 4, 5]) == 120"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 289,
        "completion_tokens": 457
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"1234\") == \"4321\"",
                "assert solve(\"@\") == \"@\"",
                "assert solve(\"A\") == \"a\"",
                "assert solve(\"!!!\") == \"!!!\"",
                "assert solve(\"a\") == \"A\"",
                "assert solve(\"a1B2\") == \"A1b2\"",
                "assert solve(\"\") == \"\"",
                "assert solve(\"ABCD\") == \"abcd\"",
                "assert solve(\"aBcD\") == \"AbCd\"",
                "assert solve(\"1\") == \"1\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 189,
        "completion_tokens": 371
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('') is None",
                "assert string_to_md5('123') == '202cb962ac59075b964b07152d234b70'"
            ],
            "failed_tests": [
                "assert string_to_md5('This is a long string to test the md5 function with more characters') == 'd2ddea18f00665ce8623e36bd4e3c7c5' (AssertionError: )",
                "assert string_to_md5('  leading and trailing spaces  ') == '0d9454f4b2a63668c7fc562d7f92a929' (AssertionError: )",
                "assert string_to_md5('     ') == '7215ee9c7d9dc229d2921a40e899ec5f' (AssertionError: )"
            ]
        },
        "prompt_tokens": 158,
        "completion_tokens": 285
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(2, 8) == [2, 4, 6, 8]",
                "assert generate_integers(2, 7) == [2, 4, 6]",
                "assert generate_integers(4, 4) == [4]",
                "assert generate_integers(10, 1) == [2, 4, 6, 8]",
                "assert generate_integers(8, 2) == [2, 4, 6, 8]",
                "assert generate_integers(1, 8) == [2, 4, 6, 8]",
                "assert generate_integers(5, 5) == []"
            ],
            "failed_tests": [
                "assert generate_integers(1000000, 1000006) == [1000000, 1000002, 1000004, 1000006] (AssertionError: )"
            ]
        },
        "prompt_tokens": 186,
        "completion_tokens": 388
    }
]