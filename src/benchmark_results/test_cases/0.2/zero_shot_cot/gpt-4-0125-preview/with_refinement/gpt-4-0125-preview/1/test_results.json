[
    {
        "task_id": "HumanEval/0",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 3.0, 5.0], 1.5) == False",
                "assert has_close_elements([1.0, 2.5, 4.0], 1.5) == False",
                "assert has_close_elements([1.0, 1.4, 3.0], 0.5) == True",
                "assert has_close_elements([-1.0, -1.2, -2.0], 0.3) == True",
                "assert has_close_elements([-1.0, 0.2, 1.0], 1.3) == True",
                "assert has_close_elements([], 0.5) == False",
                "assert has_close_elements([1.0], 0.5) == False",
                "assert has_close_elements([2.0, 2.0, 2.0], 0.1) == True",
                "assert has_close_elements([1.0, 2.0, 3.0], 0.0001) == False",
                "assert has_close_elements([1.0, 2.0, 3.0], 5.0) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 429
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('()') == ['()']",
                "assert separate_paren_groups('()()') == ['()', '()']",
                "assert separate_paren_groups('(())') == ['(())']",
                "assert separate_paren_groups('()(())') == ['()', '(())']",
                "assert separate_paren_groups('() (()) (()())') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('((()))(())') == ['((()))', '(())']",
                "assert separate_paren_groups('') == []",
                "assert separate_paren_groups('     ') == []"
            ],
            "failed_tests": [
                "assert separate_paren_groups('a(b)c(d)e') == ['(b)', '(d)'] (AssertionError: )",
                "assert separate_paren_groups(' ( () ) (( )) ((( ))) (( )( )) ') == ['()', '(())', '((()))', '(()())'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 197,
        "completion_tokens": 363
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(0.123) == 0.123",
                "assert truncate_number(100.0) == 0.0",
                "assert truncate_number(0.0001) == 0.0001"
            ],
            "failed_tests": [
                "assert truncate_number(1234.5678) == 0.5678 (AssertionError: )",
                "assert truncate_number(999.9999) == 0.9999 (AssertionError: )"
            ]
        },
        "prompt_tokens": 167,
        "completion_tokens": 174
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([5, -5]) == False",
                "assert below_zero([10, 20, 30]) == False",
                "assert below_zero([-1]) == True",
                "assert below_zero([1] * 10000 + [-9999]) == False",
                "assert below_zero([10, -20, 15]) == True",
                "assert below_zero([1] * 10000 + [-10001]) == True",
                "assert below_zero([5, -2, 3, -1, 2]) == False",
                "assert below_zero([]) == False",
                "assert below_zero([10, -5, -10]) == True",
                "assert below_zero([3, -4, 2, -1]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 201,
        "completion_tokens": 339
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1, 2, 3, 4]) == 1.0",
                "assert mean_absolute_deviation([1.5, 2.5, 3.5, 4.5]) == 1.0",
                "assert mean_absolute_deviation([-2, -1, 0, 1, 2]) == 1.2",
                "assert mean_absolute_deviation([5, 5, 5, 5]) == 0.0",
                "assert mean_absolute_deviation([10]) == 0.0",
                "assert mean_absolute_deviation([-3, -1, 2, 4]) == 2.5"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([0, 1, 2, 3, 4]) == 1.6 (AssertionError: )",
                "assert mean_absolute_deviation([10, 15, 10, 20, 15, 10, 5, 0, 5, 10]) == 5.0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 199,
        "completion_tokens": 299
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([], 4) == []",
                "assert intersperse([1], 4) == [1]",
                "assert intersperse([1, 2], 4) == [1, 4, 2]",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
                "assert intersperse([-1, -2, -3], 4) == [-1, 4, -2, 4, -3]",
                "assert intersperse([1, 2, 3], -4) == [1, -4, 2, -4, 3]",
                "assert intersperse([0, 0, 0], 4) == [0, 4, 0, 4, 0]",
                "assert intersperse([1, 2, 3], 0) == [1, 0, 2, 0, 3]",
                "assert intersperse([1, 2, 3, 4, 5], 9) == [1, 9, 2, 9, 3, 9, 4, 9, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 174,
        "completion_tokens": 413
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('()') == [1]",
                "assert parse_nested_parens('(())') == [2]",
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('(((())))') == [4]",
                "assert parse_nested_parens('() () ()') == [1, 1, 1]",
                "assert parse_nested_parens('') == []",
                "assert parse_nested_parens('     ') == []",
                "assert parse_nested_parens('() (()) (()(())) (((())))') == [1, 2, 3, 4]",
                "assert parse_nested_parens('(()((())()))') == [4]",
                "assert parse_nested_parens('(()()) () (((()))) (()) (()(()))') == [2, 1, 4, 2, 3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 194,
        "completion_tokens": 352
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring([], 'a') == []",
                "assert filter_by_substring(['xyz', 'bcd', 'efg'], 'a') == []",
                "assert filter_by_substring(['abc', 'bac', 'ca'], 'a') == ['abc', 'bac', 'ca']",
                "assert filter_by_substring(['abc', 'xyz', 'bac'], 'a') == ['abc', 'bac']",
                "assert filter_by_substring(['a', 'b', 'abc'], 'abc') == ['abc']",
                "assert filter_by_substring(['abc', 'def', 'ghi'], '') == ['abc', 'def', 'ghi']",
                "assert filter_by_substring(['a b', 'c d', 'efg'], ' ') == ['a b', 'c d']",
                "assert filter_by_substring(['abc', 'AbC', 'aBc'], 'A') == ['AbC']",
                "assert filter_by_substring(['123', '456', '789'], '2') == ['123']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 175,
        "completion_tokens": 411
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([1, 2, 3, 4]) == (10, 24)",
                "assert sum_product([5]) == (5, 5)",
                "assert sum_product([1, -2, 3, -4]) == (-2, 24)",
                "assert sum_product([0, 1, 2, 3]) == (6, 0)",
                "assert sum_product([0, -1, -2, -3]) == (-6, 0)",
                "assert sum_product([0, 0, 0]) == (0, 0)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 192,
        "completion_tokens": 257
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]",
                "assert rolling_max([1, 3, 2, 5, 4]) == [1, 3, 3, 5, 5]",
                "assert rolling_max([5, 1, 2, 3, 4]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
                "assert rolling_max([]) == []",
                "assert rolling_max([-1, -3, -2, -5]) == [-1, -1, -1, -1]",
                "assert rolling_max([-3, 1, -2, 2, -1, 3]) == [-3, 1, 1, 2, 2, 3]",
                "assert rolling_max([7]) == [7]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 182,
        "completion_tokens": 400
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('') == True",
                "assert is_palindrome('a') == True",
                "assert is_palindrome('madam') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('Madam') == False",
                "assert is_palindrome('12321') == True",
                "assert is_palindrome('12345') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 224,
        "completion_tokens": 526
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('1010', '0101') == '1111'",
                "assert string_xor('010101', '101010') == '111111'",
                "assert string_xor('11111111', '00000000') == '11111111'",
                "assert string_xor('010', '110') == '100'",
                "assert string_xor('', '') == ''",
                "assert string_xor('10101010', '01010101') == '11111111'",
                "assert string_xor('111', '000') == '111'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 158,
        "completion_tokens": 221
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest([]) is None",
                "assert longest(['hello']) == 'hello'",
                "assert longest(['a', 'b', 'c']) == 'a'",
                "assert longest(['short', 'longer', 'longest']) == 'longest'",
                "assert longest(['a', 'BB', 'ccc']) == 'ccc'",
                "assert longest(['a', 'two words', 'three words now']) == 'three words now'",
                "assert longest(['  leading', 'trailing ', 'both ends ']) == 'both ends '"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 184,
        "completion_tokens": 306
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(3, 5) == 1",
                "assert greatest_common_divisor(5, 15) == 5",
                "assert greatest_common_divisor(24, 18) == 6",
                "assert greatest_common_divisor(10, 10) == 10",
                "assert greatest_common_divisor(0, 9) == 9",
                "assert greatest_common_divisor(0, 0) == 0",
                "assert greatest_common_divisor(-24, 18) == 6",
                "assert greatest_common_divisor(123456, 789012) == 12"
            ],
            "failed_tests": [
                "assert greatest_common_divisor(-8, -12) == 4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 152,
        "completion_tokens": 307
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
                "assert all_prefixes('a') == ['a']",
                "assert all_prefixes('') == []",
                "assert all_prefixes('a b') == ['a', 'a ', 'a b']",
                "assert all_prefixes('123') == ['1', '12', '123']",
                "assert all_prefixes('aaa') == ['a', 'aa', 'aaa']",
                "assert all_prefixes('abcdef') == ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']",
                "assert all_prefixes('a!@') == ['a', 'a!', 'a!@']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 141,
        "completion_tokens": 204
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(0) == '0'",
                "assert string_sequence(5) == '0 1 2 3 4 5'",
                "assert string_sequence(1) == '0 1'",
                "assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'",
                "assert string_sequence(-1) == ''",
                "assert len(string_sequence(10000).split()) == 10001"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 150,
        "completion_tokens": 270
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('abcABC') == 3",
                "assert count_distinct_characters('aabbcC') == 3",
                "assert count_distinct_characters('') == 0",
                "assert count_distinct_characters('bbbbBBB') == 1",
                "assert count_distinct_characters('\u00f1\u00d1') == 1",
                "assert count_distinct_characters('a1\u00f1A1\u00d1') == 3"
            ],
            "failed_tests": [
                "assert count_distinct_characters('a A a') == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 152,
        "completion_tokens": 206
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o| o|') == [2, 2]",
                "assert parse_music('o    o|   .|') == [4, 2, 1]",
                "assert parse_music('o o| .|') == [4, 2, 1]",
                "assert parse_music('o o') == [4, 4]",
                "assert parse_music('o o| .| o| .| o o| .| .| o| o') == [4, 2, 1, 2, 1, 4, 2, 1, 1, 2, 4]",
                "assert parse_music('.| .| .|') == [1, 1, 1]",
                "assert parse_music('o|') == [2]",
                "assert parse_music('') == []",
                "assert parse_music('o') == [4]",
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 254,
        "completion_tokens": 344
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('', 'a') == 0",
                "assert how_many_times('hello', 'h') == 1",
                "assert how_many_times('hello hello', 'hello') == 2",
                "assert how_many_times('aaaa', 'aa') == 3",
                "assert how_many_times('hello', 'hello') == 1",
                "assert how_many_times('hello', 'world') == 0",
                "assert how_many_times('abababab', 'ab') == 4",
                "assert how_many_times('hello', 'hello world') == 0",
                "assert how_many_times('Hello hello', 'hello') == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 170,
        "completion_tokens": 326
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('four') == 'four'",
                "assert sort_numbers('one two') == 'one two'",
                "assert sort_numbers('nine one') == 'one nine'",
                "assert sort_numbers('nine eight seven six five four three two one zero') == 'zero one two three four five six seven eight nine'",
                "assert sort_numbers('five five four four') == 'four four five five'",
                "assert sort_numbers('zero one two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'",
                "assert sort_numbers('') == ''",
                "assert sort_numbers('  three four one  ') == 'one three four'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 187,
        "completion_tokens": 222
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([-1.0, 1.0, -0.1, 0.1]) == (-0.1, 0.1)",
                "assert find_closest_elements([-5.0, -4.5, -4.4, -3.0]) == (-4.5, -4.4)",
                "assert find_closest_elements([0.001, 0.002, 1.0, 2.0]) == (0.001, 0.002)",
                "assert find_closest_elements([10.0, 1.5, 1.45, 20.0, 30.0]) == (1.45, 1.5)",
                "assert find_closest_elements([0.2, 0.202, 3.0, 4.0, 5.0]) == (0.2, 0.202)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 5.998, 6.0]) == (5.998, 6.0)",
                "assert find_closest_elements([2.0, -0.5, -0.4, 3.0]) == (-0.5, -0.4)"
            ],
            "failed_tests": [
                "assert find_closest_elements([-1.0, 0.0, 1.0, 2.0]) == (0.0, 1.0) (AssertionError: )"
            ]
        },
        "prompt_tokens": 248,
        "completion_tokens": 568
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1, 2, 3, 4, 5]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([1.5, 2.5, 3.5]) == [0.0, 0.5, 1.0]",
                "assert rescale_to_unit([0, 5, 10]) == [0.0, 0.5, 1.0]"
            ],
            "failed_tests": [
                "assert rescale_to_unit([2, 2, 2, 2]) == [0.0, 0.0, 0.0, 0.0] (ZeroDivisionError: division by zero)",
                "assert rescale_to_unit([1000000, 5000000, 10000000]) == [0.0, 0.4, 1.0] (AssertionError: )",
                "assert rescale_to_unit([0.0001, 0.0005, 0.001]) == [0.0, 0.5, 1.0] (AssertionError: )"
            ]
        },
        "prompt_tokens": 205,
        "completion_tokens": 397
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_integers([1, 2.5, 'hello', 3]) == [1, 3]",
                "assert filter_integers(['string', 3.14, [], {}]) == []",
                "assert filter_integers([10, 20, 30]) == [10, 20, 30]",
                "assert filter_integers([]) == []",
                "assert filter_integers([1, 2+3j, 3, 4j]) == [1, 3]",
                "assert filter_integers([None, 1, None, 2]) == [1, 2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 173,
        "completion_tokens": 241
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('') == 0",
                "assert strlen('a') == 1",
                "assert strlen('hello') == 5",
                "assert strlen('hello world') == 11",
                "assert strlen(' \\t\\n') == 3",
                "assert strlen('12345') == 5",
                "assert strlen('\u3053\u3093\u306b\u3061\u306f') == 5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 125,
        "completion_tokens": 203
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(13) == 1",
                "assert largest_divisor(10) == 5",
                "assert largest_divisor(15) == 5",
                "assert largest_divisor(100) == 50",
                "assert largest_divisor(2) == 1",
                "assert largest_divisor(97) == 1",
                "assert largest_divisor(49) == 7",
                "assert largest_divisor(50) == 25"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 134,
        "completion_tokens": 230
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(13) == [13]",
                "assert factorize(100) == [2, 2, 5, 5]",
                "assert factorize(8) == [2, 2, 2]",
                "assert factorize(27) == [3, 3, 3]",
                "assert factorize(1) == []",
                "assert factorize(210) == [2, 3, 5, 7]",
                "assert factorize(17) == [17]",
                "assert factorize(45) == [3, 3, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 208,
        "completion_tokens": 255
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([5, 5, 5, 5, 5]) == []",
                "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert remove_duplicates([-1, -2, -2, -3, -4]) == [-1, -3, -4]",
                "assert remove_duplicates([]) == []",
                "assert remove_duplicates([1, 2, 1, 3, 4, 3, 5]) == [2, 4, 5]",
                "assert remove_duplicates([6, 6, 6, 6, 7, 6]) == [7]",
                "assert remove_duplicates([1, -1, 2, -1, 2, 3]) == [1, 3]",
                "assert remove_duplicates([10, 9, 8, 9, 7, 6, 5, 6]) == [10, 8, 7, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 166,
        "completion_tokens": 351
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('Hello') == 'hELLO'",
                "assert flip_case('WORLD') == 'world'",
                "assert flip_case('python') == 'PYTHON'",
                "assert flip_case('Hello World') == 'hELLO wORLD'",
                "assert flip_case('Python3.8!') == 'pYTHON3.8!'",
                "assert flip_case('') == ''",
                "assert flip_case('A') == 'a'",
                "assert flip_case('b') == 'B'",
                "assert flip_case('Hello, World! 123') == 'hELLO, wORLD! 123'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 130,
        "completion_tokens": 247
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate([]) == ''",
                "assert concatenate(['hello']) == 'hello'",
                "assert concatenate(['a', 'b', 'c']) == 'abc'",
                "assert concatenate(['hello ', 'world']) == 'hello world'",
                "assert concatenate(['1', '2', '3']) == '123'",
                "assert concatenate(['a1', 'b2', 'c3']) == 'a1b2c3'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 139,
        "completion_tokens": 179
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['xyz', 'bcd', 'cde'], 'a') == []",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']",
                "assert filter_by_prefix(['apple', 'apricot', 'amber'], 'a') == ['apple', 'apricot', 'amber']",
                "assert filter_by_prefix(['abc', 'def', 'ghi'], '') == ['abc', 'def', 'ghi']",
                "assert filter_by_prefix(['1apple', '2banana', '1carrot', '3date'], '1') == ['1apple', '1carrot']",
                "assert filter_by_prefix(['apple', 'Apricot', 'amber'], 'A') == ['Apricot']"
            ],
            "failed_tests": [
                "assert filter_by_prefix(['start', 'stop', 'stare', 'star'], 'star') == ['star'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 169,
        "completion_tokens": 455
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 2, -4, 5, 6, 0]) == [2, 5, 6]",
                "assert get_positive([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]",
                "assert get_positive([-10, -20, -30, -40, -50]) == []",
                "assert get_positive([]) == []",
                "assert get_positive([0, 0, 0, 0]) == []",
                "assert get_positive([5]) == [5]",
                "assert get_positive([-5]) == []",
                "assert get_positive([0]) == []",
                "assert get_positive([1, -1, 2, -2, 3, -3]) == [1, 2, 3]",
                "assert get_positive([-1000000, 500000, -300000, 700000, 1000000]) == [500000, 700000, 1000000]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 195,
        "completion_tokens": 288
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(11) == True",
                "assert is_prime(6) == False",
                "assert is_prime(13441) == True",
                "assert is_prime(2) == True",
                "assert is_prime(100) == False",
                "assert is_prime(1) == False",
                "assert is_prime(-7) == False",
                "assert is_prime(0) == False",
                "assert is_prime(104729) == True",
                "assert is_prime(104730) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 181,
        "completion_tokens": 207
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert round(find_zero([-6, 11, -6, 1]), 2) in [1.0, 2.0, 3.0]",
                "assert round(find_zero([-4, 2]), 2) == 2.0",
                "assert poly([3, 2], 0) == 3",
                "assert poly([3, 2], -1) == 1",
                "assert poly([3, 2, 1], 1) == 6",
                "assert poly([5], 0) == 5",
                "assert poly([5], -1) == 5",
                "assert poly([3, 2, 1], 0) == 3"
            ],
            "failed_tests": [
                "assert round(find_zero([4, 0, -2]), 2) == 1.41 (OverflowError: math range error)"
            ]
        },
        "prompt_tokens": 341,
        "completion_tokens": 506
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_third([1, 2]) == [1, 2]",
                "assert sort_third([1, 2, 3]) == [1, 2, 3]",
                "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]",
                "assert sort_third([5, 5, 5, 3, 3, 3, 1, 1, 1]) == [1, 5, 5, 3, 3, 3, 5, 1, 1]",
                "assert sort_third([]) == []",
                "assert sort_third([1, 2, 3, 4]) == [1, 2, 3, 4]"
            ],
            "failed_tests": [
                "assert sort_third([8, 1, 6, 5, 3, 9, 2, 4, 7]) == [2, 1, 6, 4, 3, 9, 5, 8, 7] (AssertionError: )",
                "assert sort_third([\"a\", \"b\", \"c\", 1, 2, 3]) == [\"a\", \"b\", \"c\", 1, 2, 3] (TypeError: '<' not supported between instances of 'int' and 'str')"
            ]
        },
        "prompt_tokens": 232,
        "completion_tokens": 572
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
                "assert unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert unique([-3, -1, -2, -3, -1]) == [-3, -2, -1]",
                "assert unique([-2, 0, 2, -2, 3]) == [-2, 0, 2, 3]",
                "assert unique([]) == []",
                "assert unique(['orange', 'banana', 'apple']) == ['apple', 'banana', 'orange']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 155,
        "completion_tokens": 304
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([1, 2, 3]) == 3",
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123",
                "assert max_element([-1, -2, -3, -4]) == -1",
                "assert max_element([42]) == 42",
                "assert max_element([7, 7, 7, 7, 7]) == 7",
                "assert max_element([0, -1, -2, -3, -4]) == 0",
                "assert max_element([-100, 1000, 50, 999]) == 1000",
                "assert max_element([1.5, 2.5, 3.5, 2.3, 3.1]) == 3.5",
                "assert max_element([100, 2, 3, 4, 5]) == 100",
                "assert max_element([1, 2, 100, 4, 5]) == 100"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 164,
        "completion_tokens": 412
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(10) == 0",
                "assert fizz_buzz(12) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 161,
        "completion_tokens": 348
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_even([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
                "assert sort_even([5, 1, 3, 2, 4]) == [3, 1, 4, 2, 5]",
                "assert sort_even([-3, 0, -1, 5, -2]) == [-3, 0, -2, 5, -1]",
                "assert sort_even([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]",
                "assert sort_even([1]) == [1]",
                "assert sort_even([]) == []",
                "assert sort_even([7, 6, 5, 4, 3, 2, 1]) == [1, 6, 3, 4, 5, 2, 7]",
                "assert sort_even([-5, -4, -3, -2, -1]) == [-5, -4, -3, -2, -1]",
                "assert sort_even([0, 9, 8, 7, 6]) == [0, 9, 6, 7, 8]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 205,
        "completion_tokens": 382
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode_cyclic(\"a\") == \"a\", \"Test with string length 1 failed.\"",
                "assert encode_cyclic(\"\") == \"\", \"Test with empty string failed.\"",
                "assert decode_cyclic(encode_cyclic(\"hello\")) == \"hello\", \"Decoding encoded 'hello' failed.\"",
                "assert encode_cyclic(\"hi\") == \"hi\", \"Test with string length 2 failed.\"",
                "assert decode_cyclic(\"hi\") == \"hi\", \"Test with string length 2 failed.\"",
                "assert decode_cyclic(\"a\") == \"a\", \"Test with single character string failed.\"",
                "assert decode_cyclic(\"\") == \"\", \"Test with empty string failed.\""
            ],
            "failed_tests": [
                "assert encode_cyclic(\"test\") == \"etst\", \"Test with string length 4 failed.\" (AssertionError: Test with string length 4 failed.)",
                "assert encode_cyclic(\"abcxyz\") == \"bcaxyz\", \"Test with string length divisible by 3 failed.\" (AssertionError: Test with string length divisible by 3 failed.)",
                "assert encode_cyclic(\"hello\") == \"ellho\", \"Test with string length not divisible by 3, shorter tail failed.\" (AssertionError: Test with string length not divisible by 3, shorter tail failed.)"
            ]
        },
        "prompt_tokens": 240,
        "completion_tokens": 408
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(1) == 2",
                "assert prime_fib(2) == 3",
                "assert prime_fib(3) == 5",
                "assert prime_fib(4) == 13",
                "assert prime_fib(5) == 89",
                "assert prime_fib(6) == 233"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 179,
        "completion_tokens": 203
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
                "assert triples_sum_to_zero([1, 3, -2, 1]) == True",
                "assert triples_sum_to_zero([1]) == False",
                "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
                "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True",
                "assert triples_sum_to_zero([-3, 1, 2, 3, -1, -2]) == True",
                "assert triples_sum_to_zero([0, 0, 0, 1, 2, 3]) == True",
                "assert triples_sum_to_zero([1, 1, 1, 1]) == False",
                "assert triples_sum_to_zero([0, 0, 0]) == True"
            ],
            "failed_tests": [
                "assert triples_sum_to_zero([-5, -4, -3, 1, 2, 8]) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 241,
        "completion_tokens": 395
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(0) == 0",
                "assert car_race_collision(1) == 1"
            ],
            "failed_tests": [
                "assert car_race_collision(2) == 2 (AssertionError: )",
                "assert car_race_collision(5) == 5 (AssertionError: )",
                "assert car_race_collision(100) == 100 (AssertionError: )"
            ]
        },
        "prompt_tokens": 233,
        "completion_tokens": 141
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([-1, -2, -3]) == [0, -1, -2]",
                "assert incr_list([0, 0, 0]) == [1, 1, 1]",
                "assert incr_list([-5, 3, -1, 2]) == [-4, 4, 0, 3]",
                "assert incr_list([5]) == [6]",
                "assert incr_list([]) == []",
                "assert incr_list([10, 20, 30, 40, 50]) == [11, 21, 31, 41, 51]",
                "assert incr_list([2, 2, 2, 2]) == [3, 3, 3, 3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 190,
        "completion_tokens": 253
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True",
                "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
                "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
                "assert pairs_sum_to_zero([]) == False",
                "assert pairs_sum_to_zero([1]) == False",
                "assert pairs_sum_to_zero([-1, -3, -5, -7]) == False",
                "assert pairs_sum_to_zero([-1, 1, 2, 3]) == True",
                "assert pairs_sum_to_zero([-1, 1, -2, 2, 3]) == True",
                "assert pairs_sum_to_zero([0, 1, 3, 5]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 239,
        "completion_tokens": 342
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert change_base(8, 3) == '22'",
                "assert change_base(8, 2) == '1000'",
                "assert change_base(7, 2) == '111'",
                "assert change_base(1, 2) == '1'",
                "assert change_base(15, 2) == '1111'",
                "assert change_base(15, 8) == '17'",
                "assert change_base(9, 9) == '10'",
                "assert change_base(10, 3) == '101'",
                "assert change_base(31, 5) == '111'"
            ],
            "failed_tests": [
                "assert change_base(0, 2) == '0' (AssertionError: )"
            ]
        },
        "prompt_tokens": 173,
        "completion_tokens": 318
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(10, 10) == 50.0",
                "assert triangle_area(0, 10) == 0",
                "assert triangle_area(10, 0) == 0",
                "assert triangle_area(0, 0) == 0",
                "assert triangle_area(10000, 3000) == 15000000.0"
            ],
            "failed_tests": [
                "assert triangle_area(5.5, 2.2) == 6.05 (AssertionError: )",
                "assert triangle_area(0.1, 0.1) == 0.005 (AssertionError: )"
            ]
        },
        "prompt_tokens": 128,
        "completion_tokens": 205
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib4(0) == 0, \"The base case fib4(0) should return 0.\"",
                "assert fib4(1) == 0, \"The base case fib4(1) should return 0.\"",
                "assert fib4(2) == 2, \"The base case fib4(2) should return 2.\"",
                "assert fib4(3) == 0, \"The base case fib4(3) should return 0.\"",
                "assert fib4(4) == 2, \"fib4(4) should return 2, as it is the sum of fib4(0), fib4(1), fib4(2), and fib4(3).\"",
                "assert fib4(5) == 4, \"fib4(5) should return 4, as it is the sum of fib4(1), fib4(2), fib4(3), and fib4(4).\"",
                "assert fib4(6) == 8, \"fib4(6) should return 8, as it is the sum of fib4(2), fib4(3), fib4(4), and fib4(5).\"",
                "assert fib4(7) == 14, \"fib4(7) should return 14, as it is the sum of fib4(3), fib4(4), fib4(5), and fib4(6).\""
            ],
            "failed_tests": [
                "assert fib4(20) == 66526, \"fib4(20) should return 66526, testing the function's efficiency and correctness at higher values.\" (AssertionError: fib4(20) should return 66526, testing the function's efficiency and correctness at higher values.)"
            ]
        },
        "prompt_tokens": 253,
        "completion_tokens": 408
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([3, 1, 2, 4, 5]) == 3",
                "assert median([-5, -1, -3, -2, -4]) == -3",
                "assert median([1, 2, 2, 3, 4]) == 2",
                "assert median([42]) == 42",
                "assert median([5, 15]) == 10.0",
                "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5",
                "assert median([-2, -1, 0, 1, 2]) == 0",
                "assert median([0, 0, 1, 2, 3]) == 1",
                "assert median([-3, -2, -1, 0, 0]) == -1"
            ],
            "failed_tests": [
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 157,
        "completion_tokens": 331
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('') == True",
                "assert is_palindrome('a') == True",
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('racecar') == True",
                "assert is_palindrome('python') == False",
                "assert is_palindrome('12321') == True",
                "assert is_palindrome('12345') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 153,
        "completion_tokens": 285
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(3, 5) == 3",
                "assert modp(1101, 101) == 2",
                "assert modp(0, 101) == 1",
                "assert modp(3, 11) == 8",
                "assert modp(100, 101) == 1",
                "assert modp(7, 7) == 2**7 % 7",
                "assert modp(1, 101) == 2",
                "assert modp(10, 2) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 187,
        "completion_tokens": 381
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_shift('a') == 'f'",
                "assert encode_shift('hello') == 'mjqqt'",
                "assert encode_shift('') == ''",
                "assert encode_shift('abcdefghijklmnopqrstuvwxyz') == 'fghijklmnopqrstuvwxyzabcde'",
                "assert decode_shift('f') == 'a'",
                "assert decode_shift('mjqqt') == 'hello'",
                "assert decode_shift('') == ''",
                "assert decode_shift('fghijklmnopqrstuvwxyzabcde') == 'abcdefghijklmnopqrstuvwxyz'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 172,
        "completion_tokens": 298
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('') == ''",
                "assert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'",
                "assert remove_vowels('abcdef') == 'bcdf'",
                "assert remove_vowels('aaaaa') == ''",
                "assert remove_vowels('aaBAA') == 'B'",
                "assert remove_vowels('zbcd') == 'zbcd'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 204,
        "completion_tokens": 170
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 4, 10], 100) == True",
                "assert below_threshold([1, 20, 4, 10], 20) == False",
                "assert below_threshold([1, 20, 4, 10], 5) == False",
                "assert below_threshold([], 5) == True",
                "assert below_threshold([1, 2, 3], 10) == True",
                "assert below_threshold([-1, -2, -3], 0) == True",
                "assert below_threshold([-1, -2, -3], -4) == False",
                "assert below_threshold([-1, -2, -3], 0) == True",
                "assert below_threshold([1, 2, 3], 0) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 161,
        "completion_tokens": 285
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(2, 3) == 5",
                "assert add(-4, -6) == -10",
                "assert add(5, -2) == 3",
                "assert add(-3, 2) == -1",
                "assert add(0, 5) == 5",
                "assert add(-5, 0) == -5",
                "assert add(0, 0) == 0",
                "assert add(100000, 200000) == 300000"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 135,
        "completion_tokens": 175
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
                "assert same_chars('abcd', 'dddddddabc') == True",
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('eabcd', 'dddddddabc') == False",
                "assert same_chars('abcd', 'dddddddabce') == False",
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False",
                "assert same_chars('abc', 'abc') == True",
                "assert same_chars('', 'abc') == False",
                "assert same_chars('', '') == True",
                "assert same_chars('dcba', 'abcd') == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 222,
        "completion_tokens": 308
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(0) == 0",
                "assert fib(1) == 1",
                "assert fib(2) == 1",
                "assert fib(3) == 2",
                "assert fib(5) == 5",
                "assert fib(10) == 55",
                "assert fib(15) == 610",
                "assert fib(8) == 21"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 134,
        "completion_tokens": 270
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing('<') == False",
                "assert correct_bracketing('<>') == True",
                "assert correct_bracketing('<<><>>') == True",
                "assert correct_bracketing('><<>') == False",
                "assert correct_bracketing('') == True",
                "assert correct_bracketing('<<<>>>') == True",
                "assert correct_bracketing('<<>>><') == False",
                "assert correct_bracketing('<>>>') == False",
                "assert correct_bracketing('<><><><><><><><><><>') == True",
                "assert correct_bracketing('><><><><><><><><><><') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 174,
        "completion_tokens": 280
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 2, 4, 20]) == True",
                "assert monotonic([1, 20, 4, 10]) == False",
                "assert monotonic([4, 1, 0, -10]) == True",
                "assert monotonic([1, 1, 2, 3]) == True",
                "assert monotonic([3, 2, 2, 1]) == True",
                "assert monotonic([1]) == True",
                "assert monotonic([]) == True",
                "assert monotonic([2, 2, 2, 2]) == True",
                "assert monotonic([-10, -5, 0, 5]) == True",
                "assert monotonic([5, 0, -5, -10]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 169,
        "completion_tokens": 284
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 4, 3, 34, 653, 2, 5, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
                "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]",
                "assert common([10, 20, 30], [1, 2, 3]) == []",
                "assert common([], [1, 2, 3]) == []",
                "assert common([], []) == []",
                "assert common([\"apple\", \"banana\", \"cherry\"], [\"banana\", \"cherry\", \"fig\"]) == [\"banana\", \"cherry\"]",
                "assert common([1, \"apple\", 2.5], [\"banana\", 3.14]) == []",
                "assert common([1, 1, 1, 1], [1, 1, 1, 1]) == [1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 196,
        "completion_tokens": 353
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(15) == 5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 145,
        "completion_tokens": 166
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(30) == 465",
                "assert sum_to_n(10) == 55"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 176,
        "completion_tokens": 127
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"(\") == False",
                "assert correct_bracketing(\"()\") == True",
                "assert correct_bracketing(\"(()())\") == True",
                "assert correct_bracketing(\")(()\") == False",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"()()\") == True",
                "assert correct_bracketing(\"(((())))\") == True",
                "assert correct_bracketing(\"(()(()\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 171,
        "completion_tokens": 242
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
                "assert derivative([1, 2, 3]) == [2, 6]",
                "assert derivative([5]) == []",
                "assert derivative([]) == []",
                "assert derivative([-3, 5, -2, 4]) == [5, -4, 12]",
                "assert derivative([2, 3]) == [3]",
                "assert derivative([0, 0, 0, 5]) == [0, 0, 15]",
                "assert derivative([10, -20, 30, -40, 50]) == [-20, 60, -120, 200]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 190,
        "completion_tokens": 271
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fibfib(0) == 0, \"Base case fibfib(0) should return 0\"",
                "assert fibfib(1) == 0, \"Base case fibfib(1) should return 0\"",
                "assert fibfib(2) == 1, \"Base case fibfib(2) should return 1\"",
                "assert fibfib(5) == 4, \"fibfib(5) should return 4\"",
                "assert fibfib(8) == 24, \"fibfib(8) should return 24\"",
                "assert fibfib(10) == 81, \"fibfib(10) should return 81\""
            ],
            "failed_tests": [
                "assert fibfib(3) == 2, \"fibfib(3) should return 2 (0+0+1)\" (AssertionError: fibfib(3) should return 2 (0+0+1))",
                "assert fibfib(4) == 4, \"fibfib(4) should return 4 (0+1+2)\" (AssertionError: fibfib(4) should return 4 (0+1+2))"
            ]
        },
        "prompt_tokens": 231,
        "completion_tokens": 305
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"aeiou\") == 5",
                "assert vowels_count(\"bcdfg\") == 0",
                "assert vowels_count(\"AEIOUY\") == 6",
                "assert vowels_count(\"banana\") == 3",
                "assert vowels_count(\"cyst\") == 0",
                "assert vowels_count(\"The quick brown fox jumps over the lazy dog\") == 11"
            ],
            "failed_tests": [
                "assert vowels_count(\"\") == 0 (IndexError: string index out of range)",
                "assert vowels_count(\"AbCdEfGhIjOk\") == 3 (AssertionError: )",
                "assert vowels_count(\"h3ll0!\") == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 208,
        "completion_tokens": 274
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(5, 1) == \"5\"",
                "assert circular_shift(987654321, 10) == \"123456789\"",
                "assert circular_shift(1234, 5) == \"4321\"",
                "assert circular_shift(789, 3) == \"789\"",
                "assert circular_shift(567, 0) == \"567\"",
                "assert circular_shift(123456789, 9) == \"123456789\"",
                "assert circular_shift(34, 2) == \"34\"",
                "assert circular_shift(123, 1) == \"312\""
            ],
            "failed_tests": [
                "assert circular_shift(890, -1) == \"089\" (AssertionError: )",
                "assert circular_shift(456, 2) == \"645\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 164,
        "completion_tokens": 358
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"\") == 0",
                "assert digitSum(\"abAB\") == 131",
                "assert digitSum(\"abcCd\") == 67",
                "assert digitSum(\"helloE\") == 69",
                "assert digitSum(\"woArBld\") == 131",
                "assert digitSum(\"aAaaaXa\") == 153",
                "assert digitSum(\"lowercase\") == 0",
                "assert digitSum(\"UPPER\") == sum(map(ord, \"UPPER\"))",
                "assert digitSum(\"1A2B3C\") == 198"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 194,
        "completion_tokens": 364
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
                "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
                "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95",
                "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19",
                "assert fruit_distribution(\"10 apples and 10 oranges\", 30) == 10",
                "assert fruit_distribution(\"4 apples and 5 oranges\", 9) == 0",
                "assert fruit_distribution(\"0 apples and 0 oranges\", 15) == 15",
                "assert fruit_distribution(\"500 apples and 400 oranges\", 1000) == 100",
                "assert fruit_distribution(\"1 apples and 1 oranges\", 3) == 1",
                "assert fruit_distribution(\"0 apples and 0 oranges\", 0) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 292,
        "completion_tokens": 285
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([]) == []",
                "assert pluck([2]) == [2, 0]",
                "assert pluck([1, 3, 5]) == []",
                "assert pluck([6, 4, 2, 4, 2]) == [2, 2]",
                "assert pluck([1, 2, 3, 4]) == [2, 1]",
                "assert pluck([2, 4, 6, 8]) == [2, 0]",
                "assert pluck([3, 5, 7, 10]) == [10, 3]",
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
                "assert pluck(list(range(1, 10001))) == [2, 1]",
                "assert pluck([2, 4, 6, 8, 10]) == [2, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 394,
        "completion_tokens": 310
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert search([4, 1, 2, 2, 3, 1]) == 2",
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
                "assert search([5, 5, 4, 4, 4]) == -1",
                "assert search([1]) == 1",
                "assert search([3, 3, 3, 2, 2, 1]) == 3",
                "assert search([6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 2, 2, 1]) == 6",
                "assert search([3, 2, 2, 1, 1, 1]) == 2",
                "assert search([1, 1, 1, 2, 2, 3]) == 2",
                "assert search([10]) == -1",
                "assert search([2, 3, 4, 5]) == -1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 247,
        "completion_tokens": 424
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([4, 3, 2, 1]) == [1, 4, 2, 3]",
                "assert strange_sort_list([-1, -2, -3, -4]) == [-4, -1, -3, -2]",
                "assert strange_sort_list([-2, 0, 1, 3]) == [-2, 3, 0, 1]",
                "assert strange_sort_list([10, 2, 7, 3, 11, 5]) == [2, 11, 3, 10, 5, 7]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 321
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(3, 4, 5) == 6.00",
                "assert triangle_area(1, 2, 10) == -1",
                "assert triangle_area(-1, 2, 3) == -1",
                "assert triangle_area(0.3, 0.4, 0.5) == 0.06",
                "assert triangle_area(5, 5, 5) == 10.83",
                "assert triangle_area(5, 5, 8) == 12.00",
                "assert triangle_area(0, 5, 7) == -1",
                "assert triangle_area(0, 0, 0) == -1"
            ],
            "failed_tests": [
                "assert triangle_area(3.5, 4.5, 5.5) == 8.14 (AssertionError: )",
                "assert triangle_area(3.3, 4.4, 5.5) == 7.18 (AssertionError: )"
            ]
        },
        "prompt_tokens": 203,
        "completion_tokens": 311
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([1, 2], 5) == False",
                "assert will_it_fly([3, 2, 3], 1) == False",
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([3], 5) == True",
                "assert will_it_fly([2, 2], 4) == True",
                "assert will_it_fly([], 0) == True",
                "assert will_it_fly([1, 2, 3], 6) == False",
                "assert will_it_fly([1, 2, 3, 2, 1], 10) == True",
                "assert will_it_fly([1, 2, 3, 4, 5], 20) == False",
                "assert will_it_fly([-1, -2, -1], 0) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 312,
        "completion_tokens": 369
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1, 3, 5, 7, 9, 7, 5, 3, 2]) == 1",
                "assert smallest_change([-1, -2, -3, -2, -1]) == 0",
                "assert smallest_change([1]) == 0",
                "assert smallest_change([1, 2]) == 1",
                "assert smallest_change([2, 2]) == 0",
                "assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4",
                "assert smallest_change([1, 2, 3, 2, 1]) == 0",
                "assert smallest_change([5, 5, 5, 5, 5]) == 0",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1"
            ],
            "failed_tests": [
                "assert smallest_change([-1, -2, -3, -4, -5, -4, -3, -2, -10]) == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 239,
        "completion_tokens": 424
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match([], []) == []",
                "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']",
                "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']",
                "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']",
                "assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']",
                "assert total_match(['hello', 'world', 'python', 'programming'], ['java', 'c++']) == ['java', 'c++']",
                "assert total_match(['123', '456'], ['789', '101112']) == ['123', '456']",
                "assert total_match(['abc', 'def'], ['ghi', 'jkl']) == ['abc', 'def']",
                "assert total_match(['ABC', 'DEF'], ['abc', 'def']) == ['ABC', 'DEF']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 275,
        "completion_tokens": 326
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(13) == False",
                "assert is_multiply_prime(1) == False",
                "assert is_multiply_prime(14) == False",
                "assert is_multiply_prime(21) == False"
            ],
            "failed_tests": [
                "assert is_multiply_prime(28) == False (AssertionError: )",
                "assert is_multiply_prime(8) == False (AssertionError: )",
                "assert is_multiply_prime(99) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 161,
        "completion_tokens": 329
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(27) == True",
                "assert iscube(-8) == True",
                "assert iscube(1) == True",
                "assert iscube(0) == True",
                "assert iscube(2) == False",
                "assert iscube(729) == True",
                "assert iscube(500) == False",
                "assert iscube(-9) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 192,
        "completion_tokens": 168
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"2357BD\") == 6",
                "assert hex_key(\"\") == 0",
                "assert hex_key(\"ABED1A33\") == 4",
                "assert hex_key(\"AB\") == 1",
                "assert hex_key(\"2020\") == 2",
                "assert hex_key(\"777\") == 3",
                "assert hex_key(\"2\") == 1",
                "assert hex_key(\"A\") == 0",
                "assert hex_key(\"AECF0\") == 0",
                "assert hex_key(\"123456789ABCDEF0\") == 6"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 381,
        "completion_tokens": 275
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(0) == \"db0db\"",
                "assert decimal_to_binary(1) == \"db1db\"",
                "assert decimal_to_binary(2) == \"db10db\"",
                "assert decimal_to_binary(15) == \"db1111db\"",
                "assert decimal_to_binary(32) == \"db100000db\"",
                "assert decimal_to_binary(255) == \"db11111111db\"",
                "assert decimal_to_binary(170) == \"db10101010db\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 221,
        "completion_tokens": 246
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy(\"a\") == False",
                "assert is_happy(\"abcde\") == True",
                "assert is_happy(\"abc\") == True",
                "assert is_happy(\"xyyyz\") == False",
                "assert is_happy(\"abcdefghijklmnopqqrstuvwxyzz\") == False",
                "assert is_happy(\"aabb\") == False",
                "assert is_happy(\"abcdefghijklmnop\") == True",
                "assert is_happy(\"abcd\") == True",
                "assert is_happy(\"aab\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 203,
        "completion_tokens": 259
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([]) == []",
                "assert numerical_letter_grade([3.71, 3.31, 2.71, 2.31, 1.71, 1.31, 0.71]) == ['A', 'A-', 'B', 'B-', 'C', 'C-', 'D']",
                "assert numerical_letter_grade([3.69, 3.29, 2.69, 2.29, 1.69, 1.29, 0.69]) == ['A-', 'B+', 'B-', 'C+', 'C-', 'D+', 'D-']"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'E'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 352,
        "completion_tokens": 446
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('Hello') == True",
                "assert prime_length('abcdcba') == True",
                "assert prime_length('kittens') == True",
                "assert prime_length('orange') == False",
                "assert prime_length('') == False",
                "assert prime_length('Hi') == True",
                "assert prime_length('A') == False",
                "assert prime_length('abcdefghijk') == True",
                "assert prime_length('123456789') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 163,
        "completion_tokens": 224
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert starts_one_ends(1) == 1",
                "assert isinstance(starts_one_ends(10), int)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 126,
        "completion_tokens": 351
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(0) == \"0\"",
                "assert solve(5) == \"101\"",
                "assert solve(11) == \"10\"",
                "assert solve(99) == \"10010\"",
                "assert solve(123) == \"110\"",
                "assert solve(1000) == \"1\"",
                "assert solve(10000) == \"1\"",
                "assert solve(9999) == \"100100\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 215,
        "completion_tokens": 414
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2",
                "assert add([1, 4, 3, 6, 5, 8]) == 18",
                "assert add([1, 3, 5, 7, 9]) == 0",
                "assert add([2, 3, 4, 5, 6, 7]) == 0",
                "assert add([10]) == 0"
            ],
            "failed_tests": [
                "assert add([1, 0, 3, 4, 5]) == 0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 137,
        "completion_tokens": 303
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('Hi') == 'Hi'",
                "assert anti_shuffle('hello') == 'ehllo'",
                "assert anti_shuffle('') == ''",
                "assert anti_shuffle('!!!$$$%%%') == '!!!$$$%%%'",
                "assert anti_shuffle('B4r 2U') == '4Br 2U'"
            ],
            "failed_tests": [
                "assert anti_shuffle('A very    spaced out    sentence') == 'A eerv    adecps tou    ceeennst' (AssertionError: )",
                "assert anti_shuffle('Python Programming') == 'Phnoty Gimamnoprrg' (AssertionError: )"
            ]
        },
        "prompt_tokens": 212,
        "completion_tokens": 247
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([], 1) == []",
                "assert get_row([[2, 3, 4], [5, 6, 7], [8, 9, 10]], 1) == []",
                "assert get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
                "assert get_row([[1], [2, 1], [1, 2, 3]], 1) == [(0, 0), (1, 1), (2, 0)]",
                "assert get_row([[2, 3, 4], [5, 6, 1], [8, 9, 1]], 1) == [(1, 2), (2, 2)]",
                "assert get_row([[1], [1], [1]], 1) == [(0, 0), (1, 0), (2, 0)]",
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]",
                "assert get_row([[2, 3, 1, 1, 1]], 1) == [(0, 4), (0, 3), (0, 2)]",
                "assert get_row([[-1, -2, -3], [-4, -5, -1], [-1, -2, -3]], -1) == [(0, 0), (1, 2), (2, 0)]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 341,
        "completion_tokens": 542
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_array([]) == []",
                "assert sort_array([5]) == [5]",
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
                "assert sort_array([1, 1, 1, 1]) == [1, 1, 1, 1]",
                "assert sort_array([3, 2, 1, 3]) == [3, 3, 2, 1]",
                "assert sort_array([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([0, 1, 2, 3, 4]) == [4, 3, 2, 1, 0]",
                "assert sort_array([0]) == [0]",
                "assert sort_array([0, 0, 0, 0]) == [0, 0, 0, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 285,
        "completion_tokens": 493
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encrypt('') == ''",
                "assert encrypt('a') == 'e'",
                "assert encrypt('z') == 'd'",
                "assert encrypt('hi') == 'lm'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('xyz') == 'bcd'",
                "assert encrypt('wxyz') == 'abcd'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 192,
        "completion_tokens": 390
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([5, 1, 4, 3, 2]) == 2",
                "assert next_smallest([2, 2, 1]) == 2",
                "assert next_smallest([1, 2, 3, 4, 5]) == 2",
                "assert next_smallest([-3, -1, -2]) == -2",
                "assert next_smallest([2, 3, 4, 5, 1]) == 2",
                "assert next_smallest([1]) == None",
                "assert next_smallest([4, 3, 5, 1, 2]) == 2",
                "assert next_smallest([]) == None",
                "assert next_smallest([-1, 0, 1, 2]) == 0",
                "assert next_smallest([1, 1]) == None"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 329
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"Hello world. The sky is blue. It is a sunny day.\") == 0",
                "assert is_bored(\"I am feeling bored.\") == 1",
                "assert is_bored(\"The sky is blue. I love sunny days. What about you?\") == 1",
                "assert is_bored(\"I am bored! I really don't know what to do. Is there anything interesting? I might go outside.\") == 3",
                "assert is_bored(\" The sky is blue.  I am thinking about going for a walk.\") == 1",
                "assert is_bored(\"\") == 0",
                "assert is_bored(\"Hello, I am not bored.\") == 0",
                "assert is_bored(\"Am I bored? No, I am not.\") == 0",
                "assert is_bored(\"I am bored. I don't know what to do. I might just read a book.\") == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 189,
        "completion_tokens": 363
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert any_int(5, 2, 7) == True",
                "assert any_int(3, 2, 2) == False",
                "assert any_int(3, -2, 1) == True",
                "assert any_int(3.6, -2.2, 2) == False",
                "assert any_int(0, 5, 5) == True",
                "assert any_int(2, 2, 2) == False",
                "assert any_int(1000, 500, 500) == True",
                "assert any_int(-5, -3, -2) == True",
                "assert any_int(-4, 2, -6) == True"
            ],
            "failed_tests": [
                "assert any_int(0, 0, 0) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 217,
        "completion_tokens": 286
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'",
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
                "assert encode('bcdfg') == 'BCDFG'",
                "assert encode('') == ''"
            ],
            "failed_tests": [
                "assert encode('aeiou') == 'CGKQM' (AssertionError: )",
                "assert encode('AEIOU') == 'cgkqm' (AssertionError: )",
                "assert encode('Hello World') == 'hKLLQ wQRLD' (AssertionError: )",
                "assert encode('aEiOu') == 'CGkQm' (AssertionError: )",
                "assert encode('Aibohphobia') == 'ckDQHPHQBKC' (AssertionError: )",
                "assert encode('AzU') == 'cBQ' (AssertionError: )"
            ]
        },
        "prompt_tokens": 191,
        "completion_tokens": 318
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
                "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
                "assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13",
                "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11",
                "assert skjkasdkd([0,81,12,3,1,21]) == 3",
                "assert skjkasdkd([0,8,1,2,1,7]) == 7",
                "assert skjkasdkd([0,4,6,8,10,12,14,16]) == 0",
                "assert skjkasdkd([]) == 0",
                "assert skjkasdkd([29]) == 11",
                "assert skjkasdkd([-1, -2, -3, 5, 11, 17]) == 8"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 368,
        "completion_tokens": 465
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) == True",
                "assert check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}) == False",
                "assert check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}) == False",
                "assert check_dict_case({\"NAME\": \"John\", \"AGE\": \"36\", \"CITY\": \"Houston\"}) == True",
                "assert check_dict_case({}) == False",
                "assert check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}) == False",
                "assert check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) == True",
                "assert check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3}) == True",
                "assert check_dict_case({\"A\": 1, \"B\": 2, \"C\": 3}) == True",
                "assert check_dict_case({\"a\": \"apple\", \"b\": 2, \"c\": \"carrot\"}) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 251,
        "completion_tokens": 344
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(5) == [2, 3]",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(0) == []",
                "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(1) == []",
                "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]",
                "assert count_up_to(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]",
                "assert count_up_to(2) == []",
                "assert count_up_to(13) == [2, 3, 5, 7, 11]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 227,
        "completion_tokens": 451
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert multiply(148, 412) == 16",
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(14, -15) == 20",
                "assert multiply(123456789, 987654321) == 9",
                "assert multiply(100, 250) == 0",
                "assert multiply(7, 123) == 21",
                "assert multiply(1, 12345) == 5"
            ],
            "failed_tests": [
                "assert multiply(-12, -22) == 4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 180,
        "completion_tokens": 246
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('aBCdEf') == 1",
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('dBBE') == 0",
                "assert count_upper('') == 0",
                "assert count_upper('A') == 1",
                "assert count_upper('a') == 0",
                "assert count_upper('bAcEd') == 0",
                "assert count_upper('AEIOU') == 3"
            ],
            "failed_tests": [
                "assert count_upper('AeIoUaEiOu') == 3 (AssertionError: )",
                "assert count_upper('AbCdEfGhIj') == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 154,
        "completion_tokens": 262
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"10\") == 10",
                "assert closest_integer(\"-20\") == -20",
                "assert closest_integer(\"15.3\") == 15",
                "assert closest_integer(\"-15.7\") == -16",
                "assert closest_integer(\"14.5\") == 15",
                "assert closest_integer(\"-14.5\") == -15",
                "assert closest_integer(\"0.1\") == 0",
                "assert closest_integer(\"-0.1\") == 0",
                "assert closest_integer(\"123456.789\") == 123457",
                "assert closest_integer(\"-123456.789\") == -123457"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 238,
        "completion_tokens": 252
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(2) == [2, 4]",
                "assert make_a_pile(5) == [5, 7, 9, 11, 13]",
                "assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]",
                "assert make_a_pile(9) == [9, 11, 13, 15, 17, 19, 21, 23, 25]",
                "assert make_a_pile(10) == [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]",
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(20) == [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 214,
        "completion_tokens": 437
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]",
                "assert words_string(\"One,two,three,four,five,six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
                "assert words_string(\"Hello world this is a test\") == [\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]",
                "assert words_string(\"Single\") == [\"Single\"]",
                "assert words_string(\"\") == []",
                "assert words_string(\"  Leading and trailing spaces  \") == [\"Leading\", \"and\", \"trailing\", \"spaces\"]",
                "assert words_string(\",Leading,and,trailing,commas,\") == [\"Leading\", \"and\", \"trailing\", \"commas\"]",
                "assert words_string(\"Multiple   spaces, and,commas,   mixed\") == [\"Multiple\", \"spaces\", \"and\", \"commas\", \"mixed\"]",
                "assert words_string(\"     \") == []",
                "assert words_string(\",,,,,\") == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 198,
        "completion_tokens": 307
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert choose_num(6, 6) == 6",
                "assert choose_num(-6, -2) == -2",
                "assert choose_num(2, 4) == 4",
                "assert choose_num(10, 20) == 20",
                "assert choose_num(-2, 2) == 2"
            ],
            "failed_tests": [
                "assert choose_num(-5, -3) == -1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 176,
        "completion_tokens": 335
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(1, 5) == \"0b11\"",
                "assert rounded_avg(10, 5) == -1",
                "assert rounded_avg(4, 4) == bin(4)",
                "assert rounded_avg(10, 20) == \"0b1111\"",
                "assert rounded_avg(1, 3) == \"0b10\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 222,
        "completion_tokens": 268
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([152, 323, 1422, 10]) == []",
                "assert unique_digits([9, 753, 111]) == [9, 111, 753]",
                "assert unique_digits([]) == []",
                "assert unique_digits([2, 4, 5, 7]) == [5, 7]",
                "assert unique_digits([13579]) == [13579]",
                "assert unique_digits([2468]) == []",
                "assert unique_digits([11, 22, 33, 44, 55]) == [11, 33, 55]",
                "assert unique_digits([1, 22, 333, 4444, 55555]) == [1, 333, 55555]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 184,
        "completion_tokens": 343
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([2, 1, 1, 4, 5, 8, 2, 3, 10, 0, -1]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]",
                "assert by_length([9, 7, 3, 1]) == [\"Nine\", \"Seven\", \"Three\", \"One\"]",
                "assert by_length([]) == []",
                "assert by_length([10, 11, 0, -2, 22]) == []",
                "assert by_length([1, 1, 1, 1]) == [\"One\", \"One\", \"One\", \"One\"]",
                "assert by_length([5]) == [\"Five\"]",
                "assert by_length([15]) == []",
                "assert by_length([-1, -5, 12, 100]) == []",
                "assert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 358,
        "completion_tokens": 359
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(1) == [1]",
                "assert f(2) == [1, 2]",
                "assert f(3) == [1, 2, 6]",
                "assert f(4) == [1, 2, 6, 24]",
                "assert f(5) == [1, 2, 6, 24, 15]",
                "assert f(6) == [1, 2, 6, 24, 15, 720]",
                "assert f(0) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 389
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(1) == (0, 1)",
                "assert even_odd_palindrome(9) == (4, 5)",
                "assert even_odd_palindrome(11) == (4, 6)",
                "assert even_odd_palindrome(12) == (4, 6)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 293,
        "completion_tokens": 542
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_nums([]) == 0",
                "assert count_nums([0, -0, 00]) == 0",
                "assert count_nums([-123]) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 294
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([1, 2, 3, 4, 5]) == True",
                "assert move_one_ball([5, 1, 2, 3, 4]) == True",
                "assert move_one_ball([4, 5, 1, 2, 3]) == True",
                "assert move_one_ball([2, 1, 3, 4, 5]) == False",
                "assert move_one_ball([]) == True",
                "assert move_one_ball([1]) == True",
                "assert move_one_ball([2, 3, 4, 5, 1]) == True",
                "assert move_one_ball([-3, -2, -1, -5, -4]) == True",
                "assert move_one_ball([-1, 3, -2, 2, 1]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 381,
        "completion_tokens": 347
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1, 3, 5], [2, 4, 6]) == \"YES\"",
                "assert exchange([2, 4, 6], [1, 3, 5]) == \"YES\"",
                "assert exchange([2, 4, 6], [8, 10, 12]) == \"YES\"",
                "assert exchange([1, 3, 5], [1, 3, 5]) == \"NO\"",
                "assert exchange([1], [2]) == \"YES\"",
                "assert exchange([1], [3]) == \"NO\"",
                "assert exchange([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]) == \"YES\"",
                "assert exchange([1, 2, 3, 4, 5, 6], [7, 9, 11, 13, 15, 17]) == \"NO\"",
                "assert exchange([1, 3, 5, 7], [2, 4, 6, 8]) == \"YES\"",
                "assert exchange([1, 3, 5, 7, 9], [11, 13, 15, 17, 19]) == \"NO\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 279,
        "completion_tokens": 436
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('a b b a') == {'a': 2, 'b': 2}",
                "assert histogram('a b c a b') == {'a': 2, 'b': 2}",
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('') == {}",
                "assert histogram('a a a a') == {'a': 4}",
                "assert histogram('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p') == {'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2, 'f': 2, 'g': 2, 'h': 2, 'i': 2, 'j': 2, 'k': 2, 'l': 2, 'm': 2, 'n': 2, 'o': 2, 'p': 2}",
                "assert histogram('a b b c c c d d d d') == {'d': 4}",
                "assert histogram('a') == {'a': 1}"
            ],
            "failed_tests": [
                "assert histogram(' a b c a b ') == {'a': 2, 'b': 2} (AssertionError: )"
            ]
        },
        "prompt_tokens": 233,
        "completion_tokens": 426
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"abcdefg\", \"b\") == (\"acdefg\", False)",
                "assert reverse_delete(\"a\", \"b\") == (\"a\", True)",
                "assert reverse_delete(\"hello\", \"xyz\") == (\"hello\", False)",
                "assert reverse_delete(\"\", \"a\") == (\"\", True)",
                "assert reverse_delete(\"abcdedcba\", \"ab\") == (\"cdedc\", True)",
                "assert reverse_delete(\"123@abc!cba@321\", \"@1\") == (\"23abc!cba32\", True)",
                "assert reverse_delete(\"racecar\", \"\") == (\"racecar\", True)",
                "assert reverse_delete(\"\", \"\") == (\"\", True)",
                "assert reverse_delete(\"a\", \"a\") == (\"\", True)",
                "assert reverse_delete(\"aabbccd\", \"b\") == (\"aaccd\", False)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 244,
        "completion_tokens": 415
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['123456']) == [\"the number of odd elements 3n the str3ng 3 of the 3nput.\"]",
                "assert odd_count(['13579']) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\"]",
                "assert odd_count(['2468']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['135', '579', '13579']) == [\"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 5n the str5ng 5 of the 5nput.\"]",
                "assert odd_count(['246', '468', '2468']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\"]"
            ],
            "failed_tests": [
                "assert odd_count(['123', '4567', '890']) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\"] (AssertionError: )",
                "assert odd_count(['12345', '67890', '111', '222']) == [\"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 255,
        "completion_tokens": 583
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([-1, -2, -3]) == -6",
                "assert minSubArraySum([5]) == 5",
                "assert minSubArraySum([-5]) == -5",
                "assert minSubArraySum([10, -2, -3, 4, 5]) == -5",
                "assert minSubArraySum([1, 2, -1, -2, 2, 1]) == -3",
                "assert minSubArraySum([0, 1, 2, -3, 4]) == -3",
                "assert minSubArraySum([0, 0, 0, 0]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 170,
        "completion_tokens": 418
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
                "assert max_fill([[1,1,1,1], [1,1,1,1], [1,1,1,1]], 4) == 3",
                "assert max_fill([[0,0,0,0], [0,0,0,0], [0,0,0,0]], 1) == 0",
                "assert max_fill([[1]], 10) == 1",
                "assert max_fill([[1,0,1,0], [0,1,1,1], [1,1,0,0]], 3) == 3",
                "assert max_fill([[1,1,1,1,1,1,1,1,1,1]], 1) == 10",
                "assert max_fill([[1,0,0,0], [0,0,0,1], [0,1,0,0], [0,0,1,0]], 1) == 4"
            ],
            "failed_tests": [
                "assert max_fill([[1,1,0,1], [0,1,1,1], [1,0,1,0]], 10) == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 405,
        "completion_tokens": 518
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([16, 8, 4, 2]) == [2, 4, 8, 16]",
                "assert sort_array([]) == []",
                "assert sort_array([42]) == [42]",
                "assert sort_array([1023, 512, 256, 128]) == [128, 256, 512, 1023]"
            ],
            "failed_tests": [
                "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4] (AssertionError: )"
            ]
        },
        "prompt_tokens": 252,
        "completion_tokens": 427
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"\", 3) == []",
                "assert select_words(\"a e i o u\", 1) == []",
                "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
                "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
                "assert select_words(\"simple white space\", 2) == []",
                "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]",
                "assert select_words(\"This is a test sentence\", 7) == []",
                "assert select_words(\"A I U E O\", 0) == [\"A\", \"I\", \"U\", \"E\", \"O\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 263,
        "completion_tokens": 355
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"yogurt\") == \"u\"",
                "assert get_closest_vowel(\"FULL\") == \"U\"",
                "assert get_closest_vowel(\"quick\") == \"\"",
                "assert get_closest_vowel(\"ab\") == \"\"",
                "assert get_closest_vowel(\"obstacle\") == \"a\"",
                "assert get_closest_vowel(\"bcdfg\") == \"\"",
                "assert get_closest_vowel(\"a\") == \"\"",
                "assert get_closest_vowel(\"ace\") == \"\"",
                "assert get_closest_vowel(\"sandwich\") == \"i\""
            ],
            "failed_tests": [
                "assert get_closest_vowel(\"beautiful\") == \"i\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 231,
        "completion_tokens": 315
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['', '()']) == 'Yes'",
                "assert match_parens(['(((', ')))']) == 'Yes'",
                "assert match_parens([')', '()(']) == 'Yes'",
                "assert match_parens(['(', ')']) == 'Yes'",
                "assert match_parens(['()(', ')']) == 'Yes'",
                "assert match_parens(['(', '(']) == 'No'",
                "assert match_parens(['', '']) == 'Yes'",
                "assert match_parens([')', ')']) == 'No'"
            ],
            "failed_tests": [
                "assert match_parens([')))', '(((']) == 'No' (AssertionError: )",
                "assert match_parens([')', '(']) == 'No' (AssertionError: )"
            ]
        },
        "prompt_tokens": 250,
        "completion_tokens": 366
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
                "assert maximum([4, -4, 4], 2) == [4, 4]",
                "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
                "assert maximum([1, 2, 3, 4, 5], 0) == []",
                "assert maximum([100], 1) == [100]",
                "assert maximum([3, 1, 2], 3) == [1, 2, 3]",
                "assert maximum([-1000, 1000, 0], 2) == [0, 1000]"
            ],
            "failed_tests": [
                "assert maximum([-1, -2, -3, -1, -2], 4) == [-3, -2, -1, -1] (AssertionError: )"
            ]
        },
        "prompt_tokens": 299,
        "completion_tokens": 377
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9",
                "assert solution([2, 4, 6, 8, 10]) == 0",
                "assert solution([9]) == 9",
                "assert solution([8]) == 0",
                "assert solution([-5, -8, -7, -1]) == -12",
                "assert solution([]) == 0"
            ],
            "failed_tests": [
                "assert solution([2, 7, 4, 10]) == 7 (AssertionError: )",
                "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 18 (AssertionError: )"
            ]
        },
        "prompt_tokens": 179,
        "completion_tokens": 345
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add_elements([10, 20, 30, 40], 4) == 100",
                "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
                "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 15",
                "assert add_elements([100, 200, 3, 4000, 5], 1) == 0",
                "assert add_elements([100, 200, 300, 400], 4) == 0",
                "assert add_elements([10, 20, 30, 40, 50], 3) == 60",
                "assert add_elements([99], 1) == 99",
                "assert add_elements([100], 1) == 0",
                "assert add_elements([-1, -2, -3, -4], 4) == -10"
            ],
            "failed_tests": [
                "assert add_elements([-100, -20, -3, -4000], 4) == -23 (AssertionError: )"
            ]
        },
        "prompt_tokens": 210,
        "completion_tokens": 415
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(1) == [1]",
                "assert get_odd_collatz(4) == [1]",
                "assert len(get_odd_collatz(27)) > 10"
            ],
            "failed_tests": [
                "assert get_odd_collatz(7) == [1, 7, 11, 13, 17] (AssertionError: )"
            ]
        },
        "prompt_tokens": 313,
        "completion_tokens": 483
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('03-00-2000') == False",
                "assert valid_date('02-29-2020') == True",
                "assert valid_date('03-11-2000') == True",
                "assert valid_date('') == False",
                "assert valid_date('01-32-2020') == False",
                "assert valid_date('06/04/2020') == False",
                "assert valid_date('01-01-0001') == True"
            ],
            "failed_tests": [
                "assert valid_date('04-30-2020') == True (AssertionError: )",
                "assert valid_date('12-31-2020') == True (AssertionError: )",
                "assert valid_date('03-11-20') == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 345,
        "completion_tokens": 369
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"ABCDefghIJKL\") == 2",
                "assert split_words(\"Hello    world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"abcdefghijklmnopqrstuvwxyz\") == 13",
                "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"abcdef\") == 3",
                "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"\") == 0"
            ],
            "failed_tests": [
                "assert split_words(\"ace\") == 3 (AssertionError: )",
                "assert split_words(\"bdf\") == 0 (AssertionError: )",
                "assert split_words(\"Hello\") == [\"Hello\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 222,
        "completion_tokens": 314
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([5]) == True",
                "assert is_sorted([1, 2, 3, 4, 5]) == True",
                "assert is_sorted([1, 3, 2, 4, 5]) == False",
                "assert is_sorted([1, 2, 3, 4, 5, 6]) == True",
                "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True",
                "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False",
                "assert is_sorted([1, 2, 2, 2, 3, 4]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 331,
        "completion_tokens": 308
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersection((1, 2), (2, 3)) == \"NO\"",
                "assert intersection((-3, -1), (-5, 5)) == \"YES\"",
                "assert intersection((1, 2), (3, 4)) == \"NO\"",
                "assert intersection((2, 5), (3, 7)) == \"YES\"",
                "assert intersection((-10, -7), (-9, -6)) == \"YES\"",
                "assert intersection((10, 100), (50, 150)) == \"NO\"",
                "assert intersection((5, 10), (10, 15)) == \"NO\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 336,
        "completion_tokens": 315
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([1, 2, 2, -4]) == -9",
                "assert prod_signs([0, 1]) == 0",
                "assert prod_signs([]) == None",
                "assert prod_signs([1, 2, 3]) == 6",
                "assert prod_signs([-1, -2, -3]) == -6",
                "assert prod_signs([5]) == 5",
                "assert prod_signs([-5]) == -5",
                "assert prod_signs([0]) == 0",
                "assert prod_signs([0, 0, 0]) == 0",
                "assert prod_signs([-1, 0, 1]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 204,
        "completion_tokens": 229
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]",
                "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]",
                "assert minPath([[10, 12, 5], [1, 3, 8], [4, 6, 2]], 4) == [1, 3, 1, 3]",
                "assert minPath([[3, 4], [1, 2]], 2) == [1, 2]",
                "assert minPath([[2, 1], [4, 3]], 4) == [1, 2, 1, 2]",
                "assert minPath([[2, 3], [1, 4]], 3) == [1, 2, 1]"
            ],
            "failed_tests": [
                "assert minPath([[15, 14, 12], [13, 11, 9], [10, 8, 6]], 5) == [6, 8, 6, 8, 6] (AssertionError: )",
                "assert minPath([[7, 6, 5], [4, 3, 2], [1, 9, 8]], 6) == [1, 2, 3, 2, 1, 2] (AssertionError: )",
                "assert minPath([[1]], 1) == [1] (ValueError: min() arg is an empty sequence)"
            ]
        },
        "prompt_tokens": 478,
        "completion_tokens": 566
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert tri(0) == [1]",
                "assert tri(1) == [1, 3]",
                "assert tri(2) == [1, 3, 2]",
                "assert tri(3) == [1, 3, 2, 8]"
            ],
            "failed_tests": [
                "assert tri(6) == [1, 3, 2, 8, 3, 14, 4] (AssertionError: )"
            ]
        },
        "prompt_tokens": 317,
        "completion_tokens": 261
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digits(1) == 1",
                "assert digits(4) == 0",
                "assert digits(235) == 15",
                "assert digits(2468) == 0",
                "assert digits(1357) == 105",
                "assert digits(123456789) == 945",
                "assert digits(1) == 1",
                "assert digits(2) == 0",
                "assert digits(333) == 27",
                "assert digits(2222) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 153,
        "completion_tokens": 324
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[[]]') == True",
                "assert is_nested('[]]]]]]][[[[[]') == False",
                "assert is_nested('[][]') == False",
                "assert is_nested('[]') == False",
                "assert is_nested('[[][]]') == True",
                "assert is_nested('[[]][[') == True",
                "assert is_nested('') == False",
                "assert is_nested('[[[[]]]]') == True",
                "assert is_nested('[][[]][][[]]') == True"
            ],
            "failed_tests": [
                "assert is_nested('[][][][][][][][]') == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 215,
        "completion_tokens": 242
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 14",
                "assert sum_squares([1, 4, 9]) == 98",
                "assert sum_squares([1, 3, 5, 7]) == 84",
                "assert sum_squares([1.4, 4.2, 0]) == 29",
                "assert sum_squares([-2.4, 1, 1]) == 6",
                "assert sum_squares([4.5]) == 25",
                "assert sum_squares([]) == 0",
                "assert sum_squares([100, 200, 300]) == 140000"
            ],
            "failed_tests": [
                "assert sum_squares([-1.1, -2.5, -3.3]) == 15 (AssertionError: )"
            ]
        },
        "prompt_tokens": 239,
        "completion_tokens": 289
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
                "assert check_if_last_char_is_a_letter(\"\") == False",
                "assert check_if_last_char_is_a_letter(\"a\") == True",
                "assert check_if_last_char_is_a_letter(\"apple pi e!\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e  \") == False",
                "assert check_if_last_char_is_a_letter(\"   \") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi 3\") == False"
            ],
            "failed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pi!e\") == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 219,
        "completion_tokens": 324
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1, 2, 4, 3, 5]) == 3",
                "assert can_arrange([1, 2, 3]) == -1",
                "assert can_arrange([-3, -2, 0, -1]) == 3",
                "assert can_arrange([-5, -2, 0, 3, 7]) == -1",
                "assert can_arrange([10]) == -1",
                "assert can_arrange([1, 2]) == -1",
                "assert can_arrange([2, 1]) == 1",
                "assert can_arrange([1, 3, 5, 7, 9, 11, 10, 12, 14, 16]) == 6"
            ],
            "failed_tests": [
                "assert can_arrange([5, 4, 3, 2, 1]) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 185,
        "completion_tokens": 410
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([2, -4, 1, -3, 5, 7]) == (-3, 1)",
                "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
                "assert largest_smallest_integers([-2, -4, -1, -3, -5, -7]) == (-1, None)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([0, 0, 0]) == (None, None)",
                "assert largest_smallest_integers([0, -1, 2, -3, 4, 5, -6]) == (-1, 2)",
                "assert largest_smallest_integers([7]) == (None, 7)",
                "assert largest_smallest_integers([-7]) == (-7, None)",
                "assert largest_smallest_integers([0]) == (None, None)",
                "assert largest_smallest_integers([1, 2, 3, -1, -2, -3, -1, 2, 3]) == (-1, 1)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 220,
        "completion_tokens": 367
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(1, 2.5) == 2.5",
                "assert compare_one(1, \"2,3\") == \"2,3\"",
                "assert compare_one(\"5,1\", \"6\") == \"6\"",
                "assert compare_one(\"1\", 1) == None",
                "assert compare_one(2.5, 2.5) == None",
                "assert compare_one(\"1.5\", 2.0) == 2.0",
                "assert compare_one(\"3,5\", \"2,2\") == \"3,5\"",
                "assert compare_one(3.5, \"2.2\") == 3.5",
                "assert compare_one(-1, -2) == -1",
                "assert compare_one(\"-5\", 3) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 223,
        "completion_tokens": 326
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(2) == False",
                "assert is_equal_to_sum_even(8) == True",
                "assert is_equal_to_sum_even(10) == True",
                "assert is_equal_to_sum_even(100) == True",
                "assert is_equal_to_sum_even(9) == False",
                "assert is_equal_to_sum_even(101) == False",
                "assert is_equal_to_sum_even(-8) == False",
                "assert is_equal_to_sum_even(0) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 159,
        "completion_tokens": 263
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(1) == 1",
                "assert special_factorial(2) == 2",
                "assert special_factorial(3) == 12",
                "assert special_factorial(4) == 288"
            ],
            "failed_tests": [
                "assert special_factorial(5) == 2880 (AssertionError: )",
                "assert special_factorial(6) == 34560 (AssertionError: )"
            ]
        },
        "prompt_tokens": 177,
        "completion_tokens": 316
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"Example 1\") == \"Example_1\"",
                "assert fix_spaces(\"Example 6   \") == \"Example_6-\"",
                "assert fix_spaces(\"   \") == \"-\"",
                "assert fix_spaces(\"   Example 4\") == \"-Example_4\"",
                "assert fix_spaces(\"Example 5 \") == \"Example_5_\"",
                "assert fix_spaces(\"Example   3\") == \"Example-3\"",
                "assert fix_spaces(\"\") == \"\"",
                "assert fix_spaces(\" Example 2\") == \"_Example_2\"",
                "assert fix_spaces(\"Example\") == \"Example\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 188,
        "completion_tokens": 284
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"file123.txt\") == 'Yes'",
                "assert file_name_check(\"too.many.dots.txt\") == 'No'",
                "assert file_name_check(\"1example.dll\") == 'No'",
                "assert file_name_check(\"File123.txt\") == 'Yes'",
                "assert file_name_check(\"nodotfiletxt\") == 'No'",
                "assert file_name_check(\"ValidFile123.jpeg\") == 'No'",
                "assert file_name_check(\"unsupported.pdf\") == 'No'",
                "assert file_name_check(\"ValidFile.txt\") == 'Yes'",
                "assert file_name_check(\"program.exe\") == 'Yes'",
                "assert file_name_check(\"library.dll\") == 'Yes'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 296,
        "completion_tokens": 370
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 252,
        "completion_tokens": 311
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"This is a test\") == \"is\"",
                "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
                "assert words_in_sentence(\"cat bat hat\") == \"cat bat hat\""
            ],
            "failed_tests": [
                "assert words_in_sentence(\"by day she sells sea shells\") == \"by day she sea\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 229,
        "completion_tokens": 271
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"1/6\", \"2/1\") == False",
                "assert simplify(\"2/3\", \"3/2\") == True",
                "assert simplify(\"100/200\", \"200/100\") == True",
                "assert simplify(\"123456/789012\", \"789012/123456\") == True",
                "assert simplify(\"2/1\", \"3/1\") == True",
                "assert simplify(\"1/1000000\", \"1000000/1\") == True",
                "assert simplify(\"2/5\", \"3/5\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 237,
        "completion_tokens": 329
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]",
                "assert order_by_points([]) == []"
            ],
            "failed_tests": [
                "assert order_by_points([-5, -23, -4, -32]) == [-5, -4, -23, -32] (AssertionError: )"
            ]
        },
        "prompt_tokens": 197,
        "completion_tokens": 278
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([]) == 0",
                "assert specialFilter([2, 4, 8, 10, 12, 14]) == 0",
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2",
                "assert specialFilter([10, 110, 210]) == 0",
                "assert specialFilter([11, 31, 71]) == 3"
            ],
            "failed_tests": [
                "assert specialFilter([-11, 22, -33, 44, -55]) == 2 (AssertionError: )",
                "assert specialFilter([12, 34, 56, 78, 91, 13]) == 1 (AssertionError: )",
                "assert specialFilter([101, 123, 135, 147, 159, 1617, 1819, 2021, 2223, 2425]) == 6 (AssertionError: )"
            ]
        },
        "prompt_tokens": 201,
        "completion_tokens": 383
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(5) == 1",
                "assert get_max_triples(1) == 0",
                "assert get_max_triples(3) == 0",
                "assert get_max_triples(2) == 0"
            ],
            "failed_tests": [
                "assert get_max_triples(4) == 0 (AssertionError: )",
                "assert get_max_triples(6) == 1 (AssertionError: )",
                "assert get_max_triples(10) == 4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 247,
        "completion_tokens": 272
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Mercury\", \"Neptune\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")",
                "assert bf(\"Earth\", \"Earth\") == ()",
                "assert bf(\"Pluto\", \"Mars\") == ()",
                "assert bf(\"PlanetX\", \"PlanetY\") == ()",
                "assert bf(\"Mars\", \"Jupiter\") == ()",
                "assert bf(\"Earth\", \"Saturn\") == (\"Mars\", \"Jupiter\")",
                "assert bf(\"earth\", \"mars\") == ()"
            ],
            "failed_tests": [
                "assert bf(\"Mercury\", \"Venus\") == (\"Venus\",) (AssertionError: )"
            ]
        },
        "prompt_tokens": 293,
        "completion_tokens": 271
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([]) == []",
                "assert sorted_list_sum(['a', 'abc', 'abcde']) == []",
                "assert sorted_list_sum(['cd', 'ab', 'ef']) == ['ab', 'cd', 'ef']"
            ],
            "failed_tests": [
                "assert sorted_list_sum(['bat', 'cat', 'rat']) == ['bat', 'cat', 'rat'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 269,
        "completion_tokens": 295
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(7, 34, 12) == 34",
                "assert x_or_y(15, 8, 5) == 5",
                "assert x_or_y(2, 10, 20) == 10",
                "assert x_or_y(97, 100, 200) == 100",
                "assert x_or_y(1, 3, 4) == 4",
                "assert x_or_y(11, 5, 5) == 5",
                "assert x_or_y(12, 5, 5) == 5"
            ],
            "failed_tests": [
                "assert x_or_y(-3, 7, 14) == 14 (AssertionError: )",
                "assert x_or_y(0, 1, 2) == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 168,
        "completion_tokens": 290
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([1, 3, 2, 0]) == 10",
                "assert double_the_difference([-1, -2, 0]) == 0",
                "assert double_the_difference([9, -2]) == 81",
                "assert double_the_difference([0]) == 0",
                "assert double_the_difference([]) == 0",
                "assert double_the_difference([-3, -5, -7]) == 0",
                "assert double_the_difference([5, 7, -1, 3]) == 5**2 + 7**2 + 3**2",
                "assert double_the_difference([1.5, 2, 3.5, 4]) == 0",
                "assert double_the_difference(list(range(1, 10001))) == sum(x**2 for x in range(1, 10001, 2))",
                "assert double_the_difference([2, 4, 6, 8]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 219,
        "completion_tokens": 324
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]",
                "assert compare([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) == [1, 1, 1, 1, 1]",
                "assert compare([-1, -2, -3, -4, -5], [-5, -4, -3, -2, -1]) == [4, 2, 0, 2, 4]",
                "assert compare([10, 20, 30, 40, 50], [10, 25, 30, 45, 50]) == [0, 5, 0, 5, 0]",
                "assert compare([0, 0, 0, 0, 0], [0, 1, -1, 2, -2]) == [0, 1, 1, 2, 2]",
                "assert compare([], []) == []",
                "assert compare([1000, 2000, 3000], [1000, 1999, 3001]) == [0, 1, 1]",
                "assert compare([1, -1, 2, -2], [2, -2, 1, -1]) == [1, 1, 1, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 312,
        "completion_tokens": 402
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('Vehicle', ['Wheels', 'EnGinE', 'Lights']) == 'Vehicle.EnGinE'",
                "assert Strongest_Extension('Planet', ['earth', 'MARS', 'venuS']) == 'Planet.MARS'",
                "assert Strongest_Extension('Language', ['Python']) == 'Language.Python'",
                "assert Strongest_Extension('Fruit', ['apple', 'BanAna', 'GRAPE']) == 'Fruit.GRAPE'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('Solo', []) == 'Solo.' (IndexError: list index out of range)",
                "assert Strongest_Extension('Tool', ['Hammer', 'SCrewDriver', 'nail']) == 'Tool.SCrewDriver' (AssertionError: )"
            ]
        },
        "prompt_tokens": 359,
        "completion_tokens": 415
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"hello\", \"ell\") == True",
                "assert cycpattern_check(\"abcd\", \"abd\") == False",
                "assert cycpattern_check(\"abab\", \"baa\") == True",
                "assert cycpattern_check(\"efef\", \"eeff\") == False",
                "assert cycpattern_check(\"himenss\", \"simen\") == True",
                "assert cycpattern_check(\"abc\", \"abcd\") == False",
                "assert cycpattern_check(\"anything\", \"\") == True",
                "assert cycpattern_check(\"\", \"\") == True",
                "assert cycpattern_check(\"a\", \"a\") == True",
                "assert cycpattern_check(\"a\", \"b\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 211,
        "completion_tokens": 333
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(2468) == (4, 0)",
                "assert even_odd_count(13579) == (0, 5)",
                "assert even_odd_count(-1234) == (2, 2)",
                "assert even_odd_count(2) == (1, 0)",
                "assert even_odd_count(3) == (0, 1)",
                "assert even_odd_count(1234567890) == (5, 5)",
                "assert even_odd_count(-5) == (0, 1)",
                "assert even_odd_count(0) == (1, 0)"
            ],
            "failed_tests": [
                "assert even_odd_count(102030) == (3, 0) (AssertionError: )"
            ]
        },
        "prompt_tokens": 147,
        "completion_tokens": 219
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(1) == 'i'",
                "assert int_to_mini_roman(5) == 'v'",
                "assert int_to_mini_roman(8) == 'viii'",
                "assert int_to_mini_roman(4) == 'iv'",
                "assert int_to_mini_roman(44) == 'xliv'",
                "assert int_to_mini_roman(152) == 'clii'",
                "assert int_to_mini_roman(426) == 'cdxxvi'",
                "assert int_to_mini_roman(1000) == 'm'",
                "assert int_to_mini_roman(3) == 'iii'",
                "assert int_to_mini_roman(500) == 'd'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 183,
        "completion_tokens": 336
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(5, 3, 4) == True",
                "assert right_angle_triangle(0, 4, 5) == False",
                "assert right_angle_triangle(3, 4, 8) == False",
                "assert right_angle_triangle(3.0, 4.0, 5.0) == True",
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(1, 2, 3) == False",
                "assert right_angle_triangle(6, 8, 10) == True"
            ],
            "failed_tests": [
                "assert right_angle_triangle(-3, -4, -5) == False (AssertionError: )",
                "assert right_angle_triangle(1, 1, 2**0.5) == True (AssertionError: )",
                "assert right_angle_triangle(1, 1, 2**0.5) == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 190,
        "completion_tokens": 439
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
                "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"",
                "assert find_max([\"123\", \"abc!\", \"@@@@\", \"xyz\"]) == \"abc!\"",
                "assert find_max([\"abc\", \"bcd\", \"cde\"]) == \"abc\"",
                "assert find_max([\"a\", \"b\", \"c\"]) == \"a\"",
                "assert find_max([\"singleword\"]) == \"singleword\"",
                "assert find_max([\"case\", \"Case\"]) == \"Case\""
            ],
            "failed_tests": [
                "assert find_max([]) == \"\" (IndexError: list index out of range)",
                "assert find_max([\"Apple\", \"Banana\", \"Grape\"]) == \"Banana\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 202,
        "completion_tokens": 323
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(5, 6, 10) == [11, 4]",
                "assert eat(4, 8, 9) == [12, 1]",
                "assert eat(1, 10, 10) == [11, 0]",
                "assert eat(2, 11, 5) == [7, 0]",
                "assert eat(10, 0, 5) == [10, 5]",
                "assert eat(3, 5, 0) == [3, 0]",
                "assert eat(0, 0, 0) == [0, 0]",
                "assert eat(5, 0, 10) == [5, 10]",
                "assert eat(1000, 1000, 1000) == [2000, 0]",
                "assert eat(500, 600, 50) == [550, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 359,
        "completion_tokens": 322
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['+', '-'], [1, 2, 3]) == 0",
                "assert do_algebra(['*', '//'], [4, 5, 2]) == 10",
                "assert do_algebra(['**'], [2, 3]) == 8",
                "assert do_algebra(['+', '+', '+'], [1, 2, 3, 4]) == 10",
                "assert do_algebra(['-', '-'], [10, 5, 6]) == -1",
                "assert do_algebra(['**', '*', '+'], [2, 3, 2, 1]) == 17",
                "assert do_algebra(['//'], [1, 2]) == 0"
            ],
            "failed_tests": [
                "assert do_algebra(['+', '-', '*', '//', '**'], [2, 3, 1, 4, 2, 3]) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 289,
        "completion_tokens": 387
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"aB!\") == \"Ab!\"",
                "assert solve(\"AbCd\") == \"aBcD\"",
                "assert solve(\"1234\") == \"4321\"",
                "assert solve(\"ABCD\") == \"abcd\"",
                "assert solve(\"1\") == \"1\"",
                "assert solve(\"abcd\") == \"ABCD\"",
                "assert solve(\"!\") == \"!\"",
                "assert solve(\"a1B2\") == \"A1b2\"",
                "assert solve(\"\") == \"\"",
                "assert solve(\"A\") == \"a\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 189,
        "completion_tokens": 450
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('') is None",
                "assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'",
                "assert string_to_md5('The quick brown fox jumps over the lazy dog') == '9e107d9d372bb6826bd81d3542a419d6'"
            ],
            "failed_tests": [
                "assert string_to_md5('     ') == '7215ee9c7d9dc229d2921a40e899ec5f' (AssertionError: )",
                "assert string_to_md5('\u3053\u3093\u306b\u3061\u306f') == '86fb269d190d2c85f6e0468ceca42a20' (UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-4: ordinal not in range(128))"
            ]
        },
        "prompt_tokens": 158,
        "completion_tokens": 266
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(3, 3) == []",
                "assert generate_integers(2, 8) == [2, 4, 6, 8]",
                "assert generate_integers(8, 2) == [2, 4, 6, 8]",
                "assert generate_integers(5, 5) == []",
                "assert generate_integers(4, 4) == [4]",
                "assert generate_integers(2, 2) == [2]"
            ],
            "failed_tests": [
                "assert generate_integers(30, 20) == [20, 22, 24, 26, 28, 30] (AssertionError: )",
                "assert generate_integers(20, 30) == [20, 22, 24, 26, 28, 30] (AssertionError: )",
                "assert generate_integers(11, 16) == [12, 14, 16] (AssertionError: )",
                "assert generate_integers(10, 15) == [10, 12, 14] (AssertionError: )"
            ]
        },
        "prompt_tokens": 186,
        "completion_tokens": 361
    }
]