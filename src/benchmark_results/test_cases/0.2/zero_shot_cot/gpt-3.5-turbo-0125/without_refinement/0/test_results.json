[
    {
        "task_id": "HumanEval/0",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
                "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 94
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('((()))') == ['((()))']",
                "assert separate_paren_groups('()()()') == ['()', '()', '()']",
                "assert separate_paren_groups('(())()') == ['(())', '()']"
            ],
            "failed_tests": [
                "assert separate_paren_groups('(( ))') == ['(( ))'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 197,
        "completion_tokens": 176
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(7.0) == 0.0",
                "assert truncate_number(10.0) == 0.0"
            ],
            "failed_tests": [
                "assert truncate_number(4.123456) == 0.123456 (AssertionError: )"
            ]
        },
        "prompt_tokens": 167,
        "completion_tokens": 119
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([1, 2, 3]) == False",
                "assert below_zero([1, 2, -4, 5]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 201,
        "completion_tokens": 71
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1, 2, 3, 4]) == 1",
                "assert mean_absolute_deviation([-1, -2, -3, -4]) == 1",
                "assert mean_absolute_deviation([0, 0, 0, 0]) == 0"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([-1.5, 2.5, -3.5, 4.5]) == 2.0 (AssertionError: )",
                "assert mean_absolute_deviation([]) == 0.0 (ZeroDivisionError: division by zero)"
            ]
        },
        "prompt_tokens": 199,
        "completion_tokens": 191
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([], 4) == []",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
                "assert intersperse([5], 0) == [5]",
                "assert intersperse([-1, -2, -3], -4) == [-1, -4, -2, -4, -3]",
                "assert intersperse([1, 1, 1], 0) == [1, 0, 1, 0, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 174,
        "completion_tokens": 157
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('()') == [1]",
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('') == []",
                "assert parse_nested_parens('((()()(()))) ((()())) (((()))) ()') == [4, 3, 4, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 194,
        "completion_tokens": 136
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring([], 'a') == []",
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']",
                "assert filter_by_substring(['xyz', '123', '456'], 'a') == []",
                "assert filter_by_substring(['apple', 'banana', 'cherry'], 'a') == ['apple', 'banana']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 175,
        "completion_tokens": 145
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([1, 2, 3, 4]) == (10, 24)",
                "assert sum_product([-1, 2, -3, 4]) == (2, 24)",
                "assert sum_product([5]) == (5, 5)"
            ],
            "failed_tests": [
                "assert sum_product([-1, -2, -3, -4]) == (-10, -24) (AssertionError: )"
            ]
        },
        "prompt_tokens": 192,
        "completion_tokens": 135
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([]) == []",
                "assert rolling_max([5]) == [5]",
                "assert rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert rolling_max([1, 3, 2, 4, 3, 5]) == [1, 3, 3, 4, 4, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 182,
        "completion_tokens": 184
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_palindrome('') == ''",
                "assert make_palindrome('cat') == 'catac'",
                "assert make_palindrome('cata') == 'catac'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 224,
        "completion_tokens": 61
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_xor('010', '110') == '100'",
                "assert string_xor('000', '000') == '000'",
                "assert string_xor('111', '111') == '000'",
                "assert string_xor('1010', '0101') == '1111'"
            ],
            "failed_tests": [
                "assert string_xor('1010', '110') == '1110' (AssertionError: )"
            ]
        },
        "prompt_tokens": 158,
        "completion_tokens": 114
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest([]) == None",
                "assert longest(['a', 'b', 'c']) == 'a'",
                "assert longest(['a', 'bb', 'ccc']) == 'ccc'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 184,
        "completion_tokens": 71
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(3, 5) == 1",
                "assert greatest_common_divisor(25, 15) == 5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 152,
        "completion_tokens": 60
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('a') == ['a']",
                "assert all_prefixes('ab') == ['a', 'ab']",
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 141,
        "completion_tokens": 72
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(0) == '0'",
                "assert string_sequence(5) == '0 1 2 3 4 5'",
                "assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 150,
        "completion_tokens": 84
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('hello') == 4",
                "assert count_distinct_characters('mississippi') == 4",
                "assert count_distinct_characters('') == 0"
            ],
            "failed_tests": [
                "assert count_distinct_characters('WORLD') == 4 (AssertionError: )",
                "assert count_distinct_characters('HelloWorld') == 8 (AssertionError: )"
            ]
        },
        "prompt_tokens": 152,
        "completion_tokens": 111
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o o o o') == [4, 4, 4, 4]",
                "assert parse_music('o| o| o| o|') == [2, 2, 2, 2]",
                "assert parse_music('.| .| .| .|') == [1, 1, 1, 1]"
            ],
            "failed_tests": [
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4] (AssertionError: )"
            ]
        },
        "prompt_tokens": 254,
        "completion_tokens": 182
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('', 'a') == 0",
                "assert how_many_times('aaa', 'a') == 3",
                "assert how_many_times('aaaa', 'aa') == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 170,
        "completion_tokens": 92
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('three one five') == 'one three five'",
                "assert sort_numbers('nine eight seven six five four three two one') == 'one two three four five six seven eight nine'",
                "assert sort_numbers('one two three four five six seven eight nine') == 'one two three four five six seven eight nine'",
                "assert sort_numbers('seven seven five five three three one one') == 'one one three three five five seven seven'",
                "assert sort_numbers('four') == 'four'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 187,
        "completion_tokens": 142
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 248,
        "completion_tokens": 120
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([0.0, 0.2, 0.4, 0.6, 0.8, 1.0]) == [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]",
                "assert rescale_to_unit([10.0, 15.0, 20.0, 25.0]) == [0.0, 0.3333333333333333, 0.6666666666666666, 1.0]",
                "assert rescale_to_unit([7.0, 9.0]) == [0.0, 1.0]"
            ],
            "failed_tests": [
                "assert rescale_to_unit([3.0, 3.0, 3.0, 3.0]) == [0.0, 0.0, 0.0, 0.0] (ZeroDivisionError: float division by zero)"
            ]
        },
        "prompt_tokens": 205,
        "completion_tokens": 271
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_integers(['a', 3.14, 5]) == [5]",
                "assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]",
                "assert filter_integers([]) == []",
                "assert filter_integers(['a', 'b', 'c']) == []",
                "assert filter_integers([-1, -2, -3]) == [-1, -2, -3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 173,
        "completion_tokens": 151
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('') == 0",
                "assert strlen('a') == 1",
                "assert strlen('hello') == 5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 125,
        "completion_tokens": 57
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(17) == 1",
                "assert largest_divisor(20) == 10",
                "assert largest_divisor(27) == 9"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 134,
        "completion_tokens": 64
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(8) == [2, 2, 2]",
                "assert factorize(25) == [5, 5]",
                "assert factorize(70) == [2, 5, 7]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 208,
        "completion_tokens": 78
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert remove_duplicates([1, 2, 1, 3, 2, 4, 5, 4]) == [3, 5]"
            ],
            "failed_tests": [
                "assert remove_duplicates([1, 1, 1, 1, 1]) == [1] (AssertionError: )"
            ]
        },
        "prompt_tokens": 166,
        "completion_tokens": 117
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('hello') == 'HELLO'",
                "assert flip_case('HELLO') == 'hello'",
                "assert flip_case('HeLLo') == 'hEllO'",
                "assert flip_case('') == ''",
                "assert flip_case('Hello!') == 'hELLO!'",
                "assert flip_case('Hello123') == 'hELLO123'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 130,
        "completion_tokens": 140
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate([]) == ''",
                "assert concatenate(['hello']) == 'hello'",
                "assert concatenate(['a', 'b', 'c']) == 'abc'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 139,
        "completion_tokens": 52
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b') == ['bcd']",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'c') == ['cde']",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'd') == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 169,
        "completion_tokens": 166
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert get_positive([-1, -2, -3, -4, -5]) == []",
                "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
                "assert get_positive([0, 1, 2, 3, 0]) == [1, 2, 3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 195,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(11) == True",
                "assert is_prime(6) == False",
                "assert is_prime(13441) == True",
                "assert is_prime(61) == True",
                "assert is_prime(4) == False",
                "assert is_prime(1) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 181,
        "completion_tokens": 105
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert poly([1, 2], -0.5) == 0",
                "assert poly([-6, 11, -6, 1], 1.0) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 341,
        "completion_tokens": 59
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_third([1, 2, 3]) == [1, 2, 3]",
                "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 232,
        "completion_tokens": 116
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
                "assert unique([1, 1, 1, 1, 1]) == [1]",
                "assert unique([]) == []",
                "assert unique([4, 8, 15, 16, 23, 42]) == [4, 8, 15, 16, 23, 42]",
                "assert unique([7, 3, 5, 3, 7, 5]) == [3, 5, 7]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 155,
        "completion_tokens": 222
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([1, 2, 3]) == 3",
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 164,
        "completion_tokens": 83
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(50) == 0",
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(79) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 161,
        "completion_tokens": 117
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_even([1, 2, 3]) == [1, 2, 3]",
                "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]"
            ],
            "failed_tests": [
                "assert sort_even([9, -2, 5, -4, 7]) == [5, -2, 9, -4, 7] (AssertionError: )",
                "assert sort_even([3, 2, 3, 4, 5, 4]) == [3, 2, 3, 4, 4, 5] (AssertionError: )"
            ]
        },
        "prompt_tokens": 205,
        "completion_tokens": 164
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode_cyclic(\"\") == \"\"",
                "assert encode_cyclic(\"a\") == \"a\"",
                "assert encode_cyclic(\"ab\") == \"ab\"",
                "assert decode_cyclic(\"\") == \"\"",
                "assert decode_cyclic(\"a\") == \"a\""
            ],
            "failed_tests": [
                "assert encode_cyclic(\"abcdef\") == \"bcdaef\" (AssertionError: )",
                "assert encode_cyclic(\"abcde\") == \"bcdea\" (AssertionError: )",
                "assert decode_cyclic(\"bcdaef\") == \"abcdef\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 240,
        "completion_tokens": 182
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(1) == 2",
                "assert prime_fib(2) == 3",
                "assert prime_fib(3) == 5",
                "assert prime_fib(4) == 13",
                "assert prime_fib(5) == 89"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 179,
        "completion_tokens": 134
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
                "assert triples_sum_to_zero([1, 3, -2, 1]) == True",
                "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
                "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True",
                "assert triples_sum_to_zero([1]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 241,
        "completion_tokens": 243
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(1) == 1",
                "assert car_race_collision(2) == 4",
                "assert car_race_collision(3) == 9",
                "assert car_race_collision(0) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 233,
        "completion_tokens": 119
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([]) == []",
                "assert incr_list([5]) == [6]",
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([-1, -2, -3]) == [0, -1, -2]",
                "assert incr_list([0, 0, 0]) == [1, 1, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 190,
        "completion_tokens": 131
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
                "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
                "assert pairs_sum_to_zero([1, 2, 3, 7]) == False",
                "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True",
                "assert pairs_sum_to_zero([1]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 239,
        "completion_tokens": 242
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert change_base(8, 3) == '22'",
                "assert change_base(8, 2) == '1000'",
                "assert change_base(7, 2) == '111'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 173,
        "completion_tokens": 68
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(0, 0) == 0",
                "assert triangle_area(0, 5) == 0",
                "assert triangle_area(5, 0) == 0",
                "assert triangle_area(-5, 3) == -7.5",
                "assert triangle_area(5, -3) == -7.5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 128,
        "completion_tokens": 147
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib4(0) == 0",
                "assert fib4(1) == 0",
                "assert fib4(2) == 2",
                "assert fib4(3) == 0",
                "assert fib4(5) == 4",
                "assert fib4(6) == 8",
                "assert fib4(7) == 14"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 253,
        "completion_tokens": 125
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([3, 1, 2, 4, 5]) == 3",
                "assert median([7]) == 7"
            ],
            "failed_tests": [
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )",
                "assert median([]) == None (IndexError: list index out of range)"
            ]
        },
        "prompt_tokens": 157,
        "completion_tokens": 105
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('') == True",
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('aaaaa') == True",
                "assert is_palindrome('zbcd') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 153,
        "completion_tokens": 78
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(3, 5) == 3",
                "assert modp(1101, 101) == 2",
                "assert modp(0, 101) == 1",
                "assert modp(3, 11) == 8",
                "assert modp(100, 101) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 187,
        "completion_tokens": 131
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode_shift(\"abc\") == \"fgh\"",
                "assert encode_shift(\"\") == \"\"",
                "assert decode_shift(\"fgh\") == \"abc\"",
                "assert decode_shift(\"\") == \"\""
            ],
            "failed_tests": [
                "assert encode_shift(\"XYZ\") == \"CDE\" (AssertionError: )",
                "assert encode_shift(\"AbCdEf\") == \"FgHiJk\" (AssertionError: )",
                "assert decode_shift(\"CDE\") == \"XYZ\" (AssertionError: )",
                "assert decode_shift(\"FgHiJk\") == \"AbCdEf\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 172,
        "completion_tokens": 237
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('') == ''",
                "assert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'",
                "assert remove_vowels('abcdef') == 'bcdf'",
                "assert remove_vowels('aaaaa') == ''",
                "assert remove_vowels('aaBAA') == 'B'",
                "assert remove_vowels('zbcd') == 'zbcd'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 204,
        "completion_tokens": 170
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 4, 10], 100) == True",
                "assert below_threshold([1, 20, 4, 10], 5) == False",
                "assert below_threshold([], 5) == True",
                "assert below_threshold([5, 5, 5, 5], 5) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 161,
        "completion_tokens": 122
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(2, 3) == 5",
                "assert add(-5, 3) == -2",
                "assert add(-10, -5) == -15",
                "assert add(0, 8) == 8",
                "assert add(0, -3) == -3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 135,
        "completion_tokens": 101
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
                "assert same_chars('abcd', 'dddddddabc') == True",
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('eabcd', 'dddddddabc') == False",
                "assert same_chars('abcd', 'dddddddabce') == False",
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 222,
        "completion_tokens": 178
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(1) == 1",
                "assert fib(10) == 55",
                "assert fib(8) == 21"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 134,
        "completion_tokens": 60
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"<>\") == True",
                "assert correct_bracketing(\"<<><>>\") == True",
                "assert correct_bracketing(\"><<>\") == False",
                "assert correct_bracketing(\"<\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 174,
        "completion_tokens": 84
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 2, 4, 20]) == True",
                "assert monotonic([1, 20, 4, 10]) == False",
                "assert monotonic([4, 1, 0, -10]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 169,
        "completion_tokens": 97
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
                "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 196,
        "completion_tokens": 118
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(10) == 5",
                "assert largest_prime_factor(13195) == 29",
                "assert largest_prime_factor(2048) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 145,
        "completion_tokens": 77
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(30) == 465",
                "assert sum_to_n(100) == 5050",
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(10) == 55",
                "assert sum_to_n(1) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 176,
        "completion_tokens": 95
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"(\") == False",
                "assert correct_bracketing(\")\") == False",
                "assert correct_bracketing(\"()\") == True",
                "assert correct_bracketing(\"(()())\") == True",
                "assert correct_bracketing(\")(\") == False",
                "assert correct_bracketing(\"((()))\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 171,
        "completion_tokens": 133
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([3, 2]) == [2]",
                "assert derivative([1, 2, 3]) == [2, 6]",
                "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
                "assert derivative([5]) == []",
                "assert derivative([0, 0, 0]) == [0, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 190,
        "completion_tokens": 185
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(0) == 0",
                "assert fibfib(1) == 0",
                "assert fibfib(2) == 1",
                "assert fibfib(3) == 1",
                "assert fibfib(4) == 2",
                "assert fibfib(5) == 4",
                "assert fibfib(8) == 24"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 231,
        "completion_tokens": 264
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"xyz\") == 0",
                "assert vowels_count(\"hello\") == 2",
                "assert vowels_count(\"HELLO\") == 2",
                "assert vowels_count(\"HeLLo\") == 2"
            ],
            "failed_tests": [
                "assert vowels_count(\"xyzaeiou\") == 6 (AssertionError: )"
            ]
        },
        "prompt_tokens": 208,
        "completion_tokens": 123
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12345, 1) == \"51234\"",
                "assert circular_shift(12345, 2) == \"45123\"",
                "assert circular_shift(12345, 5) == \"12345\"",
                "assert circular_shift(12345, 6) == \"54321\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 164,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"\") == 0",
                "assert digitSum(\"abAB\") == 131",
                "assert digitSum(\"abcCd\") == 67",
                "assert digitSum(\"helloE\") == 69",
                "assert digitSum(\"woArBld\") == 131",
                "assert digitSum(\"aAaaaXa\") == 153"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 194,
        "completion_tokens": 192
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
                "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
                "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95",
                "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 292,
        "completion_tokens": 128
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([4, 2, 3]) == [2, 1]",
                "assert pluck([1, 2, 3]) == [2, 1]",
                "assert pluck([]) == []",
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 394,
        "completion_tokens": 140
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
                "assert search([4, 1, 2, 2, 3, 1]) == 2",
                "assert search([5, 5, 4, 4, 4]) == -1",
                "assert search([1, 1, 1, 1, 1, 1, 1, 1, 1, 10]) == 1"
            ],
            "failed_tests": [
                "assert search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 5 (AssertionError: )"
            ]
        },
        "prompt_tokens": 247,
        "completion_tokens": 231
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 117
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(3, 4, 5) == 6.00",
                "assert triangle_area(1, 2, 10) == -1",
                "assert triangle_area(7, 8, 9) == 26.83",
                "assert triangle_area(5, 12, 13) == 30.00"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 203,
        "completion_tokens": 143
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([1, 2], 5) == False",
                "assert will_it_fly([3, 2, 3], 1) == False",
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([3], 5) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 312,
        "completion_tokens": 170
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([1, 2, 3, 2, 1]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 239,
        "completion_tokens": 110
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match([], []) == []",
                "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']",
                "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']",
                "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']",
                "assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 275,
        "completion_tokens": 218
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(2*3*5) == True",
                "assert is_multiply_prime(97*89*83) == True"
            ],
            "failed_tests": [
                "assert is_multiply_prime(20) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 161,
        "completion_tokens": 112
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(1, 4) == True",
                "assert is_simple_power(2, 2) == True",
                "assert is_simple_power(8, 2) == True",
                "assert is_simple_power(3, 2) == False",
                "assert is_simple_power(3, 1) == False",
                "assert is_simple_power(5, 3) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 224,
        "completion_tokens": 175
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(1) == True",
                "assert iscube(2) == False",
                "assert iscube(-1) == True",
                "assert iscube(64) == True",
                "assert iscube(0) == True",
                "assert iscube(180) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 192,
        "completion_tokens": 108
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"AB\") == 1",
                "assert hex_key(\"1077E\") == 2",
                "assert hex_key(\"ABED1A33\") == 4",
                "assert hex_key(\"123456789ABCDEF0\") == 6",
                "assert hex_key(\"2020\") == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 381,
        "completion_tokens": 218
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(0) == \"db0db\"",
                "assert decimal_to_binary(1) == \"db1db\"",
                "assert decimal_to_binary(10) == \"db1010db\"",
                "assert decimal_to_binary(255) == \"db11111111db\"",
                "assert decimal_to_binary(16) == \"db10000db\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 221,
        "completion_tokens": 118
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy('a') == False",
                "assert is_happy('abc') == True",
                "assert is_happy('aab') == False",
                "assert is_happy('abcd') == True",
                "assert is_happy('aabbcc') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 203,
        "completion_tokens": 127
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([3.8, 2.5, 1.0, 0.5, 3.2]) == ['A', 'C', 'D+', 'D-', 'B'] (AssertionError: )",
                "assert numerical_letter_grade([0.7, 1.3, 2.0, 2.7, 3.3, 4.0]) == ['D', 'C-', 'C+', 'B', 'A-', 'A+'] (AssertionError: )",
                "assert numerical_letter_grade([2.5, 2.5, 2.5, 2.5]) == ['C', 'C', 'C', 'C'] (AssertionError: )",
                "assert numerical_letter_grade([0.0, 4.0, 1.0, 3.7]) == ['E', 'A+', 'D+', 'A'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 352,
        "completion_tokens": 281
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('Hello') == True",
                "assert prime_length('abcdcba') == True",
                "assert prime_length('kittens') == True",
                "assert prime_length('orange') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 163,
        "completion_tokens": 97
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert starts_one_ends(1) == 1"
            ],
            "failed_tests": [
                "assert starts_one_ends(2) == 20 (AssertionError: )",
                "assert starts_one_ends(3) == 300 (AssertionError: )",
                "assert starts_one_ends(4) == 4000 (AssertionError: )"
            ]
        },
        "prompt_tokens": 126,
        "completion_tokens": 81
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(1000) == \"1\"",
                "assert solve(150) == \"110\"",
                "assert solve(147) == \"1100\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 215,
        "completion_tokens": 54
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2",
                "assert add([1, 3, 5, 7, 9]) == 0"
            ],
            "failed_tests": [
                "assert add([2, 4, 6, 8, 10]) == 0 (AssertionError: )",
                "assert add([1, 2, 3, 4, 5, 6, 7, 8]) == 6 (AssertionError: )"
            ]
        },
        "prompt_tokens": 137,
        "completion_tokens": 290
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('Hi') == 'Hi'",
                "assert anti_shuffle('hello') == 'ehllo'",
                "assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 212,
        "completion_tokens": 76
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([[1, 2, 3], [4, 5, 6]], 4) == [(1, 0)]",
                "assert get_row([[1, 2, 3], [4, 5, 6]], 7) == []",
                "assert get_row([[1, 2, 3], [4, 5, 6], [7, 4, 8]], 4) == [(1, 0), (2, 1)]",
                "assert get_row([], 1) == []",
                "assert get_row([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 4]], 4) == [(0, 3), (2, 3)]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 341,
        "completion_tokens": 235
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_array([]) == []",
                "assert sort_array([5]) == [5]",
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 285,
        "completion_tokens": 174
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encrypt('hi') == 'lm'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('gf') == 'kj'",
                "assert encrypt('et') == 'ix'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 192,
        "completion_tokens": 189
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([1, 2, 3, 4, 5]) == 2",
                "assert next_smallest([5, 1, 4, 3, 2]) == 2",
                "assert next_smallest([]) == None",
                "assert next_smallest([1, 1]) == None"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 168
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"\") == 0",
                "assert is_bored(\"Hello world\") == 0",
                "assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1",
                "assert is_bored(\"I am happy. I am bored. I am tired.\") == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 189,
        "completion_tokens": 102
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(5, 2, 7) == True",
                "assert any_int(3, 2, 2) == False",
                "assert any_int(3, -2, 1) == True",
                "assert any_int(3.6, -2.2, 2) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 217,
        "completion_tokens": 108
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'",
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
                "assert encode('') == ''"
            ],
            "failed_tests": [
                "assert encode('HELLO') == 'hJLLO' (AssertionError: )",
                "assert encode('aeiou') == 'CIOUW' (AssertionError: )"
            ]
        },
        "prompt_tokens": 191,
        "completion_tokens": 111
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
                "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
                "assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13",
                "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11",
                "assert skjkasdkd([0,81,12,3,1,21]) == 3",
                "assert skjkasdkd([0,8,1,2,1,7]) == 7"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 368,
        "completion_tokens": 312
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({}) == False",
                "assert check_dict_case({\"name\": \"John\", \"age\": \"36\", \"city\": \"Houston\"}) == True",
                "assert check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) == True",
                "assert check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}) == False",
                "assert check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 251,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(5) == [2, 3]",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(0) == []",
                "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(1) == []",
                "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 227,
        "completion_tokens": 250
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert multiply(148, 412) == 16",
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(14, -15) == 20"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 180,
        "completion_tokens": 98
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_upper('aBCdEf') == 1",
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('dBBE') == 0",
                "assert count_upper('') == 0",
                "assert count_upper('aBcDeF') == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 154,
        "completion_tokens": 118
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"10\") == 10",
                "assert closest_integer(\"15.3\") == 15",
                "assert closest_integer(\"14.5\") == 15",
                "assert closest_integer(\"-14.5\") == -15",
                "assert closest_integer(\"-15.3\") == -15"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 238,
        "completion_tokens": 124
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(3) == [3, 5, 7]",
                "assert make_a_pile(4) == [4, 6, 8, 10]",
                "assert make_a_pile(1) == [1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 214,
        "completion_tokens": 75
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"Hello\") == [\"Hello\"]",
                "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]",
                "assert words_string(\"One two three four five\") == [\"One\", \"two\", \"three\", \"four\", \"five\"]",
                "assert words_string(\"Apple, banana, orange, kiwi\") == [\"Apple\", \"banana\", \"orange\", \"kiwi\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 198,
        "completion_tokens": 137
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(12, 15) == 14",
                "assert choose_num(13, 12) == -1",
                "assert choose_num(10, 10) == 10",
                "assert choose_num(7, 7) == -1",
                "assert choose_num(4, 9) == 8",
                "assert choose_num(3, 8) == 8"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 176,
        "completion_tokens": 168
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(1, 5) == '0b11'",
                "assert rounded_avg(7, 5) == -1",
                "assert rounded_avg(10, 20) == '0b1111'",
                "assert rounded_avg(20, 33) == '0b11010'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 222,
        "completion_tokens": 227
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([152, 323, 1422, 10]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 184,
        "completion_tokens": 121
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]",
                "assert by_length([]) == []",
                "assert by_length([1, -1, 55]) == ['One']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 358,
        "completion_tokens": 130
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(1) == [1]",
                "assert f(2) == [1, 2]",
                "assert f(3) == [1, 2, 6]",
                "assert f(4) == [1, 2, 6, 24]",
                "assert f(5) == [1, 2, 6, 24, 15]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 241
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(3) == (1, 2)",
                "assert even_odd_palindrome(12) == (4, 6)"
            ],
            "failed_tests": [
                "assert even_odd_palindrome(1) == (1, 0) (AssertionError: )"
            ]
        },
        "prompt_tokens": 293,
        "completion_tokens": 72
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_nums([]) == 0",
                "assert count_nums([-1, 11, -11]) == 1",
                "assert count_nums([1, 1, 2]) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 73
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([]) == True",
                "assert move_one_ball([1, 2, 3, 4, 5]) == True",
                "assert move_one_ball([3, 4, 5, 1, 2]) == True",
                "assert move_one_ball([3, 5, 4, 1, 2]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 381,
        "completion_tokens": 145
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"",
                "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
                "assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"YES\"",
                "assert exchange([1, 3, 5, 7], [2, 4, 6, 8]) == \"YES\"",
                "assert exchange([1, 3, 5, 7], [2, 4, 6, 7]) == \"NO\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 279,
        "completion_tokens": 264
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('a b b a') == {'a': 2, 'b': 2}",
                "assert histogram('a b c a b') == {'a': 2, 'b': 2}",
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('') == {}"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 233,
        "completion_tokens": 142
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
                "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)",
                "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 244,
        "completion_tokens": 137
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['13579']) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\"]",
                "assert odd_count(['24680']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['13579', '24680', '123456789']) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\",\n                                                   \"the number of odd elements 0n the str0ng 0 of the 0nput.\",\n                                                   \"the number of odd elements 5n the str5ng 5 of the 5nput.\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 255,
        "completion_tokens": 181
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([-1, -2, -3]) == -6"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 170,
        "completion_tokens": 122
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 405,
        "completion_tokens": 193
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] (AssertionError: )",
                "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] (AssertionError: )",
                "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4] (AssertionError: )"
            ]
        },
        "prompt_tokens": 252,
        "completion_tokens": 385
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"\", 3) == []",
                "assert select_words(\"Hello world\", 0) == []",
                "assert select_words(\"Hello world\", 4) == [\"world\"]"
            ],
            "failed_tests": [
                "assert select_words(\"Hello world\", 1) == [\"world\"] (AssertionError: )",
                "assert select_words(\"Hello world\", 2) == [\"Hello\"] (AssertionError: )",
                "assert select_words(\"Hello world\", 3) == [] (AssertionError: )"
            ]
        },
        "prompt_tokens": 263,
        "completion_tokens": 127
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"yogurt\") == \"u\"",
                "assert get_closest_vowel(\"FULL\") == \"U\"",
                "assert get_closest_vowel(\"quick\") == \"\"",
                "assert get_closest_vowel(\"ab\") == \"\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 231,
        "completion_tokens": 119
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['()(', ')']) == 'Yes'",
                "assert match_parens([')', ')']) == 'No'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 250,
        "completion_tokens": 77
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert maximum([1, 2, 3], 0) == []",
                "assert maximum([5, 3, 7, 1], 4) == [1, 3, 5, 7]",
                "assert maximum([-3, -4, 5], 2) == [-3, 5]"
            ],
            "failed_tests": [
                "assert maximum([-3, 2, 1, 2, -1, -2, 1], 3) == [-1, 1, 2] (AssertionError: )"
            ]
        },
        "prompt_tokens": 299,
        "completion_tokens": 182
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9",
                "assert solution([30, 13, 24, 321]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 179,
        "completion_tokens": 90
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
                "assert add_elements([1, 2, 3, 4, 5], 3) == 6"
            ],
            "failed_tests": [
                "assert add_elements([10, 20, 30, 40, 50], 5) == 100 (AssertionError: )"
            ]
        },
        "prompt_tokens": 210,
        "completion_tokens": 175
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(1) == [1]",
                "assert get_odd_collatz(5) == [1, 5]",
                "assert get_odd_collatz(10) == [1, 5]"
            ],
            "failed_tests": [
                "assert get_odd_collatz(20) == [1, 5, 13, 21] (AssertionError: )",
                "assert get_odd_collatz(50) == [1, 5, 13, 21, 53] (AssertionError: )",
                "assert get_odd_collatz(100) == [1, 5, 13, 21, 53] (AssertionError: )",
                "assert get_odd_collatz(500) == [1, 5, 13, 21, 53, 85, 341] (AssertionError: )",
                "assert get_odd_collatz(1000) == [1, 5, 13, 21, 53, 85, 341] (AssertionError: )"
            ]
        },
        "prompt_tokens": 313,
        "completion_tokens": 241
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('') == False",
                "assert valid_date('02-29-2020') == True",
                "assert valid_date('13-15-2022') == False",
                "assert valid_date('12-32-2022') == False",
                "assert valid_date('06/04/2020') == False"
            ],
            "failed_tests": [
                "assert valid_date('01-31-2022') == True (AssertionError: )",
                "assert valid_date('04-30-2022') == True (AssertionError: )",
                "assert valid_date('02-29-2021') == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 345,
        "completion_tokens": 217
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"abcdef\") == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 222,
        "completion_tokens": 108
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([5]) == True",
                "assert is_sorted([1, 2, 3, 4, 5]) == True",
                "assert is_sorted([1, 3, 2, 4, 5]) == False",
                "assert is_sorted([1, 2, 3, 4, 5, 6]) == True",
                "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True",
                "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False",
                "assert is_sorted([1, 2, 2, 3, 3, 4]) == True",
                "assert is_sorted([1, 2, 2, 2, 3, 4]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 331,
        "completion_tokens": 267
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersection((1, 2), (2, 3)) == \"NO\"",
                "assert intersection((-1, 1), (0, 4)) == \"NO\"",
                "assert intersection((-3, -1), (-5, 5)) == \"YES\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 336,
        "completion_tokens": 133
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([1, 2, 2, -4]) == -9",
                "assert prod_signs([0, 1]) == 0",
                "assert prod_signs([]) == None"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 204,
        "completion_tokens": 162
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1, 2], [3, 4]], 1) == [1]",
                "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]"
            ],
            "failed_tests": [
                "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 3, 6] (AssertionError: )"
            ]
        },
        "prompt_tokens": 478,
        "completion_tokens": 168
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert tri(0) == [3] (AssertionError: )",
                "assert tri(1) == [3, 1] (AssertionError: )",
                "assert tri(2) == [3, 1, 2] (AssertionError: )",
                "assert tri(3) == [3, 1, 2, 8] (AssertionError: )",
                "assert tri(4) == [3, 1, 2, 8, 11] (AssertionError: )"
            ]
        },
        "prompt_tokens": 317,
        "completion_tokens": 136
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digits(1) == 1",
                "assert digits(4) == 0",
                "assert digits(235) == 15",
                "assert digits(2468) == 0",
                "assert digits(123456789) == 945"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 153,
        "completion_tokens": 93
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[[]]') == True",
                "assert is_nested('[]]]]]]][[[[[]') == False",
                "assert is_nested('[][]') == False",
                "assert is_nested('[]') == False",
                "assert is_nested('[[][]]') == True",
                "assert is_nested('[[]][[') == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 215,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 14",
                "assert sum_squares([1, 4, 9]) == 98",
                "assert sum_squares([1, 3, 5, 7]) == 84",
                "assert sum_squares([1.4, 4.2, 0]) == 29",
                "assert sum_squares([-2.4, 1, 1]) == 6"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 239,
        "completion_tokens": 302
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
                "assert check_if_last_char_is_a_letter(\"\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 219,
        "completion_tokens": 130
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1, 2, 4, 3, 5]) == 3",
                "assert can_arrange([1, 2, 3]) == -1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 185,
        "completion_tokens": 123
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([0]) == (None, None)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 220,
        "completion_tokens": 87
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(1, 2.5) == 2.5",
                "assert compare_one(1, \"2,3\") == \"2,3\"",
                "assert compare_one(\"5,1\", \"6\") == \"6\"",
                "assert compare_one(\"1\", 1) is None"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 223,
        "completion_tokens": 121
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(4) == False",
                "assert is_equal_to_sum_even(6) == False",
                "assert is_equal_to_sum_even(8) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 159,
        "completion_tokens": 120
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(1) == 1",
                "assert special_factorial(2) == 2",
                "assert special_factorial(3) == 12",
                "assert special_factorial(4) == 288"
            ],
            "failed_tests": [
                "assert special_factorial(5) == 8640 (AssertionError: )"
            ]
        },
        "prompt_tokens": 177,
        "completion_tokens": 186
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"Example\") == \"Example\"",
                "assert fix_spaces(\"Example 1\") == \"Example_1\"",
                "assert fix_spaces(\" Example 2\") == \"_Example_2\"",
                "assert fix_spaces(\" Example   3\") == \"_Example-3\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 188,
        "completion_tokens": 99
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"example.txt\") == 'Yes'",
                "assert file_name_check(\"1example.dll\") == 'No'",
                "assert file_name_check(\"file1234.txt\") == 'No'",
                "assert file_name_check(\"file.name.txt\") == 'No'",
                "assert file_name_check(\".txt\") == 'No'",
                "assert file_name_check(\"example.pdf\") == 'No'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 296,
        "completion_tokens": 158
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([]) == 0"
            ],
            "failed_tests": [
                "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 285 (AssertionError: )",
                "assert sum_squares([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -285 (AssertionError: )",
                "assert sum_squares([1, -2, 3, -4, 5, -6, 7, -8, 9]) == 285 (AssertionError: )",
                "assert sum_squares([3, 6, 9, 12, 15]) == 1242 (AssertionError: )"
            ]
        },
        "prompt_tokens": 252,
        "completion_tokens": 189
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"This is a test\") == \"is\"",
                "assert words_in_sentence(\"lets go for swimming\") == \"go for\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 229,
        "completion_tokens": 65
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"1/6\", \"2/1\") == False",
                "assert simplify(\"7/10\", \"10/2\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 237,
        "completion_tokens": 112
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([]) == []"
            ],
            "failed_tests": [
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, 1, 11, -11, -12] (AssertionError: )"
            ]
        },
        "prompt_tokens": 197,
        "completion_tokens": 166
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 201,
        "completion_tokens": 109
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(1) == 0",
                "assert get_max_triples(5) == 1"
            ],
            "failed_tests": [
                "assert get_max_triples(10) == 4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 247,
        "completion_tokens": 201
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
                "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"
            ],
            "failed_tests": [
                "assert bf(\"Earth\", \"Mercury\") == (\"Venus\") (AssertionError: )"
            ]
        },
        "prompt_tokens": 293,
        "completion_tokens": 133
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
                "assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]",
                "assert sorted_list_sum([\"abc\", \"def\", \"ghi\", \"jkl\"]) == []"
            ],
            "failed_tests": [
                "assert sorted_list_sum([\"apple\", \"banana\", \"cherry\"]) == [\"apple\", \"cherry\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 269,
        "completion_tokens": 266
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(7, 34, 12) == 34",
                "assert x_or_y(15, 8, 5) == 5",
                "assert x_or_y(2, 100, 200) == 100",
                "assert x_or_y(1, 3, 4) == 4"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 168,
        "completion_tokens": 112
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([1, 3, 5]) == 35",
                "assert double_the_difference([2, 4, 6]) == 0",
                "assert double_the_difference([1, -2, 3, 0, 5]) == 35",
                "assert double_the_difference([]) == 0"
            ],
            "failed_tests": [
                "assert double_the_difference([-1, -3, -5]) == 35 (AssertionError: )"
            ]
        },
        "prompt_tokens": 219,
        "completion_tokens": 279
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]",
                "assert compare([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [4, 2, 0, 2, 4]",
                "assert compare([1, 2, 3, 4, 5], [1, 3, 3, 2, 6]) == [0, 1, 0, 2, 1]",
                "assert compare([-1, -2, -3, -4, -5], [-1, -3, -3, -2, -6]) == [0, 1, 0, 2, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 312,
        "completion_tokens": 234
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
                "assert Strongest_Extension('class', ['Aa', 'Bb', 'Cc']) == 'class.Aa'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('test', ['aBc', 'DeF', 'GhI']) == 'test.GhI' (AssertionError: )",
                "assert Strongest_Extension('example', ['aA', 'Bb', 'Cc', 'DD']) == 'example.aA' (AssertionError: )"
            ]
        },
        "prompt_tokens": 359,
        "completion_tokens": 164
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"abcd\", \"abd\") == False",
                "assert cycpattern_check(\"hello\", \"ell\") == True",
                "assert cycpattern_check(\"whassup\", \"psus\") == False",
                "assert cycpattern_check(\"abab\", \"baa\") == True",
                "assert cycpattern_check(\"efef\", \"eeff\") == False",
                "assert cycpattern_check(\"himenss\", \"simen\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 211,
        "completion_tokens": 183
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(123456) == (3, 3)",
                "assert even_odd_count(2468) == (4, 0)",
                "assert even_odd_count(13579) == (0, 5)",
                "assert even_odd_count(0) == (1, 0)"
            ],
            "failed_tests": [
                "assert even_odd_count(-246813) == (3, 3) (AssertionError: )"
            ]
        },
        "prompt_tokens": 147,
        "completion_tokens": 125
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(1) == 'i'",
                "assert int_to_mini_roman(4) == 'iv'",
                "assert int_to_mini_roman(50) == 'l'",
                "assert int_to_mini_roman(100) == 'c'",
                "assert int_to_mini_roman(500) == 'd'",
                "assert int_to_mini_roman(1000) == 'm'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 183,
        "completion_tokens": 144
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(1, 2, 3) == False",
                "assert right_angle_triangle(5, 12, 13) == True",
                "assert right_angle_triangle(8, 15, 17) == True",
                "assert right_angle_triangle(7, 24, 25) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 190,
        "completion_tokens": 206
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
                "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"",
                "assert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 202,
        "completion_tokens": 126
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(5, 6, 10) == [11, 4]",
                "assert eat(4, 8, 9) == [12, 1]",
                "assert eat(1, 10, 10) == [11, 0]",
                "assert eat(2, 11, 5) == [7, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 359,
        "completion_tokens": 152
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert do_algebra(['+'], [1, 2, 3]) == 6 (AssertionError: )",
                "assert do_algebra(['-'], [10, 5, 3]) == 2 (AssertionError: )",
                "assert do_algebra(['*'], [2, 3, 4]) == 14 (AssertionError: )",
                "assert do_algebra(['//'], [20, 4, 2]) == 2 (AssertionError: )",
                "assert do_algebra(['**'], [2, 3, 2]) == 64 (AssertionError: )"
            ]
        },
        "prompt_tokens": 289,
        "completion_tokens": 126
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solve(\"1234\") == \"4321\"",
                "assert solve(\"ab\") == \"AB\"",
                "assert solve(\"aBcDeF\") == \"AbCdEf\""
            ],
            "failed_tests": [
                "assert solve(\"ABC123\") == \"321cba\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 189,
        "completion_tokens": 121
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('') is None"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 158,
        "completion_tokens": 59
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(2, 8) == [2, 4, 6, 8]",
                "assert generate_integers(8, 2) == [2, 4, 6, 8]",
                "assert generate_integers(10, 14) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 186,
        "completion_tokens": 101
    }
]