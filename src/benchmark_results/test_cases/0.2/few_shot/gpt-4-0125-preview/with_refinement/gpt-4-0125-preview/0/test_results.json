[
    {
        "task_id": "HumanEval/0",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
                "assert has_close_elements([1.5], 0.5) == False",
                "assert has_close_elements([1.0, 2.0, 2.5, 3.5], 0.6) == True",
                "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 352,
        "completion_tokens": 270
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('()()') == ['()', '()']",
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('((())())') == ['((())())']",
                "assert separate_paren_groups('( )( )') == ['()', '()']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 343,
        "completion_tokens": 159
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(0.01) == 0.01"
            ],
            "failed_tests": [
                "assert truncate_number(1234.5678) == 0.5678 (AssertionError: )",
                "assert truncate_number(10.99) == 0.99 (AssertionError: )"
            ]
        },
        "prompt_tokens": 313,
        "completion_tokens": 91
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([10, -15, 5]) == True",
                "assert below_zero([100, -50, -50, -1]) == True",
                "assert below_zero([1, 2, -4, 5]) == True",
                "assert below_zero([100, -50, -25, -25]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 347,
        "completion_tokens": 151
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
                "assert mean_absolute_deviation([0.0, 0.0, 0.0]) == 0.0",
                "assert mean_absolute_deviation([-1.0, 0.0, 1.0]) == 0.6666666666666666",
                "assert mean_absolute_deviation([-2.0, -2.0, -5.0, -5.0]) == 1.5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 345,
        "completion_tokens": 206
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
                "assert intersperse([1, 2, 3, 4], 0) == [1, 0, 2, 0, 3, 0, 4]",
                "assert intersperse([1, 2], -1) == [1, -1, 2]",
                "assert intersperse([10, 20], 5) == [10, 5, 20]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 320,
        "completion_tokens": 172
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('(()) (())') == [2, 2]",
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('((((()))))') == [5]",
                "assert parse_nested_parens('') == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 340,
        "completion_tokens": 150
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring(['123', '456', '789'], '1') == ['123']",
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']",
                "assert filter_by_substring([], 'a') == []",
                "assert filter_by_substring(['mix', 'of', 'UPPER', 'and', 'lower'], 'o') == ['of', 'lower']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 321,
        "completion_tokens": 185
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([-1]) == (-1, -1)",
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([10]) == (10, 10)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 338,
        "completion_tokens": 187
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([1]) == [1]",
                "assert rolling_max([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]",
                "assert rolling_max([]) == []",
                "assert rolling_max([5, 3, 1, 2, 4]) == [5, 5, 5, 5, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 328,
        "completion_tokens": 209
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('12321') == True",
                "assert make_palindrome('palindrome') == 'palindromemordnilap'",
                "assert make_palindrome('') == ''"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 370,
        "completion_tokens": 198
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('010', '110') == '100'",
                "assert string_xor('', '') == ''",
                "assert string_xor('1', '1') == '0'",
                "assert string_xor('111', '000') == '111'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 304,
        "completion_tokens": 143
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest(['one', 'two', 'three', 'four', 'five']) == 'three'",
                "assert longest(['short', 'longer', 'longest', 'longer']) == 'longest'",
                "assert longest(['hello', 'world', 'python', 'code']) == 'python'",
                "assert longest(['same', 'size', 'test']) == 'same'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 330,
        "completion_tokens": 128
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(0, 5) == 5",
                "assert greatest_common_divisor(17, 13) == 1",
                "assert greatest_common_divisor(25, 15) == 5"
            ],
            "failed_tests": [
                "assert greatest_common_divisor(25, -15) == 5 (AssertionError: )"
            ]
        },
        "prompt_tokens": 298,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('1234') == ['1', '12', '123', '1234']",
                "assert all_prefixes('') == []",
                "assert all_prefixes('xyz') == ['x', 'xy', 'xyz']",
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 287,
        "completion_tokens": 116
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(0) == '0'",
                "assert string_sequence(1) == '0 1'",
                "assert string_sequence(5) == '0 1 2 3 4 5'",
                "assert string_sequence(-1) == ''"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 296,
        "completion_tokens": 84
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('Jerry') == 4",
                "assert count_distinct_characters('aaaaa') == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 298,
        "completion_tokens": 144
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('') == []",
                "assert parse_music('o| .| o o| .|') == [2, 1, 4, 2, 1]",
                "assert parse_music('o| o| o| o|') == [2, 2, 2, 2]",
                "assert parse_music('.| o| o .| o o|') == [1, 2, 4, 1, 4, 2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 400,
        "completion_tokens": 232
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('aaaaa', 'aa') == 4",
                "assert how_many_times('1010101010', '101') == 4",
                "assert how_many_times('hellohellohello', 'll') == 3",
                "assert how_many_times('abababab', 'aba') == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 316,
        "completion_tokens": 239
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('one') == 'one'",
                "assert sort_numbers('six three nine zero') == 'zero three six nine'",
                "assert sort_numbers('') == ''",
                "assert sort_numbers('zero two four six') == 'zero two four six'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 333,
        "completion_tokens": 95
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([-1.0, -2.0, -3.0, -2.5]) == (-2.5, -2.0)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
                "assert find_closest_elements([10.5, 10.1, 10.4, 10.6]) == (10.4, 10.5)",
                "assert find_closest_elements([100.0, 200.0, 300.0, 250.0, 260.0]) == (250.0, 260.0)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 394,
        "completion_tokens": 301
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([-2.0, 0.0, 2.0]) == [0.0, 0.5, 1.0]"
            ],
            "failed_tests": [
                "assert rescale_to_unit([5.5, 5.5, 5.5, 5.5]) == [0.0, 0.0, 0.0, 0.0] (ZeroDivisionError: float division by zero)"
            ]
        },
        "prompt_tokens": 351,
        "completion_tokens": 296
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_integers(['a', 3.14, 5]) == [5]",
                "assert filter_integers([100]) == [100]",
                "assert filter_integers([-1, -2, -3]) == [-1, -2, -3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 319,
        "completion_tokens": 152
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('\u65e5\u672c\u8a9e') == 3",
                "assert strlen('abc') == 3",
                "assert strlen('The quick brown fox jumps over the lazy dog') == 43"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 271,
        "completion_tokens": 127
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(18) == 9",
                "assert largest_divisor(81) == 27",
                "assert largest_divisor(100) == 50",
                "assert largest_divisor(15) == 5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 280,
        "completion_tokens": 114
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(49) == [7, 7]",
                "assert factorize(3) == [3]",
                "assert factorize(1) == []",
                "assert factorize(11) == [11]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 354,
        "completion_tokens": 144
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 1, 1, 1, 1]) == []",
                "assert remove_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1]",
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([-1, -2, -2, -3, -1]) == [-3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 312,
        "completion_tokens": 162
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('') == ''",
                "assert flip_case('123') == '123'",
                "assert flip_case('Python 3.8') == 'pYTHON 3.8'",
                "assert flip_case('123abcABC') == '123ABCabc'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 276,
        "completion_tokens": 79
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate(['longer ', 'string ', 'test']) == 'longer string test'",
                "assert concatenate(['-', '+', '=']) == '-+='",
                "assert concatenate(['', '']) == ''",
                "assert concatenate(['concat', 'e', 'nate']) == 'concatenate'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 285,
        "completion_tokens": 133
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix(['Python', 'java', 'C++', 'JavaScript'], 'J') == ['JavaScript']",
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['apple', 'banana', 'apricot', 'berry'], 'ap') == ['apple', 'apricot']",
                "assert filter_by_prefix(['', ' ', '  ', '   '], '') == ['', ' ', '  ', '   ']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 315,
        "completion_tokens": 236
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]",
                "assert get_positive([-10, -20, -30, 0]) == []",
                "assert get_positive([0, -1, -2, -3]) == []",
                "assert get_positive([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 341,
        "completion_tokens": 159
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(101) == True",
                "assert is_prime(97) == True",
                "assert is_prime(0) == False",
                "assert is_prime(4) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 327,
        "completion_tokens": 113
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert round(poly([-6, 11, -6, 1], 2.0), 2) == 0",
                "assert round(poly([1, -2, 1], 1.0), 2) == 0",
                "assert round(poly([-6, 11, -6, 1], 3.0), 2) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 487,
        "completion_tokens": 322
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
                "assert sort_third([]) == []",
                "assert sort_third([3, 2, 1]) == [3, 2, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 378,
        "completion_tokens": 307
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([100]) == [100]",
                "assert unique([5, 5, 5, 5, 5]) == [5]",
                "assert unique([-3, -2, -1, 0, 1, 2, 3]) == [-3, -2, -1, 0, 1, 2, 3]",
                "assert unique([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 301,
        "completion_tokens": 235
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([-10, 0, 10]) == 10",
                "assert max_element([1, 2, 3]) == 3",
                "assert max_element([-1, -2, -3, -4]) == -1",
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 310,
        "completion_tokens": 124
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(1) == 0",
                "assert fizz_buzz(13) == 0"
            ],
            "failed_tests": [
                "assert fizz_buzz(100) == 5 (AssertionError: )"
            ]
        },
        "prompt_tokens": 307,
        "completion_tokens": 131
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_even([]) == []",
                "assert sort_even([2, 3, 4, 1, 0]) == [0, 3, 2, 1, 4]",
                "assert sort_even([4, 1, 2, 3, 6]) == [2, 1, 4, 3, 6]",
                "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 351,
        "completion_tokens": 219
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_cyclic(\"abcdefg\") != \"abcdefg\"",
                "assert encode_cyclic(\"\") == \"\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 386,
        "completion_tokens": 118
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(2) == 3",
                "assert prime_fib(1) == 2",
                "assert prime_fib(3) == 5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 325,
        "completion_tokens": 119
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1]) == False",
                "assert triples_sum_to_zero([-5, -1, 6, 2, 3]) == True",
                "assert triples_sum_to_zero([1, 3, -2, 1]) == True"
            ],
            "failed_tests": [
                "assert triples_sum_to_zero([-1, -2, -3, 6]) == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 387,
        "completion_tokens": 195
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(10) == 100",
                "assert car_race_collision(1) == 1",
                "assert car_race_collision(2) == 4",
                "assert car_race_collision(3) == 9"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 379,
        "completion_tokens": 70
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([0, 0, 0]) == [1, 1, 1]",
                "assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]",
                "assert incr_list([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 336,
        "completion_tokens": 167
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([1, 2, 3, 7]) == False",
                "assert pairs_sum_to_zero([-1, 1, 2, 3]) == True",
                "assert pairs_sum_to_zero([-5, 5]) == True",
                "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 385,
        "completion_tokens": 176
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert change_base(8, 3) == '22'",
                "assert change_base(7, 2) == '111'",
                "assert change_base(31, 8) == '37'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 319,
        "completion_tokens": 136
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(0, 5) == 0.0",
                "assert triangle_area(4.5, 2.2) == 4.95",
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(10, 2) == 10.0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 274,
        "completion_tokens": 127
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib4(2) == 2",
                "assert fib4(1) == 0"
            ],
            "failed_tests": [
                "assert fib4(9) == 48 (AssertionError: )"
            ]
        },
        "prompt_tokens": 399,
        "completion_tokens": 114
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert median([1000, 500, 100, 50, 10]) == 100",
                "assert median([-1, 0, 1]) == 0",
                "assert median([5, 3]) == 4.0",
                "assert median([0, 0, 0, 0]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 303,
        "completion_tokens": 196
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('aaaaa') == True",
                "assert is_palindrome('12321') == True",
                "assert is_palindrome('racecar') == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 299,
        "completion_tokens": 119
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(10, 2) == 0",
                "assert modp(3, 5) == 3",
                "assert modp(1101, 101) == 2",
                "assert modp(4, 17) == 16"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 333,
        "completion_tokens": 135
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decode_shift(\"cde\") == \"xyz\"",
                "assert encode_shift(\"\") == \"\"",
                "assert decode_shift(\"mjqqt\") == \"hello\"",
                "assert decode_shift(\"\") == \"\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 318,
        "completion_tokens": 112
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('aaBAA') == 'B'",
                "assert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'",
                "assert remove_vowels('abcdef') == 'bcdf'",
                "assert remove_vowels('Python Programming') == 'Pythn Prgrmmng'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 350,
        "completion_tokens": 157
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([5], 10) == True",
                "assert below_threshold([10], 10) == False",
                "assert below_threshold([], 10) == True",
                "assert below_threshold([1, 2, 4, 10], 100) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 307,
        "completion_tokens": 169
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(5, 7) == 12",
                "assert add(0, 0) == 0",
                "assert add(-5, -7) == -12",
                "assert add(2, 3) == 5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 281,
        "completion_tokens": 76
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('abcd', 'dddddddabce') == False",
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('abcd', 'dddddddabc') == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 368,
        "completion_tokens": 213
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(2) == 1",
                "assert fib(5) == 5",
                "assert fib(0) == 0",
                "assert fib(8) == 21"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 280,
        "completion_tokens": 67
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing('<') == False",
                "assert correct_bracketing('><') == False",
                "assert correct_bracketing('<>') == True",
                "assert correct_bracketing('') == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 320,
        "completion_tokens": 127
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 2, 2, 3, 4, 5, 5]) == True",
                "assert monotonic([1]) == True",
                "assert monotonic([]) == True",
                "assert monotonic([10, 10, 10, 10]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 315,
        "completion_tokens": 168
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([10, 20, 30], [30, 40, 50, 60, 70]) == [30]",
                "assert common([1, 2, 3], []) == []",
                "assert common([1, 2, 3], [4, 5, 6]) == []",
                "assert common(['a', 'b', 'c'], ['c', 'd', 'e']) == ['c']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 342,
        "completion_tokens": 222
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(100) == 5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 291,
        "completion_tokens": 77
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(3) == 6",
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(-5) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 322,
        "completion_tokens": 115
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"(\") == False",
                "assert correct_bracketing(\")(()\") == False",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"(()())\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 317,
        "completion_tokens": 117
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([-1, -2, -3, -4]) == [-2, -6, -12]",
                "assert derivative([0]) == []",
                "assert derivative([1, 2, 3]) == [2, 6]",
                "assert derivative([5, 4, 3, 2, 1]) == [4, 6, 6, 4]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 336,
        "completion_tokens": 138
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(1) == 0",
                "assert fibfib(5) == 4",
                "assert fibfib(4) == 2",
                "assert fibfib(7) == 13"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 377,
        "completion_tokens": 114
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"Y\") == 1",
                "assert vowels_count(\"QUICKBROWNFOX\") == 4",
                "assert vowels_count(\"aeiou\") == 5",
                "assert vowels_count(\"y\") == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 354,
        "completion_tokens": 200
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(123, 3) == \"123\"",
                "assert circular_shift(123, 2) == \"231\"",
                "assert circular_shift(10, 3) == \"01\"",
                "assert circular_shift(12345, 5) == \"12345\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 310,
        "completion_tokens": 138
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"aAaaaXa\") == 153",
                "assert digitSum(\"a\"*50 + \"Z\") == 90",
                "assert digitSum(\"\") == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 340,
        "completion_tokens": 119
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"1 apples and 0 oranges\", 2) == 1",
                "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19",
                "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
                "assert fruit_distribution(\"0 apples and 0 oranges\", 0) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 438,
        "completion_tokens": 148
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([11, 22, 33, 44, 55, 2, 4]) == [2, 5]",
                "assert pluck([2, 4, 6, 8]) == [2, 0]",
                "assert pluck([4, 2, 3]) == [2, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 540,
        "completion_tokens": 214
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert search([3, 3, 3]) == 3",
                "assert search([5, 5, 4, 4, 4]) == -1",
                "assert search([1, 1, 1, 1]) == 1",
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 393,
        "completion_tokens": 235
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([-1, -2, -3, -4]) == [-4, -1, -3, -2]",
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([1]) == [1]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 352,
        "completion_tokens": 191
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(7, 24, 25) == 84.00",
                "assert triangle_area(5, 12, 13) == 30.00",
                "assert triangle_area(2, 2, 3) == 1.98"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 349,
        "completion_tokens": 180
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([1, 2, 3, 2, 1], 10) == True",
                "assert will_it_fly([1, 2], 5) == False",
                "assert will_it_fly([1, 2, 2], 5) == False",
                "assert will_it_fly([1, 2, 3, 4, 5], 15) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 458,
        "completion_tokens": 202
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([9, 8, 7, 8, 9]) == 0",
                "assert smallest_change([1, 2, 3, 2, 1]) == 0",
                "assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4",
                "assert smallest_change([10, 20, 30, 40, 50, 40, 30, 20, 10]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 385,
        "completion_tokens": 242
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match(['short'], ['longer', 'list', 'of', 'strings']) == ['short']",
                "assert total_match([], []) == []",
                "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 421,
        "completion_tokens": 224
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(1) == False",
                "assert is_multiply_prime(2*3*5*7) == False",
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(2*3*7) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 307,
        "completion_tokens": 130
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert is_simple_power(64, 4) == False (AssertionError: )",
                "assert is_simple_power(10, 10) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 370,
        "completion_tokens": 160
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(-64) == True",
                "assert iscube(-1) == True",
                "assert iscube(125) == True",
                "assert iscube(26) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 338,
        "completion_tokens": 139
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"AB\") == 1",
                "assert hex_key(\"247BD\") == 4",
                "assert hex_key(\"\") == 0",
                "assert hex_key(\"ABED1A33\") == 4"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 527,
        "completion_tokens": 116
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(255) == \"db11111111db\"",
                "assert decimal_to_binary(1) == \"db1db\"",
                "assert decimal_to_binary(1023) == \"db1111111111db\"",
                "assert decimal_to_binary(15) == \"db1111db\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 367,
        "completion_tokens": 103
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy(\"xx\") == False",
                "assert is_happy(\"aa\") == False",
                "assert is_happy(\"a\") == False",
                "assert is_happy(\"x\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 349,
        "completion_tokens": 141
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([0.0]) == ['E']"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([2.0, 2.0, 2.0]) == ['C+', 'C+', 'C+'] (AssertionError: )",
                "assert numerical_letter_grade([0.0, 3.7, 2.7, 1.3, 0.7]) == ['E', 'A', 'B', 'C-', 'D'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 498,
        "completion_tokens": 297
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('abcdcba') == True",
                "assert prime_length('kittens') == True",
                "assert prime_length('ab') == True",
                "assert prime_length('') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 309,
        "completion_tokens": 98
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert starts_one_ends(1) == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 272,
        "completion_tokens": 73
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(0) == \"0\"",
                "assert solve(1000) == \"1\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 361,
        "completion_tokens": 127
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([1, 3, 5, 7, 9]) == 0",
                "assert add([10]) == 0"
            ],
            "failed_tests": [
                "assert add([2, 4, 6, 8, 10]) == 4 (AssertionError: )",
                "assert add([-2, -4, -6, -8]) == -4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 283,
        "completion_tokens": 157
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('123 456') == '123 456'",
                "assert anti_shuffle('a b c') == 'a b c'",
                "assert anti_shuffle('') == ''"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 358,
        "completion_tokens": 159
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([[10,20,30],[20,30,40],[30,40,50]], 30) == [(0, 2), (1, 1), (2, 0)]",
                "assert get_row([[5,4,3,2,1],[0,0,0],[1,2,3,4,5]], 5) == [(0, 0), (2, 4)]",
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]",
                "assert get_row([[9,8,7],[6,5,4],[3,2,1]], 9) == [(0, 0)]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 487,
        "completion_tokens": 349
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([10, 20]) == [20, 10]",
                "assert sort_array([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 431,
        "completion_tokens": 237
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encrypt('') == ''",
                "assert encrypt('123') == '123'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'"
            ],
            "failed_tests": [
                "assert encrypt('AaBbCc') == 'EeFfGg' (AssertionError: )"
            ]
        },
        "prompt_tokens": 338,
        "completion_tokens": 136
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([1, 1]) == None",
                "assert next_smallest([]) == None",
                "assert next_smallest([3, 3, 3, 3, 3, 3]) == None",
                "assert next_smallest([2]) == None"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 352,
        "completion_tokens": 201
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1"
            ],
            "failed_tests": [
                "assert is_bored(\"I'm not sure if I am bored or just tired.\") == 1 (AssertionError: )",
                "assert is_bored(\"I? I! I.\") == 3 (AssertionError: )",
                "assert is_bored(\"I\") == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 335,
        "completion_tokens": 186
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(10, 5, 3) == False",
                "assert any_int(1, 1, 2) == True",
                "assert any_int(-5, 10, 5) == True",
                "assert any_int(5, 2, 7) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 363,
        "completion_tokens": 158
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'"
            ],
            "failed_tests": [
                "assert encode('world') == 'WMRLD' (AssertionError: )"
            ]
        },
        "prompt_tokens": 337,
        "completion_tokens": 135
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13",
                "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11"
            ],
            "failed_tests": [
                "assert skjkasdkd([0, 1, 4, 6, 8, 10]) == 0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 514,
        "completion_tokens": 437
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"mixedCase\":\"No\", \"StillMixed\":\"Yes\"}) == False",
                "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
                "assert check_dict_case({\"lowercase\":\"value\", \"UPPERCASE\":\"VALUE\"}) == False",
                "assert check_dict_case({}) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 397,
        "completion_tokens": 185
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(22) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(10) == [2, 3, 5, 7]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 373,
        "completion_tokens": 189
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert multiply(148, 412) == 16",
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(0, 99) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 326,
        "completion_tokens": 126
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('dBBE') == 0",
                "assert count_upper('') == 0"
            ],
            "failed_tests": [
                "assert count_upper('AeIoU') == 1 (AssertionError: )",
                "assert count_upper('bAcE') == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 300,
        "completion_tokens": 133
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"-14.5\") == -15",
                "assert closest_integer(\"14.5\") == 15",
                "assert closest_integer(\"99.99\") == 100",
                "assert closest_integer(\"10\") == 10"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 384,
        "completion_tokens": 132
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(5) == [5, 7, 9, 11, 13]",
                "assert make_a_pile(2) == [2, 4]",
                "assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]",
                "assert make_a_pile(1) == [1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 360,
        "completion_tokens": 161
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"Apple, Banana, Cherry\") == [\"Apple\", \"Banana\", \"Cherry\"]",
                "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
                "assert words_string(\"Spaces and,commas, both\") == [\"Spaces\", \"and\", \"commas\", \"both\"]",
                "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 344,
        "completion_tokens": 164
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(14, 20) == 20",
                "assert choose_num(11, 13) == 12",
                "assert choose_num(12, 15) == 14",
                "assert choose_num(1, 10) == 10"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 322,
        "completion_tokens": 134
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(50, 52) == \"0b110011\"",
                "assert rounded_avg(100, 99) == -1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 368,
        "completion_tokens": 159
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([1111, 3333, 5555]) == [1111, 3333, 5555]",
                "assert unique_digits([]) == []",
                "assert unique_digits([2, 4, 6, 8]) == []"
            ],
            "failed_tests": [
                "assert unique_digits([11, 22, 35, 47, 59]) == [11, 35, 47, 59] (AssertionError: )"
            ]
        },
        "prompt_tokens": 330,
        "completion_tokens": 199
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([10, 11, 12, 0, -5, 3]) == [\"Three\"]",
                "assert by_length([]) == []",
                "assert by_length([1, -1, 55]) == [\"One\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 504,
        "completion_tokens": 233
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(1) == [1]",
                "assert f(6) == [1, 2, 6, 24, 15, 720]",
                "assert f(5) == [1, 2, 6, 24, 15]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 352,
        "completion_tokens": 137
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_nums([-5, -4, -3, -2, -1]) == 0",
                "assert count_nums([-1, 11, -11]) == 1",
                "assert count_nums([-10, 0, 10]) == 1",
                "assert count_nums([9, 99, 999]) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 352,
        "completion_tokens": 147
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([3, 4, 5, 1, 2]) == True",
                "assert move_one_ball([5, 1, 2, 3, 4]) == True",
                "assert move_one_ball([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == True",
                "assert move_one_ball([3, 5, 4, 1, 2]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 527,
        "completion_tokens": 229
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1, 3, 5, 7], [9, 11, 13]) == \"NO\"",
                "assert exchange([1], [2]) == \"YES\"",
                "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
                "assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"YES\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 425,
        "completion_tokens": 256
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('x y z x y z x y') == {'x': 3, 'y': 3}",
                "assert histogram('a b c d e f g h i') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1}",
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 379,
        "completion_tokens": 254
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"palindrome\", \"\") == ('palindrome', False)",
                "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)",
                "assert reverse_delete(\"deified\", \"d\") == ('eifie', True)",
                "assert reverse_delete(\"radar\", \"r\") == ('ada', True)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 390,
        "completion_tokens": 187
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
                "assert odd_count(['0']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count([]) == []"
            ],
            "failed_tests": [
                "assert odd_count(['', '0024', '567']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 401,
        "completion_tokens": 291
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([0, -1, -2, -3, -4]) == -10",
                "assert minSubArraySum([-10]) == -10",
                "assert minSubArraySum([1, 2, 3, 4, 5]) == 1",
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 316,
        "completion_tokens": 214
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[1]], 1) == 1",
                "assert max_fill([[1,1,1], [1,1,1], [1,1,1]], 3) == 3",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5"
            ],
            "failed_tests": [
                "assert max_fill([[1,1,1,1,1], [1,1,1,1,1]], 10) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 551,
        "completion_tokens": 320
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_array([1024, 512, 256, 128, 64]) == [64, 128, 256, 512, 1024]",
                "assert sort_array([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 398,
        "completion_tokens": 239
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]",
                "assert select_words(\"b c d f g\", 1) == [\"b\", \"c\", \"d\", \"f\", \"g\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 409,
        "completion_tokens": 173
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"Rhythm\") == \"\"",
                "assert get_closest_vowel(\"XYZ\") == \"\"",
                "assert get_closest_vowel(\"bAck\") == \"A\"",
                "assert get_closest_vowel(\"yogurt\") == \"u\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 377,
        "completion_tokens": 132
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert match_parens([')', ')']) == 'No'",
                "assert match_parens(['(()', '())']) == 'Yes'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 396,
        "completion_tokens": 143
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([4, -4, 4], 2) == [4, 4]",
                "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
                "assert maximum([5, 4, 3, 2, 1], 3) == [3, 4, 5]",
                "assert maximum([1], 1) == [1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 445,
        "completion_tokens": 258
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert solution([11, 22, 33, 44, 55]) == 44 (AssertionError: )"
            ]
        },
        "prompt_tokens": 325,
        "completion_tokens": 211
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24",
                "assert add_elements([10, 20, 30, 40], 4) == 100",
                "assert add_elements([123, 456, 78, 90, 12], 3) == 78",
                "assert add_elements([1, 2, 3, 4, 5], 3) == 6"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 356,
        "completion_tokens": 200
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(5) == [1, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 459,
        "completion_tokens": 235
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('02-29-2020') == True",
                "assert valid_date('06-04-2020') == True",
                "assert valid_date('01-32-2020') == False"
            ],
            "failed_tests": [
                "assert valid_date('12-31-1999') == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 491,
        "completion_tokens": 306
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"Hello world! How are you?\") == [\"Hello\", \"world!\", \"How\", \"are\", \"you?\"]",
                "assert split_words(\"\") == 0"
            ],
            "failed_tests": [
                "assert split_words(\"a\") == 1 (AssertionError: )",
                "assert split_words(\"a,b,c,d,e,f,g\") == 4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 368,
        "completion_tokens": 194
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([10, 20, 19, 40, 50]) == False",
                "assert is_sorted([1, 1, 1, 1, 1, 2]) == False",
                "assert is_sorted([1, 2, 3, 4, 4, 5]) == True",
                "assert is_sorted([1, 3, 2, 4, 5]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 477,
        "completion_tokens": 303
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersection((-1, 1), (0, 4)) == \"NO\"",
                "assert intersection((5, 7), (7, 9)) == \"NO\"",
                "assert intersection((1, 5), (6, 8)) == \"NO\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 482,
        "completion_tokens": 252
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([1, 2, 3, 4, 5]) == 15",
                "assert prod_signs([-1, 0, 1]) == 0",
                "assert prod_signs([10]) == 10"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 350,
        "completion_tokens": 163
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]",
                "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]",
                "assert minPath([[1, 2], [3, 4]], 2) == [1, 2]"
            ],
            "failed_tests": [
                "assert minPath([[3, 2], [1, 4]], 4) == [1, 2, 1, 2] (AssertionError: )"
            ]
        },
        "prompt_tokens": 624,
        "completion_tokens": 255
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert tri(3) == [1, 3, 2, 8]",
                "assert tri(2) == [1, 3, 2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 463,
        "completion_tokens": 160
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digits(13579) == 945",
                "assert digits(1) == 1",
                "assert digits(1024) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 299,
        "completion_tokens": 101
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[[[[[[]]]]]]') == True",
                "assert is_nested('[]') == False",
                "assert is_nested('[[][]]') == True",
                "assert is_nested('[[[]') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 361,
        "completion_tokens": 136
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 14",
                "assert sum_squares([2.5, 2.5, 2.5]) == 27",
                "assert sum_squares([-2.4, 1, 1]) == 6"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 385,
        "completion_tokens": 202
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
                "assert check_if_last_char_is_a_letter(\"a\") == True",
                "assert check_if_last_char_is_a_letter(\" \") == False"
            ],
            "failed_tests": [
                "assert check_if_last_char_is_a_letter(\"12345a\") == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 365,
        "completion_tokens": 198
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1, 2, 3]) == -1",
                "assert can_arrange([2, 3, 5, 7, 11, 13, 12]) == 6",
                "assert can_arrange([1]) == -1"
            ],
            "failed_tests": [
                "assert can_arrange([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 331,
        "completion_tokens": 243
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([0]) == (None, None)",
                "assert largest_smallest_integers([100]) == (None, 100)",
                "assert largest_smallest_integers([-10, -20, 30, 40]) == (-10, 30)",
                "assert largest_smallest_integers([-2, -1, 0, 1, 2]) == (-1, 1)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 366,
        "completion_tokens": 231
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert compare_one(0, \"0\") == None",
                "assert compare_one(\"1\", 1) == None",
                "assert compare_one(\"3.5\", \"4,2\") == \"4,2\""
            ],
            "failed_tests": [
                "assert compare_one(\"-1,5\", -1.4) == \"-1,5\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 369,
        "completion_tokens": 162
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(16) == True",
                "assert is_equal_to_sum_even(4) == False",
                "assert is_equal_to_sum_even(32) == True"
            ],
            "failed_tests": [
                "assert is_equal_to_sum_even(14) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 305,
        "completion_tokens": 184
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(4) == 288",
                "assert special_factorial(2) == 2",
                "assert special_factorial(5) == 34560",
                "assert special_factorial(3) == 12"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 323,
        "completion_tokens": 73
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"Example    5\") == \"Example-5\"",
                "assert fix_spaces(\"E x a m p l e\") == \"E_x_a_m_p_l_e\"",
                "assert fix_spaces(\"\") == \"\"",
                "assert fix_spaces(\"Example     \") == \"Example-\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 334,
        "completion_tokens": 141
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"file..dll\") == 'No'",
                "assert file_name_check(\".txt\") == 'No'",
                "assert file_name_check(\"file.tar.gz\") == 'No'"
            ],
            "failed_tests": [
                "assert file_name_check(\"FILE.EXE\") == 'Yes' (AssertionError: )"
            ]
        },
        "prompt_tokens": 442,
        "completion_tokens": 273
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([0, 0, 0, 0, 0, 0, 0]) == 0",
                "assert sum_squares([-1, -5, 2, -1, -5]) == -126"
            ],
            "failed_tests": [
                "assert sum_squares([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -855 (AssertionError: )",
                "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 855 (AssertionError: )"
            ]
        },
        "prompt_tokens": 398,
        "completion_tokens": 212
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"This is a test\") == \"is\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 375,
        "completion_tokens": 147
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"5/2\", \"2/5\") == True",
                "assert simplify(\"100/200\", \"200/100\") == True",
                "assert simplify(\"2/3\", \"3/2\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 383,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([]) == []",
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 343,
        "completion_tokens": 186
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([101, 202, 303, 404, 505]) == 3",
                "assert specialFilter([135, 246, 357, 468, 579]) == 3",
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 347,
        "completion_tokens": 167
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(1) == 0",
                "assert get_max_triples(5) == 1",
                "assert get_max_triples(6) == 4"
            ],
            "failed_tests": [
                "assert get_max_triples(4) == 0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 393,
        "completion_tokens": 76
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Mercury\", \"Neptune\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")",
                "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
                "assert bf(\"Pluto\", \"Mars\") == ()"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 439,
        "completion_tokens": 226
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]"
            ],
            "failed_tests": [
                "assert sorted_list_sum([\"abc\", \"def\", \"ghi\", \"jkl\"]) == [\"abc\", \"def\", \"ghi\", \"jkl\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 415,
        "completion_tokens": 224
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(11, 0, 1) == 0",
                "assert x_or_y(15, 8, 5) == 5",
                "assert x_or_y(14, -5, -10) == -10",
                "assert x_or_y(4, 10, 20) == 20"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 314,
        "completion_tokens": 184
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([9, -2]) == 81",
                "assert double_the_difference([2.5, 3.5, -1.5, 2, 3]) == 9",
                "assert double_the_difference([-1, -2, 0]) == 0"
            ],
            "failed_tests": [
                "assert double_the_difference([11, 13, 15, -17, -19, 21]) == 866 (AssertionError: )"
            ]
        },
        "prompt_tokens": 365,
        "completion_tokens": 201
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]",
                "assert compare([5, 5, 5, 5], [5, 5, 5, 5]) == [0, 0, 0, 0]",
                "assert compare([100, 200, 300], [300, 100, 200]) == [200, 100, 100]",
                "assert compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) == [4, 4, 1, 0, 0, 6]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 458,
        "completion_tokens": 292
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('Data', ['Loader', 'ANALYZER', 'Visual']) == 'Data.ANALYZER'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 505,
        "completion_tokens": 281
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"123456\", \"561234\") == True",
                "assert cycpattern_check(\"whassup\", \"psus\") == False",
                "assert cycpattern_check(\"abcd\", \"abd\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 357,
        "completion_tokens": 153
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(0) == (1, 0)",
                "assert even_odd_count(-12) == (1, 1)",
                "assert even_odd_count(-987654321) == (4, 5)",
                "assert even_odd_count(2468) == (4, 0)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 293,
        "completion_tokens": 153
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(444) == 'cdxliv'",
                "assert int_to_mini_roman(1000) == 'm'",
                "assert int_to_mini_roman(294) == 'ccxciv'",
                "assert int_to_mini_roman(3) == 'iii'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 329,
        "completion_tokens": 161
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(1, 2, 3) == False",
                "assert right_angle_triangle(2, 2, 3) == False",
                "assert right_angle_triangle(5, 12, 13) == True"
            ],
            "failed_tests": [
                "assert right_angle_triangle(10, 6, 8) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 336,
        "completion_tokens": 164
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"a\", \"b\", \"c\", \"d\"]) == \"a\"",
                "assert find_max([\"xyz\", \"xy\", \"x\"]) == \"xyz\"",
                "assert find_max([\"name\", \"of\", \"string\"]) == \"string\""
            ],
            "failed_tests": [
                "assert find_max([\"apple\", \"banana\", \"cherry\"]) == \"banana\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 348,
        "completion_tokens": 168
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(10, 5, 20) == [15, 15]",
                "assert eat(4, 8, 9) == [12, 1]",
                "assert eat(1000, 0, 1000) == [1000, 1000]",
                "assert eat(500, 500, 1000) == [1000, 500]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 505,
        "completion_tokens": 191
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['-', '*', '+'], [0, 0, 0, 0]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 435,
        "completion_tokens": 262
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"Hello World!\") == \"hELLO wORLD!\"",
                "assert solve(\"ABCdef\") == \"abcDEF\"",
                "assert solve(\"12345a\") == \"12345A\"",
                "assert solve(\"1234\") == \"4321\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 335,
        "completion_tokens": 122
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('') is None",
                "assert string_to_md5('password123') == '482c811da5d5b4bc6d497ffa98491e38'",
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'"
            ],
            "failed_tests": [
                "assert string_to_md5('Python 3.8') == '4b2e31a0fa0c3c976ce5f8b0e6d0eda8' (AssertionError: )"
            ]
        },
        "prompt_tokens": 304,
        "completion_tokens": 183
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(3, 3) == []",
                "assert generate_integers(1, 5) == [2, 4]"
            ],
            "failed_tests": [
                "assert generate_integers(0, 10) == [0, 2, 4, 6, 8, 10] (AssertionError: )"
            ]
        },
        "prompt_tokens": 332,
        "completion_tokens": 192
    }
]