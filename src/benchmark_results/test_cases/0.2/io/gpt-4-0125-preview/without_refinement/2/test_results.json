[
    {
        "task_id": "HumanEval/0",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
                "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
                "assert has_close_elements([10.0, 20.0, 30.0], 10.1) == True",
                "assert has_close_elements([0.1, 0.2, 0.4], 0.05) == False",
                "assert has_close_elements([-1.0, -2.0, -3.0], 1.1) == True",
                "assert has_close_elements([], 0.5) == False",
                "assert has_close_elements([1.5], 0.1) == False",
                "assert has_close_elements([1.0, 1.1], 0.11) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 197,
        "completion_tokens": 206
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('((()))()(())') == ['((()))', '()', '(())']",
                "assert separate_paren_groups('') == []",
                "assert separate_paren_groups('((((()))))') == ['((((()))))']",
                "assert separate_paren_groups('(())()') == ['(())', '()']",
                "assert separate_paren_groups('()') == ['()']",
                "assert separate_paren_groups('((())())(()(()))') == ['((())())', '(()(()))']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 189,
        "completion_tokens": 126
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(0.33) == 0.33",
                "assert truncate_number(100.0) == 0.0"
            ],
            "failed_tests": [
                "assert truncate_number(10.99) == 0.99 (AssertionError: )",
                "assert truncate_number(7.123456) == 0.123456 (AssertionError: )",
                "assert truncate_number(1.001) == 0.001 (AssertionError: )",
                "assert truncate_number(999.999) == 0.999 (AssertionError: )"
            ]
        },
        "prompt_tokens": 157,
        "completion_tokens": 104
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([1, 2, 3]) == False",
                "assert below_zero([1, 2, -4, 5]) == True",
                "assert below_zero([-1, 2, 3]) == True",
                "assert below_zero([10, -5, -5]) == False",
                "assert below_zero([10, -15, 5]) == True",
                "assert below_zero([]) == False",
                "assert below_zero([-1]) == True",
                "assert below_zero([0, 0, 0]) == False",
                "assert below_zero([100, -50, -50, -1]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 191,
        "completion_tokens": 132
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
                "assert mean_absolute_deviation([10, 10, 10, 10]) == 0.0",
                "assert mean_absolute_deviation([-1.0, 0.0, 1.0]) == 0.6666666666666666",
                "assert mean_absolute_deviation([5]) == 0.0",
                "assert mean_absolute_deviation([1.5, 2.5, 3.5, 4.5, 5.5]) == 1.2",
                "assert mean_absolute_deviation([100, 200, 300, 400, 500]) == 120.0",
                "assert mean_absolute_deviation([-10, 0, 10, 20]) == 10.0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 191,
        "completion_tokens": 188
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([], 4) == []",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
                "assert intersperse([1], 0) == [1]",
                "assert intersperse([1, 2], -1) == [1, -1, 2]",
                "assert intersperse([10, 20, 30, 40], 100) == [10, 100, 20, 100, 30, 100, 40]",
                "assert intersperse([5, 5, 5], 5) == [5, 5, 5, 5, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 164,
        "completion_tokens": 150
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('') == []",
                "assert parse_nested_parens('() () ()') == [1, 1, 1]",
                "assert parse_nested_parens('(()) (())') == [2, 2]",
                "assert parse_nested_parens('((())())') == [3]",
                "assert parse_nested_parens('() ((()())) (((())))') == [1, 3, 4]"
            ],
            "failed_tests": [
                "assert parse_nested_parens('((( )))') == [3] (AssertionError: )"
            ]
        },
        "prompt_tokens": 187,
        "completion_tokens": 136
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring(['apple', 'banana', 'cherry'], 'a') == ['apple', 'banana']",
                "assert filter_by_substring(['apple', 'banana', 'cherry'], 'x') == []",
                "assert filter_by_substring([], 'test') == []",
                "assert filter_by_substring(['123', '456', '789'], '1') == ['123']",
                "assert filter_by_substring(['abc', 'def', 'ghi'], 'z') == []",
                "assert filter_by_substring(['ABC', 'BCD', 'CDE'], 'B') == ['ABC', 'BCD']"
            ],
            "failed_tests": [
                "assert filter_by_substring(['hello', 'world', 'python', 'code'], 'o') == ['hello', 'world', 'code'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 167,
        "completion_tokens": 157
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([1, 2, 3, 4]) == (10, 24)",
                "assert sum_product([1]) == (1, 1)",
                "assert sum_product([-1, -2, -3]) == (-6, -6)",
                "assert sum_product([0, 1, 2, 3]) == (6, 0)",
                "assert sum_product([10, 10, 10]) == (30, 1000)",
                "assert sum_product([2, 2, 2, 2, 2]) == (10, 32)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 182,
        "completion_tokens": 137
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
                "assert rolling_max([5, 3, 1, 2, 4]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([10]) == [10]",
                "assert rolling_max([-1, -2, -3, -2, -1]) == [-1, -1, -1, -1, -1]",
                "assert rolling_max([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 172,
        "completion_tokens": 135
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome(\"\") == True",
                "assert is_palindrome(\"a\") == True",
                "assert is_palindrome(\"racecar\") == True",
                "assert is_palindrome(\"palindrome\") == False"
            ],
            "failed_tests": [
                "assert is_palindrome(\"A man a plan a canal Panama\").replace(\" \", \"\").lower() == True (AttributeError: 'bool' object has no attribute 'replace')",
                "assert is_palindrome(\"No lemon, no melon\").replace(\" \", \"\").replace(\",\", \"\").lower() == True (AttributeError: 'bool' object has no attribute 'replace')"
            ]
        },
        "prompt_tokens": 215,
        "completion_tokens": 182
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_xor('010', '110') == '100'",
                "assert string_xor('1', '1') == '0'",
                "assert string_xor('111', '000') == '111'",
                "assert string_xor('101010', '010101') == '111111'",
                "assert string_xor('', '') == ''",
                "assert string_xor('1111', '1111') == '0000'",
                "assert string_xor('0000', '1111') == '1111'"
            ],
            "failed_tests": [
                "assert string_xor('12345', '54321') == 'Invalid input' (AssertionError: )"
            ]
        },
        "prompt_tokens": 148,
        "completion_tokens": 122
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest([]) is None",
                "assert longest(['a', 'b', 'c']) == 'a'",
                "assert longest(['a', 'bb', 'ccc']) == 'ccc'",
                "assert longest(['hello', 'world', 'python', 'is', 'awesome']) == 'awesome'",
                "assert longest(['same', 'size', 'test']) == 'same'",
                "assert longest(['short', 'longer', 'longest', 'longer']) == 'longest'",
                "assert longest(['one', 'two', 'three', 'four', 'five']) == 'three'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 173,
        "completion_tokens": 120
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(3, 5) == 1",
                "assert greatest_common_divisor(25, 15) == 5",
                "assert greatest_common_divisor(100, 10) == 10",
                "assert greatest_common_divisor(17, 13) == 1",
                "assert greatest_common_divisor(0, 5) == 5",
                "assert greatest_common_divisor(5, 0) == 5",
                "assert greatest_common_divisor(0, 0) == 0",
                "assert greatest_common_divisor(-25, 15) == 5"
            ],
            "failed_tests": [
                "assert greatest_common_divisor(25, -15) == 5 (AssertionError: )",
                "assert greatest_common_divisor(-25, -15) == 5 (AssertionError: )"
            ]
        },
        "prompt_tokens": 144,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
                "assert all_prefixes('') == []",
                "assert all_prefixes('a') == ['a']",
                "assert all_prefixes('xyz') == ['x', 'xy', 'xyz']",
                "assert all_prefixes('test') == ['t', 'te', 'tes', 'test']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 132,
        "completion_tokens": 77
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(0) == '0'",
                "assert string_sequence(5) == '0 1 2 3 4 5'",
                "assert string_sequence(2) == '0 1 2'",
                "assert string_sequence(1) == '0 1'",
                "assert string_sequence(3) == '0 1 2 3'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 140,
        "completion_tokens": 76
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('xyzXYZ') == 3",
                "assert count_distinct_characters('Jerry') == 4",
                "assert count_distinct_characters('') == 0",
                "assert count_distinct_characters('aaaaa') == 1",
                "assert count_distinct_characters('AbCdEfG') == 7",
                "assert count_distinct_characters('1234567890') == 10",
                "assert count_distinct_characters('Hello, World!') == 10",
                "assert count_distinct_characters('AaAaAa') == 1"
            ],
            "failed_tests": [
                "assert count_distinct_characters('Python Programming') == 13 (AssertionError: )"
            ]
        },
        "prompt_tokens": 144,
        "completion_tokens": 147
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
                "assert parse_music('o') == [4]",
                "assert parse_music('o|') == [2]",
                "assert parse_music('.|') == [1]",
                "assert parse_music('o o o') == [4, 4, 4]",
                "assert parse_music('.| .| .| .|') == [1, 1, 1, 1]",
                "assert parse_music('') == []",
                "assert parse_music('o| .| o o| .|') == [2, 1, 4, 2, 1]",
                "assert parse_music('.| o| o .| o|') == [1, 2, 4, 1, 2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 244,
        "completion_tokens": 202
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('', 'a') == 0",
                "assert how_many_times('aaa', 'a') == 3",
                "assert how_many_times('aaaa', 'aa') == 3",
                "assert how_many_times('abcabcabc', 'abc') == 3",
                "assert how_many_times('abcabcabc', 'abcd') == 0",
                "assert how_many_times('aaaaa', 'aa') == 4",
                "assert how_many_times('abababab', 'aba') == 3",
                "assert how_many_times('hello world', 'o') == 2",
                "assert how_many_times('overlapping or not overlapping', 'lap') == 2"
            ],
            "failed_tests": [
                "assert how_many_times('how many times does this substring appears in this string', 'is') == 3 (AssertionError: )"
            ]
        },
        "prompt_tokens": 161,
        "completion_tokens": 164
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('three one five') == 'one three five'",
                "assert sort_numbers('nine eight seven') == 'seven eight nine'",
                "assert sort_numbers('zero two four six') == 'zero two four six'",
                "assert sort_numbers('') == ''",
                "assert sort_numbers('four four four') == 'four four four'",
                "assert sort_numbers('nine zero one two') == 'zero one two nine'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 177,
        "completion_tokens": 85
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([10.5, 11.1, 10.6]) == (10.5, 10.6)",
                "assert find_closest_elements([-1.0, -2.0, -3.0, -2.5]) == (-2.5, -2.0)",
                "assert find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.45]) == (0.4, 0.45)",
                "assert find_closest_elements([100.0, 200.0, 300.0, 250.0, 260.0]) == (250.0, 260.0)",
                "assert find_closest_elements([5.5, 5.51]) == (5.5, 5.51)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 240,
        "completion_tokens": 276
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([10, 20]) == [0.0, 1.0]",
                "assert rescale_to_unit([-1, 0, 1]) == [0.0, 0.5, 1.0]",
                "assert rescale_to_unit([100, 150, 200, 250, 300]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
            ],
            "failed_tests": [
                "assert rescale_to_unit([2.5, 2.5, 2.5]) == [0.0, 0.0, 0.0] (ZeroDivisionError: float division by zero)"
            ]
        },
        "prompt_tokens": 197,
        "completion_tokens": 194
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_integers(['a', 3.14, 5]) == [5]",
                "assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]",
                "assert filter_integers([0, -1, '0', None]) == [0, -1]",
                "assert filter_integers([]) == []"
            ],
            "failed_tests": [
                "assert filter_integers([True, False, 'True', 'False']) == [] (AssertionError: )"
            ]
        },
        "prompt_tokens": 164,
        "completion_tokens": 99
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('') == 0",
                "assert strlen('hello') == 5",
                "assert strlen('123456789') == 9",
                "assert strlen(' ') == 1",
                "assert strlen('Python programming') == 18"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 114,
        "completion_tokens": 50
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(15) == 5",
                "assert largest_divisor(17) == 1",
                "assert largest_divisor(100) == 50",
                "assert largest_divisor(37) == 1",
                "assert largest_divisor(60) == 30",
                "assert largest_divisor(2) == 1",
                "assert largest_divisor(256) == 128"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 125,
        "completion_tokens": 81
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(101) == [101]",
                "assert factorize(60) == [2, 2, 3, 5]",
                "assert factorize(100) == [2, 2, 5, 5]",
                "assert factorize(3) == [3]",
                "assert factorize(4) == [2, 2]",
                "assert factorize(2) == [2]",
                "assert factorize(70) == [2, 5, 7]",
                "assert factorize(8) == [2, 2, 2]",
                "assert factorize(121) == [11, 11]",
                "assert factorize(1) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 198,
        "completion_tokens": 160
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([1, 1, 1, 1, 1]) == []",
                "assert remove_duplicates([]) == []",
                "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert remove_duplicates([10, 20, 20, 10, 30]) == [30]",
                "assert remove_duplicates([-1, -2, -2, -1, -3]) == [-3]"
            ],
            "failed_tests": [
                "assert remove_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [] (AssertionError: )"
            ]
        },
        "prompt_tokens": 156,
        "completion_tokens": 172
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('Hello') == 'hELLO'",
                "assert flip_case('hELLO') == 'Hello'",
                "assert flip_case('Python 3.8') == 'pYTHON 3.8'",
                "assert flip_case('123abcABC') == '123ABCabc'",
                "assert flip_case('') == ''",
                "assert flip_case('This Is A Test') == 'tHIS iS a tEST'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 120,
        "completion_tokens": 110
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate([]) == ''",
                "assert concatenate(['a', 'b', 'c']) == 'abc'",
                "assert concatenate(['hello', ' ', 'world']) == 'hello world'",
                "assert concatenate(['single']) == 'single'",
                "assert concatenate(['', '']) == ''",
                "assert concatenate(['concat', 'e', 'nate']) == 'concatenate'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 128,
        "completion_tokens": 74
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']",
                "assert filter_by_prefix(['hello', 'world', 'python', 'programming'], 'p') == ['python', 'programming']",
                "assert filter_by_prefix(['123', '234', '345'], '1') == ['123']",
                "assert filter_by_prefix(['banana', 'apple', 'avocado', 'cherry', 'apricot'], 'a') == ['apple', 'avocado', 'apricot']",
                "assert filter_by_prefix(['banana', 'apple', 'avocado', 'cherry', 'apricot'], '') == ['banana', 'apple', 'avocado', 'cherry', 'apricot']",
                "assert filter_by_prefix(['test', 'testing', 'tested', 'tester'], 'test') == ['test', 'testing', 'tested', 'tester']",
                "assert filter_by_prefix(['test', 'testing', 'tested', 'tester'], 'tests') == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 160,
        "completion_tokens": 223
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
                "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]",
                "assert get_positive([-10, -20, -30]) == []",
                "assert get_positive([0, 0, 0]) == []",
                "assert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 185,
        "completion_tokens": 152
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(6) == False",
                "assert is_prime(13441) == True",
                "assert is_prime(0) == False",
                "assert is_prime(1) == False",
                "assert is_prime(4) == False",
                "assert is_prime(61) == True",
                "assert is_prime(3) == True",
                "assert is_prime(97) == True",
                "assert is_prime(2) == True",
                "assert is_prime(11) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 171,
        "completion_tokens": 113
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert poly([1, 2, 3], 0) == 1",
                "assert round(poly([1, 2, 3], 1), 2) == 6",
                "assert round(poly([-1, 0, 2], 2), 2) == 7",
                "assert poly([0, 0, 0], 2) == 0"
            ],
            "failed_tests": [
                "assert round(poly([1, -1, 1], -1), 2) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 330,
        "completion_tokens": 106
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_third([1, 2, 3]) == [1, 2, 3]",
                "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]",
                "assert sort_third([10, 15, 20, 25, 30, 35, 40]) == [10, 15, 20, 25, 30, 35, 40]",
                "assert sort_third([]) == []",
                "assert sort_third([1]) == [1]",
                "assert sort_third([2, 4, 6, 8, 10, 12, 14, 16, 18]) == [2, 4, 6, 8, 10, 12, 14, 16, 18]"
            ],
            "failed_tests": [
                "assert sort_third([3, 1, 2]) == [2, 1, 3] (AssertionError: )",
                "assert sort_third([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 8, 7, 6, 5, 4, 3, 2, 9] (AssertionError: )",
                "assert sort_third([3, 2, 1, 6, 5, 4, 9, 8, 7]) == [1, 2, 3, 4, 5, 6, 7, 8, 9] (AssertionError: )"
            ]
        },
        "prompt_tokens": 222,
        "completion_tokens": 331
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
                "assert unique([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert unique([]) == []",
                "assert unique([7, 7, 7, 7]) == [7]",
                "assert unique([-2, -1, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 144,
        "completion_tokens": 151
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([1, 2, 3]) == 3",
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123",
                "assert max_element([-1, -2, -3, -4]) == -1",
                "assert max_element([100]) == 100",
                "assert max_element([2, 2, 2, 2]) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 154,
        "completion_tokens": 108
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(50) == 0",
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(79) == 3",
                "assert fizz_buzz(1) == 0"
            ],
            "failed_tests": [
                "assert fizz_buzz(100) == 4 (AssertionError: )",
                "assert fizz_buzz(200) == 8 (AssertionError: )",
                "assert fizz_buzz(143) == 15 (AssertionError: )"
            ]
        },
        "prompt_tokens": 152,
        "completion_tokens": 96
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_even([1, 2, 3]) == [1, 2, 3]",
                "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]",
                "assert sort_even([10, 15, 2, 30, 8]) == [2, 15, 8, 30, 10]",
                "assert sort_even([]) == []",
                "assert sort_even([1]) == [1]",
                "assert sort_even([4, 1, 2, 3, 6, 5]) == [2, 1, 4, 3, 6, 5]",
                "assert sort_even([0, 1, 2, 3, 4, 5, 6]) == [0, 1, 2, 3, 4, 5, 6]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 195,
        "completion_tokens": 191
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode_cyclic(\"a\") == \"a\"",
                "assert encode_cyclic(\"\") == \"\""
            ],
            "failed_tests": [
                "assert encode_cyclic(\"abcde\") == \"bcaed\" (AssertionError: )",
                "assert encode_cyclic(\"abcdef\") == \"bcadef\" (AssertionError: )",
                "assert encode_cyclic(\"abcdefg\") == \"bcadefg\" (AssertionError: )",
                "assert encode_cyclic(\"abcdefgh\") == \"bcadefgh\" (AssertionError: )",
                "assert encode_cyclic(\"abcdefghi\") == \"bcadefghi\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 231,
        "completion_tokens": 93
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(1) == 2",
                "assert prime_fib(2) == 3",
                "assert prime_fib(3) == 5",
                "assert prime_fib(4) == 13",
                "assert prime_fib(5) == 89",
                "assert prime_fib(6) == 233",
                "assert prime_fib(7) == 1597",
                "assert prime_fib(8) == 28657",
                "assert prime_fib(9) == 514229"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 170,
        "completion_tokens": 106
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
                "assert triples_sum_to_zero([1, 3, -2, 1]) == True",
                "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
                "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True",
                "assert triples_sum_to_zero([1]) == False",
                "assert triples_sum_to_zero([-1, 1, 0]) == True",
                "assert triples_sum_to_zero([-5, -1, 6, 2, -4]) == True",
                "assert triples_sum_to_zero([0, 0, 0]) == True",
                "assert triples_sum_to_zero([-1, -2, 3, 4]) == True",
                "assert triples_sum_to_zero([10, 22, -32]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 233,
        "completion_tokens": 195
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(0) == 0",
                "assert car_race_collision(1) == 1",
                "assert car_race_collision(2) == 4",
                "assert car_race_collision(3) == 9",
                "assert car_race_collision(10) == 100",
                "assert car_race_collision(50) == 2500"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 224,
        "completion_tokens": 71
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]",
                "assert incr_list([-1, -2, -3]) == [0, -1, -2]",
                "assert incr_list([0]) == [1]",
                "assert incr_list([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 180,
        "completion_tokens": 123
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
                "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
                "assert pairs_sum_to_zero([1, 2, 3, 7]) == False",
                "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True",
                "assert pairs_sum_to_zero([1]) == False",
                "assert pairs_sum_to_zero([-1, 1, 3, 5]) == True",
                "assert pairs_sum_to_zero([0, 0]) == True",
                "assert pairs_sum_to_zero([-3, 1, 2, 3]) == True",
                "assert pairs_sum_to_zero([]) == False",
                "assert pairs_sum_to_zero([10, -10]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 231,
        "completion_tokens": 179
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert change_base(8, 3) == '22'",
                "assert change_base(8, 2) == '1000'",
                "assert change_base(7, 2) == '111'",
                "assert change_base(9, 9) == '10'",
                "assert change_base(31, 8) == '37'",
                "assert change_base(10, 4) == '22'",
                "assert change_base(1, 2) == '1'"
            ],
            "failed_tests": [
                "assert change_base(0, 5) == '0' (AssertionError: )",
                "assert change_base(255, 16) == 'ff' (AssertionError: )"
            ]
        },
        "prompt_tokens": 163,
        "completion_tokens": 122
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(10, 2) == 10.0",
                "assert triangle_area(0, 5) == 0.0",
                "assert triangle_area(7.5, 4) == 15.0",
                "assert triangle_area(6, 0) == 0.0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 118,
        "completion_tokens": 81
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib4(0) == 0",
                "assert fib4(1) == 0",
                "assert fib4(2) == 2",
                "assert fib4(3) == 0",
                "assert fib4(4) == 2",
                "assert fib4(5) == 4",
                "assert fib4(6) == 8",
                "assert fib4(7) == 14"
            ],
            "failed_tests": [
                "assert fib4(8) == 26 (AssertionError: )",
                "assert fib4(10) == 98 (AssertionError: )"
            ]
        },
        "prompt_tokens": 243,
        "completion_tokens": 104
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([3, 1, 2, 4, 5]) == 3",
                "assert median([1, 2, 3, 4, 5, 6]) == 3.5",
                "assert median([1]) == 1",
                "assert median([5, 3]) == 4.0",
                "assert median([-5, -3, -1, 1, 3, 5]) == 0.0",
                "assert median([0, 0, 0, 0]) == 0",
                "assert median([1, 3, 2, 5, 4, 6, 7]) == 4"
            ],
            "failed_tests": [
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 146,
        "completion_tokens": 172
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('') == True",
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('aaaaa') == True",
                "assert is_palindrome('zbcd') == False",
                "assert is_palindrome('racecar') == True",
                "assert is_palindrome('12321') == True",
                "assert is_palindrome('123456') == False",
                "assert is_palindrome('Madam') == False",
                "assert is_palindrome(' ') == True"
            ],
            "failed_tests": [
                "assert is_palindrome('A man a plan a canal Panama').islower() == False (AttributeError: 'bool' object has no attribute 'islower')"
            ]
        },
        "prompt_tokens": 144,
        "completion_tokens": 127
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert modp(3, 5) == 3",
                "assert modp(1101, 101) == 2",
                "assert modp(0, 101) == 1",
                "assert modp(3, 11) == 8",
                "assert modp(100, 101) == 1",
                "assert modp(5, 3) == 2",
                "assert modp(2, 2) == 0",
                "assert modp(10, 1000) == 24",
                "assert modp(1, 1) == 0"
            ],
            "failed_tests": [
                "assert modp(123456, 789) == 699 (AssertionError: )"
            ]
        },
        "prompt_tokens": 177,
        "completion_tokens": 137
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_shift(\"abc\") == \"fgh\"",
                "assert encode_shift(\"xyz\") == \"cde\"",
                "assert encode_shift(\"\") == \"\"",
                "assert encode_shift(\"hello\") == \"mjqqt\"",
                "assert encode_shift(\"pqrst\") == \"uvwxy\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 162,
        "completion_tokens": 56
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('') == ''",
                "assert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'",
                "assert remove_vowels('abcdef') == 'bcdf'",
                "assert remove_vowels('aaaaa') == ''",
                "assert remove_vowels('aaBAA') == 'B'",
                "assert remove_vowels('zbcd') == 'zbcd'",
                "assert remove_vowels('AeIoU') == ''",
                "assert remove_vowels('Python Programming') == 'Pythn Prgrmmng'",
                "assert remove_vowels('12345') == '12345'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 196,
        "completion_tokens": 156
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 4, 10], 100) == True",
                "assert below_threshold([1, 20, 4, 10], 5) == False",
                "assert below_threshold([], 10) == True",
                "assert below_threshold([3], 5) == True",
                "assert below_threshold([7], 7) == False",
                "assert below_threshold([10, 20, 30], 25) == False",
                "assert below_threshold([1, 2, 3], 4) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 151,
        "completion_tokens": 116
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(2, 3) == 5",
                "assert add(5, 7) == 12",
                "assert add(0, 0) == 0",
                "assert add(-1, 1) == 0",
                "assert add(-2, -3) == -5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 124,
        "completion_tokens": 64
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
                "assert same_chars('abcd', 'dddddddabc') == True",
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('eabcd', 'dddddddabc') == False",
                "assert same_chars('abcd', 'dddddddabce') == False",
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False",
                "assert same_chars('', '') == True",
                "assert same_chars('a', 'a') == True",
                "assert same_chars('abc', 'cba') == True",
                "assert same_chars('abc', 'ab') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 212,
        "completion_tokens": 149
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(10) == 55",
                "assert fib(1) == 1",
                "assert fib(8) == 21",
                "assert fib(0) == 0",
                "assert fib(2) == 1",
                "assert fib(5) == 5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 123,
        "completion_tokens": 58
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"<\") == False",
                "assert correct_bracketing(\"<>\") == True",
                "assert correct_bracketing(\"<<><>>\") == True",
                "assert correct_bracketing(\"><<>\") == False",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"><\") == False",
                "assert correct_bracketing(\"<<<>>>\") == True",
                "assert correct_bracketing(\"<<>>><\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 166,
        "completion_tokens": 94
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 2, 3, 2, 1]) == False",
                "assert monotonic([100, 50, 20, 20, 1]) == True",
                "assert monotonic([]) == True",
                "assert monotonic([5, 5, 5, 5]) == True",
                "assert monotonic([1, 2, 4, 20]) == True",
                "assert monotonic([4, 1, 0, -10]) == True",
                "assert monotonic([10, 8, 6, 3, 3, 2, 1, -5, -100]) == True",
                "assert monotonic([1, 20, 4, 10]) == False",
                "assert monotonic([1, 3, 5, 7, 8, 12, 12, 12, 15]) == True",
                "assert monotonic([1, 2, 2, 3, 4]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 159,
        "completion_tokens": 249
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
                "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]",
                "assert common([], [1, 2, 3]) == []",
                "assert common([1, 2, 3], []) == []",
                "assert common([1, 2, 3], [4, 5, 6]) == []",
                "assert common([1, 1, 1, 2], [1, 2, 2, 3]) == [1, 2]",
                "assert common(['a', 'b', 'c'], ['a', 'c', 'd']) == ['a', 'c']",
                "assert common([1.1, 2.2, 3.3], [2.2, 3.3, 4.4]) == [2.2, 3.3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 185,
        "completion_tokens": 238
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(13195) == 29",
                "assert largest_prime_factor(2048) == 2",
                "assert largest_prime_factor(6936) == 17",
                "assert largest_prime_factor(100) == 5",
                "assert largest_prime_factor(999) == 37"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 136,
        "completion_tokens": 62
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(30) == 465",
                "assert sum_to_n(100) == 5050",
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(10) == 55",
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(0) == 0",
                "assert sum_to_n(-5) == 0",
                "assert sum_to_n(3) == 6"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 167,
        "completion_tokens": 93
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"(\") == False",
                "assert correct_bracketing(\"()\") == True",
                "assert correct_bracketing(\"(()())\") == True",
                "assert correct_bracketing(\")(()\") == False",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"((((()))))\") == True",
                "assert correct_bracketing(\"(()\") == False",
                "assert correct_bracketing(\"())(()\") == False",
                "assert correct_bracketing(\"()()()\") == True",
                "assert correct_bracketing(\"(()(()))\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 163,
        "completion_tokens": 120
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
                "assert derivative([1, 2, 3]) == [2, 6]",
                "assert derivative([10]) == []",
                "assert derivative([5, 3]) == [3]",
                "assert derivative([-2, 4, -6, 8]) == [4, -12, 24]",
                "assert derivative([1, 0, 2, 0, 3]) == [0, 4, 0, 12]"
            ],
            "failed_tests": [
                "assert derivative([0, 0, 0, 3]) == [0, 0, 6] (AssertionError: )"
            ]
        },
        "prompt_tokens": 179,
        "completion_tokens": 149
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(9) == 44",
                "assert fibfib(7) == 13",
                "assert fibfib(8) == 24",
                "assert fibfib(10) == 81",
                "assert fibfib(6) == 7",
                "assert fibfib(1) == 0",
                "assert fibfib(4) == 2",
                "assert fibfib(3) == 1",
                "assert fibfib(0) == 0",
                "assert fibfib(2) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 221,
        "completion_tokens": 114
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"abcde\") == 2",
                "assert vowels_count(\"ACEDY\") == 3",
                "assert vowels_count(\"rhythm\") == 0",
                "assert vowels_count(\"RHYTHMY\") == 1",
                "assert vowels_count(\"aeiouAEIOU\") == 10",
                "assert vowels_count(\"bcdfgBCDFG\") == 0",
                "assert vowels_count(\"Python\") == 1",
                "assert vowels_count(\"quick\") == 2"
            ],
            "failed_tests": [
                "assert vowels_count(\"\") == 0 (IndexError: string index out of range)",
                "assert vowels_count(\"PYTHONy\") == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 198,
        "completion_tokens": 119
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12345, 1) == \"51234\"",
                "assert circular_shift(12345, 2) == \"45123\"",
                "assert circular_shift(12345, 5) == \"12345\"",
                "assert circular_shift(12345, 6) == \"54321\"",
                "assert circular_shift(0, 1) == \"0\"",
                "assert circular_shift(123, 0) == \"123\"",
                "assert circular_shift(987654, 3) == \"654987\""
            ],
            "failed_tests": [
                "assert circular_shift(12345, 10) == \"12345\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 154,
        "completion_tokens": 120
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"\") == 0",
                "assert digitSum(\"abAB\") == 131",
                "assert digitSum(\"abcCd\") == 67",
                "assert digitSum(\"helloE\") == 69",
                "assert digitSum(\"woArBld\") == 131",
                "assert digitSum(\"aAaaaXa\") == 153",
                "assert digitSum(\"Z\") == 90",
                "assert digitSum(\"123\") == 0"
            ],
            "failed_tests": [
                "assert digitSum(\"UPPERcase\") == 437 (AssertionError: )",
                "assert digitSum(\"lowerCASE\") == 317 (AssertionError: )"
            ]
        },
        "prompt_tokens": 184,
        "completion_tokens": 115
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
                "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
                "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95",
                "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19",
                "assert fruit_distribution(\"10 apples and 10 oranges\", 30) == 10",
                "assert fruit_distribution(\"1 apples and 0 oranges\", 2) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 282,
        "completion_tokens": 112
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([4, 2, 3]) == [2, 1]",
                "assert pluck([1, 2, 3]) == [2, 1]",
                "assert pluck([]) == []",
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
                "assert pluck([1, 3, 5, 7]) == []",
                "assert pluck([2, 4, 6, 8]) == [2, 0]",
                "assert pluck([11, 22, 33, 44, 2, 4]) == [2, 4]",
                "assert pluck([9, 7, 5, 3, 2, 4]) == [2, 4]",
                "assert pluck([8]) == [8, 0]",
                "assert pluck([1, 3, 5]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 384,
        "completion_tokens": 199
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert search([4, 1, 2, 2, 3, 1]) == 2",
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
                "assert search([5, 5, 4, 4, 4]) == -1",
                "assert search([1, 1, 1, 1]) == 1",
                "assert search([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 10",
                "assert search([2, 2]) == 2",
                "assert search([3, 3, 3, 2, 2]) == 3"
            ],
            "failed_tests": [
                "assert search([1]) == -1 (AssertionError: )",
                "assert search([7, 7, 7, 7, 7, 7, 7]) == -1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 236,
        "completion_tokens": 205
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([10, 9, 8, 7, 6]) == [6, 10, 7, 9, 8]",
                "assert strange_sort_list([1]) == [1]",
                "assert strange_sort_list([-1, -2, -3, -4]) == [-4, -1, -3, -2]",
                "assert strange_sort_list([7, 1, 4, 2]) == [1, 7, 2, 4]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 197,
        "completion_tokens": 174
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(3, 4, 5) == 6.00",
                "assert triangle_area(1, 2, 10) == -1",
                "assert triangle_area(10, 10, 10) == 43.30",
                "assert triangle_area(0, 0, 0) == -1",
                "assert triangle_area(5, 5, 8) == 12.00",
                "assert triangle_area(2, 2, 4) == -1",
                "assert triangle_area(7, 24, 25) == 84.00",
                "assert triangle_area(3, 4, 6) == 5.33"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 193,
        "completion_tokens": 142
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([1, 2], 5) == False",
                "assert will_it_fly([3, 2, 3], 1) == False",
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([3], 5) == True",
                "assert will_it_fly([1, 2, 1], 4) == True",
                "assert will_it_fly([1, 2, 2], 10) == False",
                "assert will_it_fly([], 0) == True",
                "assert will_it_fly([1, 2, 3, 2, 1], 9) == True",
                "assert will_it_fly([1, 2, 3, 4, 5], 15) == False",
                "assert will_it_fly([10], 10) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 304,
        "completion_tokens": 193
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([1, 2, 3, 2, 1]) == 0",
                "assert smallest_change([1, 1, 1, 1, 1]) == 0",
                "assert smallest_change([1, 2, 1, 2, 1]) == 0",
                "assert smallest_change([0]) == 0",
                "assert smallest_change([1, 3, 5, 7, 9, 7, 5, 3, 2]) == 1"
            ],
            "failed_tests": [
                "assert smallest_change([9, 8, 7, 8, 9, 6]) == 1 (AssertionError: )",
                "assert smallest_change([5, 9]) == 0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 229,
        "completion_tokens": 204
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match([], []) == []",
                "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']",
                "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']",
                "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']",
                "assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 265,
        "completion_tokens": 118
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(7) == False",
                "assert is_multiply_prime(2*3*7) == True",
                "assert is_multiply_prime(97) == False",
                "assert is_multiply_prime(2*3*11) == True",
                "assert is_multiply_prime(1) == False",
                "assert is_multiply_prime(3*5*7) == True"
            ],
            "failed_tests": [
                "assert is_multiply_prime(60) == True (AssertionError: )",
                "assert is_multiply_prime(2*2*2) == False (AssertionError: )",
                "assert is_multiply_prime(2*2*5) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 152,
        "completion_tokens": 124
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(1, 4) == True",
                "assert is_simple_power(2, 2) == True",
                "assert is_simple_power(8, 2) == True",
                "assert is_simple_power(3, 2) == False",
                "assert is_simple_power(3, 1) == False",
                "assert is_simple_power(5, 3) == False",
                "assert is_simple_power(27, 3) == True",
                "assert is_simple_power(16, 2) == True",
                "assert is_simple_power(81, 3) == True"
            ],
            "failed_tests": [
                "assert is_simple_power(64, 4) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 215,
        "completion_tokens": 134
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(1) == True",
                "assert iscube(2) == False",
                "assert iscube(-1) == True",
                "assert iscube(64) == True",
                "assert iscube(0) == True",
                "assert iscube(180) == False",
                "assert iscube(27) == True",
                "assert iscube(-8) == True",
                "assert iscube(125) == True",
                "assert iscube(26) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 182,
        "completion_tokens": 94
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"AB\") == 1",
                "assert hex_key(\"1077E\") == 2",
                "assert hex_key(\"ABED1A33\") == 4",
                "assert hex_key(\"123456789ABCDEF0\") == 6",
                "assert hex_key(\"2020\") == 2",
                "assert hex_key(\"\") == 0",
                "assert hex_key(\"DDDD\") == 4",
                "assert hex_key(\"2B7\") == 3",
                "assert hex_key(\"FFFFFFFF\") == 0",
                "assert hex_key(\"123\") == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 371,
        "completion_tokens": 117
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(15) == \"db1111db\"",
                "assert decimal_to_binary(32) == \"db100000db\"",
                "assert decimal_to_binary(1) == \"db1db\"",
                "assert decimal_to_binary(0) == \"db0db\"",
                "assert decimal_to_binary(255) == \"db11111111db\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 212,
        "completion_tokens": 73
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy(\"ababab\") == False",
                "assert is_happy(\"abcabc\") == True",
                "assert is_happy(\"xxy\") == False",
                "assert is_happy(\"bac\") == True",
                "assert is_happy(\"adb\") == True",
                "assert is_happy(\"xyz\") == True",
                "assert is_happy(\"aabb\") == False",
                "assert is_happy(\"aab\") == False",
                "assert is_happy(\"xyy\") == False",
                "assert is_happy(\"abcd\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 194,
        "completion_tokens": 152
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([4.0, 3.8, 3.4, 3.1, 2.8, 2.4, 2.1, 1.8, 1.4, 1.1, 0.8, 0.5, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']",
                "assert numerical_letter_grade([4.0]) == ['A+']",
                "assert numerical_letter_grade([0.0]) == ['E']",
                "assert numerical_letter_grade([]) == []"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([3.5, 2.5, 1.5, 0.5]) == ['A-', 'B', 'C-', 'D-'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 343,
        "completion_tokens": 186
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('Hello') == True",
                "assert prime_length('abcdcba') == True",
                "assert prime_length('kittens') == True",
                "assert prime_length('orange') == False",
                "assert prime_length('a') == False",
                "assert prime_length('') == False",
                "assert prime_length('abcdefg') == True",
                "assert prime_length('abcdefgh') == False",
                "assert prime_length('two') == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 153,
        "completion_tokens": 88
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert starts_one_ends(1) == 2 (AssertionError: )",
                "assert starts_one_ends(2) == 19 (AssertionError: )",
                "assert starts_one_ends(3) == 280 (AssertionError: )",
                "assert starts_one_ends(4) == 3700 (AssertionError: )",
                "assert starts_one_ends(5) == 46000 (AssertionError: )",
                "assert starts_one_ends(10) == 8199999999 (AssertionError: )"
            ]
        },
        "prompt_tokens": 117,
        "completion_tokens": 75
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solve(1000) == \"1\"",
                "assert solve(150) == \"110\"",
                "assert solve(147) == \"1100\"",
                "assert solve(0) == \"0\"",
                "assert solve(1) == \"1\""
            ],
            "failed_tests": [
                "assert solve(255) == \"11111111\" (AssertionError: )",
                "assert solve(256) == \"1\" (AssertionError: )",
                "assert solve(257) == \"10\" (AssertionError: )",
                "assert solve(1023) == \"1111111111\" (AssertionError: )",
                "assert solve(500) == \"100\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 204,
        "completion_tokens": 102
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2",
                "assert add([1, 3, 5, 7, 9]) == 0",
                "assert add([2, 4, 6, 8, 10]) == 12",
                "assert add([10]) == 0"
            ],
            "failed_tests": [
                "assert add([0, 1, 2, 3, 4, 5]) == 1 (AssertionError: )",
                "assert add([-2, -4, -6, -8]) == -4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 126,
        "completion_tokens": 115
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('Hi') == 'Hi'",
                "assert anti_shuffle('hello') == 'ehllo'",
                "assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'",
                "assert anti_shuffle('') == ''",
                "assert anti_shuffle('123 456 789') == '123 456 789'",
                "assert anti_shuffle('a b c') == 'a b c'"
            ],
            "failed_tests": [
                "assert anti_shuffle('The quick brown fox') == 'The cikqu bnoor fox' (AssertionError: )",
                "assert anti_shuffle('jumps over the lazy dog') == 'jmpsu eo rv the alyz dgo' (AssertionError: )",
                "assert anti_shuffle('Python programming is fun!') == 'Phnoty aggimmnop is fnu!' (AssertionError: )",
                "assert anti_shuffle('Multiple    spaces') == 'Multiple    acepss' (AssertionError: )"
            ]
        },
        "prompt_tokens": 202,
        "completion_tokens": 163
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
                "assert get_row([], 1) == []",
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]",
                "assert get_row([\n  [7,8,9],\n  [7,8,9,10,11,12],\n  [13,14,15]\n], 7) == [(0, 0), (1, 0)]",
                "assert get_row([\n  [4,4,4],\n  [4,5,6,4],\n  [7,8,9]\n], 4) == [(0, 2), (0, 1), (0, 0), (1, 3), (1, 0)]",
                "assert get_row([\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n], 10) == []",
                "assert get_row([\n  [10,20,30,40],\n  [50,60,70,80,90,100],\n  [110,120,130,140,150]\n], 150) == [(2, 4)]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 331,
        "completion_tokens": 322
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([]) == []",
                "assert sort_array([5]) == [5]",
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
                "assert sort_array([1, 3, 2]) == [1, 2, 3]",
                "assert sort_array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
                "assert sort_array([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
            ],
            "failed_tests": [
                "assert sort_array([10, 15]) == [15, 10] (AssertionError: )",
                "assert sort_array([11, 15]) == [11, 15] (AssertionError: )",
                "assert sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9] (AssertionError: )"
            ]
        },
        "prompt_tokens": 275,
        "completion_tokens": 353
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encrypt('hi') == 'lm'",
                "assert encrypt('xyz') == 'bcd'",
                "assert encrypt('y') == 'c'",
                "assert encrypt('abc') == 'efg'",
                "assert encrypt(' ') == ' '",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('gf') == 'kj'",
                "assert encrypt('z') == 'd'",
                "assert encrypt('') == ''",
                "assert encrypt('et') == 'ix'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 181,
        "completion_tokens": 136
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([1, 2, 3, 4, 5]) == 2",
                "assert next_smallest([5, 1, 4, 3, 2]) == 2",
                "assert next_smallest([]) == None",
                "assert next_smallest([1, 1]) == None",
                "assert next_smallest([2, 3, 4, 5, 1]) == 2",
                "assert next_smallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 2",
                "assert next_smallest([1]) == None",
                "assert next_smallest([2, 2, 3, 3, 4, 4]) == 3",
                "assert next_smallest([-2, -1, 0, 1, 2]) == -1",
                "assert next_smallest([100, 200]) == 200"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 197,
        "completion_tokens": 206
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"Hello world\") == 0",
                "assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1",
                "assert is_bored(\"I am bored. I am tired. I want to go home.\") == 3",
                "assert is_bored(\"I'm not sure if this counts. But I think it does not.\") == 0",
                "assert is_bored(\"Does this count? I wonder. Maybe it does. I think so!\") == 2",
                "assert is_bored(\"\") == 0",
                "assert is_bored(\"I think, therefore I am. Am I bored? No!\") == 1"
            ],
            "failed_tests": [
                "assert is_bored(\"I\") == 1 (AssertionError: )",
                "assert is_bored(\"I. I? I!\") == 3 (AssertionError: )"
            ]
        },
        "prompt_tokens": 180,
        "completion_tokens": 168
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(5, 2, 7) == True",
                "assert any_int(3, 2, 2) == False",
                "assert any_int(3, -2, 1) == True",
                "assert any_int(3.6, -2.2, 2) == False",
                "assert any_int(0, 0, 0) == True",
                "assert any_int(10, -5, 15) == True",
                "assert any_int(1, 1, 2) == True",
                "assert any_int(1, 1, 1) == False",
                "assert any_int(-1, -1, -2) == True",
                "assert any_int(100, 50, 50) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 207,
        "completion_tokens": 158
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'",
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
                "assert encode('AEIOU') == 'cgkqw'",
                "assert encode('') == ''"
            ],
            "failed_tests": [
                "assert encode('HELLO') == 'hJLLM' (AssertionError: )",
                "assert encode('world') == 'WMRLD' (AssertionError: )",
                "assert encode('Python Programming') == 'pYTVjM prMGRjMMKj' (AssertionError: )",
                "assert encode('aEiOu') == 'cGkQw' (AssertionError: )",
                "assert encode('sPacE') == 'SpCgG' (AssertionError: )"
            ]
        },
        "prompt_tokens": 180,
        "completion_tokens": 130
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
                "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
                "assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13",
                "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11",
                "assert skjkasdkd([0,81,12,3,1,21]) == 3",
                "assert skjkasdkd([0,8,1,2,1,7]) == 7"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 361,
        "completion_tokens": 238
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) == True",
                "assert check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}) == False",
                "assert check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}) == False",
                "assert check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}) == False",
                "assert check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) == True",
                "assert check_dict_case({}) == False",
                "assert check_dict_case({\"apple\": \"a\", \"banana\": \"b\"}) == True",
                "assert check_dict_case({\"Apple\": \"a\", \"banana\": \"b\"}) == False",
                "assert check_dict_case({\"lower\": \"mixed\", \"CASES\": \"UPPER\"}) == False"
            ],
            "failed_tests": [
                "assert check_dict_case({\"123\": \"numeric\", \"456\": \"keys\"}) == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 242,
        "completion_tokens": 205
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(5) == [2, 3]",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(0) == []",
                "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(1) == []",
                "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]",
                "assert count_up_to(2) == []",
                "assert count_up_to(3) == [2]",
                "assert count_up_to(10) == [2, 3, 5, 7]",
                "assert count_up_to(22) == [2, 3, 5, 7, 11, 13, 17, 19]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 218,
        "completion_tokens": 189
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert multiply(148, 412) == 16",
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(14, -15) == 20",
                "assert multiply(5, 7) == 35",
                "assert multiply(-10, -20) == 0",
                "assert multiply(123, 456) == 18",
                "assert multiply(0, 100) == 0",
                "assert multiply(99, 1) == 9"
            ],
            "failed_tests": [
                "assert multiply(-1, 1) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 169,
        "completion_tokens": 126
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('aBCdEf') == 1",
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('dBBE') == 0",
                "assert count_upper('AeIoU') == 3",
                "assert count_upper('') == 0",
                "assert count_upper('AEIOUaeiou') == 3"
            ],
            "failed_tests": [
                "assert count_upper('123ABCDabcd') == 1 (AssertionError: )",
                "assert count_upper('everySecondLETTER') == 0 (AssertionError: )",
                "assert count_upper('EVeRYSeCoNDLeTTeR') == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 144,
        "completion_tokens": 121
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"10\") == 10",
                "assert closest_integer(\"15.3\") == 15",
                "assert closest_integer(\"99.99\") == 100",
                "assert closest_integer(\"0\") == 0",
                "assert closest_integer(\"-99.99\") == -100",
                "assert closest_integer(\"5.5\") == 6",
                "assert closest_integer(\"-5.5\") == -6",
                "assert closest_integer(\"14.5\") == 15",
                "assert closest_integer(\"-2.6\") == -3",
                "assert closest_integer(\"2.4\") == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 228,
        "completion_tokens": 180
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(2) == [2, 4]",
                "assert make_a_pile(5) == [5, 7, 9, 11, 13]",
                "assert make_a_pile(4) == [4, 6, 8, 10]",
                "assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 206,
        "completion_tokens": 103
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]",
                "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
                "assert words_string(\"Hello,world\") == [\"Hello\", \"world\"]",
                "assert words_string(\"\") == []",
                "assert words_string(\"No,spaces,here\") == [\"No\", \"spaces\", \"here\"]",
                "assert words_string(\"Spaces and,commas, both\") == [\"Spaces\", \"and\", \"commas\", \"both\"]",
                "assert words_string(\"  Leading and trailing spaces \") == [\"Leading\", \"and\", \"trailing\", \"spaces\"]",
                "assert words_string(\"Multiple   spaces\") == [\"Multiple\", \"spaces\"]",
                "assert words_string(\"Commas,without,space\") == [\"Commas\", \"without\", \"space\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 188,
        "completion_tokens": 194
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(12, 15) == 14",
                "assert choose_num(13, 12) == -1",
                "assert choose_num(2, 5) == 4",
                "assert choose_num(8, 10) == 10",
                "assert choose_num(5, 5) == -1",
                "assert choose_num(4, 4) == 4",
                "assert choose_num(1, 100) == 100",
                "assert choose_num(14, 14) == 14",
                "assert choose_num(15, 15) == -1",
                "assert choose_num(21, 22) == 22"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 166,
        "completion_tokens": 134
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(1, 5) == \"0b11\"",
                "assert rounded_avg(7, 5) == -1",
                "assert rounded_avg(10, 20) == \"0b1111\"",
                "assert rounded_avg(20, 33) == \"0b11010\"",
                "assert rounded_avg(2, 2) == \"0b10\"",
                "assert rounded_avg(100, 100) == \"0b1100100\"",
                "assert rounded_avg(5, 5) == \"0b101\""
            ],
            "failed_tests": [
                "assert rounded_avg(1, 100) == \"0b110101\" (AssertionError: )",
                "assert rounded_avg(50, 55) == \"0b110000\" (AssertionError: )",
                "assert rounded_avg(3, 8) == \"0b101\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 212,
        "completion_tokens": 158
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([152, 323, 1422, 10]) == []",
                "assert unique_digits([111, 222, 333, 444]) == [111, 333]",
                "assert unique_digits([]) == []",
                "assert unique_digits([27, 35, 99, 12345]) == [35, 99]",
                "assert unique_digits([2, 4, 6, 8]) == []"
            ],
            "failed_tests": [
                "assert unique_digits([123, 456, 789, 135]) == [135, 789] (AssertionError: )"
            ]
        },
        "prompt_tokens": 174,
        "completion_tokens": 139
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]",
                "assert by_length([]) == []",
                "assert by_length([1, -1, 55]) == [\"One\"]",
                "assert by_length([9, 7, 3, 2]) == [\"Nine\", \"Seven\", \"Three\", \"Two\"]",
                "assert by_length([10, 11, 12]) == []",
                "assert by_length([6, 6, 6]) == [\"Six\", \"Six\", \"Six\"]",
                "assert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]",
                "assert by_length([0, -2, 10, 5]) == [\"Five\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 348,
        "completion_tokens": 220
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(1) == [1]",
                "assert f(2) == [1, 2]",
                "assert f(3) == [1, 2, 6]",
                "assert f(4) == [1, 2, 6, 24]",
                "assert f(5) == [1, 2, 6, 24, 15]",
                "assert f(6) == [1, 2, 6, 24, 15, 720]",
                "assert f(0) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 195,
        "completion_tokens": 110
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(3) == (1, 2)",
                "assert even_odd_palindrome(12) == (4, 6)",
                "assert even_odd_palindrome(1) == (0, 1)",
                "assert even_odd_palindrome(2) == (1, 1)",
                "assert even_odd_palindrome(10) == (4, 5)"
            ],
            "failed_tests": [
                "assert even_odd_palindrome(22) == (9, 9) (AssertionError: )",
                "assert even_odd_palindrome(100) == (18, 36) (AssertionError: )",
                "assert even_odd_palindrome(99) == (18, 36) (AssertionError: )",
                "assert even_odd_palindrome(123) == (18, 36) (AssertionError: )",
                "assert even_odd_palindrome(50) == (12, 19) (AssertionError: )"
            ]
        },
        "prompt_tokens": 285,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_nums([]) == 0",
                "assert count_nums([-1, 11, -11]) == 1",
                "assert count_nums([1, 1, 2]) == 3",
                "assert count_nums([-10, -20, -30, 0]) == 0",
                "assert count_nums([111, 222, 333]) == 3"
            ],
            "failed_tests": [
                "assert count_nums([10, -101, 123, -123]) == 2 (AssertionError: )",
                "assert count_nums([-5, 5, 15, -15, 25, -25]) == 4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 196,
        "completion_tokens": 124
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([3, 4, 5, 1, 2]) == True",
                "assert move_one_ball([3, 5, 4, 1, 2]) == False",
                "assert move_one_ball([1, 2, 3, 4, 5]) == True",
                "assert move_one_ball([5, 1, 2, 3, 4]) == True",
                "assert move_one_ball([2, 3, 4, 5, 1]) == True",
                "assert move_one_ball([1]) == True",
                "assert move_one_ball([]) == True",
                "assert move_one_ball([5, 4, 3, 2, 1]) == False",
                "assert move_one_ball([1, 3, 5, 2, 4]) == False",
                "assert move_one_ball([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 372,
        "completion_tokens": 214
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"",
                "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
                "assert exchange([2, 4, 6], [1, 3, 5]) == \"YES\"",
                "assert exchange([1, 3, 5], [2, 4, 6]) == \"YES\"",
                "assert exchange([1, 3, 5], [1, 3, 5]) == \"NO\"",
                "assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"YES\"",
                "assert exchange([1], [2]) == \"YES\"",
                "assert exchange([2], [1]) == \"YES\"",
                "assert exchange([1, 1, 1, 1], [2, 2, 2, 2]) == \"YES\"",
                "assert exchange([2, 2, 2, 2], [1, 1, 1, 1]) == \"YES\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 268,
        "completion_tokens": 250
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('a b b a') == {'a': 2, 'b': 2}",
                "assert histogram('a b c a b') == {'a': 2, 'b': 2}",
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('') == {}"
            ],
            "failed_tests": [
                "assert histogram('c c c d d') == {'c': 3, 'd': 2} (AssertionError: )",
                "assert histogram('x y z x y z x') == {'x': 3, 'y': 2, 'z': 2} (AssertionError: )",
                "assert histogram('m n m m n') == {'m': 3, 'n': 2} (AssertionError: )"
            ]
        },
        "prompt_tokens": 222,
        "completion_tokens": 169
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
                "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)",
                "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)",
                "assert reverse_delete(\"radar\", \"r\") == ('ada', True)",
                "assert reverse_delete(\"level\", \"\") == ('level', True)",
                "assert reverse_delete(\"\", \"xyz\") == ('', True)",
                "assert reverse_delete(\"a\", \"a\") == ('', True)",
                "assert reverse_delete(\"abccba\", \"c\") == ('abba', True)"
            ],
            "failed_tests": [
                "assert reverse_delete(\"string\", \"ints\") == ('gr', False) (AssertionError: )"
            ]
        },
        "prompt_tokens": 234,
        "completion_tokens": 143
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
                "assert odd_count(['3', \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
                "assert odd_count(['2468', '13579']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 5n the str5ng 5 of the 5nput.\"]",
                "assert odd_count(['']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['0', '2', '4']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 245,
        "completion_tokens": 254
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([-1, -2, -3]) == -6",
                "assert minSubArraySum([1]) == 1",
                "assert minSubArraySum([0, -1, 2, -3, 4]) == -3",
                "assert minSubArraySum([10, 22, -5, -3, -1]) == -9",
                "assert minSubArraySum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == -5"
            ],
            "failed_tests": [
                "assert minSubArraySum([-5, 6, -2, 0, -8]) == -8 (AssertionError: )"
            ]
        },
        "prompt_tokens": 162,
        "completion_tokens": 169
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
                "assert max_fill([[1,1,1], [1,1,1], [1,1,1]], 3) == 3",
                "assert max_fill([[1,0,1], [0,1,0], [1,0,1]], 2) == 3",
                "assert max_fill([[1]], 1) == 1",
                "assert max_fill([[1,1,1,1,1,1,1,1,1,1]], 10) == 1",
                "assert max_fill([[1,1,0,0], [0,0,1,1], [1,0,1,0], [0,1,0,1]], 1) == 8"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 395,
        "completion_tokens": 263
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([3, 7, 8, 9]) == [8, 3, 9, 7]",
                "assert sort_array([0]) == [0]",
                "assert sort_array([]) == []"
            ],
            "failed_tests": [
                "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] (AssertionError: )",
                "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] (AssertionError: )",
                "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4] (AssertionError: )",
                "assert sort_array([10, 6, 2, 3]) == [2, 10, 3, 6] (AssertionError: )"
            ]
        },
        "prompt_tokens": 242,
        "completion_tokens": 179
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
                "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
                "assert select_words(\"simple white space\", 2) == []",
                "assert select_words(\"Hello world\", 4) == [\"world\"]",
                "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]",
                "assert select_words(\"\", 2) == []",
                "assert select_words(\"To be or not to be\", 1) == [\"To\", \"be\", \"or\", \"to\", \"be\"]"
            ],
            "failed_tests": [
                "assert select_words(\"A quick brown fox jumps over the lazy dog\", 5) == [\"quick\", \"brown\", \"jumps\"] (AssertionError: )",
                "assert select_words(\"Python programming\", 8) == [] (AssertionError: )",
                "assert select_words(\"Python programming\", 7) == [\"Python\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 253,
        "completion_tokens": 178
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"A\") == \"\"",
                "assert get_closest_vowel(\"FULL\") == \"U\"",
                "assert get_closest_vowel(\"yogurt\") == \"u\"",
                "assert get_closest_vowel(\"quick\") == \"\"",
                "assert get_closest_vowel(\"Python\") == \"o\"",
                "assert get_closest_vowel(\"b\") == \"\"",
                "assert get_closest_vowel(\"ab\") == \"\"",
                "assert get_closest_vowel(\"rhythm\") == \"\""
            ],
            "failed_tests": [
                "assert get_closest_vowel(\"encyclopedia\") == \"o\" (AssertionError: )",
                "assert get_closest_vowel(\"programming\") == \"a\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 224,
        "completion_tokens": 142
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['()(', ')']) == 'Yes'",
                "assert match_parens([')', ')']) == 'No'",
                "assert match_parens(['(', ')']) == 'Yes'",
                "assert match_parens(['(()', '())']) == 'Yes'",
                "assert match_parens([')(', ')(']) == 'No'",
                "assert match_parens([')(', '']) == 'No'",
                "assert match_parens(['', '']) == 'Yes'",
                "assert match_parens(['(()(', '))']) == 'Yes'"
            ],
            "failed_tests": [
                "assert match_parens(['(', '()']) == 'Yes' (AssertionError: )",
                "assert match_parens(['())', '(()']) == 'No' (AssertionError: )"
            ]
        },
        "prompt_tokens": 242,
        "completion_tokens": 145
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
                "assert maximum([4, -4, 4], 2) == [4, 4]",
                "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
                "assert maximum([10, 20, 30, 40, 50], 5) == [10, 20, 30, 40, 50]",
                "assert maximum([1, 2, 3, 4, 5], 0) == []",
                "assert maximum([-1, -2, -3, -4, -5], 3) == [-3, -2, -1]",
                "assert maximum([100], 1) == [100]",
                "assert maximum([8, 6, 2, 5, 9, 3], 4) == [5, 6, 8, 9]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 288,
        "completion_tokens": 215
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9",
                "assert solution([30, 13, 24, 321]) == 0",
                "assert solution([0, 1, 2, 3, 4, 5]) == 0",
                "assert solution([2, 4, 6, 8, 10]) == 0",
                "assert solution([7]) == 7"
            ],
            "failed_tests": [
                "assert solution([1, 2, 3, 4, 5, 6]) == 8 (AssertionError: )",
                "assert solution([11, 22, 33, 44, 55]) == 44 (AssertionError: )",
                "assert solution([-1, -2, -3, -4, -5]) == -4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 168,
        "completion_tokens": 181
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
                "assert add_elements([10, 20, 30, 40, 50], 5) == 150",
                "assert add_elements([1, 2, 3, 4, 5], 3) == 6",
                "assert add_elements([100, 200, 300, 1, 2], 5) == 3",
                "assert add_elements([99, 23, 45, 6789, 101], 3) == 167",
                "assert add_elements([0, 0, 0, 0], 4) == 0",
                "assert add_elements([123, 456, 78, 90, 12], 2) == 0",
                "assert add_elements([9, 8, 7, 6, 5, 4, 3, 2, 1], 9) == 45"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 200,
        "completion_tokens": 227
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(1) == [1]",
                "assert get_odd_collatz(6) == [1, 3, 5]",
                "assert get_odd_collatz(10) == [1, 5]",
                "assert get_odd_collatz(2) == [1]"
            ],
            "failed_tests": [
                "assert get_odd_collatz(11) == [1, 11, 17, 25, 37, 55] (AssertionError: )",
                "assert get_odd_collatz(7) == [1, 7, 11, 17, 21, 85] (AssertionError: )",
                "assert get_odd_collatz(15) == [1, 5, 7, 15, 23, 47] (AssertionError: )",
                "assert get_odd_collatz(22) == [1, 11, 17, 33, 67] (AssertionError: )"
            ]
        },
        "prompt_tokens": 305,
        "completion_tokens": 166
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('15-01-2012') == False",
                "assert valid_date('00-00-0000') == False",
                "assert valid_date('04-31-2020') == False",
                "assert valid_date('') == False",
                "assert valid_date('13-01-2020') == False",
                "assert valid_date('02-30-2020') == False",
                "assert valid_date('06-04-2020') == True",
                "assert valid_date('01-01-0001') == True"
            ],
            "failed_tests": [
                "assert valid_date('12-31-1999') == True (AssertionError: )",
                "assert valid_date('02-29-2021') == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 335,
        "completion_tokens": 208
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"abcdef\") == 3",
                "assert split_words(\"Hello world! How are you?\") == [\"Hello\", \"world!\", \"How\", \"are\", \"you?\"]",
                "assert split_words(\"One,Two,Three,Four\") == [\"One\", \"Two\", \"Three\", \"Four\"]",
                "assert split_words(\"\") == 0"
            ],
            "failed_tests": [
                "assert split_words(\"a,c,e,g,i,k\") == 6 (AssertionError: )",
                "assert split_words(\"HelloWorld\") == 0 (AssertionError: )",
                "assert split_words(\" \") == [\"\"] (AssertionError: )",
                "assert split_words(\",\") == [\"\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 212,
        "completion_tokens": 151
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True",
                "assert is_sorted([1, 2, 2, 2, 3, 4]) == False",
                "assert is_sorted([1, 2, 3, 4, 5]) == True",
                "assert is_sorted([5]) == True",
                "assert is_sorted([1, 3, 2, 4, 5]) == False",
                "assert is_sorted([7, 6, 5, 4, 3, 2, 1]) == False",
                "assert is_sorted([2, 2, 2]) == False",
                "assert is_sorted([1, 2, 3, 4, 5, 6]) == True",
                "assert is_sorted([1, 2, 3, 4, 4, 5, 6, 7]) == True"
            ],
            "failed_tests": [
                "assert is_sorted([1, 1, 2, 3, 4, 5, 6]) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 321,
        "completion_tokens": 280
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert intersection((1, 2), (2, 3)) == \"NO\"",
                "assert intersection((-1, 1), (0, 4)) == \"NO\"",
                "assert intersection((-3, -1), (-5, 5)) == \"YES\"",
                "assert intersection((5, 7), (7, 9)) == \"NO\"",
                "assert intersection((3, 5), (1, 2)) == \"NO\"",
                "assert intersection((0, 0), (0, 0)) == \"NO\"",
                "assert intersection((1, 5), (6, 8)) == \"NO\"",
                "assert intersection((-10, -7), (-8, -5)) == \"NO\""
            ],
            "failed_tests": [
                "assert intersection((10, 13), (12, 15)) == \"YES\" (AssertionError: )",
                "assert intersection((2, 11), (3, 7)) == \"YES\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 325,
        "completion_tokens": 184
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([1, 2, 2, -4]) == -9",
                "assert prod_signs([0, 1]) == 0",
                "assert prod_signs([]) == None",
                "assert prod_signs([10, 0, -20]) == 0",
                "assert prod_signs([3]) == 3",
                "assert prod_signs([-1]) == -1",
                "assert prod_signs([0]) == 0"
            ],
            "failed_tests": [
                "assert prod_signs([-1, -2, -3]) == 6 (AssertionError: )",
                "assert prod_signs([1, -1, 1, -1, 1]) == -5 (AssertionError: )"
            ]
        },
        "prompt_tokens": 195,
        "completion_tokens": 137
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]",
                "assert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]",
                "assert minPath([[1, 2], [3, 4]], 2) == [1, 2]",
                "assert minPath([[2, 3], [1, 4]], 5) == [1, 2, 1, 2, 1]"
            ],
            "failed_tests": [
                "assert minPath([[10, 12, 11], [9, 8, 7], [6, 5, 4]], 4) == [4, 5, 4, 5] (AssertionError: )"
            ]
        },
        "prompt_tokens": 468,
        "completion_tokens": 189
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert tri(0) == [1]",
                "assert tri(1) == [1, 3]",
                "assert tri(2) == [1, 3, 2]",
                "assert tri(3) == [1, 3, 2, 8]",
                "assert tri(4) == [1, 3, 2, 8, 3]",
                "assert tri(5) == [1, 3, 2, 8, 3, 15]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 306,
        "completion_tokens": 103
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert digits(1) == 1",
                "assert digits(4) == 0",
                "assert digits(235) == 15",
                "assert digits(2222) == 0",
                "assert digits(123456789) == 945",
                "assert digits(1112) == 1",
                "assert digits(2468) == 0",
                "assert digits(13579) == 945"
            ],
            "failed_tests": [
                "assert digits(567) == 105 (AssertionError: )"
            ]
        },
        "prompt_tokens": 142,
        "completion_tokens": 91
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[[]]') == True",
                "assert is_nested('[]]]]]]][[[[[]') == False",
                "assert is_nested('[[][]]') == True",
                "assert is_nested('[][]') == False",
                "assert is_nested('[[[[]]]') == True",
                "assert is_nested(']]') == False",
                "assert is_nested('') == False",
                "assert is_nested('[[[[[]]]]]') == True",
                "assert is_nested('[[]][[') == True",
                "assert is_nested('[]') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 205,
        "completion_tokens": 135
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 14",
                "assert sum_squares([1, 4, 9]) == 98",
                "assert sum_squares([1, 3, 5, 7]) == 84",
                "assert sum_squares([1.4, 4.2, 0]) == 29",
                "assert sum_squares([-2.4, 1, 1]) == 6",
                "assert sum_squares([0, 0, 0]) == 0",
                "assert sum_squares([2.5, 2.5, 2.5]) == 27"
            ],
            "failed_tests": [
                "assert sum_squares([-1.1, -1.9, 1.1, 1.9]) == 12 (AssertionError: )"
            ]
        },
        "prompt_tokens": 230,
        "completion_tokens": 166
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
                "assert check_if_last_char_is_a_letter(\"\") == False",
                "assert check_if_last_char_is_a_letter(\"Hello World!\") == False",
                "assert check_if_last_char_is_a_letter(\"Hello World a\") == True",
                "assert check_if_last_char_is_a_letter(\"a\") == True",
                "assert check_if_last_char_is_a_letter(\" \") == False",
                "assert check_if_last_char_is_a_letter(\"Hello!\") == False",
                "assert check_if_last_char_is_a_letter(\"12345 a\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 214,
        "completion_tokens": 151
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1, 2, 4, 3, 5]) == 3",
                "assert can_arrange([1, 2, 3]) == -1",
                "assert can_arrange([10, 20, 30, 25, 40]) == 3",
                "assert can_arrange([1]) == -1",
                "assert can_arrange([2, 3, 5, 7, 11, 13, 12]) == 6",
                "assert can_arrange([100, 200, 300, 400, 500]) == -1"
            ],
            "failed_tests": [
                "assert can_arrange([5, 4, 3, 2, 1]) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 176,
        "completion_tokens": 153
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([0]) == (None, None)",
                "assert largest_smallest_integers([-2, -4, -1, -3, -5, -7]) == (-1, None)",
                "assert largest_smallest_integers([-2, 4, 1, 3, 5, 7]) == (-2, 1)",
                "assert largest_smallest_integers([-2, -4, 0, 3, 5, 7]) == (-2, 3)",
                "assert largest_smallest_integers([-10, -20, 30, 40]) == (-10, 30)",
                "assert largest_smallest_integers([1, 2, 3, -4, -5, 6, 7, -8]) == (-4, 1)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 213,
        "completion_tokens": 218
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert compare_one(1, 2.5) == 2.5",
                "assert compare_one(1, \"2,3\") == \"2,3\"",
                "assert compare_one(\"5,1\", \"6\") == \"6\"",
                "assert compare_one(\"1\", 1) == None",
                "assert compare_one(3.5, \"4.2\") == \"4.2\"",
                "assert compare_one(5, 5) == None",
                "assert compare_one(\"3.14\", 3.14) == None",
                "assert compare_one(\"100,1\", \"100.2\") == \"100.2\""
            ],
            "failed_tests": [
                "assert compare_one(\"7,8\", 7.8) == \"7,8\" (AssertionError: )",
                "assert compare_one(-1, \"-1,2\") == \"-1,2\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 213,
        "completion_tokens": 167
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(6) == False",
                "assert is_equal_to_sum_even(200) == True",
                "assert is_equal_to_sum_even(24) == True",
                "assert is_equal_to_sum_even(4) == False",
                "assert is_equal_to_sum_even(8) == True",
                "assert is_equal_to_sum_even(12) == True",
                "assert is_equal_to_sum_even(100) == True",
                "assert is_equal_to_sum_even(32) == True"
            ],
            "failed_tests": [
                "assert is_equal_to_sum_even(10) == False (AssertionError: )",
                "assert is_equal_to_sum_even(14) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 152,
        "completion_tokens": 172
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(1) == 1",
                "assert special_factorial(2) == 2",
                "assert special_factorial(3) == 12",
                "assert special_factorial(4) == 288",
                "assert special_factorial(5) == 34560"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 168,
        "completion_tokens": 60
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"Example\") == \"Example\"",
                "assert fix_spaces(\" Example   3\") == \"_Example-3\"",
                "assert fix_spaces(\"    \") == \"-\"",
                "assert fix_spaces(\"Example    4\") == \"Example-4\"",
                "assert fix_spaces(\"No Spaces\") == \"No_Spaces\"",
                "assert fix_spaces(\" Example 2\") == \"_Example_2\"",
                "assert fix_spaces(\"   \") == \"-\"",
                "assert fix_spaces(\"Example 1\") == \"Example_1\""
            ],
            "failed_tests": [
                "assert fix_spaces(\"  \") == \"-\" (AssertionError: )",
                "assert fix_spaces(\"A  B    C\") == \"A_B-C\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 178,
        "completion_tokens": 151
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"123a.txt\") == 'No'",
                "assert file_name_check(\"file_exe\") == 'No'",
                "assert file_name_check(\"1example.dll\") == 'No'",
                "assert file_name_check(\"file123.exe\") == 'Yes'",
                "assert file_name_check(\"a.b.txt\") == 'No'",
                "assert file_name_check(\"file123.exe.dll\") == 'No'",
                "assert file_name_check(\"test.file.txt\") == 'No'",
                "assert file_name_check(\"example.txt\") == 'Yes'",
                "assert file_name_check(\".txt\") == 'No'",
                "assert file_name_check(\"file1234.exe\") == 'No'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 287,
        "completion_tokens": 208
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 6",
                "assert sum_squares([]) == 0",
                "assert sum_squares([-1, -5, 2, -1, -5]) == -126",
                "assert sum_squares([0, 0, 0, 0, 0, 0, 0]) == 0"
            ],
            "failed_tests": [
                "assert sum_squares([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 3 (AssertionError: )",
                "assert sum_squares([2, 3, 4, 5]) == 27 (AssertionError: )",
                "assert sum_squares([4, 3, 2, 1, 0]) == 17 (AssertionError: )",
                "assert sum_squares([-1, -2, -3, -4, -5, -6, -7, -8]) == -204 (AssertionError: )"
            ]
        },
        "prompt_tokens": 242,
        "completion_tokens": 202
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"This is a test\") == \"is\"",
                "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
                "assert words_in_sentence(\"a\") == \"\"",
                "assert words_in_sentence(\" \") == \"\""
            ],
            "failed_tests": [
                "assert words_in_sentence(\"prime numbers are special\") == \"prime are\" (AssertionError: )",
                "assert words_in_sentence(\"one two three four five six seven\") == \"two three five seven\" (AssertionError: )",
                "assert words_in_sentence(\"Python programming is fun\") == \"is\" (AssertionError: )",
                "assert words_in_sentence(\"I love to code\") == \"I to\" (AssertionError: )",
                "assert words_in_sentence(\"abcdefg hijklmno pqrstuv wxyz\") == \"hijklmno pqrstuv\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 220,
        "completion_tokens": 141
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"1/6\", \"2/1\") == False",
                "assert simplify(\"7/10\", \"10/2\") == False",
                "assert simplify(\"2/3\", \"3/2\") == True",
                "assert simplify(\"4/9\", \"3/4\") == False",
                "assert simplify(\"1/2\", \"2/1\") == True",
                "assert simplify(\"3/7\", \"7/3\") == True",
                "assert simplify(\"10/1\", \"1/10\") == True",
                "assert simplify(\"5/5\", \"5/5\") == True",
                "assert simplify(\"9/4\", \"2/3\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 226,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]",
                "assert order_by_points([]) == []",
                "assert order_by_points([56, 65, 654, 4567]) == [56, 65, 654, 4567]"
            ],
            "failed_tests": [
                "assert order_by_points([123, 321, 213]) == [123, 213, 321] (AssertionError: )",
                "assert order_by_points([-12, -21, -111, -202]) == [-111, -12, -21, -202] (AssertionError: )"
            ]
        },
        "prompt_tokens": 188,
        "completion_tokens": 130
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2",
                "assert specialFilter([11, 22, 33, 44, 55]) == 3",
                "assert specialFilter([-11, -22, -33, -44, -55]) == 0",
                "assert specialFilter([]) == 0",
                "assert specialFilter([111, 123, 135, 147, 159]) == 5"
            ],
            "failed_tests": [
                "assert specialFilter([101, 202, 303, 404, 505]) == 2 (AssertionError: )",
                "assert specialFilter([9, 10, 11, 12, 13]) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 191,
        "completion_tokens": 167
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(5) == 1",
                "assert get_max_triples(3) == 0",
                "assert get_max_triples(6) == 4",
                "assert get_max_triples(1) == 0"
            ],
            "failed_tests": [
                "assert get_max_triples(4) == 0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 239,
        "completion_tokens": 64
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
                "assert bf(\"Earth\", \"Mercury\") == (\"Venus\",)",
                "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
                "assert bf(\"Venus\", \"Venus\") == ()",
                "assert bf(\"Earth\", \"Mars\") == ()",
                "assert bf(\"Saturn\", \"Jupiter\") == ()",
                "assert bf(\"Pluto\", \"Mars\") == ()",
                "assert bf(\"Earth\", \"Pluto\") == ()",
                "assert bf(\"Neptune\", \"Mercury\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")",
                "assert bf(\"Uranus\", \"Saturn\") == ()"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 282,
        "completion_tokens": 176
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]) == [\"ab\", \"abcd\"]",
                "assert sorted_list_sum([]) == []",
                "assert sorted_list_sum([\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"]) == [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"]",
                "assert sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\"]) == []"
            ],
            "failed_tests": [
                "assert sorted_list_sum([\"hello\", \"world\", \"python\", \"is\", \"awesome\"]) == [\"is\"] (AssertionError: )",
                "assert sorted_list_sum([\"even\", \"odd\", \"evenly\", \"oddly\", \"neat\", \"fun\"]) == [\"even\", \"neat\", \"fun\"] (AssertionError: )",
                "assert sorted_list_sum([\"flower\", \"rose\", \"lily\", \"daisy\"]) == [\"rose\", \"lily\"] (AssertionError: )",
                "assert sorted_list_sum([\"race\", \"car\", \"level\", \"radar\", \"madam\"]) == [\"car\", \"race\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 260,
        "completion_tokens": 208
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(7, 34, 12) == 34",
                "assert x_or_y(15, 8, 5) == 5",
                "assert x_or_y(2, 10, 20) == 10",
                "assert x_or_y(4, 0, 1) == 1",
                "assert x_or_y(11, 22, 33) == 22",
                "assert x_or_y(9, 3, 6) == 6",
                "assert x_or_y(13, 7, 14) == 7",
                "assert x_or_y(1, 100, 200) == 200",
                "assert x_or_y(17, 5, 10) == 5",
                "assert x_or_y(18, 8, 3) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 159,
        "completion_tokens": 185
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([1, 3, 2, 0]) == 10",
                "assert double_the_difference([-1, -2, 0]) == 0",
                "assert double_the_difference([9, -2]) == 81",
                "assert double_the_difference([0]) == 0",
                "assert double_the_difference([]) == 0",
                "assert double_the_difference([5, 7, 9]) == 5**2 + 7**2 + 9**2",
                "assert double_the_difference([4, 6, 8]) == 0",
                "assert double_the_difference([1.5, 2.5, 3.5]) == 0",
                "assert double_the_difference([-3, -5, -7]) == 0",
                "assert double_the_difference([11, 13, 15, 17]) == 11**2 + 13**2 + 15**2 + 17**2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 210,
        "completion_tokens": 199
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1,2,3,4,5,1], [1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
                "assert compare([0,5,0,0,0,4], [4,1,1,0,0,-2]) == [4,4,1,0,0,6]",
                "assert compare([10,20,30], [10,15,30]) == [0,5,0]",
                "assert compare([0,0,0], [0,0,0]) == [0,0,0]",
                "assert compare([1,1,1,1], [2,2,2,2]) == [1,1,1,1]",
                "assert compare([], []) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 301,
        "completion_tokens": 172
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
                "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
                "assert Strongest_Extension('Vehicle', ['Car', 'Truck', 'Bicycle', 'Motorcycle']) == 'Vehicle.Car'",
                "assert Strongest_Extension('Tool', ['Hammer', 'Screwdriver', 'Wrench']) == 'Tool.Hammer'",
                "assert Strongest_Extension('Animal', ['Dog', 'Cat', 'Bird', 'Fish']) == 'Animal.Dog'",
                "assert Strongest_Extension('Gadget', ['Phone', 'Laptop', 'Tablet', 'Watch']) == 'Gadget.Phone'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('Fruit', ['Apple', 'Banana', 'Cherry', 'Date']) == 'Fruit.Apple' (AssertionError: )",
                "assert Strongest_Extension('Planet', ['Mercury', 'Venus', 'Earth', 'Mars']) == 'Planet.Mercury' (AssertionError: )",
                "assert Strongest_Extension('Language', ['Python', 'Java', 'CSharp', 'Ruby']) == 'Language.CSharp' (AssertionError: )",
                "assert Strongest_Extension('Drink', ['Coffee', 'Tea', 'Water', 'Soda']) == 'Drink.Coffee' (AssertionError: )"
            ]
        },
        "prompt_tokens": 351,
        "completion_tokens": 296
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"single\", \"glesin\") == True",
                "assert cycpattern_check(\"abab\", \"baa\") == True",
                "assert cycpattern_check(\"whassup\", \"psus\") == False",
                "assert cycpattern_check(\"hello\", \"ell\") == True",
                "assert cycpattern_check(\"rotation\", \"tationro\") == True",
                "assert cycpattern_check(\"abcd\", \"abd\") == False",
                "assert cycpattern_check(\"efef\", \"eeff\") == False",
                "assert cycpattern_check(\"123456\", \"561234\") == True",
                "assert cycpattern_check(\"nopattern\", \"random\") == False"
            ],
            "failed_tests": [
                "assert cycpattern_check(\"abcdefg\", \"efgab\") == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 202,
        "completion_tokens": 181
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(-12) == (1, 1)",
                "assert even_odd_count(123) == (1, 2)",
                "assert even_odd_count(0) == (1, 0)",
                "assert even_odd_count(1111) == (0, 4)",
                "assert even_odd_count(2468) == (4, 0)",
                "assert even_odd_count(-123456789) == (4, 5)",
                "assert even_odd_count(13579) == (0, 5)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 138,
        "completion_tokens": 107
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(1) == 'i'",
                "assert int_to_mini_roman(3) == 'iii'",
                "assert int_to_mini_roman(9) == 'ix'",
                "assert int_to_mini_roman(106) == 'cvi'",
                "assert int_to_mini_roman(164) == 'clxiv'",
                "assert int_to_mini_roman(999) == 'cmxcix'",
                "assert int_to_mini_roman(1000) == 'm'",
                "assert int_to_mini_roman(58) == 'lviii'",
                "assert int_to_mini_roman(444) == 'cdxliv'",
                "assert int_to_mini_roman(83) == 'lxxxiii'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 176,
        "completion_tokens": 144
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(1, 2, 3) == False",
                "assert right_angle_triangle(5, 12, 13) == True",
                "assert right_angle_triangle(10, 6, 8) == True",
                "assert right_angle_triangle(7, 24, 25) == True",
                "assert right_angle_triangle(1, 1, 1) == False",
                "assert right_angle_triangle(6, 8, 10) == True",
                "assert right_angle_triangle(2, 2, 3) == False",
                "assert right_angle_triangle(8, 15, 17) == True"
            ],
            "failed_tests": [
                "assert right_angle_triangle(0, 0, 0) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 181,
        "completion_tokens": 164
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
                "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"",
                "assert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"",
                "assert find_max([\"hello\", \"world\", \"python\", \"code\"]) == \"python\"",
                "assert find_max([\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]) == \"abc\"",
                "assert find_max([\"a\", \"b\", \"c\", \"d\"]) == \"a\"",
                "assert find_max([\"zzzzz\", \"yyyy\", \"xxxxx\", \"wwwww\"]) == \"wwwww\"",
                "assert find_max([\"123\", \"321\", \"213\"]) == \"123\"",
                "assert find_max([\"unique\", \"words\", \"with\", \"different\", \"lengths\"]) == \"different\""
            ],
            "failed_tests": [
                "assert find_max([\"apple\", \"pear\", \"peach\", \"banana\"]) == \"banana\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 192,
        "completion_tokens": 203
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert eat(5, 6, 10) == [11, 4]",
                "assert eat(4, 8, 9) == [12, 1]",
                "assert eat(1, 10, 10) == [11, 0]",
                "assert eat(2, 11, 5) == [7, 0]",
                "assert eat(0, 0, 0) == [0, 0]",
                "assert eat(10, 5, 0) == [10, 0]",
                "assert eat(0, 100, 50) == [50, 0]",
                "assert eat(0, 10, 10) == [10, 0]"
            ],
            "failed_tests": [
                "assert eat(100, 200, 300) == [300, 0] (AssertionError: )",
                "assert eat(50, 50, 100) == [100, 0] (AssertionError: )"
            ]
        },
        "prompt_tokens": 348,
        "completion_tokens": 184
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['+'], [1, 2]) == 3",
                "assert do_algebra(['**', '//'], [2, 3, 8]) == 1"
            ],
            "failed_tests": [
                "assert do_algebra(['-', '+'], [5, 3, 2]) == 0 (AssertionError: )",
                "assert do_algebra(['*', '+', '-'], [2, 3, 4, 1]) == 13 (AssertionError: )",
                "assert do_algebra(['+', '*', '-', '//'], [1, 2, 3, 4, 2]) == 4 (AssertionError: )",
                "assert do_algebra(['//', '*', '+'], [10, 5, 2, 3]) == 5 (AssertionError: )",
                "assert do_algebra(['**', '*', '+', '-'], [2, 2, 2, 2, 2]) == 6 (AssertionError: )"
            ]
        },
        "prompt_tokens": 280,
        "completion_tokens": 176
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"1234\") == \"4321\"",
                "assert solve(\"ab\") == \"AB\"",
                "assert solve(\"HelloWorld\") == \"hELLOwORLD\"",
                "assert solve(\"123a\") == \"123A\"",
                "assert solve(\"\") == \"\"",
                "assert solve(\"ABCdef\") == \"abcDEF\"",
                "assert solve(\"aBc123\") == \"AbC123\"",
                "assert solve(\"!!\") == \"!!\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 178,
        "completion_tokens": 110
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('') is None",
                "assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'"
            ],
            "failed_tests": [
                "assert string_to_md5('python') == '5ebe2294ecd0e0f08eab7690d2a6ee69' (AssertionError: )"
            ]
        },
        "prompt_tokens": 150,
        "completion_tokens": 146
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(2, 8) == [2, 4, 6, 8]",
                "assert generate_integers(8, 2) == [2, 4, 6, 8]",
                "assert generate_integers(10, 14) == []",
                "assert generate_integers(5, 5) == []",
                "assert generate_integers(1, 3) == [2]"
            ],
            "failed_tests": [
                "assert generate_integers(3, 11) == [4, 6, 8, 10] (AssertionError: )",
                "assert generate_integers(28, 35) == [28, 30, 32, 34] (AssertionError: )"
            ]
        },
        "prompt_tokens": 177,
        "completion_tokens": 134
    }
]