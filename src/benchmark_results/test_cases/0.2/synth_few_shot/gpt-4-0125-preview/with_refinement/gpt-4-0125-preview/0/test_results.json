[
    {
        "task_id": "HumanEval/0",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
                "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
                "assert has_close_elements([10, 20, 30, 40, 50], 9.9) == False",
                "assert has_close_elements([0.1, 0.2, 0.4, 0.5], 0.15) == True",
                "assert has_close_elements([], 1.0) == False",
                "assert has_close_elements([1.5], 0.5) == False",
                "assert has_close_elements([1.0, 1.5, 2.0, 2.5, 3.0], 0.6) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 450,
        "completion_tokens": 199
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('') == []",
                "assert separate_paren_groups('no parentheses here') == []",
                "assert separate_paren_groups('((( )))(( ))()') == ['((()))', '(())', '()']",
                "assert separate_paren_groups('()()') == ['()', '()']",
                "assert separate_paren_groups('((()))') == ['((()))']",
                "assert separate_paren_groups('(())(())') == ['(())', '(())']",
                "assert separate_paren_groups('((((()))))') == ['((((()))))']",
                "assert separate_paren_groups('()((()))(())') == ['()', '((()))', '(())']",
                "assert separate_paren_groups('(()(()))') == ['(()(()))']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 435,
        "completion_tokens": 171
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(10.0) == 0.0",
                "assert truncate_number(0.99) == 0.99",
                "assert truncate_number(351) == 0.0",
                "assert truncate_number(308.0) == 0.0"
            ],
            "failed_tests": [
                "assert truncate_number(123.456) == 0.456 (AssertionError: )",
                "assert truncate_number(7.780116319656372) == 0.780116319656372 (AssertionError: )"
            ]
        },
        "prompt_tokens": 548,
        "completion_tokens": 108
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([1, 2, 3]) == False",
                "assert below_zero([1, 2, -4, 5]) == True",
                "assert below_zero([-1, -2, -3, -4]) == True",
                "assert below_zero([10, -5, -3, 20, -25, 5, 5]) == True",
                "assert below_zero([100, -50, 25, -10]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 407,
        "completion_tokens": 100
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
                "assert mean_absolute_deviation([5, 5, 5, 5, 5]) == 0.0",
                "assert mean_absolute_deviation([-1, 0, 1]) == 0.6666666666666666"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([10, 20, 30, 40, 50]) == 15.0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 678,
        "completion_tokens": 112
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([], 4) == []",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
                "assert intersperse([1], 0) == [1]",
                "assert intersperse([1, 2], -1) == [1, -1, 2]",
                "assert intersperse([10, 20, 30, 40], 100) == [10, 100, 20, 100, 30, 100, 40]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 624,
        "completion_tokens": 119
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('') == []",
                "assert parse_nested_parens('()') == [1]",
                "assert parse_nested_parens('(()) (())') == [2, 2]"
            ],
            "failed_tests": [
                "assert parse_nested_parens('((( ))) (((())))') == [3, 4] (AssertionError: )"
            ]
        },
        "prompt_tokens": 605,
        "completion_tokens": 94
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring([], 'a') == []",
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']",
                "assert filter_by_substring(['hello', 'world', 'python', 'programming'], 'p') == ['python', 'programming']",
                "assert filter_by_substring(['test', 'guest', 'nest', 'fest'], 'x') == []",
                "assert filter_by_substring(['123', '456', '789'], '1') == ['123']",
                "assert filter_by_substring(['', '', ''], 'a') == []",
                "assert filter_by_substring(['abc', 'def', 'ghi'], '') == ['abc', 'def', 'ghi']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 612,
        "completion_tokens": 158
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([1, 2, 3, 4]) == (10, 24)",
                "assert sum_product([-1, -2, -3, -4]) == (-10, 24)",
                "assert sum_product([0, 2, 4, 6]) == (12, 0)",
                "assert sum_product([1]) == (1, 1)",
                "assert sum_product([100, 200, 300]) == (600, 6000000)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 732,
        "completion_tokens": 132
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
                "assert rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]",
                "assert rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert rolling_max([10, 5, 11, 11, 2, 1]) == [10, 10, 11, 11, 11, 11]",
                "assert rolling_max([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 417,
        "completion_tokens": 165
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('abba') == True",
                "assert make_palindrome('cata') == 'catac'",
                "assert is_palindrome('abcba') == True",
                "assert is_palindrome('abcd') == False",
                "assert make_palindrome('abc') == 'abcba'",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('') == True",
                "assert make_palindrome('race') == 'racecar'",
                "assert make_palindrome('a') == 'a'",
                "assert make_palindrome('ab') == 'aba'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 561,
        "completion_tokens": 171
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('010', '110') == '100'",
                "assert string_xor('1010', '1111') == '0101'",
                "assert string_xor('0000', '1111') == '1111'",
                "assert string_xor('1111', '1111') == '0000'",
                "assert string_xor('00110011', '11001100') == '11111111'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 355,
        "completion_tokens": 84
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest([]) is None",
                "assert longest(['a', 'b', 'c']) == 'a'",
                "assert longest(['a', 'bb', 'ccc']) == 'ccc'",
                "assert longest(['hello', 'world', 'python', 'programming']) == 'programming'",
                "assert longest(['short', 'longer', 'longest', 'longer']) == 'longest'",
                "assert longest(['one', 'two', 'three', 'four', 'five']) == 'three'",
                "assert longest(['abc']) == 'abc'",
                "assert longest(['', 'a', '']) == 'a'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 405,
        "completion_tokens": 134
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(3, 5) == 1",
                "assert greatest_common_divisor(25, 15) == 5",
                "assert greatest_common_divisor(336, 318) == 6",
                "assert greatest_common_divisor(100, 10) == 10",
                "assert greatest_common_divisor(17, 13) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 545,
        "completion_tokens": 79
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
                "assert all_prefixes('') == []",
                "assert all_prefixes('a') == ['a']",
                "assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 575,
        "completion_tokens": 63
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(0) == '0'",
                "assert string_sequence(5) == '0 1 2 3 4 5'",
                "assert string_sequence(1) == '0 1'",
                "assert string_sequence(3) == '0 1 2 3'",
                "assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 579,
        "completion_tokens": 92
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('xyzXYZ') == 3",
                "assert count_distinct_characters('Jerry') == 4",
                "assert count_distinct_characters('hello') == 4",
                "assert count_distinct_characters('') == 0",
                "assert count_distinct_characters('1234567890') == 10",
                "assert count_distinct_characters('AaBbCcDdEeFf') == 6"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 565,
        "completion_tokens": 139
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
                "assert parse_music('o') == [4]",
                "assert parse_music('o|') == [2]",
                "assert parse_music('.|') == [1]",
                "assert parse_music('') == []",
                "assert parse_music('o o o') == [4, 4, 4]",
                "assert parse_music('.| .| .| .|') == [1, 1, 1, 1]",
                "assert parse_music('o| o| o| o|') == [2, 2, 2, 2]",
                "assert parse_music('o .| o| o o| .| .| o') == [4, 1, 2, 4, 2, 1, 1, 4]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 693,
        "completion_tokens": 212
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('', 'a') == 0",
                "assert how_many_times('aaa', 'a') == 3",
                "assert how_many_times('aaaa', 'aa') == 3",
                "assert how_many_times('abcabcabc', 'abc') == 3",
                "assert how_many_times('ababababa', 'aba') == 4",
                "assert how_many_times('hello world', 'world') == 1",
                "assert how_many_times('aaa', 'aaaa') == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 397,
        "completion_tokens": 137
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('three one five') == 'one three five'",
                "assert sort_numbers('nine eight seven') == 'seven eight nine'",
                "assert sort_numbers('zero two four six') == 'zero two four six'",
                "assert sort_numbers('four four four four') == 'four four four four'",
                "assert sort_numbers('') == ''"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 619,
        "completion_tokens": 71
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([10.5, 10.1, 10.6, 11.0]) == (10.5, 10.6)",
                "assert find_closest_elements([-1.0, -2.0, -3.0, -2.5]) == (-2.5, -2.0)",
                "assert find_closest_elements([100.0, 200.0, 300.0, 250.0, 260.0]) == (250.0, 260.0)",
                "assert find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.45]) == (0.4, 0.45)",
                "assert find_closest_elements([5.5, 5.55, 5.555, 5.5555]) == (5.555, 5.5555)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 771,
        "completion_tokens": 293
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([10, 20, 30, 40, 50]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([-5, 0, 5, 10]) == [0.0, 0.3333333333333333, 0.6666666666666666, 1.0]",
                "assert rescale_to_unit([100, 200]) == [0.0, 1.0]",
                "assert rescale_to_unit([0, 0, 1, 1]) == [0.0, 0.0, 1.0, 1.0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 728,
        "completion_tokens": 214
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_integers(['a', 3.14, 5]) == [5]",
                "assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]",
                "assert filter_integers([]) == []",
                "assert filter_integers(['string', {}, (), None, 0]) == [0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 394,
        "completion_tokens": 102
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert strlen('') == 0",
                "assert strlen('hello') == 5",
                "assert strlen(' ') == 1",
                "assert strlen('1234567890') == 10",
                "assert strlen('\\n\\t') == 2"
            ],
            "failed_tests": [
                "assert strlen('longer string with spaces') == 26 (AssertionError: )"
            ]
        },
        "prompt_tokens": 644,
        "completion_tokens": 79
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(318) == 159",
                "assert largest_divisor(144) == 72",
                "assert largest_divisor(3) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 326,
        "completion_tokens": 48
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(392) == [2, 2, 2, 7, 7]",
                "assert factorize(341) == [11, 31]",
                "assert factorize(14) == [2, 7]",
                "assert factorize(1) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 622,
        "completion_tokens": 60
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([5, 5, 5, 5, 5]) == []",
                "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert remove_duplicates([]) == []",
                "assert remove_duplicates([10, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == [9, 8, 7, 6, 5, 4, 3, 2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 665,
        "completion_tokens": 157
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('Hello') == 'hELLO'",
                "assert flip_case('') == ''",
                "assert flip_case('PYTHON') == 'python'",
                "assert flip_case('python') == 'PYTHON'",
                "assert flip_case('123abcABC') == '123ABCabc'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 619,
        "completion_tokens": 78
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate([]) == ''",
                "assert concatenate(['a', 'b', 'c']) == 'abc'",
                "assert concatenate(['hello', ' ', 'world']) == 'hello world'",
                "assert concatenate(['Python', '3.8']) == 'Python3.8'",
                "assert concatenate(['', 'test']) == 'test'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 570,
        "completion_tokens": 68
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']",
                "assert filter_by_prefix(['hello', 'world', 'prefix', 'python'], 'p') == ['prefix', 'python']",
                "assert filter_by_prefix(['test', 'string', 'start', 'stop'], 's') == ['string', 'start', 'stop']",
                "assert filter_by_prefix(['no', 'matching', 'strings'], 'z') == []"
            ],
            "failed_tests": [
                "assert filter_by_prefix(['uppercase', 'Under', 'umbrella'], 'U') == ['Under', 'umbrella'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 612,
        "completion_tokens": 139
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
                "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]",
                "assert get_positive([-10, -20, -30, -40]) == []",
                "assert get_positive([0, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert get_positive([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 773,
        "completion_tokens": 151
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(6) == False",
                "assert is_prime(101) == True",
                "assert is_prime(11) == True",
                "assert is_prime(13441) == True",
                "assert is_prime(61) == True",
                "assert is_prime(4) == False",
                "assert is_prime(1) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 382,
        "completion_tokens": 68
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert poly([1, 2], 2) == 5",
                "assert poly([-6, 11, -6, 1], 1) == 0",
                "assert poly([0, 0, 0, 0], 5) == 0",
                "assert poly([0, 0, 0, 0], 0) == 0",
                "assert round(find_zero([1, 2]), 2) == -0.5",
                "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0",
                "assert round(find_zero([2, -3, 0, 1]), 2) == 1.0"
            ],
            "failed_tests": [
                "assert poly([3, -2, 1], 3) == 28 (AssertionError: )",
                "assert poly([1, -1, 1, -1], 2) == -1 (AssertionError: )",
                "assert round(find_zero([10, -2]), 2) == 0.2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 787,
        "completion_tokens": 307
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_third([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
                "assert sort_third([10, 15, 20, 25, 30, 35, 40]) == [10, 15, 20, 25, 30, 35, 40]",
                "assert sort_third([0, 0, 0, 1, 1, 1, 2, 2, 2]) == [0, 0, 0, 1, 1, 1, 2, 2, 2]",
                "assert sort_third([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 473,
        "completion_tokens": 207
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
                "assert unique([1, 2, 2, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert unique([-1, -2, -2, -3, -4, -4, -4, -5]) == [-5, -4, -3, -2, -1]",
                "assert unique([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 635,
        "completion_tokens": 142
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert max_element([1, 2, 3]) == 3",
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123",
                "assert max_element([-1, -2, -3, -4]) == -1",
                "assert max_element([348, 462, 14.178401947021484]) == 462",
                "assert max_element([0]) == 0"
            ],
            "failed_tests": [
                "assert max_element([]) == None (IndexError: list index out of range)"
            ]
        },
        "prompt_tokens": 699,
        "completion_tokens": 119
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(50) == 0",
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(79) == 3"
            ],
            "failed_tests": [
                "assert fizz_buzz(100) == 4 (AssertionError: )",
                "assert fizz_buzz(200) == 9 (AssertionError: )"
            ]
        },
        "prompt_tokens": 560,
        "completion_tokens": 59
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_even([1, 2, 3]) == [1, 2, 3]",
                "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]",
                "assert sort_even([4, 1, 2, 3, 6]) == [2, 1, 4, 3, 6]",
                "assert sort_even([]) == []",
                "assert sort_even([10]) == [10]",
                "assert sort_even([8, 3, 7, 5, 2, 9, 4]) == [2, 3, 4, 5, 7, 9, 8]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 420,
        "completion_tokens": 151
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_cyclic('abc') == 'bca'",
                "assert encode_cyclic('ab') == 'ab'",
                "assert decode_cyclic(encode_cyclic('data science')) == 'data science'",
                "assert decode_cyclic('ab') == 'ab'",
                "assert decode_cyclic(encode_cyclic('')) == ''",
                "assert encode_cyclic('a') == 'a'",
                "assert decode_cyclic(encode_cyclic('algorithm')) == 'algorithm'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 671,
        "completion_tokens": 459
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(1) == 2",
                "assert prime_fib(2) == 3",
                "assert prime_fib(3) == 5",
                "assert prime_fib(4) == 13",
                "assert prime_fib(5) == 89",
                "assert prime_fib(6) == 233",
                "assert prime_fib(7) == 1597",
                "assert prime_fib(8) == 28657",
                "assert prime_fib(9) == 514229"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 397,
        "completion_tokens": 140
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
                "assert triples_sum_to_zero([1, 3, -2, 1]) == True",
                "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
                "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True",
                "assert triples_sum_to_zero([1]) == False",
                "assert triples_sum_to_zero([-1, 0, 1]) == True",
                "assert triples_sum_to_zero([0, 0, 0]) == True",
                "assert triples_sum_to_zero([10, 22, -32]) == True"
            ],
            "failed_tests": [
                "assert triples_sum_to_zero([-5, -1, 0, 2, 4]) == True (AssertionError: )",
                "assert triples_sum_to_zero([-2, -1, 1, 2]) == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 715,
        "completion_tokens": 195
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(0) == 0"
            ],
            "failed_tests": [
                "assert car_race_collision(2) == 2 (AssertionError: )",
                "assert car_race_collision(3) == 3 (AssertionError: )",
                "assert car_race_collision(10) == 10 (AssertionError: )",
                "assert car_race_collision(100) == 100 (AssertionError: )"
            ]
        },
        "prompt_tokens": 460,
        "completion_tokens": 70
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([0, -1, 2, -3]) == [1, 0, 3, -2]",
                "assert incr_list([]) == []",
                "assert incr_list([10, 15, 20, 25]) == [11, 16, 21, 26]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 688,
        "completion_tokens": 89
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
                "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
                "assert pairs_sum_to_zero([1, 2, 3, 7]) == False",
                "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True",
                "assert pairs_sum_to_zero([1]) == False",
                "assert pairs_sum_to_zero([-1, 1, 2, 3]) == True",
                "assert pairs_sum_to_zero([-3, 4, 3, -4]) == True",
                "assert pairs_sum_to_zero([]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 481,
        "completion_tokens": 165
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert change_base(357, 10) == '357'",
                "assert change_base(10, 2) == '1010'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 559,
        "completion_tokens": 57
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(10, 2) == 10.0",
                "assert triangle_area(0, 5) == 0",
                "assert triangle_area(7.5, 4) == 15.0",
                "assert triangle_area(3, 3) == 4.5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 528,
        "completion_tokens": 79
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib4(0) == 0",
                "assert fib4(1) == 0",
                "assert fib4(2) == 2",
                "assert fib4(3) == 0",
                "assert fib4(4) == 2",
                "assert fib4(5) == 4",
                "assert fib4(6) == 8",
                "assert fib4(7) == 14"
            ],
            "failed_tests": [
                "assert fib4(8) == 24 (AssertionError: )",
                "assert fib4(9) == 44 (AssertionError: )"
            ]
        },
        "prompt_tokens": 456,
        "completion_tokens": 104
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([3, 1, 2, 4, 5]) == 3",
                "assert median([1]) == 1",
                "assert median([1, 2]) == 1.5",
                "assert median([-5, -3, -1, 0, 2, 4, 6]) == 0"
            ],
            "failed_tests": [
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 567,
        "completion_tokens": 102
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('') == True",
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('aaaaa') == True",
                "assert is_palindrome('zbcd') == False",
                "assert is_palindrome('racecar') == True",
                "assert is_palindrome('madam') == True",
                "assert is_palindrome('python') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 595,
        "completion_tokens": 99
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(3, 5) == 3",
                "assert modp(1101, 101) == 2",
                "assert modp(0, 101) == 1",
                "assert modp(3, 11) == 8",
                "assert modp(100, 101) == 1",
                "assert modp(2, 3) == 1",
                "assert modp(1, 2) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 596,
        "completion_tokens": 137
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert decode_shift('') == ''",
                "assert encode_shift('hello') == 'mjqqt'",
                "assert decode_shift('fgh') == 'abc'",
                "assert encode_shift('abc') == 'fgh'",
                "assert encode_shift('xyz') == 'cde'",
                "assert decode_shift('mjqqt') == 'hello'",
                "assert decode_shift('cde') == 'xyz'",
                "assert encode_shift('') == ''"
            ],
            "failed_tests": [
                "assert decode_shift(encode_shift('unit test')) == 'unit test' (AssertionError: )",
                "assert decode_shift(encode_shift('123')) == '123' (AssertionError: )"
            ]
        },
        "prompt_tokens": 568,
        "completion_tokens": 171
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('') == ''",
                "assert remove_vowels('abcdef\\nghijklm') == 'bcdf\\nghjklm'",
                "assert remove_vowels('abcdef') == 'bcdf'",
                "assert remove_vowels('aaaaa') == ''",
                "assert remove_vowels('aaBAA') == 'B'",
                "assert remove_vowels('zbcd') == 'zbcd'",
                "assert remove_vowels('AEIOUaeiou') == ''",
                "assert remove_vowels('Python Programming') == 'Pythn Prgrmmng'",
                "assert remove_vowels('12345') == '12345'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 636,
        "completion_tokens": 157
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 4, 10], 100) == True",
                "assert below_threshold([1, 20, 4, 10], 5) == False",
                "assert below_threshold([], 10) == True",
                "assert below_threshold([0, -1, -2], 0) == False",
                "assert below_threshold([3, 5, 7], 8) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 663,
        "completion_tokens": 92
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(1, 2) == 3",
                "assert add(0, 0) == 0",
                "assert add(-1, -1) == -2",
                "assert add(319, 323) == 642",
                "assert add(6, -3) == 3",
                "assert add(-10, 10) == 0",
                "assert add(1000, 2000) == 3000"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 531,
        "completion_tokens": 91
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
                "assert same_chars('abcd', 'dddddddabc') == True",
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('eabcd', 'dddddddabc') == False",
                "assert same_chars('abcd', 'dddddddabce') == False",
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 447,
        "completion_tokens": 105
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(0) == 0",
                "assert fib(1) == 1",
                "assert fib(2) == 1",
                "assert fib(3) == 2",
                "assert fib(5) == 5",
                "assert fib(10) == 55",
                "assert fib(8) == 21"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 526,
        "completion_tokens": 67
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing('<') == False",
                "assert correct_bracketing('<>') == True",
                "assert correct_bracketing('<<><>>') == True",
                "assert correct_bracketing('><<>') == False",
                "assert correct_bracketing('') == True",
                "assert correct_bracketing('><') == False",
                "assert correct_bracketing('<<<>>>') == True",
                "assert correct_bracketing('<<>>><') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 398,
        "completion_tokens": 94
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 2, 4, 20]) == True",
                "assert monotonic([1, 20, 4, 10]) == False",
                "assert monotonic([4, 1, 0, -10]) == True",
                "assert monotonic([5, 5, 5, 5]) == True",
                "assert monotonic([10]) == True",
                "assert monotonic([2, 2, 3, 3, 3, 4, 4]) == True",
                "assert monotonic([10, 5, 5, 3, 1]) == True",
                "assert monotonic([10, 10, 10, 11, 9]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 400,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
                "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]",
                "assert common([10, 20, 30], [40, 50, 60]) == []",
                "assert common([1, 2, 2, 3], [2, 2, 3, 4]) == [2, 3]",
                "assert common([], [1, 2, 3]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 400,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(13195) == 29",
                "assert largest_prime_factor(2048) == 2",
                "assert largest_prime_factor(100) == 5",
                "assert largest_prime_factor(999) == 37"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 515,
        "completion_tokens": 50
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(30) == 465",
                "assert sum_to_n(100) == 5050",
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(10) == 55",
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(0) == 0",
                "assert sum_to_n(3) == 6"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 585,
        "completion_tokens": 82
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"(\") == False",
                "assert correct_bracketing(\"()\") == True",
                "assert correct_bracketing(\"(()())\") == True",
                "assert correct_bracketing(\")(()\") == False",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"(((((((((())))))))))\") == True",
                "assert correct_bracketing(\"(()\") == False",
                "assert correct_bracketing(\")(\") == False",
                "assert correct_bracketing(\"()()()()\") == True",
                "assert correct_bracketing(\"((((((()))\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 390,
        "completion_tokens": 174
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
                "assert derivative([1, 2, 3]) == [2, 6]",
                "assert derivative([5]) == []",
                "assert derivative([0, 4]) == [4]",
                "assert derivative([2, 0, 3]) == [0, 6]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 403,
        "completion_tokens": 89
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(0) == 0",
                "assert fibfib(7) == 13",
                "assert fibfib(9) == 44",
                "assert fibfib(2) == 1",
                "assert fibfib(8) == 24",
                "assert fibfib(5) == 4",
                "assert fibfib(3) == 1",
                "assert fibfib(6) == 7",
                "assert fibfib(4) == 2",
                "assert fibfib(10) == 81"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 437,
        "completion_tokens": 114
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"hello\") == 2",
                "assert vowels_count(\"WORLDY\") == 2",
                "assert vowels_count(\"aeiou\") == 5",
                "assert vowels_count(\"rhythm\") == 0",
                "assert vowels_count(\"SYZYGY\") == 1",
                "assert vowels_count(\"AeIoUy\") == 6",
                "assert vowels_count(\"bcdfghjklmnpqrstvwxyz\") == 0",
                "assert vowels_count(\"AEIOUY\") == 6"
            ],
            "failed_tests": [
                "assert vowels_count(\"quickly\") == 2 (AssertionError: )",
                "assert vowels_count(\"\") == 0 (IndexError: string index out of range)"
            ]
        },
        "prompt_tokens": 416,
        "completion_tokens": 124
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12345, 1) == \"51234\"",
                "assert circular_shift(12345, 2) == \"45123\"",
                "assert circular_shift(12345, 5) == \"12345\"",
                "assert circular_shift(12345, 6) == \"54321\"",
                "assert circular_shift(0, 1) == \"0\"",
                "assert circular_shift(348, 321) == \"843\""
            ],
            "failed_tests": [
                "assert circular_shift(348, 9) == \"834\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 558,
        "completion_tokens": 137
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"\") == 0",
                "assert digitSum(\"abAB\") == 131",
                "assert digitSum(\"abcCd\") == 67",
                "assert digitSum(\"helloE\") == 69",
                "assert digitSum(\"woArBld\") == 131",
                "assert digitSum(\"aAaaaXa\") == 153",
                "assert digitSum(\"12345\") == 0",
                "assert digitSum(\"aA1!Aa\") == 130"
            ],
            "failed_tests": [
                "assert digitSum(\"ABCDE\") == 325 (AssertionError: )"
            ]
        },
        "prompt_tokens": 412,
        "completion_tokens": 130
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
                "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
                "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95",
                "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19",
                "assert fruit_distribution(\"10 apples and 10 oranges\", 30) == 10",
                "assert fruit_distribution(\"3 apples and 2 oranges\", 10) == 5",
                "assert fruit_distribution(\"0 apples and 0 oranges\", 5) == 5",
                "assert fruit_distribution(\"1 apples and 1 oranges\", 4) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 530,
        "completion_tokens": 148
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([4, 2, 3]) == [2, 1]",
                "assert pluck([1, 2, 3]) == [2, 1]",
                "assert pluck([]) == []",
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
                "assert pluck([7, 11, 9]) == []",
                "assert pluck([2, 4, 6, 8]) == [2, 0]",
                "assert pluck([3, 5, 7, 2, 4]) == [2, 3]",
                "assert pluck([1, 3, 5, 7, 9, 11]) == []",
                "assert pluck([0]) == [0, 0]",
                "assert pluck([10, 6, 4, 8, 2]) == [2, 4]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 661,
        "completion_tokens": 199
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert search([4, 1, 2, 2, 3, 1]) == 2",
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
                "assert search([5, 5, 4, 4, 4]) == -1",
                "assert search([1, 1, 1, 1, 1, 1]) == 1",
                "assert search([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 10",
                "assert search([3, 3, 3, 4, 4, 4, 4]) == 4",
                "assert search([2, 2]) == 2",
                "assert search([6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1]) == 1",
                "assert search([7, 8, 9, 10, 11, 12]) == -1"
            ],
            "failed_tests": [
                "assert search([1]) == -1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 824,
        "completion_tokens": 253
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([10, 9, 8, 7, 6]) == [6, 10, 7, 9, 8]",
                "assert strange_sort_list([2, 4, 6, 8, 10, 1, 3, 5, 7, 9]) == [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 451,
        "completion_tokens": 170
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(3, 4, 5) == 6.00",
                "assert triangle_area(1, 2, 10) == -1",
                "assert triangle_area(7, 24, 25) == 84.00",
                "assert triangle_area(5, 5, 5) == 10.83",
                "assert triangle_area(0, 0, 0) == -1",
                "assert triangle_area(2, 2, 3) == 1.98",
                "assert triangle_area(8, 15, 17) == 60.00",
                "assert triangle_area(3, 7, 11) == -1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 398,
        "completion_tokens": 208
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([1, 2], 5) == False",
                "assert will_it_fly([3, 2, 3], 1) == False",
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([3], 5) == True",
                "assert will_it_fly([1, 2, 1], 4) == True",
                "assert will_it_fly([1, 2, 2, 1], 10) == True",
                "assert will_it_fly([1, 2, 3, 2, 1], 9) == True",
                "assert will_it_fly([1, 2, 3, 4, 5], 15) == False",
                "assert will_it_fly([], 0) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 590,
        "completion_tokens": 205
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([1, 2, 3, 2, 1]) == 0",
                "assert smallest_change([5, 9, 8, 1, 8, 9, 5]) == 0",
                "assert smallest_change([10, 3, 4, 5, 6, 2, 1]) == 3",
                "assert smallest_change([1]) == 0",
                "assert smallest_change([2, 2]) == 0",
                "assert smallest_change([2, 3]) == 1"
            ],
            "failed_tests": [
                "assert smallest_change([1, 2, 1, 2, 1]) == 1 (AssertionError: )",
                "assert smallest_change([9, 8, 7, 8, 9, 10]) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 491,
        "completion_tokens": 217
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match([], []) == []",
                "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']",
                "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']",
                "assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']",
                "assert total_match(['longer', 'list'], ['short']) == ['short']",
                "assert total_match(['equal', 'chars'], ['equal', 'chars']) == ['equal', 'chars']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 527,
        "completion_tokens": 177
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(2*3*7) == True",
                "assert is_multiply_prime(5*7*11) == True",
                "assert is_multiply_prime(97) == False",
                "assert is_multiply_prime(1) == False",
                "assert is_multiply_prime(2*3*5) == True"
            ],
            "failed_tests": [
                "assert is_multiply_prime(20) == False (AssertionError: )",
                "assert is_multiply_prime(2*2*2) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 374,
        "completion_tokens": 100
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(8, 2) == True",
                "assert is_simple_power(3, 2) == False",
                "assert is_simple_power(1, 4) == True",
                "assert is_simple_power(5, 3) == False",
                "assert is_simple_power(81, 3) == True",
                "assert is_simple_power(27, 3) == True"
            ],
            "failed_tests": [
                "assert is_simple_power(100, 10) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 504,
        "completion_tokens": 160
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(-8) == True",
                "assert iscube(1) == True",
                "assert iscube(2) == False",
                "assert iscube(27) == True",
                "assert iscube(8) == True",
                "assert iscube(180) == False",
                "assert iscube(-27) == True",
                "assert iscube(-1) == True",
                "assert iscube(190) == False",
                "assert iscube(376) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 438,
        "completion_tokens": 139
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"AB\") == 1",
                "assert hex_key(\"1077E\") == 2",
                "assert hex_key(\"ABED1A33\") == 4",
                "assert hex_key(\"123456789ABCDEF0\") == 6",
                "assert hex_key(\"2020\") == 2",
                "assert hex_key(\"\") == 0",
                "assert hex_key(\"FEDCBA9876543210\") == 6",
                "assert hex_key(\"A\") == 0",
                "assert hex_key(\"D\") == 1",
                "assert hex_key(\"2B5\") == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 592,
        "completion_tokens": 123
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(15) == \"db1111db\"",
                "assert decimal_to_binary(32) == \"db100000db\"",
                "assert decimal_to_binary(0) == \"db0db\"",
                "assert decimal_to_binary(405) == \"db110010101db\"",
                "assert decimal_to_binary(165) == \"db10100101db\"",
                "assert decimal_to_binary(2) == \"db10db\"",
                "assert decimal_to_binary(1) == \"db1db\"",
                "assert decimal_to_binary(255) == \"db11111111db\"",
                "assert decimal_to_binary(1023) == \"db1111111111db\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 438,
        "completion_tokens": 133
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy('a') == False",
                "assert is_happy('aa') == False",
                "assert is_happy('abcd') == True",
                "assert is_happy('aabb') == False",
                "assert is_happy('adb') == True",
                "assert is_happy('xyy') == False",
                "assert is_happy('abcdef') == True",
                "assert is_happy('abcabc') == True",
                "assert is_happy('ababab') == False",
                "assert is_happy('xyzxyz') == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 459,
        "completion_tokens": 110
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([4.0]) == ['A+']"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([2.5, 3.8, 1.2, 0.5]) == ['C+', 'A', 'D+', 'D-'] (AssertionError: )",
                "assert numerical_letter_grade([0.0, 3.3, 2.8, 1.0, 3.7]) == ['E', 'A-', 'B', 'D+', 'A'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 614,
        "completion_tokens": 181
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('Hello') == True",
                "assert prime_length('abcdcba') == True",
                "assert prime_length('kittens') == True",
                "assert prime_length('orange') == False",
                "assert prime_length('') == False",
                "assert prime_length('a') == False",
                "assert prime_length('ab') == True",
                "assert prime_length('abc') == True",
                "assert prime_length('a' * 11) == True",
                "assert prime_length('a' * 12) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 404,
        "completion_tokens": 104
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert starts_one_ends(1) == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 319,
        "completion_tokens": 49
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(1000) == '1'",
                "assert solve(147) == '1100'",
                "assert solve(0) == '0'",
                "assert solve(150) == '110'",
                "assert solve(2) == '10'",
                "assert solve(3) == '11'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 453,
        "completion_tokens": 153
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2",
                "assert add([1, 3, 5, 7]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 342,
        "completion_tokens": 172
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('Hi') == 'Hi'",
                "assert anti_shuffle('hello') == 'ehllo'",
                "assert anti_shuffle('123 456') == '123 456'",
                "assert anti_shuffle('a b c') == 'a b c'",
                "assert anti_shuffle('') == ''"
            ],
            "failed_tests": [
                "assert anti_shuffle('Python Programming!') == 'Phnoty Paggimmnorr!' (AssertionError: )",
                "assert anti_shuffle('The quick brown fox') == 'The cikqu bnoorw fox' (AssertionError: )"
            ]
        },
        "prompt_tokens": 428,
        "completion_tokens": 153
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([[1,2,3,4,5,6],[1,2,3,4,1,6],[1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
                "assert get_row([], 1) == []",
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]",
                "assert get_row([[7,8,9],[7,8,9],[7,8,9]], 7) == [(0, 0), (1, 0), (2, 0)]",
                "assert get_row([[10,20,30],[40,50,60],[70,80,90]], 100) == []",
                "assert get_row([[1,2,3],[4,5,6],[1,1,1]], 1) == [(0, 0), (2, 2), (2, 1), (2, 0)]",
                "assert get_row([[3,2,1],[6,5,4],[9,8,7]], 5) == [(1, 1)]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 647,
        "completion_tokens": 267
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([]) == []",
                "assert sort_array([5]) == [5]",
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
                "assert sort_array([10, 2, 8, 6, 4]) == [10, 8, 6, 4, 2]"
            ],
            "failed_tests": [
                "assert sort_array([11, 2, 8, 6, 4, 3]) == [2, 3, 4, 6, 8, 11] (AssertionError: )"
            ]
        },
        "prompt_tokens": 790,
        "completion_tokens": 213
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encrypt('hi') == 'lm'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('gf') == 'kj'",
                "assert encrypt('et') == 'ix'",
                "assert encrypt('') == ''",
                "assert encrypt('z') == 'd'",
                "assert encrypt('y') == 'c'"
            ],
            "failed_tests": [
                "assert encrypt('hello!') == 'jgnnq!' (AssertionError: )",
                "assert encrypt('A') == 'E' (AssertionError: )",
                "assert encrypt('Z') == 'D' (AssertionError: )"
            ]
        },
        "prompt_tokens": 577,
        "completion_tokens": 122
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([1, 2, 3, 4, 5]) == 2",
                "assert next_smallest([5, 1, 4, 3, 2]) == 2",
                "assert next_smallest([]) == None",
                "assert next_smallest([1, 1]) == None",
                "assert next_smallest([2, 2, 3, 3, 4, 4]) == 3",
                "assert next_smallest([10]) == None",
                "assert next_smallest([-2, -1, 0, 1, 2]) == -1",
                "assert next_smallest([3, 2, 1, 0, -1, -2]) == -1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 739,
        "completion_tokens": 157
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"Hello world\") == 0",
                "assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1",
                "assert is_bored(\"I think, therefore I am. I am hungry!\") == 2",
                "assert is_bored(\"Is it raining? I thought it was clear. Incredible!\") == 1",
                "assert is_bored(\"\") == 0"
            ],
            "failed_tests": [
                "assert is_bored(\"I\") == 1 (AssertionError: )",
                "assert is_bored(\"I'm not sure. I think I am bored. Are you?\") == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 397,
        "completion_tokens": 150
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(5, 2, 7) == True",
                "assert any_int(3, 2, 2) == False",
                "assert any_int(3, -2, 1) == True",
                "assert any_int(3.6, -2.2, 2) == False",
                "assert any_int(10, 5, 5) == True",
                "assert any_int(0, 0, 0) == True",
                "assert any_int(-1, -2, -3) == True",
                "assert any_int(1.5, 2, 3.5) == False",
                "assert any_int(2, 2, 4) == True",
                "assert any_int(9, 5, 3) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 458,
        "completion_tokens": 162
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'",
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'",
                "assert encode('') == ''"
            ],
            "failed_tests": [
                "assert encode('HELLO world') == 'hJNNQ WQRLD' (AssertionError: )",
                "assert encode('AeIoU') == 'CIKQW' (AssertionError: )",
                "assert encode('Python Programming') == 'pYTHQN pRQHRWMMKQG' (AssertionError: )"
            ]
        },
        "prompt_tokens": 400,
        "completion_tokens": 95
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
                "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
                "assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13",
                "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11",
                "assert skjkasdkd([0,81,12,3,1,21]) == 3",
                "assert skjkasdkd([0,8,1,2,1,7]) == 7"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 704,
        "completion_tokens": 238
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({'a': 'apple', 'b': 'banana'}) == True",
                "assert check_dict_case({'a': 'apple', 'A': 'banana', 'B': 'banana'}) == False",
                "assert check_dict_case({'a': 'apple', 8: 'banana', 'a': 'apple'}) == False",
                "assert check_dict_case({'Name': 'John', 'Age': '36', 'City': 'Houston'}) == False",
                "assert check_dict_case({'STATE': 'NC', 'ZIP': '12345'}) == True",
                "assert check_dict_case({}) == False",
                "assert check_dict_case({'name': 'john', 'age': '36'}) == True",
                "assert check_dict_case({'NAME': 'JOHN', 'AGE': '36'}) == True",
                "assert check_dict_case({'Name': 'John', 'age': '36'}) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 538,
        "completion_tokens": 210
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(5) == [2, 3]",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(0) == []",
                "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(1) == []",
                "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]",
                "assert count_up_to(2) == []",
                "assert count_up_to(3) == [2]",
                "assert count_up_to(29) == [2, 3, 5, 7, 11, 13, 17, 19, 23]",
                "assert count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 448,
        "completion_tokens": 255
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert multiply(148, 412) == 16",
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(14, -15) == 20",
                "assert multiply(-34, -56) == 24",
                "assert multiply(0, 123) == 0",
                "assert multiply(999, 1) == 9"
            ],
            "failed_tests": [
                "assert multiply(-123, 456) == 18 (AssertionError: )"
            ]
        },
        "prompt_tokens": 598,
        "completion_tokens": 102
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('aBCdEf') == 1",
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('dBBE') == 0",
                "assert count_upper('') == 0",
                "assert count_upper('AEIOUaeiou') == 3",
                "assert count_upper('AeIoU') == 3",
                "assert count_upper('bCdEfGh') == 0"
            ],
            "failed_tests": [
                "assert count_upper('123AeE') == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 369,
        "completion_tokens": 103
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"10\") == 10",
                "assert closest_integer(\"15.3\") == 15",
                "assert closest_integer(\"14.5\") == 15",
                "assert closest_integer(\"-14.5\") == -15",
                "assert closest_integer(\"2.8\") == 3",
                "assert closest_integer(\"-2.1\") == -2",
                "assert closest_integer(\"0.5\") == 1",
                "assert closest_integer(\"-0.5\") == -1",
                "assert closest_integer(\"99.99\") == 100",
                "assert closest_integer(\"-99.99\") == -100"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 465,
        "completion_tokens": 122
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(2) == [2, 4]",
                "assert make_a_pile(4) == [4, 6, 8, 10]",
                "assert make_a_pile(5) == [5, 7, 9, 11, 13]",
                "assert make_a_pile(3) == [3, 5, 7]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 596,
        "completion_tokens": 94
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"apple,banana,orange\") == [\"apple\", \"banana\", \"orange\"]",
                "assert words_string(\" \") == []",
                "assert words_string(\"word\") == [\"word\"]",
                "assert words_string(\"This is,a test\") == [\"This\", \"is\", \"a\", \"test\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 436,
        "completion_tokens": 125
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(1, 100) == 100",
                "assert choose_num(11, 11) == -1",
                "assert choose_num(5, 8) == 8",
                "assert choose_num(7, 7) == -1",
                "assert choose_num(7, 601602792739868) == 601602792739868",
                "assert choose_num(13, 12) == -1",
                "assert choose_num(12, 15) == 14",
                "assert choose_num(10, 10) == 10",
                "assert choose_num(2, 5) == 4"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 389,
        "completion_tokens": 155
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(7, 5) == -1",
                "assert rounded_avg(20, 33) == '0b11010'",
                "assert rounded_avg(0, 0) == '0b0'",
                "assert rounded_avg(100, 100) == '0b1100100'",
                "assert rounded_avg(8, 4) == -1"
            ],
            "failed_tests": [
                "assert rounded_avg(50, 52) == '0b101001' (AssertionError: )"
            ]
        },
        "prompt_tokens": 467,
        "completion_tokens": 140
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([152, 323, 1422, 10]) == []",
                "assert unique_digits([111, 222, 333, 444]) == [111, 333]",
                "assert unique_digits([24, 35, 68, 79, 91]) == [35, 79, 91]",
                "assert unique_digits([]) == []",
                "assert unique_digits([2, 4, 6, 8]) == []"
            ],
            "failed_tests": [
                "assert unique_digits([123, 456, 789, 0]) == [789] (AssertionError: )",
                "assert unique_digits([135, 135, 135]) == [135] (AssertionError: )"
            ]
        },
        "prompt_tokens": 639,
        "completion_tokens": 157
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']",
                "assert by_length([]) == []",
                "assert by_length([1, -1, 55]) == ['One']",
                "assert by_length([9, 7, 3, 6]) == ['Nine', 'Seven', 'Six', 'Three']",
                "assert by_length([10, 0, -5, 3, 2, 1]) == ['Three', 'Two', 'One']",
                "assert by_length([4, 4, 4, 4]) == ['Four', 'Four', 'Four', 'Four']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 636,
        "completion_tokens": 166
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(5) == [1, 2, 6, 24, 15]",
                "assert f(1) == [1]",
                "assert f(3) == [1, 2, 6]",
                "assert f(4) == [1, 2, 6, 24]",
                "assert f(6) == [1, 2, 6, 24, 15, 720]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 409,
        "completion_tokens": 91
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(3) == (1, 2)",
                "assert even_odd_palindrome(12) == (4, 6)",
                "assert even_odd_palindrome(1) == (0, 1)",
                "assert even_odd_palindrome(9) == (4, 5)",
                "assert even_odd_palindrome(10) == (4, 5)",
                "assert even_odd_palindrome(11) == (4, 6)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 525,
        "completion_tokens": 124
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_nums([]) == 0",
                "assert count_nums([1, 1, 2]) == 3",
                "assert count_nums([0]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 661,
        "completion_tokens": 146
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([1, 3, 2]) == False",
                "assert move_one_ball([20, 30, 40, 50, 10]) == True",
                "assert move_one_ball([30, 40, 50, 10, 20]) == True",
                "assert move_one_ball([3, 5, 4, 1, 2]) == False",
                "assert move_one_ball([3, 4, 5, 1, 2]) == True",
                "assert move_one_ball([40, 50, 10, 20, 30]) == True",
                "assert move_one_ball([]) == True",
                "assert move_one_ball([1, 2, 3, 4, 5]) == True",
                "assert move_one_ball([1, 2, 4, 3]) == False",
                "assert move_one_ball([50, 10, 20, 30, 40]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 861,
        "completion_tokens": 291
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([2, 4, 6], [1, 3, 5]) == 'YES'",
                "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == 'YES'",
                "assert exchange([1, 2, 3, 4], [1, 5, 3, 7]) == 'NO'",
                "assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == 'YES'",
                "assert exchange([2, 4, 6], [8, 10, 12]) == 'YES'",
                "assert exchange([1, 3, 5], [7, 9, 11]) == 'NO'",
                "assert exchange([1, 3, 5, 7], [2, 4, 6, 8]) == 'YES'",
                "assert exchange([1], [2]) == 'YES'",
                "assert exchange([1], [3]) == 'NO'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 542,
        "completion_tokens": 344
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('a b b a') == {'a': 2, 'b': 2}",
                "assert histogram('a b c a b') == {'a': 2, 'b': 2}",
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('') == {}",
                "assert histogram('c c c c c') == {'c': 5}",
                "assert histogram('a b c d e f g h i j k') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1}"
            ],
            "failed_tests": [
                "assert histogram('m n m n m n m') == {'m': 4, 'n': 3} (AssertionError: )"
            ]
        },
        "prompt_tokens": 478,
        "completion_tokens": 217
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
                "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)",
                "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)",
                "assert reverse_delete(\"radar\", \"r\") == ('ada', True)",
                "assert reverse_delete(\"a\", \"a\") == ('', True)",
                "assert reverse_delete(\"\", \"\") == ('', True)",
                "assert reverse_delete(\"noon\", \"n\") == ('oo', True)"
            ],
            "failed_tests": [
                "assert reverse_delete(\"level\", \"v\") == ('leel', False) (AssertionError: )",
                "assert reverse_delete(\"hello\", \"hlo\") == ('el', False) (AssertionError: )",
                "assert reverse_delete(\"racecar\", \"ace\") == ('rcr', True) (AssertionError: )"
            ]
        },
        "prompt_tokens": 477,
        "completion_tokens": 159
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
                "assert odd_count(['3', '11111111']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
                "assert odd_count(['2468']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['13579', '02468', '12345']) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 531,
        "completion_tokens": 231
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([-1, -2, -3]) == -6",
                "assert minSubArraySum([1, 2, 3, -4, 5]) == -4",
                "assert minSubArraySum([-5, -1, -8, 0, 3]) == -14",
                "assert minSubArraySum([0, 0, 0, 0]) == 0",
                "assert minSubArraySum([10]) == 10"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 405,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
                "assert max_fill([[1,1,1], [1,1,1], [1,1,1]], 3) == 3",
                "assert max_fill([[1,0,1], [0,1,0], [1,0,1]], 2) == 3",
                "assert max_fill([[1,1,1,1], [1,1,1,1]], 4) == 2",
                "assert max_fill([[1]], 1) == 1",
                "assert max_fill([[1,1,0,0], [0,0,1,1]], 1) == 4"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 684,
        "completion_tokens": 242
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([0, 0, 0, 0]) == [0, 0, 0, 0]",
                "assert sort_array([3, 7, 8, 9]) == [8, 3, 9, 7]",
                "assert sort_array([1024, 512, 256, 128, 64]) == [64, 128, 256, 512, 1024]",
                "assert sort_array([31, 15, 7, 3, 1]) == [1, 3, 7, 15, 31]"
            ],
            "failed_tests": [
                "assert sort_array([10, 7, 8, 9, 1]) == [1, 8, 10, 9, 7] (AssertionError: )"
            ]
        },
        "prompt_tokens": 525,
        "completion_tokens": 164
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
                "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
                "assert select_words(\"simple white space\", 2) == []",
                "assert select_words(\"Hello world\", 4) == [\"world\"]",
                "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]",
                "assert select_words(\"\", 3) == []",
                "assert select_words(\"a e i o u\", 1) == []",
                "assert select_words(\"b c d f g\", 1) == [\"b\", \"c\", \"d\", \"f\", \"g\"]"
            ],
            "failed_tests": [
                "assert select_words(\"The quick brown fox jumps over the lazy dog\", 5) == [\"quick\", \"brown\", \"jumps\"] (AssertionError: )",
                "assert select_words(\"The quick brown fox jumps over the lazy dog\", 4) == [\"over\", \"lazy\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 498,
        "completion_tokens": 190
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"AEIOU\") == \"\"",
                "assert get_closest_vowel(\"ab\") == \"\"",
                "assert get_closest_vowel(\"quick\") == \"\"",
                "assert get_closest_vowel(\"yogurt\") == \"u\"",
                "assert get_closest_vowel(\"strength\") == \"e\"",
                "assert get_closest_vowel(\"aeiou\") == \"\"",
                "assert get_closest_vowel(\"FULL\") == \"U\"",
                "assert get_closest_vowel(\"b\") == \"\""
            ],
            "failed_tests": [
                "assert get_closest_vowel(\"programming\") == \"a\" (AssertionError: )",
                "assert get_closest_vowel(\"Algorithm\") == \"o\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 473,
        "completion_tokens": 141
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['()(', ')']) == 'Yes'",
                "assert match_parens([')', ')']) == 'No'",
                "assert match_parens(['(', '(']) == 'No'",
                "assert match_parens(['()', '()']) == 'Yes'",
                "assert match_parens([')(', '']) == 'No'",
                "assert match_parens(['(', ')']) == 'Yes'",
                "assert match_parens(['', '']) == 'Yes'",
                "assert match_parens(['(()', '())']) == 'Yes'"
            ],
            "failed_tests": [
                "assert match_parens([')(', '()']) == 'Yes' (AssertionError: )",
                "assert match_parens([')())', '(()(']) == 'No' (AssertionError: )"
            ]
        },
        "prompt_tokens": 453,
        "completion_tokens": 145
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([10, 7, 8, 9, 1, 5], 3) == [8, 9, 10]",
                "assert maximum([3, 1, 2], 3) == [1, 2, 3]",
                "assert maximum([3, 1, 2], 0) == []",
                "assert maximum([], 0) == []",
                "assert maximum([-10, -20, -30, -40, -50], 2) == [-20, -10]",
                "assert maximum([7, 7, 7, 7], 2) == [7, 7]",
                "assert maximum([100], 1) == [100]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 556,
        "completion_tokens": 354
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9",
                "assert solution([30, 13, 24, 321]) == 0",
                "assert solution([2, 4, 6, 8, 10]) == 0",
                "assert solution([1, 3, 5, 7, 9]) == 15",
                "assert solution([0, 1, 2, 3, 4, 5]) == 0",
                "assert solution([1]) == 1",
                "assert solution([2]) == 0",
                "assert solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 25"
            ],
            "failed_tests": [
                "assert solution([11, 22, 33, 44, 55]) == 44 (AssertionError: )"
            ]
        },
        "prompt_tokens": 424,
        "completion_tokens": 199
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
                "assert add_elements([10, 20, 30, 40, 50], 5) == 150",
                "assert add_elements([99, 1, 100, 101, 102], 3) == 100",
                "assert add_elements([5, 4, 3, 2, 1], 5) == 15",
                "assert add_elements([123, 456, 789, 12, 34, 56, 78], 7) == 180",
                "assert add_elements([0, 0, 0, 0], 4) == 0",
                "assert add_elements([9], 1) == 9",
                "assert add_elements([100, 200, 300, 10, 20, 30], 6) == 60"
            ],
            "failed_tests": [
                "assert add_elements([-10, -20, 30, 40, -50], 5) == -10 (AssertionError: )"
            ]
        },
        "prompt_tokens": 713,
        "completion_tokens": 236
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(1) == [1]",
                "assert get_odd_collatz(2) == [1]",
                "assert get_odd_collatz(6) == [1, 3, 5]"
            ],
            "failed_tests": [
                "assert get_odd_collatz(11) == [1, 11, 17, 25, 37, 55] (AssertionError: )",
                "assert get_odd_collatz(15) == [1, 5, 7, 15, 23, 47] (AssertionError: )"
            ]
        },
        "prompt_tokens": 526,
        "completion_tokens": 124
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('06/04/2020') == False",
                "assert valid_date('07-04-1776') == True",
                "assert valid_date('06-04-2020') == True",
                "assert valid_date('12-25-1999') == True",
                "assert valid_date('02-29-2020') == True",
                "assert valid_date('03-11-2000') == True",
                "assert valid_date('15-01-2012') == False",
                "assert valid_date('11-31-2020') == False",
                "assert valid_date('02-30-2000') == False"
            ],
            "failed_tests": [
                "assert valid_date('02-29-2021') == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 600,
        "completion_tokens": 265
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"abcdef\") == 3",
                "assert split_words(\"no whitespaces or commas\") == [\"no\", \"whitespaces\", \"or\", \"commas\"]",
                "assert split_words(\"a,b,c,d,e,f,g,h\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]",
                "assert split_words(\"a,b,c,defg,hij\") == [\"a\", \"b\", \"c\", \"defg\", \"hij\"]"
            ],
            "failed_tests": [
                "assert split_words(\"singleword\") == 0 (AssertionError: )",
                "assert split_words(\"mnopqr\") == 4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 456,
        "completion_tokens": 162
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([1, 2, 3, 4, 5, 6]) == True",
                "assert is_sorted([1, 2, 2, 2, 3, 4]) == False",
                "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True",
                "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False",
                "assert is_sorted([1, 2, 3, 4, 4, 3]) == False",
                "assert is_sorted([1, 3, 2, 4, 5]) == False",
                "assert is_sorted([2, 2]) == True",
                "assert is_sorted([5]) == True",
                "assert is_sorted([1, 2, 3, 4, 5, 5]) == True",
                "assert is_sorted([2, 2, 2]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 698,
        "completion_tokens": 307
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersection((-3, -1), (-5, 5)) == \"YES\"",
                "assert intersection((-1, 1), (0, 4)) == \"NO\"",
                "assert intersection((0, 3), (1, 2)) == \"NO\"",
                "assert intersection((1, 5), (6, 9)) == \"NO\"",
                "assert intersection((10, 20), (21, 30)) == \"NO\"",
                "assert intersection((-10, -5), (-7, -3)) == \"YES\"",
                "assert intersection((1, 2), (2, 3)) == \"NO\"",
                "assert intersection((5, 7), (7, 9)) == \"NO\"",
                "assert intersection((3, 5), (5, 10)) == \"NO\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 591,
        "completion_tokens": 313
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([1, 2, 2, -4]) == -9",
                "assert prod_signs([0, 1]) == 0",
                "assert prod_signs([]) == None",
                "assert prod_signs([1, 1, 1, 1]) == 4",
                "assert prod_signs([-1, 0, 1]) == 0",
                "assert prod_signs([0, 0, 0]) == 0",
                "assert prod_signs([10, 20, 30]) == 60",
                "assert prod_signs([-10, -20, -30, 0]) == 0"
            ],
            "failed_tests": [
                "assert prod_signs([-1, -2, -3]) == 6 (AssertionError: )",
                "assert prod_signs([1, -1, 1, -1, 1]) == -5 (AssertionError: )"
            ]
        },
        "prompt_tokens": 673,
        "completion_tokens": 178
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [1, 2, 1]",
                "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 1) == [1]",
                "assert minPath([[3,2,1],[6,5,4],[9,8,7]], 2) == [1, 2]"
            ],
            "failed_tests": [
                "assert minPath([[10,12,11],[9,8,7],[6,5,4]], 4) == [4, 5, 4, 5] (AssertionError: )",
                "assert minPath([[1,4],[2,3]], 4) == [1, 2, 3, 2] (AssertionError: )",
                "assert minPath([[15,25,9],[8,19,7],[17,6,5]], 5) == [5, 6, 5, 6, 5] (AssertionError: )"
            ]
        },
        "prompt_tokens": 716,
        "completion_tokens": 207
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": true,
        "test_results": {
            "passed_tests": [],
            "failed_tests": []
        },
        "prompt_tokens": 546,
        "completion_tokens": 103
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert digits(3) == 3"
            ],
            "failed_tests": [
                "assert digits(738394260406494) == 0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 351,
        "completion_tokens": 44
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[]]]]]]][[[[[]') == False",
                "assert is_nested(']]]]') == False",
                "assert is_nested('[[][]]') == True",
                "assert is_nested('[[]]') == True",
                "assert is_nested('[[[]]][]') == True",
                "assert is_nested('[[[[]]]]') == True",
                "assert is_nested('[][]') == False",
                "assert is_nested('[[]][[') == True",
                "assert is_nested('') == False",
                "assert is_nested('[]') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 430,
        "completion_tokens": 122
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 14",
                "assert sum_squares([1, 4, 9]) == 98",
                "assert sum_squares([1.4, 4.2, 0]) == 29",
                "assert sum_squares([1, 3, 5, 7]) == 84",
                "assert sum_squares([]) == 0",
                "assert sum_squares([0, 0, 0]) == 0",
                "assert sum_squares([100, 200, 300]) == 140000"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 469,
        "completion_tokens": 259
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
                "assert check_if_last_char_is_a_letter(\"The quick brown fox jumps over the lazy dog.\") == False",
                "assert check_if_last_char_is_a_letter(\"\") == False",
                "assert check_if_last_char_is_a_letter(\"What?\") == False",
                "assert check_if_last_char_is_a_letter(\"Hello World!\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 449,
        "completion_tokens": 173
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1,2,4,3,5]) == 3",
                "assert can_arrange([1,2,3]) == -1",
                "assert can_arrange([10,20,15,30,25,40]) == 4",
                "assert can_arrange([1,2,3,4,5,6,7,8,9]) == -1",
                "assert can_arrange([2,3,1]) == 2",
                "assert can_arrange([100,200,150,300,250,400]) == 4",
                "assert can_arrange([]) == -1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 399,
        "completion_tokens": 151
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([0]) == (None, None)",
                "assert largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3]) == (-1, 1)",
                "assert largest_smallest_integers([-5, -4, -3, -2, -1]) == (-1, None)",
                "assert largest_smallest_integers([1, 2, 3, 4, 5]) == (None, 1)",
                "assert largest_smallest_integers([-10, -20, 30, 40, 50]) == (-10, 30)",
                "assert largest_smallest_integers([-1, 0, 1]) == (-1, 1)",
                "assert largest_smallest_integers([0, 0, 0, -100]) == (-100, None)",
                "assert largest_smallest_integers([0, 0, 0, 100]) == (None, 100)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 702,
        "completion_tokens": 252
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(1, 2.5) == 2.5",
                "assert compare_one(1, \"2,3\") == \"2,3\"",
                "assert compare_one(\"5,1\", \"6\") == \"6\"",
                "assert compare_one(\"1\", 1) == None",
                "assert compare_one(3.5, 2) == 3.5",
                "assert compare_one(\"3,4\", 2) == \"3,4\"",
                "assert compare_one(\"3.5\", \"4.2\") == \"4.2\"",
                "assert compare_one(5, 5) == None",
                "assert compare_one(\"7,1\", \"7,1\") == None",
                "assert compare_one(\"10.5\", 10.5) == None"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 459,
        "completion_tokens": 162
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(4) == False",
                "assert is_equal_to_sum_even(6) == False",
                "assert is_equal_to_sum_even(8) == True",
                "assert is_equal_to_sum_even(12) == True",
                "assert is_equal_to_sum_even(16) == True",
                "assert is_equal_to_sum_even(20) == True",
                "assert is_equal_to_sum_even(24) == True"
            ],
            "failed_tests": [
                "assert is_equal_to_sum_even(10) == False (AssertionError: )",
                "assert is_equal_to_sum_even(14) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 557,
        "completion_tokens": 112
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(1) == 1",
                "assert special_factorial(2) == 2",
                "assert special_factorial(3) == 12",
                "assert special_factorial(4) == 288",
                "assert special_factorial(5) == 34560"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 578,
        "completion_tokens": 60
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"Example    4\") == \"Example-4\"",
                "assert fix_spaces(\" Example 2\") == \"_Example_2\"",
                "assert fix_spaces(\"Example\") == \"Example\"",
                "assert fix_spaces(\"Example     6\") == \"Example-6\"",
                "assert fix_spaces(\"   \") == \"-\"",
                "assert fix_spaces(\" Example   3\") == \"_Example-3\"",
                "assert fix_spaces(\" \") == \"_\"",
                "assert fix_spaces(\"\") == \"\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 443,
        "completion_tokens": 176
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"example.txt\") == 'Yes'",
                "assert file_name_check(\"1example.dll\") == 'No'",
                "assert file_name_check(\"allGood123.txt\") == 'Yes'",
                "assert file_name_check(\"justRight99.exe\") == 'Yes'",
                "assert file_name_check(\"example.\") == 'No'",
                "assert file_name_check(\"noExtension\") == 'No'",
                "assert file_name_check(\"123.txt\") == 'No'",
                "assert file_name_check(\"validName123.dll\") == 'Yes'",
                "assert file_name_check(\".txt\") == 'No'"
            ],
            "failed_tests": [
                "assert file_name_check(\"UpperCaseStart.EXE\") == 'Yes' (AssertionError: )"
            ]
        },
        "prompt_tokens": 574,
        "completion_tokens": 283
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 6",
                "assert sum_squares([]) == 0",
                "assert sum_squares([-1, -5, 2, -1, -5]) == -126"
            ],
            "failed_tests": [
                "assert sum_squares([4, 5, 6, 7]) == 4**3 + 5 + 6**2 + 7 (AssertionError: )",
                "assert sum_squares([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0 + 1 + 2**2 + 3**3 + 4 + 5 + 6**2 + 7 + 8**2 + 9**3 (AssertionError: )",
                "assert sum_squares([-2, -3, -4, -5]) == (-2)**3 + (-3) + (-4)**2 + (-5) (AssertionError: )",
                "assert sum_squares([10]) == 10 (AssertionError: )",
                "assert sum_squares([2, 4, 6, 8, 10, 12, 14, 16]) == 2 + 4**3 + 6**2 + 8 + 10**2 + 12**3 + 14**2 + 16 (AssertionError: )"
            ]
        },
        "prompt_tokens": 484,
        "completion_tokens": 270
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"This is a test\") == \"is\"",
                "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
                "assert words_in_sentence(\"a\") == \"\""
            ],
            "failed_tests": [
                "assert words_in_sentence(\"Do we have any grapes\") == \"we any\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 453,
        "completion_tokens": 123
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"1/6\", \"2/1\") == False",
                "assert simplify(\"2/3\", \"3/2\") == True",
                "assert simplify(\"4/9\", \"3/4\") == False",
                "assert simplify(\"10/1\", \"1/10\") == True",
                "assert simplify(\"15/4\", \"8/15\") == True",
                "assert simplify(\"1/2\", \"2/1\") == True",
                "assert simplify(\"9/8\", \"16/9\") == True",
                "assert simplify(\"5/12\", \"24/5\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 449,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]",
                "assert order_by_points([]) == []"
            ],
            "failed_tests": [
                "assert order_by_points([123, 321, 213]) == [123, 213, 321] (AssertionError: )"
            ]
        },
        "prompt_tokens": 411,
        "completion_tokens": 128
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2",
                "assert specialFilter([2, 4, 6, 8, 10]) == 0",
                "assert specialFilter([11, 33, 55, 77, 99]) == 5",
                "assert specialFilter([]) == 0",
                "assert specialFilter([10, 110, 210]) == 0",
                "assert specialFilter([-11, -33, -55, -77, -99]) == 0",
                "assert specialFilter([111, 313, 515, 717, 919]) == 5",
                "assert specialFilter([12, 34, 56, 78, 90]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 426,
        "completion_tokens": 292
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(5) == 1",
                "assert get_max_triples(3) == 0"
            ],
            "failed_tests": [
                "assert get_max_triples(6) == 1 (AssertionError: )",
                "assert get_max_triples(10) == 4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 445,
        "completion_tokens": 52
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
                "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
                "assert bf(\"Pluto\", \"Mars\") == ()",
                "assert bf(\"Venus\", \"Venus\") == ()",
                "assert bf(\"Saturn\", \"Jupiter\") == ()",
                "assert bf(\"Earth\", \"Pluto\") == ()",
                "assert bf(\"Sun\", \"Mars\") == ()",
                "assert bf(\"Earth\", \"Neptune\") == (\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 556,
        "completion_tokens": 190
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert list_sort([\"hello\", \"world\", \"a\", \"bb\", \"ccc\"]) == [\"bb\"] (NameError: name 'list_sort' is not defined)",
                "assert list_sort([]) == [] (NameError: name 'list_sort' is not defined)",
                "assert list_sort([\"even\", \"words\", \"only\", \"here\"]) == [\"even\", \"here\", \"only\", \"words\"] (NameError: name 'list_sort' is not defined)",
                "assert list_sort([\"ba\", \"ab\", \"bc\", \"ac\"]) == [\"ab\", \"ac\", \"ba\", \"bc\"] (NameError: name 'list_sort' is not defined)",
                "assert list_sort([\"b\", \"a\", \"d\", \"c\"]) == [] (NameError: name 'list_sort' is not defined)"
            ]
        },
        "prompt_tokens": 500,
        "completion_tokens": 256
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(7, 34, 12) == 34",
                "assert x_or_y(15, 8, 5) == 5",
                "assert x_or_y(2, 100, 200) == 100",
                "assert x_or_y(1, 10, 20) == 20",
                "assert x_or_y(11, 3, 7) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 575,
        "completion_tokens": 132
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([1, 3, 2, 0]) == 10",
                "assert double_the_difference([-1, -2, 0]) == 0",
                "assert double_the_difference([9, -2]) == 81",
                "assert double_the_difference([0]) == 0",
                "assert double_the_difference([]) == 0",
                "assert double_the_difference([1.5, 2.5, 3.5]) == 0",
                "assert double_the_difference([4, 5, 6]) == 25",
                "assert double_the_difference([-3, -5, 7]) == 49",
                "assert double_the_difference([1, 3, 5, 7, 9]) == 165",
                "assert double_the_difference([10, 20, 30]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 477,
        "completion_tokens": 173
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
                "assert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]",
                "assert compare([10,20,30],[10,15,25]) == [0,5,5]",
                "assert compare([5,5,5,5],[5,5,5,5]) == [0,0,0,0]",
                "assert compare([],[]) == []",
                "assert compare([1,1,1,1],[2,2,2,2]) == [1,1,1,1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 567,
        "completion_tokens": 173
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
                "assert Strongest_Extension('class1', ['abc', 'DEF', 'ghi']) == 'class1.DEF'",
                "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
                "assert Strongest_Extension('EqualStrength', ['AA', 'BB']) == 'EqualStrength.AA'",
                "assert Strongest_Extension('CaseSensitive', ['case', 'CASE']) == 'CaseSensitive.CASE'",
                "assert Strongest_Extension('NumbersIncluded', ['123', 'ABC123', 'abc123']) == 'NumbersIncluded.ABC123'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('Empty', []) == 'Empty.' (IndexError: list index out of range)"
            ]
        },
        "prompt_tokens": 853,
        "completion_tokens": 225
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"abcd\", \"abd\") == False",
                "assert cycpattern_check(\"hello\", \"ell\") == True",
                "assert cycpattern_check(\"whassup\", \"psus\") == False",
                "assert cycpattern_check(\"abab\", \"baa\") == True",
                "assert cycpattern_check(\"efef\", \"eeff\") == False",
                "assert cycpattern_check(\"himenss\", \"simen\") == True",
                "assert cycpattern_check(\"rotation\", \"tationro\") == True",
                "assert cycpattern_check(\"python\", \"noth\") == False",
                "assert cycpattern_check(\"repeatpattern\", \"patternrepeat\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 514,
        "completion_tokens": 152
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(331) == (0, 3)",
                "assert even_odd_count(3) == (0, 1)",
                "assert even_odd_count(882046699523926) == (10, 5)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 351,
        "completion_tokens": 64
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(1) == 'i'",
                "assert int_to_mini_roman(3) == 'iii'",
                "assert int_to_mini_roman(9) == 'ix'",
                "assert int_to_mini_roman(106) == 'cvi'",
                "assert int_to_mini_roman(444) == 'cdxliv'",
                "assert int_to_mini_roman(521) == 'dxxi'",
                "assert int_to_mini_roman(999) == 'cmxcix'",
                "assert int_to_mini_roman(1000) == 'm'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 567,
        "completion_tokens": 131
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(1, 2, 3) == False",
                "assert right_angle_triangle(5, 12, 13) == True",
                "assert right_angle_triangle(7, 24, 25) == True",
                "assert right_angle_triangle(2, 2, 2) == False",
                "assert right_angle_triangle(6, 8, 10) == True",
                "assert right_angle_triangle(8, 15, 17) == True",
                "assert right_angle_triangle(9, 40, 41) == True"
            ],
            "failed_tests": [
                "assert right_angle_triangle(0, 0, 0) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 397,
        "completion_tokens": 164
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
                "assert find_max([\"apple\", \"pear\", \"orange\"]) == \"orange\"",
                "assert find_max([\"hello\", \"world\", \"python\"]) == \"python\"",
                "assert find_max([\"loop\", \"pool\", \"lopo\"]) == \"loop\"",
                "assert find_max([\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]) == \"abc\"",
                "assert find_max([\"zz\", \"aa\", \"bb\"]) == \"aa\"",
                "assert find_max([\"unique\", \"characters\", \"maximum\"]) == \"characters\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 463,
        "completion_tokens": 182
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(0, 100, 50) == [50, 0]",
                "assert eat(100, 50, 100) == [150, 50]",
                "assert eat(300, 300, 600) == [600, 300]",
                "assert eat(500, 0, 1000) == [500, 1000]",
                "assert eat(0, 0, 0) == [0, 0]",
                "assert eat(1000, 1000, 500) == [1500, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 887,
        "completion_tokens": 146
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['+', '-'], [5, 3, 2]) == 6",
                "assert do_algebra(['*', '//'], [4, 2, 8]) == 1",
                "assert do_algebra(['**'], [2, 3]) == 8",
                "assert do_algebra(['+', '+', '+'], [1, 1, 1, 1]) == 4",
                "assert do_algebra(['-', '-'], [10, 5, 6]) == -1",
                "assert do_algebra(['//', '//'], [9, 4, 2]) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 512,
        "completion_tokens": 269
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"1234\") == \"4321\"",
                "assert solve(\"ab\") == \"AB\"",
                "assert solve(\"AbCdE\") == \"aBcDe\"",
                "assert solve(\"\") == \"\"",
                "assert solve(\"1234a\") == \"1234A\"",
                "assert solve(\"XYZ\") == \"xyz\"",
                "assert solve(\"noNUM123\") == \"NOnum123\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 424,
        "completion_tokens": 91
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('') == None",
                "assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'"
            ],
            "failed_tests": [
                "assert string_to_md5('python') == '5e50261f7c5c585d519e9e774a69e3e6' (AssertionError: )"
            ]
        },
        "prompt_tokens": 373,
        "completion_tokens": 147
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(2, 8) == [2, 4, 6, 8]",
                "assert generate_integers(8, 2) == [2, 4, 6, 8]",
                "assert generate_integers(1, 5) == [2, 4]",
                "assert generate_integers(5, 1) == [2, 4]",
                "assert generate_integers(13, 13) == []"
            ],
            "failed_tests": [
                "assert generate_integers(12, 12) == [12] (AssertionError: )",
                "assert generate_integers(0, 0) == [0] (AssertionError: )"
            ]
        },
        "prompt_tokens": 426,
        "completion_tokens": 136
    }
]