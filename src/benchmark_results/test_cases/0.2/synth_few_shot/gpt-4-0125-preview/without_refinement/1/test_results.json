[
    {
        "task_id": "HumanEval/0",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
                "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
                "assert has_close_elements([10, 20, 30, 40, 50], 9.9) == False",
                "assert has_close_elements([1.5, 2.5, 3.5, 4.5], 1.1) == True",
                "assert has_close_elements([], 0.5) == False",
                "assert has_close_elements([1.0], 0.1) == False",
                "assert has_close_elements([0.1, 0.2, 0.4, 0.8, 1.6], 0.15) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 454,
        "completion_tokens": 199
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('') == []",
                "assert separate_paren_groups('no parentheses') == []",
                "assert separate_paren_groups('((()))(())') == ['((()))', '(())']",
                "assert separate_paren_groups('()()') == ['()', '()']",
                "assert separate_paren_groups('((( )))') == ['((()))']",
                "assert separate_paren_groups('(())(())') == ['(())', '(())']",
                "assert separate_paren_groups('(()(()))') == ['(()(()))']",
                "assert separate_paren_groups('((())())') == ['((())())']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 434,
        "completion_tokens": 145
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(4.75) == 0.75",
                "assert truncate_number(0.99) == 0.99"
            ],
            "failed_tests": [
                "assert truncate_number(10.01) == 0.01 (AssertionError: )",
                "assert truncate_number(123.456) == 0.456 (AssertionError: )",
                "assert truncate_number(5.502803564071655) == 0.502803564071655 (AssertionError: )"
            ]
        },
        "prompt_tokens": 558,
        "completion_tokens": 96
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([1, 2, 3]) == False",
                "assert below_zero([1, 2, -4, 5]) == True",
                "assert below_zero([-1, 2, 3]) == True",
                "assert below_zero([10, -5, -3, 1, 2]) == False",
                "assert below_zero([10, -15, 5, -1]) == True",
                "assert below_zero([]) == False",
                "assert below_zero([0, 0, 0]) == False",
                "assert below_zero([100, -50, -50]) == False",
                "assert below_zero([100, -101]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 414,
        "completion_tokens": 141
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
                "assert mean_absolute_deviation([5, 5, 5, 5]) == 0.0",
                "assert mean_absolute_deviation([-1, 0, 1]) == 0.6666666666666666"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([10, 20, 30, 40]) == 11.25 (AssertionError: )"
            ]
        },
        "prompt_tokens": 739,
        "completion_tokens": 106
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([], 4) == []",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
                "assert intersperse([1], 0) == [1]",
                "assert intersperse([5, 10, 15], -1) == [5, -1, 10, -1, 15]",
                "assert intersperse([100, 200], 50) == [100, 50, 200]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 698,
        "completion_tokens": 110
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('') == []",
                "assert parse_nested_parens('()') == [1]",
                "assert parse_nested_parens('((((()))))') == [5]",
                "assert parse_nested_parens('(()) (())') == [2, 2]",
                "assert parse_nested_parens('(((()))) (((())))') == [4, 4]",
                "assert parse_nested_parens('() () ()') == [1, 1, 1]",
                "assert parse_nested_parens('((())) (()) ()') == [3, 2, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 667,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring([], 'a') == []",
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']",
                "assert filter_by_substring(['hello', 'world', 'test'], 'x') == []",
                "assert filter_by_substring(['python', 'java', 'c++', 'javascript'], 'java') == ['java', 'javascript']",
                "assert filter_by_substring(['123', '456', '789'], '1') == ['123']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 598,
        "completion_tokens": 116
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([1, 2, 3, 4]) == (10, 24)",
                "assert sum_product([-1, -2, -3, -4]) == (-10, 24)",
                "assert sum_product([1]) == (1, 1)",
                "assert sum_product([0, 0, 0]) == (0, 0)",
                "assert sum_product([1, -1, 1, -1]) == (0, 1)",
                "assert sum_product([10, 20, 30]) == (60, 6000)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 709,
        "completion_tokens": 134
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
                "assert rolling_max([3, 2, 1]) == [3, 3, 3]",
                "assert rolling_max([5, 4, 6, 1, 7, 2, 8]) == [5, 5, 6, 6, 7, 7, 8]",
                "assert rolling_max([10]) == [10]",
                "assert rolling_max([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 417,
        "completion_tokens": 135
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_palindrome('level') == 'level'",
                "assert is_palindrome('123456') == False",
                "assert make_palindrome('cat') == 'catac'",
                "assert make_palindrome('race') == 'racecar'",
                "assert make_palindrome('a') == 'a'",
                "assert is_palindrome('a') == True",
                "assert is_palindrome('12321') == True",
                "assert is_palindrome('madam') == True",
                "assert is_palindrome('racecar') == True",
                "assert is_palindrome('hello') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 658,
        "completion_tokens": 190
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('1', '0') == '1'",
                "assert string_xor('0', '1') == '1'",
                "assert string_xor('101', '111') == '010'",
                "assert string_xor('111', '111') == '000'",
                "assert string_xor('0110', '1100') == '1010'",
                "assert string_xor('0', '0') == '0'",
                "assert string_xor('1', '1') == '0'",
                "assert string_xor('010', '110') == '100'",
                "assert string_xor('000', '000') == '000'",
                "assert string_xor('001', '101') == '100'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 356,
        "completion_tokens": 150
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest([]) == None",
                "assert longest(['a', 'b', 'c']) == 'a'",
                "assert longest(['a', 'bb', 'ccc']) == 'ccc'",
                "assert longest(['hello', 'world', 'python', 'programming']) == 'programming'",
                "assert longest(['same', 'size', 'test']) == 'same'",
                "assert longest(['long', 'longer', 'longest']) == 'longest'",
                "assert longest(['one', 'two', 'three', 'four', 'five']) == 'three'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 400,
        "completion_tokens": 113
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(3, 5) == 1",
                "assert greatest_common_divisor(25, 15) == 5",
                "assert greatest_common_divisor(336, 325) == 1",
                "assert greatest_common_divisor(100, 10) == 10",
                "assert greatest_common_divisor(48, 18) == 6"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 551,
        "completion_tokens": 79
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
                "assert all_prefixes('a') == ['a']",
                "assert all_prefixes('') == []",
                "assert all_prefixes('xyz') == ['x', 'xy', 'xyz']",
                "assert all_prefixes('hello world') == ['h', 'he', 'hel', 'hell', 'hello', 'hello ', 'hello w', 'hello wo', 'hello wor', 'hello worl', 'hello world']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 619,
        "completion_tokens": 105
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(0) == '0'",
                "assert string_sequence(5) == '0 1 2 3 4 5'",
                "assert string_sequence(1) == '0 1'",
                "assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'",
                "assert string_sequence(-1) == ''"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 594,
        "completion_tokens": 84
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('xyzXYZ') == 3",
                "assert count_distinct_characters('Jerry') == 4",
                "assert count_distinct_characters('Hello World!') == 9",
                "assert count_distinct_characters('') == 0",
                "assert count_distinct_characters('123321') == 3",
                "assert count_distinct_characters('AaBbCcDd') == 4"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 577,
        "completion_tokens": 85
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
                "assert parse_music('o') == [4]",
                "assert parse_music('.| .| .| .|') == [1, 1, 1, 1]",
                "assert parse_music('o| o| o| o|') == [2, 2, 2, 2]",
                "assert parse_music('') == []",
                "assert parse_music('o| .| o o| .|') == [2, 1, 4, 2, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 699,
        "completion_tokens": 160
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('aaa', 'a') == 3",
                "assert how_many_times('hello', 'llo') == 1",
                "assert how_many_times('testtest', 'test') == 2",
                "assert how_many_times('', 'a') == 0",
                "assert how_many_times('abababab', 'aba') == 3",
                "assert how_many_times('', '') == 1",
                "assert how_many_times('testtest', '') == 9",
                "assert how_many_times('abcabcabc', 'abc') == 3",
                "assert how_many_times('aaaaa', 'aa') == 4"
            ],
            "failed_tests": [
                "assert how_many_times('abcabcabc', 'cab') == 0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 401,
        "completion_tokens": 184
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('three one five') == 'one three five'",
                "assert sort_numbers('nine eight seven') == 'seven eight nine'",
                "assert sort_numbers('zero two four six') == 'zero two four six'",
                "assert sort_numbers('four four four four') == 'four four four four'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 783,
        "completion_tokens": 64
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([10.5, 11.2, 10.4, 12.5]) == (10.4, 10.5)",
                "assert find_closest_elements([-1.0, -2.0, -3.0, -2.5]) == (-2.5, -2.0)",
                "assert find_closest_elements([100.0, 200.0, 300.0, 250.0, 260.0]) == (250.0, 260.0)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 768,
        "completion_tokens": 209
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([10, 20, 30, 40, 50]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([-10, 0, 10]) == [0.0, 0.5, 1.0]",
                "assert rescale_to_unit([100, 150, 200, 250, 300]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 709,
        "completion_tokens": 182
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_integers(['a', 3.14, 5]) == [5]",
                "assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]",
                "assert filter_integers([]) == []",
                "assert filter_integers(['string', {}, [], (), None]) == []"
            ],
            "failed_tests": [
                "assert filter_integers([True, False, 'hello', 100, 200.5]) == [100] (AssertionError: )"
            ]
        },
        "prompt_tokens": 689,
        "completion_tokens": 98
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('') == 0",
                "assert strlen('abc') == 3",
                "assert strlen('hello world') == 11",
                "assert strlen(' ') == 1",
                "assert strlen('1234567890') == 10"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 635,
        "completion_tokens": 51
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(318) == 159",
                "assert largest_divisor(144) == 72",
                "assert largest_divisor(3) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 325,
        "completion_tokens": 58
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(392) == [2, 2, 2, 7, 7]",
                "assert factorize(324) == [2, 2, 3, 3, 3, 3]",
                "assert factorize(6) == [2, 3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 605,
        "completion_tokens": 96
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([5, 5, 5, 5, 5]) == []",
                "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert remove_duplicates([]) == []",
                "assert remove_duplicates([1, 1, 1, 2, 2, 2, 3, 3, 3]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 739,
        "completion_tokens": 125
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('Hello') == 'hELLO'",
                "assert flip_case('Python') == 'pYTHON'",
                "assert flip_case('WORLD') == 'world'",
                "assert flip_case('123abcABC') == '123ABCabc'",
                "assert flip_case('') == ''"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 565,
        "completion_tokens": 79
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate([]) == ''",
                "assert concatenate(['a', 'b', 'c']) == 'abc'",
                "assert concatenate(['hello', ' ', 'world']) == 'hello world'",
                "assert concatenate(['Python', '3.8']) == 'Python3.8'",
                "assert concatenate(['', '']) == ''",
                "assert concatenate(['123', '456', '789']) == '123456789'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 579,
        "completion_tokens": 82
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']",
                "assert filter_by_prefix(['hello', 'world', 'hi', 'he'], 'h') == ['hello', 'hi', 'he']",
                "assert filter_by_prefix(['apple', 'banana', 'apricot', 'cherry'], 'ap') == ['apple', 'apricot']",
                "assert filter_by_prefix(['123', '234', '345'], '1') == ['123']",
                "assert filter_by_prefix(['test', 'rest', 'best'], 'z') == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 603,
        "completion_tokens": 139
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
                "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]",
                "assert get_positive([-10, -20, -30, -40]) == []",
                "assert get_positive([0, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert get_positive([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 752,
        "completion_tokens": 151
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(6) == False",
                "assert is_prime(101) == True",
                "assert is_prime(11) == True",
                "assert is_prime(61) == True",
                "assert is_prime(4) == False",
                "assert is_prime(1) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 631,
        "completion_tokens": 68
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert poly([1, 2], 2) == 5",
                "assert poly([-6, 11, -6, 1], 1) == 0",
                "assert poly([0, 0, 0], 10) == 0",
                "assert round(find_zero([1, 2]), 2) == -0.5",
                "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0",
                "assert round(find_zero([2, -3, 0, 1]), 2) == 1.0"
            ],
            "failed_tests": [
                "assert poly([3, 0, 2], -1) == 1 (AssertionError: )",
                "assert round(poly([1, -1, 1, -1], 2), 2) == 5 (AssertionError: )",
                "assert find_zero([0, 0, 0, 0]) == 0 (AssertionError: )",
                "assert round(find_zero([-2, 0, 1]), 2) == math.sqrt(2) (OverflowError: math range error)"
            ]
        },
        "prompt_tokens": 758,
        "completion_tokens": 307
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_third([1, 2, 3]) == [1, 2, 3]",
                "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]",
                "assert sort_third([10, 15, 20, 25, 30, 35, 40]) == [10, 15, 20, 25, 30, 35, 40]",
                "assert sort_third([]) == []",
                "assert sort_third([7, 8, 9, 10, 11, 12, 13, 14, 15]) == [7, 8, 9, 10, 11, 12, 13, 14, 15]"
            ],
            "failed_tests": [
                "assert sort_third([3, 1, 4, 1, 5, 9, 2, 6]) == [2, 1, 4, 1, 5, 9, 3, 6] (AssertionError: )"
            ]
        },
        "prompt_tokens": 745,
        "completion_tokens": 235
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
                "assert unique([1, 2, 2, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert unique([]) == []",
                "assert unique([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
                "assert unique([-1, -2, -2, -3, -4, -4, -4, -5]) == [-5, -4, -3, -2, -1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 627,
        "completion_tokens": 220
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert max_element([1, 2, 3]) == 3",
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123",
                "assert max_element([-1, -2, -3, -4]) == -1",
                "assert max_element([348, 453, 12.87701153755188]) == 453"
            ],
            "failed_tests": [
                "assert max_element([]) == None (IndexError: list index out of range)"
            ]
        },
        "prompt_tokens": 690,
        "completion_tokens": 109
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(50) == 0",
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(79) == 3"
            ],
            "failed_tests": [
                "assert fizz_buzz(100) == 4 (AssertionError: )",
                "assert fizz_buzz(200) == 8 (AssertionError: )"
            ]
        },
        "prompt_tokens": 570,
        "completion_tokens": 59
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_even([1, 2, 3]) == [1, 2, 3]",
                "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]",
                "assert sort_even([4, 1, 2, 3, 6, 5]) == [2, 1, 4, 3, 6, 5]",
                "assert sort_even([10, 15, 20, 25, 30, 35, 40]) == [10, 15, 20, 25, 30, 35, 40]",
                "assert sort_even([]) == []",
                "assert sort_even([7]) == [7]",
                "assert sort_even([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 8, 3, 6, 5, 4, 7, 2, 9]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 695,
        "completion_tokens": 215
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode_cyclic('abc') == 'bca'",
                "assert encode_cyclic('a') == 'a'",
                "assert encode_cyclic('') == ''",
                "assert decode_cyclic(encode_cyclic('abcdefgh')) == 'abcdefgh'",
                "assert decode_cyclic(encode_cyclic('abc')) == 'abc'",
                "assert decode_cyclic(encode_cyclic('a')) == 'a'",
                "assert decode_cyclic(encode_cyclic('')) == ''",
                "assert decode_cyclic(encode_cyclic('abcdef')) == 'abcdef'"
            ],
            "failed_tests": [
                "assert encode_cyclic('abcdefgh') == 'bcadefgh' (AssertionError: )",
                "assert encode_cyclic('abcdef') == 'bcadef' (AssertionError: )"
            ]
        },
        "prompt_tokens": 483,
        "completion_tokens": 167
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(1) == 2",
                "assert prime_fib(2) == 3",
                "assert prime_fib(3) == 5",
                "assert prime_fib(4) == 13",
                "assert prime_fib(5) == 89",
                "assert prime_fib(6) == 233",
                "assert prime_fib(7) == 1597"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 563,
        "completion_tokens": 119
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
                "assert triples_sum_to_zero([1, 3, -2, 1]) == True",
                "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
                "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True",
                "assert triples_sum_to_zero([1]) == False",
                "assert triples_sum_to_zero([-1, 0, 1]) == True",
                "assert triples_sum_to_zero([-1, -1, 2]) == True",
                "assert triples_sum_to_zero([0, 0, 0]) == True",
                "assert triples_sum_to_zero([10, -3, -7, 0, 2]) == True"
            ],
            "failed_tests": [
                "assert triples_sum_to_zero([-5, 1, 4, 2]) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 730,
        "completion_tokens": 195
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(0) == 0"
            ],
            "failed_tests": [
                "assert car_race_collision(1) == 0 (AssertionError: )",
                "assert car_race_collision(5) == 5 (AssertionError: )",
                "assert car_race_collision(10) == 10 (AssertionError: )",
                "assert car_race_collision(2) == 2 (AssertionError: )",
                "assert car_race_collision(3) == 3 (AssertionError: )",
                "assert car_race_collision(100) == 100 (AssertionError: )"
            ]
        },
        "prompt_tokens": 460,
        "completion_tokens": 81
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]",
                "assert incr_list([0, -1, -2]) == [1, 0, -1]",
                "assert incr_list([]) == []",
                "assert incr_list([100]) == [101]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 713,
        "completion_tokens": 123
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
                "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
                "assert pairs_sum_to_zero([1, 2, 3, 7]) == False",
                "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True",
                "assert pairs_sum_to_zero([1]) == False",
                "assert pairs_sum_to_zero([-1, 1, 2, 3]) == True",
                "assert pairs_sum_to_zero([0, 0]) == True",
                "assert pairs_sum_to_zero([-4, 4, 2, 3]) == True",
                "assert pairs_sum_to_zero([-3, -2, -1, 0, 1, 2, 3]) == True",
                "assert pairs_sum_to_zero([]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 478,
        "completion_tokens": 194
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert change_base(357, 10) == '357'",
                "assert change_base(323, 2) == '101000011'",
                "assert change_base(6, 6) == '10'",
                "assert change_base(6, 3) == '20'",
                "assert change_base(1, 2) == '1'",
                "assert change_base(10, 10) == '10'",
                "assert change_base(15, 2) == '1111'",
                "assert change_base(16, 8) == '20'"
            ],
            "failed_tests": [
                "assert change_base(255, 16) == 'ff' (AssertionError: )",
                "assert change_base(0, 2) == '0' (AssertionError: )"
            ]
        },
        "prompt_tokens": 569,
        "completion_tokens": 137
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(10, 2) == 10.0",
                "assert triangle_area(0, 5) == 0",
                "assert triangle_area(7.5, 4.2) == 15.75"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 543,
        "completion_tokens": 66
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib4(0) == 0",
                "assert fib4(1) == 0",
                "assert fib4(2) == 2",
                "assert fib4(3) == 0",
                "assert fib4(4) == 2",
                "assert fib4(5) == 4",
                "assert fib4(6) == 8",
                "assert fib4(7) == 14"
            ],
            "failed_tests": [
                "assert fib4(8) == 24 (AssertionError: )",
                "assert fib4(9) == 46 (AssertionError: )"
            ]
        },
        "prompt_tokens": 453,
        "completion_tokens": 104
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([3, 1, 2, 4, 5]) == 3",
                "assert median([1, 2, 3, 4, 5, 6]) == 3.5",
                "assert median([10]) == 10",
                "assert median([-5, -3, -1, -4, -2]) == -3"
            ],
            "failed_tests": [
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 689,
        "completion_tokens": 108
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('') == True",
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('aaaaa') == True",
                "assert is_palindrome('zbcd') == False",
                "assert is_palindrome('A man, a plan, a canal, Panama') == False",
                "assert is_palindrome('madam') == True",
                "assert is_palindrome('12321') == True",
                "assert is_palindrome('123abccba321') == True",
                "assert is_palindrome('No lemon, no melon') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 368,
        "completion_tokens": 132
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert modp(3, 5) == 3",
                "assert modp(1101, 101) == 2",
                "assert modp(0, 101) == 1",
                "assert modp(3, 11) == 8",
                "assert modp(100, 101) == 1",
                "assert modp(4, 17) == 16",
                "assert modp(10, 1000) == 24",
                "assert modp(0, 2) == 1",
                "assert modp(1, 2) == 2 % 2"
            ],
            "failed_tests": [
                "assert modp(371, 167) == 82 (AssertionError: )"
            ]
        },
        "prompt_tokens": 403,
        "completion_tokens": 139
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_shift('abc') == 'fgh'",
                "assert encode_shift('wxyz') == 'bcde'",
                "assert encode_shift('') == ''",
                "assert encode_shift('jklmn') == 'opqrs'",
                "assert decode_shift('fgh') == 'abc'",
                "assert decode_shift('bcde') == 'wxyz'",
                "assert decode_shift('') == ''",
                "assert decode_shift('opqrs') == 'jklmn'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 420,
        "completion_tokens": 92
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('') == ''",
                "assert remove_vowels('abcdef\\nghijklm') == 'bcdf\\nghjklm'",
                "assert remove_vowels('abcdef') == 'bcdf'",
                "assert remove_vowels('aaaaa') == ''",
                "assert remove_vowels('aaBAA') == 'B'",
                "assert remove_vowels('zbcd') == 'zbcd'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 653,
        "completion_tokens": 87
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 3, 4], 5) == True",
                "assert below_threshold([10, 20, 30], 25) == False",
                "assert below_threshold([-1, -2, -3, 0], 1) == True",
                "assert below_threshold([5, 15, 25, 35], 40) == True",
                "assert below_threshold([100, 200, 300], 100) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 634,
        "completion_tokens": 103
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(319, 318) == 637",
                "assert add(0, 0) == 0",
                "assert add(-1, 1) == 0",
                "assert add(-5, -7) == -12",
                "assert add(100, 200) == 300"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 526,
        "completion_tokens": 64
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('abcd', 'dddddddabc') == True",
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
                "assert same_chars('', '') == True",
                "assert same_chars('eabcd', 'dddddddabc') == False",
                "assert same_chars('a', 'a') == True",
                "assert same_chars('abcd', 'dddddddabce') == False",
                "assert same_chars('abc', 'cba') == True",
                "assert same_chars('abc', 'abcd') == False",
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 442,
        "completion_tokens": 163
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(0) == 0",
                "assert fib(1) == 1",
                "assert fib(2) == 1",
                "assert fib(3) == 2",
                "assert fib(5) == 5",
                "assert fib(10) == 55",
                "assert fib(8) == 21"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 544,
        "completion_tokens": 67
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"<\") == False",
                "assert correct_bracketing(\"<>\") == True",
                "assert correct_bracketing(\"<<><>>\") == True",
                "assert correct_bracketing(\"><<>\") == False",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"><\") == False",
                "assert correct_bracketing(\"<<<>>>\") == True",
                "assert correct_bracketing(\"<<>>><\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 397,
        "completion_tokens": 94
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([10, 5, 5, 3, 1]) == True",
                "assert monotonic([4, 1, 0, -10]) == True",
                "assert monotonic([1, 1, 2, 2, 3, 3]) == True",
                "assert monotonic([2, 2]) == True",
                "assert monotonic([3, 2, 2, 1]) == True",
                "assert monotonic([5, 4, 3, 2, 1]) == True",
                "assert monotonic([1]) == True",
                "assert monotonic([1, 3, 5, 7, 9, 11, 10]) == False",
                "assert monotonic([10, 10, 10, 10]) == True",
                "assert monotonic([1, 2, 4, 20]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 395,
        "completion_tokens": 208
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
                "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]",
                "assert common([10, 22, 10, 20], [20, 30, 40, 22]) == [20, 22]",
                "assert common([], [1, 2, 3]) == []",
                "assert common([1, 2, 3], []) == []",
                "assert common([1, 2, 3], [4, 5, 6]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 402,
        "completion_tokens": 168
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(2048) == 2",
                "assert largest_prime_factor(100) == 5",
                "assert largest_prime_factor(49) == 7"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 560,
        "completion_tokens": 65
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(30) == 465",
                "assert sum_to_n(100) == 5050",
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(10) == 55",
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(0) == 0",
                "assert sum_to_n(2) == 3",
                "assert sum_to_n(3) == 6"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 559,
        "completion_tokens": 93
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"()\") == True",
                "assert correct_bracketing(\")(()\") == False",
                "assert correct_bracketing(\"((((()))))\") == True",
                "assert correct_bracketing(\"((((())))\") == False",
                "assert correct_bracketing(\"(()())\") == True",
                "assert correct_bracketing(\"((())\") == False",
                "assert correct_bracketing(\"(()(()))\") == True",
                "assert correct_bracketing(\"()()()()\") == True",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"(()))(\") == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 379,
        "completion_tokens": 158
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
                "assert derivative([1, 2, 3]) == [2, 6]",
                "assert derivative([5, 3]) == [3]",
                "assert derivative([10]) == []",
                "assert derivative([2, 4, 6, 8, 10]) == [4, 12, 24, 40]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 397,
        "completion_tokens": 101
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(7) == 13",
                "assert fibfib(2) == 1",
                "assert fibfib(4) == 2",
                "assert fibfib(1) == 0",
                "assert fibfib(8) == 24",
                "assert fibfib(5) == 4",
                "assert fibfib(9) == 44",
                "assert fibfib(10) == 81",
                "assert fibfib(6) == 7",
                "assert fibfib(3) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 445,
        "completion_tokens": 114
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"programming\") == 3",
                "assert vowels_count(\"PythOn\") == 1",
                "assert vowels_count(\"rhythm\") == 0",
                "assert vowels_count(\"fly\") == 1",
                "assert vowels_count(\"quiet\") == 3",
                "assert vowels_count(\"abcde\") == 2",
                "assert vowels_count(\"ACEDY\") == 3",
                "assert vowels_count(\"SYZYGY\") == 1"
            ],
            "failed_tests": [
                "assert vowels_count(\"encyclopedia\") == 6 (AssertionError: )",
                "assert vowels_count(\"\") == 0 (IndexError: string index out of range)"
            ]
        },
        "prompt_tokens": 424,
        "completion_tokens": 171
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12345, 1) == \"51234\"",
                "assert circular_shift(12345, 5) == \"12345\"",
                "assert circular_shift(12345, 6) == \"54321\"",
                "assert circular_shift(0, 1) == \"0\"",
                "assert circular_shift(348, 3) == \"348\"",
                "assert circular_shift(322, 2) == \"223\"",
                "assert circular_shift(322, 5) == \"223\"",
                "assert circular_shift(100, 1) == \"010\"",
                "assert circular_shift(100, 3) == \"100\""
            ],
            "failed_tests": [
                "assert circular_shift(12345, 10) == \"12345\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 560,
        "completion_tokens": 142
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"\") == 0",
                "assert digitSum(\"abAB\") == 131",
                "assert digitSum(\"abcCd\") == 67",
                "assert digitSum(\"helloE\") == 69",
                "assert digitSum(\"woArBld\") == 131",
                "assert digitSum(\"aAaaaXa\") == 153",
                "assert digitSum(\"12345\") == 0",
                "assert digitSum(\"abcde\") == 0"
            ],
            "failed_tests": [
                "assert digitSum(\"ABCDE\") == 325 (AssertionError: )",
                "assert digitSum(\"AaBbCcDdEe\") == 325 (AssertionError: )"
            ]
        },
        "prompt_tokens": 416,
        "completion_tokens": 122
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
                "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
                "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95",
                "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19",
                "assert fruit_distribution(\"10 apples and 10 oranges\", 30) == 10",
                "assert fruit_distribution(\"3 apples and 2 oranges\", 10) == 5",
                "assert fruit_distribution(\"0 apples and 0 oranges\", 5) == 5",
                "assert fruit_distribution(\"1 apples and 1 oranges\", 4) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 523,
        "completion_tokens": 148
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([4, 2, 3]) == [2, 1]",
                "assert pluck([1, 2, 3]) == [2, 1]",
                "assert pluck([]) == []",
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
                "assert pluck([7, 11, 9]) == []",
                "assert pluck([2, 4, 6, 8]) == [2, 0]",
                "assert pluck([3, 5, 7, 2, 4]) == [2, 3]",
                "assert pluck([8, 6, 4, 2]) == [2, 3]",
                "assert pluck([1, 3, 5, 7, 9, 0]) == [0, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 666,
        "completion_tokens": 188
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert search([4, 1, 2, 2, 3, 1]) == 2",
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
                "assert search([5, 5, 4, 4, 4]) == -1",
                "assert search([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 10",
                "assert search([3, 3, 3]) == 3"
            ],
            "failed_tests": [
                "assert search([1, 1, 1, 1, 2, 2, 2, 3, 3]) == 1 (AssertionError: )",
                "assert search([1]) == -1 (AssertionError: )",
                "assert search([6, 6, 6, 6, 6, 6]) == -1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 758,
        "completion_tokens": 199
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([10, 9, 8, 7, 6]) == [6, 10, 7, 9, 8]",
                "assert strange_sort_list([1]) == [1]",
                "assert strange_sort_list([3, 2]) == [2, 3]",
                "assert strange_sort_list([4, 6, 6, 4]) == [4, 6, 4, 6]",
                "assert strange_sort_list([-1, -2, -3, -4]) == [-4, -1, -3, -2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 445,
        "completion_tokens": 191
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(3, 4, 5) == 6.00",
                "assert triangle_area(1, 2, 10) == -1",
                "assert triangle_area(10, 10, 10) == 43.30",
                "assert triangle_area(0, 0, 0) == -1",
                "assert triangle_area(5, 5, 8) == 12.00",
                "assert triangle_area(2, 2, 4) == -1",
                "assert triangle_area(7, 24, 25) == 84.00",
                "assert triangle_area(3, 3, 3) == 3.90",
                "assert triangle_area(8, 15, 17) == 60.00"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 408,
        "completion_tokens": 160
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([1, 2], 5) == False",
                "assert will_it_fly([3, 2, 3], 1) == False",
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([3], 5) == True",
                "assert will_it_fly([1, 2, 1], 4) == True",
                "assert will_it_fly([1, 2, 2, 1], 10) == True",
                "assert will_it_fly([1, 2, 3, 2, 1], 3) == False",
                "assert will_it_fly([], 0) == True",
                "assert will_it_fly([5, 5, 5, 5], 20) == True",
                "assert will_it_fly([5, 5, 5, 5], 19) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 556,
        "completion_tokens": 202
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([1, 2, 3, 2, 1]) == 0",
                "assert smallest_change([5, 9, 3, 9, 5]) == 0",
                "assert smallest_change([1, 3, 5, 7, 9, 7, 5, 3, 2]) == 1",
                "assert smallest_change([10]) == 0",
                "assert smallest_change([1, 1, 1, 1, 1, 1, 1, 2]) == 1",
                "assert smallest_change([2, 3, 3, 2]) == 0",
                "assert smallest_change([]) == 0"
            ],
            "failed_tests": [
                "assert smallest_change([8, 8, 8, 8, 7, 8, 8, 8, 8]) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 500,
        "completion_tokens": 237
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match([], []) == []",
                "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']",
                "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']",
                "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']",
                "assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']",
                "assert total_match(['short', 'list'], ['a', 'much', 'longer', 'list', 'indeed']) == ['short', 'list']",
                "assert total_match(['equal', 'chars'], ['equal', 'chars']) == ['equal', 'chars']",
                "assert total_match(['one', 'two', 'three'], ['four', 'five']) == ['four', 'five']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 523,
        "completion_tokens": 198
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(2) == False",
                "assert is_multiply_prime(105) == True",
                "assert is_multiply_prime(97) == False",
                "assert is_multiply_prime(1) == False",
                "assert is_multiply_prime(42) == True"
            ],
            "failed_tests": [
                "assert is_multiply_prime(20) == False (AssertionError: )",
                "assert is_multiply_prime(60) == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 387,
        "completion_tokens": 132
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(81, 3) == True",
                "assert is_simple_power(3, 1) == False",
                "assert is_simple_power(5, 3) == False",
                "assert is_simple_power(8, 2) == True",
                "assert is_simple_power(1, 4) == True",
                "assert is_simple_power(1024, 2) == True",
                "assert is_simple_power(2, 2) == True",
                "assert is_simple_power(3, 2) == False"
            ],
            "failed_tests": [
                "assert is_simple_power(100, 10) == False (AssertionError: )",
                "assert is_simple_power(64, 4) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 490,
        "completion_tokens": 161
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(188) == False",
                "assert iscube(-1) == True",
                "assert iscube(-27) == True",
                "assert iscube(-729) == True",
                "assert iscube(8) == True",
                "assert iscube(2) == False",
                "assert iscube(-8) == True",
                "assert iscube(0) == True",
                "assert iscube(27) == True",
                "assert iscube(125) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 436,
        "completion_tokens": 148
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"AB\") == 1",
                "assert hex_key(\"1077E\") == 2",
                "assert hex_key(\"ABED1A33\") == 4",
                "assert hex_key(\"123456789ABCDEF0\") == 6",
                "assert hex_key(\"2020\") == 2",
                "assert hex_key(\"\") == 0",
                "assert hex_key(\"FFFF\") == 0",
                "assert hex_key(\"2B7D\") == 4",
                "assert hex_key(\"333\") == 3",
                "assert hex_key(\"999\") == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 613,
        "completion_tokens": 117
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(15) == \"db1111db\"",
                "assert decimal_to_binary(32) == \"db100000db\"",
                "assert decimal_to_binary(0) == \"db0db\"",
                "assert decimal_to_binary(405) == \"db110010101db\"",
                "assert decimal_to_binary(168) == \"db10101000db\"",
                "assert decimal_to_binary(1) == \"db1db\"",
                "assert decimal_to_binary(2) == \"db10db\"",
                "assert decimal_to_binary(1023) == \"db1111111111db\"",
                "assert decimal_to_binary(3) == \"db11db\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 441,
        "completion_tokens": 131
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy('abcabc') == True",
                "assert is_happy('abccba') == False",
                "assert is_happy('aabb') == False",
                "assert is_happy('xyzxyz') == True",
                "assert is_happy('aaa') == False",
                "assert is_happy('ab') == False",
                "assert is_happy('abcdefg') == True",
                "assert is_happy('a') == False",
                "assert is_happy('aa') == False",
                "assert is_happy('abcd') == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 450,
        "completion_tokens": 152
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([4.0]) == ['A+']",
                "assert numerical_letter_grade([0.0]) == ['E']",
                "assert numerical_letter_grade([]) == []"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([4.0, 3.7, 3.4, 3.1, 2.8, 2.4, 2.1, 1.8, 1.4, 1.1, 0.8, 0.5, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'] (AssertionError: )",
                "assert numerical_letter_grade([3.5, 2.5, 1.5, 0.5]) == ['A-', 'C', 'C-', 'D-'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 605,
        "completion_tokens": 186
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('Hello') == True",
                "assert prime_length('abcdcba') == True",
                "assert prime_length('kittens') == True",
                "assert prime_length('orange') == False",
                "assert prime_length('a') == False",
                "assert prime_length('ab') == True",
                "assert prime_length('') == False",
                "assert prime_length('pythonprogramming') == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 415,
        "completion_tokens": 79
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert starts_one_ends(1) == 2 (AssertionError: )",
                "assert starts_one_ends(2) == 20 (AssertionError: )",
                "assert starts_one_ends(3) == 300 (AssertionError: )",
                "assert starts_one_ends(4) == 4000 (AssertionError: )",
                "assert starts_one_ends(5) == 50000 (AssertionError: )"
            ]
        },
        "prompt_tokens": 336,
        "completion_tokens": 61
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solve(1000) == '1'",
                "assert solve(150) == '110'",
                "assert solve(147) == '1100'",
                "assert solve(399) == '10101'",
                "assert solve(3) == '11'",
                "assert solve(0) == '0'"
            ],
            "failed_tests": [
                "assert solve(162) == '1011' (AssertionError: )",
                "assert solve(9999) == '111110100' (AssertionError: )"
            ]
        },
        "prompt_tokens": 430,
        "completion_tokens": 83
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2",
                "assert add([1, 3, 5, 7]) == 0",
                "assert add([0, 4, 2, 3, 8]) == 4",
                "assert add([2, 3, 4, 5, 6, 7, 8]) == 0"
            ],
            "failed_tests": [
                "assert add([11, 22, 33, 44, 55, 66, 77, 88]) == 88 (AssertionError: )"
            ]
        },
        "prompt_tokens": 340,
        "completion_tokens": 118
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('Hi') == 'Hi'",
                "assert anti_shuffle('hello') == 'ehllo'",
                "assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'",
                "assert anti_shuffle('') == ''",
                "assert anti_shuffle('123 456') == '123 456'",
                "assert anti_shuffle('aA bB cC') == 'Aa Bb Cc'"
            ],
            "failed_tests": [
                "assert anti_shuffle('The quick brown fox') == 'The cikqu bnowr fox' (AssertionError: )",
                "assert anti_shuffle('Jumps over the lazy dog') == 'Jmps ouer eht alyz dog' (AssertionError: )",
                "assert anti_shuffle('Python 3.8') == 'Phnoty 3.8' (AssertionError: )"
            ]
        },
        "prompt_tokens": 448,
        "completion_tokens": 147
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
                "assert get_row([], 1) == []",
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]",
                "assert get_row([[2,3,4], [2,3,4], [2,3,4]], 5) == []",
                "assert get_row([[7,8,9], [7,8,9,10,11,12], [7,8,9]], 7) == [(0, 0), (1, 0), (2, 0)]",
                "assert get_row([[1,2,3], [4,5,6], [7,8,9]], 9) == [(2, 2)]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 631,
        "completion_tokens": 231
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert sorted_array_5 == [1, 2, 3] (NameError: name 'sorted_array_5' is not defined)",
                "assert original_array_2 == [5]\n\noriginal_array_3 = [2, 4, 3, 0, 1, 5]\nsorted_array_3 = sort_array(original_array_3) (NameError: name 'original_array_2' is not defined)",
                "assert sorted_array_3 == [0, 1, 2, 3, 4, 5] (NameError: name 'sorted_array_3' is not defined)",
                "assert sorted_array_1 == [] (NameError: name 'sorted_array_1' is not defined)",
                "assert original_array_4 == [2, 4, 3, 0, 1, 5, 6]\n\noriginal_array_5 = [1, 3, 2]\nsorted_array_5 = sort_array(original_array_5) (NameError: name 'original_array_4' is not defined)",
                "assert original_array_5 == [1, 3, 2]\n\noriginal_array_6 = [10, 8, 6, 4, 2, 0]\nsorted_array_6 = sort_array(original_array_6) (NameError: name 'original_array_5' is not defined)",
                "assert sorted_array_2 == [5] (NameError: name 'sorted_array_2' is not defined)",
                "assert original_array_1 == []\n\noriginal_array_2 = [5]\nsorted_array_2 = sort_array(original_array_2) (NameError: name 'original_array_1' is not defined)",
                "assert sorted_array_4 == [6, 5, 4, 3, 2, 1, 0] (NameError: name 'sorted_array_4' is not defined)",
                "assert original_array_3 == [2, 4, 3, 0, 1, 5]\n\noriginal_array_4 = [2, 4, 3, 0, 1, 5, 6]\nsorted_array_4 = sort_array(original_array_4) (NameError: name 'original_array_3' is not defined)"
            ]
        },
        "prompt_tokens": 576,
        "completion_tokens": 388
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encrypt('z') == 'd'",
                "assert encrypt('') == ''",
                "assert encrypt('xyz') == 'bcd'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('123') == '123'",
                "assert encrypt('et') == 'ix'",
                "assert encrypt('abc') == 'efg'",
                "assert encrypt('y') == 'c'"
            ],
            "failed_tests": [
                "assert encrypt('AaBbCc') == 'EeFfGg' (AssertionError: )",
                "assert encrypt('Hello, World!') == 'Lipps, Asvph!' (AssertionError: )"
            ]
        },
        "prompt_tokens": 398,
        "completion_tokens": 135
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([1, 2, 3, 4, 5]) == 2",
                "assert next_smallest([5, 1, 4, 3, 2]) == 2",
                "assert next_smallest([]) == None",
                "assert next_smallest([1, 1]) == None",
                "assert next_smallest([2, 2, 3, 3, 4, 4]) == 3",
                "assert next_smallest([10]) == None",
                "assert next_smallest([-1, -2, -3, -4, -5]) == -4",
                "assert next_smallest([1, 2]) == 2",
                "assert next_smallest([3]) == None",
                "assert next_smallest([3, 3, 3]) == None"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 464,
        "completion_tokens": 171
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"Hello world\") == 0",
                "assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1",
                "assert is_bored(\"I am bored. I think I will go for a walk.\") == 2",
                "assert is_bored(\"Is it raining? I thought it was clear. I am not sure now.\") == 2",
                "assert is_bored(\"Wow! I can't believe it. I won!\") == 2",
                "assert is_bored(\"\") == 0",
                "assert is_bored(\"Indeed, it's an interesting idea. I wonder how it would work.\") == 1"
            ],
            "failed_tests": [
                "assert is_bored(\"I'm tired. Are you? I guess it's been a long day.\") == 2 (AssertionError: )",
                "assert is_bored(\"I\") == 1 (AssertionError: )",
                "assert is_bored(\"I. I. I. I.\") == 4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 387,
        "completion_tokens": 193
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert any_int(5, 2, 7) == True",
                "assert any_int(3, 2, 2) == False",
                "assert any_int(3, -2, 1) == True",
                "assert any_int(3.6, -2.2, 2) == False",
                "assert any_int(0, 0, 0) == True",
                "assert any_int(-5, 10, 5) == True",
                "assert any_int(10, 5, 5) == True",
                "assert any_int(1, 1, 2) == True",
                "assert any_int(1, 1, 1) == False",
                "assert any_int(401, 193, 3.679723024368286) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 461,
        "completion_tokens": 173
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'",
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'"
            ],
            "failed_tests": [
                "assert encode('HELLO') == 'hCJJM' (AssertionError: )",
                "assert encode('Python Programming') == 'pYTHQN pRQHRcMMKNG' (AssertionError: )"
            ]
        },
        "prompt_tokens": 393,
        "completion_tokens": 68
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
                "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
                "assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13",
                "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11",
                "assert skjkasdkd([0,81,12,3,1,21]) == 3",
                "assert skjkasdkd([0,8,1,2,1,7]) == 7"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 701,
        "completion_tokens": 238
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
                "assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False",
                "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False",
                "assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False",
                "assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}) == True",
                "assert check_dict_case({}) == False",
                "assert check_dict_case({\"123\":\"numbers\", \"456\":\"more numbers\"}) == False",
                "assert check_dict_case({\"SAMECASE\":\"YES\", \"ANOTHERCASE\":\"YES\"}) == True",
                "assert check_dict_case({\"mixedCase\":\"no\", \"StillMixed\":\"yes\"}) == False"
            ],
            "failed_tests": [
                "assert check_dict_case({\"1lowercase\":\"value\", \"2lowercase\":\"another value\"}) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 578,
        "completion_tokens": 193
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(5) == [2, 3]",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(0) == []",
                "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(1) == []",
                "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]",
                "assert count_up_to(2) == []",
                "assert count_up_to(3) == [2]",
                "assert count_up_to(10) == [2, 3, 5, 7]",
                "assert count_up_to(23) == [2, 3, 5, 7, 11, 13, 17, 19]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 660,
        "completion_tokens": 189
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert multiply(148, 412) == 16",
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(14, -15) == 20",
                "assert multiply(0, 123) == 0",
                "assert multiply(999, 999) == 81",
                "assert multiply(10, 10) == 0",
                "assert multiply(56, 93) == 18"
            ],
            "failed_tests": [
                "assert multiply(-24, -32) == 8 (AssertionError: )",
                "assert multiply(-7, 5) == 35 (AssertionError: )"
            ]
        },
        "prompt_tokens": 413,
        "completion_tokens": 126
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('aBCdEf') == 1",
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('dBBE') == 0",
                "assert count_upper('AeIoU') == 3",
                "assert count_upper('') == 0",
                "assert count_upper('AEIOUaeiou') == 3"
            ],
            "failed_tests": [
                "assert count_upper('BACDEFGHIJKLMNOPQRSTUVWXYZ') == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 379,
        "completion_tokens": 110
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"0\") == 0",
                "assert closest_integer(\"-3.6077258586883545\") == -4",
                "assert closest_integer(\"-0.9\") == -1",
                "assert closest_integer(\"0.9\") == 1",
                "assert closest_integer(\"-14.5\") == -15",
                "assert closest_integer(\"168\") == 168",
                "assert closest_integer(\"3.6077258586883545\") == 4",
                "assert closest_integer(\"422\") == 422"
            ],
            "failed_tests": [
                "assert closest_integer(\"-0.1\") == -1 (AssertionError: )",
                "assert closest_integer(\"0.1\") == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 463,
        "completion_tokens": 140
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(2) == [2, 4]",
                "assert make_a_pile(5) == [5, 7, 9, 11, 13]",
                "assert make_a_pile(6) == [6, 8, 10, 12, 14, 16]",
                "assert make_a_pile(0) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 428,
        "completion_tokens": 92
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]",
                "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
                "assert words_string(\"apple,banana,orange\") == [\"apple\", \"banana\", \"orange\"]",
                "assert words_string(\"hello world\") == [\"hello\", \"world\"]",
                "assert words_string(\"\") == []",
                "assert words_string(\"a,b,c,d,e,f,g\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]",
                "assert words_string(\"single\") == [\"single\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 434,
        "completion_tokens": 150
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(12, 15) == 14",
                "assert choose_num(13, 12) == -1",
                "assert choose_num(2, 5) == 4",
                "assert choose_num(10, 10) == 10",
                "assert choose_num(11, 11) == -1",
                "assert choose_num(1, 100) == 100",
                "assert choose_num(5, 8) == 8",
                "assert choose_num(200, 202) == 202",
                "assert choose_num(14, 14) == 14",
                "assert choose_num(15, 15) == -1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 407,
        "completion_tokens": 134
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(1, 5) == '0b11'",
                "assert rounded_avg(7, 5) == -1",
                "assert rounded_avg(10, 20) == '0b1111'",
                "assert rounded_avg(20, 33) == '0b11010'",
                "assert rounded_avg(2, 2) == '0b10'",
                "assert rounded_avg(0, 0) == '0b0'"
            ],
            "failed_tests": [
                "assert rounded_avg(100, 200) == '0b1111001' (AssertionError: )",
                "assert rounded_avg(50, 52) == '0b101001' (AssertionError: )"
            ]
        },
        "prompt_tokens": 454,
        "completion_tokens": 127
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([152, 323, 1422, 10]) == []",
                "assert unique_digits([]) == []"
            ],
            "failed_tests": [
                "assert unique_digits([47, 29, 135, 999]) == [29, 47, 135, 999] (AssertionError: )",
                "assert unique_digits([204, 12345, 6789, 111]) == [111, 12345] (AssertionError: )"
            ]
        },
        "prompt_tokens": 402,
        "completion_tokens": 108
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']",
                "assert by_length([]) == []",
                "assert by_length([1, -1, 55]) == ['One']",
                "assert by_length([9, 7, 3, 6]) == ['Nine', 'Seven', 'Six', 'Three']",
                "assert by_length([10, 11, 0, -5]) == []",
                "assert by_length([4, 3, 2, 1, 5, 6, 7, 8, 9]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 615,
        "completion_tokens": 182
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(5) == [1, 2, 6, 24, 15]",
                "assert f(1) == [1]",
                "assert f(0) == []",
                "assert f(3) == [1, 2, 6]",
                "assert f(6) == [1, 2, 6, 24, 15, 720]",
                "assert f(2) == [1, 2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 425,
        "completion_tokens": 92
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(3) == (1, 2)",
                "assert even_odd_palindrome(12) == (4, 6)",
                "assert even_odd_palindrome(1) == (0, 1)",
                "assert even_odd_palindrome(10) == (4, 5)",
                "assert even_odd_palindrome(2) == (1, 1)"
            ],
            "failed_tests": [
                "assert even_odd_palindrome(100) == (49, 50) (AssertionError: )",
                "assert even_odd_palindrome(50) == (24, 25) (AssertionError: )",
                "assert even_odd_palindrome(20) == (9, 10) (AssertionError: )",
                "assert even_odd_palindrome(99) == (49, 50) (AssertionError: )"
            ]
        },
        "prompt_tokens": 526,
        "completion_tokens": 150
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_nums([]) == 0",
                "assert count_nums([-1, 11, -11]) == 1",
                "assert count_nums([1, 1, 2]) == 3",
                "assert count_nums([-10, 0, 10]) == 1",
                "assert count_nums([123, -456, 789]) == 3",
                "assert count_nums([-5, -4, -3, -2, -1]) == 0",
                "assert count_nums([0]) == 0",
                "assert count_nums([9, 99, 999]) == 3"
            ],
            "failed_tests": [
                "assert count_nums([-12, 34, -56, 78]) == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 448,
        "completion_tokens": 144
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([4, 1, 2, 3]) == True",
                "assert move_one_ball([5, 1, 2, 3, 4]) == True",
                "assert move_one_ball([1, 2, 4, 3]) == False",
                "assert move_one_ball([3, 5, 4, 1, 2]) == False",
                "assert move_one_ball([1, 2, 3, 4, 5]) == True",
                "assert move_one_ball([1]) == True",
                "assert move_one_ball([2, 1]) == True",
                "assert move_one_ball([1, 3, 2]) == False",
                "assert move_one_ball([3, 4, 5, 1, 2]) == True",
                "assert move_one_ball([2, 3, 4, 5, 1]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 620,
        "completion_tokens": 222
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1, 3, 5], [2, 4, 6]) == 'YES'",
                "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == 'YES'",
                "assert exchange([1, 3, 5], [1, 3, 5]) == 'NO'",
                "assert exchange([1, 2, 3, 4], [1, 5, 7, 9]) == 'NO'",
                "assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == 'YES'",
                "assert exchange([0, 2, 4, 6], [1, 3, 5, 7]) == 'YES'",
                "assert exchange([1, 2, 4, 6], [3, 5, 7, 8]) == 'YES'",
                "assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == 'YES'",
                "assert exchange([1, 3, 5, 7], [1, 3, 5, 7]) == 'NO'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 823,
        "completion_tokens": 362
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('a b b a') == {'a': 2, 'b': 2}",
                "assert histogram('a b c a b') == {'a': 2, 'b': 2}",
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('') == {}",
                "assert histogram('c c c c c') == {'c': 5}",
                "assert histogram('a b c d e f g h i') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1}"
            ],
            "failed_tests": [
                "assert histogram('m m m n n o p q r s t u v w x y z') == {'m': 3, 'n': 2} (AssertionError: )",
                "assert histogram('x y z x y z x y z x') == {'x': 4, 'y': 3, 'z': 3} (AssertionError: )"
            ]
        },
        "prompt_tokens": 489,
        "completion_tokens": 246
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete('abcde', 'ae') == ('bcd', False)",
                "assert reverse_delete('abcdef', 'b') == ('acdef', False)",
                "assert reverse_delete('abcdedcba', 'ab') == ('cdedc', True)",
                "assert reverse_delete('racecar', 'r') == ('aceca', True)",
                "assert reverse_delete('hello', 'l') == ('heo', False)",
                "assert reverse_delete('a', 'a') == ('', True)",
                "assert reverse_delete('abba', 'b') == ('aa', True)",
                "assert reverse_delete('madam', 'md') == ('aa', True)",
                "assert reverse_delete('', 'a') == ('', True)",
                "assert reverse_delete('noon', '') == ('noon', True)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 496,
        "completion_tokens": 159
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
                "assert odd_count(['3', '11111111']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
                "assert odd_count(['2468', '13579']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 5n the str5ng 5 of the 5nput.\"]",
                "assert odd_count(['0']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]"
            ],
            "failed_tests": [
                "assert odd_count(['', '0024', '567']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 529,
        "completion_tokens": 255
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([-1, -2, -3]) == -6",
                "assert minSubArraySum([1, 2, 3, 4, 5]) == 1",
                "assert minSubArraySum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == -5",
                "assert minSubArraySum([0, -1, -2, -3, 0]) == -6",
                "assert minSubArraySum([10]) == 10",
                "assert minSubArraySum([1, -2, 1]) == -2",
                "assert minSubArraySum([-5, -4, -3, -2, -1]) == -15"
            ],
            "failed_tests": [
                "assert minSubArraySum([-1, 0, -2, 3]) == -2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 394,
        "completion_tokens": 208
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0",
                "assert max_fill([[1,1,1], [1,1,1], [1,1,1]], 3) == 3",
                "assert max_fill([[1,0,1], [0,1,0], [1,0,1]], 2) == 3",
                "assert max_fill([[1]], 1) == 1",
                "assert max_fill([[1,1,1,1,1]], 5) == 1",
                "assert max_fill([[1,1,1,1,1], [0,0,0,0,0], [1,1,1,1,1]], 10) == 2"
            ],
            "failed_tests": [
                "assert max_fill([[1,1,0,0], [0,0,1,1], [1,0,1,0]], 1) == 5 (AssertionError: )"
            ]
        },
        "prompt_tokens": 682,
        "completion_tokens": 287
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([0, 1, 2, 3, 4]) == [0, 1, 2, 4, 3]",
                "assert sort_array([15, 7, 8, 9, 1]) == [1, 8, 9, 7, 15]",
                "assert sort_array([1023, 511, 255, 127, 63]) == [63, 127, 255, 511, 1023]",
                "assert sort_array([3, 5, 6, 7, 8]) == [8, 3, 5, 6, 7]"
            ],
            "failed_tests": [
                "assert sort_array([10, 6, 7, 8, 9]) == [8, 10, 6, 9, 7] (AssertionError: )"
            ]
        },
        "prompt_tokens": 531,
        "completion_tokens": 176
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
                "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]",
                "assert select_words(\"simple white space\", 2) == []",
                "assert select_words(\"Hello world\", 4) == [\"world\"]",
                "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]",
                "assert select_words(\"\", 3) == []",
                "assert select_words(\"a e i o u\", 1) == []"
            ],
            "failed_tests": [
                "assert select_words(\"This is a test\", 1) == [\"a\"] (AssertionError: )",
                "assert select_words(\"Consonants and vowels\", 3) == [\"and\"] (AssertionError: )",
                "assert select_words(\"Multiple words with same consonants\", 5) == [\"Multiple\", \"consonants\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 490,
        "completion_tokens": 165
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"yogurt\") == \"u\"",
                "assert get_closest_vowel(\"FULL\") == \"U\"",
                "assert get_closest_vowel(\"quick\") == \"\"",
                "assert get_closest_vowel(\"ab\") == \"\"",
                "assert get_closest_vowel(\"Rhythm\") == \"\"",
                "assert get_closest_vowel(\"B\") == \"\"",
                "assert get_closest_vowel(\"AeIou\") == \"\"",
                "assert get_closest_vowel(\"crystal\") == \"a\""
            ],
            "failed_tests": [
                "assert get_closest_vowel(\"programming\") == \"a\" (AssertionError: )",
                "assert get_closest_vowel(\"beautiful\") == \"i\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 471,
        "completion_tokens": 131
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['()(', ')']) == 'Yes'",
                "assert match_parens([')', ')']) == 'No'",
                "assert match_parens(['(', '(']) == 'No'",
                "assert match_parens(['()', '()']) == 'Yes'",
                "assert match_parens([')(', '']) == 'No'",
                "assert match_parens(['(', ')']) == 'Yes'",
                "assert match_parens([')(', ')(']) == 'No'",
                "assert match_parens(['(()', '())']) == 'Yes'",
                "assert match_parens(['', '']) == 'Yes'"
            ],
            "failed_tests": [
                "assert match_parens([')())', '(()(']) == 'No' (AssertionError: )"
            ]
        },
        "prompt_tokens": 448,
        "completion_tokens": 145
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([-3, -4, 5, 10, 7], 3) == [5, 7, 10]",
                "assert maximum([-10, -20, -30, -40, -50], 2) == [-20, -10]",
                "assert maximum([1, 2, 3, 4, 5], 4) == [2, 3, 4, 5]",
                "assert maximum([3, 1, 2], 3) == [1, 2, 3]",
                "assert maximum([10, 20, 30, 40, 50], 0) == []",
                "assert maximum([100, 200, 300, 400, 500], 1) == [500]",
                "assert maximum([5, 5, 5, 5, 5], 3) == [5, 5, 5]",
                "assert maximum([42], 1) == [42]",
                "assert maximum([-5, -10, -3, -1, -4], 2) == [-3, -1]",
                "assert maximum([0, 0, 0, 0, 0], 3) == [0, 0, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 549,
        "completion_tokens": 367
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9",
                "assert solution([30, 13, 24, 321]) == 0",
                "assert solution([2, 4, 6, 8, 10]) == 0",
                "assert solution([0, 1, 2, 3, 4, 5]) == 0"
            ],
            "failed_tests": [
                "assert solution([1, 2, 3, 4, 5, 6, 7]) == 9 (AssertionError: )",
                "assert solution([11, 22, 33, 44, 55]) == 44 (AssertionError: )"
            ]
        },
        "prompt_tokens": 405,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
                "assert add_elements([10, 20, 30, 40, 50], 3) == 60",
                "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 45",
                "assert add_elements([123, 456, 78, 90, 12], 5) == 180"
            ],
            "failed_tests": [
                "assert add_elements([-10, -20, 30, 40, -50], 5) == 0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 698,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(1) == [1]",
                "assert get_odd_collatz(2) == [1]"
            ],
            "failed_tests": [
                "assert get_odd_collatz(3) == [1, 3, 5, 7, 10] (AssertionError: )",
                "assert get_odd_collatz(10) == [1, 3, 5, 7] (AssertionError: )",
                "assert get_odd_collatz(13) == [1, 5, 13, 17, 21, 25, 31, 41] (AssertionError: )"
            ]
        },
        "prompt_tokens": 731,
        "completion_tokens": 106
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('04-31-2020') == False",
                "assert valid_date('') == False",
                "assert valid_date('02-30-2020') == False",
                "assert valid_date('03-11-2000') == True",
                "assert valid_date('04-0-2040') == False",
                "assert valid_date('15-01-2012') == False",
                "assert valid_date('01-01-0000') == True",
                "assert valid_date('13-01-2020') == False",
                "assert valid_date('11-31-2020') == False"
            ],
            "failed_tests": [
                "assert valid_date('02-29-2019') == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 794,
        "completion_tokens": 194
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"abcdef\") == 3",
                "assert split_words(\"This is a test.\") == [\"This\", \"is\", \"a\", \"test.\"]",
                "assert split_words(\"One,two,three,four\") == [\"One\", \"two\", \"three\", \"four\"]",
                "assert split_words(\"\") == 0"
            ],
            "failed_tests": [
                "assert split_words(\"a\") == 1 (AssertionError: )",
                "assert split_words(\"b\") == 0 (AssertionError: )",
                "assert split_words(\"abcde\") == 3 (AssertionError: )",
                "assert split_words(\"NoDelimitersHere\") == 8 (AssertionError: )"
            ]
        },
        "prompt_tokens": 472,
        "completion_tokens": 144
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([1, 2, 2, 3, 3, 4]) == True",
                "assert is_sorted([1, 2, 2, 2, 3, 4]) == False",
                "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False",
                "assert is_sorted([1, 2, 3, 4, 5, 6]) == True",
                "assert is_sorted([1, 2, 3, 4, 4, 5]) == True",
                "assert is_sorted([1, 2, 3, 5, 4]) == False",
                "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True",
                "assert is_sorted([1, 3, 2, 4, 5]) == False",
                "assert is_sorted([5]) == True"
            ],
            "failed_tests": [
                "assert is_sorted([1, 1, 2, 3, 4, 5]) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 710,
        "completion_tokens": 316
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert intersection((1, 2), (2, 3)) == \"NO\"",
                "assert intersection((-1, 1), (0, 4)) == \"NO\"",
                "assert intersection((-3, -1), (-5, 5)) == \"YES\"",
                "assert intersection((5, 7), (7, 10)) == \"NO\"",
                "assert intersection((10, 15), (16, 20)) == \"NO\"",
                "assert intersection((2, 11), (4, 6)) == \"YES\"",
                "assert intersection((0, 0), (0, 0)) == \"NO\"",
                "assert intersection((1, 10), (10, 20)) == \"NO\"",
                "assert intersection((6, 9), (1, 6)) == \"NO\""
            ],
            "failed_tests": [
                "assert intersection((3, 5), (1, 4)) == \"YES\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 561,
        "completion_tokens": 184
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([1, 2, 2, -4]) == -9",
                "assert prod_signs([0, 1]) == 0",
                "assert prod_signs([]) == None",
                "assert prod_signs([-1, -2, -3, -4]) == 10",
                "assert prod_signs([1, 2, 3, 4, 5]) == 15",
                "assert prod_signs([0, 0, 0]) == 0",
                "assert prod_signs([1]) == 1",
                "assert prod_signs([-1]) == -1"
            ],
            "failed_tests": [
                "assert prod_signs([-1, 1, -1, 1]) == -4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 709,
        "completion_tokens": 149
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 3) == [1, 2, 1]",
                "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
                "assert minPath([[1, 4], [2, 3]], 2) == [1, 2]"
            ],
            "failed_tests": [
                "assert minPath([[10, 15, 20], [5, 8, 2], [1, 4, 3]], 4) == [1, 4, 3, 2] (AssertionError: )",
                "assert minPath([[3, 2, 1], [6, 5, 4], [9, 8, 7]], 5) == [1, 2, 3, 2, 1] (AssertionError: )"
            ]
        },
        "prompt_tokens": 717,
        "completion_tokens": 192
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert tri(0) == [1]",
                "assert tri(1) == [1, 3]",
                "assert tri(2) == [1, 3, 2]",
                "assert tri(4) == [1, 3, 2, 8, 3]"
            ],
            "failed_tests": [
                "assert tri(5) == [1, 3, 2, 8, 3, 14] (AssertionError: )"
            ]
        },
        "prompt_tokens": 552,
        "completion_tokens": 85
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert digits(1) == 1",
                "assert digits(4) == 0",
                "assert digits(235) == 15",
                "assert digits(2222) == 0",
                "assert digits(1357) == 105",
                "assert digits(2468) == 0",
                "assert digits(123456789) == 945",
                "assert digits(337) == 63",
                "assert digits(358) == 15"
            ],
            "failed_tests": [
                "assert digits(689622982) == 0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 587,
        "completion_tokens": 101
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[]]]]]]][[[[[]') == False",
                "assert is_nested('[[[[[[]') == False",
                "assert is_nested('[[]]') == True",
                "assert is_nested('[][]') == False",
                "assert is_nested('[[[[]]]') == True",
                "assert is_nested('[[[[]]]]') == True",
                "assert is_nested('[[[]]]') == True",
                "assert is_nested('[[][]]') == True",
                "assert is_nested('[]') == False"
            ],
            "failed_tests": [
                "assert is_nested('[[]]]') == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 416,
        "completion_tokens": 145
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 14",
                "assert sum_squares([1, 4, 9]) == 98",
                "assert sum_squares([0, 5, 10]) == 125",
                "assert sum_squares([-1, 2, -3]) == 14",
                "assert sum_squares([1.4, 4.2, 0]) == 29",
                "assert sum_squares([-2.4, 1, 1]) == 6",
                "assert sum_squares([]) == 0",
                "assert sum_squares([3.5]) == 16"
            ],
            "failed_tests": [
                "assert sum_squares([-1.5, 2.3, 4.7]) == 32 (AssertionError: )",
                "assert sum_squares([423, 182, 4.271796703338623]) == 203569 (AssertionError: )"
            ]
        },
        "prompt_tokens": 470,
        "completion_tokens": 262
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
                "assert check_if_last_char_is_a_letter(\"\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
                "assert check_if_last_char_is_a_letter(\" \") == False",
                "assert check_if_last_char_is_a_letter(\"banana!\") == False",
                "assert check_if_last_char_is_a_letter(\"hello world a\") == True",
                "assert check_if_last_char_is_a_letter(\"12345\") == False",
                "assert check_if_last_char_is_a_letter(\"12345 a\") == True",
                "assert check_if_last_char_is_a_letter(\"a\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 449,
        "completion_tokens": 151
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1, 2, 4, 3, 5]) == 3",
                "assert can_arrange([1, 2, 3]) == -1",
                "assert can_arrange([5, 4, 3, 2, 1]) == 4",
                "assert can_arrange([10, 20, 30, 25, 40, 50]) == 3",
                "assert can_arrange([1]) == -1",
                "assert can_arrange([]) == -1",
                "assert can_arrange([3, 2, 1, 4, 5]) == 2",
                "assert can_arrange([1, 3, 5, 7, 6, 8]) == 4"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 398,
        "completion_tokens": 163
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([0]) == (None, None)",
                "assert largest_smallest_integers([-2, -1, 0, 1, 2]) == (-1, 1)",
                "assert largest_smallest_integers([0, 0, 0, 1]) == (None, 1)",
                "assert largest_smallest_integers([0, 0, 0, -1, 1]) == (-1, 1)",
                "assert largest_smallest_integers([-1]) == (-1, None)",
                "assert largest_smallest_integers([-2, -4, -1, -3, -5, -7]) == (-1, None)",
                "assert largest_smallest_integers([0, 0, 0, -1]) == (-1, None)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([-2, 4, 1, 3, 5, 7]) == (-2, 1)",
                "assert largest_smallest_integers([1]) == (None, 1)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 463,
        "completion_tokens": 261
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert compare_one(3, 4) == 4",
                "assert compare_one(3.5, 2) == 3.5",
                "assert compare_one(\"3,5\", 7) == 7",
                "assert compare_one(\"4.2\", \"4,3\") == \"4,3\"",
                "assert compare_one(\"7,1\", 7.1) == None",
                "assert compare_one(\"100\", \"100\") == None",
                "assert compare_one(0, \"0\") == None",
                "assert compare_one(\"-2,3\", \"-2.4\") == \"-2,3\""
            ],
            "failed_tests": [
                "assert compare_one(-1, \"-1,2\") == \"-1,2\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 465,
        "completion_tokens": 144
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(10) == True",
                "assert is_equal_to_sum_even(12) == True",
                "assert is_equal_to_sum_even(16) == True",
                "assert is_equal_to_sum_even(20) == True",
                "assert is_equal_to_sum_even(2) == False",
                "assert is_equal_to_sum_even(343) == False",
                "assert is_equal_to_sum_even(7) == False",
                "assert is_equal_to_sum_even(0) == False"
            ],
            "failed_tests": [
                "assert is_equal_to_sum_even(14) == False (AssertionError: )",
                "assert is_equal_to_sum_even(170) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 378,
        "completion_tokens": 124
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(4) == 288",
                "assert special_factorial(1) == 1",
                "assert special_factorial(5) == 34560",
                "assert special_factorial(3) == 12",
                "assert special_factorial(2) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 391,
        "completion_tokens": 60
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\"Example\") == \"Example\"",
                "assert fix_spaces(\"   \") == \"-\"",
                "assert fix_spaces(\"Example 7  \") == \"Example_7_\"",
                "assert fix_spaces(\"Example    4\") == \"Example-4\"",
                "assert fix_spaces(\" Example   3\") == \"_Example-3\"",
                "assert fix_spaces(\"Example 1\") == \"Example_1\"",
                "assert fix_spaces(\" Example 2\") == \"_Example_2\"",
                "assert fix_spaces(\"\") == \"\""
            ],
            "failed_tests": [
                "assert fix_spaces(\"  Example 5\") == \"_Example_5\" (AssertionError: )",
                "assert fix_spaces(\"Example  8\") == \"Example_8\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 445,
        "completion_tokens": 155
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"goodNameBut4Digits1234.txt\") == 'No'",
                "assert file_name_check(\"1example.dll\") == 'No'",
                "assert file_name_check(\"validFile123.dll\") == 'Yes'",
                "assert file_name_check(\"example.txt\") == 'Yes'",
                "assert file_name_check(\"noDigitsHere.exe\") == 'Yes'",
                "assert file_name_check(\".txt\") == 'No'",
                "assert file_name_check(\"two.dots.exe\") == 'No'",
                "assert file_name_check(\"example.exe\") == 'Yes'",
                "assert file_name_check(\"123.txt\") == 'No'",
                "assert file_name_check(\"file.with.more.than.three.digits123.txt\") == 'No'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 568,
        "completion_tokens": 212
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 6",
                "assert sum_squares([]) == 0",
                "assert sum_squares([-1, -5, 2, -1, -5]) == -126",
                "assert sum_squares([10]) == 10**2",
                "assert sum_squares([0, 0, 0, 0, 0]) == 0"
            ],
            "failed_tests": [
                "assert sum_squares([4, 5, 6, 7]) == 4**3 + 5 + 6**2 + 7 (AssertionError: )",
                "assert sum_squares([0, 1, 2, 3, 4, 5, 6]) == 0 + 1 + 2**2 + 3 + 4**3 + 5 + 6**2 (AssertionError: )",
                "assert sum_squares([-2, -2, -2, -2, -2, -2, -2]) == -2**2 + -2 + -2**2 + -2**3 + -2 + -2**2 + -2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 494,
        "completion_tokens": 231
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"This is a test\") == \"is\"",
                "assert words_in_sentence(\"lets go for swimming\") == \"go for\"",
                "assert words_in_sentence(\"a\") == \"\""
            ],
            "failed_tests": [
                "assert words_in_sentence(\"prime time to shine\") == \"time to\" (AssertionError: )",
                "assert words_in_sentence(\"one two three four five six seven\") == \"two three five seven\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 433,
        "completion_tokens": 172
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"1/5\", \"5/1\") == True",
                "assert simplify(\"1/6\", \"2/1\") == False",
                "assert simplify(\"7/10\", \"10/2\") == False",
                "assert simplify(\"3/4\", \"8/3\") == True",
                "assert simplify(\"2/3\", \"3/2\") == True",
                "assert simplify(\"5/2\", \"2/5\") == True",
                "assert simplify(\"11/13\", \"13/11\") == True",
                "assert simplify(\"100/200\", \"200/100\") == True",
                "assert simplify(\"1/100\", \"100/1\") == True"
            ],
            "failed_tests": [
                "assert simplify(\"9/8\", \"16/9\") == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 448,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([100]) == [100]",
                "assert order_by_points([]) == []",
                "assert order_by_points([0, 10, 20, 111]) == [0, 10, 20, 111]"
            ],
            "failed_tests": [
                "assert order_by_points([56, 23, -32, 14, -60]) == [14, 23, -32, 56, -60] (AssertionError: )",
                "assert order_by_points([-5, -23, -34, -2, -11]) == [-2, -11, -5, -23, -34] (AssertionError: )",
                "assert order_by_points([12, 3, 45, 22, 8]) == [3, 12, 22, 8, 45] (AssertionError: )",
                "assert order_by_points([21, 12, 30, 3]) == [12, 21, 30, 3] (AssertionError: )"
            ]
        },
        "prompt_tokens": 424,
        "completion_tokens": 255
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2",
                "assert specialFilter([-11, -23, -35, -47, -59, -71, -83, -95]) == 0",
                "assert specialFilter([10, 12, 14, 16, 18, 20]) == 0"
            ],
            "failed_tests": [
                "assert specialFilter([11, 23, 35, 47, 59, 71, 83, 95]) == 8 (AssertionError: )"
            ]
        },
        "prompt_tokens": 420,
        "completion_tokens": 219
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(5) == 1",
                "assert get_max_triples(3) == 0",
                "assert get_max_triples(6) == 4",
                "assert get_max_triples(1) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 444,
        "completion_tokens": 52
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
                "assert bf(\"Earth\", \"Mercury\") == (\"Venus\",)",
                "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
                "assert bf(\"Venus\", \"Saturn\") == (\"Earth\", \"Mars\", \"Jupiter\")",
                "assert bf(\"Sun\", \"Mars\") == ()",
                "assert bf(\"Earth\", \"Pluto\") == ()",
                "assert bf(\"Mars\", \"Jupiter\") == ()"
            ],
            "failed_tests": [
                "assert bf(\"Neptune\", \"Mercury\") == () (AssertionError: )"
            ]
        },
        "prompt_tokens": 540,
        "completion_tokens": 138
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([\"b\", \"a\", \"c\"]) == []",
                "assert sorted_list_sum([]) == []",
                "assert sorted_list_sum([\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\"]) == [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\", \"gg\"]",
                "assert sorted_list_sum([\"zz\", \"aa\", \"cc\", \"bb\"]) == [\"aa\", \"bb\", \"cc\", \"zz\"]"
            ],
            "failed_tests": [
                "assert sorted_list_sum([\"apple\", \"banana\", \"cherry\", \"date\"]) == [\"date\"] (AssertionError: )",
                "assert sorted_list_sum([\"dog\", \"cat\", \"bat\", \"rat\", \"hat\"]) == [\"bat\", \"cat\", \"hat\", \"rat\"] (AssertionError: )",
                "assert sorted_list_sum([\"hello\", \"world\", \"python\", \"code\"]) == [] (AssertionError: )",
                "assert sorted_list_sum([\"12345\", \"67890\", \"abcde\", \"fghij\"]) == [\"abcde\", \"fghij\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 495,
        "completion_tokens": 205
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(2, 352, 440) == 352",
                "assert x_or_y(3, 352, 440) == 352",
                "assert x_or_y(4, 352, 440) == 440",
                "assert x_or_y(11, 352, 440) == 352",
                "assert x_or_y(15, 352, 440) == 440",
                "assert x_or_y(97, 352, 440) == 352",
                "assert x_or_y(100, 352, 440) == 440",
                "assert x_or_y(7, 7.460535049438477, 440) == 7.460535049438477"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 689,
        "completion_tokens": 219
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([1, 3, 2, 0]) == 10",
                "assert double_the_difference([-1, -2, 0]) == 0",
                "assert double_the_difference([9, -2]) == 81",
                "assert double_the_difference([0]) == 0",
                "assert double_the_difference([]) == 0",
                "assert double_the_difference([1.5, 2.5, 3.5]) == 0",
                "assert double_the_difference([5, 7, 9]) == 5**2 + 7**2 + 9**2",
                "assert double_the_difference([-3, -5, -7]) == 0",
                "assert double_the_difference([2, 4, 6, 8]) == 0"
            ],
            "failed_tests": [
                "assert double_the_difference([1, \"text\", 3, None]) == 1**2 + 3**2 (TypeError: '>' not supported between instances of 'str' and 'int')"
            ]
        },
        "prompt_tokens": 480,
        "completion_tokens": 191
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
                "assert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]",
                "assert compare([10,15,20],[10,15,20]) == [0,0,0]",
                "assert compare([2,2,2],[3,2,1]) == [1,0,1]",
                "assert compare([],[]) == []",
                "assert compare([100],[100]) == [0]",
                "assert compare([1,1,1,1,1],[0,2,0,2,0]) == [1,1,1,1,1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 567,
        "completion_tokens": 184
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
                "assert Strongest_Extension('Data', ['DataLoader', 'TRANSFORM', 'visual']) == 'Data.TRANSFORM'",
                "assert Strongest_Extension('Algorithm', ['Sort', 'SEARCH', 'Merge']) == 'Algorithm.SEARCH'",
                "assert Strongest_Extension('Class', ['equal', 'EQUAL', 'EquAl']) == 'Class.EQUAL'",
                "assert Strongest_Extension('Test', ['testOne', 'testTwo', 'testThree']) == 'Test.testOne'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('Model', ['Net', 'CNN', 'RNN']) == 'Model.Net' (AssertionError: )",
                "assert Strongest_Extension('Framework', ['TensorFlow', 'PyTorch', 'Keras']) == 'Framework.TensorFlow' (AssertionError: )"
            ]
        },
        "prompt_tokens": 1024,
        "completion_tokens": 195
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check(\"abcd\", \"abd\") == False",
                "assert cycpattern_check(\"hello\", \"ell\") == True",
                "assert cycpattern_check(\"whassup\", \"psus\") == False",
                "assert cycpattern_check(\"abab\", \"baa\") == True",
                "assert cycpattern_check(\"efef\", \"eeff\") == False",
                "assert cycpattern_check(\"himenss\", \"simen\") == True",
                "assert cycpattern_check(\"rotation\", \"tationro\") == True",
                "assert cycpattern_check(\"12345\", \"45123\") == True"
            ],
            "failed_tests": [
                "assert cycpattern_check(\"abcdefg\", \"efgab\") == True (AssertionError: )",
                "assert cycpattern_check(\"nopattern\", \"patternno\") == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 443,
        "completion_tokens": 153
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(331) == (0, 3)",
                "assert even_odd_count(0) == (1, 0)",
                "assert even_odd_count(-987654321) == (4, 5)"
            ],
            "failed_tests": [
                "assert even_odd_count(156) == (2, 1) (AssertionError: )",
                "assert even_odd_count(39205703735351562) == (10, 6) (AssertionError: )"
            ]
        },
        "prompt_tokens": 352,
        "completion_tokens": 81
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(367) == 'ccclxvii'",
                "assert int_to_mini_roman(172) == 'clxxii'",
                "assert int_to_mini_roman(3) == 'iii'",
                "assert int_to_mini_roman(1000) == 'm'",
                "assert int_to_mini_roman(1) == 'i'",
                "assert int_to_mini_roman(58) == 'lviii'",
                "assert int_to_mini_roman(1994) == 'mcmxciv'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 408,
        "completion_tokens": 107
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(1, 2, 3) == False",
                "assert right_angle_triangle(5, 12, 13) == True",
                "assert right_angle_triangle(8, 15, 17) == True",
                "assert right_angle_triangle(7, 24, 25) == True",
                "assert right_angle_triangle(0.3, 0.4, 0.5) == True",
                "assert right_angle_triangle(5, 5, 5) == False",
                "assert right_angle_triangle(6, 8, 10) == True",
                "assert right_angle_triangle(12, 35, 37) == True"
            ],
            "failed_tests": [
                "assert right_angle_triangle(10, 6, 8) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 405,
        "completion_tokens": 170
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"a\", \"aa\", \"aaa\"]) == \"a\"",
                "assert find_max([\"hello\", \"world\", \"python\", \"developer\"]) == \"developer\"",
                "assert find_max([\"\"]) == \"\"",
                "assert find_max([\"a\", \"b\", \"c\", \"d\"]) == \"a\"",
                "assert find_max([\"unique\", \"unicorn\", \"uniform\", \"universal\"]) == \"universal\"",
                "assert find_max([\"cat\", \"dog\", \"elephant\", \"fox\"]) == \"elephant\"",
                "assert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"",
                "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"",
                "assert find_max([\"zz\", \"yy\", \"xx\"]) == \"xx\""
            ],
            "failed_tests": [
                "assert find_max([\"apple\", \"banana\", \"cherry\"]) == \"banana\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 477,
        "completion_tokens": 190
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert eat(0, 0, 0) == [0, 0]",
                "assert eat(0, 5, 10) == [5, 5]",
                "assert eat(10, 5, 5) == [15, 0]",
                "assert eat(3, 7, 2) == [5, 0]",
                "assert eat(500, 500, 1000) == [1000, 500]",
                "assert eat(0, 1000, 999) == [999, 0]",
                "assert eat(1, 1, 1) == [2, 0]",
                "assert eat(250, 750, 500) == [750, 0]",
                "assert eat(999, 1, 0) == [999, 0]"
            ],
            "failed_tests": [
                "assert eat(100, 200, 150) == [250, 50] (AssertionError: )"
            ]
        },
        "prompt_tokens": 615,
        "completion_tokens": 187
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9",
                "assert do_algebra(['*'], [5, 4]) == 20"
            ],
            "failed_tests": [
                "assert do_algebra(['-', '+'], [10, 5, 2]) == 3 (AssertionError: )",
                "assert do_algebra(['**', '//', '+'], [2, 3, 4, 1]) == 9 (AssertionError: )",
                "assert do_algebra(['//', '*', '+', '-'], [8, 4, 3, 2, 1]) == 5 (AssertionError: )"
            ]
        },
        "prompt_tokens": 519,
        "completion_tokens": 125
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve(\"1234\") == \"4321\"",
                "assert solve(\"ab\") == \"AB\"",
                "assert solve(\"Hello World!\") == \"hELLO wORLD!\"",
                "assert solve(\"\") == \"\"",
                "assert solve(\"12345a\") == \"12345A\"",
                "assert solve(\"AaBbCc\") == \"aAbBcC\"",
                "assert solve(\"!!!\") == \"!!!\"",
                "assert solve(\"abc123\") == \"ABC123\"",
                "assert solve(\"XYZ\") == \"xyz\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 654,
        "completion_tokens": 114
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('') == None",
                "assert string_to_md5('password123') == '482c811da5d5b4bc6d497ffa98491e38'",
                "assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 372,
        "completion_tokens": 141
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(2, 8) == [2, 4, 6, 8]",
                "assert generate_integers(8, 2) == [2, 4, 6, 8]",
                "assert generate_integers(10, 14) == []",
                "assert generate_integers(3, 7) == [4, 6]",
                "assert generate_integers(5, 5) == []",
                "assert generate_integers(1, 1) == []"
            ],
            "failed_tests": [
                "assert generate_integers(12, 12) == [12] (AssertionError: )"
            ]
        },
        "prompt_tokens": 586,
        "completion_tokens": 117
    }
]