[
    {
        "task_id": "HumanEval/0",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
                "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
                "assert has_close_elements([10, 20, 30, 40, 50], 9.9) == False",
                "assert has_close_elements([0.1, 0.2, 0.4, 0.5], 0.15) == True",
                "assert has_close_elements([5.5, 5.55, 6], 0.05) == True"
            ],
            "failed_tests": [
                "assert has_close_elements([-1.0, -2.5, -3.0, -4.5], 0.6) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 456,
        "completion_tokens": 189
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('()()') == ['()', '()']",
                "assert separate_paren_groups('((( )))') == ['((()))']",
                "assert separate_paren_groups('') == []",
                "assert separate_paren_groups('((()))(())') == ['((()))', '(())']",
                "assert separate_paren_groups('() ((())) ()') == ['()', '((()))', '()']"
            ],
            "failed_tests": [
                "assert separate_paren_groups('(( )) ( ( ) )') == ['(())', '()'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 424,
        "completion_tokens": 125
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(0.123456) == 0.123456"
            ],
            "failed_tests": [
                "assert truncate_number(10.01) == 0.01 (AssertionError: )",
                "assert truncate_number(100.999) == 0.999 (AssertionError: )",
                "assert truncate_number(351.313) == 0.313 (AssertionError: )",
                "assert truncate_number(5.2982707023620605) == 0.2982707023620605 (AssertionError: )"
            ]
        },
        "prompt_tokens": 554,
        "completion_tokens": 100
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([1, 2, 3]) == False",
                "assert below_zero([1, 2, -4, 5]) == True",
                "assert below_zero([-1, -2, -3, -4]) == True",
                "assert below_zero([10, -2, -3, 5]) == False",
                "assert below_zero([0, 0, 0, 0]) == False",
                "assert below_zero([100, -50, -50]) == False",
                "assert below_zero([100, -101]) == True",
                "assert below_zero([5, -1, -2, -1, 1]) == False",
                "assert below_zero([5, -6, 1, -1]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 458,
        "completion_tokens": 157
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
                "assert mean_absolute_deviation([10, 10, 10, 10]) == 0.0",
                "assert mean_absolute_deviation([1, 2, 3]) == 0.6666666666666666",
                "assert mean_absolute_deviation([-1, 0, 1]) == 0.6666666666666666",
                "assert mean_absolute_deviation([5, 7, 9, 11]) == 2.0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 686,
        "completion_tokens": 131
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([], 4) == []",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]",
                "assert intersperse([1], 0) == [1]",
                "assert intersperse([1, 2], -1) == [1, -1, 2]",
                "assert intersperse([5, 5, 5], 5) == [5, 5, 5, 5, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 651,
        "completion_tokens": 110
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('()') == [1]",
                "assert parse_nested_parens('((()))') == [3]",
                "assert parse_nested_parens('') == []",
                "assert parse_nested_parens('((((()))))') == [5]",
                "assert parse_nested_parens('(()) (())') == [2, 2]",
                "assert parse_nested_parens('((())())') == [3]"
            ],
            "failed_tests": [
                "assert parse_nested_parens('()()()') == [1, 1, 1] (AssertionError: )"
            ]
        },
        "prompt_tokens": 431,
        "completion_tokens": 140
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring([], 'a') == []",
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']",
                "assert filter_by_substring(['hello', 'world', 'python'], 'x') == []",
                "assert filter_by_substring(['123', '456', '789'], '1') == ['123']",
                "assert filter_by_substring(['test', 'testing', 'tester'], 'test') == ['test', 'testing', 'tester']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 597,
        "completion_tokens": 115
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([1, 2, 3, 4]) == (10, 24)",
                "assert sum_product([-1, -2, -3, -4]) == (-10, 24)",
                "assert sum_product([0, 1, 2, 3]) == (6, 0)",
                "assert sum_product([1]) == (1, 1)",
                "assert sum_product([100, 200, 300]) == (600, 6000000)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 735,
        "completion_tokens": 116
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
                "assert rolling_max([5, 3, 6, 7, 2]) == [5, 5, 6, 7, 7]",
                "assert rolling_max([-1, -2, -3, -2, -1]) == [-1, -1, -1, -1, -1]",
                "assert rolling_max([10]) == [10]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 654,
        "completion_tokens": 128
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('racecar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('madam') == True",
                "assert is_palindrome('12321') == True",
                "assert is_palindrome('123456') == False",
                "assert make_palindrome('') == ''",
                "assert make_palindrome('cat') == 'catac'",
                "assert make_palindrome('cata') == 'catac'",
                "assert make_palindrome('race') == 'racecar'",
                "assert make_palindrome('mad') == 'madam'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 579,
        "completion_tokens": 131
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('010', '110') == '100'",
                "assert string_xor('10101', '11100') == '01001'",
                "assert string_xor('1111', '0000') == '1111'",
                "assert string_xor('0000', '0000') == '0000'",
                "assert string_xor('111', '111') == '000'",
                "assert string_xor('1', '0') == '1'",
                "assert string_xor('01', '10') == '11'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 370,
        "completion_tokens": 104
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest([]) is None",
                "assert longest(['a']) == 'a'",
                "assert longest(['a', 'bb', 'ccc']) == 'ccc'",
                "assert longest(['hello', 'world', 'python', 'programming']) == 'programming'",
                "assert longest(['short', 'longer', 'longest', 'longer']) == 'longest'",
                "assert longest(['one', 'two', 'three', 'four', 'five']) == 'three'",
                "assert longest(['12345', '67890', 'abcde', 'fghij']) == '12345'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 402,
        "completion_tokens": 120
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(3, 5) == 1",
                "assert greatest_common_divisor(25, 15) == 5",
                "assert greatest_common_divisor(336, 326) == 2",
                "assert greatest_common_divisor(100, 10) == 10",
                "assert greatest_common_divisor(17, 13) == 1",
                "assert greatest_common_divisor(60, 48) == 12",
                "assert greatest_common_divisor(0, 5) == 5",
                "assert greatest_common_divisor(5, 0) == 5",
                "assert greatest_common_divisor(0, 0) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 553,
        "completion_tokens": 139
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('abc') == ['a', 'ab', 'abc']",
                "assert all_prefixes('') == []",
                "assert all_prefixes('a') == ['a']",
                "assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 618,
        "completion_tokens": 63
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(0) == '0'",
                "assert string_sequence(5) == '0 1 2 3 4 5'",
                "assert string_sequence(1) == '0 1'",
                "assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'",
                "assert string_sequence(-1) == ''"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 603,
        "completion_tokens": 84
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('xyzXYZ') == 3",
                "assert count_distinct_characters('Jerry') == 4",
                "assert count_distinct_characters('') == 0",
                "assert count_distinct_characters('aaaaa') == 1",
                "assert count_distinct_characters('1234567890') == 10",
                "assert count_distinct_characters('AaBbCcDdEeFf') == 6",
                "assert count_distinct_characters('HelloWorld') == 7"
            ],
            "failed_tests": [
                "assert count_distinct_characters('Python 3.8') == 9 (AssertionError: )"
            ]
        },
        "prompt_tokens": 372,
        "completion_tokens": 138
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]",
                "assert parse_music('o') == [4]",
                "assert parse_music('o|') == [2]",
                "assert parse_music('.|') == [1]",
                "assert parse_music('o o o') == [4, 4, 4]",
                "assert parse_music('.| .| .| .|') == [1, 1, 1, 1]",
                "assert parse_music('o| o| o| o|') == [2, 2, 2, 2]",
                "assert parse_music('') == []",
                "assert parse_music('o| .| o .| o|') == [2, 1, 4, 1, 2]",
                "assert parse_music('.| o o| .| o| o') == [1, 4, 2, 1, 2, 4]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 695,
        "completion_tokens": 232
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('', 'a') == 0",
                "assert how_many_times('aaa', 'a') == 3",
                "assert how_many_times('aaaa', 'aa') == 3",
                "assert how_many_times('abcde', 'f') == 0",
                "assert how_many_times('hello world', 'o') == 2",
                "assert how_many_times('abababab', 'aba') == 3",
                "assert how_many_times('testtesttest', 'test') == 3",
                "assert how_many_times('overlap', 'lap') == 1",
                "assert how_many_times('aaaabaaaab', 'aaab') == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 399,
        "completion_tokens": 139
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('three one five') == 'one three five'",
                "assert sort_numbers('nine two four') == 'two four nine'",
                "assert sort_numbers('eight seven six') == 'six seven eight'",
                "assert sort_numbers('zero two five') == 'zero two five'",
                "assert sort_numbers('') == ''"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 385,
        "completion_tokens": 67
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([100.0, 200.0, 300.0, 250.0, 260.0]) == (250.0, 260.0)",
                "assert find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.45]) == (0.4, 0.45)"
            ],
            "failed_tests": [
                "assert find_closest_elements([10.5, 10.1, 10.6, 10.2]) == (10.1, 10.2) (AssertionError: )",
                "assert find_closest_elements([-1.0, -2.0, -3.0, -2.5]) == (-3.0, -2.5) (AssertionError: )"
            ]
        },
        "prompt_tokens": 765,
        "completion_tokens": 255
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([10, 20, 30, 40, 50]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([0, 100]) == [0.0, 1.0]",
                "assert rescale_to_unit([-1, 0, 1]) == [0.0, 0.5, 1.0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 747,
        "completion_tokens": 158
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert filter_integers(['a', 3.14, 5]) == [5]",
                "assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]",
                "assert filter_integers([]) == []",
                "assert filter_integers([-1, 0, 1, 100]) == [-1, 0, 1, 100]",
                "assert filter_integers(['100', 100.0, 100]) == [100]"
            ],
            "failed_tests": [
                "assert filter_integers([True, False, 'True', 'False']) == [] (AssertionError: )"
            ]
        },
        "prompt_tokens": 680,
        "completion_tokens": 125
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert strlen('') == 0",
                "assert strlen('hello') == 5",
                "assert strlen(' ') == 1",
                "assert strlen('1234567890') == 10"
            ],
            "failed_tests": [
                "assert strlen('Python programming!') == 18 (AssertionError: )"
            ]
        },
        "prompt_tokens": 629,
        "completion_tokens": 52
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(318) == 159",
                "assert largest_divisor(144) == 72",
                "assert largest_divisor(2) == 1",
                "assert largest_divisor(17) == 1",
                "assert largest_divisor(100) == 50"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 326,
        "completion_tokens": 76
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(392) == [2, 2, 2, 7, 7]",
                "assert factorize(340) == [2, 2, 5, 17]",
                "assert factorize(5) == [5]",
                "assert factorize(1) == []",
                "assert factorize(97) == [97]",
                "assert factorize(100) == [2, 2, 5, 5]",
                "assert factorize(2) == [2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 621,
        "completion_tokens": 119
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([5, 5, 5, 5, 5]) == []",
                "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert remove_duplicates([]) == []",
                "assert remove_duplicates([10, 9, 10, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == [9, 8, 7, 6, 5, 4, 3, 2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 669,
        "completion_tokens": 157
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('Hello') == 'hELLO'",
                "assert flip_case('Python') == 'pYTHON'",
                "assert flip_case('Algorithm') == 'aLGORITHM'",
                "assert flip_case('UNIT Testing') == 'unit tESTING'",
                "assert flip_case('123abcDEF') == '123ABCdef'",
                "assert flip_case('') == ''"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 607,
        "completion_tokens": 77
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate([]) == ''",
                "assert concatenate(['a', 'b', 'c']) == 'abc'",
                "assert concatenate(['hello', ' ', 'world']) == 'hello world'",
                "assert concatenate(['Python', '3.8']) == 'Python3.8'",
                "assert concatenate(['', '']) == ''"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 558,
        "completion_tokens": 65
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']",
                "assert filter_by_prefix(['hello', 'world', 'prefix', 'python'], 'p') == ['prefix', 'python']",
                "assert filter_by_prefix(['test', 'string', 'start'], 'no') == []",
                "assert filter_by_prefix(['apple', 'banana', 'apricot', 'cherry'], 'ap') == ['apple', 'apricot']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 608,
        "completion_tokens": 116
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
                "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]",
                "assert get_positive([-10, -20, -30, -40]) == []",
                "assert get_positive([0, 0, 0, 0]) == []",
                "assert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 741,
        "completion_tokens": 158
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_prime(365) == False",
                "assert is_prime(151) == True",
                "assert is_prime(2) == True"
            ],
            "failed_tests": [
                "assert is_prime(2.9422221183776855) == False (TypeError: 'float' object cannot be interpreted as an integer)"
            ]
        },
        "prompt_tokens": 382,
        "completion_tokens": 63
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert poly([1, 2], 2) == 5",
                "assert poly([-6, 11, -6, 1], 1) == 0",
                "assert poly([0, 4, 3], 0) == 0",
                "assert round(find_zero([1, 2]), 2) == -0.5",
                "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0",
                "assert round(find_zero([2, -3, 0, 1]), 2) == 1.0"
            ],
            "failed_tests": [
                "assert poly([3, 0, 2], -1) == 1 (AssertionError: )",
                "assert round(poly([1, -1, 1], 2), 2) == 5 (AssertionError: )",
                "assert round(find_zero([-2, 0, 1]), 2) == math.sqrt(2) (OverflowError: math range error)",
                "assert round(find_zero([1, -6, 9]), 2) == 3.0 (OverflowError: math range error)"
            ]
        },
        "prompt_tokens": 777,
        "completion_tokens": 310
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_third([1, 2, 3]) == [1, 2, 3]",
                "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]",
                "assert sort_third([10, 15, 20, 25, 30, 35, 40, 45]) == [10, 15, 20, 25, 30, 35, 40, 45]",
                "assert sort_third([3, 2, 1]) == [3, 2, 1]"
            ],
            "failed_tests": [
                "assert sort_third([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 8, 7, 6, 5, 4, 3, 2, 9] (AssertionError: )"
            ]
        },
        "prompt_tokens": 767,
        "completion_tokens": 204
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
                "assert unique([1, 2, 2, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]",
                "assert unique([-1, -3, -2, -3, -5]) == [-5, -3, -2, -1]",
                "assert unique([]) == []",
                "assert unique([7, 7, 7, 7]) == [7]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 625,
        "completion_tokens": 148
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([1, 2, 3]) == 3",
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123",
                "assert max_element([-1, -2, -3, -4]) == -1",
                "assert max_element([0]) == 0",
                "assert max_element([100, 200, 300, 400, 500]) == 500"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 399,
        "completion_tokens": 111
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(50) == 0",
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(79) == 3"
            ],
            "failed_tests": [
                "assert fizz_buzz(100) == 4 (AssertionError: )",
                "assert fizz_buzz(200) == 15 (AssertionError: )"
            ]
        },
        "prompt_tokens": 561,
        "completion_tokens": 59
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_even([1, 2, 3]) == [1, 2, 3]",
                "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]",
                "assert sort_even([4, 1, 2, 3, 6]) == [2, 1, 4, 3, 6]",
                "assert sort_even([10, 9, 8, 7, 6, 5]) == [6, 9, 8, 7, 10, 5]",
                "assert sort_even([]) == []",
                "assert sort_even([1]) == [1]",
                "assert sort_even([2, 1]) == [2, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 418,
        "completion_tokens": 161
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode_cyclic('') == ''",
                "assert decode_cyclic('') == ''",
                "assert decode_cyclic('bca') == 'abc'",
                "assert decode_cyclic(encode_cyclic('abcdef')) == 'abcdef'",
                "assert encode_cyclic('abc') == 'bca'",
                "assert decode_cyclic(encode_cyclic('abc')) == 'abc'",
                "assert decode_cyclic('bcad') == 'abcd'"
            ],
            "failed_tests": [
                "assert decode_cyclic('bcadef') == 'abcdef' (AssertionError: )",
                "assert decode_cyclic('bcadefgh') == 'abcdefgh' (AssertionError: )",
                "assert encode_cyclic('abcdef') == 'bcadef' (AssertionError: )"
            ]
        },
        "prompt_tokens": 713,
        "completion_tokens": 249
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(1) == 2",
                "assert prime_fib(2) == 3",
                "assert prime_fib(3) == 5",
                "assert prime_fib(4) == 13",
                "assert prime_fib(5) == 89"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 608,
        "completion_tokens": 59
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
                "assert triples_sum_to_zero([1, 3, -2, 1]) == True",
                "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
                "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True",
                "assert triples_sum_to_zero([1]) == False",
                "assert triples_sum_to_zero([-1, 0, 1]) == True",
                "assert triples_sum_to_zero([-1, -1, 2]) == True",
                "assert triples_sum_to_zero([0, 0, 0]) == True",
                "assert triples_sum_to_zero([-5, -1, 4, 2, 1]) == True",
                "assert triples_sum_to_zero([10, 22, -32]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 701,
        "completion_tokens": 192
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(0) == 0"
            ],
            "failed_tests": [
                "assert car_race_collision(1) == 0 (AssertionError: )",
                "assert car_race_collision(5) == 5 (AssertionError: )",
                "assert car_race_collision(10) == 10 (AssertionError: )",
                "assert car_race_collision(2) == 2 (AssertionError: )",
                "assert car_race_collision(3) == 3 (AssertionError: )"
            ]
        },
        "prompt_tokens": 448,
        "completion_tokens": 70
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]",
                "assert incr_list([]) == []",
                "assert incr_list([-1, -2, -3]) == [0, -1, -2]",
                "assert incr_list([0]) == [1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 794,
        "completion_tokens": 123
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
                "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
                "assert pairs_sum_to_zero([1, 2, 3, 7]) == False",
                "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True",
                "assert pairs_sum_to_zero([1]) == False",
                "assert pairs_sum_to_zero([-1, 1, 3, 5]) == True",
                "assert pairs_sum_to_zero([-4, 4, 2, 3]) == True",
                "assert pairs_sum_to_zero([0, 0]) == True",
                "assert pairs_sum_to_zero([-2, 2, -3, 3]) == True",
                "assert pairs_sum_to_zero([]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 755,
        "completion_tokens": 185
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert change_base(357, 10) == '357'",
                "assert change_base(318, 8) == '476'",
                "assert change_base(9, 2) == '1001'",
                "assert change_base(9, 3) == '100'",
                "assert change_base(9, 8) == '11'",
                "assert change_base(1, 2) == '1'",
                "assert change_base(10, 2) == '1010'",
                "assert change_base(10, 5) == '20'"
            ],
            "failed_tests": [
                "assert change_base(0, 2) == '0' (AssertionError: )",
                "assert change_base(255, 16) == 'ff' (AssertionError: )"
            ]
        },
        "prompt_tokens": 564,
        "completion_tokens": 136
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(10, 2) == 10.0",
                "assert triangle_area(0, 5) == 0",
                "assert triangle_area(7.5, 4) == 15.0",
                "assert triangle_area(8, 0) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 538,
        "completion_tokens": 77
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fib4(0) == 0",
                "assert fib4(1) == 0",
                "assert fib4(2) == 2",
                "assert fib4(3) == 0",
                "assert fib4(4) == 2",
                "assert fib4(5) == 4",
                "assert fib4(6) == 8",
                "assert fib4(7) == 14"
            ],
            "failed_tests": [
                "assert fib4(8) == 30 (AssertionError: )",
                "assert fib4(9) == 56 (AssertionError: )"
            ]
        },
        "prompt_tokens": 461,
        "completion_tokens": 104
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([3, 1, 2, 4, 5]) == 3",
                "assert median([1, 2, 3, 4, 5, 6]) == 3.5",
                "assert median([1]) == 1",
                "assert median([5, 3]) == 4.0"
            ],
            "failed_tests": [
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 573,
        "completion_tokens": 101
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('') == True",
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('aaaaa') == True",
                "assert is_palindrome('zbcd') == False",
                "assert is_palindrome('A man, a plan, a canal, Panama') == False",
                "assert is_palindrome('madam') == True",
                "assert is_palindrome('12321') == True",
                "assert is_palindrome('123abccba321') == True",
                "assert is_palindrome('no lemon, no melon') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 373,
        "completion_tokens": 132
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert modp(3, 11) == 8",
                "assert modp(100, 101) == 1",
                "assert modp(10, 1000) == 24",
                "assert modp(0, 7) == 1",
                "assert modp(2, 3) == 1"
            ],
            "failed_tests": [
                "assert modp(371, 167) == 82 (AssertionError: )",
                "assert modp(1024, 1023) == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 403,
        "completion_tokens": 98
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_shift('abc') == 'fgh'",
                "assert encode_shift('xyz') == 'cde'",
                "assert decode_shift('fgh') == 'abc'",
                "assert decode_shift('cde') == 'xyz'",
                "assert decode_shift(encode_shift('hello')) == 'hello'",
                "assert encode_shift('') == ''",
                "assert decode_shift('') == ''",
                "assert encode_shift('a') == 'f'",
                "assert decode_shift('f') == 'a'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 388,
        "completion_tokens": 95
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('') == ''",
                "assert remove_vowels('abcdef\\nghijklm') == 'bcdf\\nghjklm'",
                "assert remove_vowels('abcdef') == 'bcdf'",
                "assert remove_vowels('aaaaa') == ''",
                "assert remove_vowels('aaBAA') == 'B'",
                "assert remove_vowels('zbcd') == 'zbcd'",
                "assert remove_vowels('AEIOUaeiou') == ''",
                "assert remove_vowels('Python Programming') == 'Pythn Prgrmmng'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 638,
        "completion_tokens": 120
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 4, 10], 100) == True",
                "assert below_threshold([1, 20, 4, 10], 5) == False",
                "assert below_threshold([-1, 0, 3, 2], 4) == True",
                "assert below_threshold([10, 20, 30], 10) == False",
                "assert below_threshold([], 5) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 606,
        "completion_tokens": 113
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(319, 317) == 636",
                "assert add(0, 0) == 0",
                "assert add(-1, 1) == 0",
                "assert add(-5, -10) == -15"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 525,
        "completion_tokens": 52
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('a', 'a') == True",
                "assert same_chars('eabcd', 'dddddddabc') == False",
                "assert same_chars('dddddddabc', 'abcd') == True",
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
                "assert same_chars('abcd', 'dddddddabce') == False",
                "assert same_chars('', '') == True",
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False",
                "assert same_chars('abc', 'abcd') == False",
                "assert same_chars('abcd', 'dddddddabc') == True",
                "assert same_chars('xyz', 'zyxw') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 453,
        "completion_tokens": 163
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(0) == 0",
                "assert fib(1) == 1",
                "assert fib(2) == 1",
                "assert fib(3) == 2",
                "assert fib(5) == 5",
                "assert fib(10) == 55"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 534,
        "completion_tokens": 68
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"<\") == False",
                "assert correct_bracketing(\"<>\") == True",
                "assert correct_bracketing(\"<<><>>\") == True",
                "assert correct_bracketing(\"><<>\") == False",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"<<<>>>\") == True",
                "assert correct_bracketing(\"<<>>><\") == False",
                "assert correct_bracketing(\"><\") == False",
                "assert correct_bracketing(\"<<<<<>>>>>\") == True"
            ],
            "failed_tests": [
                "assert correct_bracketing(\"><><><><\") == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 398,
        "completion_tokens": 121
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 2, 4, 20]) == True",
                "assert monotonic([1, 20, 4, 10]) == False",
                "assert monotonic([4, 1, 0, -10]) == True",
                "assert monotonic([5, 5, 5, 5]) == True",
                "assert monotonic([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == True",
                "assert monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True",
                "assert monotonic([1]) == True",
                "assert monotonic([]) == True",
                "assert monotonic([3, 3, 2, 1, 0, -1, -2, -2]) == True",
                "assert monotonic([1, 2, 2, 3, 4, 4, 5, 6]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 402,
        "completion_tokens": 225
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]",
                "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]",
                "assert common([10, 20, 30], [40, 50, 60]) == []",
                "assert common([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]",
                "assert common([], [1, 2, 3]) == []",
                "assert common([1, 2, 3], []) == []",
                "assert common(['a', 'b', 'c'], ['c', 'd', 'e']) == ['c']",
                "assert common([1, 1, 1, 2, 2, 3], [1, 3, 3, 4, 4]) == [1, 3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 424,
        "completion_tokens": 249
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(100) == 5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 535,
        "completion_tokens": 54
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(30) == 465",
                "assert sum_to_n(100) == 5050",
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(10) == 55",
                "assert sum_to_n(1) == 1",
                "assert sum_to_n(0) == 0",
                "assert sum_to_n(2) == 3",
                "assert sum_to_n(3) == 6"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 591,
        "completion_tokens": 93
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing(\"(\") == False",
                "assert correct_bracketing(\"()\") == True",
                "assert correct_bracketing(\"(()())\") == True",
                "assert correct_bracketing(\")(()\") == False",
                "assert correct_bracketing(\"((((()))))\") == True",
                "assert correct_bracketing(\"(()(()))\") == True",
                "assert correct_bracketing(\"((())\") == False",
                "assert correct_bracketing(\"())(()\") == False",
                "assert correct_bracketing(\"\") == True",
                "assert correct_bracketing(\"()()()\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 383,
        "completion_tokens": 121
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]",
                "assert derivative([1, 2, 3]) == [2, 6]",
                "assert derivative([5]) == []",
                "assert derivative([0, 3]) == [3]",
                "assert derivative([2, 0, 3]) == [0, 6]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 410,
        "completion_tokens": 89
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(0) == 0",
                "assert fibfib(1) == 0",
                "assert fibfib(2) == 1",
                "assert fibfib(3) == 1",
                "assert fibfib(4) == 2",
                "assert fibfib(6) == 7",
                "assert fibfib(9) == 44",
                "assert fibfib(10) == 81"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 443,
        "completion_tokens": 84
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert vowels_count(\"hello\") == 2",
                "assert vowels_count(\"fly\") == 1",
                "assert vowels_count(\"AeIoU\") == 5",
                "assert vowels_count(\"AEIOUY\") == 6",
                "assert vowels_count(\"WORLD\") == 1",
                "assert vowels_count(\"Y\") == 1",
                "assert vowels_count(\"python\") == 1",
                "assert vowels_count(\"rhythm\") == 0"
            ],
            "failed_tests": [
                "assert vowels_count(\"\") == 0 (IndexError: string index out of range)",
                "assert vowels_count(\"quickly\") == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 416,
        "completion_tokens": 134
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(12345, 1) == \"51234\"",
                "assert circular_shift(12345, 2) == \"45123\"",
                "assert circular_shift(12345, 5) == \"12345\"",
                "assert circular_shift(12345, 6) == \"54321\"",
                "assert circular_shift(0, 1) == \"0\"",
                "assert circular_shift(348, 318) == \"843\"",
                "assert circular_shift(123, 0) == \"123\""
            ],
            "failed_tests": [
                "assert circular_shift(12345, 10) == \"12345\" (AssertionError: )",
                "assert circular_shift(348, 5) == \"348\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 555,
        "completion_tokens": 131
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert digitSum(\"\") == 0",
                "assert digitSum(\"abAB\") == 131",
                "assert digitSum(\"abcCd\") == 67",
                "assert digitSum(\"helloE\") == 69",
                "assert digitSum(\"woArBld\") == 131",
                "assert digitSum(\"aAaaaXa\") == 153",
                "assert digitSum(\"12345\") == 0",
                "assert digitSum(\"lowercase\") == 0"
            ],
            "failed_tests": [
                "assert digitSum(\"UPPERCASE\") == 581 (AssertionError: )",
                "assert digitSum(\"MixedUPPERlower\") == 379 (AssertionError: )"
            ]
        },
        "prompt_tokens": 410,
        "completion_tokens": 119
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8",
                "assert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2",
                "assert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95",
                "assert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19",
                "assert fruit_distribution(\"10 apples and 10 oranges\", 30) == 10",
                "assert fruit_distribution(\"3 apples and 2 oranges\", 10) == 5",
                "assert fruit_distribution(\"0 apples and 0 oranges\", 5) == 5",
                "assert fruit_distribution(\"1 apples and 1 oranges\", 4) == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 521,
        "completion_tokens": 148
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([4, 2, 3]) == [2, 1]",
                "assert pluck([1, 2, 3]) == [2, 1]",
                "assert pluck([]) == []",
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]",
                "assert pluck([1, 3, 5, 7]) == []",
                "assert pluck([2, 4, 6, 8]) == [2, 0]",
                "assert pluck([11, 22, 33, 44, 55, 2, 66, 77, 88, 99]) == [2, 5]",
                "assert pluck([10]) == [10, 0]",
                "assert pluck([9, 7, 5, 3, 1]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 893,
        "completion_tokens": 189
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert search([4, 1, 2, 2, 3, 1]) == 2",
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
                "assert search([5, 5, 4, 4, 4]) == -1",
                "assert search([1, 1, 1, 1]) == 1",
                "assert search([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 10",
                "assert search([1]) == 1",
                "assert search([2, 2]) == 2",
                "assert search([3, 3, 3]) == 3"
            ],
            "failed_tests": [
                "assert search([]) == -1 (ValueError: max() arg is an empty sequence)",
                "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 760,
        "completion_tokens": 216
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([]) == []",
                "assert strange_sort_list([10, 9, 8, 7, 6]) == [6, 10, 7, 9, 8]",
                "assert strange_sort_list([2, 2, 1, 3, 3]) == [1, 3, 2, 3, 2]",
                "assert strange_sort_list([-1, -2, -3, -4]) == [-4, -1, -3, -2]",
                "assert strange_sort_list([1]) == [1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 448,
        "completion_tokens": 180
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(3, 4, 5) == 6.00",
                "assert triangle_area(1, 2, 10) == -1",
                "assert triangle_area(6, 8, 10) == 24.00",
                "assert triangle_area(5, 5, 5) == 10.83",
                "assert triangle_area(0, 2, 3) == -1",
                "assert triangle_area(7, 10, 5) == 16.25",
                "assert triangle_area(2, 2, 3) == 1.98",
                "assert triangle_area(8, 15, 17) == 60.00",
                "assert triangle_area(3, 3, 5) == 4.15",
                "assert triangle_area(1, 1, 2) == -1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 401,
        "completion_tokens": 178
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([1, 2], 5) == False",
                "assert will_it_fly([3, 2, 3], 1) == False",
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([3], 5) == True",
                "assert will_it_fly([1, 2, 1], 4) == True",
                "assert will_it_fly([1, 2, 2, 1], 10) == True",
                "assert will_it_fly([5, 5, 5, 5], 20) == True",
                "assert will_it_fly([5, 5, 5, 5], 19) == False",
                "assert will_it_fly([1, 2, 3, 2, 1], 9) == True",
                "assert will_it_fly([1, 2, 3, 4, 5], 15) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 569,
        "completion_tokens": 216
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([1, 2, 3, 2, 1]) == 0",
                "assert smallest_change([]) == 0",
                "assert smallest_change([1]) == 0",
                "assert smallest_change([1, 1, 1, 1, 1]) == 0",
                "assert smallest_change([1, 2]) == 1",
                "assert smallest_change([9, 8, 7, 8, 9]) == 0",
                "assert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4"
            ],
            "failed_tests": [
                "assert smallest_change([1, 2, 1, 2, 1]) == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 504,
        "completion_tokens": 210
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match([], []) == []",
                "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']",
                "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']",
                "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']",
                "assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']",
                "assert total_match(['hello', 'world'], ['hello', 'world', 'python']) == ['hello', 'world']",
                "assert total_match(['short', 'list'], ['a', 'bit', 'longer', 'list']) == ['short', 'list']",
                "assert total_match(['equal', 'chars'], ['equal', 'chars']) == ['equal', 'chars']",
                "assert total_match(['one', 'two', 'three'], ['four', 'five']) == ['four', 'five']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 533,
        "completion_tokens": 219
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(2) == False",
                "assert is_multiply_prime(105) == True",
                "assert is_multiply_prime(77) == False",
                "assert is_multiply_prime(1) == False",
                "assert is_multiply_prime(97) == False"
            ],
            "failed_tests": [
                "assert is_multiply_prime(20) == False (AssertionError: )",
                "assert is_multiply_prime(60) == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 358,
        "completion_tokens": 135
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(8, 2) == True",
                "assert is_simple_power(27, 3) == True",
                "assert is_simple_power(81, 3) == True",
                "assert is_simple_power(3, 2) == False",
                "assert is_simple_power(64, 4) == True",
                "assert is_simple_power(3, 1) == False",
                "assert is_simple_power(5, 3) == False",
                "assert is_simple_power(10, 10) == True"
            ],
            "failed_tests": [
                "assert is_simple_power(100, 10) == False (AssertionError: )",
                "assert is_simple_power(16, 4) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 489,
        "completion_tokens": 160
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(-1) == True",
                "assert iscube(0) == True",
                "assert iscube(-8) == True",
                "assert iscube(2) == False",
                "assert iscube(1) == True",
                "assert iscube(-27) == True",
                "assert iscube(376) == False",
                "assert iscube(188) == False",
                "assert iscube(8) == True",
                "assert iscube(180) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 435,
        "completion_tokens": 139
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key(\"AB\") == 1",
                "assert hex_key(\"1077E\") == 2",
                "assert hex_key(\"ABED1A33\") == 4",
                "assert hex_key(\"123456789ABCDEF0\") == 6",
                "assert hex_key(\"2020\") == 2",
                "assert hex_key(\"\") == 0",
                "assert hex_key(\"FEDCBA9876543210\") == 6",
                "assert hex_key(\"A\") == 0",
                "assert hex_key(\"B\") == 1",
                "assert hex_key(\"2B5\") == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 598,
        "completion_tokens": 123
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(15) == \"db1111db\"",
                "assert decimal_to_binary(32) == \"db100000db\"",
                "assert decimal_to_binary(0) == \"db0db\"",
                "assert decimal_to_binary(1) == \"db1db\"",
                "assert decimal_to_binary(405) == \"db110010101db\"",
                "assert decimal_to_binary(345) == \"db101011001db\""
            ],
            "failed_tests": [
                "assert decimal_to_binary(5245102167129517) == \"db100110001010010111010000100001101000111100101db\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 649,
        "completion_tokens": 120
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy('a') == False",
                "assert is_happy('aa') == False",
                "assert is_happy('abcd') == True",
                "assert is_happy('aabb') == False",
                "assert is_happy('adb') == True",
                "assert is_happy('xyy') == False",
                "assert is_happy('abcdef') == True",
                "assert is_happy('abcabc') == True",
                "assert is_happy('ababab') == False",
                "assert is_happy('xyzxyz') == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 450,
        "completion_tokens": 110
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([4.0, 0.0]) == ['A+', 'E']"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([4.0, 3.7, 3.3, 3.0]) == ['A+', 'A', 'A-', 'B+'] (AssertionError: )",
                "assert numerical_letter_grade([2.7, 2.3, 2.0, 1.7]) == ['B', 'B-', 'C+', 'C'] (AssertionError: )",
                "assert numerical_letter_grade([1.3, 1.0, 0.7, 0.0]) == ['C-', 'D+', 'D', 'E'] (AssertionError: )",
                "assert numerical_letter_grade([3.8, 2.5, 1.4, 0.5]) == ['A', 'C', 'C-', 'D-'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 610,
        "completion_tokens": 175
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_length('Hello') == True",
                "assert prime_length('abcdcba') == True",
                "assert prime_length('kittens') == True",
                "assert prime_length('orange') == False",
                "assert prime_length('a') == False",
                "assert prime_length('') == False",
                "assert prime_length('programming') == True",
                "assert prime_length('algorithm') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 396,
        "completion_tokens": 78
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert starts_one_ends(1) == 2 (AssertionError: )",
                "assert starts_one_ends(2) == 20 (AssertionError: )",
                "assert starts_one_ends(3) == 300 (AssertionError: )",
                "assert starts_one_ends(4) == 4000 (AssertionError: )",
                "assert starts_one_ends(5) == 50000 (AssertionError: )"
            ]
        },
        "prompt_tokens": 341,
        "completion_tokens": 61
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solve(2) == '10'",
                "assert solve(0) == '0'",
                "assert solve(1) == '1'"
            ],
            "failed_tests": [
                "assert solve(399) == '1011' (AssertionError: )",
                "assert solve(155) == '1010' (AssertionError: )",
                "assert solve(1023) == '1111111111' (AssertionError: )",
                "assert solve(256) == '100000000' (AssertionError: )",
                "assert solve(511) == '111111111' (AssertionError: )"
            ]
        },
        "prompt_tokens": 422,
        "completion_tokens": 86
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2",
                "assert add([1, 3, 5, 7]) == 0",
                "assert add([0, 4, 2, 3, 6]) == 4"
            ],
            "failed_tests": [
                "assert add([10, 20, 30, 40, 50]) == 20 (AssertionError: )",
                "assert add([1, 2, 3, 4, 5, 6]) == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 336,
        "completion_tokens": 106
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('Hi') == 'Hi'",
                "assert anti_shuffle('hello') == 'ehllo'",
                "assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'",
                "assert anti_shuffle('123 456 789') == '123 456 789'",
                "assert anti_shuffle('') == ''",
                "assert anti_shuffle('A B C D E F G') == 'A B C D E F G'"
            ],
            "failed_tests": [
                "assert anti_shuffle('The quick brown fox') == 'The cikqu bnoor fox' (AssertionError: )",
                "assert anti_shuffle('jumps over the lazy dog') == 'jmpsu eo rv the alyz dog' (AssertionError: )",
                "assert anti_shuffle('Python 3.8') == 'Phnoty 3.8' (AssertionError: )"
            ]
        },
        "prompt_tokens": 441,
        "completion_tokens": 173
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
                "assert get_row([], 1) == []",
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]",
                "assert get_row([[7,8,9], [7,8,9,10,11,7], [12,13,14]], 7) == [(0, 0), (1, 5), (1, 0)]",
                "assert get_row([[4,4,4], [4], []], 4) == [(0, 2), (0, 1), (0, 0), (1, 0)]",
                "assert get_row([[1,2,3], [4,5,6], [7,8,9]], 10) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 639,
        "completion_tokens": 240
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([]) == []",
                "assert sort_array([5]) == [5]",
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]",
                "assert sort_array([1, 2]) == [1, 2]",
                "assert sort_array([10, 3, 5, 2, 4, 1]) == [1, 2, 3, 4, 5, 10]"
            ],
            "failed_tests": [
                "assert sort_array([2, 3]) == [3, 2] (AssertionError: )",
                "assert sort_array([1, 3, 5, 2, 4, 10]) == [10, 5, 4, 3, 2, 1] (AssertionError: )"
            ]
        },
        "prompt_tokens": 571,
        "completion_tokens": 351
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encrypt('z') == 'd'",
                "assert encrypt('123') == '123'",
                "assert encrypt('y') == 'c'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('') == ''",
                "assert encrypt('hi') == 'lm'",
                "assert encrypt('gf') == 'kj'",
                "assert encrypt('xyz') == 'bcd'",
                "assert encrypt('abc') == 'efg'"
            ],
            "failed_tests": [
                "assert encrypt('hello world!') == 'jgnnq yqtnf!' (AssertionError: )"
            ]
        },
        "prompt_tokens": 637,
        "completion_tokens": 117
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([1, 2, 3, 4, 5]) == 2",
                "assert next_smallest([5, 1, 4, 3, 2]) == 2",
                "assert next_smallest([]) == None",
                "assert next_smallest([1, 1]) == None",
                "assert next_smallest([2, 2, 3, 3, 4, 4]) == 3",
                "assert next_smallest([10]) == None",
                "assert next_smallest([-2, -1, 0, 1, 2]) == -1",
                "assert next_smallest([1, 3, 5, -1, -3]) == -1",
                "assert next_smallest([3, 3, 3]) == None"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 461,
        "completion_tokens": 170
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"Hello world\") == 0",
                "assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1",
                "assert is_bored(\"I am bored. I don't know what to do!\") == 2",
                "assert is_bored(\"Is it raining? I think I left my umbrella.\") == 1",
                "assert is_bored(\"\") == 0",
                "assert is_bored(\"Indeed, it's an interesting day. I wonder what I'll do.\") == 1"
            ],
            "failed_tests": [
                "assert is_bored(\"I'm not sure. I think I'm lost. I need help!\") == 3 (AssertionError: )",
                "assert is_bored(\"I. I? I!\") == 3 (AssertionError: )"
            ]
        },
        "prompt_tokens": 401,
        "completion_tokens": 153
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert any_int(5, 2, 7) == True",
                "assert any_int(3.6, -2.2, 2) == False",
                "assert any_int(0, 10, -10) == True",
                "assert any_int(2, 2.5, 4.5) == False",
                "assert any_int(3, -2, 1) == True",
                "assert any_int(1000000, 500000, 1500000) == True",
                "assert any_int(0, 5, 5) == True",
                "assert any_int(0, 0, 0) == True",
                "assert any_int(1, 1, 3) == False"
            ],
            "failed_tests": [
                "assert any_int(-1, -2, -3) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 479,
        "completion_tokens": 299
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'",
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'"
            ],
            "failed_tests": [
                "assert encode('HELLO') == 'hCJJM' (AssertionError: )",
                "assert encode('Python Programming') == 'pYTHQN prQGRcMMKNG' (AssertionError: )",
                "assert encode('a') == 'c' (AssertionError: )",
                "assert encode('AEIOU') == 'CGKQM' (AssertionError: )"
            ]
        },
        "prompt_tokens": 401,
        "completion_tokens": 89
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
                "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
                "assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13",
                "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11",
                "assert skjkasdkd([0,81,12,3,1,21]) == 3",
                "assert skjkasdkd([0,8,1,2,1,7]) == 7"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 700,
        "completion_tokens": 238
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True",
                "assert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False",
                "assert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False",
                "assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False",
                "assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}) == True",
                "assert check_dict_case({}) == False",
                "assert check_dict_case({\"123\":\"numbers\", \"456\":\"are\", \"789\":\"keys\"}) == False",
                "assert check_dict_case({\"ALLUPPER\":\"YES\", \"STILLUPPER\":\"YES\"}) == True",
                "assert check_dict_case({\"alllower\":\"yes\", \"stilllower\":\"yes\"}) == True",
                "assert check_dict_case({\"Mixed\":\"No\", \"case\":\"No\"}) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 555,
        "completion_tokens": 194
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(5) == [2, 3]",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(0) == []",
                "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(1) == []",
                "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]",
                "assert count_up_to(2) == []",
                "assert count_up_to(3) == [2]",
                "assert count_up_to(29) == [2, 3, 5, 7, 11, 13, 17, 19, 23]",
                "assert count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 680,
        "completion_tokens": 255
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert multiply(364, 178) == 32",
                "assert multiply(0, 178) == 0",
                "assert multiply(364, 0) == 0",
                "assert multiply(0, 0) == 0",
                "assert multiply(365, 179) == 45"
            ],
            "failed_tests": [
                "assert multiply(-364, 178) == 32 (AssertionError: )",
                "assert multiply(364, -178) == 32 (AssertionError: )",
                "assert multiply(-364, -178) == 32 (AssertionError: )"
            ]
        },
        "prompt_tokens": 409,
        "completion_tokens": 198
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_upper('aBCdEf') == 1",
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('dBBE') == 0",
                "assert count_upper('AeIoU') == 3",
                "assert count_upper('') == 0",
                "assert count_upper('AEIOUaeiou') == 3",
                "assert count_upper('bAcEgIkMoQu') == 0"
            ],
            "failed_tests": [
                "assert count_upper('123AeI') == 1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 381,
        "completion_tokens": 105
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert closest_integer(\"-99.99\") == -100",
                "assert closest_integer(\"2.718\") == 3",
                "assert closest_integer(\"14.5\") == 15",
                "assert closest_integer(\"-2.718\") == -3",
                "assert closest_integer(\"10\") == 10",
                "assert closest_integer(\"168\") == 168",
                "assert closest_integer(\"-0.5\") == -1",
                "assert closest_integer(\"99.99\") == 100",
                "assert closest_integer(\"0.5\") == 1",
                "assert closest_integer(\"4.33320426940918\") == 4"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 462,
        "completion_tokens": 158
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(2) == [2, 4]",
                "assert make_a_pile(3) == [3, 5, 7]",
                "assert make_a_pile(4) == [4, 6, 8, 10]",
                "assert make_a_pile(5) == [5, 7, 9, 11, 13]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 603,
        "completion_tokens": 94
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]",
                "assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]",
                "assert words_string(\"apple,banana, cherry , date\") == [\"apple\", \"banana\", \"cherry\", \"date\"]",
                "assert words_string(\"\") == []",
                "assert words_string(\"No,spaces,here\") == [\"No\", \"spaces\", \"here\"]",
                "assert words_string(\"Spaces    and,commas,   mixed\") == [\"Spaces\", \"and\", \"commas\", \"mixed\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 443,
        "completion_tokens": 146
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(12, 15) == 14",
                "assert choose_num(13, 12) == -1",
                "assert choose_num(2, 8) == 8",
                "assert choose_num(5, 5) == -1",
                "assert choose_num(4, 4) == 4",
                "assert choose_num(1, 3) == 2",
                "assert choose_num(10, 20) == 20",
                "assert choose_num(21, 29) == 28",
                "assert choose_num(100, 102) == 102",
                "assert choose_num(99, 100) == 100"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 396,
        "completion_tokens": 134
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(1, 5) == \"0b11\"",
                "assert rounded_avg(7, 5) == -1",
                "assert rounded_avg(10, 20) == \"0b1111\"",
                "assert rounded_avg(20, 33) == \"0b11010\"",
                "assert rounded_avg(5, 5) == \"0b101\"",
                "assert rounded_avg(0, 0) == \"0b0\"",
                "assert rounded_avg(2, 3) == \"0b10\"",
                "assert rounded_avg(8, 4) == -1"
            ],
            "failed_tests": [
                "assert rounded_avg(100, 102) == \"0b110011\" (AssertionError: )",
                "assert rounded_avg(50, 55) == \"0b110010\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 467,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([152, 323, 1422, 10]) == []",
                "assert unique_digits([111, 222, 333, 444]) == [111, 333]",
                "assert unique_digits([]) == []"
            ],
            "failed_tests": [
                "assert unique_digits([123, 456, 789, 135]) == [135, 789] (AssertionError: )"
            ]
        },
        "prompt_tokens": 407,
        "completion_tokens": 99
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']",
                "assert by_length([]) == []",
                "assert by_length([1, -1, 55]) == ['One']",
                "assert by_length([9, 7, 3, 6]) == ['Nine', 'Seven', 'Six', 'Three']",
                "assert by_length([10, 0, -5, 3, 2, 1]) == ['Three', 'Two', 'One']",
                "assert by_length([4, 4, 4]) == ['Four', 'Four', 'Four']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 613,
        "completion_tokens": 160
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(1) == [1]",
                "assert f(5) == [1, 2, 6, 24, 15]",
                "assert f(0) == []",
                "assert f(3) == [1, 2, 6]",
                "assert f(4) == [1, 2, 6, 24]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 430,
        "completion_tokens": 74
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(3) == (1, 2)",
                "assert even_odd_palindrome(12) == (4, 6)",
                "assert even_odd_palindrome(1) == (0, 1)",
                "assert even_odd_palindrome(2) == (1, 1)"
            ],
            "failed_tests": [
                "assert even_odd_palindrome(100) == (18, 68) (AssertionError: )",
                "assert even_odd_palindrome(50) == (12, 31) (AssertionError: )",
                "assert even_odd_palindrome(22) == (9, 10) (AssertionError: )",
                "assert even_odd_palindrome(1000) == (36, 199) (AssertionError: )"
            ]
        },
        "prompt_tokens": 520,
        "completion_tokens": 125
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert count_nums([]) == 0",
                "assert count_nums([-1, 11, -11]) == 1",
                "assert count_nums([1, 1, 2]) == 3",
                "assert count_nums([-1, -2, -3]) == 0",
                "assert count_nums([10, -101, 123, 0]) == 2",
                "assert count_nums([-10, -20, -30, 1]) == 1",
                "assert count_nums([0, 0, 0]) == 0"
            ],
            "failed_tests": [
                "assert count_nums([9, 18, 27, -36, 45]) == 4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 681,
        "completion_tokens": 137
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([3, 4, 5, 1, 2]) == True",
                "assert move_one_ball([3, 5, 4, 1, 2]) == False",
                "assert move_one_ball([]) == True",
                "assert move_one_ball([1, 2, 3, 4, 5]) == True",
                "assert move_one_ball([5, 1, 2, 3, 4]) == True",
                "assert move_one_ball([2, 3, 4, 5, 1]) == True",
                "assert move_one_ball([1]) == True",
                "assert move_one_ball([5, 4, 3, 2, 1]) == False",
                "assert move_one_ball([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == True"
            ],
            "failed_tests": [
                "assert move_one_ball([2, 1]) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 608,
        "completion_tokens": 205
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"",
                "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"",
                "assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"YES\"",
                "assert exchange([1, 3, 5, 7], [2, 4, 6, 8]) == \"YES\"",
                "assert exchange([1, 3, 5], [2, 4, 6, 8]) == \"YES\"",
                "assert exchange([1, 3, 5, 7], [9, 11, 13]) == \"NO\"",
                "assert exchange([2, 4, 6], [1, 3, 5]) == \"YES\"",
                "assert exchange([1], [2]) == \"YES\"",
                "assert exchange([1], [1]) == \"NO\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 523,
        "completion_tokens": 226
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('a b b a') == {'a': 2, 'b': 2}",
                "assert histogram('a b c a b') == {'a': 2, 'b': 2}",
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('') == {}",
                "assert histogram('c c c c c') == {'c': 5}",
                "assert histogram('a b c d e f g h i j k l m n o p q r s t u v w x y z') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1, 'm': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}",
                "assert histogram('x y z x y z x y z') == {'x': 3, 'y': 3, 'z': 3}"
            ],
            "failed_tests": [
                "assert histogram('p q r s p q r s p q r s p') == {'p': 4, 'q': 3, 'r': 3, 's': 3} (AssertionError: )"
            ]
        },
        "prompt_tokens": 495,
        "completion_tokens": 372
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete(\"abcde\", \"ae\") == ('bcd', False)",
                "assert reverse_delete(\"abcdef\", \"b\") == ('acdef', False)",
                "assert reverse_delete(\"abcdedcba\", \"ab\") == ('cdedc', True)",
                "assert reverse_delete(\"racecar\", \"r\") == ('aceca', True)",
                "assert reverse_delete(\"hello\", \"l\") == ('heo', False)",
                "assert reverse_delete(\"a\", \"a\") == ('', True)",
                "assert reverse_delete(\"abba\", \"b\") == ('aa', True)",
                "assert reverse_delete(\"\", \"a\") == ('', True)",
                "assert reverse_delete(\"noon\", \"x\") == ('noon', True)"
            ],
            "failed_tests": [
                "assert reverse_delete(\"madamimadam\", \"im\") == ('madadam', True) (AssertionError: )"
            ]
        },
        "prompt_tokens": 487,
        "completion_tokens": 164
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
                "assert odd_count(['3', '11111111']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]",
                "assert odd_count(['2468']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]",
                "assert odd_count(['13579', '02468', '12345']) == [\"the number of odd elements 5n the str5ng 5 of the 5nput.\", \"the number of odd elements 0n the str0ng 0 of the 0nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 532,
        "completion_tokens": 231
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([-1, -2, -3]) == -6",
                "assert minSubArraySum([1, 2, 3, 4, 5]) == 1",
                "assert minSubArraySum([-1, 4, -2, 3, -4]) == -4",
                "assert minSubArraySum([0, -1, -2, -3, 0]) == -6",
                "assert minSubArraySum([10]) == 10",
                "assert minSubArraySum([-5, -1, -8, -9]) == -23"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 397,
        "completion_tokens": 154
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6",
                "assert max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5",
                "assert max_fill([[0, 0, 0], [0, 0, 0]], 5) == 0",
                "assert max_fill([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 3) == 3",
                "assert max_fill([[1]], 1) == 1",
                "assert max_fill([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 10) == 1",
                "assert max_fill([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 5) == 2",
                "assert max_fill([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 1) == 0",
                "assert max_fill([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 4) == 4"
            ],
            "failed_tests": [
                "assert max_fill([[1, 1, 0], [0, 1, 1], [1, 0, 1]], 2) == 4 (AssertionError: )"
            ]
        },
        "prompt_tokens": 694,
        "completion_tokens": 407
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_array([10, 6, 11, 4, 7]) == [4, 6, 10, 7, 11]",
                "assert sort_array([0, 0, 0]) == [0, 0, 0]",
                "assert sort_array([]) == []"
            ],
            "failed_tests": [
                "assert sort_array([15, 7, 3, 9]) == [3, 7, 9, 15] (AssertionError: )"
            ]
        },
        "prompt_tokens": 529,
        "completion_tokens": 134
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]",
                "assert select_words(\"simple white space\", 2) == []",
                "assert select_words(\"Hello world\", 4) == [\"world\"]",
                "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]",
                "assert select_words(\"\", 2) == []",
                "assert select_words(\"a e i o u\", 1) == []",
                "assert select_words(\"b c d f g\", 1) == [\"b\", \"c\", \"d\", \"f\", \"g\"]",
                "assert select_words(\"This is a test\", 0) == [\"a\"]"
            ],
            "failed_tests": [
                "assert select_words(\"Another example here\", 5) == [\"Another\"] (AssertionError: )",
                "assert select_words(\"No consonants\", 0) == [\"o\", \"a\", \"o\", \"a\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 497,
        "completion_tokens": 172
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel(\"yogurt\") == \"u\"",
                "assert get_closest_vowel(\"FULL\") == \"U\"",
                "assert get_closest_vowel(\"quick\") == \"\"",
                "assert get_closest_vowel(\"ab\") == \"\"",
                "assert get_closest_vowel(\"Rhythm\") == \"\"",
                "assert get_closest_vowel(\"bAck\") == \"A\"",
                "assert get_closest_vowel(\"STR\") == \"\""
            ],
            "failed_tests": [
                "assert get_closest_vowel(\"programming\") == \"a\" (AssertionError: )",
                "assert get_closest_vowel(\"encyclopedia\") == \"o\" (AssertionError: )",
                "assert get_closest_vowel(\"Street\") == \"e\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 478,
        "completion_tokens": 132
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['()(', ')']) == 'Yes'",
                "assert match_parens([')', ')']) == 'No'",
                "assert match_parens(['(', '(']) == 'No'",
                "assert match_parens(['()', '()']) == 'Yes'",
                "assert match_parens(['(()', '())']) == 'Yes'",
                "assert match_parens([')(', '']) == 'No'",
                "assert match_parens(['', '']) == 'Yes'",
                "assert match_parens(['(()', '())()']) == 'Yes'"
            ],
            "failed_tests": [
                "assert match_parens(['(()(', '))']) == 'No' (AssertionError: )"
            ]
        },
        "prompt_tokens": 448,
        "completion_tokens": 131
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
                "assert maximum([4, -4, 4], 2) == [4, 4]",
                "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]",
                "assert maximum([1, 2, 3, 4, 5], 0) == []",
                "assert maximum([], 0) == []",
                "assert maximum([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == [6, 7, 8, 9, 10]",
                "assert maximum([-1, -2, -3, -4, -5], 3) == [-3, -2, -1]",
                "assert maximum([100], 1) == [100]",
                "assert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
                "assert maximum([5, 5, 5, 5], 2) == [5, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 549,
        "completion_tokens": 292
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9",
                "assert solution([30, 13, 24, 321]) == 0",
                "assert solution([1, 2, 3, 4, 5, 6, 7, 8]) == 16",
                "assert solution([2, 4, 6, 8, 10]) == 0",
                "assert solution([]) == 0"
            ],
            "failed_tests": [
                "assert solution([11, 22, 33, 44, 55]) == 44 (AssertionError: )"
            ]
        },
        "prompt_tokens": 625,
        "completion_tokens": 141
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
                "assert add_elements([10, 20, 30, 40], 2) == 30",
                "assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 45",
                "assert add_elements([123, 456, 78, 90, 12], 5) == 180",
                "assert add_elements([99, 100, 101, 102], 4) == 99"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 701,
        "completion_tokens": 148
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(1) == [1]",
                "assert get_odd_collatz(2) == [1]",
                "assert get_odd_collatz(6) == [1, 3, 5]"
            ],
            "failed_tests": [
                "assert get_odd_collatz(3) == [1, 3, 5, 7, 11] (AssertionError: )",
                "assert get_odd_collatz(7) == [1, 3, 5, 7, 11, 21, 85] (AssertionError: )",
                "assert get_odd_collatz(10) == [1, 3, 5, 7, 11, 13, 21, 27] (AssertionError: )",
                "assert get_odd_collatz(497) == [1, 3, 5, 7, 11, 13, 21, 27, 31, 37, 43, 53, 63, 85, 107, 127, 149, 181, 213, 255, 341, 427, 511, 639, 853, 1069, 1285, 1707, 2561, 3841, 5121, 6829, 10243, 15365, 20485, 27307, 40961, 54613, 81921, 109227, 163843, 245765, 491531] (AssertionError: )",
                "assert get_odd_collatz(186) == [1, 3, 5, 7, 11, 13, 21, 27, 31, 37, 43, 53, 63, 85, 107, 127, 149, 181, 213, 255, 341, 427, 511, 639, 853, 1069, 1285, 1707, 2561, 3841, 5121, 6829, 10243, 15365, 20485, 27307, 40961, 54613, 81921, 109227, 163843, 245765, 491531] (AssertionError: )",
                "assert get_odd_collatz(6.376023054122925) == \"Invalid input\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 547,
        "completion_tokens": 464
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert valid_date('06-04-2020') == True",
                "assert valid_date('06/04/2020') == False",
                "assert valid_date('15-01-2012') == False",
                "assert valid_date('11-31-2020') == False",
                "assert valid_date('04-31-2021') == False",
                "assert valid_date('04-0-2040') == False",
                "assert valid_date('00-01-2020') == False",
                "assert valid_date('13-01-2020') == False",
                "assert valid_date('') == False"
            ],
            "failed_tests": [
                "assert valid_date('02-29-2021') == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 599,
        "completion_tokens": 279
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]",
                "assert split_words(\"abcdef\") == 3",
                "assert split_words(\"no,spaces,here\") == [\"no\", \"spaces\", \"here\"]",
                "assert split_words(\"a,b,c,d,e,f,g,h\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]"
            ],
            "failed_tests": [
                "assert split_words(\"justonelongword\") == 0 (AssertionError: )",
                "assert split_words(\" \") == [\"\"] (AssertionError: )",
                "assert split_words(\",\") == [\"\", \"\"] (AssertionError: )",
                "assert split_words(\"oddletters\") == 5 (AssertionError: )"
            ]
        },
        "prompt_tokens": 448,
        "completion_tokens": 146
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([1, 3, 2, 4, 5]) == False",
                "assert is_sorted([1, 2, 3, 4, 5]) == True",
                "assert is_sorted([1, 2, 3, 4, 5, 6]) == True",
                "assert is_sorted([1, 2, 2, 3, 3, 4]) == True",
                "assert is_sorted([1, 2, 3, 4, 4, 5]) == True",
                "assert is_sorted([2, 2]) == True",
                "assert is_sorted([11, 10, 9, 8, 7]) == False",
                "assert is_sorted([5]) == True",
                "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False",
                "assert is_sorted([1, 2, 2, 2, 3, 4]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 711,
        "completion_tokens": 306
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert intersection((1, 3), (4, 6)) == \"NO\"",
                "assert intersection((10, 15), (14, 20)) == \"NO\"",
                "assert intersection((-1, 1), (0, 4)) == \"NO\"",
                "assert intersection((-3, -1), (-5, 5)) == \"YES\"",
                "assert intersection((1, 2), (2, 3)) == \"NO\"",
                "assert intersection((2, 3), (5, 7)) == \"NO\"",
                "assert intersection((100, 103), (101, 104)) == \"YES\""
            ],
            "failed_tests": [
                "assert intersection((-10, -5), (-7, -3)) == \"NO\" (AssertionError: )",
                "assert intersection((6, 11), (10, 15)) == \"YES\" (AssertionError: )",
                "assert intersection((3, 5), (1, 4)) == \"YES\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 588,
        "completion_tokens": 238
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([1, 2, 2, -4]) == -9",
                "assert prod_signs([0, 1]) == 0",
                "assert prod_signs([]) == None",
                "assert prod_signs([0, 0, 0]) == 0",
                "assert prod_signs([1, 2, 3, 4, 5]) == 15",
                "assert prod_signs([-1, 0, 1]) == 0"
            ],
            "failed_tests": [
                "assert prod_signs([-1, -2, -3, -4, -5]) == 120 (AssertionError: )",
                "assert prod_signs([1, -1, 1, -1, 1]) == -5 (AssertionError: )"
            ]
        },
        "prompt_tokens": 713,
        "completion_tokens": 150
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1,2,3], [4,5,6], [7,8,9]], 3) == [1, 2, 1]",
                "assert minPath([[5,9,3], [4,1,6], [7,8,2]], 1) == [1]",
                "assert minPath([[10, 15, 20], [5, 8, 2], [1, 3, 7]], 4) == [1, 3, 1, 3]",
                "assert minPath([[3, 4], [2, 1]], 2) == [1, 2]",
                "assert minPath([[1, 100], [50, 60]], 5) == [1, 50, 1, 50, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 712,
        "completion_tokens": 177
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert tri(3) == [1, 3, 2, 8]",
                "assert tri(0) == [1]",
                "assert tri(2) == [1, 3, 2]"
            ],
            "failed_tests": [
                "assert tri(5) == [1, 3, 2, 8, 3, 16] (AssertionError: )"
            ]
        },
        "prompt_tokens": 546,
        "completion_tokens": 70
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert digits(1) == 1",
                "assert digits(4) == 0",
                "assert digits(235) == 15",
                "assert digits(2222) == 0",
                "assert digits(13579) == 945",
                "assert digits(2468) == 0",
                "assert digits(123456789) == 945",
                "assert digits(111) == 1",
                "assert digits(0) == 0"
            ],
            "failed_tests": [
                "assert digits(567) == 105 (AssertionError: )"
            ]
        },
        "prompt_tokens": 353,
        "completion_tokens": 99
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[[[]') == False",
                "assert is_nested('[[]]') == True",
                "assert is_nested('[[[[]]][[]]]') == True",
                "assert is_nested('[[][]]') == True",
                "assert is_nested('[[]][[') == True",
                "assert is_nested('[]') == False",
                "assert is_nested(']][][[') == False",
                "assert is_nested('') == False",
                "assert is_nested('[]]]]]]][[[[[]') == False",
                "assert is_nested('[][]') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 418,
        "completion_tokens": 124
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 14",
                "assert sum_squares([1, 4, 9]) == 98",
                "assert sum_squares([1, 3, 5, 7]) == 84",
                "assert sum_squares([1.4, 4.2, 0]) == 29",
                "assert sum_squares([-2.4, 1, 1]) == 6",
                "assert sum_squares([-1, -2, -3]) == 14",
                "assert sum_squares([]) == 0",
                "assert sum_squares([0, 0, 0]) == 0"
            ],
            "failed_tests": [
                "assert sum_squares([423, 188, 3]) == 202578 (AssertionError: )",
                "assert sum_squares([423, 188, 3.3257384300231934]) == 202578 (AssertionError: )"
            ]
        },
        "prompt_tokens": 477,
        "completion_tokens": 242
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter(\"apple pie\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e\") == True",
                "assert check_if_last_char_is_a_letter(\"\") == False",
                "assert check_if_last_char_is_a_letter(\"apple pi e \") == False",
                "assert check_if_last_char_is_a_letter(\"banana!\") == False",
                "assert check_if_last_char_is_a_letter(\"hello world a\") == True",
                "assert check_if_last_char_is_a_letter(\"12345 a\") == True",
                "assert check_if_last_char_is_a_letter(\"12345\") == False",
                "assert check_if_last_char_is_a_letter(\"a \") == False",
                "assert check_if_last_char_is_a_letter(\" a\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 456,
        "completion_tokens": 152
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1, 2, 4, 3, 5]) == 3",
                "assert can_arrange([1, 2, 3]) == -1",
                "assert can_arrange([5, 4, 3, 2, 1]) == 4",
                "assert can_arrange([10, 20, 30, 25, 40]) == 3",
                "assert can_arrange([]) == -1",
                "assert can_arrange([1]) == -1",
                "assert can_arrange([2, 1]) == 1",
                "assert can_arrange([1, 3, 5, 7, 6, 8]) == 4"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 398,
        "completion_tokens": 151
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([0]) == (None, None)",
                "assert largest_smallest_integers([-1, -2, -3, -4]) == (-1, None)",
                "assert largest_smallest_integers([-5, 0, 5, 10]) == (-5, 5)",
                "assert largest_smallest_integers([-2, -1, 0, 1, 2]) == (-1, 1)",
                "assert largest_smallest_integers([1]) == (None, 1)",
                "assert largest_smallest_integers([-1]) == (-1, None)",
                "assert largest_smallest_integers([0, 0, 0]) == (None, None)",
                "assert largest_smallest_integers([-10, -20, 30, 40, 0]) == (-10, 30)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 463,
        "completion_tokens": 221
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(1, 2.5) == 2.5",
                "assert compare_one(1, '2,3') == '2,3'",
                "assert compare_one('5,1', '6') == '6'",
                "assert compare_one('1', 1) == None",
                "assert compare_one(3.5, 3.5) == None",
                "assert compare_one('3,3', 3.3) == None",
                "assert compare_one(4.5, '4,6') == '4,6'",
                "assert compare_one('7,1', 7.2) == 7.2",
                "assert compare_one('0', 0) == None",
                "assert compare_one(0.1, '0,2') == '0,2'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 464,
        "completion_tokens": 166
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(10) == True",
                "assert is_equal_to_sum_even(12) == True",
                "assert is_equal_to_sum_even(14) == True",
                "assert is_equal_to_sum_even(2) == False",
                "assert is_equal_to_sum_even(16) == True",
                "assert is_equal_to_sum_even(20) == True",
                "assert is_equal_to_sum_even(22) == True",
                "assert is_equal_to_sum_even(0) == False",
                "assert is_equal_to_sum_even(1) == False",
                "assert is_equal_to_sum_even(3) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 367,
        "completion_tokens": 124
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(4) == 288",
                "assert special_factorial(1) == 1",
                "assert special_factorial(0) == 1",
                "assert special_factorial(3) == 12",
                "assert special_factorial(5) == 34560"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 373,
        "completion_tokens": 60
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces(\" Example 2\") == \"_Example_2\"",
                "assert fix_spaces(\"Example    4\") == \"Example-4\"",
                "assert fix_spaces(\"Example 7  \") == \"Example_7_\"",
                "assert fix_spaces(\" Example   3\") == \"_Example-3\"",
                "assert fix_spaces(\"Example 1\") == \"Example_1\"",
                "assert fix_spaces(\"    \") == \"-\"",
                "assert fix_spaces(\"Example\") == \"Example\"",
                "assert fix_spaces(\"   \") == \"-\""
            ],
            "failed_tests": [
                "assert fix_spaces(\"  \") == \"-\" (AssertionError: )",
                "assert fix_spaces(\"  Example 5\") == \"_Example_5\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 443,
        "completion_tokens": 142
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert file_name_check(\"valid123WithNumbers.txt\") == 'Yes'",
                "assert file_name_check(\"2manyNumbers1234.txt\") == 'No'",
                "assert file_name_check(\"empty_extension.\") == 'No'",
                "assert file_name_check(\".noName.txt\") == 'No'",
                "assert file_name_check(\"good_file.exe\") == 'Yes'",
                "assert file_name_check(\"file.with.more.than.3.digits123.txt\") == 'No'",
                "assert file_name_check(\"AnotherGoodOne.dll\") == 'Yes'",
                "assert file_name_check(\"example.txt\") == 'Yes'"
            ],
            "failed_tests": [
                "assert file_name_check(\"invalid_extension.exe\") == 'No' (AssertionError: )",
                "assert file_name_check(\"StartsWithDigit9file.txt\") == 'No' (AssertionError: )"
            ]
        },
        "prompt_tokens": 561,
        "completion_tokens": 215
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 6",
                "assert sum_squares([]) == 0",
                "assert sum_squares([-1, -5, 2, -1, -5]) == -126",
                "assert sum_squares([0, 0, 0, 0, 0]) == 0"
            ],
            "failed_tests": [
                "assert sum_squares([4, 5, 6, 7, 8, 9, 10]) == 1393 (AssertionError: )",
                "assert sum_squares([-2, 3, -4, 5, -6, 7, -8]) == -574 (AssertionError: )",
                "assert sum_squares([2]) == 2 (AssertionError: )",
                "assert sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3026 (AssertionError: )"
            ]
        },
        "prompt_tokens": 488,
        "completion_tokens": 186
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence(\"This is a test\") == \"is\"",
                "assert words_in_sentence(\"lets go for swimming\") == \"go for\""
            ],
            "failed_tests": [
                "assert words_in_sentence(\"prime numbers are special\") == \"prime are\" (AssertionError: )",
                "assert words_in_sentence(\"one two three four five six\") == \"two three five\" (AssertionError: )",
                "assert words_in_sentence(\"a an the\") == \"\" (AssertionError: )",
                "assert words_in_sentence(\"math is fun with primes\") == \"is with\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 451,
        "completion_tokens": 93
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert simplify(\"3/4\", \"4/3\") == True",
                "assert simplify(\"1/6\", \"2/1\") == False",
                "assert simplify(\"10/1\", \"1/10\") == True",
                "assert simplify(\"7/10\", \"10/2\") == False",
                "assert simplify(\"100/25\", \"25/100\") == True",
                "assert simplify(\"2/3\", \"3/2\") == True",
                "assert simplify(\"1/100\", \"100/1\") == True",
                "assert simplify(\"12/7\", \"7/12\") == True",
                "assert simplify(\"9/8\", \"8/9\") == True",
                "assert simplify(\"1/5\", \"5/1\") == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 443,
        "completion_tokens": 184
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]",
                "assert order_by_points([]) == []"
            ],
            "failed_tests": [
                "assert order_by_points([56, 65, 654, 456]) == [56, 65, 456, 654] (AssertionError: )",
                "assert order_by_points([123, 321, 213]) == [123, 213, 321] (AssertionError: )",
                "assert order_by_points([-12, -21, -111, -202]) == [-111, -12, -21, -202] (AssertionError: )"
            ]
        },
        "prompt_tokens": 427,
        "completion_tokens": 177
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2",
                "assert specialFilter([10, 22, 34, 46, 58]) == 0",
                "assert specialFilter([]) == 0",
                "assert specialFilter([13, 37, 71, 19, -111]) == 4",
                "assert specialFilter([-11, -33, -55, -77, -99]) == 0"
            ],
            "failed_tests": [
                "assert specialFilter([11, 23, 35, 47, 59]) == 5 (AssertionError: )"
            ]
        },
        "prompt_tokens": 671,
        "completion_tokens": 145
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(5) == 1",
                "assert get_max_triples(3) == 0",
                "assert get_max_triples(6) == 4",
                "assert get_max_triples(1) == 0"
            ],
            "failed_tests": [
                "assert get_max_triples(10) == 19 (AssertionError: )"
            ]
        },
        "prompt_tokens": 442,
        "completion_tokens": 64
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")",
                "assert bf(\"Earth\", \"Mercury\") == (\"Venus\",)",
                "assert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
                "assert bf(\"Venus\", \"Saturn\") == (\"Earth\", \"Mars\", \"Jupiter\")",
                "assert bf(\"Sun\", \"Mars\") == ()",
                "assert bf(\"Earth\", \"Pluto\") == ()",
                "assert bf(\"Mars\", \"Jupiter\") == ()",
                "assert bf(\"Saturn\", \"Jupiter\") == ()",
                "assert bf(\"Uranus\", \"Neptune\") == ()"
            ],
            "failed_tests": [
                "assert bf(\"Neptune\", \"Mercury\") == () (AssertionError: )"
            ]
        },
        "prompt_tokens": 539,
        "completion_tokens": 163
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([\"table\", \"chair\", \"spoon\", \"plate\", \"fork\"]) == [\"fork\"]",
                "assert sorted_list_sum([\"odd\", \"even\", \"odd\", \"even\"]) == [\"even\", \"even\"]",
                "assert sorted_list_sum([]) == []"
            ],
            "failed_tests": [
                "assert sorted_list_sum([\"apple\", \"pear\", \"banana\", \"kiwi\"]) == [\"kiwi\", \"pear\"] (AssertionError: )",
                "assert sorted_list_sum([\"dog\", \"wolf\", \"cat\", \"mouse\", \"frog\"]) == [\"cat\", \"dog\", \"frog\"] (AssertionError: )",
                "assert sorted_list_sum([\"a\", \"bb\", \"ccc\", \"dddd\"]) == [\"bb\"] (AssertionError: )",
                "assert sorted_list_sum([\"hello\", \"world\", \"python\", \"code\"]) == [\"code\"] (AssertionError: )",
                "assert sorted_list_sum([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"six\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 488,
        "completion_tokens": 179
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(7, 34, 12) == 34",
                "assert x_or_y(15, 8, 5) == 5",
                "assert x_or_y(2, 100, 200) == 100",
                "assert x_or_y(352, 10, 20) == 20",
                "assert x_or_y(327, 50, 60) == 60",
                "assert x_or_y(13, 7, 14) == 7",
                "assert x_or_y(1, 3, 4) == 4",
                "assert x_or_y(6, 9, 2) == 2"
            ],
            "failed_tests": [
                "assert x_or_y(6.420433282852173, 30, 40) == 40 (TypeError: 'float' object cannot be interpreted as an integer)"
            ]
        },
        "prompt_tokens": 568,
        "completion_tokens": 244
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([1, 3, 2, 0]) == 10",
                "assert double_the_difference([-1, -2, 0]) == 0",
                "assert double_the_difference([9, -2]) == 81",
                "assert double_the_difference([0]) == 0",
                "assert double_the_difference([]) == 0",
                "assert double_the_difference([4, 5, 6]) == 25",
                "assert double_the_difference([1.5, 2, 3]) == 9",
                "assert double_the_difference([-3, -5, 7, 8]) == 49",
                "assert double_the_difference([0, -1, -2, -3]) == 0"
            ],
            "failed_tests": [
                "assert double_the_difference([10, 11, 12, 13]) == 170 (AssertionError: )"
            ]
        },
        "prompt_tokens": 468,
        "completion_tokens": 172
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
                "assert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]",
                "assert compare([10,20,30],[10,15,25]) == [0,5,5]",
                "assert compare([2,2,2,2],[1,2,3,4]) == [1,0,1,2]",
                "assert compare([100,200,300],[100,200,300]) == [0,0,0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 579,
        "completion_tokens": 161
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
                "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
                "assert Strongest_Extension('Data', ['Load', 'SAVE', 'Query']) == 'Data.SAVE'",
                "assert Strongest_Extension('Model', ['fit', 'PREDICT', 'Evaluate']) == 'Model.PREDICT'",
                "assert Strongest_Extension('Vehicle', ['Car', 'Truck', 'Bike']) == 'Vehicle.Car'",
                "assert Strongest_Extension('Game', ['Start', 'PAUSE', 'End']) == 'Game.PAUSE'",
                "assert Strongest_Extension('File', ['Open', 'CLOSE', 'Delete']) == 'File.CLOSE'",
                "assert Strongest_Extension('Task', ['Run', 'Execute', 'Stop']) == 'Task.Run'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('class1', ['ABc', 'DeF', 'GhI']) == 'class1.DeF' (AssertionError: )",
                "assert Strongest_Extension('test', ['aAa', 'BBb', 'cCc']) == 'test.aAa' (AssertionError: )"
            ]
        },
        "prompt_tokens": 641,
        "completion_tokens": 270
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check('abcd', 'abd') == False",
                "assert cycpattern_check('hello', 'ell') == True",
                "assert cycpattern_check('whassup', 'psus') == False",
                "assert cycpattern_check('abab', 'baa') == True",
                "assert cycpattern_check('efef', 'eeff') == False",
                "assert cycpattern_check('himenss', 'simen') == True",
                "assert cycpattern_check('example', 'mplea') == True",
                "assert cycpattern_check('testcase', 'cases') == False",
                "assert cycpattern_check('circular', 'ircul') == True"
            ],
            "failed_tests": [
                "assert cycpattern_check('rotation', 'tationr') == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 428,
        "completion_tokens": 151
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(0) == (1, 0)",
                "assert even_odd_count(4444) == (4, 0)",
                "assert even_odd_count(13579) == (0, 5)",
                "assert even_odd_count(-98765) == (2, 3)"
            ],
            "failed_tests": [
                "assert even_odd_count(102030) == (3, 3) (AssertionError: )"
            ]
        },
        "prompt_tokens": 353,
        "completion_tokens": 78
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(367) == 'ccclxvii'",
                "assert int_to_mini_roman(164) == 'clxiv'",
                "assert int_to_mini_roman(4) == 'iv'",
                "assert int_to_mini_roman(999) == 'cmxcix'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 400,
        "completion_tokens": 63
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(1, 2, 3) == False",
                "assert right_angle_triangle(5, 12, 13) == True",
                "assert right_angle_triangle(10, 6, 8) == True",
                "assert right_angle_triangle(7, 24, 25) == True",
                "assert right_angle_triangle(8, 15, 17) == True",
                "assert right_angle_triangle(5, 5, 5) == False",
                "assert right_angle_triangle(6, 8, 10) == True",
                "assert right_angle_triangle(2, 2, 3) == False"
            ],
            "failed_tests": [
                "assert right_angle_triangle(0, 0, 0) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 386,
        "completion_tokens": 164
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"",
                "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"",
                "assert find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"",
                "assert find_max([\"hello\", \"world\", \"python\", \"developer\"]) == \"developer\"",
                "assert find_max([\"a\", \"b\", \"c\", \"d\"]) == \"a\"",
                "assert find_max([\"unique\", \"words\", \"with\", \"different\", \"lengths\"]) == \"different\"",
                "assert find_max([\"same\", \"same\", \"same\"]) == \"same\"",
                "assert find_max([\"abc\", \"def\", \"ghi\", \"jkl\"]) == \"abc\"",
                "assert find_max([\"zyx\", \"wvu\", \"tsr\"]) == \"tsr\""
            ],
            "failed_tests": [
                "assert find_max([\"apple\", \"banana\", \"cherry\"]) == \"banana\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 450,
        "completion_tokens": 190
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(5, 6, 10) == [11, 4]",
                "assert eat(4, 8, 9) == [12, 1]",
                "assert eat(1, 10, 10) == [11, 0]",
                "assert eat(2, 11, 5) == [7, 0]",
                "assert eat(0, 0, 0) == [0, 0]",
                "assert eat(10, 5, 15) == [15, 10]",
                "assert eat(7, 0, 10) == [7, 10]",
                "assert eat(0, 20, 19) == [19, 0]",
                "assert eat(100, 200, 150) == [250, 0]",
                "assert eat(50, 50, 100) == [100, 50]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 616,
        "completion_tokens": 184
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['+'], [1, 2]) == 3",
                "assert do_algebra(['**', '//'], [2, 3, 2]) == 4",
                "assert do_algebra(['-'], [5, 3]) == 2",
                "assert do_algebra(['*'], [7, 6]) == 42",
                "assert do_algebra(['//'], [9, 2]) == 4",
                "assert do_algebra(['**'], [2, 5]) == 32"
            ],
            "failed_tests": [
                "assert do_algebra(['*', '+', '-'], [2, 3, 4, 5]) == 9 (AssertionError: )",
                "assert do_algebra(['//', '+', '**'], [16, 4, 2, 3]) == 65 (AssertionError: )",
                "assert do_algebra(['-', '*', '+'], [10, 5, 2, 3]) == 1 (AssertionError: )",
                "assert do_algebra(['+', '-', '*', '//', '**'], [3, 5, 2, 4, 2, 3]) == 81 (AssertionError: )"
            ]
        },
        "prompt_tokens": 511,
        "completion_tokens": 223
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solve(\"1234\") == \"4321\"",
                "assert solve(\"ab\") == \"AB\"",
                "assert solve(\"Hello World!\") == \"hELLO wORLD!\"",
                "assert solve(\"Python3.8\") == \"pYTHON3.8\"",
                "assert solve(\"\") == \"\"",
                "assert solve(\"!!!!\") == \"!!!!\""
            ],
            "failed_tests": [
                "assert solve(\"123abc\") == \"321CBA\" (AssertionError: )"
            ]
        },
        "prompt_tokens": 703,
        "completion_tokens": 93
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('') == None",
                "assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'"
            ],
            "failed_tests": [
                "assert string_to_md5('python') == '5e8ff9bf55ba3508199d22e984129be6' (AssertionError: )"
            ]
        },
        "prompt_tokens": 374,
        "completion_tokens": 142
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(2, 8) == [2, 4, 6, 8]",
                "assert generate_integers(8, 2) == [2, 4, 6, 8]",
                "assert generate_integers(10, 14) == []",
                "assert generate_integers(1, 5) == [2, 4]",
                "assert generate_integers(5, 1) == [2, 4]",
                "assert generate_integers(3, 3) == []",
                "assert generate_integers(4, 4) == [4]",
                "assert generate_integers(9, 11) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 412,
        "completion_tokens": 134
    }
]