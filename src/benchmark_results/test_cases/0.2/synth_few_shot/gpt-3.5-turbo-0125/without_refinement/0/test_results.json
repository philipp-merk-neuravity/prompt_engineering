[
    {
        "task_id": "HumanEval/0",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False",
                "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True",
                "assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 0.2) == False",
                "assert has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4], 0.1) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 459,
        "completion_tokens": 142
    },
    {
        "task_id": "HumanEval/1",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']",
                "assert separate_paren_groups('(( )) ( )') == ['(())', '()']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 424,
        "completion_tokens": 42
    },
    {
        "task_id": "HumanEval/2",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert truncate_number(3.5) == 0.5",
                "assert truncate_number(10.75) == 0.75"
            ],
            "failed_tests": [
                "assert truncate_number(7.299065351486206) == 0.299065351486206 (AssertionError: )"
            ]
        },
        "prompt_tokens": 564,
        "completion_tokens": 49
    },
    {
        "task_id": "HumanEval/3",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_zero([1, 2, 3]) == False",
                "assert below_zero([1, 2, -4, 5]) == True",
                "assert below_zero([0, 0, 0, 0, 0]) == False",
                "assert below_zero([-1, -2, -3, -4]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 691,
        "completion_tokens": 71
    },
    {
        "task_id": "HumanEval/4",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0",
                "assert mean_absolute_deviation([5.0, 5.0, 5.0, 5.0]) == 0.0"
            ],
            "failed_tests": [
                "assert mean_absolute_deviation([10.0, 20.0, 30.0, 40.0, 50.0]) == 16.0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 694,
        "completion_tokens": 97
    },
    {
        "task_id": "HumanEval/5",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert intersperse([], 4) == []",
                "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 665,
        "completion_tokens": 40
    },
    {
        "task_id": "HumanEval/6",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]",
                "assert parse_nested_parens('()') == [1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 418,
        "completion_tokens": 43
    },
    {
        "task_id": "HumanEval/7",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_substring([], 'a') == []",
                "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 612,
        "completion_tokens": 44
    },
    {
        "task_id": "HumanEval/8",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_product([]) == (0, 1)",
                "assert sum_product([1, 2, 3, 4]) == (10, 24)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 718,
        "completion_tokens": 34
    },
    {
        "task_id": "HumanEval/9",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]",
                "assert rolling_max([3, 2, 1]) == [3, 3, 3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 417,
        "completion_tokens": 68
    },
    {
        "task_id": "HumanEval/10",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('racecar') == True",
                "assert is_palindrome('hello') == False",
                "assert is_palindrome('') == True",
                "assert make_palindrome('') == ''",
                "assert make_palindrome('cat') == 'catac'",
                "assert make_palindrome('cata') == 'catac'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 559,
        "completion_tokens": 65
    },
    {
        "task_id": "HumanEval/11",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_xor('101010', '110011') == '011001'",
                "assert string_xor('1111', '0000') == '1111'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 582,
        "completion_tokens": 32
    },
    {
        "task_id": "HumanEval/12",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert longest(['a', 'b', 'c']) == 'a'",
                "assert longest(['a', 'bb', 'ccc']) == 'ccc'",
                "assert longest([]) == None"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 406,
        "completion_tokens": 36
    },
    {
        "task_id": "HumanEval/13",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert greatest_common_divisor(3, 5) == 1",
                "assert greatest_common_divisor(25, 15) == 5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 557,
        "completion_tokens": 29
    },
    {
        "task_id": "HumanEval/14",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert all_prefixes('a') == ['a']",
                "assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']",
                "assert all_prefixes('python') == ['p', 'py', 'pyt', 'pyth', 'pytho', 'python']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 639,
        "completion_tokens": 64
    },
    {
        "task_id": "HumanEval/15",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_sequence(0) == '0'",
                "assert string_sequence(5) == '0 1 2 3 4 5'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 591,
        "completion_tokens": 30
    },
    {
        "task_id": "HumanEval/16",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_distinct_characters('xyzXYZ') == 3",
                "assert count_distinct_characters('Jerry') == 4",
                "assert count_distinct_characters('hello') == 4"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 643,
        "completion_tokens": 36
    },
    {
        "task_id": "HumanEval/17",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"
            ],
            "failed_tests": [
                "assert parse_music('o .| o o| .| o| o| o| o| o o') == [4, 1, 2, 4, 1, 2, 2, 2, 2, 4, 4] (AssertionError: )",
                "assert parse_music('.| o| o| o| o| o| o| o| o| o| o') == [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2] (AssertionError: )"
            ]
        },
        "prompt_tokens": 698,
        "completion_tokens": 174
    },
    {
        "task_id": "HumanEval/18",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert how_many_times('', 'a') == 0",
                "assert how_many_times('aaa', 'a') == 3",
                "assert how_many_times('aaaa', 'aa') == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 399,
        "completion_tokens": 39
    },
    {
        "task_id": "HumanEval/19",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_numbers('three one five') == 'one three five'",
                "assert sort_numbers('nine seven two') == 'two seven nine'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 391,
        "completion_tokens": 28
    },
    {
        "task_id": "HumanEval/20",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)",
                "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)",
                "assert find_closest_elements([10.5, 20.3, 30.1, 40.7, 50.9, 55.2]) == (50.9, 55.2)"
            ],
            "failed_tests": [
                "assert find_closest_elements([1.0, 1.1, 1.2, 1.3, 1.4]) == (1.0, 1.1) (AssertionError: )"
            ]
        },
        "prompt_tokens": 798,
        "completion_tokens": 179
    },
    {
        "task_id": "HumanEval/21",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
                "assert rescale_to_unit([10.0, 20.0, 30.0, 40.0, 50.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 707,
        "completion_tokens": 112
    },
    {
        "task_id": "HumanEval/22",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_integers(['a', 3.14, 5]) == [5]",
                "assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 391,
        "completion_tokens": 48
    },
    {
        "task_id": "HumanEval/23",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strlen('') == 0",
                "assert strlen('abc') == 3",
                "assert strlen('hello') == 5",
                "assert strlen('python is fun') == 13"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 557,
        "completion_tokens": 36
    },
    {
        "task_id": "HumanEval/24",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_divisor(15) == 5",
                "assert largest_divisor(20) == 10",
                "assert largest_divisor(25) == 5",
                "assert largest_divisor(36) == 18"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 323,
        "completion_tokens": 43
    },
    {
        "task_id": "HumanEval/25",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert factorize(8) == [2, 2, 2]",
                "assert factorize(25) == [5, 5]",
                "assert factorize(70) == [2, 5, 7]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 619,
        "completion_tokens": 45
    },
    {
        "task_id": "HumanEval/26",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]",
                "assert remove_duplicates([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]"
            ],
            "failed_tests": [
                "assert remove_duplicates([1, 1, 1, 1, 1]) == [1] (AssertionError: )"
            ]
        },
        "prompt_tokens": 666,
        "completion_tokens": 84
    },
    {
        "task_id": "HumanEval/27",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert flip_case('Hello') == 'hELLO'",
                "assert flip_case('Python is Great!') == 'pYTHON IS gREAT!'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 550,
        "completion_tokens": 30
    },
    {
        "task_id": "HumanEval/28",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert concatenate([]) == ''",
                "assert concatenate(['a', 'b', 'c']) == 'abc'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 540,
        "completion_tokens": 21
    },
    {
        "task_id": "HumanEval/29",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert filter_by_prefix([], 'a') == []",
                "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']",
                "assert filter_by_prefix(['hello', 'world', 'python', 'programming'], 'p') == ['python', 'programming']",
                "assert filter_by_prefix(['apple', 'banana', 'cherry', 'date'], 'b') == ['banana']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 603,
        "completion_tokens": 90
    },
    {
        "task_id": "HumanEval/30",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6]",
                "assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1]",
                "assert get_positive([-1, -2, -3, -4, -5]) == []",
                "assert get_positive([0, 0, 0, 0, 0]) == []",
                "assert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 759,
        "completion_tokens": 161
    },
    {
        "task_id": "HumanEval/31",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_prime(6) == False",
                "assert is_prime(101) == True",
                "assert is_prime(11) == True",
                "assert is_prime(13441) == True",
                "assert is_prime(61) == True",
                "assert is_prime(4) == False",
                "assert is_prime(1) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 624,
        "completion_tokens": 63
    },
    {
        "task_id": "HumanEval/32",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert poly([1, 2], 2) == 5",
                "assert poly([-6, 11, -6, 1], 1) == 0",
                "assert round(find_zero([1, 2]), 2) == -0.5",
                "assert round(find_zero([-6, 11, -6, 1]), 2) == 1.0"
            ],
            "failed_tests": [
                "assert poly_max([1, -2, 3], -1) == 4 (NameError: name 'poly_max' is not defined)",
                "assert poly_max([2, 0, -1, 3], 2) == 7 (NameError: name 'poly_max' is not defined)"
            ]
        },
        "prompt_tokens": 796,
        "completion_tokens": 120
    },
    {
        "task_id": "HumanEval/33",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_third([1, 2, 3]) == [1, 2, 3]",
                "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]",
                "assert sort_third([3, 6, 9, 12]) == [3, 6, 9, 12]",
                "assert sort_third([1, 2, 4, 5, 7, 8]) == [1, 2, 4, 5, 7, 8]",
                "assert sort_third([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [3, 8, 7, 6, 5, 4, 9, 2, 1]"
            ],
            "failed_tests": [
                "assert sort_third([10, 20, 30, 40, 50, 60]) == [30, 20, 10, 40, 50, 60] (AssertionError: )"
            ]
        },
        "prompt_tokens": 482,
        "completion_tokens": 235
    },
    {
        "task_id": "HumanEval/34",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]",
                "assert unique([1, 1, 1, 1, 1]) == [1]",
                "assert unique([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 636,
        "completion_tokens": 126
    },
    {
        "task_id": "HumanEval/35",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_element([1, 2, 3]) == 3",
                "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 697,
        "completion_tokens": 55
    },
    {
        "task_id": "HumanEval/36",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fizz_buzz(50) == 0",
                "assert fizz_buzz(78) == 2",
                "assert fizz_buzz(79) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 585,
        "completion_tokens": 32
    },
    {
        "task_id": "HumanEval/37",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sort_even([1, 2, 3]) == [1, 2, 3]",
                "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]",
                "assert sort_even([7, 8, 5, 2, 9]) == [5, 8, 7, 2, 9]",
                "assert sort_even([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]"
            ],
            "failed_tests": [
                "assert sort_even([10, 20, 30, 40, 50, 60]) == [10, 40, 30, 20, 50, 60] (AssertionError: )",
                "assert sort_even([11, 22, 33, 44, 55, 66, 77]) == [11, 44, 33, 22, 55, 66, 77] (AssertionError: )",
                "assert sort_even([2, 4, 6, 8]) == [2, 8, 6, 4] (AssertionError: )",
                "assert sort_even([91, 82, 73, 64, 55, 46, 37, 28]) == [73, 82, 91, 64, 55, 46, 37, 28] (AssertionError: )"
            ]
        },
        "prompt_tokens": 419,
        "completion_tokens": 287
    },
    {
        "task_id": "HumanEval/38",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert encode_cyclic('xyz') == 'yzx'",
                "assert decode_cyclic('yzx') == 'xyz'"
            ],
            "failed_tests": [
                "assert encode_cyclic('abcdefgh') == 'defghabc' (AssertionError: )",
                "assert decode_cyclic('defghabc') == 'abcdefgh' (AssertionError: )"
            ]
        },
        "prompt_tokens": 481,
        "completion_tokens": 50
    },
    {
        "task_id": "HumanEval/39",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert prime_fib(1) == 2",
                "assert prime_fib(2) == 3",
                "assert prime_fib(3) == 5"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 387,
        "completion_tokens": 32
    },
    {
        "task_id": "HumanEval/40",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triples_sum_to_zero([1, 3, 5, 0]) == False",
                "assert triples_sum_to_zero([1, 3, -2, 1]) == True",
                "assert triples_sum_to_zero([1, 2, 3, 7]) == False",
                "assert triples_sum_to_zero([2, 4, -5, 3, 9, 7]) == True",
                "assert triples_sum_to_zero([1]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 745,
        "completion_tokens": 96
    },
    {
        "task_id": "HumanEval/41",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert car_race_collision(0) == 0",
                "assert car_race_collision(1) == 1"
            ],
            "failed_tests": [
                "assert car_race_collision(5) == 5 (AssertionError: )",
                "assert car_race_collision(2) == 2 (AssertionError: )",
                "assert car_race_collision(10) == 10 (AssertionError: )"
            ]
        },
        "prompt_tokens": 445,
        "completion_tokens": 54
    },
    {
        "task_id": "HumanEval/42",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert incr_list([1, 2, 3]) == [2, 3, 4]",
                "assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 739,
        "completion_tokens": 80
    },
    {
        "task_id": "HumanEval/43",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pairs_sum_to_zero([1, 3, 5, 0]) == False",
                "assert pairs_sum_to_zero([1, 3, -2, 1]) == False",
                "assert pairs_sum_to_zero([1, 2, 3, 7]) == False",
                "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True",
                "assert pairs_sum_to_zero([1]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 820,
        "completion_tokens": 96
    },
    {
        "task_id": "HumanEval/44",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert change_base(8, 3) == '22'",
                "assert change_base(8, 2) == '1000'",
                "assert change_base(7, 2) == '111'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 549,
        "completion_tokens": 40
    },
    {
        "task_id": "HumanEval/45",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(5, 3) == 7.5",
                "assert triangle_area(4, 8) == 16",
                "assert triangle_area(6, 10) == 30"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 545,
        "completion_tokens": 40
    },
    {
        "task_id": "HumanEval/46",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib4(0) == 0",
                "assert fib4(1) == 0",
                "assert fib4(2) == 2",
                "assert fib4(3) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 462,
        "completion_tokens": 39
    },
    {
        "task_id": "HumanEval/47",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert median([3, 1, 2, 4, 5]) == 3"
            ],
            "failed_tests": [
                "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 580,
        "completion_tokens": 52
    },
    {
        "task_id": "HumanEval/48",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_palindrome('') == True",
                "assert is_palindrome('aba') == True",
                "assert is_palindrome('aaaaa') == True",
                "assert is_palindrome('zbcd') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 655,
        "completion_tokens": 45
    },
    {
        "task_id": "HumanEval/49",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert modp(3, 5) == 3",
                "assert modp(1101, 101) == 2",
                "assert modp(0, 101) == 1",
                "assert modp(3, 11) == 8",
                "assert modp(100, 101) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 407,
        "completion_tokens": 65
    },
    {
        "task_id": "HumanEval/50",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode_shift('hello') == 'mjqqt'",
                "assert encode_shift('xyz') == 'cde'",
                "assert decode_shift('mjqqt') == 'hello'",
                "assert decode_shift('cde') == 'xyz'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 421,
        "completion_tokens": 50
    },
    {
        "task_id": "HumanEval/51",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert remove_vowels('hello') == 'hll'",
                "assert remove_vowels('') == ''",
                "assert remove_vowels('aeiou') == ''",
                "assert remove_vowels('bcdf') == 'bcdf'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 654,
        "completion_tokens": 47
    },
    {
        "task_id": "HumanEval/52",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert below_threshold([1, 2, 4, 10], 100) == True",
                "assert below_threshold([1, 20, 4, 10], 5) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 643,
        "completion_tokens": 41
    },
    {
        "task_id": "HumanEval/53",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add(1, 2) == 3",
                "assert add(10, 5) == 15"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 508,
        "completion_tokens": 23
    },
    {
        "task_id": "HumanEval/54",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True",
                "assert same_chars('abcd', 'dddddddabc') == True",
                "assert same_chars('eabcd', 'dddddddabc') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 450,
        "completion_tokens": 50
    },
    {
        "task_id": "HumanEval/55",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fib(10) == 55",
                "assert fib(1) == 1",
                "assert fib(8) == 21"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 519,
        "completion_tokens": 26
    },
    {
        "task_id": "HumanEval/56",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing('<') == False",
                "assert correct_bracketing('<>') == True",
                "assert correct_bracketing('<<><>>') == True",
                "assert correct_bracketing('><<>') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 403,
        "completion_tokens": 44
    },
    {
        "task_id": "HumanEval/57",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert monotonic([1, 2, 3, 4]) == True",
                "assert monotonic([1, 1, 1, 1]) == True",
                "assert monotonic([5, 5, 7, 8]) == True"
            ],
            "failed_tests": [
                "assert monotonic([3, 2, 1]) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 368,
        "completion_tokens": 68
    },
    {
        "task_id": "HumanEval/58",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert common([1, 2, 3], [2, 3, 4]) == [2, 3]",
                "assert common([5, 5, 5, 5], [5, 5, 5]) == [5]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 411,
        "completion_tokens": 54
    },
    {
        "task_id": "HumanEval/59",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_prime_factor(13195) == 29",
                "assert largest_prime_factor(2048) == 2",
                "assert largest_prime_factor(45) == 5",
                "assert largest_prime_factor(91) == 13"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 558,
        "completion_tokens": 45
    },
    {
        "task_id": "HumanEval/60",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_to_n(30) == 465",
                "assert sum_to_n(100) == 5050",
                "assert sum_to_n(5) == 15",
                "assert sum_to_n(10) == 55",
                "assert sum_to_n(1) == 1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 568,
        "completion_tokens": 55
    },
    {
        "task_id": "HumanEval/61",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert correct_bracketing('(') == False",
                "assert correct_bracketing('()') == True",
                "assert correct_bracketing('(()())') == True",
                "assert correct_bracketing(')()') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 397,
        "completion_tokens": 44
    },
    {
        "task_id": "HumanEval/62",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert derivative([1, 0, 2, 0, 3]) == [0, 4, 0, 12]",
                "assert derivative([2, 3, 0, 1]) == [3, 0, 3]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 403,
        "completion_tokens": 54
    },
    {
        "task_id": "HumanEval/63",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fibfib(1) == 0",
                "assert fibfib(5) == 4",
                "assert fibfib(8) == 24"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 450,
        "completion_tokens": 34
    },
    {
        "task_id": "HumanEval/64",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert vowels_count('hello') == 2",
                "assert vowels_count('WORLD') == 1",
                "assert vowels_count('python') == 1",
                "assert vowels_count('abcde') == 2",
                "assert vowels_count('ACEDY') == 3",
                "assert vowels_count('programming') == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 416,
        "completion_tokens": 63
    },
    {
        "task_id": "HumanEval/65",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert circular_shift(123, 1) == \"312\"",
                "assert circular_shift(123, 2) == \"231\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 553,
        "completion_tokens": 26
    },
    {
        "task_id": "HumanEval/66",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digitSum('') == 0",
                "assert digitSum('abAB') == 131",
                "assert digitSum('abcCd') == 67",
                "assert digitSum('helloE') == 69"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 411,
        "completion_tokens": 41
    },
    {
        "task_id": "HumanEval/67",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fruit_distribution('5 apples and 6 oranges', 19) == 8",
                "assert fruit_distribution('0 apples and 1 oranges', 3) == 2",
                "assert fruit_distribution('2 apples and 3 oranges', 100) == 95"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 523,
        "completion_tokens": 53
    },
    {
        "task_id": "HumanEval/68",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert pluck([4, 2, 3]) == [2, 1]",
                "assert pluck([1, 2, 3]) == [2, 1]",
                "assert pluck([]) == []",
                "assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 857,
        "completion_tokens": 73
    },
    {
        "task_id": "HumanEval/69",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert search([4, 1, 2, 2, 3, 1]) == 2",
                "assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3",
                "assert search([5, 5, 4, 4, 4]) == -1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 756,
        "completion_tokens": 77
    },
    {
        "task_id": "HumanEval/70",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]",
                "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]",
                "assert strange_sort_list([]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 686,
        "completion_tokens": 66
    },
    {
        "task_id": "HumanEval/71",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert triangle_area(3, 4, 5) == 6.00",
                "assert triangle_area(1, 2, 10) == -1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 418,
        "completion_tokens": 143
    },
    {
        "task_id": "HumanEval/72",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert will_it_fly([1, 2], 5) == False",
                "assert will_it_fly([3, 2, 3], 1) == False",
                "assert will_it_fly([3, 2, 3], 9) == True",
                "assert will_it_fly([3], 5) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 573,
        "completion_tokens": 70
    },
    {
        "task_id": "HumanEval/73",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert smallest_change([1,2,3,5,4,7,9,6]) == 4",
                "assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1",
                "assert smallest_change([1, 2, 3, 2, 1]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 505,
        "completion_tokens": 73
    },
    {
        "task_id": "HumanEval/74",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert total_match([], []) == []",
                "assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']",
                "assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']",
                "assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']",
                "assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 523,
        "completion_tokens": 114
    },
    {
        "task_id": "HumanEval/75",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_multiply_prime(30) == True",
                "assert is_multiply_prime(24) == False",
                "assert is_multiply_prime(3.368695020675659) == False"
            ],
            "failed_tests": [
                "assert is_multiply_prime(345) == False (AssertionError: )",
                "assert is_multiply_prime(168) == True (AssertionError: )"
            ]
        },
        "prompt_tokens": 376,
        "completion_tokens": 60
    },
    {
        "task_id": "HumanEval/76",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_simple_power(1, 4) == True",
                "assert is_simple_power(2, 2) == True",
                "assert is_simple_power(8, 2) == True",
                "assert is_simple_power(3, 2) == False",
                "assert is_simple_power(3, 1) == False",
                "assert is_simple_power(5, 3) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 498,
        "completion_tokens": 77
    },
    {
        "task_id": "HumanEval/77",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert iscube(1) == True",
                "assert iscube(2) == False",
                "assert iscube(-1) == True",
                "assert iscube(64) == True",
                "assert iscube(0) == True",
                "assert iscube(180) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 425,
        "completion_tokens": 53
    },
    {
        "task_id": "HumanEval/78",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert hex_key('AB') == 1",
                "assert hex_key('1077E') == 2",
                "assert hex_key('ABED1A33') == 4",
                "assert hex_key('123456789ABCDEF0') == 6",
                "assert hex_key('2020') == 2"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 634,
        "completion_tokens": 61
    },
    {
        "task_id": "HumanEval/79",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert decimal_to_binary(0) == \"db0db\"",
                "assert decimal_to_binary(1) == \"db1db\"",
                "assert decimal_to_binary(8) == \"db1000db\""
            ],
            "failed_tests": []
        },
        "prompt_tokens": 630,
        "completion_tokens": 40
    },
    {
        "task_id": "HumanEval/80",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_happy('a') == False",
                "assert is_happy('aa') == False",
                "assert is_happy('abcd') == True",
                "assert is_happy('aabb') == False",
                "assert is_happy('adb') == True",
                "assert is_happy('xyy') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 462,
        "completion_tokens": 66
    },
    {
        "task_id": "HumanEval/81",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']"
            ],
            "failed_tests": [
                "assert numerical_letter_grade([2.5, 3.8, 1.2]) == ['C', 'A', 'D+'] (AssertionError: )",
                "assert numerical_letter_grade([3.0, 3.7, 2.3, 1.0, 0.7]) == ['B+', 'A', 'B-', 'D+', 'D'] (AssertionError: )",
                "assert numerical_letter_grade([2.0, 1.3, 0.0, 4.0]) == ['C+', 'C-', 'E', 'A+'] (AssertionError: )",
                "assert numerical_letter_grade([2.7, 1.5, 3.3, 0.5]) == ['B', 'D+', 'A-', 'D-'] (AssertionError: )",
                "assert numerical_letter_grade([1.7, 2.5, 0.3, 3.8]) == ['C', 'C+', 'E', 'A'] (AssertionError: )"
            ]
        },
        "prompt_tokens": 603,
        "completion_tokens": 231
    },
    {
        "task_id": "HumanEval/82",
        "is_solved": true,
        "test_results": {
            "passed_tests": [],
            "failed_tests": []
        },
        "prompt_tokens": 392,
        "completion_tokens": 107
    },
    {
        "task_id": "HumanEval/83",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert starts_one_ends(1) == 2 (AssertionError: )",
                "assert starts_one_ends(2) == 20 (AssertionError: )",
                "assert starts_one_ends(3) == 300 (AssertionError: )"
            ]
        },
        "prompt_tokens": 327,
        "completion_tokens": 32
    },
    {
        "task_id": "HumanEval/84",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solve(147) == '1100'",
                "assert solve(0) == '0'",
                "assert solve(1000) == '1'",
                "assert solve(1) == '1'"
            ],
            "failed_tests": [
                "assert solve(10) == '101' (AssertionError: )",
                "assert solve(2047) == '11111111111' (AssertionError: )",
                "assert solve(1111) == '10000' (AssertionError: )",
                "assert solve(1023) == '1111111111' (AssertionError: )",
                "assert solve(255) == '11111111' (AssertionError: )",
                "assert solve(4095) == '111111111111' (AssertionError: )"
            ]
        },
        "prompt_tokens": 418,
        "completion_tokens": 149
    },
    {
        "task_id": "HumanEval/85",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert add([4, 2, 6, 7]) == 2",
                "assert add([1, 3, 5, 7]) == 0"
            ],
            "failed_tests": [
                "assert add([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10 (AssertionError: )",
                "assert add([10, 20, 30, 40, 50, 60, 70, 80, 90]) == 60 (AssertionError: )"
            ]
        },
        "prompt_tokens": 337,
        "completion_tokens": 101
    },
    {
        "task_id": "HumanEval/86",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert anti_shuffle('Hi') == 'Hi'",
                "assert anti_shuffle('hello') == 'ehllo'",
                "assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 428,
        "completion_tokens": 38
    },
    {
        "task_id": "HumanEval/87",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]",
                "assert get_row([], 1) == []",
                "assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 642,
        "completion_tokens": 112
    },
    {
        "task_id": "HumanEval/88",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sort_array([]) == []",
                "assert sort_array([5]) == [5]",
                "assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]",
                "assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 785,
        "completion_tokens": 103
    },
    {
        "task_id": "HumanEval/89",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encrypt('hi') == 'lm'",
                "assert encrypt('asdfghjkl') == 'ewhjklnop'",
                "assert encrypt('gf') == 'kj'",
                "assert encrypt('et') == 'ix'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 400,
        "completion_tokens": 153
    },
    {
        "task_id": "HumanEval/90",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert next_smallest([1, 2, 3, 4, 5]) == 2",
                "assert next_smallest([5, 1, 4, 3, 2]) == 2",
                "assert next_smallest([]) == None",
                "assert next_smallest([1, 1]) == None"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 461,
        "completion_tokens": 67
    },
    {
        "task_id": "HumanEval/91",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert is_bored(\"Hello world\") == 0",
                "assert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1",
                "assert is_bored(\"I like pizza. I like ice cream. I like burgers.\") == 3"
            ],
            "failed_tests": [
                "assert is_bored(\"I am bored. Are you bored? Yes, I am bored!\") == 2 (AssertionError: )"
            ]
        },
        "prompt_tokens": 392,
        "completion_tokens": 85
    },
    {
        "task_id": "HumanEval/92",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert any_int(3, -2, 1) == True",
                "assert any_int(-1, -2, -3) == True",
                "assert any_int(7, 14, 21) == True",
                "assert any_int(1, 1, 2) == True",
                "assert any_int(6, 8, 14) == True",
                "assert any_int(2, 3, 5) == True",
                "assert any_int(3, 2, 2) == False"
            ],
            "failed_tests": [
                "assert any_int(0, 0, 0) == False (AssertionError: )",
                "assert any_int(1, 2, 3) == False (AssertionError: )",
                "assert any_int(100, 200, 300) == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 460,
        "completion_tokens": 243
    },
    {
        "task_id": "HumanEval/93",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert encode('test') == 'TGST'",
                "assert encode('This is a message') == 'tHKS KS C MGSSCGG'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 403,
        "completion_tokens": 30
    },
    {
        "task_id": "HumanEval/94",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10",
                "assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25",
                "assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13",
                "assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11",
                "assert skjkasdkd([0,81,12,3,1,21]) == 3",
                "assert skjkasdkd([0,8,1,2,1,7]) == 7"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 700,
        "completion_tokens": 233
    },
    {
        "task_id": "HumanEval/95",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_dict_case({'a': 'apple', 'b': 'banana'}) == True",
                "assert check_dict_case({'a': 'apple', 'A': 'banana', 'B': 'banana'}) == False",
                "assert check_dict_case({'a': 'apple', 8: 'banana', 'a': 'apple'}) == False",
                "assert check_dict_case({'Name': 'John', 'Age': '36', 'City': 'Houston'}) == False",
                "assert check_dict_case({'STATE': 'NC', 'ZIP': '12345'}) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 576,
        "completion_tokens": 113
    },
    {
        "task_id": "HumanEval/96",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_up_to(5) == [2, 3]",
                "assert count_up_to(11) == [2, 3, 5, 7]",
                "assert count_up_to(0) == []",
                "assert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
                "assert count_up_to(1) == []",
                "assert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 450,
        "completion_tokens": 113
    },
    {
        "task_id": "HumanEval/97",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert multiply(148, 412) == 16",
                "assert multiply(19, 28) == 72",
                "assert multiply(2020, 1851) == 0",
                "assert multiply(14, -15) == 20"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 418,
        "completion_tokens": 49
    },
    {
        "task_id": "HumanEval/98",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_upper('aBCdEf') == 1",
                "assert count_upper('abcdefg') == 0",
                "assert count_upper('dBBE') == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 372,
        "completion_tokens": 35
    },
    {
        "task_id": "HumanEval/99",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert closest_integer('10') == 10",
                "assert closest_integer('15.3') == 15",
                "assert closest_integer('14.5') == 15",
                "assert closest_integer('-14.5') == -15"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 466,
        "completion_tokens": 45
    },
    {
        "task_id": "HumanEval/100",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert make_a_pile(1) == [1]",
                "assert make_a_pile(2) == [2, 4]",
                "assert make_a_pile(4) == [4, 6, 8, 10]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 605,
        "completion_tokens": 48
    },
    {
        "task_id": "HumanEval/101",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_string('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']",
                "assert words_string('One, two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 433,
        "completion_tokens": 62
    },
    {
        "task_id": "HumanEval/102",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert choose_num(12, 15) == 14",
                "assert choose_num(13, 12) == -1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 603,
        "completion_tokens": 25
    },
    {
        "task_id": "HumanEval/103",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert rounded_avg(1, 5) == '0b11'",
                "assert rounded_avg(7, 5) == -1",
                "assert rounded_avg(10, 20) == '0b1111'",
                "assert rounded_avg(20, 33) == '0b11010'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 468,
        "completion_tokens": 60
    },
    {
        "task_id": "HumanEval/104",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]",
                "assert unique_digits([152, 323, 1422, 10]) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 647,
        "completion_tokens": 44
    },
    {
        "task_id": "HumanEval/105",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']",
                "assert by_length([]) == []",
                "assert by_length([1, -1, 55]) == ['One']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 625,
        "completion_tokens": 75
    },
    {
        "task_id": "HumanEval/106",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert f(4) == [1, 2, 6, 24]",
                "assert f(1) == [1]",
                "assert f(0) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 597,
        "completion_tokens": 34
    },
    {
        "task_id": "HumanEval/107",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_palindrome(3) == (1, 2)",
                "assert even_odd_palindrome(12) == (4, 6)",
                "assert even_odd_palindrome(1) == (0, 1)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 534,
        "completion_tokens": 45
    },
    {
        "task_id": "HumanEval/108",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert count_nums([]) == 0",
                "assert count_nums([-1, 11, -11]) == 1",
                "assert count_nums([1, 1, 2]) == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 656,
        "completion_tokens": 40
    },
    {
        "task_id": "HumanEval/109",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert move_one_ball([3, 4, 5, 1, 2]) == True",
                "assert move_one_ball([3, 5, 4, 1, 2]) == False",
                "assert move_one_ball([]) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 606,
        "completion_tokens": 52
    },
    {
        "task_id": "HumanEval/110",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert exchange([1, 2, 3, 4], [1, 2, 3, 4]) == 'YES'",
                "assert exchange([1, 2, 3, 4], [1, 5, 3, 4]) == 'NO'",
                "assert exchange([2, 4, 6, 8], [1, 3, 5, 7]) == 'YES'",
                "assert exchange([1, 3, 5, 7], [1, 3, 5, 7]) == 'NO'",
                "assert exchange([2, 4, 6, 8], [2, 4, 6, 8]) == 'YES'"
            ],
            "failed_tests": [
                "assert exchange([1, 3, 5, 7], [2, 4, 6, 8]) == 'NO' (AssertionError: )"
            ]
        },
        "prompt_tokens": 519,
        "completion_tokens": 180
    },
    {
        "task_id": "HumanEval/111",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}",
                "assert histogram('a b b a') == {'a': 2, 'b': 2}",
                "assert histogram('b b b b a') == {'b': 4}",
                "assert histogram('') == {}"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 492,
        "completion_tokens": 69
    },
    {
        "task_id": "HumanEval/112",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert reverse_delete('abcde', 'ae') == ('bcd', False)",
                "assert reverse_delete('abcdef', 'b') == ('acdef', False)",
                "assert reverse_delete('abcdedcba', 'ab') == ('cdedc', True)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 475,
        "completion_tokens": 51
    },
    {
        "task_id": "HumanEval/113",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert odd_count(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]",
                "assert odd_count(['3', '11111111']) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 536,
        "completion_tokens": 87
    },
    {
        "task_id": "HumanEval/114",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1",
                "assert minSubArraySum([-1, -2, -3]) == -6",
                "assert minSubArraySum([5, -3, 2, 1, -4, 3]) == -4"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 415,
        "completion_tokens": 71
    },
    {
        "task_id": "HumanEval/115",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6",
                "assert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5",
                "assert max_fill([[0,0,0], [0,0,0]], 5) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 870,
        "completion_tokens": 106
    },
    {
        "task_id": "HumanEval/116",
        "is_solved": false,
        "test_results": {
            "passed_tests": [],
            "failed_tests": [
                "assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] (AssertionError: )",
                "assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] (AssertionError: )",
                "assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4] (AssertionError: )"
            ]
        },
        "prompt_tokens": 538,
        "completion_tokens": 102
    },
    {
        "task_id": "HumanEval/117",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert select_words('Mary had a little lamb', 4) == ['little']",
                "assert select_words('simple white space', 2) == []",
                "assert select_words('Hello world', 4) == ['world']"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 498,
        "completion_tokens": 44
    },
    {
        "task_id": "HumanEval/118",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert get_closest_vowel('yogurt') == 'u'",
                "assert get_closest_vowel('FULL') == 'U'",
                "assert get_closest_vowel('quick') == ''",
                "assert get_closest_vowel('ab') == ''"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 476,
        "completion_tokens": 50
    },
    {
        "task_id": "HumanEval/119",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert match_parens(['()(', ')']) == 'Yes'",
                "assert match_parens([')', ')']) == 'No'",
                "assert match_parens(['(((', ')))']) == 'Yes'",
                "assert match_parens(['(((', '))']) == 'No'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 457,
        "completion_tokens": 57
    },
    {
        "task_id": "HumanEval/120",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]",
                "assert maximum([4, -4, 4], 2) == [4, 4]",
                "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 539,
        "completion_tokens": 75
    },
    {
        "task_id": "HumanEval/121",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert solution([5, 8, 7, 1]) == 12",
                "assert solution([3, 3, 3, 3, 3]) == 9",
                "assert solution([30, 13, 24, 321]) == 0",
                "assert solution([10, 20, 30, 40, 50]) == 0"
            ],
            "failed_tests": [
                "assert solution([1, 2, 3, 4, 5, 6]) == 8 (AssertionError: )",
                "assert solution([11, 22, 33, 44, 55]) == 22 (AssertionError: )",
                "assert solution([2, 3, 4, 5, 6, 7, 8]) == 15 (AssertionError: )",
                "assert solution([10, 11, 12, 13, 14, 15]) == 11 (AssertionError: )",
                "assert solution([21, 22, 23, 24, 25, 26]) == 47 (AssertionError: )"
            ]
        },
        "prompt_tokens": 427,
        "completion_tokens": 197
    },
    {
        "task_id": "HumanEval/122",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24",
                "assert add_elements([10, 20, 30, 40, 50], 3) == 60",
                "assert add_elements([1, 2, 3, 4, 5], 5) == 15"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 698,
        "completion_tokens": 87
    },
    {
        "task_id": "HumanEval/123",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_odd_collatz(1) == [1]",
                "assert get_odd_collatz(5) == [1, 5]"
            ],
            "failed_tests": [
                "assert get_odd_collatz(10) == [1, 5, 7, 9, 13, 15, 21, 27] (AssertionError: )"
            ]
        },
        "prompt_tokens": 727,
        "completion_tokens": 60
    },
    {
        "task_id": "HumanEval/124",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert valid_date('03-11-2000') == True",
                "assert valid_date('15-01-2012') == False",
                "assert valid_date('04-0-2040') == False",
                "assert valid_date('06-04-2020') == True",
                "assert valid_date('06/04/2020') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 748,
        "completion_tokens": 69
    },
    {
        "task_id": "HumanEval/125",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert split_words('Hello world!') == ['Hello', 'world!']",
                "assert split_words('Hello,world!') == ['Hello', 'world!']",
                "assert split_words('abcdef') == 3"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 460,
        "completion_tokens": 42
    },
    {
        "task_id": "HumanEval/126",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_sorted([5]) == True",
                "assert is_sorted([1, 2, 3, 4, 5]) == True",
                "assert is_sorted([1, 3, 2, 4, 5]) == False",
                "assert is_sorted([1, 2, 3, 4, 5, 6]) == True",
                "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True",
                "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False",
                "assert is_sorted([1, 2, 2, 3, 3, 4]) == True",
                "assert is_sorted([1, 2, 2, 2, 3, 4]) == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 704,
        "completion_tokens": 176
    },
    {
        "task_id": "HumanEval/127",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert intersection((1, 2), (2, 3)) == 'NO'",
                "assert intersection((-1, 1), (0, 4)) == 'NO'",
                "assert intersection((-3, -1), (-5, 5)) == 'YES'",
                "assert intersection((5, 10), (11, 15)) == 'NO'",
                "assert intersection((-10, -5), (-5, -1)) == 'NO'",
                "assert intersection((2, 5), (3, 7)) == 'YES'",
                "assert intersection((11, 15), (8, 10)) == 'NO'"
            ],
            "failed_tests": [
                "assert intersection((17, 20), (15, 17)) == 'YES' (AssertionError: )",
                "assert intersection((0, 0), (0, 0)) == 'YES' (AssertionError: )"
            ]
        },
        "prompt_tokens": 580,
        "completion_tokens": 163
    },
    {
        "task_id": "HumanEval/128",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert prod_signs([1, 2, 2, -4]) == -9",
                "assert prod_signs([0, 1]) == 0",
                "assert prod_signs([]) == None",
                "assert prod_signs([0, 0, 0, 0]) == 0"
            ],
            "failed_tests": [
                "assert prod_signs([5, -3, 0, 2]) == -10 (AssertionError: )",
                "assert prod_signs([-1, -2, -3, -4]) == -10 (AssertionError: )"
            ]
        },
        "prompt_tokens": 439,
        "completion_tokens": 102
    },
    {
        "task_id": "HumanEval/129",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [1, 2, 1]",
                "assert minPath([[5,9,3],[4,1,6],[7,8,2]], 1) == [1]",
                "assert minPath([[1,2],[3,4]], 2) == [1, 2]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 899,
        "completion_tokens": 86
    },
    {
        "task_id": "HumanEval/130",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert tri(3) == [1, 3, 2, 8]"
            ],
            "failed_tests": [
                "assert tri(0) == [0] (AssertionError: )",
                "assert tri(5) == [1, 3, 2, 8, 4, 15] (AssertionError: )"
            ]
        },
        "prompt_tokens": 553,
        "completion_tokens": 51
    },
    {
        "task_id": "HumanEval/131",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert digits(1) == 1",
                "assert digits(4) == 0",
                "assert digits(235) == 15"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 361,
        "completion_tokens": 26
    },
    {
        "task_id": "HumanEval/132",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_nested('[[]]') == True",
                "assert is_nested('[]]]]]]][[[[[]') == False",
                "assert is_nested('[][]') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 433,
        "completion_tokens": 33
    },
    {
        "task_id": "HumanEval/133",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 14",
                "assert sum_squares([1, 4, 9]) == 98",
                "assert sum_squares([1.4, 4.2, 0]) == 29"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 474,
        "completion_tokens": 54
    },
    {
        "task_id": "HumanEval/134",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert check_if_last_char_is_a_letter('apple pie') == False",
                "assert check_if_last_char_is_a_letter('apple pi e') == True",
                "assert check_if_last_char_is_a_letter('apple pi e ') == False",
                "assert check_if_last_char_is_a_letter('') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 474,
        "completion_tokens": 59
    },
    {
        "task_id": "HumanEval/135",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert can_arrange([1,2,4,3,5]) == 3",
                "assert can_arrange([1,2,3]) == -1",
                "assert can_arrange([5,4,3,2,1]) == 4",
                "assert can_arrange([1,3,5,7,9]) == -1"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 394,
        "completion_tokens": 71
    },
    {
        "task_id": "HumanEval/136",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)",
                "assert largest_smallest_integers([]) == (None, None)",
                "assert largest_smallest_integers([0]) == (None, None)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 456,
        "completion_tokens": 60
    },
    {
        "task_id": "HumanEval/137",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare_one(1, 2.5) == 2.5",
                "assert compare_one(1, '2,3') == '2,3'",
                "assert compare_one('5,1', '6') == '6'",
                "assert compare_one('1', 1) == None"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 459,
        "completion_tokens": 60
    },
    {
        "task_id": "HumanEval/138",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert is_equal_to_sum_even(4) == False",
                "assert is_equal_to_sum_even(6) == False",
                "assert is_equal_to_sum_even(8) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 356,
        "completion_tokens": 35
    },
    {
        "task_id": "HumanEval/139",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert special_factorial(4) == 288",
                "assert special_factorial(1) == 1",
                "assert special_factorial(5) == 34560"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 380,
        "completion_tokens": 33
    },
    {
        "task_id": "HumanEval/140",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert fix_spaces('Example') == 'Example'",
                "assert fix_spaces('Example 1') == 'Example_1'",
                "assert fix_spaces(' Example 2') == '_Example_2'",
                "assert fix_spaces(' Example   3') == '_Example-3'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 448,
        "completion_tokens": 57
    },
    {
        "task_id": "HumanEval/141",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert file_name_check('example.txt') == 'Yes'",
                "assert file_name_check('1example.dll') == 'No'",
                "assert file_name_check('file.with.more.than.3.digits123.txt') == 'No'",
                "assert file_name_check('.txt') == 'No'",
                "assert file_name_check('example.') == 'No'",
                "assert file_name_check('example.pdf') == 'No'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 565,
        "completion_tokens": 80
    },
    {
        "task_id": "HumanEval/142",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sum_squares([1, 2, 3]) == 6",
                "assert sum_squares([]) == 0",
                "assert sum_squares([-1, -5, 2, -1, -5]) == -126",
                "assert sum_squares([0, 0, 0, 0, 0]) == 0"
            ],
            "failed_tests": [
                "assert sum_squares([2, 3, 4, 5, 6, 7]) == 68 (AssertionError: )"
            ]
        },
        "prompt_tokens": 489,
        "completion_tokens": 98
    },
    {
        "task_id": "HumanEval/143",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert words_in_sentence('This is a test') == 'is'",
                "assert words_in_sentence('lets go for swimming') == 'go for'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 439,
        "completion_tokens": 29
    },
    {
        "task_id": "HumanEval/144",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert simplify('1/5', '5/1') == True",
                "assert simplify('1/6', '2/1') == False",
                "assert simplify('7/10', '10/2') == False",
                "assert simplify('2/3', '3/2') == True",
                "assert simplify('11/7', '7/11') == True"
            ],
            "failed_tests": [
                "assert simplify('4/9', '9/4') == False (AssertionError: )"
            ]
        },
        "prompt_tokens": 479,
        "completion_tokens": 89
    },
    {
        "task_id": "HumanEval/145",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]",
                "assert order_by_points([]) == []",
                "assert order_by_points([123, 456, 789]) == [123, 456, 789]",
                "assert order_by_points([9, 99, 999, 9999]) == [9, 99, 999, 9999]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 423,
        "completion_tokens": 97
    },
    {
        "task_id": "HumanEval/146",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert specialFilter([15, -73, 14, -15]) == 1",
                "assert specialFilter([33, -2, -3, 45, 21, 109]) == 2"
            ],
            "failed_tests": [
                "assert specialFilter([123, 456, 789, 101]) == 2 (AssertionError: )",
                "assert specialFilter([11, 22, 33, 44, 55, 66, 77, 88, 99]) == 0 (AssertionError: )"
            ]
        },
        "prompt_tokens": 656,
        "completion_tokens": 96
    },
    {
        "task_id": "HumanEval/147",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert get_max_triples(5) == 1",
                "assert get_max_triples(3) == 0",
                "assert get_max_triples(1) == 0"
            ],
            "failed_tests": [
                "assert get_max_triples(6) == 3 (AssertionError: )"
            ]
        },
        "prompt_tokens": 445,
        "completion_tokens": 47
    },
    {
        "task_id": "HumanEval/148",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert bf('Jupiter', 'Neptune') == ('Saturn', 'Uranus')",
                "assert bf('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')"
            ],
            "failed_tests": [
                "assert bf('Earth', 'Mercury') == ('Venus') (AssertionError: )"
            ]
        },
        "prompt_tokens": 536,
        "completion_tokens": 65
    },
    {
        "task_id": "HumanEval/149",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]",
                "assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]",
                "assert sorted_list_sum([\"dog\", \"cat\", \"bird\", \"fish\"]) == [\"bird\", \"fish\"]"
            ],
            "failed_tests": [
                "assert sorted_list_sum([\"apple\", \"banana\", \"kiwi\", \"orange\"]) == [\"kiwi\"] (AssertionError: )",
                "assert sorted_list_sum([\"bbb\", \"aaa\", \"ccc\"]) == [\"aaa\", \"bbb\", \"ccc\"] (AssertionError: )",
                "assert sorted_list_sum([\"xyz\", \"abc\", \"def\"]) == [\"abc\", \"def\", \"xyz\"] (AssertionError: )"
            ]
        },
        "prompt_tokens": 492,
        "completion_tokens": 132
    },
    {
        "task_id": "HumanEval/150",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert x_or_y(2, 3, 4) == 3",
                "assert x_or_y(6, 6, 7) == 7",
                "assert x_or_y(11, 10, 11) == 10"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 634,
        "completion_tokens": 50
    },
    {
        "task_id": "HumanEval/151",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert double_the_difference([1, 3, 2, 0]) == 10",
                "assert double_the_difference([-1, -2, 0]) == 0",
                "assert double_the_difference([9, -2]) == 81",
                "assert double_the_difference([0]) == 0"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 476,
        "completion_tokens": 61
    },
    {
        "task_id": "HumanEval/152",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]",
                "assert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 799,
        "completion_tokens": 82
    },
    {
        "task_id": "HumanEval/153",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'",
                "assert Strongest_Extension('class1', ['a', 'B', 'Cc']) == 'class1.B'"
            ],
            "failed_tests": [
                "assert Strongest_Extension('empty_class', []) == 'empty_class.' (IndexError: list index out of range)"
            ]
        },
        "prompt_tokens": 625,
        "completion_tokens": 64
    },
    {
        "task_id": "HumanEval/154",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert cycpattern_check('abcd', 'abd') == False",
                "assert cycpattern_check('hello', 'ell') == True",
                "assert cycpattern_check('whassup', 'psus') == False"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 461,
        "completion_tokens": 41
    },
    {
        "task_id": "HumanEval/155",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert even_odd_count(-12) == (1, 1)",
                "assert even_odd_count(123) == (1, 2)"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 353,
        "completion_tokens": 28
    },
    {
        "task_id": "HumanEval/156",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert int_to_mini_roman(19) == 'xix'",
                "assert int_to_mini_roman(152) == 'clii'",
                "assert int_to_mini_roman(426) == 'cdxxvi'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 393,
        "completion_tokens": 43
    },
    {
        "task_id": "HumanEval/157",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert right_angle_triangle(3, 4, 5) == True",
                "assert right_angle_triangle(5, 12, 13) == True",
                "assert right_angle_triangle(7, 24, 25) == True"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 427,
        "completion_tokens": 119
    },
    {
        "task_id": "HumanEval/158",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert find_max(['name', 'of', 'string']) == 'string'",
                "assert find_max(['name', 'enam', 'game']) == 'enam'",
                "assert find_max(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 449,
        "completion_tokens": 52
    },
    {
        "task_id": "HumanEval/159",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert eat(5, 6, 10) == [11, 4]",
                "assert eat(4, 8, 9) == [12, 1]",
                "assert eat(1, 10, 10) == [11, 0]",
                "assert eat(2, 11, 5) == [7, 0]"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 599,
        "completion_tokens": 72
    },
    {
        "task_id": "HumanEval/160",
        "is_solved": false,
        "test_results": {
            "passed_tests": [
                "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9"
            ],
            "failed_tests": [
                "assert do_algebra(['*', '//'], [5, 2, 3]) == 2 (AssertionError: )",
                "assert do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5]) == 8 (AssertionError: )",
                "assert do_algebra(['**', '+'], [2, 3, 2]) == 11 (AssertionError: )",
                "assert do_algebra(['-', '//', '*'], [10, 2, 3, 5]) == 5 (AssertionError: )",
                "assert do_algebra(['*', '+', '-'], [3, 4, 2, 1]) == 10 (AssertionError: )",
                "assert do_algebra(['//', '+'], [10, 2, 3]) == 7 (AssertionError: )",
                "assert do_algebra(['*', '-'], [5, 2, 3]) == -1 (AssertionError: )"
            ]
        },
        "prompt_tokens": 506,
        "completion_tokens": 190
    },
    {
        "task_id": "HumanEval/161",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert solve('1234') == '4321'",
                "assert solve('ab') == 'AB'"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 423,
        "completion_tokens": 32
    },
    {
        "task_id": "HumanEval/162",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
                "assert string_to_md5('') == None"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 603,
        "completion_tokens": 39
    },
    {
        "task_id": "HumanEval/163",
        "is_solved": true,
        "test_results": {
            "passed_tests": [
                "assert generate_integers(2, 8) == [2, 4, 6, 8]",
                "assert generate_integers(8, 2) == [2, 4, 6, 8]",
                "assert generate_integers(10, 14) == []"
            ],
            "failed_tests": []
        },
        "prompt_tokens": 600,
        "completion_tokens": 58
    }
]