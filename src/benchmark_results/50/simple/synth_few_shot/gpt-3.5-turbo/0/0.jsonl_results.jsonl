{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 377, "completion_tokens": 614, "duration": 9.802425384521484, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total = 0\n    for row in grid:\n        count = 0\n        for well in row:\n            count += well\n        total += math.ceil(count / capacity)\n    return total", "prompt_tokens": 612, "completion_tokens": 772, "duration": 13.881772518157959, "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 459, "completion_tokens": 548, "duration": 8.22707462310791, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for char in word if char in consonants)\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 470, "completion_tokens": 472, "duration": 7.017596006393433, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] not in vowels and word[i - 1] in vowels and word[i + 1] in vowels:\n            return word[i]\n    return ''", "prompt_tokens": 438, "completion_tokens": 527, "duration": 9.12997841835022, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(': \n                stack.append(char)\n            else:\n                if not stack or stack[-1] != '(': \n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 457, "completion_tokens": 780, "duration": 11.265951156616211, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 506, "completion_tokens": 373, "duration": 6.005501985549927, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 != 0 and i % 2 == 0)", "prompt_tokens": 386, "completion_tokens": 457, "duration": 7.25264573097229, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 417, "completion_tokens": 413, "duration": 7.296135187149048, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    odd_numbers = sorted([num for num in collatz_seq if num % 2 != 0])\n    return odd_numbers", "prompt_tokens": 520, "completion_tokens": 673, "duration": 11.924331188201904, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    if not (1 <= int(month) <= 12):\n        return False\n    if not (1 <= int(day) <= 31 and int(month) in [1, 3, 5, 7, 8, 10, 12] or\n            1 <= int(day) <= 30 and int(month) in [4, 6, 9, 11] or\n            1 <= int(day) <= 29 and int(month) == 2):\n        return False\n    if len(year) != 4:\n        return False\n    return True", "prompt_tokens": 552, "completion_tokens": 582, "duration": 9.538596391677856, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 429, "completion_tokens": 483, "duration": 7.273863792419434, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 1:\n                return False\n        else:\n            count[num] = 1\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 538, "completion_tokens": 547, "duration": 9.36973762512207, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if is_prime(length):\n            return 'YES'\n    return 'NO'", "prompt_tokens": 543, "completion_tokens": 501, "duration": 8.561270236968994, "result": "failed: name 'is_prime' is not defined", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    total_sum = 0\n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n        total_sum += abs(num)\n    return product * total_sum", "prompt_tokens": 411, "completion_tokens": 365, "duration": 6.013948678970337, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    pass", "prompt_tokens": 2673, "completion_tokens": 415, "duration": 8.403892993927002, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        tribonacci = [0, 1, 1]\n        for i in range(3, n+1):\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n        return tribonacci", "prompt_tokens": 524, "completion_tokens": 478, "duration": 7.259109973907471, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    odd_product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            odd_product *= int(digit)\n            has_odd = True\n    return odd_product if has_odd else 0", "prompt_tokens": 360, "completion_tokens": 437, "duration": 8.069102048873901, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                return True\n            stack.pop()\n    return False", "prompt_tokens": 422, "completion_tokens": 678, "duration": 11.371312379837036, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum(int(x)**2 for x in lst)", "prompt_tokens": 446, "completion_tokens": 407, "duration": 6.983564138412476, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha()):\n        return True\n    return False", "prompt_tokens": 426, "completion_tokens": 391, "duration": 6.0478034019470215, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr): \n    result = -1 \n    for i in range(1, len(arr)): \n        if arr[i] < arr[i-1]: \n            result = i - 1 \n    return result", "prompt_tokens": 392, "completion_tokens": 701, "duration": 11.716243028640747, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    max_neg = None\n    min_pos = None\n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    return (max_neg, min_pos)", "prompt_tokens": 427, "completion_tokens": 467, "duration": 7.001868486404419, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return max(float(a), float(b)) if type(a) in [int, str] or type(b) in [int, str] else None\n    else:\n        return max(a, b) if a != b else None", "prompt_tokens": 430, "completion_tokens": 433, "duration": 7.369523048400879, "result": "failed: could not convert string to float: '2,3'", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1, 2):\n        for j in range(1, n//2 + 1, 2):\n            for k in range(1, n//2 + 1, 2):\n                for l in range(1, n//2 + 1, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False", "prompt_tokens": 366, "completion_tokens": 650, "duration": 10.657765626907349, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    return n * special_factorial(n-1) * factorial(n-1)", "prompt_tokens": 384, "completion_tokens": 437, "duration": 7.463041305541992, "result": "failed: name 'factorial' is not defined", "passed": false}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result[:-2] + '-'\n                consecutive_spaces = 1\n            else:\n                result += '_'\n        else:\n            result += char\n            consecutive_spaces = 0\n    return result", "prompt_tokens": 395, "completion_tokens": 441, "duration": 8.019833326339722, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 503, "completion_tokens": 437, "duration": 6.538631916046143, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i%3==0 else x**3 if i%4==0 else x for i, x in enumerate(lst))", "prompt_tokens": 459, "completion_tokens": 411, "duration": 6.277622222900391, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "import math\n\ndef words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 436, "completion_tokens": 682, "duration": 11.249897003173828, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 444, "completion_tokens": 494, "duration": 7.624995470046997, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 404, "completion_tokens": 490, "duration": 8.276018381118774, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 408, "completion_tokens": 544, "duration": 7.765162944793701, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 454, "completion_tokens": 810, "duration": 11.21431827545166, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = {\n        'Mercury': 1,\n        'Venus': 2,\n        'Earth': 3,\n        'Mars': 4,\n        'Jupiter': 5,\n        'Saturn': 6,\n        'Uranus': 7,\n        'Neptune': 8\n    }\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets[planet1], planets[planet2])\n    end = max(planets[planet1], planets[planet2])\n    result = [planet for planet, pos in planets.items() if start < pos < end]\n    return tuple(sorted(result, key=lambda x: planets[x]))", "prompt_tokens": 500, "completion_tokens": 541, "duration": 7.686963081359863, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    return sorted(lst, key=lambda x: (len(x), x))", "prompt_tokens": 476, "completion_tokens": 501, "duration": 8.303173303604126, "result": "failed: name 'sorted_list_sum' is not defined", "passed": false}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 375, "completion_tokens": 477, "duration": 7.868189334869385, "result": "failed: name 'is_prime' is not defined", "passed": false}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 426, "completion_tokens": 404, "duration": 5.98035454750061, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(s - g) if s != g else 0 for s, g in zip(game, guess)]", "prompt_tokens": 519, "completion_tokens": 392, "duration": 5.932657957077026, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strengths = [(ext, sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())) for ext in extensions]\n    max_strength = max(strengths, key=lambda x: x[1])\n    return f'{class_name}.{max_strength[0]}'", "prompt_tokens": 566, "completion_tokens": 598, "duration": 9.764029741287231, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in a + a", "prompt_tokens": 418, "completion_tokens": 599, "duration": 8.569072246551514, "result": "failed: test #1", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 354, "completion_tokens": 516, "duration": 7.238502502441406, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 390, "completion_tokens": 685, "duration": 9.544980764389038, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 397, "completion_tokens": 509, "duration": 7.353994846343994, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    max_word = ''\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word", "prompt_tokens": 409, "completion_tokens": 612, "duration": 8.629878520965576, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_carrots = number + need\n    remaining_carrots = max(0, remaining - need)\n    return [total_carrots, remaining_carrots]", "prompt_tokens": 566, "completion_tokens": 469, "duration": 6.7996509075164795, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    stack = [operand[0]]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack.append(operand[i + 1])\n        elif operator[i] == '-':\n            stack.append(-operand[i + 1])\n        elif operator[i] == '*':\n            stack[-1] *= operand[i + 1]\n        elif operator[i] == '/':\n            stack[-1] = int(stack[-1] / operand[i + 1])\n    return sum(stack)", "prompt_tokens": 496, "completion_tokens": 994, "duration": 15.775713682174683, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)", "prompt_tokens": 396, "completion_tokens": 440, "duration": 6.420871019363403, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "prompt_tokens": 365, "completion_tokens": 423, "duration": 6.241177082061768, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0]", "prompt_tokens": 393, "completion_tokens": 394, "duration": 5.615293264389038, "result": "failed: Test 1", "passed": false}
