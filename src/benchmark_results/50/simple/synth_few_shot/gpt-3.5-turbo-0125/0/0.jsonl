{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 381, "completion_tokens": 654, "duration": 13.115525245666504}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total = 0\n    for row in grid:\n        water = sum(row)\n        total += math.ceil(water / capacity)\n    return total", "prompt_tokens": 616, "completion_tokens": 828, "duration": 15.71407699584961}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 463, "completion_tokens": 451, "duration": 9.561789751052856}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in s.split():\n        if sum(1 for char in word if char in consonants) == n:\n            result.append(word)\n    return result", "prompt_tokens": 474, "completion_tokens": 471, "duration": 10.34310245513916}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] not in vowels and word[i - 1] in vowels and word[i + 1] in vowels:\n            return word[i]\n    return ''", "prompt_tokens": 442, "completion_tokens": 524, "duration": 8.493539333343506}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':  # Push open parentheses onto the stack\n                stack.append(char)\n            else:\n                if not stack or stack[-1] != '(':  # Check if stack is empty or top is not open parenthesis\n                    return 'No'\n                stack.pop()  # Pop open parenthesis\n    return 'Yes' if len(stack) == 0 else 'No'", "prompt_tokens": 461, "completion_tokens": 912, "duration": 21.466230869293213}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 510, "completion_tokens": 367, "duration": 6.30172872543335}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 != 0 and i % 2 == 0)", "prompt_tokens": 390, "completion_tokens": 444, "duration": 9.378466129302979}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if num < 100)", "prompt_tokens": 421, "completion_tokens": 374, "duration": 6.843295335769653}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    def collatz_sequence(num, seq=None):\n        if seq is None:\n            seq = [num]\n        if num == 1:\n            return seq\n        if num % 2 == 0:\n            return collatz_sequence(num // 2, seq + [num // 2])\n        else:\n            return collatz_sequence(3 * num + 1, seq + [3 * num + 1])\n\n    collatz_seq = collatz_sequence(n)\n    return sorted([num for num in collatz_seq if num % 2 != 0])", "prompt_tokens": 524, "completion_tokens": 690, "duration": 11.273625135421753}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12):\n        return False\n    if month in ['01', '03', '05', '07', '08', '10', '12']:\n        return 1 <= int(day) <= 31\n    elif month in ['04', '06', '09', '11']:\n        return 1 <= int(day) <= 30\n    elif month == '02':\n        if int(year) % 4 == 0:\n            return 1 <= int(day) <= 29\n        else:\n            return 1 <= int(day) <= 28\n    return False", "prompt_tokens": 556, "completion_tokens": 627, "duration": 16.27463459968567}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 433, "completion_tokens": 483, "duration": 8.205869436264038}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 1:\n                return False\n        else:\n            count[num] = 1\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 542, "completion_tokens": 526, "duration": 12.628153085708618}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    length = find_intersection_length(interval1, interval2)\n    if is_prime(length):\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 547, "completion_tokens": 576, "duration": 11.52023959159851}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sum_magnitudes = sum(abs(x) for x in arr)\n    sign_product = 1\n    for x in arr:\n        if x == 0:\n            return 0\n        sign_product *= x // abs(x)\n    return sum_magnitudes * sign_product", "prompt_tokens": 415, "completion_tokens": 455, "duration": 9.956979751586914}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(row, col, path):\n        if len(path) == k:\n            return path\n        neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        next_paths = []\n        for dr, dc in neighbors:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < len(grid) and 0 <= new_col < len(grid[0]) and (new_row, new_col) not in path:\n                next_paths.append((new_row, new_col))\n        next_paths.sort(key=lambda x: (grid[x[0]][x[1]], x))\n        for next_row, next_col in next_paths:\n            res = dfs(next_row, next_col, path + [(next_row, next_col)])\n            if res:\n                return res\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            res = dfs(i, j, [(i, j)])\n            if res:\n                return [grid[i][j] for i, j in res]", "prompt_tokens": 1414, "completion_tokens": 1408, "duration": 28.45044231414795}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        tribonacci = [0, 1, 1]\n        for i in range(3, n+1):\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n        return tribonacci", "prompt_tokens": 528, "completion_tokens": 478, "duration": 10.67017936706543}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    odd_product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            odd_product *= int(digit)\n            has_odd = True\n    return odd_product if has_odd else 0", "prompt_tokens": 364, "completion_tokens": 437, "duration": 7.446505308151245}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return True\n    return False", "prompt_tokens": 426, "completion_tokens": 634, "duration": 15.465299129486084}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum(int(x)**2 for x in lst)", "prompt_tokens": 450, "completion_tokens": 415, "duration": 8.239393472671509}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    return False", "prompt_tokens": 430, "completion_tokens": 387, "duration": 6.882937669754028}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr): \n    result = -1 \n    for i in range(1, len(arr)): \n        if arr[i] <= arr[i-1]: \n            result = i - 1 \n    return result", "prompt_tokens": 396, "completion_tokens": 612, "duration": 9.602451086044312}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    max_neg = None\n    min_pos = None\n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    return (max_neg, min_pos)", "prompt_tokens": 431, "completion_tokens": 430, "duration": 8.03303337097168}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "prompt_tokens": 434, "completion_tokens": 532, "duration": 13.668148517608643}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1, 2):\n        for j in range(1, n//2 + 1, 2):\n            for k in range(1, n//2 + 1, 2):\n                for l in range(1, n//2 + 1, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False", "prompt_tokens": 370, "completion_tokens": 564, "duration": 17.111623525619507}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    return n * special_factorial(n-1) * factorial(n)", "prompt_tokens": 388, "completion_tokens": 406, "duration": 8.838340759277344}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result[:-2] + '-'\n                consecutive_spaces = 1\n            else:\n                result += '_'\n        else:\n            result += char\n            consecutive_spaces = 0\n    return result", "prompt_tokens": 399, "completion_tokens": 422, "duration": 10.244268417358398}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha() or len([c for c in name if c.isdigit()]) > 3 or ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 507, "completion_tokens": 395, "duration": 6.388988971710205}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 463, "completion_tokens": 590, "duration": 16.887322425842285}
{"task_id": "HumanEval/143", "generated_code": "import math\n\ndef words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 440, "completion_tokens": 679, "duration": 15.787473917007446}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    result = (num_x * num_n) / (den_x * den_n)\n    return result.is_integer()", "prompt_tokens": 448, "completion_tokens": 684, "duration": 10.691206216812134}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 408, "completion_tokens": 421, "duration": 6.764742851257324}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 412, "completion_tokens": 466, "duration": 12.39883041381836}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n): \n    a = [i*i - i + 1 for i in range(1, n+1)] \n    count = 0 \n    for i in range(n): \n        for j in range(i+1, n): \n            for k in range(j+1, n): \n                if (a[i] + a[j] + a[k]) % 3 == 0: \n                    count += 1 \n    return count", "prompt_tokens": 458, "completion_tokens": 656, "duration": 11.932999610900879}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])", "prompt_tokens": 504, "completion_tokens": 589, "duration": 17.44683313369751}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    return sorted(filter(lambda x: len(x) % 2 == 0, lst), key=lambda x: (len(x), x))", "prompt_tokens": 480, "completion_tokens": 425, "duration": 11.244698524475098}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 379, "completion_tokens": 427, "duration": 11.088785409927368}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x > 0)", "prompt_tokens": 430, "completion_tokens": 441, "duration": 11.67738151550293}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(a - b) if a != b else 0 for a, b in zip(game, guess)]", "prompt_tokens": 523, "completion_tokens": 379, "duration": 7.119433403015137}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    strongest_extension = max(extensions, key=strength)\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 570, "completion_tokens": 577, "duration": 9.592930555343628}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 422, "completion_tokens": 616, "duration": 13.89977741241455}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)", "prompt_tokens": 358, "completion_tokens": 580, "duration": 10.374797105789185}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, symbol in roman_map.items():\n        while number >= value:\n            result += symbol\n            number -= value\n    return result", "prompt_tokens": 394, "completion_tokens": 703, "duration": 15.901655673980713}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    max_side = max(sides)\n    sides.remove(max_side)\n    return max_side ** 2 == sides[0] ** 2 + sides[1] ** 2", "prompt_tokens": 401, "completion_tokens": 457, "duration": 13.872621774673462}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    max_word = ''\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word", "prompt_tokens": 413, "completion_tokens": 670, "duration": 14.40406060218811}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_carrots = number + need\n    if remaining >= need:\n        remaining -= need\n    else:\n        remaining = 0\n    return [total_carrots, remaining]", "prompt_tokens": 570, "completion_tokens": 530, "duration": 8.92931079864502}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '/':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 500, "completion_tokens": 873, "duration": 17.495863914489746}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)", "prompt_tokens": 400, "completion_tokens": 448, "duration": 6.915029525756836}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()", "prompt_tokens": 369, "completion_tokens": 503, "duration": 8.002066612243652}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0]", "prompt_tokens": 397, "completion_tokens": 381, "duration": 12.353997230529785}
