{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.3416411876678467}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 373, "completion_tokens": 33, "duration": 1.649634599685669}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.5884103775024414}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = [word for word in words if sum(1 for letter in word if letter in consonants) == n]\n    return result", "prompt_tokens": 231, "completion_tokens": 79, "duration": 2.100670099258423}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 98, "duration": 2.544966220855713}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        count += s.count('(') - s.count(')')\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 52, "duration": 1.9060235023498535}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.5279669761657715}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 1.7237498760223389}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 1.5712287425994873}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([num for num in collatz if num % 2 != 0])", "prompt_tokens": 281, "completion_tokens": 82, "duration": 2.3564021587371826}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "prompt_tokens": 313, "completion_tokens": 149, "duration": 3.139254570007324}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 1.8809149265289307}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 44, "duration": 1.7349889278411865}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 146, "duration": 2.8581490516662598}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n    return sum(abs(num) for num in arr) * product", "prompt_tokens": 172, "completion_tokens": 61, "duration": 1.9206321239471436}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    start = min(min(row) for row in grid)\n    path = [start]\n    visited = {(i, j) for i in range(n) for j in range(n) if grid[i][j] == start}\n    \n    while len(path) < k:\n        neighbors = [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]\n        neighbors = [(x, y) for x, y in neighbors if 0 <= x < n and 0 <= y < n and (x, y) not in visited]\n        next_cell = min(neighbors, key=lambda cell: grid[cell[0]][cell[1]])\n        path.append(grid[next_cell[0]][next_cell[1]])\n        visited.add(next_cell)\n        i, j = next_cell\n    \n    return path", "prompt_tokens": 446, "completion_tokens": 195, "duration": 4.056195259094238}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = [0, 1, 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 92, "duration": 2.5477190017700195}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0", "prompt_tokens": 121, "completion_tokens": 53, "duration": 1.545386552810669}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < 2", "prompt_tokens": 183, "completion_tokens": 52, "duration": 1.558398962020874}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 1.3268754482269287}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    else:\n        return False", "prompt_tokens": 187, "completion_tokens": 66, "duration": 1.9874470233917236}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 153, "completion_tokens": 53, "duration": 1.8830547332763672}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 188, "completion_tokens": 90, "duration": 2.1633763313293457}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        if type(a) == int or type(a) == float:\n            return a\n        elif type(b) == int or type(b) == float:\n            return b\n        else:\n            return a if ',' in a else b", "prompt_tokens": 191, "completion_tokens": 99, "duration": 2.1557509899139404}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "prompt_tokens": 127, "completion_tokens": 27, "duration": 1.2282133102416992}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 145, "completion_tokens": 55, "duration": 1.6251227855682373}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    return re.sub(r'\\s{3,}', '-', re.sub(r'\\s{2}', '_', text.replace(' ', '_')))", "prompt_tokens": 156, "completion_tokens": 32, "duration": 1.4455740451812744}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 99, "duration": 2.1593031883239746}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 1.5993671417236328}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 95, "duration": 2.312540292739868}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    result = x_num * n_num / (x_denom * n_denom)\n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 64, "duration": 1.7348055839538574}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 1.221360445022583}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "prompt_tokens": 169, "completion_tokens": 67, "duration": 1.6864166259765625}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 123, "duration": 2.756988525390625}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    return tuple(planet for planet in planets[start_idx+1:end_idx] if planet != planet1 and planet != planet2)", "prompt_tokens": 261, "completion_tokens": 133, "duration": 2.490954637527466}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 1.3179359436035156}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 79, "duration": 1.9106733798980713}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 34, "duration": 1.6602203845977783}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 39, "duration": 1.3582422733306885}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 68, "duration": 4.337838649749756}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "prompt_tokens": 179, "completion_tokens": 136, "duration": 2.583967924118042}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(num) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(num) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 75, "duration": 1.7412424087524414}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 142, "duration": 2.953531265258789}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.6244664192199707}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars_count = unique_chars(word)\n        if unique_chars_count > max_unique_chars or (unique_chars_count == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars_count\n\n    return max_word", "prompt_tokens": 170, "completion_tokens": 93, "duration": 1.9959092140197754}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 327, "completion_tokens": 51, "duration": 1.4749343395233154}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 48, "duration": 1.7441942691802979}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 30, "duration": 1.167536735534668}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 1.1888134479522705}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 35, "duration": 1.0702800750732422}
