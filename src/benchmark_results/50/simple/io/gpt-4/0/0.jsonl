{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            min_sum = min(min_sum, sum(nums[i:j+1]))\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 57, "duration": 3.200950860977173}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 373, "completion_tokens": 33, "duration": 2.469675302505493}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 2.429572105407715}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    vowels = 'aeiou'\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word.lower() if char not in vowels)\n        if consonants == n:\n            result.append(word)\n    return result", "prompt_tokens": 231, "completion_tokens": 69, "duration": 3.7898778915405273}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    word = word[::-1]\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return ''", "prompt_tokens": 199, "completion_tokens": 78, "duration": 4.7237677574157715}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    if str1.count('(') + str2.count('(') != str1.count(')') + str2.count(')'):\n        return 'No'\n    if str1.count(')') > str2.count('(') and str1.count('(') < str2.count(')'):\n        return 'No'\n    if str2.count(')') > str1.count('(') and str2.count('(') < str1.count(')'):\n        return 'No'\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 121, "duration": 7.506801605224609}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 267, "completion_tokens": 18, "duration": 2.105649948120117}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])", "prompt_tokens": 147, "completion_tokens": 41, "duration": 2.738921642303467}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum([i for i in arr[:k] if len(str(i)) <= 2])", "prompt_tokens": 178, "completion_tokens": 32, "duration": 2.8804965019226074}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 93, "duration": 4.900545835494995}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    return True", "prompt_tokens": 313, "completion_tokens": 121, "duration": 4.0723302364349365}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 67, "duration": 3.3092527389526367}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) != len(set(lst)):\n        return False\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 30, "duration": 3.0666513442993164}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\"", "prompt_tokens": 304, "completion_tokens": 136, "duration": 5.609742641448975}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num < 0:\n            product_of_signs *= -1\n            sum_of_magnitudes += abs(num)\n        elif num > 0:\n            sum_of_magnitudes += num\n    return sum_of_magnitudes * product_of_signs", "prompt_tokens": 172, "completion_tokens": 99, "duration": 5.318799734115601}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    min_path = [float('inf')] * k\n\n    def dfs(i, j, path):\n        nonlocal min_path\n        if len(path) == k:\n            min_path = min(min_path, path)\n            return\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < N and 0 <= nj < N:\n                dfs(ni, nj, path + [grid[ni][nj]])\n\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]])\n\n    return min_path", "prompt_tokens": 446, "completion_tokens": 378, "duration": 16.954152584075928}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n < 0:\n        return []\n    elif n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 2]\n    else:\n        tri_list = [3, 2]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i / 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i - 3])\n        return tri_list", "prompt_tokens": 285, "completion_tokens": 129, "duration": 5.437743902206421}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    if has_odd:\n        return product\n    else:\n        return 0", "prompt_tokens": 121, "completion_tokens": 70, "duration": 3.6310181617736816}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 183, "completion_tokens": 58, "duration": 3.7824738025665283}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(i)**2 for i in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 2.206343173980713}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    return False", "prompt_tokens": 187, "completion_tokens": 50, "duration": 4.188344240188599}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 2.642853260040283}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    return (a, b)", "prompt_tokens": 188, "completion_tokens": 75, "duration": 3.664137601852417}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    a_val = float(str(a).replace(',', '.'))\n    b_val = float(str(b).replace(',', '.'))\n    \n    if a_val > b_val:\n        return a\n    elif a_val < b_val:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 67, "duration": 3.5267395973205566}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    # A number can be written as the sum of exactly 4 positive even numbers if it is greater than or equal to 8 and even\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 57, "duration": 3.1056015491485596}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 68, "duration": 3.419813394546509}
{"task_id": "HumanEval/140", "generated_code": "import re\n\ndef fix_spaces(text):\n    text = re.sub(' {3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 38, "duration": 2.5847556591033936}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    import re\n    if re.match(r'^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$', file_name):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 264, "completion_tokens": 61, "duration": 3.2499911785125732}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 219, "completion_tokens": 72, "duration": 3.333096504211426}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 93, "duration": 4.41594386100769}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x: str, n: str) -> bool:\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 205, "completion_tokens": 66, "duration": 3.3272130489349365}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(abs(x))))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 2.5064892768859863}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count", "prompt_tokens": 169, "completion_tokens": 59, "duration": 6.078867673873901}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 103, "duration": 4.617316484451294}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        start = min(planets.index(planet1), planets.index(planet2))\n        end = max(planets.index(planet1), planets.index(planet2))\n        return tuple(planets[start+1:end])", "prompt_tokens": 261, "completion_tokens": 112, "duration": 7.12033486366272}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    lst = [i for i in lst if len(i) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst", "prompt_tokens": 237, "completion_tokens": 47, "duration": 6.3278422355651855}
{"task_id": "HumanEval/150", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 136, "completion_tokens": 129, "duration": 6.9231109619140625}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 40, "duration": 3.9530539512634277}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(a - b) if a != b else 0 for a, b in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 4.663741827011108}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.017483949661255}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a , b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 179, "completion_tokens": 46, "duration": 6.108165740966797}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num = abs(num)\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 76, "duration": 5.476156711578369}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 166, "duration": 7.400917053222656}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 5.448533535003662}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            if word < max_word:\n                max_word = word\n    return max_word", "prompt_tokens": 170, "completion_tokens": 86, "duration": 6.583548069000244}
{"task_id": "HumanEval/159", "generated_code": "def eat(number: int, need: int, remaining: int) -> list:\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 47, "duration": 5.9169416427612305}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(1, len(operand)):\n        expression += operator[i-1] + str(operand[i])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 52, "duration": 4.352366209030151}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() for c in s)", "prompt_tokens": 157, "completion_tokens": 51, "duration": 6.894346714019775}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 36, "duration": 4.0937981605529785}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 43, "duration": 4.401954889297485}
