{"task_id": "HumanEval/0", "completion": "    f has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    f separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if len(stack) == 0:\n                result.append(current_group)\n                current_group = ''\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number % 1"}
{"task_id": "HumanEval/3", "completion": "    f below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    port statistics\n\ndef mean_absolute_deviation(numbers):\n    mean = statistics.mean(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = statistics.mean(deviations)\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    f intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    f parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    max_level = 0\n    current_level = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n        \n        if char == ' ':\n            result.append(max_level)\n            max_level = 0\n            current_level = 0\n    \n    result.append(max_level)\n    \n    return result"}
{"task_id": "HumanEval/7", "completion": "    f filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    if not numbers:\n        return (0, 1)\n    \n    sum = 0\n    product = numbers[0]\n    \n    for num in numbers:\n        sum += num\n        product *= num\n    \n    return (sum, product)"}
{"task_id": "HumanEval/9", "completion": "    f rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        max_numbers.append(current_max)\n    return max_numbers"}
{"task_id": "HumanEval/10", "completion": "    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "    # Determine the length of the longer string\n    max_len = max(len(a), len(b))\n    \n    # Pad the shorter string with leading zeros to match the length of the longer string\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n    \n    # Perform binary XOR on the padded strings\n    result = bin(int(a, 2) ^ int(b, 2))[2:]\n    \n    return result"}
{"task_id": "HumanEval/12", "completion": "    f longest(strings):\n    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "    f greatest_common_divisor(a: int, b: int) -> int:\n    a = abs(a)\n    b = abs(b)\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    f all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "completion": "    f string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "    f parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = []\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations"}
{"task_id": "HumanEval/18", "completion": "    f how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "    f sort_numbers(numbers: str) -> str:\n    number_mapping = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_mapping[x])\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[j] - numbers[i])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    f rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    f filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]"}
{"task_id": "HumanEval/23", "completion": "    f strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    f largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    f factorize(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers and num != unique_numbers[-1]:\n            unique_numbers.append(num)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "    f flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "completion": "    f concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    f filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    f get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "    f is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/33", "completion": "    return [sorted(l[i:i+3]) if i % 3 == 0 and i+2 < len(l) else l[i] for i in range(len(l))]"}
{"task_id": "HumanEval/34", "completion": "    ef unique(l: list):\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "    ef max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "    ef fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n+1):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "    ef sort_even(l: list):\n    even_values = [l[i] for i in range(len(l)) if i % 2 == 0]\n    odd_values = [l[i] for i in range(len(l)) if i % 2 != 0]\n    sorted_even_values = sorted(even_values)\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(sorted_even_values.pop(0))\n        else:\n            result.append(odd_values.pop(0))\n    return result"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return []\n        elif n == 1:\n            return [2]\n        elif n == 2:\n            return [2, 3]\n        else:\n            fib_seq = [2, 3]\n            while len(fib_seq) < n:\n                fib_seq.append(fib_seq[-1] + fib_seq[-2])\n            return fib_seq\n\n    fib_seq = fibonacci(n)\n    prime_fib_seq = [num for num in fib_seq if is_prime(num)]\n    return prime_fib_seq[n-1] if n <= len(prime_fib_seq) else None"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "    ef car_race_collision(n: int) -> int:\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "completion": "    ef incr_list(l):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    ef pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if base == 10:\n        return str(x)\n    elif base == x:\n        return '10'\n    else:\n        digits = []\n        while x > 0:\n            digits.append(str(x % base))\n            x //= base\n        return ''.join(digits[::-1])"}
{"task_id": "HumanEval/45", "completion": "    ef triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    ef fib4(n: int):\n    fib = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n    return fib[n]"}
{"task_id": "HumanEval/47", "completion": "    ef median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    ef is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "    ef modp(n: int, p: int):\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    ef remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "completion": "    ef add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "    ef same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "    ef fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "    ef correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    ef monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/58", "completion": "    ef common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "completion": "    ef largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_factor = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0 and is_prime(i):\n            largest_factor = i\n\n    return largest_factor"}
{"task_id": "HumanEval/60", "completion": "    ef sum_to_n(n: int):\n    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "    ef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    ef derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/63", "completion": "    ef fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "    ef vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    if s[-1].lower() == 'y':\n        vowels.append('y')\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "    ef circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    shift = shift % num_digits\n    if shift >= num_digits:\n        shifted_str = x_str[::-1]\n    else:\n        shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str"}
{"task_id": "HumanEval/66", "completion": "    ef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "    ef fruit_distribution(s: str, n: int) -> int:\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Initialize variables to store the number of apples and oranges\n    apples = 0\n    oranges = 0\n    \n    # Iterate through the words and check if they represent apples or oranges\n    for i in range(len(words)):\n        if words[i] == \"apples\":\n            apples = int(words[i-1])\n        elif words[i] == \"oranges\":\n            oranges = int(words[i-1])\n    \n    # Calculate the number of mango fruits\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    ef pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if len(even_values) == 0:\n        return []\n    smallest_value = min(even_values)\n    smallest_index = arr.index(smallest_value)\n    return [smallest_value, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "    ef search(lst):\n    max_freq = -1\n    max_freq_num = -1\n    for num in lst:\n        freq = lst.count(num)\n        if freq > max_freq:\n            max_freq = freq\n            max_freq_num = num\n    if max_freq_num > max_freq:\n        return max_freq_num\n    else:\n        return -1"}
{"task_id": "HumanEval/70", "completion": "    ef strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "    mport math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    ef will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "    if arr == arr[::-1]:\n        return 0\n    \n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1\n    \n    return dp[0][n-1]"}
{"task_id": "HumanEval/74", "completion": "    ef total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "    ef is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3"}
{"task_id": "HumanEval/76", "completion": "    return n**int(x**(1/n)) == x"}
{"task_id": "HumanEval/77", "completion": "    if a < 0:\n        return False\n    return a**(1/3) % 1 == 0"}
{"task_id": "HumanEval/78", "completion": "    ef hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    ef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'"}
{"task_id": "HumanEval/80", "completion": "    ef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "    ef numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    ef prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    if n == 1:\n        count = 1\n    else:\n        count = 9 * 2 * (10 ** (n - 2)) + 10 ** (n - 1)\n    return count"}
{"task_id": "HumanEval/84", "completion": "    ef solve(N):\n    binary = bin(N)[2:]  # convert N to binary and remove the '0b' prefix\n    sum_of_digits = sum(int(digit) for digit in binary)  # sum the digits of the binary number\n    return format(sum_of_digits, '0' + str(len(binary)))  # convert the sum to binary with leading zeros"}
{"task_id": "HumanEval/85", "completion": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0]) if any(lst[i] % 2 == 0 for i in range(1, len(lst), 2)) else 0"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    ordered_words = [\"\".join(sorted(word)) for word in words]\n    return \" \".join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "    ef get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "    ef sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "    ef encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                index = (alphabet.index(char) + 2 * 2) % 26\n                encrypted += alphabet[index]\n            else:\n                index = (alphabet.upper().index(char) + 2 * 2) % 26\n                encrypted += alphabet.upper()[index]\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "    ef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    \n    return second_smallest"}
{"task_id": "HumanEval/91", "completion": "    ef is_bored(S):\n    sentences = S.split('. ')\n    sentences = [sentence.strip() for sentence in sentences]\n    boredoms = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "    ef encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    ef skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    if largest_prime is None:\n        return 0\n\n    return sum_of_digits(largest_prime)"}
{"task_id": "HumanEval/95", "completion": "    ef check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    keys = list(dict.keys())\n    first_key = keys[0]\n    \n    if not isinstance(first_key, str):\n        return False\n    \n    if first_key.islower():\n        for key in keys:\n            if not isinstance(key, str) or not key.islower():\n                return False\n    elif first_key.isupper():\n        for key in keys:\n            if not isinstance(key, str) or not key.isupper():\n                return False\n    else:\n        return False\n    \n    return True"}
{"task_id": "HumanEval/96", "completion": "    ef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    ef multiply(a, b):\n    return abs(a % 10 * b % 10)"}
{"task_id": "HumanEval/98", "completion": "    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    ef make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 1)\n    return stones"}
{"task_id": "HumanEval/101", "completion": "    ef words_string(s):\n    return s.replace(',', ' ').split()"}
{"task_id": "HumanEval/102", "completion": "    ef choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even"}
{"task_id": "HumanEval/103", "completion": "    ef rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n        return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "    ef unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])"}
{"task_id": "HumanEval/105", "completion": "    ef by_length(arr):\n    # Filter out numbers that are not between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each number to its corresponding name\n    names_arr = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    result_arr = [names_arr[num-1] for num in reversed_arr]\n    \n    return result_arr"}
{"task_id": "HumanEval/106", "completion": "    ef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "completion": "    ef even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "    ef count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "    ef move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr[::-1]:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False"}
{"task_id": "HumanEval/110", "completion": "    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    \n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    if all(x % 2 == 0 for x in lst1):\n                        return \"YES\"\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n    \n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n    \n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    \n    max_count = max(counts.values())\n    result = {}\n    for letter, count in counts.items():\n        if count == max_count:\n            result[letter] = count\n    \n    return result"}
{"task_id": "HumanEval/112", "completion": "    ef reverse_delete(s,c):\n    result = ''\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "    ef odd_count(lst):\n    result = []\n    for string in lst:\n        count = 0\n        for digit in string:\n            if int(digit) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements in the string {} of the input.\".format(count))\n    return result"}
{"task_id": "HumanEval/114", "completion": "    ef minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        \n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    ef max_fill(grid, capacity):\n    num_buckets = 0\n    for row in grid:\n        for well in row:\n            if well > capacity:\n                num_buckets += math.ceil(well / capacity)\n            else:\n                num_buckets += 1\n    return num_buckets"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1')))"}
{"task_id": "HumanEval/117", "completion": "    ef select_words(s: str, n: int) -> List[str]:\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for char in word:\n            if char.lower() not in ['a', 'e', 'i', 'o', 'u']:\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "    ef get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = []\n    for i in range(1, len(word)-1):\n        if word[i] in vowels:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "    ef match_parens(lst):\n    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return 'No'\n                stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "    if k == 0:\n        return []\n    \n    return sorted(arr)[-k:]"}
{"task_id": "HumanEval/121", "completion": "    return sum([num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0])"}
{"task_id": "HumanEval/122", "completion": "    sum = 0\n    for i in range(k):\n        if arr[i] >= 10 and (arr[i] <= 99 or arr[i] >= 100):\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "    ef get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([x for x in collatz if x % 2 != 0 or x == 1])"}
{"task_id": "HumanEval/124", "completion": "    ef valid_date(date):\n    try:\n        month, day, year = date.split('-')\n        month = int(month)\n        day = int(day)\n        year = int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        else:\n            return False\n        return True\n    except:\n        return False"}
{"task_id": "HumanEval/125", "completion": "    ef split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c.lower()) % 2 != 0)"}
{"task_id": "HumanEval/126", "completion": "    ef is_sorted(lst):\n    return lst == sorted(lst) and len(set(lst)) == len(lst)"}
{"task_id": "HumanEval/127", "completion": "    ef intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    intersection_length = intersection_end - intersection_start + 1\n\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "    ef prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        sign_product *= 1 if num > 0 else -1 if num < 0 else 0\n        magnitude_sum += abs(num)\n    \n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "completion": "    ef minPath(grid, k):\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        path.append(grid[i][j])\n        neighbors = []\n        if i > 0:\n            neighbors.append((i-1, j))\n        if i < len(grid) - 1:\n            neighbors.append((i+1, j))\n        if j > 0:\n            neighbors.append((i, j-1))\n        if j < len(grid[0]) - 1:\n            neighbors.append((i, j+1))\n        neighbors.sort(key=lambda x: (grid[x[0]][x[1]], len(path), k - len(path)))\n        for neighbor in neighbors:\n            ni, nj = neighbor\n            if (ni, nj) not in visited:\n                visited.add((ni, nj))\n                result = dfs(ni, nj, path)\n                if result:\n                    return result\n                visited.remove((ni, nj))\n        path.pop()\n\n    visited = set()\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited.add((i, j))\n            result = dfs(i, j, [])\n            if result:\n                return result"}
{"task_id": "HumanEval/130", "completion": "    ef tri(n):\n    sequence = [3]\n    if n == 0:\n        return sequence\n    elif n == 1:\n        sequence.append(1 + (1 / 2))\n        return sequence\n    elif n == 2:\n        sequence.append(1 + (2 / 2))\n        sequence.append(sequence[0] + sequence[1] + sequence[1])\n        return sequence\n    else:\n        sequence.append(1 + (2 / 2))\n        sequence.append(sequence[0] + sequence[1] + sequence[1])\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + (i / 2))\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n        return sequence"}
{"task_id": "HumanEval/131", "completion": "    product = None\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            if product is None:\n                product = int(digit)\n            else:\n                product *= int(digit)\n    if product is None:\n        return 0\n    return product"}
{"task_id": "HumanEval/132", "completion": "    ef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    return len(stack) < len(string)"}
{"task_id": "HumanEval/133", "completion": "    ef sum_squares(lst):\n    return sum([int(x)**2 for x in lst])"}
{"task_id": "HumanEval/134", "completion": "    ef check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha() or last_char == \" \":\n        return False\n    if len(txt.split()[-1]) == 1:\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "    ef can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "    ef largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    if negatives:\n        largest_negative = max(negatives)\n    else:\n        largest_negative = None\n    if positives:\n        smallest_positive = min(positives)\n    else:\n        smallest_positive = None\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "    ef compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        elif type(a) == int or type(a) == float:\n            return max(a, b)\n        elif type(a) == str:\n            a = a.replace(',', '.')\n            b = b.replace(',', '.')\n            return max(a, b)\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    ef is_equal_to_sum_even(n):\n    # Check if n is less than 8, since it is not possible to write n as the sum of 4 positive even numbers if n is less than 8\n    if n < 8:\n        return False\n    \n    # Check if n is divisible by 4, since n must be divisible by 4 in order to be written as the sum of 4 positive even numbers\n    if n % 4 != 0:\n        return False\n    \n    return True"}
