{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 591, "completion_tokens": 147, "duration": 6.175367116928101, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 1, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n\n    for ch in paren_string:\n        if ch == '(':\n            open_braces_count += 1\n            current_group += ch\n        elif ch == ')':\n            if open_braces_count > 0:\n                open_braces_count -= 1\n                current_group += ch\n                if open_braces_count == 0:\n                    groups.append(current_group)\n                    current_group = \"\"\n    \n    return groups", "prompt_tokens": 650, "completion_tokens": 285, "duration": 9.8778555393219, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "is_solved": true, "solved_count": 3, "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 8.31378722190857, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 555, "completion_tokens": 109, "duration": 5.0769219398498535, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "is_solved": false, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_of_absolute_diff = sum(abs(x - mean) for x in numbers)\n    mad = sum_of_absolute_diff / len(numbers)\n    return mad", "prompt_tokens": 665, "completion_tokens": 234, "duration": 10.78096866607666, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 538, "completion_tokens": 157, "duration": 7.730746507644653, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 681, "completion_tokens": 306, "duration": 8.69731330871582, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 7.03064751625061, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 145, "duration": 8.181832790374756, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\nfrom collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    max_queue = deque()\n\n    for number in numbers:\n        while max_queue and max_queue[-1] < number:\n            max_queue.pop()\n        \n        max_queue.append(number)\n        rolling_max_list.append(max_queue[0])\n\n    return rolling_max_list", "prompt_tokens": 559, "completion_tokens": 183, "duration": 6.141766309738159, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 627, "completion_tokens": 106, "duration": 6.879832983016968, "result": "failed: name 'make_palindrome' is not defined", "passed": false}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char_a, char_b in zip(a, b):\n        if char_a != char_b:\n            result += '1'\n        else:\n            result += '0'\n    return result", "prompt_tokens": 504, "completion_tokens": 153, "duration": 9.183448076248169, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string", "prompt_tokens": 554, "completion_tokens": 158, "duration": 5.773540735244751, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 445, "completion_tokens": 91, "duration": 6.579448223114014, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "prompt_tokens": 481, "completion_tokens": 154, "duration": 7.548970699310303, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 455, "completion_tokens": 106, "duration": 4.988987445831299, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 493, "completion_tokens": 147, "duration": 7.392009496688843, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 733, "completion_tokens": 216, "duration": 8.280102968215942, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 144, "duration": 6.023836374282837, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    sorted_numerals = sorted(numeral_list, key=lambda x: numeral_dict[x])\n    return ' '.join(sorted_numerals)", "prompt_tokens": 596, "completion_tokens": 242, "duration": 8.617305755615234, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 721, "completion_tokens": 229, "duration": 10.128380060195923, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(number - min_value) / range_value for number in numbers]\n    return rescaled_numbers", "prompt_tokens": 633, "completion_tokens": 199, "duration": 6.289308786392212, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = [value for value in values if type(value) is int]\n    return filtered_values", "prompt_tokens": 492, "completion_tokens": 95, "duration": 7.541998624801636, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 389, "completion_tokens": 72, "duration": 7.324683904647827, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 4, "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 434, "completion_tokens": 123, "duration": 4.783074140548706, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 621, "completion_tokens": 178, "duration": 7.753974914550781, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n    return result", "prompt_tokens": 485, "completion_tokens": 106, "duration": 5.030752897262573, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 4, "generated_code": "def flip_case(string: str) -> str:\n    result = \"\"\n    for ch in string:\n        if ch.islower():\n            result += ch.upper()\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch\n    return result", "prompt_tokens": 461, "completion_tokens": 164, "duration": 5.929555654525757, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 426, "completion_tokens": 92, "duration": 7.547921180725098, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 116, "duration": 8.136552810668945, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums", "prompt_tokens": 538, "completion_tokens": 91, "duration": 4.368482351303101, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 7, "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 518, "completion_tokens": 116, "duration": 7.8831963539123535, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 2, "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        return None\n    \n    zero_point = None\n    for x in range(-100, 101):\n        if math.isclose(poly(xs, x), 0, abs_tol=0.0001):\n            zero_point = x\n            break\n    \n    return zero_point", "prompt_tokens": 930, "completion_tokens": 270, "duration": 8.817868709564209, "result": "failed: must be real number, not NoneType", "passed": false}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp = sorted([l[j] for j in range(i, len(l), 3)])\n            result.extend(temp)\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 698, "completion_tokens": 209, "duration": 5.516676425933838, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 1, "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 98, "duration": 4.559664011001587, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 498, "completion_tokens": 118, "duration": 4.829942941665649, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for ch in str(i):\n                if ch == '7':\n                    count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 167, "duration": 4.925646066665649, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "is_solved": false, "solved_count": 1, "generated_code": "def sort_even(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.extend(sorted(l[i: i+1]))\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 619, "completion_tokens": 170, "duration": 9.258842945098877, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 867, "completion_tokens": 453, "duration": 9.037723541259766, "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num):\n        a, b = 0, 1\n        while a <= num:\n            if a == num:\n                return True\n            a, b = b, a + b\n        return False\n\n    count = 0\n    num = 2\n\n    while count < n:\n        if is_prime(num) and is_fibonacci(num):\n            count += 1\n        num += 1\n\n    return num - 1", "prompt_tokens": 622, "completion_tokens": 333, "duration": 7.5936808586120605, "result": "timed out", "passed": false}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 740, "completion_tokens": 265, "duration": 6.703152418136597, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 5, "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    left_to_right = [False] * n\n    right_to_left = [False] * n\n    \n    for i in range(n):\n        left_to_right[i] = True\n        right_to_left[i] = True\n        \n    for i in range(n):\n        if left_to_right[i] and right_to_left[i]:\n            collisions += 1\n            \n    return collisions", "prompt_tokens": 711, "completion_tokens": 243, "duration": 7.2898266315460205, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [num + 1 for num in l]", "prompt_tokens": 533, "completion_tokens": 79, "duration": 6.12164568901062, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 666, "completion_tokens": 136, "duration": 4.054580450057983, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 537, "completion_tokens": 140, "duration": 4.699699640274048, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 394, "completion_tokens": 68, "duration": 3.9346368312835693, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        next_element = sum(fib4_list)\n        fib4_list.pop(0)\n        fib4_list.append(next_element)\n    return fib4_list[-1]", "prompt_tokens": 732, "completion_tokens": 218, "duration": 8.385481834411621, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 496, "completion_tokens": 149, "duration": 6.497137546539307, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 505, "completion_tokens": 130, "duration": 3.5114712715148926, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    result = 1\n    if n != 0:\n        result = pow(2, n, p)\n    return result", "prompt_tokens": 533, "completion_tokens": 100, "duration": 3.572932004928589, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 668, "completion_tokens": 310, "duration": 8.75917911529541, "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 570, "completion_tokens": 107, "duration": 5.595567941665649, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 472, "completion_tokens": 79, "duration": 3.632829189300537, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    result = x + y\n    return result", "prompt_tokens": 398, "completion_tokens": 51, "duration": 5.526929616928101, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    char_count = {}\n    for ch in s0:\n        char_count[ch] = char_count.get(ch, 0) + 1\n    for ch in s1:\n        if ch not in char_count or char_count[ch] == 0:\n            return False\n        char_count[ch] -= 1\n    return all(value == 0 for value in char_count.values())", "prompt_tokens": 727, "completion_tokens": 287, "duration": 6.326147079467773, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    result = 0\n\n    for i in range(2, n+1):\n        result = a + b\n        a, b = b, result\n\n    return result", "prompt_tokens": 450, "completion_tokens": 168, "duration": 4.466182708740234, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 542, "completion_tokens": 160, "duration": 6.501768112182617, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 495, "completion_tokens": 118, "duration": 8.089212894439697, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for e in l1:\n        if e in l2 and e not in common_elements:\n            common_elements.append(e)\n    return sorted(common_elements)", "prompt_tokens": 578, "completion_tokens": 142, "duration": 4.137173891067505, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            n //= divisor\n            largest_prime_factor = divisor\n        else:\n            divisor += 1\n    return largest_prime_factor", "prompt_tokens": 493, "completion_tokens": 175, "duration": 5.220166444778442, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 5, "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 6.4979636669158936, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0", "prompt_tokens": 535, "completion_tokens": 162, "duration": 6.77282452583313, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "prompt_tokens": 532, "completion_tokens": 144, "duration": 7.6913981437683105, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    fibfib_list = [0, 0, 1]\n    \n    for i in range(3, n+1):\n        fibfib_list.append(fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3])\n    \n    return fibfib_list[n]", "prompt_tokens": 674, "completion_tokens": 227, "duration": 7.317212343215942, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n\n    for i, c in enumerate(s):\n        if c in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if c == 'y' and i == len(s) - 1:\n            count += 1\n\n    return count", "prompt_tokens": 607, "completion_tokens": 176, "duration": 11.034168720245361, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    num_str = str(x)\n    length = len(num_str)\n    \n    if shift > length:\n        return num_str[::-1]\n    else:\n        split_index = length - shift\n        shifted_num = num_str[split_index:] + num_str[:split_index]\n        return shifted_num", "prompt_tokens": 582, "completion_tokens": 230, "duration": 8.889287948608398, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum", "prompt_tokens": 536, "completion_tokens": 88, "duration": 6.474522352218628, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[-2])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 833, "completion_tokens": 197, "duration": 9.852697849273682, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n\n    for index, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_value:\n            smallest_value = num\n            smallest_index = index\n            found_even = True\n        elif num % 2 == 0 and num == smallest_value:\n            smallest_index = min(smallest_index, index)\n\n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1052, "completion_tokens": 286, "duration": 11.444100856781006, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n    for key, value in freq_map.items():\n        if key > 0 and value >= key and key > greatest_int:\n            greatest_int = key\n\n    return greatest_int", "prompt_tokens": 725, "completion_tokens": 226, "duration": 11.243441820144653, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 615, "completion_tokens": 150, "duration": 7.288259983062744, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 4, "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 191, "duration": 8.272530555725098, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    is_palindrome = True\n    left, right = 0, len(q) - 1\n    \n    while left < right:\n        if q[left] != q[right]:\n            is_palindrome = False\n            break\n        left += 1\n        right -= 1\n    \n    sum_elements = sum(q)\n    \n    return sum_elements <= w and is_palindrome", "prompt_tokens": 926, "completion_tokens": 296, "duration": 9.91080641746521, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    \n    return min_changes", "prompt_tokens": 701, "completion_tokens": 198, "duration": 7.747425079345703, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 5, "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 781, "completion_tokens": 221, "duration": 8.752150058746338, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for p in range(2, 100):\n        if is_prime(p) and a % p == 0:\n            a //= p\n            count += 1\n        if count == 3:\n            return True\n    return False", "prompt_tokens": 516, "completion_tokens": 218, "duration": 7.626732110977173, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if x == 1 and n != 1:\n        return True\n    if x == n:\n        return True\n    if n == 1:\n        return False\n\n    power = 1\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power = power + 1\n\n    return False", "prompt_tokens": 626, "completion_tokens": 168, "duration": 7.436757802963257, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    b = round(abs(a) ** (1/3))\n    return b ** 3 == abs(a)", "prompt_tokens": 543, "completion_tokens": 94, "duration": 8.054641723632812, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    count = 0\n    for d in num:\n        if d in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 6.532759666442871, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\" + bin(decimal)[2:] + \"db\"\n    return binary_str", "prompt_tokens": 621, "completion_tokens": 114, "duration": 6.503493785858154, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 593, "completion_tokens": 166, "duration": 7.625643253326416, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "is_solved": false, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 530, "duration": 13.376813650131226, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 543, "completion_tokens": 194, "duration": 8.242356538772583, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)\n        else:\n            count += 2 * 10 ** (n - 2)\n    return count", "prompt_tokens": 445, "completion_tokens": 164, "duration": 7.311645746231079, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 5, "generated_code": "def solve(N):\n    total_sum = sum(int(digit) for digit in str(N))\n    return bin(total_sum)[2:]", "prompt_tokens": 608, "completion_tokens": 112, "duration": 6.597620487213135, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    sum_even_odd_indices = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_indices += lst[i]\n    return sum_even_odd_indices", "prompt_tokens": 448, "completion_tokens": 136, "duration": 7.9957115650177, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_words.append(sorted_word)\n    return ' '.join(ordered_words)", "prompt_tokens": 637, "completion_tokens": 167, "duration": 5.962275266647339, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, v in reversed(list(enumerate(row))):\n                if v == x:\n                    result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 928, "completion_tokens": 228, "duration": 5.835828542709351, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    return sorted_array", "prompt_tokens": 811, "completion_tokens": 207, "duration": 10.116601943969727, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 614, "completion_tokens": 196, "duration": 9.05893611907959, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    sorted_lst = sorted(lst)\n    if sorted_lst[0] == sorted_lst[1]:\n        return None\n    else:\n        return sorted_lst[1]", "prompt_tokens": 581, "completion_tokens": 129, "duration": 8.292829990386963, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 562, "completion_tokens": 144, "duration": 5.709597826004028, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    total = x + y + z\n    return x == y + z or y == x + z or z == x + y\n\n# Test cases\nprint(any_int(5, 2, 7))  # True\nprint(any_int(3, 2, 2))  # False\nprint(any_int(3, -2, 1))  # True\nprint(any_int(3.6, -2.2, 2))  # False", "prompt_tokens": 619, "completion_tokens": 226, "duration": 6.9183220863342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for ch in message:\n        if ch.lower() in 'aeiou':\n            index = ord(ch.lower()) - ord('a')\n            new_index = (index + 2) % 26\n            new_ch = chr(ord('a') + new_index)\n            encoded_message += new_ch.upper()\n        elif ch.isalpha():\n            encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 634, "completion_tokens": 259, "duration": 8.224285125732422, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 6, "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def calculate_sum_of_digits(num):\n        sum_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_digits += digit\n            num = num // 10\n        return sum_digits\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n\n    if largest_prime is not None:\n        sum_digits = calculate_sum_of_digits(largest_prime)\n        return sum_digits\n    else:\n        return 0", "prompt_tokens": 1016, "completion_tokens": 367, "duration": 12.2197744846344, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            is_lower = True\n        elif key.isupper():\n            is_upper = True\n        else:\n            return False\n    \n    return is_lower != is_upper", "prompt_tokens": 744, "completion_tokens": 235, "duration": 7.372809648513794, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 635, "completion_tokens": 156, "duration": 7.499019384384155, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    product = unit_digit_a * unit_digit_b\n    return product", "prompt_tokens": 579, "completion_tokens": 171, "duration": 8.148329973220825, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    \n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    \n    return count", "prompt_tokens": 484, "completion_tokens": 145, "duration": 5.42265510559082, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "is_solved": false, "solved_count": 2, "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = int(num) + 1\n    diff_floor = abs(num - floor_num)\n    diff_ceil = abs(num - ceil_num)\n    \n    if diff_floor <= diff_ceil:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 676, "completion_tokens": 181, "duration": 9.97348928451538, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 1, "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n    for i in range(n):\n        stones_list.append(stones)\n        if n % 2 == 1:\n            stones += 2\n        else:\n            stones += 1\n    return stones_list", "prompt_tokens": 602, "completion_tokens": 142, "duration": 7.101842403411865, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in [',', ' ']:\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 625, "completion_tokens": 204, "duration": 6.223127603530884, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    biggest_even = -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 510, "completion_tokens": 113, "duration": 8.502223491668701, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = 0\n        count = 0\n        for i in range(n, m+1):\n            total += i\n            count += 1\n        avg = round(total / count)\n        return bin(avg)", "prompt_tokens": 633, "completion_tokens": 164, "duration": 7.571257829666138, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        if any(int(ch) % 2 == 0 for ch in str(num)):\n            continue\n        result.append(num)\n    return sorted(result)", "prompt_tokens": 593, "completion_tokens": 178, "duration": 5.812777280807495, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = []\n    for num in filtered_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 948, "completion_tokens": 305, "duration": 10.891561508178711, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 600, "completion_tokens": 174, "duration": 7.710442304611206, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 1, "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 187, "duration": 5.890745162963867, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 8.013453483581543, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    min_index = arr.index(min(arr))\n    n = len(arr)\n    \n    for _ in range(n):\n        arr = [arr[-1]] + arr[:-1]\n        if arr == sorted(arr):\n            return True\n    \n    return False", "prompt_tokens": 973, "completion_tokens": 184, "duration": 7.440057992935181, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    return \"NO\" if count_odd > 1 else \"YES\"", "prompt_tokens": 737, "completion_tokens": 141, "duration": 4.904036998748779, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    letters = test.split()\n    result_dict = {}\n    max_count = 0\n    \n    for letter in letters:\n        if letter not in result_dict:\n            result_dict[letter] = 1\n        else:\n            result_dict[letter] += 1\n        \n        if result_dict[letter] > max_count:\n            max_count = result_dict[letter]\n    \n    max_letters = [letter for letter, count in result_dict.items() if count == max_count]\n    result_dict = {letter: count for letter, count in result_dict.items() if letter in max_letters}\n    \n    return result_dict", "prompt_tokens": 763, "completion_tokens": 335, "duration": 10.079177379608154, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 3, "generated_code": "def reverse_delete(s, c):\n    modified_str = \"\"\n    for ch in s:\n        if ch not in c:\n            modified_str += ch\n    is_palindrome = modified_str == modified_str[::-1]\n    return modified_str, is_palindrome", "prompt_tokens": 701, "completion_tokens": 173, "duration": 8.196405410766602, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 2, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if c.isdigit() and int(c) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 729, "completion_tokens": 210, "duration": 6.689289093017578, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "is_solved": false, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 171, "duration": 8.89458179473877, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    total_water = sum(sum(row) for row in grid)\n    times = math.ceil(total_water / capacity)\n    return times", "prompt_tokens": 1032, "completion_tokens": 174, "duration": 10.585772275924683, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    ones_count = {}\n    \n    for num in arr:\n        bin_num = bin(num)[2:]\n        ones_count[num] = bin_num.count('1')\n    \n    def custom_sort(num):\n        return (ones_count[num], num)\n    \n    sorted_arr = sorted(arr, key=custom_sort)\n    \n    return sorted_arr", "prompt_tokens": 764, "completion_tokens": 241, "duration": 6.887902736663818, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    for word in s.split():\n        consonant_count = sum(1 for char in word if char in consonants)\n        if consonant_count == n:\n            words.append(word)\n    return words", "prompt_tokens": 793, "completion_tokens": 261, "duration": 9.617835521697998, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "is_solved": false, "solved_count": 3, "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in consonants and word[i+1] in \"aeiouAEIOU\" and word[i+2] in consonants:\n            closest_vowel = word[i+1]\n            break\n    \n    return closest_vowel", "prompt_tokens": 685, "completion_tokens": 236, "duration": 8.390203714370728, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 2, "generated_code": "def match_parens(lst):\n    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 774, "completion_tokens": 301, "duration": 8.125946521759033, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    res = []\n    for i in range(k):\n        res.append(arr[i])\n    return res", "prompt_tokens": 775, "completion_tokens": 118, "duration": 5.975973129272461, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 529, "completion_tokens": 132, "duration": 6.358790874481201, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 611, "completion_tokens": 161, "duration": 5.268137454986572, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 211, "duration": 10.976648092269897, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    \n    month, day, year = map(int, date_parts)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    if year < 1:\n        return False\n    \n    return True", "prompt_tokens": 970, "completion_tokens": 356, "duration": 12.066823244094849, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        return count if count > 0 else None\n    return words_list", "prompt_tokens": 753, "completion_tokens": 298, "duration": 10.234142780303955, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicates = {}\n    \n    for num in lst:\n        if num == prev:\n            if num not in duplicates:\n                duplicates[num] = 2\n            else:\n                duplicates[num] += 1\n        prev = num\n    \n    if any(value > 2 for value in duplicates.values()):\n        return False\n    \n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    \n    return True", "prompt_tokens": 1011, "completion_tokens": 362, "duration": 12.822230577468872, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "is_solved": false, "solved_count": 2, "generated_code": "def intersection(interval1, interval2):\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    \n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n\n    intersection_length = intersection_end - intersection_start + 1\n\n    if intersection_length <= 1:\n        return \"NO\"\n    \n    is_prime = True\n    if intersection_length == 2:\n        is_prime = True\n    else:\n        for i in range(2, int(intersection_length**0.5) + 1):\n            if intersection_length % i == 0:\n                is_prime = False\n                break\n\n    if is_prime:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 937, "completion_tokens": 350, "duration": 11.592796325683594, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_magnitude = 0\n    product_sign = 1\n    \n    for num in arr:\n        sum_magnitude += abs(num)\n        product_sign *= 1 if num > 0 else -1 if num < 0 else 0\n    \n    return sum_magnitude * product_sign", "prompt_tokens": 615, "completion_tokens": 191, "duration": 5.036545515060425, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "is_solved": false, "solved_count": 1, "generated_code": "def minPath(grid, k):\n    def is_valid(i, j):\n        return 0 <= i < len(grid) and 0 <= j < len(grid[0])\n\n    def explore_path(i, j, path):\n        if len(path) == k:\n            nonlocal min_path\n            if not min_path or path < min_path:\n                min_path = path[:]\n            return\n\n        for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj) and not visited[ni][nj]:\n                visited[ni][nj] = True\n                explore_path(ni, nj, path + [grid[ni][nj]])\n                visited[ni][nj] = False\n\n    min_path = []\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            explore_path(i, j, [grid[i][j]])\n            visited[i][j] = False\n\n    return min_path", "prompt_tokens": 1292, "completion_tokens": 504, "duration": 13.52004623413086, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 1, "generated_code": "def tri(n):\n    tribonacci_seq = []\n    if n == 0:\n        tribonacci_seq.append(0)\n        return tribonacci_seq\n    if n == 1:\n        tribonacci_seq.extend([1, 3])\n        return tribonacci_seq\n    if n == 2:\n        tribonacci_seq.extend([1, 3, 2])\n        return tribonacci_seq\n    \n    tribonacci_seq.extend([0, 1, 1])\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci_seq.append(1 + i // 2)\n        else:\n            tribonacci_seq.append(tribonacci_seq[i - 1] + tribonacci_seq[i - 2] + tribonacci_seq[i - 3])\n    \n    return tribonacci_seq", "prompt_tokens": 965, "completion_tokens": 412, "duration": 10.64587664604187, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "is_solved": false, "solved_count": 3, "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    if product == 1:\n        return 0\n    else:\n        return product", "prompt_tokens": 482, "completion_tokens": 148, "duration": 20.79701042175293, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 4, "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)\n\n# Test cases\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True", "prompt_tokens": 662, "completion_tokens": 276, "duration": 12.267462968826294, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "is_solved": false, "solved_count": 4, "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 8.807801246643066, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    return False", "prompt_tokens": 644, "completion_tokens": 172, "duration": 7.945705890655518, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            index = i\n    return index", "prompt_tokens": 535, "completion_tokens": 115, "duration": 8.230712413787842, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    max_neg = None\n    min_pos = None\n    \n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        if num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    \n    return (max_neg, min_pos)", "prompt_tokens": 656, "completion_tokens": 220, "duration": 11.179183006286621, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 1, "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None", "prompt_tokens": 679, "completion_tokens": 249, "duration": 9.292426824569702, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "is_solved": false, "solved_count": 2, "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    count = 0\n    for i in range(2, n//2 + 1):\n        if i % 2 == 0:\n            count += 1\n        if count == 4 and (n - 2*i) % 2 == 0 and n - 2*i >= 2:\n            return True\n    return False", "prompt_tokens": 538, "completion_tokens": 221, "duration": 9.521284818649292, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        temp = 1\n        for j in range(i, 0, -1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 6.9672558307647705, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "is_solved": false, "solved_count": 3, "generated_code": "def fix_spaces(text):\n    new_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                new_text = new_text.rstrip() + \"-\"\n            else:\n                new_text += \"_\"\n                count = 0\n        else:\n            new_text += ch\n            count = 0\n    return new_text", "prompt_tokens": 615, "completion_tokens": 233, "duration": 5.284398794174194, "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 5, "generated_code": "def file_name_check(file_name):\n    digit_count = 0\n    valid_extensions = ['txt', 'exe', 'dll']\n    valid_start_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    dot_count = 0\n    before_dot = ''\n    after_dot = ''\n    \n    for ch in file_name:\n        if ch.isdigit():\n            digit_count += 1\n        elif ch == '.':\n            dot_count += 1\n            before_dot = file_name.split('.')[0]\n            after_dot = file_name.split('.')[1] if len(file_name.split('.')) > 1 else ''\n    \n    if digit_count > 3 or dot_count != 1 or not before_dot or before_dot[0] not in valid_start_chars or after_dot not in valid_extensions:\n        result = 'No'\n    else:\n        result = 'Yes'\n    \n    return result", "prompt_tokens": 944, "completion_tokens": 435, "duration": 13.233089685440063, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 699, "completion_tokens": 184, "duration": 11.201125144958496, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "is_solved": false, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 697, "completion_tokens": 236, "duration": 10.82561993598938, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 3, "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    product = x_num * n_num\n    if product % (x_denom * n_denom) == 0:\n        return True\n    else:\n        return False", "prompt_tokens": 687, "completion_tokens": 194, "duration": 9.178799152374268, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    digit_sums = {}\n    for i, num in enumerate(nums):\n        digit_sums[i] = sum(int(digit) for digit in str(abs(num)))\n    sorted_indices = sorted(digit_sums, key=lambda x: (digit_sums[x], x))\n    return [nums[i] for i in sorted_indices]", "prompt_tokens": 647, "completion_tokens": 235, "duration": 9.784668445587158, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 3, "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 605, "completion_tokens": 197, "duration": 4.121816158294678, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 4, "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 731, "completion_tokens": 245, "duration": 8.662597417831421, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        \n        if index1 < index2:\n            result = planets[index1+1:index2]\n        else:\n            result = planets[index2+1:index1]\n            result.reverse()\n        \n        return tuple(result)\n    else:\n        return ()", "prompt_tokens": 827, "completion_tokens": 275, "duration": 9.696654081344604, "result": "failed: Fourth test error: ('Uranus', 'Saturn', 'Jupiter', 'Mars', 'Earth')", "passed": false}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 720, "completion_tokens": 135, "duration": 3.6262736320495605, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n\n    return x", "prompt_tokens": 493, "completion_tokens": 112, "duration": 2.9622745513916016, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num**2\n    return sum_of_squares", "prompt_tokens": 607, "completion_tokens": 137, "duration": 7.216236352920532, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 804, "completion_tokens": 138, "duration": 3.604128837585449, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "is_solved": true, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension_name = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension_name = extension\n    \n    return class_name + \".\" + strongest_extension_name", "prompt_tokens": 956, "completion_tokens": 245, "duration": 7.347973823547363, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    concat = a + a\n    for i in range(n):\n        temp = concat[i:i+m]\n        if temp == b:\n            return True\n    return False", "prompt_tokens": 661, "completion_tokens": 212, "duration": 6.6700263023376465, "result": "failed: test #3", "passed": false}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 459, "completion_tokens": 140, "duration": 5.8265063762664795, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        'm': 1000, 'cm': 900, 'd': 500, 'cd': 400, 'c': 100, 'xc': 90, 'l': 50, 'xl': 40,\n        'x': 10, 'ix': 9, 'v': 5, 'iv': 4, 'i': 1\n    }\n    \n    mini_roman = ''\n    \n    for roman_numeral, value in sorted(roman_numerals.items(), key=lambda x: x[1], reverse=True):\n        while number >= value:\n            mini_roman += roman_numeral\n            number -= value\n    \n    return mini_roman", "prompt_tokens": 573, "completion_tokens": 271, "duration": 9.578063011169434, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n    \n    if a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared:\n        return True\n    else:\n        return False", "prompt_tokens": 608, "completion_tokens": 209, "duration": 7.607722282409668, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 588, "completion_tokens": 164, "duration": 7.6304168701171875, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "is_solved": false, "solved_count": 2, "generated_code": "def eat(number, need, remaining):\n    total_needed = number + need\n    if remaining >= total_needed:\n        total_eaten_carrots = number + need\n        remaining_carrots = remaining - need\n    else:\n        total_eaten_carrots = remaining + number\n        remaining_carrots = 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 927, "completion_tokens": 195, "duration": 4.016172409057617, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "is_solved": false, "solved_count": 0, "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 847, "completion_tokens": 284, "duration": 8.108494520187378, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 3, "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 196, "duration": 6.344592571258545, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 95, "duration": 7.396501302719116, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    if a > b:\n        a, b = b, a\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits", "prompt_tokens": 553, "completion_tokens": 148, "duration": 5.411938905715942, "result": "failed: Test 1", "passed": false}
