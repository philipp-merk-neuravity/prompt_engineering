{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            if count == 1:\n                group = \"\"\n        group += char\n        if char == ')':\n            count -= 1\n            if count == 0:\n                result.append(group)\n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))", "prompt_tokens": 165, "completion_tokens": 115, "duration": 4.904185056686401}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 135, "completion_tokens": 21, "duration": 1.9856386184692383}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 2.3627920150756836}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.195892333984375}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 142, "completion_tokens": 62, "duration": 2.6180431842803955}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.1791415214538574}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 160, "completion_tokens": 72, "duration": 2.7071592807769775}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_list.append(max_num)\n    return max_list", "prompt_tokens": 150, "completion_tokens": 62, "duration": 2.4928503036499023}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if string == \"\":\n        return \"\"\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]", "prompt_tokens": 192, "completion_tokens": 76, "duration": 2.4843590259552}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 36, "duration": 2.1050825119018555}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.200965166091919}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.0808796882629395}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 1.9683821201324463}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 1.9418256282806396}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    music_list = music_string.split()\n    return [notes[note] for note in music_list]\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "prompt_tokens": 222, "completion_tokens": 137, "duration": 3.0193028450012207}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos == -1:\n            break\n        count += 1\n        start = pos + 1\n    return count", "prompt_tokens": 138, "completion_tokens": 76, "duration": 2.508570909500122}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    numberals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: numberals.index(x))\n    return ' '.join(numbers_list)", "prompt_tokens": 155, "completion_tokens": 76, "duration": 2.483705997467041}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 216, "completion_tokens": 103, "duration": 3.7147934436798096}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 2.367142915725708}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.7097232341766357}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 44, "duration": 1.9578120708465576}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 70, "duration": 2.4585721492767334}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 34, "duration": 2.0913898944854736}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 2.1152408123016357}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.8648200035095215}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.7999627590179443}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 2.098828077316284}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    assert len(xs) % 2 == 0, \"The number of coefficients should be even\"\n    assert xs[-1] != 0, \"The largest coefficient should not be zero\"\n    \n    return -xs[0] / xs[1]\n\n# Test cases\nprint(round(find_zero([1, 2]), 2)) # f(x) = 1 + 2x\nprint(round(find_zero([-6, 11, -6, 1]), 2)) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3", "prompt_tokens": 309, "completion_tokens": 151, "duration": 3.161419630050659}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted(sorted_values)):\n        result[i] = v\n    return result", "prompt_tokens": 200, "completion_tokens": 86, "duration": 2.9330031871795654}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.705723524093628}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.5717682838439941}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 57, "duration": 2.3540444374084473}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 43, "duration": 1.7694025039672852}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.051835298538208}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fibonacci(num):\n        if num <= 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, num + 1):\n                a, b = b, a + b\n            return a\n    \n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n    return fibonacci(i)", "prompt_tokens": 147, "completion_tokens": 181, "duration": 4.939252853393555}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    from itertools import combinations\n    return any(sum(comb) == 0 for comb in combinations(l, 3))", "prompt_tokens": 209, "completion_tokens": 37, "duration": 1.72096586227417}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 2.9659910202026367}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.5113253593444824}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 38, "duration": 3.187685966491699}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.9256319999694824}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 113, "duration": 4.234102964401245}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 3.4491262435913086}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 2.997666358947754}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 21, "duration": 3.8589107990264893}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 3.918612241744995}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.1372861862182617}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 2.767824172973633}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 2.8457045555114746}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 3.0808565616607666}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 102, "completion_tokens": 33, "duration": 2.99941086769104}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 64, "duration": 4.424809455871582}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.2813382148742676}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 28, "duration": 2.9004628658294678}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 3.9746620655059814}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 2.993791341781616}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 67, "duration": 3.387009620666504}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 26, "duration": 2.739291191101074}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 199, "completion_tokens": 72, "duration": 3.422487258911133}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels or (s[i] == 'y' and i == len(s) - 1):\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"Hello\"))  # 2\nprint(vowels_count(\"qwerty\")) # 1", "prompt_tokens": 176, "completion_tokens": 143, "duration": 4.069087743759155}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 50, "duration": 3.106447219848633}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.7378759384155273}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 37, "duration": 3.018723964691162}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(i, node) for i, node in enumerate(arr) if node % 2 == 0]\n    if not even_nodes:\n        return []\n\n    min_even_value = min(even_nodes, key=lambda x: (x[1], x[0]))\n    return [min_even_value[1], min_even_value[0]]", "prompt_tokens": 362, "completion_tokens": 82, "duration": 3.7860734462738037}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num and num > 0:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 42, "duration": 2.827739715576172}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 3.909966468811035}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 4.412842750549316}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.908005475997925}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    def is_palindromic(subarr):\n        return subarr == subarr[::-1]\n\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            changes += 1\n    return changes\n\n# Test cases\nprint(smallest_change([1,2,3,5,4,7,9,6])) # 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2])) # 1\nprint(smallest_change([1, 2, 3, 2, 1])) # 0", "prompt_tokens": 207, "completion_tokens": 151, "duration": 4.329147815704346}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n    \n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 243, "completion_tokens": 76, "duration": 3.423161745071411}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n            if count == 3:\n                return True\n    return False", "prompt_tokens": 129, "completion_tokens": 109, "duration": 5.106977224349976}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 160, "completion_tokens": 33, "duration": 2.8345048427581787}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 58, "duration": 2.750554084777832}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 189, "completion_tokens": 29, "duration": 2.128837823867798}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.984642744064331}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 222, "duration": 4.838080406188965}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 2.7506184577941895}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 94, "completion_tokens": 64, "duration": 2.682612180709839}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 2.0146548748016357}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.1991615295410156}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 180, "completion_tokens": 26, "duration": 2.27115535736084}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.589460849761963}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array[:]\n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 54, "duration": 2.4459216594696045}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += chr(((ord(char) - 97 + 2 * 2) % 26) + 97)\n        elif char.isupper():\n            result += chr(((ord(char) - 65 + 2 * 2) % 26) + 65)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 94, "duration": 3.1906301975250244}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_numbers = sorted(set(lst))\n    if len(unique_numbers) < 2:\n        return None\n    return unique_numbers[1]", "prompt_tokens": 174, "completion_tokens": 39, "duration": 2.4383327960968018}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split(\".\")\n    sentences += S.split(\"?\")\n    sentences += S.split(\"!\")\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 63, "duration": 3.0634751319885254}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 54, "duration": 2.5313191413879395}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = 'aeiouAEIOU'\n    for letter in message:\n        if letter.lower() in vowels:\n            encoded_message += chr((ord(letter) + 2 - ord('a')) % 26 + ord('A'))\n        else:\n            encoded_message += letter.swapcase()\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 78, "duration": 2.9546384811401367}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def largest_prime_sum_of_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    largest_prime = max(primes)\n    \n    return digit_sum(largest_prime)", "prompt_tokens": 336, "completion_tokens": 116, "duration": 3.231543779373169}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    upper_flag = False\n    lower_flag = False\n    for key in dictionary.keys():\n        if isinstance(key, str):\n            if key.islower():\n                lower_flag = True\n            elif key.isupper():\n                upper_flag = True\n            else:\n                return False\n        else:\n            return False\n    return upper_flag != lower_flag", "prompt_tokens": 219, "completion_tokens": 91, "duration": 2.8661487102508545}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]", "prompt_tokens": 195, "completion_tokens": 82, "duration": 2.829066753387451}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 29, "duration": 2.135709762573242}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.9090840816497803}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.168896436691284}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile", "prompt_tokens": 182, "completion_tokens": 61, "duration": 2.2920451164245605}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.9702515602111816}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] or [-1])", "prompt_tokens": 144, "completion_tokens": 35, "duration": 2.0662758350372314}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 48, "duration": 2.3700687885284424}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 2.0870916843414307}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [names[x-1] for x in reversed_arr]\n    return result", "prompt_tokens": 326, "completion_tokens": 94, "duration": 3.155932903289795}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            res.append(fact)\n        else:\n            res.append(sum(range(1, i+1)))\n    return res", "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.6759324073791504}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 105, "duration": 3.1139564514160156}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 46, "duration": 3.5888402462005615}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        arr.insert(0, arr.pop())\n        if arr == sorted_arr:\n            return True\n    return False", "prompt_tokens": 349, "completion_tokens": 58, "duration": 2.325324296951294}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 36, "duration": 2.0306668281555176}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    letters = test.split()\n    hist = {}\n    max_count = 0\n    for letter in letters:\n        hist[letter] = hist.get(letter, 0) + 1\n        max_count = max(max_count, hist[letter])\n    \n    return {key: value for key, value in hist.items() if value == max_count}", "prompt_tokens": 201, "completion_tokens": 81, "duration": 2.7618002891540527}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    s = ''.join(char for char in s if char not in c)\n    return s, s == s[::-1]", "prompt_tokens": 212, "completion_tokens": 37, "duration": 1.8545160293579102}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len([digit for digit in s if int(digit) % 2 != 0]), i, i, i) for i, s in enumerate(lst, start=1)]", "prompt_tokens": 223, "completion_tokens": 68, "duration": 4.03447699546814}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return None\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 69, "duration": 2.2436485290527344}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(map(sum, grid))\n    return math.ceil(total_water / capacity)", "prompt_tokens": 373, "completion_tokens": 34, "duration": 3.5744309425354004}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.6731245517730713}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    result = [word for word in words if sum(1 for letter in word if letter in consonants) == n]\n    return result", "prompt_tokens": 231, "completion_tokens": 80, "duration": 2.592700958251953}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 98, "duration": 4.458827257156372}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    open_count = lst[0].count('(')\n    close_count = lst[1].count(')')\n    \n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 218, "completion_tokens": 55, "duration": 2.0937163829803467}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 3.1705775260925293}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x < 100)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 3.451137065887451}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    def collatz_sequence(n):\n        sequence = [n]\n        while n > 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n    \n    return sorted([num for num in collatz_sequence(n) if num % 2 != 0])", "prompt_tokens": 281, "completion_tokens": 94, "duration": 4.404038906097412}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month, day, year = parts\n\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return day >= 1 and day <= 31\n    elif month in [4, 6, 9, 11]:\n        return day >= 1 and day <= 30\n    elif month == 2:\n        if year % 4 == 0:\n            return day >= 1 and day <= 29\n        else:\n            return day >= 1 and day <= 28\n    else:\n        return False\n\n    return False", "prompt_tokens": 313, "completion_tokens": 212, "duration": 5.834261655807495}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 5.258156061172485}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 44, "duration": 4.993686676025391}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n    \n    length = end - start\n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 304, "completion_tokens": 112, "duration": 4.212874889373779}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n    return sum(abs(num) for num in arr) * product", "prompt_tokens": 172, "completion_tokens": 62, "duration": 3.938680648803711}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    seq = [0, 1, 3]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            seq.append(1 + i // 2)\n        else:\n            seq.append(seq[i-1] + seq[i-2] + seq[i-3])\n    return seq", "prompt_tokens": 285, "completion_tokens": 80, "duration": 4.001438856124878}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "def sum_squares(lst):\n    return sum([(int(x) + (1 if x - int(x) > 0 else 0))**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 40, "duration": 3.2815465927124023}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # False\nprint(check_if_last_char_is_a_letter(\"\"))  # False", "prompt_tokens": 187, "completion_tokens": 116, "duration": 3.893920421600342}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i-1\n    return index", "prompt_tokens": 153, "completion_tokens": 49, "duration": 4.863962650299072}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    if negative_integers:\n        largest_negative = max(negative_integers)\n    else:\n        largest_negative = None\n\n    if positive_integers:\n        smallest_positive = min(positive_integers)\n    else:\n        smallest_positive = None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 106, "duration": 4.771920204162598}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n+1, 2):\n        if n - i >= 0:\n            count += 1\n    return count == 4", "prompt_tokens": 127, "completion_tokens": 55, "duration": 3.5375847816467285}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    result = 1\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 145, "completion_tokens": 43, "duration": 3.2704203128814697}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 40, "duration": 3.184149980545044}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "import re\n\ndef file_name_check(file_name):\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 101, "duration": 4.111640453338623}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 219, "completion_tokens": 85, "duration": 3.5948262214660645}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    sentence = sentence.split()\n    result = ' '.join(word for word in sentence if is_prime(len(word)))\n    return result", "prompt_tokens": 197, "completion_tokens": 88, "duration": 3.993305206298828}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_den * n_den)\n    \n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 62, "duration": 3.3535547256469727}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 3.0040013790130615}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 169, "completion_tokens": 81, "duration": 5.317788124084473}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 123, "duration": 4.105527877807617}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    start_index = min(index1, index2) + 1\n    end_index = max(index1, index2)\n    \n    return tuple(sorted(planets[start_index:end_index], key=lambda x: planets.index(x)))", "prompt_tokens": 261, "completion_tokens": 133, "duration": 4.416871786117554}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 3.0901098251342773}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 136, "completion_tokens": 79, "duration": 3.8038713932037354}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if x % 2 != 0 and x > 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 40, "duration": 2.857042074203491}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 39, "duration": 4.391193151473999}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n    \n    strongest = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 70, "duration": 3.218766212463379}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\")) # False\nprint(cycpattern_check(\"hello\", \"ell\")) # True\nprint(cycpattern_check(\"whassup\", \"psus\")) # False\nprint(cycpattern_check(\"abab\", \"baa\")) # True\nprint(cycpattern_check(\"efef\", \"eeff\")) # False\nprint(cycpattern_check(\"himenss\", \"simen\")) # True", "prompt_tokens": 179, "completion_tokens": 130, "duration": 4.079968452453613}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 77, "duration": 3.656508684158325}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_nums = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_nums.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 140, "duration": 2.7711024284362793}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 48, "duration": 1.2377557754516602}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 170, "completion_tokens": 91, "duration": 1.7207746505737305}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 327, "completion_tokens": 51, "duration": 1.1519811153411865}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 48, "duration": 1.2406463623046875}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.6143977642059326}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 1.0061726570129395}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    open_count = 0\n    start_index = 0\n    \n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n        \n        if open_count == 0:\n            result.append(paren_string[start_index:i+1].replace(\" \", \"\"))\n            start_index = i+1\n            \n    return result", "prompt_tokens": 165, "completion_tokens": 112, "duration": 4.405118703842163}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.9172840118408203}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 4.0658278465271}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "prompt_tokens": 142, "completion_tokens": 56, "duration": 2.492175340652466}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.9447340965270996}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers) if numbers else 0\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.98526930809021}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    return string + string[::-1][::-1].lstrip(string)", "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.937674045562744}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.8970155715942383}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.898158311843872}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.870870351791382}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.8320016860961914}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.7182364463806152}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    music_list = music_string.split()\n    return [notes[note] for note in music_list]\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "prompt_tokens": 222, "completion_tokens": 137, "duration": 3.0193028450012207}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 74, "duration": 1.8776278495788574}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_dict[x])\n    return ' '.join(numbers_list)", "prompt_tokens": 155, "completion_tokens": 106, "duration": 4.062288761138916}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 216, "completion_tokens": 103, "duration": 3.7147934436798096}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.8288745880126953}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.617400884628296}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.7323265075683594}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 79, "duration": 3.9123730659484863}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 98, "completion_tokens": 20, "duration": 3.547327756881714}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.5539934635162354}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.585581064224243}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.677863597869873}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        return \"Error: Coefficients list must have an even number of coefficients.\"\n    a, b = xs[0], max(xs)\n    x = -a / b\n    return x", "prompt_tokens": 309, "completion_tokens": 64, "duration": 3.6970484256744385}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 5.554405212402344}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.5379273891448975}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 52, "duration": 3.8719937801361084}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 43, "duration": 3.5702669620513916}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n + 1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while n > 0:\n        i += 1\n        if is_prime(fibonacci(i)):\n            n -= 1\n    return fibonacci(i)", "prompt_tokens": 147, "completion_tokens": 176, "duration": 4.9979941844940186}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    from itertools import combinations\n    return any(sum(comb) == 0 for comb in combinations(l, 3))", "prompt_tokens": 209, "completion_tokens": 37, "duration": 5.128893136978149}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.002847194671631}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "prompt_tokens": 207, "completion_tokens": 28, "duration": 6.740986108779907}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 56, "duration": 3.7610442638397217}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.695855379104614}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.386076211929321}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 6.449220180511475}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.668447494506836}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "prompt_tokens": 172, "completion_tokens": 31, "duration": 6.638261556625366}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.647327184677124}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 15, "duration": 4.557270765304565}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 5.298475027084351}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 38, "duration": 5.720113754272461}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 142, "completion_tokens": 60, "duration": 6.822071552276611}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 137, "completion_tokens": 52, "duration": 7.056678295135498}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(l2)))", "prompt_tokens": 164, "completion_tokens": 28, "duration": 0.9485862255096436}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 0.9835994243621826}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 4.589336156845093}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 5.851481914520264}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.2197139263153076}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s)-1 and s[i].lower() == 'y'):\n            count += 1\n    return count", "prompt_tokens": 176, "completion_tokens": 67, "duration": 5.112467527389526}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 53, "duration": 5.684702396392822}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 3.1726772785186768}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 39, "duration": 5.401230096817017}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n    \n    smallest_even_value = min(even_values)\n    smallest_even_index = arr.index(smallest_even_value)\n    \n    return [smallest_even_value, smallest_even_index]", "prompt_tokens": 362, "completion_tokens": 73, "duration": 5.141429424285889}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num and num > 0:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 42, "duration": 5.3645405769348145}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.848431348800659}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 1.5934593677520752}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 4.968756198883057}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 6.005157709121704}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 1.510026216506958}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a + 1):\n        if is_prime(i) and a % i == 0:\n            count += 1\n\n    return count == 3", "prompt_tokens": 129, "completion_tokens": 110, "duration": 6.218796014785767}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "prompt_tokens": 160, "completion_tokens": 31, "duration": 5.541208982467651}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 112, "duration": 5.8945746421813965}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 189, "completion_tokens": 29, "duration": 2.9652109146118164}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] for i in range(len(s) - 2))", "prompt_tokens": 171, "completion_tokens": 46, "duration": 5.829380750656128}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 252, "duration": 8.420693635940552}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 70, "duration": 5.041592836380005}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 94, "completion_tokens": 64, "duration": 5.8697121143341064}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.541863441467285}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 5.678857326507568}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 180, "completion_tokens": 26, "duration": 5.493116617202759}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 68, "duration": 6.013730525970459}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "prompt_tokens": 253, "completion_tokens": 55, "duration": 6.066043138504028}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 52, "duration": 5.036343097686768}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "prompt_tokens": 157, "completion_tokens": 40, "duration": 5.028362989425659}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return (type(x) == int and type(y) == int and type(z) == int) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.8334455490112305}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                if char.islower():\n                    encoded_message += char.upper()\n                else:\n                    encoded_message += char.lower()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 108, "duration": 2.0584518909454346}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def sum_of_digits_of_largest_prime(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    if prime_numbers:\n        largest_prime = max(prime_numbers)\n        return sum_of_digits(largest_prime)\n    else:\n        return 0", "prompt_tokens": 336, "completion_tokens": 133, "duration": 2.8985979557037354}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 60, "duration": 2.420733690261841}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 195, "completion_tokens": 87, "duration": 6.116029739379883}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 29, "duration": 5.10399866104126}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 5.50673246383667}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.467560768127441}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 182, "completion_tokens": 70, "duration": 3.596896171569824}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.split()]", "prompt_tokens": 166, "completion_tokens": 22, "duration": 2.65609073638916}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i%2==0] + [-1])", "prompt_tokens": 144, "completion_tokens": 37, "duration": 2.8387486934661865}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 2.862840414047241}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered = sorted([num for num in arr if 1 <= num <= 9])\n    reversed_arr = filtered[::-1]\n    return [names[num-1] for num in reversed_arr]", "prompt_tokens": 326, "completion_tokens": 80, "duration": 3.2793290615081787}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 174, "completion_tokens": 91, "duration": 3.7571980953216553}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n + 1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n + 1) if is_palindrome(i) and i % 2 != 0)\n    \n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 108, "duration": 3.787254810333252}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0)", "prompt_tokens": 174, "completion_tokens": 35, "duration": 2.7620551586151123}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    return sorted_arr == arr or sorted_arr == arr[-1:] + arr[:-1] or sorted_arr == arr[-2:] + arr[:-2]", "prompt_tokens": 349, "completion_tokens": 58, "duration": 49.05852794647217}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for x in lst1 if x % 2 != 0) <= sum(1 for x in lst2 if x % 2 != 0) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 57, "duration": 3.379696846008301}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    max_count = 0\n\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n        max_count = max(max_count, letter_count[letter])\n\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 96, "duration": 3.688969135284424}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    s = ''.join(ch for ch in s if ch not in c)\n    return s, s == s[::-1]", "prompt_tokens": 212, "completion_tokens": 37, "duration": 2.859504461288452}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return ['the number of odd elements {}n the str{}ng {} of the {}nput.'.format(sum(1 for digit in s if int(digit) % 2 != 0), i, i, i) for i, s in enumerate(lst, 1)]", "prompt_tokens": 223, "completion_tokens": 67, "duration": 3.318974018096924}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7867209911346436}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return (total_water + capacity - 1) // capacity", "prompt_tokens": 373, "completion_tokens": 38, "duration": 3.548647880554199}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 2.550316572189331}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    \n    def count_consonants(word):\n        vowels = 'aeiou'\n        return sum(1 for c in word if c.isalpha() and c.lower() not in vowels)\n    \n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 78, "duration": 4.154764413833618}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    open_paren_count = lst[0].count('(') + lst[1].count('(')\n    close_paren_count = lst[0].count(')') + lst[1].count(')')\n    if open_paren_count == close_paren_count:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 218, "completion_tokens": 79, "duration": 3.3578057289123535}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 3.4887919425964355}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum([x for x in arr[:k] if 10 <= x <= 99])", "prompt_tokens": 178, "completion_tokens": 32, "duration": 3.4759888648986816}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    result.append(1)\n    return sorted(result)", "prompt_tokens": 281, "completion_tokens": 69, "duration": 3.832108497619629}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 3.714308977127075}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 47, "duration": 2.86419939994812}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 158, "duration": 5.598130226135254}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    tribonacci = [1, 1, 1]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 130, "duration": 6.824342250823975}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(num)**2 for num in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 3.282555341720581}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    return txt[-1].isalpha() and txt[-2] == \" \"", "prompt_tokens": 187, "completion_tokens": 40, "duration": 3.4877853393554688}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    n = len(arr)\n    result = -1\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            result = i - 1\n            break\n    return result", "prompt_tokens": 153, "completion_tokens": 58, "duration": 5.404436111450195}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    \n    max_negative = None if len(negatives) == 0 else max(negatives)\n    min_positive = None if len(positives) == 0 else min(positives)\n    \n    return (max_negative, min_positive)", "prompt_tokens": 188, "completion_tokens": 93, "duration": 3.38284969329834}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    return n % 8 == 0", "prompt_tokens": 127, "completion_tokens": 22, "duration": 3.350184917449951}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 145, "completion_tokens": 60, "duration": 3.862043619155884}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 36, "duration": 3.331773519515991}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if len(parts[0]) == 0 or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 114, "duration": 3.455385684967041}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 5.423492908477783}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 96, "duration": 3.4395370483398438}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    num1, den1 = map(int, x.split('/'))\n    num2, den2 = map(int, n.split('/'))\n    result = num1 * num2 / (den1 * den2)\n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 60, "duration": 2.9709370136260986}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 0.7596347332000732}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and int(str(abs(num))[0]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0)", "prompt_tokens": 169, "completion_tokens": 53, "duration": 1.1634416580200195}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 215, "completion_tokens": 95, "duration": 5.078113555908203}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx < end_idx:\n        return tuple([planet for planet in planets if start_idx < planets.index(planet) < end_idx])\n    else:\n        return tuple([planet for planet in planets if end_idx < planets.index(planet) < start_idx])", "prompt_tokens": 261, "completion_tokens": 140, "duration": 6.103025674819946}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted(filter(lambda x: len(x) % 2 == 0, lst), key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 39, "duration": 4.607685804367065}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 136, "completion_tokens": 80, "duration": 4.5815300941467285}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 34, "duration": 3.6553428173065186}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game,guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 28, "duration": 4.316844701766968}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def extension_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n\n    strongest = max(extensions, key=lambda ext: extension_strength(ext))\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 72, "duration": 2.9148948192596436}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\nprint(cycpattern_check(\"abcd\", \"abd\"))\nprint(cycpattern_check(\"hello\", \"ell\"))\nprint(cycpattern_check(\"whassup\", \"psus\"))\nprint(cycpattern_check(\"abab\", \"baa\"))\nprint(cycpattern_check(\"efef\", \"eeff\"))\nprint(cycpattern_check(\"himenss\", \"simen\"))", "prompt_tokens": 179, "completion_tokens": 108, "duration": 5.142988443374634}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even, odd)", "prompt_tokens": 115, "completion_tokens": 63, "duration": 3.768827438354492}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_map = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv',\n        1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 137, "duration": 3.5848703384399414}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 158, "completion_tokens": 52, "duration": 2.1209285259246826}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(1, len(operand)):\n        expression += operator[i-1] + str(operand[i])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 52, "duration": 2.734529972076416}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5268301963806152}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 36, "duration": 2.7181830406188965}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    open_count = 0\n    start_index = 0\n    \n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n        \n        if open_count == 0:\n            result.append(paren_string[start_index:i+1].replace(\" \", \"\"))\n            start_index = i+1\n            \n    return result", "prompt_tokens": 165, "completion_tokens": 112, "duration": 4.405118703842163}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 1.980752944946289}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 2.6741414070129395}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.4150123596191406}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 142, "completion_tokens": 62, "duration": 2.6180431842803955}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.024486541748047}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        sum_result = sum(numbers)\n        product_result = 1\n        for num in numbers:\n            product_result *= num\n        return sum_result, product_result", "prompt_tokens": 160, "completion_tokens": 70, "duration": 2.4829719066619873}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result", "prompt_tokens": 150, "completion_tokens": 54, "duration": 4.903506278991699}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "prompt_tokens": 192, "completion_tokens": 73, "duration": 2.6933655738830566}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return \"\".join(str(int(char_a) ^ int(char_b)) for char_a, char_b in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 44, "duration": 2.3026576042175293}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 152, "completion_tokens": 41, "duration": 2.1305525302886963}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.2598962783813477}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 1.9441590309143066}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 4.423329591751099}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_duration = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    notes = music_string.split()\n    return [note_duration[note] for note in notes]\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))", "prompt_tokens": 222, "completion_tokens": 100, "duration": 3.3278884887695312}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 68, "duration": 2.402066469192505}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 102, "duration": 2.9691460132598877}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 216, "completion_tokens": 103, "duration": 3.7147934436798096}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 2.367142915725708}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.7889280319213867}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.133868455886841}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 71, "duration": 2.4579977989196777}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 2.0046937465667725}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([ch.lower() if ch.isupper() else ch.upper() for ch in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 1.9407992362976074}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.605252981185913}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.9647901058197021}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 2.244152545928955}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    def poly(xs, x):\n        return sum([coeff * x**i for i, coeff in enumerate(xs)])\n    \n    def derivative(xs, x):\n        return sum([i * coeff * x**(i-1) for i, coeff in enumerate(xs) if i > 0])\n    \n    x = 1.0\n    tol = 1e-6\n    max_iter = 1000\n    iteration = 0\n    \n    while abs(poly(xs, x)) > tol and iteration < max_iter:\n        x = x - poly(xs, x) / derivative(xs, x)\n        iteration += 1\n    \n    return x", "prompt_tokens": 309, "completion_tokens": 170, "duration": 4.166413307189941}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.6995973587036133}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.5565569400787354}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    return sum(str(x).count('7') for x in range(n) if x % 11 == 0 or x % 13 == 0)", "prompt_tokens": 129, "completion_tokens": 41, "duration": 1.799715518951416}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 43, "duration": 1.7816944122314453}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 3.807644844055176}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    i = 1\n    while True:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            if n == 1:\n                return fib\n            n -= 1\n        i += 1", "prompt_tokens": 147, "completion_tokens": 180, "duration": 3.856372833251953}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum([l[i], l[j], l[k]]) == 0 for i in range(len(l)) for j in range(i+1, len(l)) for k in range(j+1, len(l)))", "prompt_tokens": 209, "completion_tokens": 59, "duration": 2.1570541858673096}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [num + 1 for num in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 1.478567123413086}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "prompt_tokens": 207, "completion_tokens": 28, "duration": 2.9960310459136963}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 38, "duration": 3.3831183910369873}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 22, "duration": 4.136021614074707}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return d", "prompt_tokens": 221, "completion_tokens": 120, "duration": 4.716643333435059}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 57, "duration": 3.3151233196258545}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 2.98762583732605}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 3.150935649871826}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "prompt_tokens": 172, "completion_tokens": 42, "duration": 3.320512533187866}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 2.975609540939331}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 3.112504482269287}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 3.1556053161621094}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 70, "duration": 3.4648804664611816}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 64, "duration": 4.396612882614136}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.2002015113830566}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 2.9056522846221924}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.293647050857544}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 2.7724976539611816}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 67, "duration": 3.353186845779419}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 26, "duration": 2.786309242248535}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 199, "completion_tokens": 65, "duration": 3.381901741027832}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char in vowels) + 1\n    else:\n        return sum(1 for char in s if char in vowels)", "prompt_tokens": 176, "completion_tokens": 69, "duration": 3.2689452171325684}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift >= len(x_str):\n        return x_str[::-1]\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 55, "duration": 3.0967514514923096}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.608325242996216}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 37, "duration": 2.917335271835327}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    evens = [(i, x) for i, x in enumerate(arr) if x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[1], x[0]))\n    return [min_even[1], min_even[0]]", "prompt_tokens": 362, "completion_tokens": 78, "duration": 3.816348075866699}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    unique_nums = set(lst)\n    max_num = -1\n    \n    for num in unique_nums:\n        if num > 0 and lst.count(num) >= num:\n            max_num = max(max_num, num)\n    \n    return max_num", "prompt_tokens": 215, "completion_tokens": 59, "duration": 3.605145215988159}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 3.2352395057678223}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 3.3507323265075684}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.719492197036743}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    count = 0\n    for i in range(len(arr)//2):\n        if arr[i] != arr[len(arr)-1-i]:\n            count += 1\n    return count", "prompt_tokens": 207, "completion_tokens": 48, "duration": 2.8503971099853516}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 3.597519874572754}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i*j*k == a:\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 117, "duration": 3.798135280609131}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return a >= 0 and round(a ** (1/3)) ** 3 == a", "prompt_tokens": 160, "completion_tokens": 30, "duration": 2.818692684173584}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 58, "duration": 2.4830126762390137}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"", "prompt_tokens": 189, "completion_tokens": 28, "duration": 2.0529744625091553}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i+1] != s[i+2] and s[i] != s[i+2] for i in range(len(s) - 2))", "prompt_tokens": 171, "completion_tokens": 62, "duration": 3.352672815322876}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 254, "duration": 4.694498062133789}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test cases\nprint(prime_length('Hello'))  # True\nprint(prime_length('abcdcba'))  # True\nprint(prime_length('kittens'))  # True\nprint(prime_length('orange'))  # False", "prompt_tokens": 131, "completion_tokens": 120, "duration": 3.4026076793670654}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    return 2 * 9 * 10 ** (n - 2) + 10 ** (n - 1)", "prompt_tokens": 94, "completion_tokens": 37, "duration": 2.298644542694092}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 183, "completion_tokens": 25, "duration": 2.057807207107544}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.2743263244628906}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)", "prompt_tokens": 180, "completion_tokens": 47, "duration": 2.1563732624053955}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 71, "duration": 2.618070363998413}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 55, "duration": 2.4124107360839844}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            encrypted += chr(((ord(char.lower()) - 97 + 2 * 2) % 26) + 97)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 160, "completion_tokens": 63, "duration": 2.4691834449768066}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 52, "duration": 2.2343595027923584}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences]\n    sentences = [sentence for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 70, "duration": 2.6311826705932617}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 52, "duration": 2.297395706176758}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def largest_prime_sum(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    \n    if not prime_numbers:\n        return 0\n    \n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 128, "duration": 3.5832841396331787}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    upper_flag = False\n    lower_flag = False\n    for key in dictionary.keys():\n        if isinstance(key, str):\n            if key.islower():\n                lower_flag = True\n            elif key.isupper():\n                upper_flag = True\n            else:\n                return False\n        else:\n            return False\n    return upper_flag != lower_flag", "prompt_tokens": 219, "completion_tokens": 91, "duration": 2.8661487102508545}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 195, "completion_tokens": 87, "duration": 2.6293675899505615}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 29, "duration": 5.202478408813477}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 1.998668909072876}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.054394483566284}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    stones = []\n    for i in range(n):\n        stones.append(n + 2*i)\n    return stones", "prompt_tokens": 182, "completion_tokens": 35, "duration": 1.8899078369140625}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split()]", "prompt_tokens": 166, "completion_tokens": 26, "duration": 1.9894111156463623}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.095451593399048}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 1.9538168907165527}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 2.1019794940948486}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    dict_map = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [dict_map[num] for num in reversed_arr]\n    return result", "prompt_tokens": 326, "completion_tokens": 121, "duration": 4.736233711242676}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.450706958770752}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    count_even = 0\n    count_odd = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n\n    return count_even, count_odd", "prompt_tokens": 261, "completion_tokens": 99, "duration": 2.921217679977417}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 174, "completion_tokens": 49, "duration": 1.9856858253479004}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    \n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    \n    return False", "prompt_tokens": 349, "completion_tokens": 64, "duration": 2.7621877193450928}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 1 for x in lst2) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.9613397121429443}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "from collections import Counter\n\ndef histogram(test):\n    if not test:\n        return {}\n    \n    letter_counts = Counter(test.split())\n    max_count = max(letter_counts.values())\n    return {letter: count for letter, count in letter_counts.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 60, "duration": 2.224600076675415}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]", "prompt_tokens": 212, "completion_tokens": 45, "duration": 2.1652848720550537}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n            sum(1 for digit in s if int(digit) % 2 != 0),\n            sum(1 for digit in s if int(digit) % 2 != 0),\n            i+1,\n            i+1) for i, s in enumerate(lst)]", "prompt_tokens": 223, "completion_tokens": 90, "duration": 3.8521759510040283}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 2.1258842945098877}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, bucket_capacity):\n    total_water = 0\n    for row in grid:\n        for well in row:\n            total_water += well\n    return total_water // bucket_capacity + (total_water % bucket_capacity != 0)", "prompt_tokens": 373, "completion_tokens": 55, "duration": 1.989652156829834}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.8053054809570312}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.2240889072418213}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 96, "duration": 4.239036798477173}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        for c in s:\n            if c == '(':\n                count += 1\n            else:\n                if count == 0:\n                    return 'No'\n                count -= 1\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 67, "duration": 3.8670637607574463}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.6008269786834717}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 3.1184911727905273}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    def collatz(num):\n        sequence = [num]\n        while num > 1:\n            if num % 2 == 0:\n                num = num // 2\n            else:\n                num = 3 * num + 1\n            sequence.append(num)\n        return sequence\n\n    return sorted(set(filter(lambda x: x % 2 == 1, collatz(n))))", "prompt_tokens": 281, "completion_tokens": 91, "duration": 3.873873472213745}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    import re\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    return True", "prompt_tokens": 313, "completion_tokens": 218, "duration": 5.738846778869629}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([char for char in txt if char.islower() and ord(char) % 2 != 0])", "prompt_tokens": 190, "completion_tokens": 60, "duration": 3.3616855144500732}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(set(lst)) == len(lst)", "prompt_tokens": 299, "completion_tokens": 39, "duration": 3.0189132690429688}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n    \n    length = end - start\n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 304, "completion_tokens": 112, "duration": 4.212874889373779}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "from functools import reduce\n\ndef prod_signs(arr):\n    if not arr:\n        return None\n    product = reduce(lambda x, y: x * y, arr)\n    sign = -1 if product < 0 else 1 if product > 0 else 0\n    return sum(abs(num) for num in arr) * sign", "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.6752066612243652}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    sequence = [0, 1, 1]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n    return sequence[:n+1]", "prompt_tokens": 285, "completion_tokens": 84, "duration": 3.683255434036255}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(num) ** 2 for num in lst])", "prompt_tokens": 207, "completion_tokens": 29, "duration": 3.2458035945892334}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # False\nprint(check_if_last_char_is_a_letter(\"\"))  # False", "prompt_tokens": 187, "completion_tokens": 116, "duration": 3.893920421600342}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    largest_idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_idx = i-1\n    return largest_idx", "prompt_tokens": 153, "completion_tokens": 52, "duration": 3.3330483436584473}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    \n    if not negatives:\n        largest_neg = None\n    else:\n        largest_neg = max(negatives)\n    \n    if not positives:\n        smallest_pos = None\n    else:\n        smallest_pos = min(positives)\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 188, "completion_tokens": 101, "duration": 4.434124946594238}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            count += 1\n    return count == 4\n\n# Test cases\nprint(is_equal_to_sum_even(4))  # False\nprint(is_equal_to_sum_even(6))  # False\nprint(is_equal_to_sum_even(8))  # True", "prompt_tokens": 127, "completion_tokens": 97, "duration": 5.085277080535889}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        temp = 1\n        for j in range(1, i+1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 145, "completion_tokens": 67, "duration": 3.609203338623047}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 36, "duration": 3.331773519515991}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 101, "duration": 3.8345131874084473}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 2.9242665767669678}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.661712169647217}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 34, "duration": 2.9877443313598633}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 34, "duration": 3.1221859455108643}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and str(num)[0] in \"13579\" and str(num)[-1] in \"13579\"])", "prompt_tokens": 169, "completion_tokens": 45, "duration": 3.2145931720733643}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 100, "duration": 3.6696646213531494}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n\n    return tuple(sorted(planets[start_index+1:end_index], key=lambda x: planets.index(x)))", "prompt_tokens": 261, "completion_tokens": 129, "duration": 4.198266983032227}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 4.264665365219116}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 78, "duration": 3.3540759086608887}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 34, "duration": 3.282528877258301}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game,guess):\n    return [abs(game[i]-guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 38, "duration": 2.821668863296509}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n\n    strongest = max(extensions, key=lambda x: (strength(x), -extensions.index(x)))\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 76, "duration": 3.4557249546051025}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return b in a + a", "prompt_tokens": 179, "completion_tokens": 20, "duration": 2.4403388500213623}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 143, "duration": 4.392511606216431}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 48, "duration": 1.5558011531829834}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    result_word = \"\"\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < result_word):\n            max_unique_chars = unique_chars\n            result_word = word\n\n    return result_word", "prompt_tokens": 170, "completion_tokens": 92, "duration": 1.6135501861572266}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(remaining, need)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 327, "completion_tokens": 49, "duration": 2.929570436477661}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(1, len(operands)):\n        expression += operators[i-1] + str(operands[i])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 53, "duration": 1.2895724773406982}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    return ''.join([c.swapcase() if c.isalpha() else c for c in s]) if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 45, "duration": 2.6771111488342285}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 38, "duration": 1.071364402770996}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            if count == 1:\n                group = \"\"\n        group += char\n        if char == ')':\n            count -= 1\n            if count == 0:\n                result.append(group)\n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))", "prompt_tokens": 165, "completion_tokens": 115, "duration": 4.904185056686401}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 135, "completion_tokens": 21, "duration": 1.9856386184692383}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 2.3627920150756836}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.195892333984375}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "prompt_tokens": 142, "completion_tokens": 56, "duration": 2.492175340652466}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.1791415214538574}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 160, "completion_tokens": 72, "duration": 2.7071592807769775}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    \n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    \n    return result", "prompt_tokens": 150, "completion_tokens": 58, "duration": 3.741487503051758}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if string == \"\":\n        return \"\"\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]", "prompt_tokens": 192, "completion_tokens": 76, "duration": 2.4843590259552}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 36, "duration": 2.1050825119018555}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.200965166091919}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.0808796882629395}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 1.9683821201324463}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 1.9418256282806396}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    music_list = music_string.split()\n    return [notes[note] for note in music_list]\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "prompt_tokens": 222, "completion_tokens": 137, "duration": 3.0193028450012207}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos == -1:\n            break\n        count += 1\n        start = pos + 1\n    return count", "prompt_tokens": 138, "completion_tokens": 76, "duration": 2.508570909500122}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    numberals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: numberals.index(x))\n    return ' '.join(numbers_list)", "prompt_tokens": 155, "completion_tokens": 76, "duration": 2.483705997467041}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 216, "completion_tokens": 103, "duration": 3.7147934436798096}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.8288745880126953}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.7097232341766357}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 44, "duration": 1.9578120708465576}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 70, "duration": 2.4585721492767334}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 34, "duration": 2.0913898944854736}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 2.1152408123016357}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.8648200035095215}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.7999627590179443}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 2.098828077316284}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    assert len(xs) % 2 == 0, \"The number of coefficients should be even\"\n    assert xs[-1] != 0, \"The largest coefficient should not be zero\"\n    \n    return -xs[0] / xs[1]\n\n# Test cases\nprint(round(find_zero([1, 2]), 2)) # f(x) = 1 + 2x\nprint(round(find_zero([-6, 11, -6, 1]), 2)) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3", "prompt_tokens": 309, "completion_tokens": 151, "duration": 3.161419630050659}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    for i in range(0, len(l), 3):\n        l[i:i+3] = sorted(l[i:i+3])\n    return l", "prompt_tokens": 200, "completion_tokens": 44, "duration": 5.082174777984619}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.705723524093628}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.5717682838439941}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "prompt_tokens": 129, "completion_tokens": 41, "duration": 3.4587745666503906}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 43, "duration": 1.7694025039672852}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.051835298538208}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fibonacci(num):\n        if num <= 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, num + 1):\n                a, b = b, a + b\n            return a\n    \n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n    return fibonacci(i)", "prompt_tokens": 147, "completion_tokens": 181, "duration": 4.939252853393555}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    from itertools import combinations\n    return any(sum(comb) == 0 for comb in combinations(l, 3))", "prompt_tokens": 209, "completion_tokens": 37, "duration": 1.72096586227417}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 2.9659910202026367}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.5113253593444824}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 38, "duration": 3.187685966491699}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.9256319999694824}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    fib_seq = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_seq.append(fib_seq[i-1] + fib_seq[i-2] + fib_seq[i-3] + fib_seq[i-4])\n    return fib_seq[n]", "prompt_tokens": 221, "completion_tokens": 113, "duration": 4.393689870834351}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 3.4491262435913086}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 2.997666358947754}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 21, "duration": 3.8589107990264893}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 3.918612241744995}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.1372861862182617}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 2.767824172973633}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 2.8457045555114746}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 3.0808565616607666}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 102, "completion_tokens": 33, "duration": 2.99941086769104}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 64, "duration": 4.424809455871582}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.2813382148742676}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 28, "duration": 2.9004628658294678}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 3.9746620655059814}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 2.993791341781616}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 67, "duration": 3.387009620666504}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 26, "duration": 2.739291191101074}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 199, "completion_tokens": 72, "duration": 3.422487258911133}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels or (s[i] == 'y' and i == len(s) - 1):\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"Hello\"))  # 2\nprint(vowels_count(\"qwerty\")) # 1", "prompt_tokens": 176, "completion_tokens": 143, "duration": 4.069087743759155}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 50, "duration": 3.106447219848633}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.7378759384155273}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 37, "duration": 3.018723964691162}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(i, node) for i, node in enumerate(arr) if node % 2 == 0]\n    if not even_nodes:\n        return []\n\n    min_even_value = min(even_nodes, key=lambda x: (x[1], x[0]))\n    return [min_even_value[1], min_even_value[0]]", "prompt_tokens": 362, "completion_tokens": 82, "duration": 3.7860734462738037}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num and num > 0:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 42, "duration": 2.827739715576172}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 3.909966468811035}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 4.412842750549316}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.908005475997925}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    def is_palindromic(subarr):\n        return subarr == subarr[::-1]\n\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            changes += 1\n    return changes\n\n# Test cases\nprint(smallest_change([1,2,3,5,4,7,9,6])) # 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2])) # 1\nprint(smallest_change([1, 2, 3, 2, 1])) # 0", "prompt_tokens": 207, "completion_tokens": 151, "duration": 4.329147815704346}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n    \n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 243, "completion_tokens": 76, "duration": 3.423161745071411}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 124, "duration": 4.205528974533081}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "prompt_tokens": 160, "completion_tokens": 31, "duration": 2.6620311737060547}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 58, "duration": 2.750554084777832}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 189, "completion_tokens": 29, "duration": 2.128837823867798}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.984642744064331}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 222, "duration": 4.838080406188965}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 2.7506184577941895}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 94, "completion_tokens": 64, "duration": 2.682612180709839}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 2.0146548748016357}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.1991615295410156}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 180, "completion_tokens": 26, "duration": 2.27115535736084}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.589460849761963}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array[:]\n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 54, "duration": 2.4459216594696045}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += chr(((ord(char) - 97 + 2 * 2) % 26) + 97)\n        elif char.isupper():\n            result += chr(((ord(char) - 65 + 2 * 2) % 26) + 65)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 94, "duration": 3.1906301975250244}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_numbers = sorted(set(lst))\n    if len(unique_numbers) < 2:\n        return None\n    return unique_numbers[1]", "prompt_tokens": 174, "completion_tokens": 39, "duration": 2.4383327960968018}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split(\".\")\n    sentences += S.split(\"?\")\n    sentences += S.split(\"!\")\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 63, "duration": 3.0634751319885254}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 54, "duration": 2.5313191413879395}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = 'aeiouAEIOU'\n    for letter in message:\n        if letter.lower() in vowels:\n            encoded_message += chr((ord(letter) + 2 - ord('a')) % 26 + ord('A'))\n        else:\n            encoded_message += letter.swapcase()\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 78, "duration": 2.9546384811401367}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def largest_prime_sum_of_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    largest_prime = max(primes)\n    \n    return digit_sum(largest_prime)", "prompt_tokens": 336, "completion_tokens": 116, "duration": 3.231543779373169}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 60, "duration": 2.420733690261841}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]", "prompt_tokens": 195, "completion_tokens": 82, "duration": 2.829066753387451}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 25, "duration": 4.802356004714966}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 2.5747463703155518}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.168896436691284}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    pile = []\n    for i in range(n):\n        pile.append(n + 2*i)\n    return pile", "prompt_tokens": 182, "completion_tokens": 35, "duration": 1.9230694770812988}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.9702515602111816}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] or [-1])", "prompt_tokens": 144, "completion_tokens": 35, "duration": 2.0662758350372314}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 48, "duration": 2.3700687885284424}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 2.0870916843414307}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [names[x-1] for x in reversed_arr]\n    return result", "prompt_tokens": 326, "completion_tokens": 94, "duration": 3.155932903289795}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            res.append(fact)\n        else:\n            res.append(sum(range(1, i+1)))\n    return res", "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.6759324073791504}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 105, "duration": 3.1139564514160156}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 46, "duration": 3.5888402462005615}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        arr.insert(0, arr.pop())\n        if arr == sorted_arr:\n            return True\n    return False", "prompt_tokens": 349, "completion_tokens": 58, "duration": 2.325324296951294}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 36, "duration": 2.0306668281555176}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    letters = test.split()\n    hist = {}\n    max_count = 0\n    for letter in letters:\n        hist[letter] = hist.get(letter, 0) + 1\n        max_count = max(max_count, hist[letter])\n    \n    return {key: value for key, value in hist.items() if value == max_count}", "prompt_tokens": 201, "completion_tokens": 81, "duration": 2.7618002891540527}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    s = ''.join(char for char in s if char not in c)\n    return s, s == s[::-1]", "prompt_tokens": 212, "completion_tokens": 37, "duration": 1.8545160293579102}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len([digit for digit in s if int(digit) % 2 != 0]), i, i, i) for i, s in enumerate(lst, start=1)]", "prompt_tokens": 223, "completion_tokens": 68, "duration": 4.03447699546814}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return None\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 69, "duration": 2.2436485290527344}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(map(sum, grid))\n    return math.ceil(total_water / capacity)", "prompt_tokens": 373, "completion_tokens": 34, "duration": 3.5744309425354004}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.6731245517730713}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    result = [word for word in words if sum(1 for letter in word if letter in consonants) == n]\n    return result", "prompt_tokens": 231, "completion_tokens": 80, "duration": 2.592700958251953}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 98, "duration": 4.458827257156372}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    open_count = lst[0].count('(')\n    close_count = lst[1].count(')')\n    \n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 218, "completion_tokens": 55, "duration": 2.0937163829803467}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 3.1705775260925293}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x < 100)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 3.451137065887451}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    def collatz_sequence(n):\n        sequence = [n]\n        while n > 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n    \n    return sorted([num for num in collatz_sequence(n) if num % 2 != 0])", "prompt_tokens": 281, "completion_tokens": 94, "duration": 4.404038906097412}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month, day, year = parts\n\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return day >= 1 and day <= 31\n    elif month in [4, 6, 9, 11]:\n        return day >= 1 and day <= 30\n    elif month == 2:\n        if year % 4 == 0:\n            return day >= 1 and day <= 29\n        else:\n            return day >= 1 and day <= 28\n    else:\n        return False\n\n    return False", "prompt_tokens": 313, "completion_tokens": 212, "duration": 5.834261655807495}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 5.258156061172485}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 44, "duration": 4.993686676025391}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n    \n    length = end - start\n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 304, "completion_tokens": 112, "duration": 4.212874889373779}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n    return sum(abs(num) for num in arr) * product", "prompt_tokens": 172, "completion_tokens": 62, "duration": 3.938680648803711}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    seq = [0, 1, 3]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            seq.append(1 + i // 2)\n        else:\n            seq.append(seq[i-1] + seq[i-2] + seq[i-3])\n    return seq", "prompt_tokens": 285, "completion_tokens": 80, "duration": 4.001438856124878}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "def sum_squares(lst):\n    return sum([(int(x) + (1 if x - int(x) > 0 else 0))**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 40, "duration": 3.2815465927124023}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) > 1 and txt[-2].isalpha():\n        return False\n    return True", "prompt_tokens": 187, "completion_tokens": 67, "duration": 4.474294662475586}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i-1\n    return index", "prompt_tokens": 153, "completion_tokens": 49, "duration": 4.863962650299072}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    if negative_integers:\n        largest_negative = max(negative_integers)\n    else:\n        largest_negative = None\n\n    if positive_integers:\n        smallest_positive = min(positive_integers)\n    else:\n        smallest_positive = None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 106, "duration": 4.771920204162598}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    return n % 8 == 0", "prompt_tokens": 127, "completion_tokens": 22, "duration": 2.962445020675659}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    result = 1\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 145, "completion_tokens": 43, "duration": 3.2704203128814697}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 40, "duration": 3.184149980545044}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "import re\n\ndef file_name_check(file_name):\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 101, "duration": 4.111640453338623}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 219, "completion_tokens": 85, "duration": 3.5948262214660645}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    sentence = sentence.split()\n    result = ' '.join(word for word in sentence if is_prime(len(word)))\n    return result", "prompt_tokens": 197, "completion_tokens": 88, "duration": 3.993305206298828}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_den * n_den)\n    \n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 62, "duration": 3.3535547256469727}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 3.0040013790130615}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 169, "completion_tokens": 81, "duration": 5.317788124084473}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 123, "duration": 4.105527877807617}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    start_index = min(index1, index2) + 1\n    end_index = max(index1, index2)\n    \n    return tuple(sorted(planets[start_index:end_index], key=lambda x: planets.index(x)))", "prompt_tokens": 261, "completion_tokens": 133, "duration": 4.416871786117554}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 3.0901098251342773}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 136, "completion_tokens": 79, "duration": 3.8038713932037354}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if x % 2 != 0 and x > 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 40, "duration": 2.857042074203491}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 39, "duration": 4.391193151473999}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n    \n    strongest = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 70, "duration": 3.218766212463379}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\")) # False\nprint(cycpattern_check(\"hello\", \"ell\")) # True\nprint(cycpattern_check(\"whassup\", \"psus\")) # False\nprint(cycpattern_check(\"abab\", \"baa\")) # True\nprint(cycpattern_check(\"efef\", \"eeff\")) # False\nprint(cycpattern_check(\"himenss\", \"simen\")) # True", "prompt_tokens": 179, "completion_tokens": 130, "duration": 4.079968452453613}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 77, "duration": 3.656508684158325}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_nums = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_nums.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 140, "duration": 2.7711024284362793}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 48, "duration": 1.2377557754516602}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 170, "completion_tokens": 91, "duration": 1.7207746505737305}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 327, "completion_tokens": 51, "duration": 1.1519811153411865}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 48, "duration": 1.2406463623046875}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    return s.swapcase() if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 30, "duration": 1.7500758171081543}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 1.0061726570129395}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    open_count = 0\n    start_index = 0\n    \n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n        \n        if open_count == 0:\n            result.append(paren_string[start_index:i+1].replace(\" \", \"\"))\n            start_index = i+1\n            \n    return result", "prompt_tokens": 165, "completion_tokens": 112, "duration": 4.405118703842163}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.1772677898406982}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 142, "completion_tokens": 62, "duration": 2.6180431842803955}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.2827346324920654}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "prompt_tokens": 160, "completion_tokens": 75, "duration": 3.102525234222412}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_nums = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_nums.append(max_num)\n    return max_nums", "prompt_tokens": 150, "completion_tokens": 59, "duration": 4.123181343078613}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 192, "completion_tokens": 77, "duration": 2.714062452316284}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 43, "duration": 2.3036036491394043}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 152, "completion_tokens": 41, "duration": 2.2628612518310547}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.2247328758239746}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 2.1560401916503906}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.0757980346679688}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [notes[note] for note in music_string.split()]", "prompt_tokens": 222, "completion_tokens": 64, "duration": 2.559011936187744}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += 1\n        else:\n            i += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 75, "duration": 2.6517906188964844}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 103, "duration": 2.882765054702759}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 216, "completion_tokens": 103, "duration": 2.8235106468200684}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.8288745880126953}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.9937655925750732}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.2666990756988525}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 79, "duration": 2.4912662506103516}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [n for n in numbers if numbers.count(n) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 2.1591501235961914}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 2.2389981746673584}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.8748211860656738}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.7926876544952393}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 57, "duration": 2.238525629043579}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    return -xs[0]/xs[1]", "prompt_tokens": 309, "completion_tokens": 22, "duration": 1.742905616760254}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted(sorted_values)):\n        result[i] = v\n    return result", "prompt_tokens": 200, "completion_tokens": 86, "duration": 2.9330031871795654}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.9201483726501465}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.6182000637054443}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    return sum(str(x).count('7') for x in range(n) if x % 11 == 0 or x % 13 == 0)", "prompt_tokens": 129, "completion_tokens": 41, "duration": 1.799715518951416}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i%2==0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 41, "duration": 2.107712984085083}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 3.6861608028411865}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    def fibonacci(num):\n        if num <= 1:\n            return num\n        else:\n            return fibonacci(num - 1) + fibonacci(num - 2)\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        fib = fibonacci(num)\n        if is_prime(fib):\n            count += 1\n\n    return fib", "prompt_tokens": 147, "completion_tokens": 146, "duration": 5.198903560638428}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 74, "duration": 5.273914575576782}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 3.156618118286133}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.4916205406188965}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 38, "duration": 4.591110467910767}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 3.189487934112549}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    n = len(l)\n    sorted_list = sorted(l)\n    if n % 2 == 0:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2\n    else:\n        return sorted_list[n // 2]", "prompt_tokens": 125, "completion_tokens": 70, "duration": 3.5063209533691406}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 3.2703330516815186}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.2632527351379395}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u'])", "prompt_tokens": 172, "completion_tokens": 41, "duration": 3.356264352798462}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 3.249790906906128}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 15, "duration": 2.9433977603912354}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 2.9218854904174805}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 102, "completion_tokens": 33, "duration": 3.0325002670288086}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "prompt_tokens": 142, "completion_tokens": 60, "duration": 3.58581805229187}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 137, "completion_tokens": 52, "duration": 3.387878656387329}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 2.9992916584014893}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 4.269115447998047}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 65, "duration": 3.6789803504943848}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "prompt_tokens": 158, "completion_tokens": 91, "duration": 3.654284954071045}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c, result = 0, 0, 1, 0\n        for i in range(3, n+1):\n            result = a + b + c\n            a, b, c = b, c, result\n        return result", "prompt_tokens": 199, "completion_tokens": 102, "duration": 3.966209888458252}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        vowels += 'y'\n    return sum(1 for char in s if char.lower() in vowels)", "prompt_tokens": 176, "completion_tokens": 50, "duration": 4.34424090385437}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 52, "duration": 3.223874807357788}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.720703125}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s,n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 260, "completion_tokens": 49, "duration": 4.3799214363098145}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    \n    if not even_values:\n        return []\n    \n    min_even_value = min(even_values)\n    min_even_value_index = arr.index(min_even_value)\n    \n    return [min_even_value, min_even_value_index]", "prompt_tokens": 362, "completion_tokens": 74, "duration": 4.777565240859985}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    cnt = Counter(lst)\n    result = max([k for k, v in cnt.items() if k > 0 and v >= k], default=-1)\n    return result", "prompt_tokens": 215, "completion_tokens": 52, "duration": 4.386125326156616}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 3.1622297763824463}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 3.9358298778533936}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.8302671909332275}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 207, "completion_tokens": 55, "duration": 3.034569025039673}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3", "prompt_tokens": 129, "completion_tokens": 105, "duration": 3.6693997383117676}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "prompt_tokens": 160, "completion_tokens": 31, "duration": 2.6620311737060547}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 58, "duration": 3.212120294570923}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 189, "completion_tokens": 24, "duration": 2.709477186203003}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s) - 2))", "prompt_tokens": 171, "completion_tokens": 62, "duration": 3.1783814430236816}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append('A+')\n        elif g > 3.7:\n            result.append('A')\n        elif g > 3.3:\n            result.append('A-')\n        elif g > 3.0:\n            result.append('B+')\n        elif g > 2.7:\n            result.append('B')\n        elif g > 2.3:\n            result.append('B-')\n        elif g > 2.0:\n            result.append('C+')\n        elif g > 1.7:\n            result.append('C')\n        elif g > 1.3:\n            result.append('C-')\n        elif g > 1.0:\n            result.append('D+')\n        elif g > 0.7:\n            result.append('D')\n        elif g >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))", "prompt_tokens": 320, "completion_tokens": 254, "duration": 5.304771661758423}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4431917667388916}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 2\n    return 2 + 8 * 9**(n-2)", "prompt_tokens": 94, "completion_tokens": 37, "duration": 2.780158519744873}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.7746636867523193}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "prompt_tokens": 180, "completion_tokens": 26, "duration": 3.9780633449554443}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.4142539501190186}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if sum([sorted_array[0], sorted_array[-1]]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "prompt_tokens": 253, "completion_tokens": 55, "duration": 2.4504802227020264}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) > 1:\n        return unique_elements[1]\n    else:\n        return None", "prompt_tokens": 174, "completion_tokens": 42, "duration": 2.3110744953155518}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "prompt_tokens": 157, "completion_tokens": 40, "duration": 2.1408772468566895}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return (x == y + z) or (y == x + z) or (z == x + y) if all(isinstance(i, int) for i in [x, y, z]) else False", "prompt_tokens": 185, "completion_tokens": 58, "duration": 2.494127035140991}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiou\"\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a')).upper()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    \n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 95, "duration": 2.7705037593841553}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(map(int, str(n)))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n\n    max_prime = max(primes)\n    return digit_sum(max_prime)", "prompt_tokens": 336, "completion_tokens": 120, "duration": 3.2626149654388428}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    upper_flag = False\n    lower_flag = False\n    for key in dictionary.keys():\n        if isinstance(key, str):\n            if key.islower():\n                lower_flag = True\n            elif key.isupper():\n                upper_flag = True\n            else:\n                return False\n        else:\n            return False\n    return upper_flag != lower_flag", "prompt_tokens": 219, "completion_tokens": 91, "duration": 2.8661487102508545}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    if n <= 1:\n        return []\n    \n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    \n    return primes", "prompt_tokens": 195, "completion_tokens": 91, "duration": 3.033304452896118}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.9090840816497803}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.240079164505005}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        stones.append(n)\n    return stones", "prompt_tokens": 182, "completion_tokens": 61, "duration": 2.467759370803833}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.7459938526153564}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    return max(i for i in range(x, y+1) if i % 2 == 0) if any(i % 2 == 0 for i in range(x, y+1)) else -1", "prompt_tokens": 144, "completion_tokens": 52, "duration": 2.3922743797302246}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 48, "duration": 2.2184176445007324}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 33, "duration": 1.8690154552459717}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    digits = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[num-1] for num in reversed_arr]\n    return result", "prompt_tokens": 326, "completion_tokens": 94, "duration": 2.604111433029175}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    def sum_numbers(num):\n        return sum(range(1, num+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    \n    return result", "prompt_tokens": 174, "completion_tokens": 105, "duration": 2.908851385116577}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def count_even_odd_palindromes(start, end):\n        even_count = 0\n        odd_count = 0\n        for i in range(start, end+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n        return even_count, odd_count\n\n    return count_even_odd_palindromes(1, n)", "prompt_tokens": 261, "completion_tokens": 124, "duration": 3.238020181655884}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 174, "completion_tokens": 55, "duration": 2.232512950897217}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 349, "completion_tokens": 62, "duration": 2.1929562091827393}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for x in lst1 if x % 2 != 0) <= sum(1 for x in lst2 if x % 2 != 0) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 57, "duration": 3.379696846008301}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    \n    max_count = max(hist.values(), default=0)\n    result = {k: v for k, v in hist.items() if v == max_count}\n    \n    return result", "prompt_tokens": 201, "completion_tokens": 74, "duration": 2.4779250621795654}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])\n    return (s, s == s[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.9342067241668701}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len([x for x in s if int(x) % 2 != 0]), i, i, i) for i, s in enumerate(lst)]", "prompt_tokens": 223, "completion_tokens": 63, "duration": 2.330667018890381}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 2.347235918045044}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return (total_water + capacity - 1) // capacity", "prompt_tokens": 373, "completion_tokens": 38, "duration": 3.548647880554199}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.7035706043243408}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.228975534439087}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if word[i-1] in consonants and word[i+1] in consonants:\n                return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 100, "duration": 2.5297882556915283}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    open_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count == 0:\n                    return 'No'\n                open_count -= 1\n    if open_count == 0:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 218, "completion_tokens": 87, "duration": 2.659013271331787}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 3.4887919425964355}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= abs(x) < 100)", "prompt_tokens": 178, "completion_tokens": 33, "duration": 1.6891124248504639}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "prompt_tokens": 281, "completion_tokens": 84, "duration": 2.7752671241760254}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if 1 <= month <= 12:\n            if month in [1, 3, 5, 7, 8, 10, 12]:\n                if 1 <= day <= 31:\n                    return True\n            elif month in [4, 6, 9, 11]:\n                if 1 <= day <= 30:\n                    return True\n            elif month == 2:\n                if year % 4 == 0:\n                    if 1 <= day <= 29:\n                        return True\n                elif 1 <= day <= 28:\n                    return True\n        return False\n    except:\n        return False", "prompt_tokens": 313, "completion_tokens": 161, "duration": 4.87806248664856}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 3.6516215801239014}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst) - 1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 46, "duration": 2.0096373558044434}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n    \n    length = end - start\n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 304, "completion_tokens": 112, "duration": 4.212874889373779}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        tribonacci = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n        return tribonacci", "prompt_tokens": 285, "completion_tokens": 134, "duration": 4.645567893981934}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 3.1688156127929688}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    return txt[-1].isalpha() and txt[-2] == \" \"", "prompt_tokens": 187, "completion_tokens": 40, "duration": 3.4877853393554688}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            idx = i - 1\n            break\n    return idx", "prompt_tokens": 153, "completion_tokens": 53, "duration": 3.3869738578796387}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 81, "duration": 3.512511968612671}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 127, "completion_tokens": 27, "duration": 3.015138626098633}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            temp = 1\n            for j in range(1, i+1):\n                temp *= j\n            result *= temp\n        return result", "prompt_tokens": 145, "completion_tokens": 75, "duration": 3.48846697807312}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 36, "duration": 3.331773519515991}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2 or not parts[0] or not parts[0][0].isalpha() or parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 93, "duration": 3.9468488693237305}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 5.423492908477783}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def get_word_length(word):\n        return len(word)\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(get_word_length(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 110, "duration": 4.235730171203613}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_den * n_den)\n    \n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 62, "duration": 3.6688156127929688}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 36, "duration": 2.916374921798706}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "prompt_tokens": 169, "completion_tokens": 67, "duration": 3.4223570823669434}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 94, "duration": 3.7863359451293945}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index < end_index:\n        return tuple(planets[start_index+1:end_index])\n    else:\n        return tuple(planets[end_index+1:start_index][::-1])", "prompt_tokens": 261, "completion_tokens": 125, "duration": 4.127822637557983}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted(filter(lambda x: len(x) % 2 == 0, lst), key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 39, "duration": 4.607685804367065}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 79, "duration": 3.580277919769287}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 2.7937138080596924}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 28, "duration": 3.5703887939453125}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def get_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    strongest = max(extensions, key=get_strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 69, "duration": 3.4626965522766113}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "prompt_tokens": 179, "completion_tokens": 136, "duration": 5.048776388168335}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 77, "duration": 3.6609742641448975}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_dict = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, roman in roman_dict.items():\n        while number >= value:\n            result += roman\n            number -= value\n    return result", "prompt_tokens": 151, "completion_tokens": 129, "duration": 4.077539443969727}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 158, "completion_tokens": 52, "duration": 2.9030139446258545}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 327, "completion_tokens": 47, "duration": 2.8171019554138184}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(1, len(operands)):\n        expression += operators[i-1] + str(operands[i])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 53, "duration": 3.0689609050750732}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    return result", "prompt_tokens": 157, "completion_tokens": 62, "duration": 1.7932848930358887}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.7496426105499268}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            if count == 1:\n                group = \"\"\n        group += char\n        if char == ')':\n            count -= 1\n            if count == 0:\n                result.append(group)\n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))", "prompt_tokens": 165, "completion_tokens": 115, "duration": 4.904185056686401}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.13432240486145}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 2.4843740463256836}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.635263442993164}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "prompt_tokens": 142, "completion_tokens": 56, "duration": 2.492175340652466}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.1384620666503906}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_total = sum(numbers)\n    product_total = 1\n    for num in numbers:\n        product_total *= num\n    return (sum_total, product_total)", "prompt_tokens": 160, "completion_tokens": 73, "duration": 2.6273326873779297}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_list.append(max_num)\n    return max_list", "prompt_tokens": 150, "completion_tokens": 62, "duration": 2.4928503036499023}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]", "prompt_tokens": 192, "completion_tokens": 76, "duration": 3.3221757411956787}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return \"\".join([str(int(i) ^ int(j)) for i, j in zip(a, b)])", "prompt_tokens": 126, "completion_tokens": 37, "duration": 2.2105839252471924}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 152, "completion_tokens": 41, "duration": 2.276129722595215}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.326540470123291}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 2.1468472480773926}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.0073132514953613}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [notes[note] for note in music_string.split()]", "prompt_tokens": 222, "completion_tokens": 64, "duration": 2.559011936187744}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 74, "duration": 2.9661526679992676}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 103, "duration": 3.2411394119262695}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    res = None\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            res = (numbers[i-1], numbers[i])\n    return res\n\n# Test cases\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # (2.0, 2.0)", "prompt_tokens": 216, "completion_tokens": 195, "duration": 5.214127063751221}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.8288745880126953}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.822077751159668}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.4771811962127686}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 79, "duration": 2.4912662506103516}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 2.122736692428589}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.1340184211730957}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.8879389762878418}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.894559621810913}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "prompt_tokens": 149, "completion_tokens": 102, "duration": 2.8995697498321533}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "prompt_tokens": 309, "completion_tokens": 23, "duration": 1.8695454597473145}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted(sorted_values)):\n        result[i] = v\n    return result", "prompt_tokens": 200, "completion_tokens": 86, "duration": 2.9330031871795654}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.812459945678711}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.7433135509490967}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 57, "duration": 2.3540444374084473}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else val for i, val in enumerate(l)]", "prompt_tokens": 173, "completion_tokens": 42, "duration": 2.2103874683380127}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 3.7247366905212402}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while n > 0:\n        i += 1\n        if is_prime(fibonacci(i)):\n            n -= 1\n    return fibonacci(i)", "prompt_tokens": 147, "completion_tokens": 174, "duration": 5.350690126419067}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 74, "duration": 5.273914575576782}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 3.45405912399292}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "prompt_tokens": 207, "completion_tokens": 28, "duration": 2.069643974304199}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 45, "duration": 3.691335678100586}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 4.351720094680786}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 113, "duration": 4.234102964401245}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]", "prompt_tokens": 125, "completion_tokens": 64, "duration": 4.8998260498046875}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 3.5294532775878906}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 3.0677762031555176}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 1.7496938705444336}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiouAEIOU'])", "prompt_tokens": 172, "completion_tokens": 34, "duration": 3.4495060443878174}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.345207691192627}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 3.0242691040039062}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 2.8674793243408203}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.3529574871063232}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    opening = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening += 1\n        elif bracket == \">\":\n            opening -= 1\n        if opening < 0:\n            return False\n    return opening == 0", "prompt_tokens": 142, "completion_tokens": 68, "duration": 3.7121262550354004}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.477552652359009}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 3.0876855850219727}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 3.4639158248901367}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 4.123863458633423}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 69, "duration": 2.279885768890381}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs):\n    return [xs[i]*i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 25, "duration": 2.765313148498535}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 102, "duration": 5.168015718460083}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        vowels += 'y'\n    return sum(1 for char in s if char.lower() in vowels)", "prompt_tokens": 176, "completion_tokens": 50, "duration": 4.34424090385437}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 53, "duration": 3.484450578689575}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.921161413192749}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = [int(x) for x in s.split() if x.isdigit()]\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 38, "duration": 2.9809682369232178}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n\n    min_even_value = min(even_values)\n    min_even_value_index = arr.index(min_even_value)\n    return [min_even_value, min_even_value_index]", "prompt_tokens": 362, "completion_tokens": 71, "duration": 4.556764602661133}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 37, "duration": 3.1895554065704346}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst", "prompt_tokens": 174, "completion_tokens": 58, "duration": 3.4370334148406982}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 3.680319309234619}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.7176320552825928}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 207, "completion_tokens": 55, "duration": 3.1786270141601562}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 3.0323095321655273}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n            if count == 3:\n                return True\n    return False", "prompt_tokens": 129, "completion_tokens": 109, "duration": 5.106977224349976}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 160, "completion_tokens": 33, "duration": 2.8345048427581787}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 349, "completion_tokens": 53, "duration": 3.107821464538574}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 189, "completion_tokens": 29, "duration": 2.8554420471191406}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 80, "duration": 3.2314200401306152}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n    return result", "prompt_tokens": 320, "completion_tokens": 226, "duration": 4.988205671310425}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.5160369873046875}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    count = 0\n    if n == 1:\n        return 2\n    count += 2 * 9 * (10**(n-2))\n    return count", "prompt_tokens": 94, "completion_tokens": 48, "duration": 2.9783999919891357}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 183, "completion_tokens": 25, "duration": 3.8188259601593018}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.7971463203430176}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "prompt_tokens": 180, "completion_tokens": 26, "duration": 2.055957794189453}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 70, "duration": 2.8156564235687256}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array[:]\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 56, "duration": 2.551884889602661}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    return ''.join([chr((ord(c) - ord('a') + 2*2) % 26 + ord('a')) if c.islower() else c for c in s])", "prompt_tokens": 160, "completion_tokens": 49, "duration": 2.307790994644165}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 52, "duration": 2.3499152660369873}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences += S.split('!')\n    sentences += S.split('?')\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))", "prompt_tokens": 157, "completion_tokens": 47, "duration": 2.4350473880767822}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return all(isinstance(num, int) for num in (x, y, z)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 51, "duration": 2.3810179233551025}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiou\"\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a')).upper()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    \n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 95, "duration": 2.7705037593841553}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def sum_of_digits_of_largest_prime(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum([int(d) for d in str(n)])\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 128, "duration": 4.728965997695923}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 60, "duration": 2.420733690261841}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 2.7404284477233887}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 29, "duration": 2.135709762573242}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.9090840816497803}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.1321446895599365}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile", "prompt_tokens": 182, "completion_tokens": 61, "duration": 2.2920451164245605}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 3.5697991847991943}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 144, "completion_tokens": 45, "duration": 2.058150291442871}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.241297721862793}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 1.984708309173584}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    return [digits[num] for num in reversed_arr]", "prompt_tokens": 326, "completion_tokens": 115, "duration": 3.102436065673828}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 88, "duration": 2.7417428493499756}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count", "prompt_tokens": 261, "completion_tokens": 98, "duration": 2.7613565921783447}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(d) for d in str(abs(num))) > 0)", "prompt_tokens": 174, "completion_tokens": 34, "duration": 2.0265607833862305}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 349, "completion_tokens": 62, "duration": 2.1929562091827393}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 36, "duration": 1.900071382522583}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    \n    max_count = max(hist.values(), default=0)\n    result = {k: v for k, v in hist.items() if v == max_count}\n    \n    return result", "prompt_tokens": 201, "completion_tokens": 74, "duration": 2.4779250621795654}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    return result, result == result[::-1]", "prompt_tokens": 212, "completion_tokens": 37, "duration": 1.9593040943145752}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        sum(int(c) % 2 != 0 for c in s), s.index(c) + 1, s.index(c) + 1, s.index(c) + 1) for s in lst for c in s]", "prompt_tokens": 223, "completion_tokens": 81, "duration": 2.5357115268707275}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 2.4808480739593506}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(map(sum, grid))\n    return math.ceil(total_water / capacity)", "prompt_tokens": 373, "completion_tokens": 34, "duration": 3.5744309425354004}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.7792084217071533}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n\n    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for letter in word if letter.isalpha() and letter not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result", "prompt_tokens": 231, "completion_tokens": 87, "duration": 2.55491304397583}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i+1] in consonants and word[i-1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 98, "duration": 2.7190535068511963}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        count += 1 if s == '(' else -1\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 53, "duration": 2.0899221897125244}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.668445110321045}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum([x for x in arr[:k] if 10 <= x <= 99])", "prompt_tokens": 178, "completion_tokens": 32, "duration": 3.158369302749634}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([num for num in collatz if num % 2 != 0])", "prompt_tokens": 281, "completion_tokens": 82, "duration": 2.210515022277832}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if 1 <= month <= 12:\n            if month in [1, 3, 5, 7, 8, 10, 12]:\n                if 1 <= day <= 31:\n                    return True\n            elif month in [4, 6, 9, 11]:\n                if 1 <= day <= 30:\n                    return True\n            elif month == 2:\n                if year % 4 == 0:\n                    if 1 <= day <= 29:\n                        return True\n                elif 1 <= day <= 28:\n                    return True\n        return False\n    except:\n        return False", "prompt_tokens": 313, "completion_tokens": 161, "duration": 4.87806248664856}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # \u279e 3", "prompt_tokens": 190, "completion_tokens": 116, "duration": 4.799492835998535}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    sorted_lst = sorted(lst)\n    return sorted_lst == lst and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 36, "duration": 3.436354637145996}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 158, "duration": 5.598130226135254}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n    return product * sum(abs(num) for num in arr)", "prompt_tokens": 172, "completion_tokens": 66, "duration": 2.078993082046509}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    result = [3]\n    if n == 0:\n        return []\n    elif n == 1:\n        return result\n    else:\n        for i in range(1, n):\n            if i % 2 == 0:\n                result.append(1 + i // 2)\n            else:\n                result.append(result[i - 1] + result[i - 2] + result[i - 3])\n        return result", "prompt_tokens": 285, "completion_tokens": 99, "duration": 5.343504190444946}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 3.0680184364318848}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) > 1 and txt[-2].isalpha():\n        return False\n    return True", "prompt_tokens": 187, "completion_tokens": 67, "duration": 4.474294662475586}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 153, "completion_tokens": 53, "duration": 3.2878458499908447}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 188, "completion_tokens": 90, "duration": 3.890843629837036}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n+1, 2):\n        if n - i >= 0:\n            count += 1\n    return count == 4", "prompt_tokens": 127, "completion_tokens": 55, "duration": 3.5375847816467285}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            temp = 1\n            for j in range(1, i+1):\n                temp *= j\n            result *= temp\n        return result", "prompt_tokens": 145, "completion_tokens": 70, "duration": 3.9703047275543213}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = re.sub(r'\\s', '_', text)\n    return text", "prompt_tokens": 156, "completion_tokens": 44, "duration": 3.4061620235443115}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(1 for c in name if c.isdigit()) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 99, "duration": 4.292522668838501}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 3.1983070373535156}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 95, "duration": 3.8871896266937256}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_denom * n_denom)\n    \n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 66, "duration": 3.313920259475708}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 4.474608898162842}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_odd_digit(n):\n        n_str = str(abs(n))\n        return int(n_str[0]) % 2 != 0 and int(n_str[-1]) % 2 != 0\n    \n    count = 0\n    for num in nums:\n        if num > 10 and is_odd_digit(num):\n            count += 1\n    \n    return count", "prompt_tokens": 169, "completion_tokens": 86, "duration": 3.7950246334075928}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 123, "duration": 5.7769691944122314}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    \n    return tuple([p for p in planets[start_index+1:end_index]])", "prompt_tokens": 261, "completion_tokens": 125, "duration": 5.372603893280029}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 3.157214641571045}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 78, "duration": 3.453221559524536}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 2.8807239532470703}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.7771897315979004}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 67, "duration": 3.5131309032440186}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "prompt_tokens": 179, "completion_tokens": 136, "duration": 5.55906081199646}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 71, "duration": 3.134073257446289}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()\n\n# Test cases\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'", "prompt_tokens": 151, "completion_tokens": 197, "duration": 6.572391986846924}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)", "prompt_tokens": 158, "completion_tokens": 57, "duration": 3.161298990249634}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    \n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 170, "completion_tokens": 92, "duration": 3.3375308513641357}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 327, "completion_tokens": 47, "duration": 2.9945456981658936}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    expr = str(operands[0])\n    for i in range(len(operators)):\n        expr += operators[i] + str(operands[i+1])\n    return eval(expr)", "prompt_tokens": 257, "completion_tokens": 50, "duration": 2.92203426361084}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.6143977642059326}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.711808204650879}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    curr_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        curr_group += char\n        if count == 0:\n            result.append(curr_group.replace(\" \", \"\"))\n            curr_group = \"\"\n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))", "prompt_tokens": 165, "completion_tokens": 119, "duration": 3.4806272983551025}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.1772677898406982}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "prompt_tokens": 142, "completion_tokens": 56, "duration": 2.492175340652466}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.2827346324920654}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "prompt_tokens": 160, "completion_tokens": 75, "duration": 3.102525234222412}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_nums = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_nums.append(max_num)\n    return max_nums", "prompt_tokens": 150, "completion_tokens": 59, "duration": 4.123181343078613}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 192, "completion_tokens": 77, "duration": 2.714062452316284}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 43, "duration": 2.3036036491394043}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 152, "completion_tokens": 41, "duration": 2.2628612518310547}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.2247328758239746}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 2.1560401916503906}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.0757980346679688}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [notes[note] for note in music_string.split()]", "prompt_tokens": 222, "completion_tokens": 64, "duration": 2.559011936187744}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += 1\n        else:\n            i += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 75, "duration": 2.6517906188964844}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 103, "duration": 2.882765054702759}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    res = None\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            res = (numbers[i-1], numbers[i])\n    return res\n\n# Test cases\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # (2.0, 2.0)", "prompt_tokens": 216, "completion_tokens": 195, "duration": 5.214127063751221}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 2.367142915725708}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.9937655925750732}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.2666990756988525}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 79, "duration": 2.4912662506103516}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [n for n in numbers if numbers.count(n) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 2.1591501235961914}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 2.2389981746673584}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.8748211860656738}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.7926876544952393}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 57, "duration": 2.238525629043579}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    return -xs[0]/xs[1]", "prompt_tokens": 309, "completion_tokens": 22, "duration": 1.742905616760254}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted(sorted_values)):\n        result[i] = v\n    return result", "prompt_tokens": 200, "completion_tokens": 86, "duration": 2.9330031871795654}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.9201483726501465}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.6182000637054443}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 52, "duration": 3.8719937801361084}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i%2==0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 41, "duration": 2.107712984085083}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 3.6861608028411865}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    def fibonacci(num):\n        if num <= 1:\n            return num\n        else:\n            return fibonacci(num - 1) + fibonacci(num - 2)\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        fib = fibonacci(num)\n        if is_prime(fib):\n            count += 1\n\n    return fib", "prompt_tokens": 147, "completion_tokens": 146, "duration": 5.198903560638428}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 74, "duration": 5.273914575576782}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 3.156618118286133}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.4916205406188965}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 38, "duration": 4.591110467910767}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 3.189487934112549}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    n = len(l)\n    sorted_list = sorted(l)\n    if n % 2 == 0:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2\n    else:\n        return sorted_list[n // 2]", "prompt_tokens": 125, "completion_tokens": 70, "duration": 3.5063209533691406}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 3.2703330516815186}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.2632527351379395}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u'])", "prompt_tokens": 172, "completion_tokens": 41, "duration": 3.356264352798462}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 3.249790906906128}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 15, "duration": 2.9433977603912354}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 2.9218854904174805}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 102, "completion_tokens": 33, "duration": 3.0325002670288086}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "prompt_tokens": 142, "completion_tokens": 60, "duration": 3.58581805229187}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 137, "completion_tokens": 52, "duration": 3.387878656387329}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 2.9992916584014893}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 4.269115447998047}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 65, "duration": 3.6789803504943848}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "prompt_tokens": 158, "completion_tokens": 91, "duration": 3.654284954071045}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c, result = 0, 0, 1, 0\n        for i in range(3, n+1):\n            result = a + b + c\n            a, b, c = b, c, result\n        return result", "prompt_tokens": 199, "completion_tokens": 102, "duration": 3.966209888458252}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        vowels += 'y'\n    return sum(1 for char in s if char.lower() in vowels)", "prompt_tokens": 176, "completion_tokens": 50, "duration": 4.34424090385437}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 52, "duration": 3.223874807357788}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.720703125}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s,n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 260, "completion_tokens": 49, "duration": 4.3799214363098145}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    \n    if not even_values:\n        return []\n    \n    min_even_value = min(even_values)\n    min_even_value_index = arr.index(min_even_value)\n    \n    return [min_even_value, min_even_value_index]", "prompt_tokens": 362, "completion_tokens": 74, "duration": 4.777565240859985}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    cnt = Counter(lst)\n    result = max([k for k, v in cnt.items() if k > 0 and v >= k], default=-1)\n    return result", "prompt_tokens": 215, "completion_tokens": 52, "duration": 4.386125326156616}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 3.1622297763824463}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 3.9358298778533936}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.8302671909332275}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 207, "completion_tokens": 55, "duration": 3.034569025039673}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3", "prompt_tokens": 129, "completion_tokens": 105, "duration": 3.6693997383117676}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "prompt_tokens": 160, "completion_tokens": 31, "duration": 2.6620311737060547}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 58, "duration": 3.212120294570923}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 189, "completion_tokens": 24, "duration": 2.709477186203003}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s) - 2))", "prompt_tokens": 171, "completion_tokens": 62, "duration": 3.1783814430236816}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append('A+')\n        elif g > 3.7:\n            result.append('A')\n        elif g > 3.3:\n            result.append('A-')\n        elif g > 3.0:\n            result.append('B+')\n        elif g > 2.7:\n            result.append('B')\n        elif g > 2.3:\n            result.append('B-')\n        elif g > 2.0:\n            result.append('C+')\n        elif g > 1.7:\n            result.append('C')\n        elif g > 1.3:\n            result.append('C-')\n        elif g > 1.0:\n            result.append('D+')\n        elif g > 0.7:\n            result.append('D')\n        elif g >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))", "prompt_tokens": 320, "completion_tokens": 254, "duration": 5.304771661758423}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4431917667388916}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 2\n    return 2 + 8 * 9**(n-2)", "prompt_tokens": 94, "completion_tokens": 37, "duration": 2.780158519744873}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.7746636867523193}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "prompt_tokens": 180, "completion_tokens": 26, "duration": 3.9780633449554443}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.4142539501190186}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if sum([sorted_array[0], sorted_array[-1]]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "prompt_tokens": 253, "completion_tokens": 55, "duration": 2.4504802227020264}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) > 1:\n        return unique_elements[1]\n    else:\n        return None", "prompt_tokens": 174, "completion_tokens": 42, "duration": 2.3110744953155518}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "prompt_tokens": 157, "completion_tokens": 40, "duration": 2.1408772468566895}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return (x == y + z) or (y == x + z) or (z == x + y) if all(isinstance(i, int) for i in [x, y, z]) else False", "prompt_tokens": 185, "completion_tokens": 58, "duration": 2.494127035140991}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiou\"\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a')).upper()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    \n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 95, "duration": 2.7705037593841553}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(map(int, str(n)))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n\n    max_prime = max(primes)\n    return digit_sum(max_prime)", "prompt_tokens": 336, "completion_tokens": 120, "duration": 3.2626149654388428}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 60, "duration": 2.420733690261841}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    if n <= 1:\n        return []\n    \n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    \n    return primes", "prompt_tokens": 195, "completion_tokens": 91, "duration": 3.033304452896118}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.9090840816497803}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.240079164505005}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        stones.append(n)\n    return stones", "prompt_tokens": 182, "completion_tokens": 61, "duration": 2.467759370803833}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.7459938526153564}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    return max(i for i in range(x, y+1) if i % 2 == 0) if any(i % 2 == 0 for i in range(x, y+1)) else -1", "prompt_tokens": 144, "completion_tokens": 52, "duration": 2.3922743797302246}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 48, "duration": 2.2184176445007324}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 33, "duration": 1.8690154552459717}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    digits = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[num-1] for num in reversed_arr]\n    return result", "prompt_tokens": 326, "completion_tokens": 94, "duration": 2.604111433029175}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    def sum_numbers(num):\n        return sum(range(1, num+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    \n    return result", "prompt_tokens": 174, "completion_tokens": 105, "duration": 2.908851385116577}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def count_even_odd_palindromes(start, end):\n        even_count = 0\n        odd_count = 0\n        for i in range(start, end+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n        return even_count, odd_count\n\n    return count_even_odd_palindromes(1, n)", "prompt_tokens": 261, "completion_tokens": 124, "duration": 3.238020181655884}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 174, "completion_tokens": 55, "duration": 2.232512950897217}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 349, "completion_tokens": 62, "duration": 2.1929562091827393}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 36, "duration": 4.484187126159668}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    \n    max_count = max(hist.values(), default=0)\n    result = {k: v for k, v in hist.items() if v == max_count}\n    \n    return result", "prompt_tokens": 201, "completion_tokens": 74, "duration": 2.4779250621795654}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])\n    return (s, s == s[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.9342067241668701}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len([x for x in s if int(x) % 2 != 0]), i, i, i) for i, s in enumerate(lst)]", "prompt_tokens": 223, "completion_tokens": 63, "duration": 2.330667018890381}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 2.347235918045044}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    def calculate_depth(well):\n        total_water = sum(well)\n        return math.ceil(total_water / capacity)\n\n    import math\n    total_depth = 0\n    for well in grid:\n        total_depth += calculate_depth(well)\n\n    return total_depth", "prompt_tokens": 373, "completion_tokens": 66, "duration": 2.390160322189331}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.7035706043243408}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.228975534439087}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if word[i-1] in consonants and word[i+1] in consonants:\n                return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 100, "duration": 2.5297882556915283}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    open_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count == 0:\n                    return 'No'\n                open_count -= 1\n    if open_count == 0:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 218, "completion_tokens": 87, "duration": 2.659013271331787}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.4967091083526611}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= abs(x) < 100)", "prompt_tokens": 178, "completion_tokens": 33, "duration": 1.6891124248504639}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "prompt_tokens": 281, "completion_tokens": 84, "duration": 2.7752671241760254}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if 1 <= month <= 12:\n            if month in [1, 3, 5, 7, 8, 10, 12]:\n                if 1 <= day <= 31:\n                    return True\n            elif month in [4, 6, 9, 11]:\n                if 1 <= day <= 30:\n                    return True\n            elif month == 2:\n                if year % 4 == 0:\n                    if 1 <= day <= 29:\n                        return True\n                elif 1 <= day <= 28:\n                    return True\n        return False\n    except:\n        return False", "prompt_tokens": 313, "completion_tokens": 161, "duration": 4.87806248664856}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 3.6516215801239014}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst) - 1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 46, "duration": 2.0096373558044434}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 158, "duration": 5.598130226135254}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        tribonacci = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n        return tribonacci", "prompt_tokens": 285, "completion_tokens": 134, "duration": 4.645567893981934}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 3.1688156127929688}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' ')", "prompt_tokens": 187, "completion_tokens": 52, "duration": 3.393617868423462}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            idx = i - 1\n            break\n    return idx", "prompt_tokens": 153, "completion_tokens": 53, "duration": 3.3869738578796387}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 81, "duration": 3.512511968612671}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 127, "completion_tokens": 27, "duration": 3.015138626098633}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            temp = 1\n            for j in range(1, i+1):\n                temp *= j\n            result *= temp\n        return result", "prompt_tokens": 145, "completion_tokens": 75, "duration": 3.48846697807312}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = re.sub(r'\\s', '_', text)\n    return text", "prompt_tokens": 156, "completion_tokens": 44, "duration": 3.4061620235443115}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2 or not parts[0] or not parts[0][0].isalpha() or parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 93, "duration": 3.9468488693237305}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(x ** 2 if i % 3 == 0 else x ** 3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 48, "duration": 4.762684106826782}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def get_word_length(word):\n        return len(word)\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(get_word_length(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 110, "duration": 4.235730171203613}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_den * n_den)\n    \n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 62, "duration": 3.6688156127929688}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 36, "duration": 2.916374921798706}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "prompt_tokens": 169, "completion_tokens": 67, "duration": 3.4223570823669434}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 94, "duration": 3.7863359451293945}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index < end_index:\n        return tuple(planets[start_index+1:end_index])\n    else:\n        return tuple(planets[end_index+1:start_index][::-1])", "prompt_tokens": 261, "completion_tokens": 125, "duration": 4.127822637557983}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 3.134138822555542}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 79, "duration": 3.580277919769287}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 2.7937138080596924}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 28, "duration": 3.5703887939453125}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def get_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    strongest = max(extensions, key=get_strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 69, "duration": 3.4626965522766113}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "prompt_tokens": 179, "completion_tokens": 136, "duration": 5.048776388168335}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 77, "duration": 3.6609742641448975}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_dict = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, roman in roman_dict.items():\n        while number >= value:\n            result += roman\n            number -= value\n    return result", "prompt_tokens": 151, "completion_tokens": 129, "duration": 4.077539443969727}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 158, "completion_tokens": 52, "duration": 2.9030139446258545}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 327, "completion_tokens": 47, "duration": 2.8171019554138184}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(1, len(operands)):\n        expression += operators[i-1] + str(operands[i])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 53, "duration": 3.0689609050750732}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    return result", "prompt_tokens": 157, "completion_tokens": 62, "duration": 1.7932848930358887}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.7496426105499268}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    open_count = 0\n    start_index = 0\n    \n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n        \n        if open_count == 0:\n            result.append(paren_string[start_index:i+1].replace(\" \", \"\"))\n            start_index = i+1\n            \n    return result", "prompt_tokens": 165, "completion_tokens": 112, "duration": 4.405118703842163}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.1772677898406982}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 2.3627920150756836}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.195892333984375}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 142, "completion_tokens": 62, "duration": 2.6180431842803955}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.2827346324920654}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "prompt_tokens": 160, "completion_tokens": 75, "duration": 3.102525234222412}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_nums = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_nums.append(max_num)\n    return max_nums", "prompt_tokens": 150, "completion_tokens": 59, "duration": 4.123181343078613}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 192, "completion_tokens": 77, "duration": 2.714062452316284}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 43, "duration": 2.3036036491394043}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 152, "completion_tokens": 41, "duration": 2.2628612518310547}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.2247328758239746}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 2.1560401916503906}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.0757980346679688}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [notes[note] for note in music_string.split()]", "prompt_tokens": 222, "completion_tokens": 64, "duration": 2.559011936187744}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += 1\n        else:\n            i += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 75, "duration": 2.6517906188964844}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 103, "duration": 2.882765054702759}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 216, "completion_tokens": 103, "duration": 3.7147934436798096}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.8288745880126953}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.9937655925750732}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.2666990756988525}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 79, "duration": 2.4912662506103516}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [n for n in numbers if numbers.count(n) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 2.1591501235961914}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 2.2389981746673584}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.8748211860656738}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.7926876544952393}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 57, "duration": 2.238525629043579}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    return -xs[0]/xs[1]", "prompt_tokens": 309, "completion_tokens": 22, "duration": 1.742905616760254}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted(sorted_values)):\n        result[i] = v\n    return result", "prompt_tokens": 200, "completion_tokens": 86, "duration": 2.9330031871795654}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.9201483726501465}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.6182000637054443}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "prompt_tokens": 129, "completion_tokens": 41, "duration": 3.4587745666503906}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i%2==0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 41, "duration": 2.107712984085083}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 3.6861608028411865}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    def fibonacci(num):\n        if num <= 1:\n            return num\n        else:\n            return fibonacci(num - 1) + fibonacci(num - 2)\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        fib = fibonacci(num)\n        if is_prime(fib):\n            count += 1\n\n    return fib", "prompt_tokens": 147, "completion_tokens": 146, "duration": 5.198903560638428}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 74, "duration": 5.273914575576782}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 3.156618118286133}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.4916205406188965}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 38, "duration": 4.591110467910767}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 3.189487934112549}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 113, "duration": 4.234102964401245}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    n = len(l)\n    sorted_list = sorted(l)\n    if n % 2 == 0:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2\n    else:\n        return sorted_list[n // 2]", "prompt_tokens": 125, "completion_tokens": 70, "duration": 3.5063209533691406}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 3.2703330516815186}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.2632527351379395}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 3.918612241744995}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u'])", "prompt_tokens": 172, "completion_tokens": 41, "duration": 3.356264352798462}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 3.249790906906128}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 15, "duration": 2.9433977603912354}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 2.9218854904174805}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 102, "completion_tokens": 33, "duration": 3.0325002670288086}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "prompt_tokens": 142, "completion_tokens": 60, "duration": 3.58581805229187}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 137, "completion_tokens": 52, "duration": 3.387878656387329}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 2.9992916584014893}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 3.9746620655059814}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 4.269115447998047}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 65, "duration": 3.6789803504943848}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "prompt_tokens": 158, "completion_tokens": 91, "duration": 3.654284954071045}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c, result = 0, 0, 1, 0\n        for i in range(3, n+1):\n            result = a + b + c\n            a, b, c = b, c, result\n        return result", "prompt_tokens": 199, "completion_tokens": 102, "duration": 3.966209888458252}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        vowels += 'y'\n    return sum(1 for char in s if char.lower() in vowels)", "prompt_tokens": 176, "completion_tokens": 50, "duration": 4.34424090385437}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 52, "duration": 3.223874807357788}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.720703125}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s,n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 260, "completion_tokens": 49, "duration": 4.3799214363098145}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    \n    if not even_values:\n        return []\n    \n    min_even_value = min(even_values)\n    min_even_value_index = arr.index(min_even_value)\n    \n    return [min_even_value, min_even_value_index]", "prompt_tokens": 362, "completion_tokens": 74, "duration": 4.777565240859985}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    cnt = Counter(lst)\n    result = max([k for k, v in cnt.items() if k > 0 and v >= k], default=-1)\n    return result", "prompt_tokens": 215, "completion_tokens": 52, "duration": 4.386125326156616}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 3.1622297763824463}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 3.9358298778533936}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.8302671909332275}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 207, "completion_tokens": 55, "duration": 3.034569025039673}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n    \n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 243, "completion_tokens": 76, "duration": 3.423161745071411}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3", "prompt_tokens": 129, "completion_tokens": 105, "duration": 3.6693997383117676}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "prompt_tokens": 160, "completion_tokens": 31, "duration": 2.6620311737060547}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 58, "duration": 3.212120294570923}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 189, "completion_tokens": 24, "duration": 2.709477186203003}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s) - 2))", "prompt_tokens": 171, "completion_tokens": 62, "duration": 3.1783814430236816}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append('A+')\n        elif g > 3.7:\n            result.append('A')\n        elif g > 3.3:\n            result.append('A-')\n        elif g > 3.0:\n            result.append('B+')\n        elif g > 2.7:\n            result.append('B')\n        elif g > 2.3:\n            result.append('B-')\n        elif g > 2.0:\n            result.append('C+')\n        elif g > 1.7:\n            result.append('C')\n        elif g > 1.3:\n            result.append('C-')\n        elif g > 1.0:\n            result.append('D+')\n        elif g > 0.7:\n            result.append('D')\n        elif g >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))", "prompt_tokens": 320, "completion_tokens": 254, "duration": 5.304771661758423}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4431917667388916}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 2\n    return 2 + 8 * 9**(n-2)", "prompt_tokens": 94, "completion_tokens": 37, "duration": 2.780158519744873}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 2.0146548748016357}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.7746636867523193}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "prompt_tokens": 180, "completion_tokens": 26, "duration": 3.9780633449554443}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.4142539501190186}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if sum([sorted_array[0], sorted_array[-1]]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "prompt_tokens": 253, "completion_tokens": 55, "duration": 2.4504802227020264}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += chr(((ord(char) - 97 + 2 * 2) % 26) + 97)\n        elif char.isupper():\n            result += chr(((ord(char) - 65 + 2 * 2) % 26) + 65)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 94, "duration": 3.1906301975250244}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) > 1:\n        return unique_elements[1]\n    else:\n        return None", "prompt_tokens": 174, "completion_tokens": 42, "duration": 2.3110744953155518}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "prompt_tokens": 157, "completion_tokens": 40, "duration": 2.1408772468566895}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return (x == y + z) or (y == x + z) or (z == x + y) if all(isinstance(i, int) for i in [x, y, z]) else False", "prompt_tokens": 185, "completion_tokens": 58, "duration": 2.494127035140991}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiou\"\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a')).upper()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    \n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 95, "duration": 2.7705037593841553}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(map(int, str(n)))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n\n    max_prime = max(primes)\n    return digit_sum(max_prime)", "prompt_tokens": 336, "completion_tokens": 120, "duration": 3.2626149654388428}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    upper_flag = False\n    lower_flag = False\n    for key in dictionary.keys():\n        if isinstance(key, str):\n            if key.islower():\n                lower_flag = True\n            elif key.isupper():\n                upper_flag = True\n            else:\n                return False\n        else:\n            return False\n    return upper_flag != lower_flag", "prompt_tokens": 219, "completion_tokens": 91, "duration": 2.8661487102508545}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    if n <= 1:\n        return []\n    \n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    \n    return primes", "prompt_tokens": 195, "completion_tokens": 91, "duration": 3.033304452896118}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 29, "duration": 5.10399866104126}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.9090840816497803}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.240079164505005}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        stones.append(n)\n    return stones", "prompt_tokens": 182, "completion_tokens": 61, "duration": 2.467759370803833}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.7459938526153564}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    return max(i for i in range(x, y+1) if i % 2 == 0) if any(i % 2 == 0 for i in range(x, y+1)) else -1", "prompt_tokens": 144, "completion_tokens": 52, "duration": 2.3922743797302246}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 48, "duration": 2.2184176445007324}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 33, "duration": 1.8690154552459717}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    digits = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[num-1] for num in reversed_arr]\n    return result", "prompt_tokens": 326, "completion_tokens": 94, "duration": 2.604111433029175}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    def sum_numbers(num):\n        return sum(range(1, num+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    \n    return result", "prompt_tokens": 174, "completion_tokens": 105, "duration": 2.908851385116577}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def count_even_odd_palindromes(start, end):\n        even_count = 0\n        odd_count = 0\n        for i in range(start, end+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n        return even_count, odd_count\n\n    return count_even_odd_palindromes(1, n)", "prompt_tokens": 261, "completion_tokens": 124, "duration": 3.238020181655884}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 174, "completion_tokens": 55, "duration": 2.232512950897217}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 349, "completion_tokens": 62, "duration": 2.1929562091827393}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 36, "duration": 2.0306668281555176}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    \n    max_count = max(hist.values(), default=0)\n    result = {k: v for k, v in hist.items() if v == max_count}\n    \n    return result", "prompt_tokens": 201, "completion_tokens": 74, "duration": 2.4779250621795654}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])\n    return (s, s == s[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.9342067241668701}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len([x for x in s if int(x) % 2 != 0]), i, i, i) for i, s in enumerate(lst)]", "prompt_tokens": 223, "completion_tokens": 63, "duration": 2.330667018890381}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 2.347235918045044}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(map(sum, grid))\n    return math.ceil(total_water / capacity)", "prompt_tokens": 373, "completion_tokens": 34, "duration": 3.5744309425354004}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.7035706043243408}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.228975534439087}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if word[i-1] in consonants and word[i+1] in consonants:\n                return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 100, "duration": 2.5297882556915283}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    open_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count == 0:\n                    return 'No'\n                open_count -= 1\n    if open_count == 0:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 218, "completion_tokens": 87, "duration": 2.659013271331787}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 3.1705775260925293}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= abs(x) < 100)", "prompt_tokens": 178, "completion_tokens": 33, "duration": 1.6891124248504639}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "prompt_tokens": 281, "completion_tokens": 84, "duration": 2.7752671241760254}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if 1 <= month <= 12:\n            if month in [1, 3, 5, 7, 8, 10, 12]:\n                if 1 <= day <= 31:\n                    return True\n            elif month in [4, 6, 9, 11]:\n                if 1 <= day <= 30:\n                    return True\n            elif month == 2:\n                if year % 4 == 0:\n                    if 1 <= day <= 29:\n                        return True\n                elif 1 <= day <= 28:\n                    return True\n        return False\n    except:\n        return False", "prompt_tokens": 313, "completion_tokens": 161, "duration": 4.87806248664856}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 3.6516215801239014}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst) - 1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 46, "duration": 2.0096373558044434}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n    \n    length = end - start\n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 304, "completion_tokens": 112, "duration": 4.212874889373779}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n    return sum(abs(num) for num in arr) * product", "prompt_tokens": 172, "completion_tokens": 62, "duration": 3.938680648803711}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        tribonacci = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n        return tribonacci", "prompt_tokens": 285, "completion_tokens": 134, "duration": 4.645567893981934}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 3.1688156127929688}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    return txt[-1].isalpha() and txt[-2] == \" \"", "prompt_tokens": 187, "completion_tokens": 40, "duration": 3.4877853393554688}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            idx = i - 1\n            break\n    return idx", "prompt_tokens": 153, "completion_tokens": 53, "duration": 3.3869738578796387}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 81, "duration": 3.512511968612671}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 127, "completion_tokens": 27, "duration": 3.015138626098633}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            temp = 1\n            for j in range(1, i+1):\n                temp *= j\n            result *= temp\n        return result", "prompt_tokens": 145, "completion_tokens": 75, "duration": 3.48846697807312}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 40, "duration": 3.184149980545044}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2 or not parts[0] or not parts[0][0].isalpha() or parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 93, "duration": 3.9468488693237305}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 219, "completion_tokens": 85, "duration": 3.5948262214660645}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def get_word_length(word):\n        return len(word)\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(get_word_length(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 110, "duration": 4.235730171203613}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_den * n_den)\n    \n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 62, "duration": 3.6688156127929688}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 36, "duration": 2.916374921798706}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "prompt_tokens": 169, "completion_tokens": 67, "duration": 3.4223570823669434}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 94, "duration": 3.7863359451293945}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index < end_index:\n        return tuple(planets[start_index+1:end_index])\n    else:\n        return tuple(planets[end_index+1:start_index][::-1])", "prompt_tokens": 261, "completion_tokens": 125, "duration": 4.127822637557983}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 3.0901098251342773}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 79, "duration": 3.580277919769287}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 2.7937138080596924}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 28, "duration": 3.5703887939453125}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def get_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    strongest = max(extensions, key=get_strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 69, "duration": 3.4626965522766113}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "prompt_tokens": 179, "completion_tokens": 136, "duration": 5.048776388168335}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 77, "duration": 3.6609742641448975}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_dict = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, roman in roman_dict.items():\n        while number >= value:\n            result += roman\n            number -= value\n    return result", "prompt_tokens": 151, "completion_tokens": 129, "duration": 4.077539443969727}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 158, "completion_tokens": 52, "duration": 2.9030139446258545}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 170, "completion_tokens": 91, "duration": 1.7207746505737305}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 327, "completion_tokens": 47, "duration": 2.8171019554138184}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(1, len(operands)):\n        expression += operators[i-1] + str(operands[i])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 53, "duration": 3.0689609050750732}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    return result", "prompt_tokens": 157, "completion_tokens": 62, "duration": 1.7932848930358887}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.7496426105499268}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            if count == 1:\n                group = \"\"\n        group += char\n        if char == ')':\n            count -= 1\n            if count == 0:\n                result.append(group)\n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))", "prompt_tokens": 165, "completion_tokens": 115, "duration": 4.904185056686401}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 1.980752944946289}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 2.6741414070129395}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.4150123596191406}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 142, "completion_tokens": 62, "duration": 2.6180431842803955}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.024486541748047}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        sum_result = sum(numbers)\n        product_result = 1\n        for num in numbers:\n            product_result *= num\n        return sum_result, product_result", "prompt_tokens": 160, "completion_tokens": 70, "duration": 2.4829719066619873}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result", "prompt_tokens": 150, "completion_tokens": 54, "duration": 4.903506278991699}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "prompt_tokens": 192, "completion_tokens": 73, "duration": 2.6933655738830566}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return \"\".join(str(int(char_a) ^ int(char_b)) for char_a, char_b in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 44, "duration": 2.3026576042175293}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 152, "completion_tokens": 41, "duration": 2.1305525302886963}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.2598962783813477}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 1.9441590309143066}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 4.423329591751099}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_duration = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    notes = music_string.split()\n    return [note_duration[note] for note in notes]\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))", "prompt_tokens": 222, "completion_tokens": 100, "duration": 3.3278884887695312}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 68, "duration": 2.402066469192505}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 102, "duration": 2.9691460132598877}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    res = None\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            res = (numbers[i-1], numbers[i])\n    return res\n\n# Test cases\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # (2.0, 2.0)", "prompt_tokens": 216, "completion_tokens": 195, "duration": 5.214127063751221}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 2.367142915725708}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.7889280319213867}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.133868455886841}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 71, "duration": 2.4579977989196777}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 2.0046937465667725}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([ch.lower() if ch.isupper() else ch.upper() for ch in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 1.9407992362976074}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.605252981185913}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.9647901058197021}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 2.244152545928955}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    def poly(xs, x):\n        return sum([coeff * x**i for i, coeff in enumerate(xs)])\n    \n    def derivative(xs, x):\n        return sum([i * coeff * x**(i-1) for i, coeff in enumerate(xs) if i > 0])\n    \n    x = 1.0\n    tol = 1e-6\n    max_iter = 1000\n    iteration = 0\n    \n    while abs(poly(xs, x)) > tol and iteration < max_iter:\n        x = x - poly(xs, x) / derivative(xs, x)\n        iteration += 1\n    \n    return x", "prompt_tokens": 309, "completion_tokens": 170, "duration": 4.166413307189941}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    for i in range(0, len(l), 3):\n        l[i:i+3] = sorted(l[i:i+3])\n    return l", "prompt_tokens": 200, "completion_tokens": 44, "duration": 5.082174777984619}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.6995973587036133}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.5565569400787354}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    return sum(str(x).count('7') for x in range(n) if x % 11 == 0 or x % 13 == 0)", "prompt_tokens": 129, "completion_tokens": 41, "duration": 1.799715518951416}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 43, "duration": 1.7816944122314453}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 3.807644844055176}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    i = 1\n    while True:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            if n == 1:\n                return fib\n            n -= 1\n        i += 1", "prompt_tokens": 147, "completion_tokens": 180, "duration": 3.856372833251953}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum([l[i], l[j], l[k]]) == 0 for i in range(len(l)) for j in range(i+1, len(l)) for k in range(j+1, len(l)))", "prompt_tokens": 209, "completion_tokens": 59, "duration": 2.1570541858673096}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [num + 1 for num in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 1.478567123413086}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "prompt_tokens": 207, "completion_tokens": 28, "duration": 2.9960310459136963}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 38, "duration": 3.3831183910369873}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 22, "duration": 4.136021614074707}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return d", "prompt_tokens": 221, "completion_tokens": 120, "duration": 4.716643333435059}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 57, "duration": 3.3151233196258545}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 2.98762583732605}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 3.150935649871826}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 1.7496938705444336}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "prompt_tokens": 172, "completion_tokens": 42, "duration": 3.320512533187866}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 2.975609540939331}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 3.112504482269287}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 3.1556053161621094}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 70, "duration": 3.4648804664611816}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 64, "duration": 4.396612882614136}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.2002015113830566}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 2.9056522846221924}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.293647050857544}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 2.7724976539611816}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 67, "duration": 3.353186845779419}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 26, "duration": 2.786309242248535}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 199, "completion_tokens": 65, "duration": 3.381901741027832}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char in vowels) + 1\n    else:\n        return sum(1 for char in s if char in vowels)", "prompt_tokens": 176, "completion_tokens": 69, "duration": 3.2689452171325684}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift >= len(x_str):\n        return x_str[::-1]\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 55, "duration": 3.0967514514923096}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.608325242996216}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 37, "duration": 2.917335271835327}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    evens = [(i, x) for i, x in enumerate(arr) if x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[1], x[0]))\n    return [min_even[1], min_even[0]]", "prompt_tokens": 362, "completion_tokens": 78, "duration": 3.816348075866699}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    unique_nums = set(lst)\n    max_num = -1\n    \n    for num in unique_nums:\n        if num > 0 and lst.count(num) >= num:\n            max_num = max(max_num, num)\n    \n    return max_num", "prompt_tokens": 215, "completion_tokens": 59, "duration": 3.605145215988159}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 3.2352395057678223}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 3.3507323265075684}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.719492197036743}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    count = 0\n    for i in range(len(arr)//2):\n        if arr[i] != arr[len(arr)-1-i]:\n            count += 1\n    return count", "prompt_tokens": 207, "completion_tokens": 48, "duration": 2.8503971099853516}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 3.597519874572754}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i*j*k == a:\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 117, "duration": 3.798135280609131}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return a >= 0 and round(a ** (1/3)) ** 3 == a", "prompt_tokens": 160, "completion_tokens": 30, "duration": 2.818692684173584}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 58, "duration": 2.4830126762390137}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"", "prompt_tokens": 189, "completion_tokens": 28, "duration": 2.0529744625091553}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i+1] != s[i+2] and s[i] != s[i+2] for i in range(len(s) - 2))", "prompt_tokens": 171, "completion_tokens": 62, "duration": 3.352672815322876}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 254, "duration": 4.694498062133789}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test cases\nprint(prime_length('Hello'))  # True\nprint(prime_length('abcdcba'))  # True\nprint(prime_length('kittens'))  # True\nprint(prime_length('orange'))  # False", "prompt_tokens": 131, "completion_tokens": 120, "duration": 3.4026076793670654}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    return 2 * 9 * 10 ** (n - 2) + 10 ** (n - 1)", "prompt_tokens": 94, "completion_tokens": 37, "duration": 2.298644542694092}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 183, "completion_tokens": 25, "duration": 2.057807207107544}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.2743263244628906}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)", "prompt_tokens": 180, "completion_tokens": 47, "duration": 2.1563732624053955}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 71, "duration": 2.618070363998413}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 55, "duration": 2.4124107360839844}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            encrypted += chr(((ord(char.lower()) - 97 + 2 * 2) % 26) + 97)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 160, "completion_tokens": 63, "duration": 2.4691834449768066}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 52, "duration": 2.2343595027923584}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences]\n    sentences = [sentence for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 70, "duration": 2.6311826705932617}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 52, "duration": 2.297395706176758}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = 'aeiouAEIOU'\n    for letter in message:\n        if letter.lower() in vowels:\n            encoded_message += chr((ord(letter) + 2 - ord('a')) % 26 + ord('A'))\n        else:\n            encoded_message += letter.swapcase()\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 78, "duration": 2.9546384811401367}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def largest_prime_sum(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    \n    if not prime_numbers:\n        return 0\n    \n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 128, "duration": 3.5832841396331787}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    upper_flag = False\n    lower_flag = False\n    for key in dictionary.keys():\n        if isinstance(key, str):\n            if key.islower():\n                lower_flag = True\n            elif key.isupper():\n                upper_flag = True\n            else:\n                return False\n        else:\n            return False\n    return upper_flag != lower_flag", "prompt_tokens": 219, "completion_tokens": 91, "duration": 2.8661487102508545}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 195, "completion_tokens": 87, "duration": 2.6293675899505615}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 29, "duration": 5.202478408813477}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 1.998668909072876}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.054394483566284}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    stones = []\n    for i in range(n):\n        stones.append(n + 2*i)\n    return stones", "prompt_tokens": 182, "completion_tokens": 35, "duration": 1.8899078369140625}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split()]", "prompt_tokens": 166, "completion_tokens": 26, "duration": 1.9894111156463623}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.095451593399048}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 1.9538168907165527}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 2.1019794940948486}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    dict_map = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [dict_map[num] for num in reversed_arr]\n    return result", "prompt_tokens": 326, "completion_tokens": 121, "duration": 4.736233711242676}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.450706958770752}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    count_even = 0\n    count_odd = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n\n    return count_even, count_odd", "prompt_tokens": 261, "completion_tokens": 99, "duration": 2.921217679977417}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 174, "completion_tokens": 49, "duration": 1.9856858253479004}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    \n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    \n    return False", "prompt_tokens": 349, "completion_tokens": 64, "duration": 2.7621877193450928}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 1 for x in lst2) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.9613397121429443}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "from collections import Counter\n\ndef histogram(test):\n    if not test:\n        return {}\n    \n    letter_counts = Counter(test.split())\n    max_count = max(letter_counts.values())\n    return {letter: count for letter, count in letter_counts.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 60, "duration": 2.224600076675415}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]", "prompt_tokens": 212, "completion_tokens": 45, "duration": 2.1652848720550537}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n            sum(1 for digit in s if int(digit) % 2 != 0),\n            sum(1 for digit in s if int(digit) % 2 != 0),\n            i+1,\n            i+1) for i, s in enumerate(lst)]", "prompt_tokens": 223, "completion_tokens": 90, "duration": 3.8521759510040283}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 2.1258842945098877}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, bucket_capacity):\n    total_water = 0\n    for row in grid:\n        for well in row:\n            total_water += well\n    return total_water // bucket_capacity + (total_water % bucket_capacity != 0)", "prompt_tokens": 373, "completion_tokens": 55, "duration": 1.989652156829834}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.8053054809570312}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.2240889072418213}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 96, "duration": 4.239036798477173}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        for c in s:\n            if c == '(':\n                count += 1\n            else:\n                if count == 0:\n                    return 'No'\n                count -= 1\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 67, "duration": 3.8670637607574463}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.6008269786834717}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 3.1184911727905273}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    def collatz(num):\n        sequence = [num]\n        while num > 1:\n            if num % 2 == 0:\n                num = num // 2\n            else:\n                num = 3 * num + 1\n            sequence.append(num)\n        return sequence\n\n    return sorted(set(filter(lambda x: x % 2 == 1, collatz(n))))", "prompt_tokens": 281, "completion_tokens": 91, "duration": 3.873873472213745}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    import re\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    return True", "prompt_tokens": 313, "completion_tokens": 218, "duration": 5.738846778869629}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([char for char in txt if char.islower() and ord(char) % 2 != 0])", "prompt_tokens": 190, "completion_tokens": 60, "duration": 3.3616855144500732}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(set(lst)) == len(lst)", "prompt_tokens": 299, "completion_tokens": 39, "duration": 3.0189132690429688}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 158, "duration": 5.598130226135254}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "from functools import reduce\n\ndef prod_signs(arr):\n    if not arr:\n        return None\n    product = reduce(lambda x, y: x * y, arr)\n    sign = -1 if product < 0 else 1 if product > 0 else 0\n    return sum(abs(num) for num in arr) * sign", "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.6752066612243652}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    sequence = [0, 1, 1]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n    return sequence[:n+1]", "prompt_tokens": 285, "completion_tokens": 84, "duration": 3.683255434036255}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(num) ** 2 for num in lst])", "prompt_tokens": 207, "completion_tokens": 29, "duration": 3.2458035945892334}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # False\nprint(check_if_last_char_is_a_letter(\"\"))  # False", "prompt_tokens": 187, "completion_tokens": 116, "duration": 3.893920421600342}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    largest_idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_idx = i-1\n    return largest_idx", "prompt_tokens": 153, "completion_tokens": 52, "duration": 3.3330483436584473}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    \n    if not negatives:\n        largest_neg = None\n    else:\n        largest_neg = max(negatives)\n    \n    if not positives:\n        smallest_pos = None\n    else:\n        smallest_pos = min(positives)\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 188, "completion_tokens": 101, "duration": 4.434124946594238}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            count += 1\n    return count == 4\n\n# Test cases\nprint(is_equal_to_sum_even(4))  # False\nprint(is_equal_to_sum_even(6))  # False\nprint(is_equal_to_sum_even(8))  # True", "prompt_tokens": 127, "completion_tokens": 97, "duration": 5.085277080535889}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        temp = 1\n        for j in range(1, i+1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 145, "completion_tokens": 67, "duration": 3.609203338623047}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = re.sub(r'\\s', '_', text)\n    return text", "prompt_tokens": 156, "completion_tokens": 44, "duration": 3.4061620235443115}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 101, "duration": 3.8345131874084473}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 2.9242665767669678}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.661712169647217}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 34, "duration": 2.9877443313598633}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 34, "duration": 3.1221859455108643}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and str(num)[0] in \"13579\" and str(num)[-1] in \"13579\"])", "prompt_tokens": 169, "completion_tokens": 45, "duration": 3.2145931720733643}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 100, "duration": 3.6696646213531494}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n\n    return tuple(sorted(planets[start_index+1:end_index], key=lambda x: planets.index(x)))", "prompt_tokens": 261, "completion_tokens": 129, "duration": 4.198266983032227}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 4.264665365219116}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 78, "duration": 3.3540759086608887}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 34, "duration": 3.282528877258301}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game,guess):\n    return [abs(game[i]-guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 38, "duration": 2.821668863296509}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n\n    strongest = max(extensions, key=lambda x: (strength(x), -extensions.index(x)))\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 76, "duration": 3.4557249546051025}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return b in a + a", "prompt_tokens": 179, "completion_tokens": 20, "duration": 2.4403388500213623}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = len([int(d) for d in str(abs(num)) if int(d) % 2 == 0])\n    odd_count = len([int(d) for d in str(abs(num)) if int(d) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 69, "duration": 3.1777777671813965}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 143, "duration": 4.392511606216431}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 48, "duration": 1.5558011531829834}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    result_word = \"\"\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < result_word):\n            max_unique_chars = unique_chars\n            result_word = word\n\n    return result_word", "prompt_tokens": 170, "completion_tokens": 92, "duration": 1.6135501861572266}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(remaining, need)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 327, "completion_tokens": 49, "duration": 2.929570436477661}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(1, len(operands)):\n        expression += operators[i-1] + str(operands[i])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 53, "duration": 1.2895724773406982}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    return ''.join([c.swapcase() if c.isalpha() else c for c in s]) if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 45, "duration": 2.6771111488342285}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 38, "duration": 1.071364402770996}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            if count == 1:\n                group = \"\"\n        group += char\n        if char == ')':\n            count -= 1\n            if count == 0:\n                result.append(group)\n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))", "prompt_tokens": 165, "completion_tokens": 115, "duration": 4.904185056686401}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.6623826026916504}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 2.4843740463256836}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.8099708557128906}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 142, "completion_tokens": 62, "duration": 2.6180431842803955}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.721545934677124}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers) if numbers else 0\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return total_sum, total_product", "prompt_tokens": 160, "completion_tokens": 65, "duration": 3.7536392211914062}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    \n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    \n    return result", "prompt_tokens": 150, "completion_tokens": 58, "duration": 3.741487503051758}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i][::-1]\n    return ''", "prompt_tokens": 192, "completion_tokens": 84, "duration": 4.228417873382568}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.6271095275878906}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 152, "completion_tokens": 41, "duration": 3.571296215057373}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.6345694065093994}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5216856002807617}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.5133609771728516}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    music_list = music_string.split()\n    return [notes[note] for note in music_list]\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "prompt_tokens": 222, "completion_tokens": 137, "duration": 3.0193028450012207}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.9997241497039795}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    sorted_num_list = sorted(num_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_num_list)", "prompt_tokens": 155, "completion_tokens": 112, "duration": 4.4858129024505615}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    res = None\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            res = (numbers[i-1], numbers[i])\n    return res\n\n# Test cases\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # (2.0, 2.0)", "prompt_tokens": 216, "completion_tokens": 195, "duration": 5.214127063751221}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 2.367142915725708}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.2309012413024902}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.133868455886841}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\ndef factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while d*d <= n:\n        if n % d == 0:\n            factors.append(d)\n            n //= d\n        else:\n            d += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 81, "duration": 4.086660385131836}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 2.0831470489501953}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 3.4409358501434326}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.336951971054077}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.327744245529175}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.514950752258301}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    n = len(xs)\n    a = xs[-1]\n    b = xs[-2]\n    return -a / b\n\n# Test cases\nprint(round(find_zero([1, 2]), 2))  # -0.5\nprint(round(find_zero([-6, 11, -6, 1]), 2))  # 1.0", "prompt_tokens": 309, "completion_tokens": 88, "duration": 3.9136245250701904}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    for i in range(0, len(l), 3):\n        l[i:i+3] = sorted(l[i:i+3])\n    return l", "prompt_tokens": 200, "completion_tokens": 44, "duration": 5.082174777984619}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.1107535362243652}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 12, "duration": 3.1147830486297607}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "prompt_tokens": 129, "completion_tokens": 41, "duration": 3.4587745666503906}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i%2==0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 41, "duration": 2.020843029022217}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 7.22578239440918}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    def is_fib(num):\n        a, b = 1, 1\n        while b < num:\n            a, b = b, a + b\n        return b == num\n    \n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_fib(num) and is_prime(num):\n            count += 1\n    return num", "prompt_tokens": 147, "completion_tokens": 151, "duration": 3.622666358947754}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 70, "duration": 5.2470879554748535}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 3.20495867729187}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "prompt_tokens": 207, "completion_tokens": 28, "duration": 4.751910209655762}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "prompt_tokens": 141, "completion_tokens": 66, "duration": 3.7949705123901367}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 4.629683971405029}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 4.502384185791016}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.9521784782409668}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 2.5431697368621826}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 28, "duration": 4.67552638053894}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 1.7496938705444336}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "prompt_tokens": 172, "completion_tokens": 31, "duration": 2.518711566925049}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 2.4217686653137207}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 0.973487377166748}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 2.3380160331726074}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.606998682022095}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.618353366851807}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 5.172897100448608}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.946500778198242}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.968381404876709}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.401447772979736}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 64, "duration": 6.268994331359863}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 26, "duration": 1.0157220363616943}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 100, "duration": 5.497600317001343}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char in vowels) + 1\n    else:\n        return sum(1 for char in s if char in vowels)", "prompt_tokens": 176, "completion_tokens": 69, "duration": 3.2689452171325684}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift][::-1]", "prompt_tokens": 132, "completion_tokens": 53, "duration": 1.1473517417907715}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.0107066631317139}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 37, "duration": 3.9410250186920166}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    min_even_value = min(even_nodes)[0]\n    min_even_node = min((node for node in even_nodes if node[0] == min_even_value), key=lambda x: x[1])\n    return [min_even_node[0], min_even_node[1]]", "prompt_tokens": 362, "completion_tokens": 102, "duration": 1.9290251731872559}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 37, "duration": 0.9007158279418945}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result", "prompt_tokens": 174, "completion_tokens": 46, "duration": 1.183880090713501}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.3848700523376465}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.390857458114624}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 5.94209098815918}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 1.0973389148712158}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 124, "duration": 4.205528974533081}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return a >= 0 and round(a ** (1/3)) ** 3 == a", "prompt_tokens": 160, "completion_tokens": 30, "duration": 2.818692684173584}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_hex_digits = set(['2', '3', '5', '7', 'B', 'D'])\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            if is_prime(int(digit, 16)):\n                count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 128, "duration": 4.3312883377075195}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]\n    return 'db' + binary_str + 'db'", "prompt_tokens": 189, "completion_tokens": 31, "duration": 0.8702373504638672}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 76, "duration": 6.095550298690796}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 265, "duration": 7.338986158370972}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.101451635360718}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    return 2 * 9 * 10**(n-2) + 10**(n-1)", "prompt_tokens": 94, "completion_tokens": 33, "duration": 1.689943790435791}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.151035308837891}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 0.8578033447265625}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 180, "completion_tokens": 39, "duration": 1.8170874118804932}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 70, "duration": 2.683040142059326}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 57, "duration": 1.5730512142181396}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = ord(char) + 2 * 2\n            if char.islower():\n                if shift > ord('z'):\n                    shift -= 26\n            else:\n                if shift > ord('Z'):\n                    shift -= 26\n            result += chr(shift)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 92, "duration": 2.821547746658325}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst = [x for x in lst if x != smallest]\n    if not lst:\n        return None\n    return min(lst)", "prompt_tokens": 174, "completion_tokens": 57, "duration": 2.0367038249969482}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count", "prompt_tokens": 157, "completion_tokens": 61, "duration": 5.712312459945679}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 54, "duration": 1.0622100830078125}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = 'aeiouAEIOU'\n    for letter in message:\n        if letter.lower() in vowels:\n            encoded_message += chr((ord(letter) + 2 - ord('a')) % 26 + ord('A'))\n        else:\n            encoded_message += letter.swapcase()\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 78, "duration": 2.9546384811401367}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def largest_prime_sum_of_digits(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 127, "duration": 5.578822612762451}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 60, "duration": 2.420733690261841}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]", "prompt_tokens": 195, "completion_tokens": 82, "duration": 3.506666898727417}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 25, "duration": 4.802356004714966}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 2.5747463703155518}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value % 1 < 0.5:\n        return int(value)\n    elif value >= 0:\n        return int(value) + 1\n    else:\n        return int(value) - 1", "prompt_tokens": 206, "completion_tokens": 60, "duration": 4.936776399612427}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    stones = []\n    for i in range(n):\n        stones.append(n + 2*i)\n    return stones", "prompt_tokens": 182, "completion_tokens": 35, "duration": 1.8899078369140625}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.576434850692749}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "prompt_tokens": 144, "completion_tokens": 39, "duration": 5.252899885177612}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 48, "duration": 3.177675724029541}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([n for n in x if all(int(d) % 2 != 0 for d in str(n))])", "prompt_tokens": 152, "completion_tokens": 36, "duration": 2.7132198810577393}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    valid_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    result = []\n    for num in arr:\n        if num in valid_nums:\n            result.append(num)\n    result.sort()\n    result.reverse()\n    num_to_word = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    return [num_to_word[num] for num in result]", "prompt_tokens": 326, "completion_tokens": 142, "duration": 5.6138410568237305}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 82, "duration": 3.2507100105285645}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 100, "duration": 3.8307840824127197}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)", "prompt_tokens": 174, "completion_tokens": 31, "duration": 5.339803695678711}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    return sorted_arr == arr or sorted_arr == arr[-1:] + arr[:-1] or sorted_arr == arr[-2:] + arr[:-2]\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False", "prompt_tokens": 349, "completion_tokens": 108, "duration": 5.334486961364746}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 36, "duration": 4.484187126159668}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "from collections import Counter\n\ndef histogram(test):\n    if not test:\n        return {}\n    \n    letter_counts = Counter(test.split())\n    max_count = max(letter_counts.values())\n    return {letter: count for letter, count in letter_counts.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 60, "duration": 2.224600076675415}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])\n    return (s, s == s[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 4.429137945175171}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return ['the number of odd elements {}n the str{}ng {} of the {}nput.'.format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i, i) for i, string in enumerate(lst)]", "prompt_tokens": 223, "completion_tokens": 75, "duration": 3.0588653087615967}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 1.127763271331787}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, bucket_capacity):\n    total_water = 0\n    for row in grid:\n        for well in row:\n            total_water += well\n    return total_water // bucket_capacity + (total_water % bucket_capacity != 0)", "prompt_tokens": 373, "completion_tokens": 55, "duration": 1.989652156829834}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 4.514612913131714}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n    for word in words:\n        consonants_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonants_count == n:\n            result.append(word)\n    return result", "prompt_tokens": 231, "completion_tokens": 85, "duration": 5.177570581436157}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 96, "duration": 5.398608446121216}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    total_open = lst[0].count('(') + lst[1].count('(')\n    total_close = lst[0].count(')') + lst[1].count(')')\n    \n    if total_open == total_close:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 218, "completion_tokens": 72, "duration": 1.6357219219207764}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 0.6794424057006836}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum([x for x in arr[:k] if 10 <= abs(x) < 100])", "prompt_tokens": 178, "completion_tokens": 34, "duration": 5.506244897842407}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    result = set()\n    while n != 1:\n        if n % 2 == 1:\n            result.add(n)\n        n = 3 * n + 1 if n % 2 == 1 else n // 2\n    result.add(1)\n    return sorted(list(result))", "prompt_tokens": 281, "completion_tokens": 74, "duration": 5.161206007003784}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "prompt_tokens": 313, "completion_tokens": 149, "duration": 2.798180103302002}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 1.4796838760375977}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(set(lst)) == len(lst)", "prompt_tokens": 299, "completion_tokens": 39, "duration": 1.021848440170288}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n    \n    length = end - start\n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 304, "completion_tokens": 112, "duration": 4.212874889373779}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "from functools import reduce\n\ndef prod_signs(arr):\n    if not arr:\n        return None\n    product = reduce(lambda x, y: x * y, arr)\n    sign = -1 if product < 0 else 1 if product > 0 else 0\n    return sum(abs(num) for num in arr) * sign", "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.6752066612243652}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n        return sequence", "prompt_tokens": 285, "completion_tokens": 119, "duration": 5.267545938491821}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 4.0765111446380615}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) > 1 and txt[-2].isalpha():\n        return False\n    return True", "prompt_tokens": 187, "completion_tokens": 67, "duration": 4.474294662475586}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 153, "completion_tokens": 53, "duration": 4.201006889343262}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 81, "duration": 5.037791967391968}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 127, "completion_tokens": 22, "duration": 2.988631248474121}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        temp = 1\n        for j in range(1, i+1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 145, "completion_tokens": 55, "duration": 4.3409264087677}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = re.sub(r'\\s', '_', text)\n    return text", "prompt_tokens": 156, "completion_tokens": 44, "duration": 3.4061620235443115}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 99, "duration": 3.1420481204986572}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 2.4718167781829834}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.095839500427246}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result = x_num * n_num / (x_den * n_den)\n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 60, "duration": 2.5184543132781982}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 32, "duration": 2.212085485458374}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def check_odd(num):\n        return int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0\n\n    count = 0\n    for num in nums:\n        if num > 10 and check_odd(num):\n            count += 1\n\n    return count", "prompt_tokens": 169, "completion_tokens": 76, "duration": 2.887397050857544}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 123, "duration": 3.5043177604675293}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "prompt_tokens": 261, "completion_tokens": 125, "duration": 3.986123561859131}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 2.3005125522613525}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 74, "duration": 3.566838264465332}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x > 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 2.8946268558502197}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game,guess):\n    return [abs(game[i]-guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 27, "duration": 2.6209909915924072}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda ext: strength(ext))\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.210055351257324}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return b in a + a", "prompt_tokens": 179, "completion_tokens": 20, "duration": 2.4403388500213623}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even, odd)", "prompt_tokens": 115, "completion_tokens": 67, "duration": 3.2516956329345703}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_dict = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', \n                  100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    for key in sorted(roman_dict.keys(), reverse=True):\n        while number >= key:\n            result += roman_dict[key]\n            number -= key\n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 137, "duration": 3.0478012561798096}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 48, "duration": 2.752431869506836}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_word = ''\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 170, "completion_tokens": 91, "duration": 4.059854030609131}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining = max(remaining - need, 0)\n    return [total_eaten, remaining]", "prompt_tokens": 327, "completion_tokens": 46, "duration": 2.856689453125}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(1, len(operands)):\n        expression += operators[i-1] + str(operands[i])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 53, "duration": 2.4366562366485596}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    return s.swapcase() if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 30, "duration": 1.7500758171081543}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 36, "duration": 2.2753093242645264}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    group = ''\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        \n        group += char\n        \n        if count == 0:\n            result.append(group.replace(\" \", \"\"))\n            group = ''\n    \n    return result", "prompt_tokens": 165, "completion_tokens": 98, "duration": 2.915585517883301}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "prompt_tokens": 142, "completion_tokens": 56, "duration": 2.492175340652466}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))\n\n# Test cases\nprint(sum_product([]))  # (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)", "prompt_tokens": 160, "completion_tokens": 103, "duration": 4.0435051918029785}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    \n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]", "prompt_tokens": 192, "completion_tokens": 95, "duration": 3.1966967582702637}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.525851011276245}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_duration = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    notes = music_string.split()\n    return [note_duration[note] for note in notes]\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))", "prompt_tokens": 222, "completion_tokens": 100, "duration": 3.3278884887695312}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 216, "completion_tokens": 103, "duration": 2.8235106468200684}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.8288745880126953}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 52, "duration": 3.8719937801361084}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i%2==0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 41, "duration": 2.020843029022217}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "prompt_tokens": 141, "completion_tokens": 66, "duration": 3.7949705123901367}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 5.186999797821045}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    return sum(1 for char in s if char.lower() in vowels)", "prompt_tokens": 176, "completion_tokens": 79, "duration": 3.7461788654327393}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 55, "duration": 6.772214412689209}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    max_num = -1\n    for num in set(lst):\n        if lst.count(num) >= num and num > 0:\n            max_num = max(max_num, num)\n    return max_num", "prompt_tokens": 215, "completion_tokens": 51, "duration": 2.926389694213867}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3", "prompt_tokens": 129, "completion_tokens": 106, "duration": 6.856443166732788}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "prompt_tokens": 160, "completion_tokens": 31, "duration": 2.6912028789520264}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "prompt_tokens": 171, "completion_tokens": 47, "duration": 1.0319738388061523}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "prompt_tokens": 320, "completion_tokens": 221, "duration": 8.414106845855713}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 253, "completion_tokens": 50, "duration": 3.571953773498535}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 60, "duration": 2.420733690261841}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        stones.append(n)\n    return stones", "prompt_tokens": 182, "completion_tokens": 61, "duration": 2.1878714561462402}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = str(num)[1:]\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count", "prompt_tokens": 174, "completion_tokens": 63, "duration": 3.6947553157806396}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 36, "duration": 4.484187126159668}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    max_count = 0\n\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n        max_count = max(max_count, letter_count[letter])\n\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 96, "duration": 3.688969135284424}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "prompt_tokens": 223, "completion_tokens": 65, "duration": 3.23934006690979}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    def calculate_depth(well):\n        total_water = sum(well)\n        return math.ceil(total_water / capacity)\n\n    import math\n    total_depth = 0\n    for well in grid:\n        total_depth += calculate_depth(well)\n\n    return total_depth", "prompt_tokens": 373, "completion_tokens": 66, "duration": 2.390160322189331}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        count += s.count('(') - s.count(')')\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 52, "duration": 1.9407877922058105}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 3.055605411529541}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 2.967463731765747}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 3.0317656993865967}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1) if lst.count(lst[i]) == 1)", "prompt_tokens": 299, "completion_tokens": 43, "duration": 4.305203914642334}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 158, "duration": 5.598130226135254}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "prompt_tokens": 285, "completion_tokens": 108, "duration": 6.019955396652222}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalnum()):\n        return True\n    return False", "prompt_tokens": 187, "completion_tokens": 61, "duration": 3.4040653705596924}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i-1\n            break\n    return index", "prompt_tokens": 153, "completion_tokens": 52, "duration": 5.050522565841675}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 127, "completion_tokens": 22, "duration": 2.988631248474121}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = re.sub(r'\\s', '_', text)\n    return text", "prompt_tokens": 156, "completion_tokens": 44, "duration": 3.4061620235443115}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 3.372175455093384}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 2.5527098178863525}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "prompt_tokens": 261, "completion_tokens": 126, "duration": 2.1185858249664307}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 2.9770419597625732}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return len(a) >= len(b) and b in (a + a)\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "prompt_tokens": 179, "completion_tokens": 133, "duration": 5.454107046127319}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    group = ''\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        \n        group += char\n        \n        if count == 0:\n            result.append(group.replace(\" \", \"\"))\n            group = ''\n    \n    return result", "prompt_tokens": 165, "completion_tokens": 98, "duration": 2.915585517883301}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.13432240486145}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 2.4843740463256836}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.635263442993164}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "prompt_tokens": 142, "completion_tokens": 56, "duration": 2.492175340652466}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.1384620666503906}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_total = sum(numbers)\n    product_total = 1\n    for num in numbers:\n        product_total *= num\n    return (sum_total, product_total)", "prompt_tokens": 160, "completion_tokens": 73, "duration": 2.6273326873779297}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_list.append(max_num)\n    return max_list", "prompt_tokens": 150, "completion_tokens": 62, "duration": 2.4928503036499023}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]", "prompt_tokens": 192, "completion_tokens": 76, "duration": 3.3221757411956787}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return \"\".join([str(int(i) ^ int(j)) for i, j in zip(a, b)])", "prompt_tokens": 126, "completion_tokens": 37, "duration": 2.2105839252471924}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 152, "completion_tokens": 41, "duration": 2.276129722595215}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.326540470123291}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 2.1468472480773926}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.0073132514953613}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    music_list = music_string.split()\n    return [notes[note] for note in music_list]\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "prompt_tokens": 222, "completion_tokens": 137, "duration": 3.0193028450012207}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 74, "duration": 2.9661526679992676}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 103, "duration": 3.2411394119262695}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 216, "completion_tokens": 103, "duration": 2.8235106468200684}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.8288745880126953}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.822077751159668}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.4771811962127686}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 70, "duration": 2.4585721492767334}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 2.122736692428589}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.1340184211730957}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.8879389762878418}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.894559621810913}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "prompt_tokens": 149, "completion_tokens": 102, "duration": 2.8995697498321533}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "prompt_tokens": 309, "completion_tokens": 23, "duration": 1.8695454597473145}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    for i in range(0, len(l), 3):\n        if i + 3 <= len(l):\n            l[i:i+3] = sorted(l[i:i+3])\n    return l", "prompt_tokens": 200, "completion_tokens": 54, "duration": 2.1593716144561768}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.812459945678711}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.7433135509490967}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 57, "duration": 2.3540444374084473}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else val for i, val in enumerate(l)]", "prompt_tokens": 173, "completion_tokens": 42, "duration": 2.2103874683380127}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 3.7247366905212402}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while n > 0:\n        i += 1\n        if is_prime(fibonacci(i)):\n            n -= 1\n    return fibonacci(i)", "prompt_tokens": 147, "completion_tokens": 174, "duration": 5.350690126419067}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 70, "duration": 2.5179171562194824}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 3.45405912399292}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "prompt_tokens": 207, "completion_tokens": 28, "duration": 2.069643974304199}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 45, "duration": 3.691335678100586}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 4.351720094680786}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 113, "duration": 4.234102964401245}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]", "prompt_tokens": 125, "completion_tokens": 64, "duration": 4.8998260498046875}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 3.5294532775878906}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 3.0677762031555176}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 3.7634716033935547}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiouAEIOU'])", "prompt_tokens": 172, "completion_tokens": 34, "duration": 3.4495060443878174}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.345207691192627}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 3.0242691040039062}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 2.8674793243408203}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.3529574871063232}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    opening = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening += 1\n        elif bracket == \">\":\n            opening -= 1\n        if opening < 0:\n            return False\n    return opening == 0", "prompt_tokens": 142, "completion_tokens": 68, "duration": 3.7121262550354004}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.477552652359009}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 3.0876855850219727}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 3.4639158248901367}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 4.123863458633423}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 69, "duration": 2.279885768890381}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs):\n    return [xs[i]*i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 25, "duration": 2.765313148498535}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 102, "duration": 5.168015718460083}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels or (s[i] == 'y' and i == len(s) - 1):\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"Hello\"))  # 2\nprint(vowels_count(\"qwerty\")) # 1", "prompt_tokens": 176, "completion_tokens": 143, "duration": 4.069087743759155}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 53, "duration": 3.484450578689575}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.921161413192749}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = [int(x) for x in s.split() if x.isdigit()]\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 38, "duration": 2.9809682369232178}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n\n    min_even_value = min(even_values)\n    min_even_value_index = arr.index(min_even_value)\n    return [min_even_value, min_even_value_index]", "prompt_tokens": 362, "completion_tokens": 71, "duration": 4.556764602661133}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 37, "duration": 3.1895554065704346}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst", "prompt_tokens": 174, "completion_tokens": 58, "duration": 3.4370334148406982}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 3.680319309234619}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.7176320552825928}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 207, "completion_tokens": 55, "duration": 3.1786270141601562}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 3.0323095321655273}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n            if count == 3:\n                return True\n    return False", "prompt_tokens": 129, "completion_tokens": 109, "duration": 5.106977224349976}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 160, "completion_tokens": 33, "duration": 2.8345048427581787}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 349, "completion_tokens": 53, "duration": 3.107821464538574}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 189, "completion_tokens": 29, "duration": 2.8554420471191406}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 80, "duration": 3.2314200401306152}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n    return result", "prompt_tokens": 320, "completion_tokens": 226, "duration": 4.988205671310425}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.5160369873046875}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    count = 0\n    if n == 1:\n        return 2\n    count += 2 * 9 * (10**(n-2))\n    return count", "prompt_tokens": 94, "completion_tokens": 48, "duration": 2.9783999919891357}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 183, "completion_tokens": 25, "duration": 3.8188259601593018}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.7971463203430176}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "prompt_tokens": 180, "completion_tokens": 26, "duration": 2.055957794189453}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 70, "duration": 2.8156564235687256}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array[:]\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 56, "duration": 2.551884889602661}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    return ''.join([chr((ord(c) - ord('a') + 2*2) % 26 + ord('a')) if c.islower() else c for c in s])", "prompt_tokens": 160, "completion_tokens": 49, "duration": 2.307790994644165}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 52, "duration": 2.3499152660369873}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences += S.split('!')\n    sentences += S.split('?')\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))", "prompt_tokens": 157, "completion_tokens": 47, "duration": 2.4350473880767822}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return all(isinstance(num, int) for num in (x, y, z)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 51, "duration": 2.3810179233551025}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = 'aeiouAEIOU'\n    for letter in message:\n        if letter.lower() in vowels:\n            encoded_message += chr((ord(letter) + 2 - ord('a')) % 26 + ord('A'))\n        else:\n            encoded_message += letter.swapcase()\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 78, "duration": 2.9546384811401367}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def sum_of_digits_of_largest_prime(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum([int(d) for d in str(n)])\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 128, "duration": 4.728965997695923}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 60, "duration": 2.420733690261841}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 2.7404284477233887}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 29, "duration": 2.135709762573242}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s: str) -> int:\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in \"AEIOU\")", "prompt_tokens": 122, "completion_tokens": 43, "duration": 2.096749782562256}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.1321446895599365}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile", "prompt_tokens": 182, "completion_tokens": 61, "duration": 2.2920451164245605}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 3.5697991847991943}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 144, "completion_tokens": 45, "duration": 2.058150291442871}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.241297721862793}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 1.984708309173584}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    return [digits[num] for num in reversed_arr]", "prompt_tokens": 326, "completion_tokens": 115, "duration": 3.102436065673828}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 88, "duration": 2.7417428493499756}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count", "prompt_tokens": 261, "completion_tokens": 98, "duration": 2.7613565921783447}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(d) for d in str(abs(num))) > 0)", "prompt_tokens": 174, "completion_tokens": 34, "duration": 2.0265607833862305}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        arr.insert(0, arr.pop())\n        if arr == sorted_arr:\n            return True\n    return False", "prompt_tokens": 349, "completion_tokens": 58, "duration": 2.325324296951294}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 36, "duration": 1.900071382522583}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    letters = test.split()\n    hist = {}\n    max_count = 0\n    for letter in letters:\n        hist[letter] = hist.get(letter, 0) + 1\n        max_count = max(max_count, hist[letter])\n    \n    return {key: value for key, value in hist.items() if value == max_count}", "prompt_tokens": 201, "completion_tokens": 81, "duration": 2.7618002891540527}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    return result, result == result[::-1]", "prompt_tokens": 212, "completion_tokens": 37, "duration": 1.9593040943145752}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        sum(int(c) % 2 != 0 for c in s), s.index(c) + 1, s.index(c) + 1, s.index(c) + 1) for s in lst for c in s]", "prompt_tokens": 223, "completion_tokens": 81, "duration": 2.5357115268707275}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 2.4808480739593506}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(map(sum, grid))\n    return math.ceil(total_water / capacity)", "prompt_tokens": 373, "completion_tokens": 34, "duration": 3.5744309425354004}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.7792084217071533}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n\n    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for letter in word if letter.isalpha() and letter not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result", "prompt_tokens": 231, "completion_tokens": 87, "duration": 2.55491304397583}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i+1] in consonants and word[i-1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 98, "duration": 2.7190535068511963}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        count += 1 if s == '(' else -1\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 53, "duration": 2.0899221897125244}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.668445110321045}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum([x for x in arr[:k] if 10 <= x <= 99])", "prompt_tokens": 178, "completion_tokens": 32, "duration": 3.158369302749634}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([num for num in collatz if num % 2 != 0])", "prompt_tokens": 281, "completion_tokens": 82, "duration": 2.210515022277832}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month, day, year = parts\n\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return day >= 1 and day <= 31\n    elif month in [4, 6, 9, 11]:\n        return day >= 1 and day <= 30\n    elif month == 2:\n        if year % 4 == 0:\n            return day >= 1 and day <= 29\n        else:\n            return day >= 1 and day <= 28\n    else:\n        return False\n\n    return False", "prompt_tokens": 313, "completion_tokens": 212, "duration": 5.834261655807495}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # \u279e 3", "prompt_tokens": 190, "completion_tokens": 116, "duration": 4.799492835998535}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    sorted_lst = sorted(lst)\n    return sorted_lst == lst and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 36, "duration": 3.436354637145996}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n    \n    length = end - start\n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 304, "completion_tokens": 112, "duration": 4.212874889373779}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n    return product * sum(abs(num) for num in arr)", "prompt_tokens": 172, "completion_tokens": 66, "duration": 2.078993082046509}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    result = [3]\n    if n == 0:\n        return []\n    elif n == 1:\n        return result\n    else:\n        for i in range(1, n):\n            if i % 2 == 0:\n                result.append(1 + i // 2)\n            else:\n                result.append(result[i - 1] + result[i - 2] + result[i - 3])\n        return result", "prompt_tokens": 285, "completion_tokens": 99, "duration": 5.343504190444946}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 3.0680184364318848}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalnum()):\n        return True\n    return False", "prompt_tokens": 187, "completion_tokens": 61, "duration": 3.4040653705596924}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 153, "completion_tokens": 53, "duration": 3.2878458499908447}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 188, "completion_tokens": 90, "duration": 3.890843629837036}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n+1, 2):\n        if n - i >= 0:\n            count += 1\n    return count == 4", "prompt_tokens": 127, "completion_tokens": 55, "duration": 3.5375847816467285}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            temp = 1\n            for j in range(1, i+1):\n                temp *= j\n            result *= temp\n        return result", "prompt_tokens": 145, "completion_tokens": 70, "duration": 3.9703047275543213}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = re.sub(r'\\s', '_', text)\n    return text", "prompt_tokens": 156, "completion_tokens": 44, "duration": 3.4061620235443115}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(1 for c in name if c.isdigit()) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 99, "duration": 4.292522668838501}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 3.1983070373535156}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 95, "duration": 3.8871896266937256}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_denom * n_denom)\n    \n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 66, "duration": 3.313920259475708}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 4.474608898162842}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_odd_digit(n):\n        n_str = str(abs(n))\n        return int(n_str[0]) % 2 != 0 and int(n_str[-1]) % 2 != 0\n    \n    count = 0\n    for num in nums:\n        if num > 10 and is_odd_digit(num):\n            count += 1\n    \n    return count", "prompt_tokens": 169, "completion_tokens": 86, "duration": 3.7950246334075928}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 123, "duration": 5.7769691944122314}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    \n    return tuple([p for p in planets[start_index+1:end_index]])", "prompt_tokens": 261, "completion_tokens": 125, "duration": 5.372603893280029}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 3.157214641571045}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 78, "duration": 3.453221559524536}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 2.8807239532470703}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.7771897315979004}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 67, "duration": 3.5131309032440186}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "prompt_tokens": 179, "completion_tokens": 136, "duration": 5.55906081199646}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 71, "duration": 3.134073257446289}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()\n\n# Test cases\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'", "prompt_tokens": 151, "completion_tokens": 197, "duration": 6.572391986846924}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)", "prompt_tokens": 158, "completion_tokens": 57, "duration": 3.161298990249634}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    \n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 170, "completion_tokens": 92, "duration": 3.3375308513641357}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 327, "completion_tokens": 47, "duration": 2.9945456981658936}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    expr = str(operands[0])\n    for i in range(len(operators)):\n        expr += operators[i] + str(operands[i+1])\n    return eval(expr)", "prompt_tokens": 257, "completion_tokens": 50, "duration": 2.92203426361084}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.6143977642059326}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.711808204650879}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            if count == 1:\n                group = \"\"\n        group += char\n        if char == ')':\n            count -= 1\n            if count == 0:\n                result.append(group)\n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))", "prompt_tokens": 165, "completion_tokens": 115, "duration": 4.904185056686401}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.6623826026916504}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.8099708557128906}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "prompt_tokens": 142, "completion_tokens": 56, "duration": 2.492175340652466}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.721545934677124}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers) if numbers else 0\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return total_sum, total_product", "prompt_tokens": 160, "completion_tokens": 65, "duration": 3.7536392211914062}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    \n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    \n    return result", "prompt_tokens": 150, "completion_tokens": 58, "duration": 3.741487503051758}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i][::-1]\n    return ''", "prompt_tokens": 192, "completion_tokens": 84, "duration": 4.228417873382568}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.6271095275878906}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 152, "completion_tokens": 41, "duration": 3.571296215057373}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.6345694065093994}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5216856002807617}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.5133609771728516}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_duration = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    notes = music_string.split()\n    return [note_duration[note] for note in notes]\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))", "prompt_tokens": 222, "completion_tokens": 100, "duration": 3.3278884887695312}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.9997241497039795}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    sorted_num_list = sorted(num_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_num_list)", "prompt_tokens": 155, "completion_tokens": 112, "duration": 4.4858129024505615}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    res = None\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            res = (numbers[i-1], numbers[i])\n    return res\n\n# Test cases\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # (2.0, 2.0)", "prompt_tokens": 216, "completion_tokens": 195, "duration": 5.214127063751221}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.8288745880126953}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.2309012413024902}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.4771811962127686}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\ndef factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while d*d <= n:\n        if n % d == 0:\n            factors.append(d)\n            n //= d\n        else:\n            d += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 81, "duration": 4.086660385131836}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 2.122736692428589}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 3.4409358501434326}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.336951971054077}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.327744245529175}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.514950752258301}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    n = len(xs)\n    a = xs[-1]\n    b = xs[-2]\n    return -a / b\n\n# Test cases\nprint(round(find_zero([1, 2]), 2))  # -0.5\nprint(round(find_zero([-6, 11, -6, 1]), 2))  # 1.0", "prompt_tokens": 309, "completion_tokens": 88, "duration": 3.9136245250701904}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    for i in range(0, len(l), 3):\n        l[i:i+3] = sorted(l[i:i+3])\n    return l", "prompt_tokens": 200, "completion_tokens": 44, "duration": 5.082174777984619}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.1107535362243652}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 12, "duration": 3.1147830486297607}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "prompt_tokens": 129, "completion_tokens": 41, "duration": 3.4587745666503906}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else val for i, val in enumerate(l)]", "prompt_tokens": 173, "completion_tokens": 42, "duration": 2.2103874683380127}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 7.22578239440918}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while n > 0:\n        i += 1\n        if is_prime(fibonacci(i)):\n            n -= 1\n    return fibonacci(i)", "prompt_tokens": 147, "completion_tokens": 174, "duration": 5.350690126419067}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 70, "duration": 5.2470879554748535}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 3.20495867729187}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "prompt_tokens": 207, "completion_tokens": 28, "duration": 4.751910209655762}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 45, "duration": 3.691335678100586}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 4.629683971405029}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 113, "duration": 4.234102964401245}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.9521784782409668}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 2.5431697368621826}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 28, "duration": 4.67552638053894}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 1.7496938705444336}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "prompt_tokens": 172, "completion_tokens": 31, "duration": 2.518711566925049}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 2.4217686653137207}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 0.973487377166748}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 2.3380160331726074}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.606998682022095}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.618353366851807}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 5.172897100448608}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.946500778198242}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.968381404876709}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.401447772979736}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 64, "duration": 6.268994331359863}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 26, "duration": 1.0157220363616943}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 100, "duration": 5.497600317001343}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    return sum(1 for char in s if char.lower() in vowels)", "prompt_tokens": 176, "completion_tokens": 79, "duration": 3.7461788654327393}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift][::-1]", "prompt_tokens": 132, "completion_tokens": 53, "duration": 1.1473517417907715}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.0107066631317139}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = [int(x) for x in s.split() if x.isdigit()]\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 38, "duration": 2.9809682369232178}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    min_even_value = min(even_nodes)[0]\n    min_even_node = min((node for node in even_nodes if node[0] == min_even_value), key=lambda x: x[1])\n    return [min_even_node[0], min_even_node[1]]", "prompt_tokens": 362, "completion_tokens": 102, "duration": 1.9290251731872559}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 37, "duration": 0.9007158279418945}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result", "prompt_tokens": 174, "completion_tokens": 46, "duration": 1.183880090713501}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.3848700523376465}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.390857458114624}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 5.94209098815918}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 1.0973389148712158}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 124, "duration": 4.205528974533081}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 160, "completion_tokens": 33, "duration": 2.8345048427581787}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_hex_digits = set(['2', '3', '5', '7', 'B', 'D'])\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            if is_prime(int(digit, 16)):\n                count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 128, "duration": 4.3312883377075195}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]\n    return 'db' + binary_str + 'db'", "prompt_tokens": 189, "completion_tokens": 31, "duration": 0.8702373504638672}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 76, "duration": 6.095550298690796}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 265, "duration": 7.338986158370972}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.101451635360718}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    return 2 * 9 * 10**(n-2) + 10**(n-1)", "prompt_tokens": 94, "completion_tokens": 33, "duration": 1.689943790435791}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.151035308837891}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 0.8578033447265625}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 180, "completion_tokens": 39, "duration": 1.8170874118804932}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 70, "duration": 2.8156564235687256}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 57, "duration": 1.5730512142181396}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    return ''.join([chr((ord(c) - ord('a') + 2*2) % 26 + ord('a')) if c.islower() else c for c in s])", "prompt_tokens": 160, "completion_tokens": 49, "duration": 2.307790994644165}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst = [x for x in lst if x != smallest]\n    if not lst:\n        return None\n    return min(lst)", "prompt_tokens": 174, "completion_tokens": 57, "duration": 2.0367038249969482}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count", "prompt_tokens": 157, "completion_tokens": 61, "duration": 5.712312459945679}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 54, "duration": 1.0622100830078125}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def largest_prime_sum_of_digits(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 127, "duration": 5.578822612762451}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 60, "duration": 2.420733690261841}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]", "prompt_tokens": 195, "completion_tokens": 82, "duration": 3.506666898727417}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 25, "duration": 4.802356004714966}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 2.5747463703155518}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value % 1 < 0.5:\n        return int(value)\n    elif value >= 0:\n        return int(value) + 1\n    else:\n        return int(value) - 1", "prompt_tokens": 206, "completion_tokens": 60, "duration": 4.936776399612427}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile", "prompt_tokens": 182, "completion_tokens": 61, "duration": 2.2920451164245605}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.576434850692749}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "prompt_tokens": 144, "completion_tokens": 39, "duration": 5.252899885177612}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 48, "duration": 3.177675724029541}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([n for n in x if all(int(d) % 2 != 0 for d in str(n))])", "prompt_tokens": 152, "completion_tokens": 36, "duration": 2.7132198810577393}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    valid_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    result = []\n    for num in arr:\n        if num in valid_nums:\n            result.append(num)\n    result.sort()\n    result.reverse()\n    num_to_word = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    return [num_to_word[num] for num in result]", "prompt_tokens": 326, "completion_tokens": 142, "duration": 5.6138410568237305}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 82, "duration": 3.2507100105285645}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 100, "duration": 3.8307840824127197}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)", "prompt_tokens": 174, "completion_tokens": 31, "duration": 5.339803695678711}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    return sorted_arr == arr or sorted_arr == arr[-1:] + arr[:-1] or sorted_arr == arr[-2:] + arr[:-2]\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False", "prompt_tokens": 349, "completion_tokens": 108, "duration": 5.334486961364746}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 36, "duration": 4.484187126159668}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    max_count = 0\n\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n        max_count = max(max_count, letter_count[letter])\n\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 96, "duration": 3.688969135284424}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])\n    return (s, s == s[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 4.429137945175171}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return ['the number of odd elements {}n the str{}ng {} of the {}nput.'.format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i, i) for i, string in enumerate(lst)]", "prompt_tokens": 223, "completion_tokens": 75, "duration": 3.0588653087615967}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 1.127763271331787}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    def calculate_depth(well):\n        total_water = sum(well)\n        return math.ceil(total_water / capacity)\n\n    import math\n    total_depth = 0\n    for well in grid:\n        total_depth += calculate_depth(well)\n\n    return total_depth", "prompt_tokens": 373, "completion_tokens": 66, "duration": 2.390160322189331}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 4.514612913131714}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n    for word in words:\n        consonants_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonants_count == n:\n            result.append(word)\n    return result", "prompt_tokens": 231, "completion_tokens": 85, "duration": 5.177570581436157}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 96, "duration": 5.398608446121216}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    total_open = lst[0].count('(') + lst[1].count('(')\n    total_close = lst[0].count(')') + lst[1].count(')')\n    \n    if total_open == total_close:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 218, "completion_tokens": 72, "duration": 1.6357219219207764}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 0.6794424057006836}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum([x for x in arr[:k] if 10 <= abs(x) < 100])", "prompt_tokens": 178, "completion_tokens": 34, "duration": 5.506244897842407}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    result = set()\n    while n != 1:\n        if n % 2 == 1:\n            result.add(n)\n        n = 3 * n + 1 if n % 2 == 1 else n // 2\n    result.add(1)\n    return sorted(list(result))", "prompt_tokens": 281, "completion_tokens": 74, "duration": 5.161206007003784}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "prompt_tokens": 313, "completion_tokens": 149, "duration": 2.798180103302002}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 1.4796838760375977}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(set(lst)) == len(lst)", "prompt_tokens": 299, "completion_tokens": 39, "duration": 1.021848440170288}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 158, "duration": 5.598130226135254}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n    return product * sum(abs(num) for num in arr)", "prompt_tokens": 172, "completion_tokens": 66, "duration": 2.078993082046509}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n        return sequence", "prompt_tokens": 285, "completion_tokens": 119, "duration": 5.267545938491821}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 4.0765111446380615}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) > 1 and txt[-2].isalpha():\n        return False\n    return True", "prompt_tokens": 187, "completion_tokens": 67, "duration": 4.474294662475586}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 153, "completion_tokens": 53, "duration": 4.201006889343262}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 81, "duration": 5.037791967391968}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n+1, 2):\n        if n - i >= 0:\n            count += 1\n    return count == 4", "prompt_tokens": 127, "completion_tokens": 55, "duration": 3.5375847816467285}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        temp = 1\n        for j in range(1, i+1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 145, "completion_tokens": 55, "duration": 4.3409264087677}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 36, "duration": 3.331773519515991}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 99, "duration": 3.1420481204986572}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 2.4718167781829834}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.095839500427246}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result = x_num * n_num / (x_den * n_den)\n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 60, "duration": 2.5184543132781982}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 32, "duration": 2.212085485458374}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def check_odd(num):\n        return int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0\n\n    count = 0\n    for num in nums:\n        if num > 10 and check_odd(num):\n            count += 1\n\n    return count", "prompt_tokens": 169, "completion_tokens": 76, "duration": 2.887397050857544}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 123, "duration": 3.5043177604675293}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "prompt_tokens": 261, "completion_tokens": 125, "duration": 3.986123561859131}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 2.3005125522613525}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 74, "duration": 3.566838264465332}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x > 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 2.8946268558502197}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game,guess):\n    return [abs(game[i]-guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 27, "duration": 2.6209909915924072}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 67, "duration": 3.5131309032440186}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "prompt_tokens": 179, "completion_tokens": 136, "duration": 5.55906081199646}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 71, "duration": 3.134073257446289}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_dict = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', \n                  100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    for key in sorted(roman_dict.keys(), reverse=True):\n        while number >= key:\n            result += roman_dict[key]\n            number -= key\n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 137, "duration": 3.0478012561798096}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 48, "duration": 2.752431869506836}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    \n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 170, "completion_tokens": 92, "duration": 3.3375308513641357}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining = max(remaining - need, 0)\n    return [total_eaten, remaining]", "prompt_tokens": 327, "completion_tokens": 46, "duration": 2.856689453125}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(1, len(operands)):\n        expression += operators[i-1] + str(operands[i])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 53, "duration": 2.4366562366485596}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    return s.swapcase() if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 30, "duration": 1.7500758171081543}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 36, "duration": 2.2753093242645264}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    group = ''\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        \n        group += char\n        \n        if count == 0:\n            result.append(group.replace(\" \", \"\"))\n            group = ''\n    \n    return result", "prompt_tokens": 165, "completion_tokens": 98, "duration": 2.915585517883301}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 1.980752944946289}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 2.4843740463256836}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.4150123596191406}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 142, "completion_tokens": 62, "duration": 2.6180431842803955}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.024486541748047}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        sum_result = sum(numbers)\n        product_result = 1\n        for num in numbers:\n            product_result *= num\n        return sum_result, product_result", "prompt_tokens": 160, "completion_tokens": 70, "duration": 2.4829719066619873}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result", "prompt_tokens": 150, "completion_tokens": 54, "duration": 4.903506278991699}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "prompt_tokens": 192, "completion_tokens": 73, "duration": 2.6933655738830566}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return \"\".join(str(int(char_a) ^ int(char_b)) for char_a, char_b in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 44, "duration": 2.3026576042175293}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 152, "completion_tokens": 41, "duration": 2.1305525302886963}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.2598962783813477}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 1.9441590309143066}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 4.423329591751099}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [notes[note] for note in music_string.split()]", "prompt_tokens": 222, "completion_tokens": 64, "duration": 2.559011936187744}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 68, "duration": 2.402066469192505}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 102, "duration": 2.9691460132598877}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 216, "completion_tokens": 103, "duration": 2.8235106468200684}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 2.367142915725708}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.7889280319213867}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.133868455886841}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 71, "duration": 2.4579977989196777}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 2.0046937465667725}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([ch.lower() if ch.isupper() else ch.upper() for ch in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 1.9407992362976074}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.605252981185913}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.9647901058197021}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 2.244152545928955}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    def poly(xs, x):\n        return sum([coeff * x**i for i, coeff in enumerate(xs)])\n    \n    def derivative(xs, x):\n        return sum([i * coeff * x**(i-1) for i, coeff in enumerate(xs) if i > 0])\n    \n    x = 1.0\n    tol = 1e-6\n    max_iter = 1000\n    iteration = 0\n    \n    while abs(poly(xs, x)) > tol and iteration < max_iter:\n        x = x - poly(xs, x) / derivative(xs, x)\n        iteration += 1\n    \n    return x", "prompt_tokens": 309, "completion_tokens": 170, "duration": 4.166413307189941}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted(sorted_values)):\n        result[i] = v\n    return result", "prompt_tokens": 200, "completion_tokens": 86, "duration": 2.9330031871795654}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.6995973587036133}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.5565569400787354}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    return sum(str(x).count('7') for x in range(n) if x % 11 == 0 or x % 13 == 0)", "prompt_tokens": 129, "completion_tokens": 41, "duration": 1.799715518951416}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 43, "duration": 1.7816944122314453}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 3.807644844055176}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    def fibonacci(num):\n        if num <= 1:\n            return num\n        else:\n            return fibonacci(num - 1) + fibonacci(num - 2)\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        fib = fibonacci(num)\n        if is_prime(fib):\n            count += 1\n\n    return fib", "prompt_tokens": 147, "completion_tokens": 146, "duration": 5.198903560638428}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum([l[i], l[j], l[k]]) == 0 for i in range(len(l)) for j in range(i+1, len(l)) for k in range(j+1, len(l)))", "prompt_tokens": 209, "completion_tokens": 59, "duration": 2.1570541858673096}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [num + 1 for num in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 1.478567123413086}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "prompt_tokens": 207, "completion_tokens": 28, "duration": 2.9960310459136963}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 38, "duration": 3.3831183910369873}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 22, "duration": 4.136021614074707}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return d", "prompt_tokens": 221, "completion_tokens": 120, "duration": 4.716643333435059}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 57, "duration": 3.3151233196258545}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 2.98762583732605}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 3.150935649871826}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 3.7634716033935547}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "prompt_tokens": 172, "completion_tokens": 42, "duration": 3.320512533187866}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 2.975609540939331}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 3.112504482269287}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 3.1556053161621094}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 70, "duration": 3.4648804664611816}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 64, "duration": 4.396612882614136}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.2002015113830566}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 2.9056522846221924}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.293647050857544}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 2.7724976539611816}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 67, "duration": 3.353186845779419}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 26, "duration": 2.786309242248535}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 199, "completion_tokens": 65, "duration": 3.381901741027832}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char in vowels) + 1\n    else:\n        return sum(1 for char in s if char in vowels)", "prompt_tokens": 176, "completion_tokens": 69, "duration": 3.2689452171325684}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift >= len(x_str):\n        return x_str[::-1]\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 55, "duration": 3.0967514514923096}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.608325242996216}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 37, "duration": 2.917335271835327}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    \n    if not even_values:\n        return []\n    \n    min_even_value = min(even_values)\n    min_even_value_index = arr.index(min_even_value)\n    \n    return [min_even_value, min_even_value_index]", "prompt_tokens": 362, "completion_tokens": 74, "duration": 4.777565240859985}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    cnt = Counter(lst)\n    result = max([k for k, v in cnt.items() if k > 0 and v >= k], default=-1)\n    return result", "prompt_tokens": 215, "completion_tokens": 52, "duration": 4.386125326156616}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 3.2352395057678223}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 3.3507323265075684}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.719492197036743}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    count = 0\n    for i in range(len(arr)//2):\n        if arr[i] != arr[len(arr)-1-i]:\n            count += 1\n    return count", "prompt_tokens": 207, "completion_tokens": 48, "duration": 2.8503971099853516}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 3.597519874572754}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i*j*k == a:\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 117, "duration": 3.798135280609131}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return a >= 0 and round(a ** (1/3)) ** 3 == a", "prompt_tokens": 160, "completion_tokens": 30, "duration": 2.818692684173584}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 58, "duration": 2.4830126762390137}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"", "prompt_tokens": 189, "completion_tokens": 28, "duration": 2.0529744625091553}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i+1] != s[i+2] and s[i] != s[i+2] for i in range(len(s) - 2))", "prompt_tokens": 171, "completion_tokens": 62, "duration": 3.352672815322876}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 254, "duration": 4.694498062133789}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test cases\nprint(prime_length('Hello'))  # True\nprint(prime_length('abcdcba'))  # True\nprint(prime_length('kittens'))  # True\nprint(prime_length('orange'))  # False", "prompt_tokens": 131, "completion_tokens": 120, "duration": 3.4026076793670654}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    return 2 * 9 * 10 ** (n - 2) + 10 ** (n - 1)", "prompt_tokens": 94, "completion_tokens": 37, "duration": 2.298644542694092}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 183, "completion_tokens": 25, "duration": 2.057807207107544}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.2743263244628906}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)", "prompt_tokens": 180, "completion_tokens": 47, "duration": 2.1563732624053955}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 71, "duration": 2.618070363998413}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 55, "duration": 2.4124107360839844}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    return ''.join([chr((ord(c) - ord('a') + 2*2) % 26 + ord('a')) if c.islower() else c for c in s])", "prompt_tokens": 160, "completion_tokens": 49, "duration": 2.307790994644165}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 52, "duration": 2.2343595027923584}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences]\n    sentences = [sentence for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 70, "duration": 2.6311826705932617}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 52, "duration": 2.297395706176758}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiou\"\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a')).upper()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    \n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 95, "duration": 2.7705037593841553}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def largest_prime_sum(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    \n    if not prime_numbers:\n        return 0\n    \n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 128, "duration": 3.5832841396331787}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    upper_flag = False\n    lower_flag = False\n    for key in dictionary.keys():\n        if isinstance(key, str):\n            if key.islower():\n                lower_flag = True\n            elif key.isupper():\n                upper_flag = True\n            else:\n                return False\n        else:\n            return False\n    return upper_flag != lower_flag", "prompt_tokens": 219, "completion_tokens": 91, "duration": 2.8661487102508545}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 195, "completion_tokens": 87, "duration": 2.6293675899505615}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 29, "duration": 2.135709762573242}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 1.998668909072876}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.054394483566284}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    stones = []\n    for i in range(n):\n        stones.append(n + 2*i)\n    return stones", "prompt_tokens": 182, "completion_tokens": 35, "duration": 1.8899078369140625}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split()]", "prompt_tokens": 166, "completion_tokens": 26, "duration": 1.9894111156463623}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.095451593399048}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 1.9538168907165527}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 2.1019794940948486}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    dict_map = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [dict_map[num] for num in reversed_arr]\n    return result", "prompt_tokens": 326, "completion_tokens": 121, "duration": 4.736233711242676}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.450706958770752}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    count_even = 0\n    count_odd = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n\n    return count_even, count_odd", "prompt_tokens": 261, "completion_tokens": 99, "duration": 2.921217679977417}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 174, "completion_tokens": 49, "duration": 1.9856858253479004}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 349, "completion_tokens": 62, "duration": 2.1929562091827393}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 1 for x in lst2) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.9613397121429443}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "from collections import Counter\n\ndef histogram(test):\n    if not test:\n        return {}\n    \n    letter_counts = Counter(test.split())\n    max_count = max(letter_counts.values())\n    return {letter: count for letter, count in letter_counts.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 60, "duration": 2.224600076675415}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]", "prompt_tokens": 212, "completion_tokens": 45, "duration": 2.1652848720550537}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n            sum(1 for digit in s if int(digit) % 2 != 0),\n            sum(1 for digit in s if int(digit) % 2 != 0),\n            i+1,\n            i+1) for i, s in enumerate(lst)]", "prompt_tokens": 223, "completion_tokens": 90, "duration": 3.8521759510040283}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 2.347235918045044}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, bucket_capacity):\n    total_water = 0\n    for row in grid:\n        for well in row:\n            total_water += well\n    return total_water // bucket_capacity + (total_water % bucket_capacity != 0)", "prompt_tokens": 373, "completion_tokens": 55, "duration": 1.989652156829834}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.8053054809570312}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.2240889072418213}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 96, "duration": 4.239036798477173}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        for c in s:\n            if c == '(':\n                count += 1\n            else:\n                if count == 0:\n                    return 'No'\n                count -= 1\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 67, "duration": 3.8670637607574463}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.6008269786834717}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 3.1184911727905273}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    def collatz(num):\n        sequence = [num]\n        while num > 1:\n            if num % 2 == 0:\n                num = num // 2\n            else:\n                num = 3 * num + 1\n            sequence.append(num)\n        return sequence\n\n    return sorted(set(filter(lambda x: x % 2 == 1, collatz(n))))", "prompt_tokens": 281, "completion_tokens": 91, "duration": 3.873873472213745}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    import re\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    return True", "prompt_tokens": 313, "completion_tokens": 218, "duration": 5.738846778869629}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([char for char in txt if char.islower() and ord(char) % 2 != 0])", "prompt_tokens": 190, "completion_tokens": 60, "duration": 3.3616855144500732}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(set(lst)) == len(lst)", "prompt_tokens": 299, "completion_tokens": 39, "duration": 3.0189132690429688}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n    \n    length = end - start\n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 304, "completion_tokens": 112, "duration": 4.212874889373779}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "from functools import reduce\n\ndef prod_signs(arr):\n    if not arr:\n        return None\n    product = reduce(lambda x, y: x * y, arr)\n    sign = -1 if product < 0 else 1 if product > 0 else 0\n    return sum(abs(num) for num in arr) * sign", "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.6752066612243652}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    sequence = [0, 1, 1]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n    return sequence[:n+1]", "prompt_tokens": 285, "completion_tokens": 84, "duration": 3.683255434036255}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 3.1688156127929688}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # False\nprint(check_if_last_char_is_a_letter(\"\"))  # False", "prompt_tokens": 187, "completion_tokens": 116, "duration": 3.893920421600342}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    largest_idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_idx = i-1\n    return largest_idx", "prompt_tokens": 153, "completion_tokens": 52, "duration": 3.3330483436584473}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    \n    if not negatives:\n        largest_neg = None\n    else:\n        largest_neg = max(negatives)\n    \n    if not positives:\n        smallest_pos = None\n    else:\n        smallest_pos = min(positives)\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 188, "completion_tokens": 101, "duration": 4.434124946594238}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            count += 1\n    return count == 4\n\n# Test cases\nprint(is_equal_to_sum_even(4))  # False\nprint(is_equal_to_sum_even(6))  # False\nprint(is_equal_to_sum_even(8))  # True", "prompt_tokens": 127, "completion_tokens": 97, "duration": 5.085277080535889}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            temp = 1\n            for j in range(1, i+1):\n                temp *= j\n            result *= temp\n        return result", "prompt_tokens": 145, "completion_tokens": 75, "duration": 3.48846697807312}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = re.sub(r'\\s', '_', text)\n    return text", "prompt_tokens": 156, "completion_tokens": 44, "duration": 3.4061620235443115}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2 or not parts[0] or not parts[0][0].isalpha() or parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 93, "duration": 3.9468488693237305}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 2.9242665767669678}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.661712169647217}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 34, "duration": 2.9877443313598633}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 34, "duration": 3.1221859455108643}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and str(num)[0] in \"13579\" and str(num)[-1] in \"13579\"])", "prompt_tokens": 169, "completion_tokens": 45, "duration": 3.2145931720733643}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 100, "duration": 3.6696646213531494}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n\n    return tuple(sorted(planets[start_index+1:end_index], key=lambda x: planets.index(x)))", "prompt_tokens": 261, "completion_tokens": 129, "duration": 4.198266983032227}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 4.264665365219116}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 78, "duration": 3.3540759086608887}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 34, "duration": 3.282528877258301}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game,guess):\n    return [abs(game[i]-guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 38, "duration": 2.821668863296509}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n\n    strongest = max(extensions, key=lambda x: (strength(x), -extensions.index(x)))\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 76, "duration": 3.4557249546051025}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return b in a + a", "prompt_tokens": 179, "completion_tokens": 20, "duration": 2.4403388500213623}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 77, "duration": 3.6609742641448975}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 143, "duration": 4.392511606216431}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 48, "duration": 1.5558011531829834}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    result_word = \"\"\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < result_word):\n            max_unique_chars = unique_chars\n            result_word = word\n\n    return result_word", "prompt_tokens": 170, "completion_tokens": 92, "duration": 1.6135501861572266}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 327, "completion_tokens": 47, "duration": 2.8171019554138184}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(1, len(operands)):\n        expression += operators[i-1] + str(operands[i])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 53, "duration": 1.2895724773406982}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    return result", "prompt_tokens": 157, "completion_tokens": 62, "duration": 1.7932848930358887}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 38, "duration": 1.071364402770996}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    group = ''\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        \n        group += char\n        \n        if count == 0:\n            result.append(group.replace(\" \", \"\"))\n            group = ''\n    \n    return result", "prompt_tokens": 165, "completion_tokens": 98, "duration": 2.915585517883301}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.479076385498047}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.9055840969085693}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "prompt_tokens": 142, "completion_tokens": 56, "duration": 2.492175340652466}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.61719012260437}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))\n\n# Test cases\nprint(sum_product([]))  # (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # (10, 24)", "prompt_tokens": 160, "completion_tokens": 103, "duration": 4.0435051918029785}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "prompt_tokens": 150, "completion_tokens": 54, "duration": 3.7376515865325928}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]", "prompt_tokens": 192, "completion_tokens": 76, "duration": 3.3221757411956787}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.579258441925049}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.525851011276245}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 42, "duration": 3.5393548011779785}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.5287091732025146}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.326807737350464}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_duration = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    notes = music_string.split()\n    return [note_duration[note] for note in notes]\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))", "prompt_tokens": 222, "completion_tokens": 100, "duration": 3.3278884887695312}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.952439308166504}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 103, "duration": 4.493385076522827}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 216, "completion_tokens": 103, "duration": 2.8235106468200684}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.8288745880126953}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.471254587173462}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    return max([i for i in range(1, n) if n % i == 0])", "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.5331480503082275}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 70, "duration": 4.299970865249634}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.51297664642334}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3321757316589355}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 3.289001703262329}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.446502208709717}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 57, "duration": 3.4670627117156982}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.333569288253784}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted_values):\n        result[i] = v\n    return result", "prompt_tokens": 200, "completion_tokens": 85, "duration": 4.414771556854248}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.2383384704589844}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 3.126251459121704}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 57, "duration": 2.3540444374084473}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i%2==0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 41, "duration": 2.020843029022217}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.739898920059204}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        num = fibonacci(i)\n        if is_prime(num):\n            count += 1\n    return num", "prompt_tokens": 147, "completion_tokens": 163, "duration": 4.843162536621094}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum((x, y, z)) == 0 for x in l for y in l for z in l if x != y != z)", "prompt_tokens": 209, "completion_tokens": 46, "duration": 5.7354347705841064}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 5.429662704467773}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.737221002578735}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "prompt_tokens": 141, "completion_tokens": 66, "duration": 3.7949705123901367}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 6.2418904304504395}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n    \n    return fib_list[-1]", "prompt_tokens": 221, "completion_tokens": 116, "duration": 5.7989301681518555}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 1.5516915321350098}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.236940145492554}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 5.464749574661255}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 6.010514259338379}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])", "prompt_tokens": 172, "completion_tokens": 42, "duration": 5.764646291732788}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.350031137466431}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 5.648186683654785}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 5.186999797821045}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 38, "duration": 6.5305821895599365}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 64, "duration": 5.029238224029541}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 54, "duration": 5.898924827575684}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 4.415369749069214}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 4.908264875411987}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 144, "completion_tokens": 22, "duration": 4.242558002471924}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 68, "duration": 6.116909980773926}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.1749978065490723}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 199, "completion_tokens": 72, "duration": 5.622449636459351}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    return sum(1 for char in s if char.lower() in vowels)", "prompt_tokens": 176, "completion_tokens": 79, "duration": 3.7461788654327393}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 55, "duration": 6.772214412689209}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 5.672107219696045}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.641664266586304}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens, key=lambda x: (x[0], x[1]))\n    return [min_even[0], min_even[1]]", "prompt_tokens": 362, "completion_tokens": 78, "duration": 5.097854852676392}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    max_num = -1\n    for num in set(lst):\n        if lst.count(num) >= num and num > 0:\n            max_num = max(max_num, num)\n    return max_num", "prompt_tokens": 215, "completion_tokens": 51, "duration": 2.926389694213867}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 5.86173415184021}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 6.1586079597473145}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.8480916023254395}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 55, "duration": 1.1043100357055664}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 63, "duration": 6.388736724853516}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3", "prompt_tokens": 129, "completion_tokens": 106, "duration": 6.856443166732788}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 160, "completion_tokens": 33, "duration": 2.8345048427581787}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 60, "duration": 3.5844950675964355}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 189, "completion_tokens": 25, "duration": 4.3092145919799805}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    return all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2)) if len(s) >= 3 else False", "prompt_tokens": 171, "completion_tokens": 47, "duration": 1.0319738388061523}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        if gpa > 3.7:\n            return 'A'\n        if gpa > 3.3:\n            return 'A-'\n        if gpa > 3.0:\n            return 'B+'\n        if gpa > 2.7:\n            return 'B'\n        if gpa > 2.3:\n            return 'B-'\n        if gpa > 2.0:\n            return 'C+'\n        if gpa > 1.7:\n            return 'C'\n        if gpa > 1.3:\n            return 'C-'\n        if gpa > 1.0:\n            return 'D+'\n        if gpa > 0.7:\n            return 'D'\n        if gpa >= 0.0:\n            return 'D-'\n        return 'E'\n\n    return [grade(g) for g in grades]", "prompt_tokens": 320, "completion_tokens": 221, "duration": 8.414106845855713}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.4724762439727783}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 94, "completion_tokens": 64, "duration": 1.0854251384735107}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 4.153321743011475}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 34, "duration": 2.8639819622039795}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    return ' '.join(result)", "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.981414556503296}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 68, "duration": 4.027481555938721}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 253, "completion_tokens": 50, "duration": 3.571953773498535}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 76, "duration": 3.5757226943969727}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.791964769363403}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 71, "duration": 3.5930309295654297}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.871682405471802}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char)+2 - ord('a')) % 26 + ord('A'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "prompt_tokens": 159, "completion_tokens": 78, "duration": 3.3758485317230225}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_values)\n    \n    return sum_of_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 120, "duration": 5.921804666519165}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 60, "duration": 2.420733690261841}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 195, "completion_tokens": 87, "duration": 3.5806374549865723}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a) % 10)) * int(str(abs(b) % 10))", "prompt_tokens": 148, "completion_tokens": 27, "duration": 4.40070652961731}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 37, "duration": 4.357618093490601}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 39, "duration": 4.614492893218994}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile", "prompt_tokens": 182, "completion_tokens": 61, "duration": 2.2920451164245605}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 2.786447525024414}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.6726202964782715}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 46, "duration": 3.154949903488159}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.7222673892974854}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr.reverse()\n    return [nums[x-1] for x in arr]", "prompt_tokens": 326, "completion_tokens": 78, "duration": 3.382270097732544}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 174, "completion_tokens": 92, "duration": 1.7012665271759033}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 98, "duration": 3.75720477104187}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = str(num)[1:]\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count", "prompt_tokens": 174, "completion_tokens": 63, "duration": 3.6947553157806396}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        \n    return False", "prompt_tokens": 349, "completion_tokens": 63, "duration": 3.3378124237060547}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 36, "duration": 1.900071382522583}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    max_count = 0\n\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n        max_count = max(max_count, letter_count[letter])\n\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 96, "duration": 3.688969135284424}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = \"\".join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 508, "completion_tokens": 78, "duration": 4.2718048095703125}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{i+1}ng {s} of the {i+1}nput.\" for i, s in enumerate(lst)]", "prompt_tokens": 223, "completion_tokens": 65, "duration": 3.23934006690979}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.7184066772460938}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    def calculate_depth(well):\n        total_water = sum(well)\n        return math.ceil(total_water / capacity)\n\n    import math\n    total_depth = 0\n    for well in grid:\n        total_depth += calculate_depth(well)\n\n    return total_depth", "prompt_tokens": 373, "completion_tokens": 66, "duration": 2.390160322189331}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.368082284927368}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        if len([c for c in word if c in consonants]) == n:\n            result.append(word)\n    return result", "prompt_tokens": 231, "completion_tokens": 86, "duration": 4.235817909240723}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 98, "duration": 3.4160122871398926}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        count += s.count('(') - s.count(')')\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 52, "duration": 1.9407877922058105}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 3.055605411529541}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 2.967463731765747}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    \n    return sorted(list(set([num for num in collatz if num % 2 != 0])))", "prompt_tokens": 281, "completion_tokens": 85, "duration": 3.982318878173828}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 3.0317656993865967}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1) if lst.count(lst[i]) == 1)", "prompt_tokens": 299, "completion_tokens": 43, "duration": 4.305203914642334}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 158, "duration": 5.598130226135254}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.701418399810791}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence", "prompt_tokens": 285, "completion_tokens": 108, "duration": 6.019955396652222}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num) ** 2 for num in lst)", "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.7298011779785156}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalnum()):\n        return True\n    return False", "prompt_tokens": 187, "completion_tokens": 61, "duration": 3.4040653705596924}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i-1\n            break\n    return index", "prompt_tokens": 153, "completion_tokens": 52, "duration": 5.050522565841675}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 90, "duration": 4.1900529861450195}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 127, "completion_tokens": 22, "duration": 2.988631248474121}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.106764793395996}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = re.sub(r'\\s', '_', text)\n    return text", "prompt_tokens": 156, "completion_tokens": 44, "duration": 3.4061620235443115}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    file_parts = file_name.split(\".\")\n    if len(file_parts) != 2:\n        return 'No'\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if len([c for c in file_parts[0] if c.isdigit()]) > 3:\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 130, "duration": 2.550602436065674}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 3.372175455093384}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.0800018310546875}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 34, "duration": 3.2925808429718018}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 2.5527098178863525}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 169, "completion_tokens": 81, "duration": 4.610205888748169}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Example\nn = 5\nprint(get_max_triples(n))", "prompt_tokens": 215, "completion_tokens": 119, "duration": 5.007686138153076}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "prompt_tokens": 261, "completion_tokens": 126, "duration": 2.1185858249664307}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 2.9770419597625732}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 78, "duration": 4.968517303466797}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 0.860107421875}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.6411662101745605}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calc_strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    max_strength = float('-inf')\n    strongest_ext = \"\"\n    \n    for ext in extensions:\n        strength = calc_strength(ext)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    \n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 327, "completion_tokens": 105, "duration": 1.6746180057525635}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "prompt_tokens": 179, "completion_tokens": 136, "duration": 5.55906081199646}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = len([i for i in str(abs(num)) if int(i) % 2 == 0])\n    odd_count = len([i for i in str(abs(num)) if int(i) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 65, "duration": 2.838606119155884}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 143, "duration": 2.278186321258545}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "prompt_tokens": 158, "completion_tokens": 63, "duration": 1.2231793403625488}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        curr_unique_chars = unique_chars(word)\n        if curr_unique_chars > max_unique_chars or (curr_unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = curr_unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 170, "completion_tokens": 95, "duration": 5.631035089492798}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]", "prompt_tokens": 327, "completion_tokens": 43, "duration": 2.6561062335968018}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i + 1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 51, "duration": 1.1593248844146729}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        return s[::-1]\n    return result", "prompt_tokens": 157, "completion_tokens": 81, "duration": 3.5644960403442383}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 36, "duration": 0.8799667358398438}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    group = ''\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        \n        group += char\n        \n        if count == 0:\n            result.append(group.replace(\" \", \"\"))\n            group = ''\n    \n    return result", "prompt_tokens": 165, "completion_tokens": 98, "duration": 2.915585517883301}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.13432240486145}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 2.4843740463256836}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.635263442993164}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "prompt_tokens": 142, "completion_tokens": 56, "duration": 2.492175340652466}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.1384620666503906}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_total = sum(numbers)\n    product_total = 1\n    for num in numbers:\n        product_total *= num\n    return (sum_total, product_total)", "prompt_tokens": 160, "completion_tokens": 73, "duration": 2.6273326873779297}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_list.append(max_num)\n    return max_list", "prompt_tokens": 150, "completion_tokens": 62, "duration": 2.4928503036499023}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]", "prompt_tokens": 192, "completion_tokens": 76, "duration": 3.3221757411956787}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return \"\".join([str(int(i) ^ int(j)) for i, j in zip(a, b)])", "prompt_tokens": 126, "completion_tokens": 37, "duration": 2.2105839252471924}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 152, "completion_tokens": 41, "duration": 2.276129722595215}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.326540470123291}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 2.1468472480773926}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.0073132514953613}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    music_list = music_string.split()\n    return [notes[note] for note in music_list]\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "prompt_tokens": 222, "completion_tokens": 137, "duration": 3.0193028450012207}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 74, "duration": 2.9661526679992676}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 103, "duration": 3.2411394119262695}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 216, "completion_tokens": 103, "duration": 2.8235106468200684}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.8288745880126953}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.822077751159668}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.4771811962127686}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    \n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    \n    return factors", "prompt_tokens": 176, "completion_tokens": 70, "duration": 2.588345766067505}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 2.122736692428589}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.1340184211730957}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.8879389762878418}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.894559621810913}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "prompt_tokens": 149, "completion_tokens": 102, "duration": 2.8995697498321533}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "prompt_tokens": 309, "completion_tokens": 23, "duration": 1.8695454597473145}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    for i in range(0, len(l), 3):\n        if i + 3 <= len(l):\n            l[i:i+3] = sorted(l[i:i+3])\n    return l", "prompt_tokens": 200, "completion_tokens": 54, "duration": 2.1593716144561768}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.812459945678711}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.7433135509490967}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 57, "duration": 2.3540444374084473}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else val for i, val in enumerate(l)]", "prompt_tokens": 173, "completion_tokens": 42, "duration": 2.2103874683380127}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 3.7247366905212402}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while n > 0:\n        i += 1\n        if is_prime(fibonacci(i)):\n            n -= 1\n    return fibonacci(i)", "prompt_tokens": 147, "completion_tokens": 174, "duration": 5.350690126419067}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 70, "duration": 2.5179171562194824}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 3.45405912399292}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "prompt_tokens": 207, "completion_tokens": 28, "duration": 2.069643974304199}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 45, "duration": 3.691335678100586}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 4.351720094680786}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 113, "duration": 4.234102964401245}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]", "prompt_tokens": 125, "completion_tokens": 64, "duration": 4.8998260498046875}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 3.5294532775878906}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 3.0677762031555176}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 3.7634716033935547}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiouAEIOU'])", "prompt_tokens": 172, "completion_tokens": 34, "duration": 3.4495060443878174}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.345207691192627}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 3.0242691040039062}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 2.8674793243408203}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.3529574871063232}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    opening = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening += 1\n        elif bracket == \">\":\n            opening -= 1\n        if opening < 0:\n            return False\n    return opening == 0", "prompt_tokens": 142, "completion_tokens": 68, "duration": 3.7121262550354004}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.477552652359009}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 3.0876855850219727}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 3.4639158248901367}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 4.123863458633423}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 69, "duration": 2.279885768890381}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs):\n    return [xs[i]*i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 25, "duration": 2.765313148498535}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 102, "duration": 5.168015718460083}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s)-1 and s[i].lower() == 'y'):\n            count += 1\n    return count", "prompt_tokens": 176, "completion_tokens": 67, "duration": 5.112467527389526}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 53, "duration": 3.484450578689575}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.921161413192749}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = [int(x) for x in s.split() if x.isdigit()]\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 38, "duration": 2.9809682369232178}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n\n    min_even_value = min(even_values)\n    min_even_value_index = arr.index(min_even_value)\n    return [min_even_value, min_even_value_index]", "prompt_tokens": 362, "completion_tokens": 71, "duration": 4.556764602661133}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 37, "duration": 3.1895554065704346}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst", "prompt_tokens": 174, "completion_tokens": 58, "duration": 3.4370334148406982}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 3.680319309234619}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.7176320552825928}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 207, "completion_tokens": 55, "duration": 3.1786270141601562}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 3.0323095321655273}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n            if count == 3:\n                return True\n    return False", "prompt_tokens": 129, "completion_tokens": 109, "duration": 5.106977224349976}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 160, "completion_tokens": 33, "duration": 2.8345048427581787}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 349, "completion_tokens": 53, "duration": 3.107821464538574}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 189, "completion_tokens": 29, "duration": 2.8554420471191406}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 80, "duration": 3.2314200401306152}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n    return result", "prompt_tokens": 320, "completion_tokens": 226, "duration": 4.988205671310425}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.5160369873046875}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    count = 0\n    if n == 1:\n        return 2\n    count += 2 * 9 * (10**(n-2))\n    return count", "prompt_tokens": 94, "completion_tokens": 48, "duration": 2.9783999919891357}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 183, "completion_tokens": 25, "duration": 3.8188259601593018}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.7971463203430176}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "prompt_tokens": 180, "completion_tokens": 26, "duration": 2.055957794189453}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 70, "duration": 2.8156564235687256}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array[:]\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 56, "duration": 2.551884889602661}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    return ''.join([chr((ord(c) - ord('a') + 2*2) % 26 + ord('a')) if c.islower() else c for c in s])", "prompt_tokens": 160, "completion_tokens": 49, "duration": 2.307790994644165}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 52, "duration": 2.3499152660369873}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences += S.split('!')\n    sentences += S.split('?')\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))", "prompt_tokens": 157, "completion_tokens": 47, "duration": 2.4350473880767822}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return all(isinstance(num, int) for num in (x, y, z)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 51, "duration": 2.3810179233551025}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                if char.islower():\n                    encoded_message += char.upper()\n                else:\n                    encoded_message += char.lower()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 108, "duration": 2.0584518909454346}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def sum_of_digits_of_largest_prime(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum([int(d) for d in str(n)])\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 128, "duration": 4.728965997695923}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 60, "duration": 2.420733690261841}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 2.7404284477233887}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 29, "duration": 2.135709762573242}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s: str) -> int:\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in \"AEIOU\")", "prompt_tokens": 122, "completion_tokens": 43, "duration": 2.096749782562256}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.1321446895599365}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile", "prompt_tokens": 182, "completion_tokens": 61, "duration": 2.2920451164245605}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 3.5697991847991943}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 144, "completion_tokens": 45, "duration": 2.058150291442871}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.241297721862793}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 1.984708309173584}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    return [digits[num] for num in reversed_arr]", "prompt_tokens": 326, "completion_tokens": 115, "duration": 3.102436065673828}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 88, "duration": 2.7417428493499756}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count", "prompt_tokens": 261, "completion_tokens": 98, "duration": 2.7613565921783447}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(d) for d in str(abs(num))) > 0)", "prompt_tokens": 174, "completion_tokens": 34, "duration": 2.0265607833862305}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 349, "completion_tokens": 62, "duration": 2.2703919410705566}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 36, "duration": 1.900071382522583}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    max_count = 0\n\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n        max_count = max(max_count, letter_count[letter])\n\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 96, "duration": 3.688969135284424}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    return result, result == result[::-1]", "prompt_tokens": 212, "completion_tokens": 37, "duration": 1.9593040943145752}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        sum(int(c) % 2 != 0 for c in s), s.index(c) + 1, s.index(c) + 1, s.index(c) + 1) for s in lst for c in s]", "prompt_tokens": 223, "completion_tokens": 81, "duration": 2.5357115268707275}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 2.4808480739593506}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return (total_water + capacity - 1) // capacity", "prompt_tokens": 373, "completion_tokens": 38, "duration": 3.548647880554199}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.7792084217071533}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n\n    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for letter in word if letter.isalpha() and letter not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result", "prompt_tokens": 231, "completion_tokens": 87, "duration": 2.55491304397583}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i+1] in consonants and word[i-1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 98, "duration": 2.7190535068511963}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        count += 1 if s == '(' else -1\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 53, "duration": 2.0899221897125244}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.668445110321045}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum([x for x in arr[:k] if 10 <= x <= 99])", "prompt_tokens": 178, "completion_tokens": 32, "duration": 3.158369302749634}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([num for num in collatz if num % 2 != 0])", "prompt_tokens": 281, "completion_tokens": 82, "duration": 2.210515022277832}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.932066202163696}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # \u279e 3", "prompt_tokens": 190, "completion_tokens": 116, "duration": 4.799492835998535}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    sorted_lst = sorted(lst)\n    return sorted_lst == lst and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 36, "duration": 3.436354637145996}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 158, "duration": 5.598130226135254}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n    return product * sum(abs(num) for num in arr)", "prompt_tokens": 172, "completion_tokens": 66, "duration": 2.078993082046509}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    result = [3]\n    if n == 0:\n        return []\n    elif n == 1:\n        return result\n    else:\n        for i in range(1, n):\n            if i % 2 == 0:\n                result.append(1 + i // 2)\n            else:\n                result.append(result[i - 1] + result[i - 2] + result[i - 3])\n        return result", "prompt_tokens": 285, "completion_tokens": 99, "duration": 5.343504190444946}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 3.0680184364318848}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalnum()):\n        return True\n    return False", "prompt_tokens": 187, "completion_tokens": 61, "duration": 3.4040653705596924}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 153, "completion_tokens": 53, "duration": 3.2878458499908447}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 188, "completion_tokens": 90, "duration": 3.890843629837036}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n+1, 2):\n        if n - i >= 0:\n            count += 1\n    return count == 4", "prompt_tokens": 127, "completion_tokens": 55, "duration": 3.5375847816467285}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            temp = 1\n            for j in range(1, i+1):\n                temp *= j\n            result *= temp\n        return result", "prompt_tokens": 145, "completion_tokens": 70, "duration": 3.9703047275543213}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = re.sub(r'\\s', '_', text)\n    return text", "prompt_tokens": 156, "completion_tokens": 44, "duration": 3.4061620235443115}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(1 for c in name if c.isdigit()) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 99, "duration": 4.292522668838501}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 3.1983070373535156}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 95, "duration": 3.8871896266937256}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_denom * n_denom)\n    \n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 66, "duration": 3.313920259475708}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 4.474608898162842}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_odd_digit(n):\n        n_str = str(abs(n))\n        return int(n_str[0]) % 2 != 0 and int(n_str[-1]) % 2 != 0\n    \n    count = 0\n    for num in nums:\n        if num > 10 and is_odd_digit(num):\n            count += 1\n    \n    return count", "prompt_tokens": 169, "completion_tokens": 86, "duration": 3.7950246334075928}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 123, "duration": 5.7769691944122314}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    \n    return tuple([p for p in planets[start_index+1:end_index]])", "prompt_tokens": 261, "completion_tokens": 125, "duration": 5.372603893280029}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 3.157214641571045}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 78, "duration": 3.453221559524536}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 2.8807239532470703}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.7771897315979004}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 67, "duration": 3.5131309032440186}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "prompt_tokens": 179, "completion_tokens": 136, "duration": 5.55906081199646}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 71, "duration": 3.134073257446289}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()\n\n# Test cases\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'", "prompt_tokens": 151, "completion_tokens": 197, "duration": 6.572391986846924}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)", "prompt_tokens": 158, "completion_tokens": 57, "duration": 3.161298990249634}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    \n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 170, "completion_tokens": 92, "duration": 3.3375308513641357}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 327, "completion_tokens": 47, "duration": 2.9945456981658936}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    expr = str(operands[0])\n    for i in range(len(operators)):\n        expr += operators[i] + str(operands[i+1])\n    return eval(expr)", "prompt_tokens": 257, "completion_tokens": 50, "duration": 2.92203426361084}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.6143977642059326}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.711808204650879}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            if count == 1:\n                group = \"\"\n        group += char\n        if char == ')':\n            count -= 1\n            if count == 0:\n                result.append(group)\n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))", "prompt_tokens": 165, "completion_tokens": 115, "duration": 4.904185056686401}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.13432240486145}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 37, "duration": 3.4491524696350098}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.635263442993164}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 142, "completion_tokens": 62, "duration": 2.6180431842803955}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.1384620666503906}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_total = sum(numbers)\n    product_total = 1\n    for num in numbers:\n        product_total *= num\n    return (sum_total, product_total)", "prompt_tokens": 160, "completion_tokens": 73, "duration": 2.6273326873779297}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_list.append(max_num)\n    return max_list", "prompt_tokens": 150, "completion_tokens": 62, "duration": 2.4928503036499023}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]", "prompt_tokens": 192, "completion_tokens": 76, "duration": 3.3221757411956787}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return \"\".join([str(int(i) ^ int(j)) for i, j in zip(a, b)])", "prompt_tokens": 126, "completion_tokens": 37, "duration": 2.2105839252471924}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 152, "completion_tokens": 41, "duration": 2.276129722595215}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.326540470123291}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 2.1468472480773926}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.0073132514953613}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [notes[note] for note in music_string.split()]", "prompt_tokens": 222, "completion_tokens": 64, "duration": 2.559011936187744}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 74, "duration": 2.9661526679992676}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 103, "duration": 3.2411394119262695}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    res = None\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            res = (numbers[i-1], numbers[i])\n    return res\n\n# Test cases\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # (2.0, 2.0)", "prompt_tokens": 216, "completion_tokens": 195, "duration": 5.214127063751221}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 2.367142915725708}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.822077751159668}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.4771811962127686}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 71, "duration": 2.4579977989196777}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 2.122736692428589}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.1340184211730957}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.8879389762878418}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.894559621810913}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "prompt_tokens": 149, "completion_tokens": 102, "duration": 2.8995697498321533}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "prompt_tokens": 309, "completion_tokens": 23, "duration": 1.8695454597473145}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    for i in range(0, len(l), 3):\n        l[i:i+3] = sorted(l[i:i+3])\n    return l", "prompt_tokens": 200, "completion_tokens": 44, "duration": 5.082174777984619}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.812459945678711}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.7433135509490967}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 57, "duration": 2.3540444374084473}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else val for i, val in enumerate(l)]", "prompt_tokens": 173, "completion_tokens": 42, "duration": 2.2103874683380127}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 3.7247366905212402}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while n > 0:\n        i += 1\n        if is_prime(fibonacci(i)):\n            n -= 1\n    return fibonacci(i)", "prompt_tokens": 147, "completion_tokens": 174, "duration": 5.350690126419067}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    return any(sum([l[i], l[j], l[k]]) == 0 for i in range(len(l)) for j in range(i+1, len(l)) for k in range(j+1, len(l)))", "prompt_tokens": 209, "completion_tokens": 59, "duration": 2.1570541858673096}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 3.45405912399292}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "prompt_tokens": 207, "completion_tokens": 28, "duration": 2.069643974304199}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 45, "duration": 3.691335678100586}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 4.351720094680786}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 113, "duration": 4.234102964401245}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]", "prompt_tokens": 125, "completion_tokens": 64, "duration": 4.8998260498046875}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 3.5294532775878906}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 3.0677762031555176}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 1.7496938705444336}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiouAEIOU'])", "prompt_tokens": 172, "completion_tokens": 34, "duration": 3.4495060443878174}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.345207691192627}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 3.0242691040039062}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 2.8674793243408203}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.3529574871063232}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    opening = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening += 1\n        elif bracket == \">\":\n            opening -= 1\n        if opening < 0:\n            return False\n    return opening == 0", "prompt_tokens": 142, "completion_tokens": 68, "duration": 3.7121262550354004}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.477552652359009}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 3.0876855850219727}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 3.4639158248901367}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 4.123863458633423}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 69, "duration": 2.279885768890381}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs):\n    return [xs[i]*i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 25, "duration": 2.765313148498535}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 102, "duration": 5.168015718460083}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char in vowels) + 1\n    else:\n        return sum(1 for char in s if char in vowels)", "prompt_tokens": 176, "completion_tokens": 69, "duration": 3.2689452171325684}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 53, "duration": 3.484450578689575}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.921161413192749}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = [int(x) for x in s.split() if x.isdigit()]\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 38, "duration": 2.9809682369232178}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n\n    min_even_value = min(even_values)\n    min_even_value_index = arr.index(min_even_value)\n    return [min_even_value, min_even_value_index]", "prompt_tokens": 362, "completion_tokens": 71, "duration": 4.556764602661133}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 37, "duration": 3.1895554065704346}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst", "prompt_tokens": 174, "completion_tokens": 58, "duration": 3.4370334148406982}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 3.680319309234619}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.7176320552825928}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 207, "completion_tokens": 55, "duration": 3.1786270141601562}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 3.0323095321655273}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n            if count == 3:\n                return True\n    return False", "prompt_tokens": 129, "completion_tokens": 109, "duration": 5.106977224349976}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 160, "completion_tokens": 33, "duration": 2.8345048427581787}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 349, "completion_tokens": 53, "duration": 3.107821464538574}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 189, "completion_tokens": 29, "duration": 2.8554420471191406}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 80, "duration": 3.2314200401306152}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n    return result", "prompt_tokens": 320, "completion_tokens": 226, "duration": 4.988205671310425}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.5160369873046875}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    count = 0\n    if n == 1:\n        return 2\n    count += 2 * 9 * (10**(n-2))\n    return count", "prompt_tokens": 94, "completion_tokens": 48, "duration": 2.9783999919891357}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 183, "completion_tokens": 25, "duration": 3.8188259601593018}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.7971463203430176}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "prompt_tokens": 180, "completion_tokens": 26, "duration": 2.055957794189453}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 70, "duration": 2.8156564235687256}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array[:]\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 56, "duration": 2.551884889602661}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    return ''.join([chr((ord(c) - ord('a') + 2*2) % 26 + ord('a')) if c.islower() else c for c in s])", "prompt_tokens": 160, "completion_tokens": 49, "duration": 2.307790994644165}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 52, "duration": 2.3499152660369873}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences += S.split('!')\n    sentences += S.split('?')\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))", "prompt_tokens": 157, "completion_tokens": 47, "duration": 2.4350473880767822}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return all(isinstance(num, int) for num in (x, y, z)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 51, "duration": 2.3810179233551025}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiou\"\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a')).upper()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    \n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 95, "duration": 2.7705037593841553}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def sum_of_digits_of_largest_prime(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum([int(d) for d in str(n)])\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 128, "duration": 4.728965997695923}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    upper_flag = False\n    lower_flag = False\n    for key in dictionary.keys():\n        if isinstance(key, str):\n            if key.islower():\n                lower_flag = True\n            elif key.isupper():\n                upper_flag = True\n            else:\n                return False\n        else:\n            return False\n    return upper_flag != lower_flag", "prompt_tokens": 219, "completion_tokens": 91, "duration": 2.8661487102508545}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 2.7404284477233887}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 29, "duration": 2.135709762573242}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 1.998668909072876}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.1321446895599365}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile", "prompt_tokens": 182, "completion_tokens": 61, "duration": 2.2920451164245605}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 3.5697991847991943}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 144, "completion_tokens": 45, "duration": 2.058150291442871}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.241297721862793}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 1.984708309173584}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    return [digits[num] for num in reversed_arr]", "prompt_tokens": 326, "completion_tokens": 115, "duration": 3.102436065673828}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 88, "duration": 2.7417428493499756}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count", "prompt_tokens": 261, "completion_tokens": 98, "duration": 2.7613565921783447}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(d) for d in str(abs(num))) > 0)", "prompt_tokens": 174, "completion_tokens": 34, "duration": 2.0265607833862305}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    return sorted_arr == arr or sorted_arr == arr[-1:] + arr[:-1] or sorted_arr == arr[-2:] + arr[:-2]\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False", "prompt_tokens": 349, "completion_tokens": 108, "duration": 5.334486961364746}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 36, "duration": 1.900071382522583}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "from collections import Counter\n\ndef histogram(test):\n    if not test:\n        return {}\n    \n    letter_counts = Counter(test.split())\n    max_count = max(letter_counts.values())\n    return {letter: count for letter, count in letter_counts.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 60, "duration": 2.224600076675415}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    return result, result == result[::-1]", "prompt_tokens": 212, "completion_tokens": 37, "duration": 1.9593040943145752}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        sum(int(c) % 2 != 0 for c in s), s.index(c) + 1, s.index(c) + 1, s.index(c) + 1) for s in lst for c in s]", "prompt_tokens": 223, "completion_tokens": 81, "duration": 2.5357115268707275}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 2.4808480739593506}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, bucket_capacity):\n    total_water = 0\n    for row in grid:\n        for well in row:\n            total_water += well\n    return total_water // bucket_capacity + (total_water % bucket_capacity != 0)", "prompt_tokens": 373, "completion_tokens": 55, "duration": 1.989652156829834}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.7792084217071533}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n\n    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for letter in word if letter.isalpha() and letter not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result", "prompt_tokens": 231, "completion_tokens": 87, "duration": 2.55491304397583}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i+1] in consonants and word[i-1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 98, "duration": 2.7190535068511963}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        count += 1 if s == '(' else -1\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 53, "duration": 2.0899221897125244}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.668445110321045}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum([x for x in arr[:k] if 10 <= x <= 99])", "prompt_tokens": 178, "completion_tokens": 32, "duration": 3.158369302749634}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([num for num in collatz if num % 2 != 0])", "prompt_tokens": 281, "completion_tokens": 82, "duration": 2.210515022277832}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    import re\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    return True", "prompt_tokens": 313, "completion_tokens": 218, "duration": 5.738846778869629}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # \u279e 3", "prompt_tokens": 190, "completion_tokens": 116, "duration": 4.799492835998535}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    sorted_lst = sorted(lst)\n    return sorted_lst == lst and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 36, "duration": 3.436354637145996}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 158, "duration": 5.598130226135254}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n    return product * sum(abs(num) for num in arr)", "prompt_tokens": 172, "completion_tokens": 66, "duration": 2.078993082046509}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    result = [3]\n    if n == 0:\n        return []\n    elif n == 1:\n        return result\n    else:\n        for i in range(1, n):\n            if i % 2 == 0:\n                result.append(1 + i // 2)\n            else:\n                result.append(result[i - 1] + result[i - 2] + result[i - 3])\n        return result", "prompt_tokens": 285, "completion_tokens": 99, "duration": 5.343504190444946}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 3.0680184364318848}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # False\nprint(check_if_last_char_is_a_letter(\"\"))  # False", "prompt_tokens": 187, "completion_tokens": 116, "duration": 3.893920421600342}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 153, "completion_tokens": 53, "duration": 3.2878458499908447}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 188, "completion_tokens": 90, "duration": 3.890843629837036}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n+1, 2):\n        if n - i >= 0:\n            count += 1\n    return count == 4", "prompt_tokens": 127, "completion_tokens": 55, "duration": 3.5375847816467285}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            temp = 1\n            for j in range(1, i+1):\n                temp *= j\n            result *= temp\n        return result", "prompt_tokens": 145, "completion_tokens": 70, "duration": 3.9703047275543213}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 36, "duration": 3.331773519515991}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(1 for c in name if c.isdigit()) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 99, "duration": 4.292522668838501}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 3.1983070373535156}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 95, "duration": 3.8871896266937256}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_denom * n_denom)\n    \n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 66, "duration": 3.313920259475708}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 4.474608898162842}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_odd_digit(n):\n        n_str = str(abs(n))\n        return int(n_str[0]) % 2 != 0 and int(n_str[-1]) % 2 != 0\n    \n    count = 0\n    for num in nums:\n        if num > 10 and is_odd_digit(num):\n            count += 1\n    \n    return count", "prompt_tokens": 169, "completion_tokens": 86, "duration": 3.7950246334075928}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 123, "duration": 5.7769691944122314}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    \n    return tuple([p for p in planets[start_index+1:end_index]])", "prompt_tokens": 261, "completion_tokens": 125, "duration": 5.372603893280029}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 3.157214641571045}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 78, "duration": 3.453221559524536}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 2.8807239532470703}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.7771897315979004}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 67, "duration": 3.5131309032440186}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "prompt_tokens": 179, "completion_tokens": 136, "duration": 5.55906081199646}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 71, "duration": 3.134073257446289}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()\n\n# Test cases\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'", "prompt_tokens": 151, "completion_tokens": 197, "duration": 6.572391986846924}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)", "prompt_tokens": 158, "completion_tokens": 57, "duration": 3.161298990249634}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    \n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 170, "completion_tokens": 92, "duration": 3.3375308513641357}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 327, "completion_tokens": 47, "duration": 2.9945456981658936}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    expr = str(operands[0])\n    for i in range(len(operators)):\n        expr += operators[i] + str(operands[i+1])\n    return eval(expr)", "prompt_tokens": 257, "completion_tokens": 50, "duration": 2.92203426361084}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.6143977642059326}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.711808204650879}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    group = ''\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        \n        group += char\n        \n        if count == 0:\n            result.append(group.replace(\" \", \"\"))\n            group = ''\n    \n    return result", "prompt_tokens": 165, "completion_tokens": 98, "duration": 2.915585517883301}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.1695830821990967}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 2.4843740463256836}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.319308280944824}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "prompt_tokens": 142, "completion_tokens": 56, "duration": 2.492175340652466}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.2584266662597656}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers) if numbers else 0\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 160, "completion_tokens": 60, "duration": 2.741173505783081}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "prompt_tokens": 150, "completion_tokens": 57, "duration": 2.7302207946777344}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i-1][::-1]", "prompt_tokens": 192, "completion_tokens": 75, "duration": 2.726510524749756}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 43, "duration": 2.2388134002685547}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)", "prompt_tokens": 152, "completion_tokens": 53, "duration": 2.451540470123291}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.302018165588379}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 118, "completion_tokens": 30, "duration": 2.0252087116241455}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 1.9409735202789307}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    music_list = music_string.split()\n    return [notes[note] for note in music_list]\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "prompt_tokens": 222, "completion_tokens": 137, "duration": 3.0193028450012207}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not substring:\n        return 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 75, "duration": 2.8167803287506104}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers_list)", "prompt_tokens": 155, "completion_tokens": 106, "duration": 3.3935978412628174}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 216, "completion_tokens": 103, "duration": 2.8235106468200684}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 2.367142915725708}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.8585586547851562}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.1069836616516113}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    \n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    \n    return factors", "prompt_tokens": 176, "completion_tokens": 70, "duration": 2.588345766067505}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 2.0831470489501953}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 2.110248327255249}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.069101333618164}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.9776499271392822}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 51, "duration": 2.0446343421936035}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    a = max(xs, key=abs)\n    b = -a\n    \n    def poly(x):\n        return sum([coeff * x**i for i, coeff in enumerate(xs)])\n    \n    x = (a + b) / 2\n    \n    while abs(poly(x)) > 1e-10:\n        if poly(a) * poly(x) < 0:\n            b = x\n        else:\n            a = x\n        x = (a + b) / 2\n        \n    return x", "prompt_tokens": 309, "completion_tokens": 142, "duration": 5.081058740615845}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    for i in range(0, len(l), 3):\n        if i + 3 <= len(l):\n            l[i:i+3] = sorted(l[i:i+3])\n    return l", "prompt_tokens": 200, "completion_tokens": 54, "duration": 2.1593716144561768}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.8681590557098389}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.6977958679199219}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    return sum(str(x).count('7') for x in range(n) if x % 11 == 0 or x % 13 == 0)", "prompt_tokens": 129, "completion_tokens": 41, "duration": 1.799715518951416}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i%2==0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 41, "duration": 2.020843029022217}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.051835298538208}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    def is_fib(num):\n        a, b = 1, 1\n        while b < num:\n            a, b = b, a + b\n        return b == num\n    \n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_fib(num) and is_prime(num):\n            count += 1\n    return num", "prompt_tokens": 147, "completion_tokens": 151, "duration": 3.622666358947754}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 70, "duration": 2.5179171562194824}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x+1 for x in l]", "prompt_tokens": 158, "completion_tokens": 22, "duration": 3.210829734802246}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.242454767227173}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "prompt_tokens": 141, "completion_tokens": 66, "duration": 3.7949705123901367}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 3.1746158599853516}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 4.502384185791016}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        return (sorted_list[length // 2 - 1] + sorted_list[length // 2]) / 2\n    else:\n        return sorted_list[length // 2]", "prompt_tokens": 125, "completion_tokens": 71, "duration": 4.001330614089966}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 3.109971523284912}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 3.4794604778289795}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 3.7634716033935547}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 37, "duration": 3.5343573093414307}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 3.106067180633545}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 2.848487138748169}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 4.064838409423828}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.155627727508545}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 66, "duration": 3.5706307888031006}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.631063222885132}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(set(l2))))", "prompt_tokens": 397, "completion_tokens": 58, "duration": 4.633086681365967}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 3.0528647899627686}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return (n*(n+1)) // 2", "prompt_tokens": 144, "completion_tokens": 20, "duration": 2.960353374481201}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 67, "duration": 3.299666404724121}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 26, "duration": 2.9010627269744873}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 99, "duration": 3.7664196491241455}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s)-1 and s[i].lower() == 'y'):\n            count += 1\n    return count", "prompt_tokens": 176, "completion_tokens": 67, "duration": 5.112467527389526}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    shifted = x_str[-shift:] + x_str[:-shift]\n    return shifted", "prompt_tokens": 132, "completion_tokens": 55, "duration": 4.4132239818573}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.8811967372894287}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 37, "duration": 3.9410250186920166}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n\n    min_even_value = min(even_values)\n    index = arr.index(min_even_value)\n    return [min_even_value, index]", "prompt_tokens": 362, "completion_tokens": 65, "duration": 4.601921796798706}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    max_num = -1\n    for num in set(lst):\n        if lst.count(num) >= num and num > 0:\n            max_num = max(max_num, num)\n    return max_num", "prompt_tokens": 215, "completion_tokens": 51, "duration": 2.926389694213867}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list", "prompt_tokens": 174, "completion_tokens": 48, "duration": 4.030500888824463}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 4.6683189868927}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.837822198867798}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 3.2708771228790283}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 2.9753897190093994}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    if count == 3:\n        return True\n    return False", "prompt_tokens": 129, "completion_tokens": 110, "duration": 4.664634704589844}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return a >= 0 and round(a ** (1/3)) ** 3 == a", "prompt_tokens": 160, "completion_tokens": 30, "duration": 2.818692684173584}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "prompt_tokens": 349, "completion_tokens": 49, "duration": 4.034329414367676}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 189, "completion_tokens": 29, "duration": 2.7738699913024902}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s) - 2))", "prompt_tokens": 171, "completion_tokens": 62, "duration": 4.262517690658569}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 254, "duration": 5.46552038192749}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.2479121685028076}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 94, "completion_tokens": 64, "duration": 3.20924973487854}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 2.5897483825683594}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.657017469406128}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 180, "completion_tokens": 26, "duration": 2.1301512718200684}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 70, "duration": 2.683040142059326}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.reverse()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 45, "duration": 2.357879877090454}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = ord(char) + 2 * 2\n            if char.islower():\n                if shift > ord('z'):\n                    shift -= 26\n            else:\n                if shift > ord('Z'):\n                    shift -= 26\n            result += chr(shift)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 92, "duration": 2.821547746658325}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 52, "duration": 2.5346078872680664}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split('. ') + S.split('? ') + S.split('! ')\n    return sum(1 for sentence in sentences if sentence.startswith('I'))", "prompt_tokens": 157, "completion_tokens": 43, "duration": 2.110577344894409}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 54, "duration": 2.3245136737823486}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = 'aeiouAEIOU'\n    for letter in message:\n        if letter.lower() in vowels:\n            encoded_message += chr((ord(letter) + 2 - ord('a')) % 26 + ord('A'))\n        else:\n            encoded_message += letter.swapcase()\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 78, "duration": 2.9546384811401367}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    largest_prime = max(primes)\n    return sum_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 110, "duration": 2.909538984298706}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 60, "duration": 2.420733690261841}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 195, "completion_tokens": 86, "duration": 2.853787660598755}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 29, "duration": 2.135709762573242}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s: str) -> int:\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in \"AEIOU\")", "prompt_tokens": 122, "completion_tokens": 43, "duration": 2.096749782562256}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.2596874237060547}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    pile = []\n    for i in range(n):\n        pile.append(n + 2*i)\n    return pile", "prompt_tokens": 182, "completion_tokens": 35, "duration": 1.9230694770812988}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.7471575736999512}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.1453254222869873}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.133678674697876}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 1.9948737621307373}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    if not arr:\n        return []\n    \n    valid_nums = [x for x in arr if 1 <= x <= 9]\n    sorted_nums = sorted(valid_nums)\n    reversed_nums = sorted_nums[::-1]\n    \n    num_to_word = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    return [num_to_word[num] for num in reversed_nums]", "prompt_tokens": 326, "completion_tokens": 141, "duration": 3.6692206859588623}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.427252769470215}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 105, "duration": 2.7667083740234375}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)", "prompt_tokens": 174, "completion_tokens": 31, "duration": 1.8024473190307617}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 349, "completion_tokens": 62, "duration": 2.2703919410705566}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 36, "duration": 2.0306668281555176}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    letters = test.split()\n    hist = {}\n    max_count = 0\n    for letter in letters:\n        hist[letter] = hist.get(letter, 0) + 1\n        max_count = max(max_count, hist[letter])\n    \n    return {key: value for key, value in hist.items() if value == max_count}", "prompt_tokens": 201, "completion_tokens": 81, "duration": 2.7618002891540527}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    new_s = ''.join([char for char in s if char not in c])\n    return new_s, new_s == new_s[::-1]", "prompt_tokens": 212, "completion_tokens": 42, "duration": 2.040729522705078}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len([c for c in s if int(c) % 2 != 0]), i, i, i) for i, s in enumerate(lst, 1)]", "prompt_tokens": 223, "completion_tokens": 66, "duration": 2.4316625595092773}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 70, "duration": 2.1958563327789307}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(map(sum, grid))\n    return math.ceil(total_water / capacity)", "prompt_tokens": 373, "completion_tokens": 34, "duration": 3.5744309425354004}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.6457667350769043}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = []\n    for word in words:\n        count = sum(1 for letter in word if letter in consonants)\n        if count == n:\n            result.append(word)\n    return result", "prompt_tokens": 231, "completion_tokens": 90, "duration": 2.552250623703003}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    word = word.strip('aeiouAEIOU')\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in 'aeiouAEIOU' and word[i-1] not in 'aeiouAEIOU' and word[i+1] not in 'aeiouAEIOU':\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 91, "duration": 2.5176215171813965}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        count += s.count('(') - s.count(')')\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 52, "duration": 1.9407877922058105}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 3.055605411529541}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum([x for x in arr[:k] if 10 <= x <= 99])", "prompt_tokens": 178, "completion_tokens": 32, "duration": 1.7717721462249756}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    def collatz(number):\n        sequence = [number]\n        while number != 1:\n            if number % 2 == 0:\n                number = number // 2\n            else:\n                number = 3 * number + 1\n            sequence.append(number)\n        return sequence\n    \n    return sorted([num for num in collatz(n) if num % 2 != 0])", "prompt_tokens": 281, "completion_tokens": 92, "duration": 4.076055288314819}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month, day, year = parts\n\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return day >= 1 and day <= 31\n    elif month in [4, 6, 9, 11]:\n        return day >= 1 and day <= 30\n    elif month == 2:\n        if year % 4 == 0:\n            return day >= 1 and day <= 29\n        else:\n            return day >= 1 and day <= 28\n    else:\n        return False\n\n    return False", "prompt_tokens": 313, "completion_tokens": 212, "duration": 5.834261655807495}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    words = txt.split()\n    if len(words) == 1 and ',' in txt:\n        return txt.split(',')\n    elif len(words) == 1:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)\n    return words", "prompt_tokens": 190, "completion_tokens": 71, "duration": 2.2049105167388916}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    sorted_lst = sorted(lst)\n    return sorted_lst == lst and all(lst.count(x) == 1 for x in lst)", "prompt_tokens": 299, "completion_tokens": 36, "duration": 1.8024358749389648}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 158, "duration": 5.598130226135254}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n    return sum(abs(num) for num in arr) * product", "prompt_tokens": 172, "completion_tokens": 62, "duration": 3.938680648803711}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    tribonacci = [0, 1, 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n    return tribonacci[:n + 1]", "prompt_tokens": 285, "completion_tokens": 97, "duration": 4.120797872543335}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 1.9102427959442139}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalnum()):\n        return True\n    return False", "prompt_tokens": 187, "completion_tokens": 61, "duration": 3.4040653705596924}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i-1\n    return max_index", "prompt_tokens": 153, "completion_tokens": 52, "duration": 3.150789976119995}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n\n    if neg_integers:\n        largest_neg = max(neg_integers)\n    else:\n        largest_neg = None\n\n    if pos_integers:\n        smallest_pos = min(pos_integers)\n    else:\n        smallest_pos = None\n\n    return (largest_neg, smallest_pos)", "prompt_tokens": 188, "completion_tokens": 105, "duration": 3.7794861793518066}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 127, "completion_tokens": 22, "duration": 2.988631248474121}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 145, "completion_tokens": 60, "duration": 3.3785932064056396}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = re.sub(r'\\s', '_', text)\n    return text", "prompt_tokens": 156, "completion_tokens": 44, "duration": 3.4061620235443115}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    digits = sum(c.isdigit() for c in file_name)\n    if digits > 3:\n        return 'No'\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    file_parts = file_name.split('.')\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 114, "duration": 3.8633687496185303}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 3.372175455093384}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.653421640396118}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    x = eval(x)\n    n = eval(n)\n    result = x * n\n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 35, "duration": 2.880377769470215}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 32, "duration": 3.0217134952545166}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 169, "completion_tokens": 81, "duration": 3.58467435836792}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 94, "duration": 3.6346774101257324}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(sorted(planets[start_idx+1:end_idx], key=lambda x: planets.index(x)))\n    else:\n        return tuple(sorted(planets[end_idx+1:start_idx], key=lambda x: planets.index(x)))", "prompt_tokens": 261, "completion_tokens": 141, "duration": 5.014945030212402}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 2.9770419597625732}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 79, "duration": 3.811944007873535}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 40, "duration": 3.2023122310638428}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.884338617324829}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda ext: strength(ext))\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.210055351257324}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\")) # False\nprint(cycpattern_check(\"hello\", \"ell\")) # True\nprint(cycpattern_check(\"whassup\", \"psus\")) # False\nprint(cycpattern_check(\"abab\", \"baa\")) # True\nprint(cycpattern_check(\"efef\", \"eeff\")) # False\nprint(cycpattern_check(\"himenss\", \"simen\")) # True", "prompt_tokens": 179, "completion_tokens": 130, "duration": 4.079968452453613}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even, odd)", "prompt_tokens": 115, "completion_tokens": 67, "duration": 3.2516956329345703}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_dict = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_dict.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 148, "duration": 4.1780805587768555}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 158, "completion_tokens": 52, "duration": 3.042013645172119}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_word = ''\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 170, "completion_tokens": 91, "duration": 4.059854030609131}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    left_over = max(0, remaining - need)\n    return [total_eaten, left_over]", "prompt_tokens": 327, "completion_tokens": 47, "duration": 2.9876708984375}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    exp = str(operands[0])\n    for i in range(len(operators)):\n        exp += operators[i] + str(operands[i+1])\n    return eval(exp)", "prompt_tokens": 257, "completion_tokens": 50, "duration": 2.725374698638916}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5896873474121094}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.833148717880249}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    curr_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        curr_group += char\n        if count == 0:\n            result.append(curr_group.replace(\" \", \"\"))\n            curr_group = \"\"\n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))", "prompt_tokens": 165, "completion_tokens": 119, "duration": 3.4806272983551025}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 135, "completion_tokens": 21, "duration": 1.9856386184692383}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 2.3627920150756836}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.195892333984375}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "prompt_tokens": 142, "completion_tokens": 56, "duration": 2.492175340652466}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.1791415214538574}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 160, "completion_tokens": 72, "duration": 2.7071592807769775}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_nums = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_nums.append(max_num)\n    return max_nums", "prompt_tokens": 150, "completion_tokens": 59, "duration": 4.123181343078613}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if string == \"\":\n        return \"\"\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]", "prompt_tokens": 192, "completion_tokens": 76, "duration": 2.4843590259552}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 36, "duration": 2.1050825119018555}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.200965166091919}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.0808796882629395}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 1.9683821201324463}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 1.9418256282806396}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    music_list = music_string.split()\n    return [notes[note] for note in music_list]\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "prompt_tokens": 222, "completion_tokens": 137, "duration": 3.0193028450012207}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos == -1:\n            break\n        count += 1\n        start = pos + 1\n    return count", "prompt_tokens": 138, "completion_tokens": 76, "duration": 2.508570909500122}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    numberals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: numberals.index(x))\n    return ' '.join(numbers_list)", "prompt_tokens": 155, "completion_tokens": 76, "duration": 2.483705997467041}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 216, "completion_tokens": 103, "duration": 3.7147934436798096}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 2.367142915725708}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.7097232341766357}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 44, "duration": 1.9578120708465576}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 70, "duration": 2.4585721492767334}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 34, "duration": 2.0913898944854736}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 2.1152408123016357}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.8648200035095215}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.7999627590179443}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 2.098828077316284}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    assert len(xs) % 2 == 0, \"The number of coefficients should be even\"\n    assert xs[-1] != 0, \"The largest coefficient should not be zero\"\n    \n    return -xs[0] / xs[1]\n\n# Test cases\nprint(round(find_zero([1, 2]), 2)) # f(x) = 1 + 2x\nprint(round(find_zero([-6, 11, -6, 1]), 2)) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3", "prompt_tokens": 309, "completion_tokens": 151, "duration": 3.161419630050659}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted(sorted_values)):\n        result[i] = v\n    return result", "prompt_tokens": 200, "completion_tokens": 86, "duration": 2.9330031871795654}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.705723524093628}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.5717682838439941}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 57, "duration": 2.3540444374084473}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 43, "duration": 1.7694025039672852}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 4.051835298538208}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fibonacci(num):\n        if num <= 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, num + 1):\n                a, b = b, a + b\n            return a\n    \n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n    return fibonacci(i)", "prompt_tokens": 147, "completion_tokens": 181, "duration": 4.939252853393555}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    from itertools import combinations\n    return any(sum(comb) == 0 for comb in combinations(l, 3))", "prompt_tokens": 209, "completion_tokens": 37, "duration": 1.72096586227417}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 2.9659910202026367}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.5113253593444824}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 38, "duration": 3.187685966491699}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.9256319999694824}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 113, "duration": 4.234102964401245}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 3.4491262435913086}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 2.997666358947754}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 21, "duration": 3.8589107990264893}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 3.918612241744995}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.1372861862182617}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 2.767824172973633}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 2.8457045555114746}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 3.0808565616607666}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 102, "completion_tokens": 33, "duration": 2.99941086769104}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 64, "duration": 4.424809455871582}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.2813382148742676}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 28, "duration": 2.9004628658294678}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 3.9746620655059814}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 2.993791341781616}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 67, "duration": 3.387009620666504}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 26, "duration": 2.739291191101074}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 199, "completion_tokens": 72, "duration": 3.422487258911133}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels or (s[i] == 'y' and i == len(s) - 1):\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"Hello\"))  # 2\nprint(vowels_count(\"qwerty\")) # 1", "prompt_tokens": 176, "completion_tokens": 143, "duration": 4.069087743759155}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 50, "duration": 3.106447219848633}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.7378759384155273}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 37, "duration": 3.018723964691162}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(i, node) for i, node in enumerate(arr) if node % 2 == 0]\n    if not even_nodes:\n        return []\n\n    min_even_value = min(even_nodes, key=lambda x: (x[1], x[0]))\n    return [min_even_value[1], min_even_value[0]]", "prompt_tokens": 362, "completion_tokens": 82, "duration": 3.7860734462738037}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num and num > 0:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 42, "duration": 2.827739715576172}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 3.909966468811035}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 4.412842750549316}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.908005475997925}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    def is_palindromic(subarr):\n        return subarr == subarr[::-1]\n\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            changes += 1\n    return changes\n\n# Test cases\nprint(smallest_change([1,2,3,5,4,7,9,6])) # 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2])) # 1\nprint(smallest_change([1, 2, 3, 2, 1])) # 0", "prompt_tokens": 207, "completion_tokens": 151, "duration": 4.329147815704346}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n    \n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 243, "completion_tokens": 76, "duration": 3.423161745071411}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3", "prompt_tokens": 129, "completion_tokens": 105, "duration": 3.6693997383117676}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "prompt_tokens": 160, "completion_tokens": 31, "duration": 2.6620311737060547}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 58, "duration": 2.750554084777832}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 189, "completion_tokens": 29, "duration": 2.128837823867798}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.984642744064331}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 222, "duration": 4.838080406188965}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 2.7506184577941895}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 94, "completion_tokens": 64, "duration": 2.682612180709839}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 2.0146548748016357}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.1991615295410156}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 180, "completion_tokens": 26, "duration": 2.27115535736084}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.589460849761963}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array[:]\n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 54, "duration": 2.4459216594696045}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += chr(((ord(char) - 97 + 2 * 2) % 26) + 97)\n        elif char.isupper():\n            result += chr(((ord(char) - 65 + 2 * 2) % 26) + 65)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 94, "duration": 3.1906301975250244}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_numbers = sorted(set(lst))\n    if len(unique_numbers) < 2:\n        return None\n    return unique_numbers[1]", "prompt_tokens": 174, "completion_tokens": 39, "duration": 2.4383327960968018}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split(\".\")\n    sentences += S.split(\"?\")\n    sentences += S.split(\"!\")\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 63, "duration": 3.0634751319885254}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 54, "duration": 2.5313191413879395}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = 'aeiouAEIOU'\n    for letter in message:\n        if letter.lower() in vowels:\n            encoded_message += chr((ord(letter) + 2 - ord('a')) % 26 + ord('A'))\n        else:\n            encoded_message += letter.swapcase()\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 78, "duration": 2.9546384811401367}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def largest_prime_sum_of_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    largest_prime = max(primes)\n    \n    return digit_sum(largest_prime)", "prompt_tokens": 336, "completion_tokens": 116, "duration": 3.231543779373169}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    upper_flag = False\n    lower_flag = False\n    for key in dictionary.keys():\n        if isinstance(key, str):\n            if key.islower():\n                lower_flag = True\n            elif key.isupper():\n                upper_flag = True\n            else:\n                return False\n        else:\n            return False\n    return upper_flag != lower_flag", "prompt_tokens": 219, "completion_tokens": 91, "duration": 2.8661487102508545}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]", "prompt_tokens": 195, "completion_tokens": 82, "duration": 2.829066753387451}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 29, "duration": 2.135709762573242}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.9090840816497803}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.168896436691284}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        stones.append(n)\n    return stones", "prompt_tokens": 182, "completion_tokens": 61, "duration": 2.467759370803833}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.9702515602111816}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] or [-1])", "prompt_tokens": 144, "completion_tokens": 35, "duration": 2.0662758350372314}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 48, "duration": 2.3700687885284424}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 2.0870916843414307}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [names[x-1] for x in reversed_arr]\n    return result", "prompt_tokens": 326, "completion_tokens": 94, "duration": 3.155932903289795}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            res.append(fact)\n        else:\n            res.append(sum(range(1, i+1)))\n    return res", "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.6759324073791504}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 105, "duration": 3.1139564514160156}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 46, "duration": 3.5888402462005615}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for _ in range(len(arr)):\n        arr.insert(0, arr.pop())\n        if arr == sorted_arr:\n            return True\n    return False", "prompt_tokens": 349, "completion_tokens": 58, "duration": 2.325324296951294}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 36, "duration": 2.0306668281555176}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    letters = test.split()\n    hist = {}\n    max_count = 0\n    for letter in letters:\n        hist[letter] = hist.get(letter, 0) + 1\n        max_count = max(max_count, hist[letter])\n    \n    return {key: value for key, value in hist.items() if value == max_count}", "prompt_tokens": 201, "completion_tokens": 81, "duration": 2.7618002891540527}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    s = ''.join(char for char in s if char not in c)\n    return s, s == s[::-1]", "prompt_tokens": 212, "completion_tokens": 37, "duration": 1.8545160293579102}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len([digit for digit in s if int(digit) % 2 != 0]), i, i, i) for i, s in enumerate(lst, start=1)]", "prompt_tokens": 223, "completion_tokens": 68, "duration": 4.03447699546814}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return None\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 69, "duration": 2.2436485290527344}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(map(sum, grid))\n    return math.ceil(total_water / capacity)", "prompt_tokens": 373, "completion_tokens": 34, "duration": 3.5744309425354004}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.6731245517730713}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    result = [word for word in words if sum(1 for letter in word if letter in consonants) == n]\n    return result", "prompt_tokens": 231, "completion_tokens": 80, "duration": 2.592700958251953}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 98, "duration": 4.458827257156372}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    open_count = lst[0].count('(')\n    close_count = lst[1].count(')')\n    \n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 218, "completion_tokens": 55, "duration": 2.0937163829803467}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 3.1705775260925293}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x < 100)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 3.451137065887451}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    def collatz_sequence(n):\n        sequence = [n]\n        while n > 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n    \n    return sorted([num for num in collatz_sequence(n) if num % 2 != 0])", "prompt_tokens": 281, "completion_tokens": 94, "duration": 4.404038906097412}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month, day, year = parts\n\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return day >= 1 and day <= 31\n    elif month in [4, 6, 9, 11]:\n        return day >= 1 and day <= 30\n    elif month == 2:\n        if year % 4 == 0:\n            return day >= 1 and day <= 29\n        else:\n            return day >= 1 and day <= 28\n    else:\n        return False\n\n    return False", "prompt_tokens": 313, "completion_tokens": 212, "duration": 5.834261655807495}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 5.258156061172485}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 44, "duration": 4.993686676025391}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n    \n    length = end - start\n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 304, "completion_tokens": 112, "duration": 4.212874889373779}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num // abs(num) if num != 0 else 0\n    return sum(abs(num) for num in arr) * product", "prompt_tokens": 172, "completion_tokens": 62, "duration": 3.938680648803711}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    seq = [0, 1, 3]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            seq.append(1 + i // 2)\n        else:\n            seq.append(seq[i-1] + seq[i-2] + seq[i-3])\n    return seq", "prompt_tokens": 285, "completion_tokens": 80, "duration": 4.001438856124878}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "def sum_squares(lst):\n    return sum([(int(x) + (1 if x - int(x) > 0 else 0))**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 40, "duration": 3.2815465927124023}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' ')", "prompt_tokens": 187, "completion_tokens": 52, "duration": 3.393617868423462}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i-1\n    return index", "prompt_tokens": 153, "completion_tokens": 49, "duration": 4.863962650299072}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    if negative_integers:\n        largest_negative = max(negative_integers)\n    else:\n        largest_negative = None\n\n    if positive_integers:\n        smallest_positive = min(positive_integers)\n    else:\n        smallest_positive = None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 106, "duration": 4.771920204162598}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 127, "completion_tokens": 27, "duration": 3.015138626098633}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    result = 1\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 145, "completion_tokens": 43, "duration": 3.2704203128814697}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 40, "duration": 3.184149980545044}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "import re\n\ndef file_name_check(file_name):\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 101, "duration": 4.111640453338623}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 219, "completion_tokens": 85, "duration": 3.5948262214660645}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    sentence = sentence.split()\n    result = ' '.join(word for word in sentence if is_prime(len(word)))\n    return result", "prompt_tokens": 197, "completion_tokens": 88, "duration": 3.993305206298828}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_den * n_den)\n    \n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 62, "duration": 3.3535547256469727}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 3.0040013790130615}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 169, "completion_tokens": 81, "duration": 5.317788124084473}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 123, "duration": 4.105527877807617}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    start_index = min(index1, index2) + 1\n    end_index = max(index1, index2)\n    \n    return tuple(sorted(planets[start_index:end_index], key=lambda x: planets.index(x)))", "prompt_tokens": 261, "completion_tokens": 133, "duration": 4.416871786117554}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 3.0901098251342773}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 136, "completion_tokens": 79, "duration": 3.8038713932037354}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if x % 2 != 0 and x > 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 40, "duration": 2.857042074203491}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 39, "duration": 4.391193151473999}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n    \n    strongest = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 70, "duration": 3.218766212463379}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\")) # False\nprint(cycpattern_check(\"hello\", \"ell\")) # True\nprint(cycpattern_check(\"whassup\", \"psus\")) # False\nprint(cycpattern_check(\"abab\", \"baa\")) # True\nprint(cycpattern_check(\"efef\", \"eeff\")) # False\nprint(cycpattern_check(\"himenss\", \"simen\")) # True", "prompt_tokens": 179, "completion_tokens": 130, "duration": 4.079968452453613}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 77, "duration": 3.656508684158325}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_nums = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_nums.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 140, "duration": 2.7711024284362793}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 48, "duration": 1.2377557754516602}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 170, "completion_tokens": 91, "duration": 1.7207746505737305}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 327, "completion_tokens": 51, "duration": 1.1519811153411865}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 48, "duration": 1.2406463623046875}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    return result", "prompt_tokens": 157, "completion_tokens": 62, "duration": 1.7932848930358887}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 1.0061726570129395}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 66, "duration": 2.6063008308410645}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            if count == 1:\n                group = \"\"\n        group += char\n        if char == ')':\n            count -= 1\n            if count == 0:\n                result.append(group)\n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))", "prompt_tokens": 165, "completion_tokens": 115, "duration": 4.904185056686401}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.13432240486145}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 4.0658278465271}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.635263442993164}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 142, "completion_tokens": 62, "duration": 2.6180431842803955}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    return [find_max_nesting(paren_group) for paren_group in paren_string.split()]\n\nparse_nested_parens('(()()) ((())) () ((())()())')", "prompt_tokens": 162, "completion_tokens": 138, "duration": 3.4247822761535645}
{"task_id": "HumanEval/7", "is_solved": false, "solved_count": 0, "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.1384620666503906}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_total = sum(numbers)\n    product_total = 1\n    for num in numbers:\n        product_total *= num\n    return (sum_total, product_total)", "prompt_tokens": 160, "completion_tokens": 73, "duration": 2.6273326873779297}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_list.append(max_num)\n    return max_list", "prompt_tokens": 150, "completion_tokens": 62, "duration": 2.4928503036499023}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]", "prompt_tokens": 192, "completion_tokens": 76, "duration": 3.3221757411956787}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return \"\".join([str(int(i) ^ int(j)) for i, j in zip(a, b)])", "prompt_tokens": 126, "completion_tokens": 37, "duration": 2.2105839252471924}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 0, "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 152, "completion_tokens": 41, "duration": 2.276129722595215}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.326540470123291}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 2.1468472480773926}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.0073132514953613}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_duration = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    notes = music_string.split()\n    return [note_duration[note] for note in notes]\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))", "prompt_tokens": 222, "completion_tokens": 100, "duration": 3.3278884887695312}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 74, "duration": 2.9661526679992676}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 155, "completion_tokens": 103, "duration": 3.2411394119262695}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    res = None\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            res = (numbers[i-1], numbers[i])\n    return res\n\n# Test cases\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # (2.0, 2.0)", "prompt_tokens": 216, "completion_tokens": 195, "duration": 5.214127063751221}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 3.8288745880126953}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.822077751159668}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.4771811962127686}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\ndef factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while d*d <= n:\n        if n % d == 0:\n            factors.append(d)\n            n //= d\n        else:\n            d += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 81, "duration": 4.086660385131836}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 2.122736692428589}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.1340184211730957}
{"task_id": "HumanEval/28", "is_solved": false, "solved_count": 0, "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.8879389762878418}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 35, "duration": 2.0588040351867676}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.894559621810913}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "prompt_tokens": 149, "completion_tokens": 102, "duration": 2.8995697498321533}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 0, "generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "prompt_tokens": 309, "completion_tokens": 23, "duration": 1.8695454597473145}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 1, "generated_code": "def sort_third(l: list):\n    for i in range(0, len(l), 3):\n        l[i:i+3] = sorted(l[i:i+3])\n    return l", "prompt_tokens": 200, "completion_tokens": 44, "duration": 5.082174777984619}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.812459945678711}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.7433135509490967}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 57, "duration": 2.3540444374084473}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else val for i, val in enumerate(l)]", "prompt_tokens": 173, "completion_tokens": 42, "duration": 2.2103874683380127}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 3.7247366905212402}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 3, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while n > 0:\n        i += 1\n        if is_prime(fibonacci(i)):\n            n -= 1\n    return fibonacci(i)", "prompt_tokens": 147, "completion_tokens": 174, "duration": 5.350690126419067}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 70, "duration": 5.2470879554748535}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 201, "completion_tokens": 16, "duration": 3.132497787475586}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 3.45405912399292}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "prompt_tokens": 207, "completion_tokens": 28, "duration": 2.069643974304199}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 45, "duration": 3.691335678100586}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 4.351720094680786}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 113, "duration": 4.234102964401245}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]", "prompt_tokens": 125, "completion_tokens": 64, "duration": 4.8998260498046875}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 3.5294532775878906}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 3.0677762031555176}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 1.7496938705444336}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiouAEIOU'])", "prompt_tokens": 172, "completion_tokens": 34, "duration": 3.4495060443878174}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.345207691192627}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 3.0242691040039062}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 2.8674793243408203}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.3529574871063232}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    opening = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening += 1\n        elif bracket == \">\":\n            opening -= 1\n        if opening < 0:\n            return False\n    return opening == 0", "prompt_tokens": 142, "completion_tokens": 68, "duration": 3.7121262550354004}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.477552652359009}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 3.0876855850219727}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 3.4639158248901367}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 4.123863458633423}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 69, "duration": 2.279885768890381}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs):\n    return [xs[i]*i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 25, "duration": 2.765313148498535}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 102, "duration": 5.168015718460083}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    return sum(1 for char in s if char.lower() in vowels)", "prompt_tokens": 176, "completion_tokens": 79, "duration": 3.7461788654327393}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 53, "duration": 3.484450578689575}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.921161413192749}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = [int(x) for x in s.split() if x.isdigit()]\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 38, "duration": 2.9809682369232178}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n\n    min_even_value = min(even_values)\n    min_even_value_index = arr.index(min_even_value)\n    return [min_even_value, min_even_value_index]", "prompt_tokens": 362, "completion_tokens": 71, "duration": 4.556764602661133}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 37, "duration": 3.1895554065704346}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while len(lst) > 0:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 0:\n            sorted_lst.append(lst.pop())\n    return sorted_lst", "prompt_tokens": 174, "completion_tokens": 58, "duration": 3.4370334148406982}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 2, "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 3.680319309234619}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.7176320552825928}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 207, "completion_tokens": 55, "duration": 3.1786270141601562}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 4, "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 3.0323095321655273}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n            if count == 3:\n                return True\n    return False", "prompt_tokens": 129, "completion_tokens": 109, "duration": 5.106977224349976}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (n != 1 and x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 192, "completion_tokens": 52, "duration": 4.641237735748291}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 160, "completion_tokens": 33, "duration": 2.8345048427581787}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 349, "completion_tokens": 53, "duration": 3.107821464538574}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 189, "completion_tokens": 29, "duration": 2.8554420471191406}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 80, "duration": 3.2314200401306152}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n    return result", "prompt_tokens": 320, "completion_tokens": 226, "duration": 4.988205671310425}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.5160369873046875}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    count = 0\n    if n == 1:\n        return 2\n    count += 2 * 9 * (10**(n-2))\n    return count", "prompt_tokens": 94, "completion_tokens": 48, "duration": 2.9783999919891357}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 183, "completion_tokens": 25, "duration": 3.8188259601593018}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.7971463203430176}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "prompt_tokens": 180, "completion_tokens": 26, "duration": 2.055957794189453}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 70, "duration": 2.8156564235687256}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = array[:]\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 56, "duration": 2.551884889602661}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    return ''.join([chr((ord(c) - ord('a') + 2*2) % 26 + ord('a')) if c.islower() else c for c in s])", "prompt_tokens": 160, "completion_tokens": 49, "duration": 2.307790994644165}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 52, "duration": 2.3499152660369873}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences += S.split('!')\n    sentences += S.split('?')\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))", "prompt_tokens": 157, "completion_tokens": 47, "duration": 2.4350473880767822}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return all(isinstance(num, int) for num in (x, y, z)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 51, "duration": 2.3810179233551025}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                if char.islower():\n                    encoded_message += char.upper()\n                else:\n                    encoded_message += char.lower()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 108, "duration": 2.0584518909454346}
{"task_id": "HumanEval/94", "is_solved": false, "solved_count": 0, "generated_code": "def sum_of_digits_of_largest_prime(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum([int(d) for d in str(n)])\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 128, "duration": 4.728965997695923}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 60, "duration": 2.420733690261841}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 2.7404284477233887}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "prompt_tokens": 148, "completion_tokens": 29, "duration": 2.135709762573242}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 2.5747463703155518}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.1321446895599365}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile", "prompt_tokens": 182, "completion_tokens": 61, "duration": 2.2920451164245605}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 3.5697991847991943}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 144, "completion_tokens": 45, "duration": 2.058150291442871}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.241297721862793}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 1.984708309173584}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    return [digits[num] for num in reversed_arr]", "prompt_tokens": 326, "completion_tokens": 115, "duration": 3.102436065673828}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 88, "duration": 2.7417428493499756}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count", "prompt_tokens": 261, "completion_tokens": 98, "duration": 2.7613565921783447}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(d) for d in str(abs(num))) > 0)", "prompt_tokens": 174, "completion_tokens": 34, "duration": 2.0265607833862305}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    return sorted_arr == arr or sorted_arr == arr[-1:] + arr[:-1] or sorted_arr == arr[-2:] + arr[:-2]\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False", "prompt_tokens": 349, "completion_tokens": 108, "duration": 5.334486961364746}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 36, "duration": 1.900071382522583}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    max_count = 0\n\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n        max_count = max(max_count, letter_count[letter])\n\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 96, "duration": 3.688969135284424}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 2, "generated_code": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    return result, result == result[::-1]", "prompt_tokens": 212, "completion_tokens": 37, "duration": 1.9593040943145752}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        sum(int(c) % 2 != 0 for c in s), s.index(c) + 1, s.index(c) + 1, s.index(c) + 1) for s in lst for c in s]", "prompt_tokens": 223, "completion_tokens": 81, "duration": 2.5357115268707275}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 2.4808480739593506}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return (total_water + capacity - 1) // capacity", "prompt_tokens": 373, "completion_tokens": 38, "duration": 3.548647880554199}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.7792084217071533}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n\n    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for letter in word if letter.isalpha() and letter not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result", "prompt_tokens": 231, "completion_tokens": 87, "duration": 2.55491304397583}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i+1] in consonants and word[i-1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 98, "duration": 2.7190535068511963}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 1, "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        count += 1 if s == '(' else -1\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 53, "duration": 2.0899221897125244}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.668445110321045}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.620530843734741}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum([x for x in arr[:k] if 10 <= x <= 99])", "prompt_tokens": 178, "completion_tokens": 32, "duration": 3.158369302749634}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([num for num in collatz if num % 2 != 0])", "prompt_tokens": 281, "completion_tokens": 82, "duration": 2.210515022277832}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "prompt_tokens": 313, "completion_tokens": 149, "duration": 2.798180103302002}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # \u279e 3", "prompt_tokens": 190, "completion_tokens": 116, "duration": 4.799492835998535}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    sorted_lst = sorted(lst)\n    return sorted_lst == lst and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 36, "duration": 3.436354637145996}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n    \n    length = end - start\n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 304, "completion_tokens": 112, "duration": 4.212874889373779}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n    return product * sum(abs(num) for num in arr)", "prompt_tokens": 172, "completion_tokens": 66, "duration": 2.078993082046509}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_value = min(min(row) for row in grid)\n    start_pos = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_value][0]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < N\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj):\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(start_pos[0], start_pos[1], [start_value])", "prompt_tokens": 446, "completion_tokens": 233, "duration": 7.362312078475952}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    result = [3]\n    if n == 0:\n        return []\n    elif n == 1:\n        return result\n    else:\n        for i in range(1, n):\n            if i % 2 == 0:\n                result.append(1 + i // 2)\n            else:\n                result.append(result[i - 1] + result[i - 2] + result[i - 3])\n        return result", "prompt_tokens": 285, "completion_tokens": 99, "duration": 5.343504190444946}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    else:\n        product = 1\n        for digit in odd_digits:\n            product *= digit\n        return product", "prompt_tokens": 121, "completion_tokens": 69, "duration": 3.8286852836608887}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 5, "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                nested = True\n    \n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 111, "duration": 4.075947046279907}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 3.0680184364318848}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) > 1 and txt[-2].isalpha():\n        return False\n    return True", "prompt_tokens": 187, "completion_tokens": 67, "duration": 4.474294662475586}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 153, "completion_tokens": 53, "duration": 3.2878458499908447}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 188, "completion_tokens": 90, "duration": 3.890843629837036}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    return a if type(a) == float else b", "prompt_tokens": 191, "completion_tokens": 52, "duration": 3.0268993377685547}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    count = 0\n    for i in range(2, n+1, 2):\n        if n - i >= 0:\n            count += 1\n    return count == 4", "prompt_tokens": 127, "completion_tokens": 55, "duration": 3.5375847816467285}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            temp = 1\n            for j in range(1, i+1):\n                temp *= j\n            result *= temp\n        return result", "prompt_tokens": 145, "completion_tokens": 70, "duration": 3.9703047275543213}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 36, "duration": 3.331773519515991}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 3, "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(1 for c in name if c.isdigit()) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 99, "duration": 4.292522668838501}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 3.1983070373535156}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 95, "duration": 3.8871896266937256}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 2, "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_denom * n_denom)\n    \n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 66, "duration": 3.313920259475708}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 4.474608898162842}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def is_odd_digit(n):\n        n_str = str(abs(n))\n        return int(n_str[0]) % 2 != 0 and int(n_str[-1]) % 2 != 0\n    \n    count = 0\n    for num in nums:\n        if num > 10 and is_odd_digit(num):\n            count += 1\n    \n    return count", "prompt_tokens": 169, "completion_tokens": 86, "duration": 3.7950246334075928}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 123, "duration": 5.7769691944122314}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    \n    return tuple([p for p in planets[start_index+1:end_index]])", "prompt_tokens": 261, "completion_tokens": 125, "duration": 5.372603893280029}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 3.157214641571045}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 78, "duration": 3.453221559524536}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 2.8807239532470703}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.7771897315979004}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 67, "duration": 3.5131309032440186}
{"task_id": "HumanEval/154", "is_solved": false, "solved_count": 4, "generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "prompt_tokens": 179, "completion_tokens": 136, "duration": 5.55906081199646}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 71, "duration": 3.134073257446289}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()\n\n# Test cases\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'", "prompt_tokens": 151, "completion_tokens": 197, "duration": 6.572391986846924}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)", "prompt_tokens": 158, "completion_tokens": 57, "duration": 3.161298990249634}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    \n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 170, "completion_tokens": 92, "duration": 3.3375308513641357}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 327, "completion_tokens": 47, "duration": 2.9945456981658936}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    expr = str(operands[0])\n    for i in range(len(operators)):\n        expr += operators[i] + str(operands[i+1])\n    return eval(expr)", "prompt_tokens": 257, "completion_tokens": 50, "duration": 2.92203426361084}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 2, "generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.6143977642059326}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.711808204650879}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
