{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 634, "completion_tokens": 269, "duration": 11.774219274520874}
{"task_id": "HumanEval/1", "is_solved": false, "solved_count": 0, "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = paren_string.replace(\" \", \"\").split(')(')\n    groups[0] = groups[0].lstrip('(')\n    groups[-1] = groups[-1].rstrip(')')\n    return [f'({group})' for group in groups]", "prompt_tokens": 609, "completion_tokens": 267, "duration": 12.249420642852783}
{"task_id": "HumanEval/2", "is_solved": true, "solved_count": 3, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 547, "completion_tokens": 211, "duration": 11.052934646606445}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 558, "completion_tokens": 186, "duration": 4.686077117919922}
{"task_id": "HumanEval/4", "is_solved": false, "solved_count": 3, "generated_code": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0\n\n    mean_val = mean(numbers)\n    return sum(abs(x - mean_val) for x in numbers) / len(numbers)", "prompt_tokens": 634, "completion_tokens": 273, "duration": 11.8067307472229}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 539, "completion_tokens": 237, "duration": 11.846513748168945}
{"task_id": "HumanEval/6", "is_solved": false, "solved_count": 1, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    depth = 0\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depths.append(depth)\n            depth -= 1\n    return depths", "prompt_tokens": 1014, "completion_tokens": 477, "duration": 16.332491874694824}
{"task_id": "HumanEval/7", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 592, "completion_tokens": 262, "duration": 12.291428089141846}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n        \n    return (total_sum, total_product)", "prompt_tokens": 582, "completion_tokens": 254, "duration": 11.744619369506836}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(numbers[i], result[-1]))\n\n    return result", "prompt_tokens": 619, "completion_tokens": 302, "duration": 11.521242141723633}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 3, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"", "prompt_tokens": 562, "completion_tokens": 197, "duration": 11.977710723876953}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char1, char2 in zip(a, b):\n        result += str(int(char1) ^ int(char2))\n    return result", "prompt_tokens": 535, "completion_tokens": 253, "duration": 11.37730884552002}
{"task_id": "HumanEval/12", "is_solved": false, "solved_count": 2, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "prompt_tokens": 779, "completion_tokens": 246, "duration": 14.231461763381958}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 428, "completion_tokens": 141, "duration": 11.139739274978638}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 391, "completion_tokens": 132, "duration": 3.3575453758239746}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 427, "completion_tokens": 135, "duration": 10.866865396499634}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 447, "completion_tokens": 141, "duration": 10.694638967514038}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes_duration = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    notes = music_string.split()\n    return [notes_duration[note] for note in notes]\n\n# Test case for a simple string with one of each note type\nassert parse_music('o o| .|') == [4, 2, 1]\n\n# Test case for a string with multiple notes of the same type\nassert parse_music('o o o o') == [4, 4, 4, 4]\n\n# Test case for a string with different note types in random order\nassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n# Test case for an empty string\nassert parse_music('') == []", "prompt_tokens": 687, "completion_tokens": 390, "duration": 15.242207527160645}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start <= len(string) - len(substring):\n        if string[start:start + len(substring)] == substring:\n            count += 1\n            start += 1\n        else:\n            start += 1\n    return count", "prompt_tokens": 447, "completion_tokens": 168, "duration": 11.963083267211914}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    return ' '.join(sorted(numbers.split(), key=lambda x: words.index(x)))\n\n# Test when numbers are in random order\nassert sort_numbers('three one five') == 'one three five'\n\n# Test when numbers are already sorted\nassert sort_numbers('four six seven') == 'four six seven'\n\n# Test when numbers are in reverse order\nassert sort_numbers('nine two zero') == 'zero two nine'\n\n# Test when numbers have duplicates\nassert sort_numbers('two three two three one') == 'one two two three three'\n\n# Test when only one number is given\nassert sort_numbers('seven') == 'seven'", "prompt_tokens": 508, "completion_tokens": 297, "duration": 14.598826885223389}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 818, "completion_tokens": 405, "duration": 11.793490886688232}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 859, "completion_tokens": 487, "duration": 11.68453860282898}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 521, "completion_tokens": 190, "duration": 11.589872121810913}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 324, "completion_tokens": 74, "duration": 3.6314401626586914}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 4, "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 373, "completion_tokens": 128, "duration": 10.89175295829773}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 640, "completion_tokens": 276, "duration": 11.629959106445312}
{"task_id": "HumanEval/26", "is_solved": false, "solved_count": 0, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 622, "completion_tokens": 301, "duration": 10.993448972702026}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 4, "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 412, "completion_tokens": 153, "duration": 10.665039539337158}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 379, "completion_tokens": 108, "duration": 10.600832462310791}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 554, "completion_tokens": 236, "duration": 11.037668704986572}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 608, "completion_tokens": 224, "duration": 10.629098176956177}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 7, "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 504, "completion_tokens": 179, "duration": 11.21122670173645}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 2, "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"", "prompt_tokens": 918, "completion_tokens": 374, "duration": 12.476531028747559}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    sorted_divisible_by_three = sorted([x for i, x in enumerate(l) if i % 3 == 0])\n    return [sorted_divisible_by_three.pop(0) if i % 3 == 0 else x for i, x in enumerate(l)]", "prompt_tokens": 792, "completion_tokens": 373, "duration": 8.127236366271973}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 1, "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 534, "completion_tokens": 223, "duration": 14.383732080459595}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 517, "completion_tokens": 186, "duration": 10.522832155227661}
{"task_id": "HumanEval/36", "is_solved": false, "solved_count": 1, "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 501, "completion_tokens": 223, "duration": 11.224594116210938}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = [l[i] if i % 2 != 0 else even_indices.pop(0) for i in range(len(l))]\n    return result", "prompt_tokens": 655, "completion_tokens": 295, "duration": 15.366508483886719}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 1, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    pass", "prompt_tokens": 636, "completion_tokens": 230, "duration": 13.285618305206299}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 5, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i - 1)", "prompt_tokens": 527, "completion_tokens": 305, "duration": 14.400599956512451}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 667, "completion_tokens": 235, "duration": 11.531928300857544}
{"task_id": "HumanEval/41", "is_solved": false, "solved_count": 1, "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 737, "completion_tokens": 277, "duration": 16.503450393676758}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 548, "completion_tokens": 172, "duration": 13.741697072982788}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 657, "completion_tokens": 200, "duration": 7.21602725982666}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 3, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x < 0:\n        return '-' + change_base(-x, base) if x else '0'\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "prompt_tokens": 560, "completion_tokens": 267, "duration": 13.45807957649231}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 364, "completion_tokens": 106, "duration": 12.840798616409302}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return d", "prompt_tokens": 721, "completion_tokens": 317, "duration": 14.868853569030762}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 566, "completion_tokens": 291, "duration": 14.301120519638062}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 408, "completion_tokens": 102, "duration": 2.600634813308716}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 529, "completion_tokens": 161, "duration": 12.42659854888916}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 3, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 507, "completion_tokens": 226, "duration": 6.452146291732788}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiou')", "prompt_tokens": 585, "completion_tokens": 186, "duration": 14.049330234527588}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)", "prompt_tokens": 493, "completion_tokens": 178, "duration": 12.730628252029419}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 352, "completion_tokens": 84, "duration": 12.325543642044067}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 3, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 581, "completion_tokens": 146, "duration": 3.836137533187866}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 421, "completion_tokens": 210, "duration": 14.105775833129883}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 566, "completion_tokens": 261, "duration": 13.902205228805542}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 762, "completion_tokens": 270, "duration": 15.215100288391113}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 688, "completion_tokens": 307, "duration": 14.48212218284607}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test when n is a small composite number with multiple prime factors\nassert largest_prime_factor(24) == 3\n\n# Test when n is a large composite number with multiple prime factors\nassert largest_prime_factor(13195) == 29\n\n# Test when n is a power of 2\nassert largest_prime_factor(2048) == 2", "prompt_tokens": 389, "completion_tokens": 202, "duration": 13.256848096847534}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 5, "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 548, "completion_tokens": 202, "duration": 12.693629741668701}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 552, "completion_tokens": 249, "duration": 13.679994106292725}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * coef for i, coef in enumerate(xs)][1:]\n\n# Remove the test cases", "prompt_tokens": 1653, "completion_tokens": 686, "duration": 16.845213651657104}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 626, "completion_tokens": 210, "duration": 13.035302639007568}
{"task_id": "HumanEval/64", "is_solved": false, "solved_count": 4, "generated_code": "def vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    count = sum(1 for char in s if char in vowels)\n    \n    if s[-1].lower() == 'y' and count > 0:\n        count -= 1\n    \n    return count", "prompt_tokens": 597, "completion_tokens": 223, "duration": 5.288708686828613}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 3, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 518, "completion_tokens": 222, "duration": 35.18232798576355}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 572, "completion_tokens": 189, "duration": 13.533428192138672}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 764, "completion_tokens": 204, "duration": 12.490345239639282}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    even_nodes = [(index, node) for index, node in enumerate(arr) if node % 2 == 0]\n    if not even_nodes:\n        return []\n    min_even_value = min(even_nodes, key=lambda x: (x[1], x[0]))\n    return [min_even_value[1], min_even_value[0]]", "prompt_tokens": 1005, "completion_tokens": 281, "duration": 14.713054180145264}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    max_val = -1\n    for num in set(lst):\n        if lst.count(num) >= num:\n            max_val = max(max_val, num)\n    return max_val", "prompt_tokens": 696, "completion_tokens": 230, "duration": 60.07291507720947}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 535, "completion_tokens": 153, "duration": 13.161238670349121}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 4, "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 609, "completion_tokens": 274, "duration": 14.701035976409912}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 892, "completion_tokens": 276, "duration": 14.385366439819336}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 721, "completion_tokens": 278, "duration": 14.261331558227539}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 5, "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 782, "completion_tokens": 256, "duration": 13.260379314422607}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3", "prompt_tokens": 484, "completion_tokens": 248, "duration": 13.899633407592773}
{"task_id": "HumanEval/76", "is_solved": false, "solved_count": 4, "generated_code": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))", "prompt_tokens": 619, "completion_tokens": 175, "duration": 12.191078901290894}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 5, "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 522, "completion_tokens": 152, "duration": 11.712217807769775}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    return sum(digit.upper() in primes for digit in num)", "prompt_tokens": 924, "completion_tokens": 187, "duration": 10.494379758834839}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 582, "completion_tokens": 144, "duration": 11.705787181854248}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 616, "completion_tokens": 266, "duration": 14.356305599212646}
{"task_id": "HumanEval/81", "is_solved": false, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 1044, "completion_tokens": 525, "duration": 18.731319189071655}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "import math\n\ndef prime_length(string):\n    return is_prime(len(string))\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False", "prompt_tokens": 699, "completion_tokens": 289, "duration": 16.03951668739319}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 0, "generated_code": "def starts_one_ends(n):\n    count = 0\n    count += 9 * 10**(n-1)  # Count of numbers starting with 1\n    count += 10**(n-1)  # Count of numbers ending with 1\n    return count", "prompt_tokens": 509, "completion_tokens": 300, "duration": 7.929660081863403}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 5, "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 564, "completion_tokens": 141, "duration": 4.79301643371582}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum([num for i, num in enumerate(lst) if i % 2 == 1 and num % 2 == 0])", "prompt_tokens": 458, "completion_tokens": 204, "duration": 12.755202293395996}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)", "prompt_tokens": 555, "completion_tokens": 160, "duration": 5.016139268875122}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, col in reversed(list(enumerate(row))):\n            if col == x:\n                coordinates.append((i, j))\n    return sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))", "prompt_tokens": 1433, "completion_tokens": 450, "duration": 9.712581396102905}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 3, "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    return sorted_array if (array[0] + array[-1]) % 2 != 0 else sorted_array[::-1]", "prompt_tokens": 875, "completion_tokens": 329, "duration": 8.311018466949463}
{"task_id": "HumanEval/89", "is_solved": false, "solved_count": 0, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * (ord('z' if char.islower() else 'Z') - ord(char))\n            result += chr((ord(char) - ord('a' if char.islower() else 'A') + shift) % 26 + ord('a' if char.islower() else 'A'))\n        else:\n            result += char\n    return result", "prompt_tokens": 550, "completion_tokens": 250, "duration": 7.317101955413818}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 577, "completion_tokens": 197, "duration": 6.205430269241333}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "prompt_tokens": 974, "completion_tokens": 417, "duration": 9.79033350944519}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 585, "completion_tokens": 186, "duration": 5.350889444351196}
{"task_id": "HumanEval/93", "is_solved": true, "solved_count": 2, "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'AEIOUaeiou'\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += chr(ord(char) + 2).upper()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 536, "completion_tokens": 216, "duration": 6.087467193603516}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 6, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    max_prime = max(filter(is_prime, lst))\n    return sum_of_digits(max_prime)", "prompt_tokens": 1066, "completion_tokens": 411, "duration": 8.836497783660889}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    keys = list(dict.keys())\n    if not keys:\n        return False\n    is_lower = all(isinstance(key, str) and key.islower() for key in keys)\n    is_upper = all(isinstance(key, str) and key.isupper() for key in keys)\n    return is_lower or is_upper", "prompt_tokens": 679, "completion_tokens": 231, "duration": 6.236694097518921}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "prompt_tokens": 639, "completion_tokens": 252, "duration": 7.473294973373413}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 486, "completion_tokens": 137, "duration": 4.314398527145386}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in 'AEIOU')", "prompt_tokens": 444, "completion_tokens": 155, "duration": 4.823110580444336}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)", "prompt_tokens": 732, "completion_tokens": 276, "duration": 7.131328582763672}
{"task_id": "HumanEval/100", "is_solved": true, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i + 1)\n    return stones", "prompt_tokens": 599, "completion_tokens": 215, "duration": 8.89757752418518}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split()]\n\n# Test with a string containing words separated by commas and spaces\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with a string containing words separated only by commas\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test with a string containing words separated only by spaces\nassert words_string(\"Testing the function with spaces only\") == [\"Testing\", \"the\", \"function\", \"with\", \"spaces\", \"only\"]\n\n# Test with a string containing words separated by commas and spaces combined\nassert words_string(\"A, B C, D E, F\") == [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n\n# Test with an empty string\nassert words_string(\"\") == []\n\n# Test with a string containing only one word\nassert words_string(\"Testing\") == [\"Testing\"]", "prompt_tokens": 628, "completion_tokens": 448, "duration": 8.89959192276001}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    largest_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            largest_even = max(largest_even, i)\n    return largest_even", "prompt_tokens": 537, "completion_tokens": 221, "duration": 6.096503734588623}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(round(avg))", "prompt_tokens": 586, "completion_tokens": 163, "duration": 4.4984495639801025}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 661, "completion_tokens": 311, "duration": 6.773874044418335}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    mapping = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    result = [mapping[x] for x in reversed_arr]\n    \n    return result", "prompt_tokens": 1007, "completion_tokens": 406, "duration": 12.289250135421753}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "prompt_tokens": 636, "completion_tokens": 291, "duration": 5.935885906219482}
{"task_id": "HumanEval/107", "is_solved": true, "solved_count": 3, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count", "prompt_tokens": 801, "completion_tokens": 292, "duration": 10.991064071655273}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 2, "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = sum(int(d) for d in str(abs(num)))\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 499, "completion_tokens": 122, "duration": 4.389240741729736}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 954, "completion_tokens": 239, "duration": 6.18035364151001}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    total_odd_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    total_odd_lst2 = sum(1 for num in lst2 if num % 2 != 0)\n    \n    return \"YES\" if total_odd_lst1 <= len(lst2) - total_odd_lst2 else \"NO\"", "prompt_tokens": 776, "completion_tokens": 283, "duration": 7.689272880554199}
{"task_id": "HumanEval/111", "is_solved": false, "solved_count": 4, "generated_code": "def histogram(test):\n    result = {}\n    for char in test.split():\n        result[char] = result.get(char, 0) + 1\n    max_count = max(result.values())\n    return {char: count for char, count in result.items() if count == max_count}", "prompt_tokens": 635, "completion_tokens": 213, "duration": 5.256816864013672}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 3, "generated_code": "def reverse_delete(s,c):\n    s = \"\".join([char for char in s if char not in c])\n    return s, s == s[::-1]", "prompt_tokens": 685, "completion_tokens": 215, "duration": 5.864284515380859}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 0, "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements in the str{i+1}ng {i+1} of the {i+1}nput.\" for i in range(len(lst))]", "prompt_tokens": 715, "completion_tokens": 235, "duration": 6.6743457317352295}
{"task_id": "HumanEval/114", "is_solved": false, "solved_count": 2, "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    curr_sum = 0\n    \n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    \n    return min_sum", "prompt_tokens": 538, "completion_tokens": 248, "duration": 5.479496240615845}
{"task_id": "HumanEval/115", "is_solved": true, "solved_count": 3, "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)\n\n# Test with grid where all wells are empty\nassert max_fill([[0,0,0], [0,0,0]], 5) == 0\n\n# Test with grid where all wells have water and bucket capacity is 1\nassert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n\n# Test with grid where wells have varying amount of water and bucket capacity is 2\nassert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5", "prompt_tokens": 984, "completion_tokens": 343, "duration": 6.756837606430054}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 795, "completion_tokens": 300, "duration": 6.5515618324279785}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    result = []\n    for word in words:\n        if sum(1 for letter in word if letter.lower() in consonants) == n:\n            result.append(word)\n    return result", "prompt_tokens": 723, "completion_tokens": 250, "duration": 6.257838487625122}
{"task_id": "HumanEval/118", "is_solved": true, "solved_count": 4, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word.strip()\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 689, "completion_tokens": 283, "duration": 6.717635154724121}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 2, "generated_code": "def match_parens(lst):\n    open_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n    return 'Yes'", "prompt_tokens": 659, "completion_tokens": 212, "duration": 5.5153162479400635}
{"task_id": "HumanEval/120", "is_solved": true, "solved_count": 3, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 798, "completion_tokens": 199, "duration": 51.07681679725647}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 549, "completion_tokens": 214, "duration": 5.252117156982422}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 1, "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "prompt_tokens": 700, "completion_tokens": 294, "duration": 7.573837518692017}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = n * 3 + 1 if n % 2 else n // 2\n    result.append(1)\n    return sorted(result)", "prompt_tokens": 960, "completion_tokens": 382, "duration": 12.160156965255737}
{"task_id": "HumanEval/124", "is_solved": false, "solved_count": 4, "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        return False\n\n    return True", "prompt_tokens": 846, "completion_tokens": 321, "duration": 7.082709550857544}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 628, "completion_tokens": 225, "duration": 9.195384502410889}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 7, "generated_code": "def is_sorted(lst):\n    prev = None\n    counts = {}\n    for num in lst:\n        if num in counts:\n            counts[num] += 1\n            if counts[num] > 1:\n                return False\n        else:\n            counts[num] = 1\n        if prev is not None and num < prev:\n            return False\n        prev = num\n    return True", "prompt_tokens": 867, "completion_tokens": 272, "duration": 7.289788484573364}
{"task_id": "HumanEval/127", "is_solved": false, "solved_count": 2, "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n\n    length = end - start + 1\n\n    if length <= 1:\n        return \"NO\"\n\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 881, "completion_tokens": 305, "duration": 6.659082651138306}
{"task_id": "HumanEval/128", "is_solved": false, "solved_count": 2, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    total = 0\n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n        total += abs(num)\n    \n    return product * total", "prompt_tokens": 570, "completion_tokens": 208, "duration": 7.97577428817749}
{"task_id": "HumanEval/129", "is_solved": false, "solved_count": 1, "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    flattened_grid = [cell for row in grid for cell in row]\n    start = flattened_grid.index(min(flattened_grid))\n    path = [start + 1]\n    current = start\n\n    while len(path) < k:\n        neighbors = []\n        row, col = current // n, current % n\n        if row > 0:\n            neighbors.append((row - 1) * n + col)\n        if row < n - 1:\n            neighbors.append((row + 1) * n + col)\n        if col > 0:\n            neighbors.append(row * n + col - 1)\n        if col < n - 1:\n            neighbors.append(row * n + col + 1)\n        \n        next_cell = min(neighbors, key=lambda x: (flattened_grid[x], x))\n        path.append(flattened_grid[next_cell])\n        current = next_cell\n    \n    return path", "prompt_tokens": 1215, "completion_tokens": 449, "duration": 8.477915287017822}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 1, "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    else:\n        tribonacci = [3, 1]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n            else:\n                tribonacci.append(1 + i // 2)\n        return tribonacci", "prompt_tokens": 803, "completion_tokens": 264, "duration": 8.973960876464844}
{"task_id": "HumanEval/131", "is_solved": false, "solved_count": 2, "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product", "prompt_tokens": 416, "completion_tokens": 146, "duration": 4.655027151107788}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 3, "generated_code": "def is_nested(string):\n    opened = 0\n    for char in string:\n        if char == '[':\n            opened += 1\n        elif char == ']' and opened > 0:\n            opened -= 1\n    return opened > 0", "prompt_tokens": 986, "completion_tokens": 370, "duration": 11.6392183303833}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 815, "completion_tokens": 343, "duration": 7.120937347412109}
{"task_id": "HumanEval/134", "is_solved": false, "solved_count": 2, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and txt.strip()[-2] == ' '", "prompt_tokens": 580, "completion_tokens": 153, "duration": 7.0472681522369385}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 1, "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 544, "completion_tokens": 207, "duration": 7.7877349853515625}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 696, "completion_tokens": 314, "duration": 7.3536717891693115}
{"task_id": "HumanEval/137", "is_solved": false, "solved_count": 3, "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if float(a) > float(b) else b\n    elif isinstance(a, str) and isinstance(b, str):\n        return a if float(a.replace(',', '.')) > float(b.replace(',', '.')) else b\n    else:\n        return None", "prompt_tokens": 611, "completion_tokens": 259, "duration": 10.36890983581543}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 4, "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8\n\n# Test when n is 4, which cannot be expressed as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(4) == False\n\n# Test when n is 6, which cannot be expressed as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(6) == False\n\n# Test when n is 8, which can be expressed as the sum of exactly 4 positive even numbers (2 + 2 + 2 + 2)\nassert is_equal_to_sum_even(8) == True\n\n# Test when n is 20, which can be expressed as the sum of exactly 4 positive even numbers (4 + 6 + 8 + 2)\nassert is_equal_to_sum_even(20) == True\n\n# Test when n is 15, which cannot be expressed as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(15) == False", "prompt_tokens": 541, "completion_tokens": 425, "duration": 8.67974042892456}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    result = 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 565, "completion_tokens": 240, "duration": 5.919658660888672}
{"task_id": "HumanEval/140", "is_solved": false, "solved_count": 3, "generated_code": "def fix_spaces(text):\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\" \", \"_\")\n    return text", "prompt_tokens": 544, "completion_tokens": 181, "duration": 4.466253757476807}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 5, "generated_code": "def file_name_check(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    \n    name, extension = file_name.split('.')\n    \n    if not name or not name[0].isalpha() or sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 763, "completion_tokens": 248, "duration": 7.203622102737427}
{"task_id": "HumanEval/142", "is_solved": false, "solved_count": 1, "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total", "prompt_tokens": 765, "completion_tokens": 310, "duration": 7.106944799423218}
{"task_id": "HumanEval/143", "is_solved": false, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sentence = sentence.split()\n    return ' '.join(word for word in sentence if is_prime(len(word)))", "prompt_tokens": 1383, "completion_tokens": 500, "duration": 14.46490216255188}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 3, "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 582, "completion_tokens": 148, "duration": 7.105598211288452}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), nums.index(x)))", "prompt_tokens": 593, "completion_tokens": 214, "duration": 6.049994945526123}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 3, "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count", "prompt_tokens": 653, "completion_tokens": 291, "duration": 7.633810520172119}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 4, "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 848, "completion_tokens": 432, "duration": 8.569397211074829}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(planet for planet in planets[start_idx+1:end_idx] if planet != planet1 and planet != planet2)", "prompt_tokens": 800, "completion_tokens": 332, "duration": 6.336095333099365}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 714, "completion_tokens": 186, "duration": 6.158652067184448}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 637, "completion_tokens": 366, "duration": 9.946396827697754}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 590, "completion_tokens": 166, "duration": 7.935367584228516}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game,guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 930, "completion_tokens": 327, "duration": 10.887322425842285}
{"task_id": "HumanEval/153", "is_solved": true, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_ext = max(extensions, key=lambda ext: ext.count(ext.upper()) - ext.count(ext.lower()))\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 934, "completion_tokens": 243, "duration": 5.519127130508423}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if a.find(b) != -1:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 640, "completion_tokens": 247, "duration": 8.01470398902893}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    even_count = len([int(x) for x in str(abs(num)) if int(x) % 2 == 0])\n    odd_count = len([int(x) for x in str(abs(num)) if int(x) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 447, "completion_tokens": 206, "duration": 8.052748203277588}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        return \"\"\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    \n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 549, "completion_tokens": 345, "duration": 10.341934204101562}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 5, "generated_code": "def right_angle_triangle(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 597, "completion_tokens": 267, "duration": 9.692158937454224}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 630, "completion_tokens": 298, "duration": 7.525111675262451}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 907, "completion_tokens": 222, "duration": 8.309662580490112}
{"task_id": "HumanEval/160", "is_solved": false, "solved_count": 0, "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 800, "completion_tokens": 319, "duration": 9.237396240234375}
{"task_id": "HumanEval/161", "is_solved": false, "solved_count": 1, "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]", "prompt_tokens": 519, "completion_tokens": 182, "duration": 7.5910398960113525}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 485, "completion_tokens": 181, "duration": 5.436149835586548}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 1, "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 640, "completion_tokens": 283, "duration": 9.196180820465088}
