{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 174, "completion_tokens": 90, "duration": 5.295835018157959}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')  # Remove spaces\n    stack = []\n    result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            current_group.append(char)\n            if not stack:  # If stack is empty, we have a complete group\n                result.append(''.join(current_group))\n                current_group = []\n    return result", "prompt_tokens": 165, "completion_tokens": 129, "duration": 7.692846298217773}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 2, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 1.993433952331543}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.333181142807007}
{"task_id": "HumanEval/4", "is_solved": false, "solved_count": 3, "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the Mean Absolute Deviation of a list of numbers.\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 66, "duration": 4.070525884628296}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.6825807094573975}
{"task_id": "HumanEval/6", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ' and max_depth > 0:\n            max_depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    if max_depth > 0:\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 162, "completion_tokens": 145, "duration": 9.098788022994995}
{"task_id": "HumanEval/7", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 90, "duration": 5.1929402351379395}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 126, "duration": 6.570099830627441}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for num in numbers[1:]:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "prompt_tokens": 150, "completion_tokens": 72, "duration": 4.378940105438232}
{"task_id": "HumanEval/10", "is_solved": false, "solved_count": 0, "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\"\"\"\n    if string == string[::-1]:\n        return string\n    for i in range(len(string), -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[i-1::-1]\n    return string", "prompt_tokens": 192, "completion_tokens": 83, "duration": 4.406987190246582}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 4, "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.187934160232544}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string", "prompt_tokens": 152, "completion_tokens": 69, "duration": 4.145085334777832}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 2, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.9660587310791016}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 73, "duration": 6.035512685775757}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 2, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.282755136489868}
{"task_id": "HumanEval/16", "is_solved": true, "solved_count": 2, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.5291693210601807}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 4, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 5.320944309234619}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 3, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.418935537338257}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 3, "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 105, "duration": 6.909937858581543}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 119, "duration": 8.34321928024292}
{"task_id": "HumanEval/21", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = max_num - min_num\n    return [(num - min_num) / scale for num in numbers]", "prompt_tokens": 173, "completion_tokens": 102, "duration": 6.64447808265686}
{"task_id": "HumanEval/22", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.7990810871124268}
{"task_id": "HumanEval/23", "is_solved": true, "solved_count": 2, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.1583094596862793}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 3, "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.974407434463501}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n >= divisor:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 68, "duration": 4.599925518035889}
{"task_id": "HumanEval/26", "is_solved": true, "solved_count": 3, "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    from collections import Counter\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "prompt_tokens": 134, "completion_tokens": 49, "duration": 3.6118409633636475}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 3, "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 3.0712239742279053}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 51, "duration": 5.1515398025512695}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 2, "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 60, "duration": 5.017934560775757}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 2, "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.770090103149414}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 6, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.9585626125335693}
{"task_id": "HumanEval/32", "is_solved": true, "solved_count": 4, "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    def func(x):\n        return poly(xs, x)\n    root = fsolve(func, 0.0)[0]\n    return root", "prompt_tokens": 309, "completion_tokens": 203, "duration": 13.567737817764282}
{"task_id": "HumanEval/33", "is_solved": true, "solved_count": 2, "generated_code": "def sort_third(l: list):\n    third_elements = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = third_elements.pop(0)\n    return l", "prompt_tokens": 200, "completion_tokens": 69, "duration": 4.164447784423828}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 4, "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 77, "duration": 4.111336708068848}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 2, "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 5.446595668792725}
{"task_id": "HumanEval/36", "is_solved": true, "solved_count": 3, "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 6.991114139556885}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 2, "generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.11123514175415}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 0, "generated_code": "def decode_cyclic(s: str):\n    # Split string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 113, "duration": 5.724423170089722}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 5, "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        a, b = 0, 1\n        while n > 0:\n            a, b = b, a + b\n            n -= 1\n        return a\n\n    count, i = 0, 0\n    while True:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1", "prompt_tokens": 147, "completion_tokens": 165, "duration": 8.965528726577759}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 5, "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        a = l[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False", "prompt_tokens": 209, "completion_tokens": 117, "duration": 5.831527948379517}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 4, "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since each car from the left will eventually collide with each car from the right,\n    and there are n cars in each direction, the total number of collisions is n * n.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 62, "duration": 5.289910554885864}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 2, "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.884809494018555}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 5, "generated_code": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 84, "duration": 4.676468133926392}
{"task_id": "HumanEval/44", "is_solved": true, "solved_count": 2, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = \"\"\n    while x:\n        digits = str(x % base) + digits\n        x //= base\n    return digits", "prompt_tokens": 141, "completion_tokens": 58, "duration": 5.110192537307739}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 4.445390701293945}
{"task_id": "HumanEval/46", "is_solved": true, "solved_count": 8, "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.233927249908447}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 1, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.1811723709106445}
{"task_id": "HumanEval/48", "is_solved": true, "solved_count": 4, "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 80, "duration": 10.538109540939331}
{"task_id": "HumanEval/49", "is_solved": true, "solved_count": 5, "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.1771905422210693}
{"task_id": "HumanEval/50", "is_solved": false, "solved_count": 0, "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 2.6368961334228516}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 6, "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 37, "duration": 3.8476321697235107}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 3, "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 45, "duration": 3.8832781314849854}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 2, "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 3.805079698562622}
{"task_id": "HumanEval/54", "is_solved": true, "solved_count": 6, "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 3.296004056930542}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 3, "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 6.109618902206421}
{"task_id": "HumanEval/56", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 4.121242523193359}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 3, "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 61, "duration": 5.147266626358032}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 2, "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 124, "duration": 7.3285417556762695}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 2, "generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    # n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n //= i\n    # If n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n    return max_prime", "prompt_tokens": 113, "completion_tokens": 173, "duration": 8.440156936645508}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 4, "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 29, "duration": 3.4741086959838867}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 4, "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 8.60630488395691}
{"task_id": "HumanEval/62", "is_solved": true, "solved_count": 2, "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.5890109539031982}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 3, "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 96, "duration": 4.265613317489624}
{"task_id": "HumanEval/64", "is_solved": true, "solved_count": 5, "generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = sum(1 for char in s if char in vowels)\n    if s and (s[-1] == 'y' or s[-1] == 'Y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Expected: 2\nprint(vowels_count(\"ACEDY\"))  # Expected: 3\nprint(vowels_count(\"rhythm\"))  # Expected: 1\nprint(vowels_count(\"SYZYGY\"))  # Expected: 1\nprint(vowels_count(\"\"))       # Expected: 0", "prompt_tokens": 176, "completion_tokens": 159, "duration": 11.317100286483765}
{"task_id": "HumanEval/65", "is_solved": true, "solved_count": 4, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903}
{"task_id": "HumanEval/66", "is_solved": true, "solved_count": 6, "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 3.229318380355835}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 4, "generated_code": "def fruit_distribution(s, n):\n    fruits = list(map(int, s.split() if s.isdigit() else [i for i in s.split() if i.isdigit()]))\n    return n - sum(fruits)", "prompt_tokens": 260, "completion_tokens": 47, "duration": 3.12941312789917}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 4, "generated_code": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    \"\"\"\n    min_even = None\n    min_index = None\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            if min_even is None or value < min_even:\n                min_even = value\n                min_index = i\n    if min_even is None:\n        return []\n    else:\n        return [min_even, min_index]", "prompt_tokens": 362, "completion_tokens": 122, "duration": 8.435452222824097}
{"task_id": "HumanEval/69", "is_solved": true, "solved_count": 3, "generated_code": "def search(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    result = [k for k, v in freq.items() if k <= v]\n    return max(result) if result else -1", "prompt_tokens": 215, "completion_tokens": 49, "duration": 3.5788252353668213}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 3, "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))  # append the minimum\n        if sorted_lst:\n            result.append(sorted_lst.pop())  # append the maximum\n    return result", "prompt_tokens": 174, "completion_tokens": 63, "duration": 4.1230628490448}
{"task_id": "HumanEval/71", "is_solved": true, "solved_count": 3, "generated_code": "def triangle_area(a, b, c):\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 97, "duration": 5.310258626937866}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 4, "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 3.46984601020813}
{"task_id": "HumanEval/73", "is_solved": true, "solved_count": 3, "generated_code": "def smallest_change(arr):\n    changes = 0\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 67, "duration": 5.351077556610107}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 5, "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has \n    total number of chars in all strings of the list less than the other list.\n    If the two lists have the same number of chars, return the first list.\n    '''\n    # Calculate total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare total number of characters and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 147, "duration": 10.335076570510864}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 4, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2:\n        return False\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            while a % i == 0:\n                a //= i\n    return prime_factors == 3", "prompt_tokens": 129, "completion_tokens": 136, "duration": 7.1021928787231445}
{"task_id": "HumanEval/76", "is_solved": true, "solved_count": 6, "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    current_power = 1\n    while current_power < x:\n        current_power *= n\n    return current_power == x", "prompt_tokens": 192, "completion_tokens": 53, "duration": 3.754070997238159}
{"task_id": "HumanEval/77", "is_solved": true, "solved_count": 6, "generated_code": "def iscube(a):\n    if a >= 0:\n        return int(round(a ** (1. / 3))) ** 3 == a\n    else:\n        return int(round(abs(a) ** (1. / 3))) ** 3 == abs(a)", "prompt_tokens": 160, "completion_tokens": 60, "duration": 4.0460052490234375}
{"task_id": "HumanEval/78", "is_solved": true, "solved_count": 5, "generated_code": "def hex_key(num):\n    prime_hex_digits = set('2357BD')\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 36, "duration": 2.9447739124298096}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 2, "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary}db\"", "prompt_tokens": 189, "completion_tokens": 42, "duration": 2.756471872329712}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 6, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 76, "duration": 4.934427499771118}
{"task_id": "HumanEval/81", "is_solved": true, "solved_count": 0, "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Convert numerical GPA to letter grades.\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 277, "duration": 14.128907918930054}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 4, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.7278828620910645}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 1, "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * (10 ** (n - 1)) - (10 ** (n - 2))", "prompt_tokens": 94, "completion_tokens": 81, "duration": 4.730870485305786}
{"task_id": "HumanEval/84", "is_solved": true, "solved_count": 6, "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 33, "duration": 2.624354839324951}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 2, "generated_code": "def add(lst):\n    return sum(val for i, val in enumerate(lst) if i % 2 == 1 and val % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 37, "duration": 3.4143435955047607}
{"task_id": "HumanEval/86", "is_solved": true, "solved_count": 3, "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 180, "completion_tokens": 40, "duration": 2.8029251098632812}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 3, "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Finds integers x in the 2D list and returns list of tuples with coordinates.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, len(row) - 1 - j))\n    result = [(i, len(lst[i]) - 1 - j) for i, j in result]\n    return sorted(result, key=lambda x: (x[0], -x[1]))", "prompt_tokens": 309, "completion_tokens": 118, "duration": 8.056462287902832}
{"task_id": "HumanEval/88", "is_solved": true, "solved_count": 4, "generated_code": "def sort_array(array):\n    if not array:  # Check if the array is empty\n        return []\n    # Check if the sum of the first and last element is even or odd\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)  # Sort in descending order\n    else:\n        return sorted(array)  # Sort in ascending order", "prompt_tokens": 253, "completion_tokens": 92, "duration": 5.641882419586182}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 4, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 102, "duration": 5.867446184158325}
{"task_id": "HumanEval/90", "is_solved": true, "solved_count": 4, "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 45, "duration": 5.18045449256897}
{"task_id": "HumanEval/91", "is_solved": true, "solved_count": 2, "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with \"I\" in a given string.\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    # Split the string into sentences\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    # Count sentences starting with \"I \"\n    count = sum(sentence.strip().startswith(\"I\") for sentence in sentences)\n    return count", "prompt_tokens": 157, "completion_tokens": 94, "duration": 4.528693914413452}
{"task_id": "HumanEval/92", "is_solved": true, "solved_count": 4, "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 56, "duration": 4.583195686340332}
{"task_id": "HumanEval/93", "is_solved": false, "solved_count": 0, "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case and replacing vowels with the letter 2 places ahead in the alphabet.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    vowel_replacements = {'a': 'c', 'A': 'C', 'e': 'g', 'E': 'G', 'i': 'k', 'I': 'K', 'o': 'q', 'O': 'Q', 'u': 'w', 'U': 'W'}\n    \n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += vowel_replacements[char]\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 151, "duration": 8.993353366851807}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 6, "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sum([int(digit) for digit in str(largest_prime)])", "prompt_tokens": 336, "completion_tokens": 112, "duration": 5.940928936004639}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 5, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 69, "duration": 4.550169944763184}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 6, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 4.892605543136597}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 4, "generated_code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 49, "duration": 3.646854877471924}
{"task_id": "HumanEval/98", "is_solved": true, "solved_count": 3, "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)", "prompt_tokens": 122, "completion_tokens": 63, "duration": 5.258897066116333}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 4, "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        if num - int(num) < 0.5:\n            return int(num)\n        else:\n            return int(num) + 1\n    else:\n        if num - int(num) <= -0.5:\n            return int(num) - 1\n        else:\n            return int(num)", "prompt_tokens": 206, "completion_tokens": 85, "duration": 5.288498401641846}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 3, "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones = [n]\n    for i in range(1, n):\n        stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 182, "completion_tokens": 140, "duration": 8.186116456985474}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 2, "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 4.022627592086792}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 4, "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 125, "duration": 8.753511428833008}
{"task_id": "HumanEval/103", "is_solved": true, "solved_count": 4, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 5.879640102386475}
{"task_id": "HumanEval/104", "is_solved": true, "solved_count": 2, "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    result = [num for num in x if has_no_even_digit(num)]\n    return sorted(result)", "prompt_tokens": 152, "completion_tokens": 98, "duration": 8.262500047683716}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 3, "generated_code": "def by_length(arr):\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [digit_names[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 108, "duration": 8.131050825119019}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 5, "generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with the value at index i being the factorial of i if i is even,\n    or the sum of numbers from 1 to i otherwise.\n    \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    def sum_to(x):\n        return sum(range(1, x + 1))\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 146, "duration": 9.955986261367798}
{"task_id": "HumanEval/107", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 100, "duration": 7.120405197143555}
{"task_id": "HumanEval/108", "is_solved": true, "solved_count": 3, "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n))) - 2*int(str(n)[0] == '-')\n    \n    return sum(sum_of_digits(num) > 0 for num in arr)", "prompt_tokens": 174, "completion_tokens": 58, "duration": 5.794779062271118}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 5, "generated_code": "def move_one_ball(arr):\n    \"\"\"\n    Determine if it is possible to sort the array in non-decreasing order by performing right shift operations.\n    \"\"\"\n    if not arr:\n        return True\n    # Find the index where arr[i] > arr[i+1], which should be only one place if sorting is possible by shifts\n    pivot_points = [i for i in range(len(arr)-1) if arr[i] > arr[i+1]]\n    \n    # If there are no such points, the array is already sorted\n    if not pivot_points:\n        return True\n    \n    # If there is more than one such point, sorting is not possible by shifts\n    if len(pivot_points) > 1:\n        return False\n    \n    # Check if the part before the pivot point and the part after the pivot point are sorted\n    pivot = pivot_points[0]\n    return arr[:pivot+1] == sorted(arr[:pivot+1]) and arr[pivot+1:] == sorted(arr[pivot+1:])", "prompt_tokens": 349, "completion_tokens": 215, "duration": 14.203219890594482}
{"task_id": "HumanEval/110", "is_solved": false, "solved_count": 3, "generated_code": "def exchange(lst1, lst2):\n    odd_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_lst1 <= even_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 79, "duration": 6.28703498840332}
{"task_id": "HumanEval/111", "is_solved": true, "solved_count": 5, "generated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    words = test.split()\n    counter = {}\n    for word in words:\n        counter[word] = counter.get(word, 0) + 1\n    max_count = max(counter.values(), default=0)\n    return {k: v for k, v in counter.items() if v == max_count}", "prompt_tokens": 201, "completion_tokens": 118, "duration": 9.757627487182617}
{"task_id": "HumanEval/112", "is_solved": true, "solved_count": 3, "generated_code": "def reverse_delete(s, c):\n    result_str = ''.join([char for char in s if char not in c])\n    return (result_str, result_str == result_str[::-1])", "prompt_tokens": 212, "completion_tokens": 43, "duration": 5.440521955490112}
{"task_id": "HumanEval/113", "is_solved": true, "solved_count": 1, "generated_code": "def odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"\n    result = []\n    for s in lst:\n        odd_digits = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {odd_digits} of the {odd_digits}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 154, "duration": 11.000417232513428}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 3, "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 135, "duration": 9.61148452758789}
{"task_id": "HumanEval/115", "is_solved": false, "solved_count": 0, "generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)\n    number_of_buckets = total_water_units / capacity\n    return math.ceil(number_of_buckets)", "prompt_tokens": 373, "completion_tokens": 44, "duration": 5.177794933319092}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 0, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 4.431492567062378}
{"task_id": "HumanEval/117", "is_solved": true, "solved_count": 5, "generated_code": "def select_words(s, n):\n    def consonant_count(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "prompt_tokens": 231, "completion_tokens": 71, "duration": 6.977204322814941}
{"task_id": "HumanEval/118", "is_solved": false, "solved_count": 3, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, 1, -1):\n        if word[i-1] not in vowels and word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 7.419076442718506}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 2, "generated_code": "def match_parens(lst):\n    first_open = lst[0].count('(')\n    first_close = lst[0].count(')')\n    second_open = lst[1].count('(')\n    second_close = lst[1].count(')')\n\n    if first_open >= first_close and second_open <= second_close:\n        return 'Yes'\n    if first_open <= first_close and second_open >= second_close:\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 99, "duration": 9.75361967086792}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 2, "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 20, "duration": 4.632217645645142}
{"task_id": "HumanEval/121", "is_solved": true, "solved_count": 3, "generated_code": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 37, "duration": 5.998180866241455}
{"task_id": "HumanEval/122", "is_solved": true, "solved_count": 4, "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 <= abs(x) < 100)", "prompt_tokens": 178, "completion_tokens": 72, "duration": 8.557146072387695}
{"task_id": "HumanEval/123", "is_solved": true, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 99, "duration": 8.429804563522339}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 5, "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into components\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if month, day, and year are numeric\n    if not (parts[0].isdigit() and parts[1].isdigit() and parts[2].isdigit()):\n        return False\n    \n    month, day, year = int(parts[0]), int(parts[1]), int(parts[2])\n    \n    # Check the month range\n    if month < 1 or month > 12:\n        return False\n    \n    # Check the day range based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else: # February\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 271, "duration": 14.640757322311401}
{"task_id": "HumanEval/125", "is_solved": true, "solved_count": 3, "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 190, "completion_tokens": 66, "duration": 6.655529022216797}
{"task_id": "HumanEval/126", "is_solved": true, "solved_count": 8, "generated_code": "def is_sorted(lst):\n    if len(lst) != len(set(lst)):\n        counts = {x: lst.count(x) for x in lst}\n        for count in counts.values():\n            if count > 2:\n                return False\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 59, "duration": 7.205936670303345}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 3, "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = max(0, end_min - start_max)\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 131, "duration": 15.924098014831543}
{"task_id": "HumanEval/128", "is_solved": true, "solved_count": 3, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n    magnitude_sum = sum(abs(num) for num in arr)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 76, "duration": 14.698678016662598}
{"task_id": "HumanEval/129", "is_solved": true, "solved_count": 2, "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    value_to_pos = {grid[i][j]: (i, j) for i in range(N) for j in range(N)}\n    visited = set()\n    pq = []\n\n    for value, (i, j) in value_to_pos.items():\n        heappush(pq, ([value], i, j, 1))  # (path, x, y, length)\n\n    while pq:\n        path, x, y, length = heappop(pq)\n        if (x, y, length) in visited:\n            continue\n        visited.add((x, y, length))\n        if length == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                heappush(pq, (new_path, nx, ny, length + 1))\n\n    return []", "prompt_tokens": 446, "completion_tokens": 262, "duration": 25.886205673217773}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 0, "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    # Initialize the list with base cases\n    tribonacci = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:  # even\n            tribonacci.append(1 + i / 2)\n        else:  # odd\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 1])\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 133, "duration": 9.29564619064331}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 4, "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 6.750807762145996}
{"task_id": "HumanEval/132", "is_solved": true, "solved_count": 6, "generated_code": "def is_nested(string):\n    depth = 0\n    for char in string:\n        if char == '[':\n            depth += 1\n        elif char == ']':\n            depth -= 1\n        if depth > 1:\n            return True\n        if depth < 0:\n            return False\n    return False", "prompt_tokens": 183, "completion_tokens": 71, "duration": 7.805450439453125}
{"task_id": "HumanEval/133", "is_solved": true, "solved_count": 5, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 5.171708106994629}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 4, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1:].isalpha() and (len(txt) == 1 or txt[-2] == \" \")", "prompt_tokens": 187, "completion_tokens": 39, "duration": 5.738158702850342}
{"task_id": "HumanEval/135", "is_solved": true, "solved_count": 4, "generated_code": "def can_arrange(arr):\n    \"\"\"\n    Returns the largest index of an element which is not greater than or equal to the element\n    immediately preceding it. If no such element exists then return -1.\n    \"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 86, "duration": 11.680684804916382}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 3, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 80, "duration": 8.376270771026611}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 4, "generated_code": "def compare_one(a, b):\n    def parse_real_number(number):\n        if isinstance(number, str):\n            number = number.replace(',', '.')\n        return float(number)\n    \n    a_parsed = parse_real_number(a)\n    b_parsed = parse_real_number(b)\n    \n    if a_parsed > b_parsed:\n        return a\n    elif b_parsed > a_parsed:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 89, "duration": 16.71067500114441}
{"task_id": "HumanEval/138", "is_solved": true, "solved_count": 3, "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 49, "duration": 7.738089084625244}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 1 or x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 73, "duration": 7.47673225402832}
{"task_id": "HumanEval/140", "is_solved": true, "solved_count": 4, "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    text = re.sub(r' {3,}', '-', text)  # Replace 3 or more spaces with -\n    text = re.sub(r' ', '_', text)  # Replace remaining spaces with _\n    return text", "prompt_tokens": 156, "completion_tokens": 101, "duration": 12.008544445037842}
{"task_id": "HumanEval/141", "is_solved": true, "solved_count": 10, "generated_code": "def file_name_check(file_name):\n    import re\n    # Check all conditions using regular expression\n    if re.match(r'^[a-zA-Z][a-zA-Z0-9]{0,}[^0-9]*\\.[a-zA-Z]{0,}$', file_name):\n        # Split the file name by dot\n        name, extension = file_name.rsplit('.', 1)\n        # Count digits in the name part\n        digit_count = sum(c.isdigit() for c in name)\n        # Validate conditions\n        if digit_count <= 3 and extension in ['txt', 'exe', 'dll']:\n            return 'Yes'\n    return 'No'", "prompt_tokens": 264, "completion_tokens": 141, "duration": 10.599568843841553}
{"task_id": "HumanEval/142", "is_solved": true, "solved_count": 3, "generated_code": "def sum_squares(lst):\n    return sum(lst[i]**2 if i % 3 == 0 else lst[i]**3 if i % 4 == 0 else lst[i] for i in range(len(lst)))", "prompt_tokens": 219, "completion_tokens": 49, "duration": 8.503121376037598}
{"task_id": "HumanEval/143", "is_solved": true, "solved_count": 2, "generated_code": "def words_in_sentence(sentence):\n    \"\"\"\n    Returns the words from the input sentence whose lengths are prime numbers.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 114, "duration": 10.157142400741577}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 3, "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 7.703754901885986}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 1, "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 35, "duration": 6.2233264446258545}
{"task_id": "HumanEval/146", "is_solved": true, "solved_count": 2, "generated_code": "def specialFilter(nums):\n    def isEligible(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))  # Remove sign and convert to string\n        first_digit, last_digit = int(str_n[0]), int(str_n[-1])\n        return first_digit % 2 == 1 and last_digit % 2 == 1\n    return sum(isEligible(num) for num in nums)", "prompt_tokens": 169, "completion_tokens": 98, "duration": 8.654486179351807}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 3, "generated_code": "def get_max_triples(n):\n    # Calculate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the remainders when divided by 3\n    remainder_counts = [0, 0, 0]\n    for value in a:\n        remainder_counts[value % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Using the combination formula for selecting 3 items from a group\n    from math import comb\n    total_triples = 0\n    # For any three numbers with the same remainder when divided by 3\n    for count in remainder_counts:\n        if count >= 3:\n            total_triples += comb(count, 3)\n    \n    return total_triples", "prompt_tokens": 215, "completion_tokens": 172, "duration": 15.72705888748169}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 3, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start, end = sorted([planets.index(planet1), planets.index(planet2)])\n    return tuple(planets[start+1:end])", "prompt_tokens": 261, "completion_tokens": 95, "duration": 10.261326789855957}
{"task_id": "HumanEval/149", "is_solved": true, "solved_count": 2, "generated_code": "def sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    even_length_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort by length and then alphabetically\n    even_length_lst.sort(key=lambda x: (len(x), x))\n    return even_length_lst", "prompt_tokens": 237, "completion_tokens": 71, "duration": 8.230810403823853}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 2, "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.804641962051392}
{"task_id": "HumanEval/151", "is_solved": true, "solved_count": 5, "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 40, "duration": 6.582126140594482}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 2, "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.102465867996216}
{"task_id": "HumanEval/153", "is_solved": true, "solved_count": 2, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        return CAP - SM\n    \n    strongest_ext = max(extensions, key=strength)\n    return f'{class_name}.{strongest_ext}'", "prompt_tokens": 327, "completion_tokens": 78, "duration": 8.09161901473999}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 6, "generated_code": "def cycpattern_check(a, b):\n    \"\"\"\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    if not b: return True\n    if not a or len(b) > len(a): return False\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]  # Rotate b\n    return False", "prompt_tokens": 179, "completion_tokens": 160, "duration": 11.544271469116211}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 2, "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 75, "duration": 8.095853805541992}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 3, "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 151, "completion_tokens": 204, "duration": 16.028164863586426}
{"task_id": "HumanEval/157", "is_solved": true, "solved_count": 6, "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.169377088546753}
{"task_id": "HumanEval/158", "is_solved": true, "solved_count": 3, "generated_code": "def find_max(words):\n    \"\"\"\n    Finds the word with the maximum number of unique characters.\n    If multiple words have the same number, returns the lexicographically first one.\n    \"\"\"\n    return min((word for word in sorted(words)), key=lambda x: (-len(set(x)), x))", "prompt_tokens": 170, "completion_tokens": 64, "duration": 9.312575101852417}
{"task_id": "HumanEval/159", "is_solved": true, "solved_count": 4, "generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    return [number + eaten, remaining - eaten]", "prompt_tokens": 327, "completion_tokens": 32, "duration": 6.954363107681274}
{"task_id": "HumanEval/160", "is_solved": true, "solved_count": 2, "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, val in zip(operator, operand[1:]):\n        expression += f\" {op} {val}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 51, "duration": 9.264103174209595}
{"task_id": "HumanEval/161", "is_solved": false, "solved_count": 2, "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.864470481872559}
{"task_id": "HumanEval/162", "is_solved": true, "solved_count": 2, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 96, "duration": 9.972635507583618}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 2, "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return sorted([x for x in range(min(a, b), max(a, b) + 1) if x % 2 == 0])", "prompt_tokens": 154, "completion_tokens": 72, "duration": 8.895665884017944}
