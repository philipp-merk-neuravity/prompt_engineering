{"task_id": "HumanEval/0", "is_solved": true, "solved_count": 7, "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 887, "completion_tokens": 522, "duration": 21.192488193511963}
{"task_id": "HumanEval/1", "is_solved": true, "solved_count": 8, "generated_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    temp = \"\"\n    for char in paren_string:\n        if char in ['(', ')']:\n            temp += char\n            if temp.count('(') == temp.count(')'):\n                result.append(temp)\n                temp = \"\"\n    return result", "prompt_tokens": 886, "completion_tokens": 547, "duration": 22.048306465148926}
{"task_id": "HumanEval/2", "is_solved": false, "solved_count": 3, "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 633, "completion_tokens": 301, "duration": 18.225407361984253}
{"task_id": "HumanEval/3", "is_solved": true, "solved_count": 10, "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 883, "completion_tokens": 516, "duration": 24.57114315032959}
{"task_id": "HumanEval/4", "is_solved": true, "solved_count": 6, "generated_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 923, "completion_tokens": 554, "duration": 28.874191999435425}
{"task_id": "HumanEval/5", "is_solved": true, "solved_count": 7, "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 856, "completion_tokens": 550, "duration": 30.15872287750244}
{"task_id": "HumanEval/6", "is_solved": false, "solved_count": 3, "generated_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            depth -= 1\n        if depth == 0:\n            depths.append(max_depth)\n            max_depth = 0\n    return depths", "prompt_tokens": 1563, "completion_tokens": 1049, "duration": 38.112952709198}
{"task_id": "HumanEval/7", "is_solved": true, "solved_count": 8, "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 895, "completion_tokens": 565, "duration": 26.927320957183838}
{"task_id": "HumanEval/8", "is_solved": true, "solved_count": 6, "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers) if numbers else 0\n    prod_result = 1\n    for num in numbers:\n        prod_result *= num\n    return sum_result, prod_result", "prompt_tokens": 694, "completion_tokens": 357, "duration": 15.56339430809021}
{"task_id": "HumanEval/9", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[i-1], numbers[i]))\n    \n    return result", "prompt_tokens": 1144, "completion_tokens": 830, "duration": 45.97157049179077}
{"task_id": "HumanEval/10", "is_solved": true, "solved_count": 8, "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]", "prompt_tokens": 1952, "completion_tokens": 1390, "duration": 50.70308589935303}
{"task_id": "HumanEval/11", "is_solved": true, "solved_count": 8, "generated_code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char_a, char_b in zip(a, b):\n        result += str(int(char_a) ^ int(char_b))\n    return result", "prompt_tokens": 781, "completion_tokens": 504, "duration": 22.01368546485901}
{"task_id": "HumanEval/12", "is_solved": true, "solved_count": 7, "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 853, "completion_tokens": 492, "duration": 22.751885414123535}
{"task_id": "HumanEval/13", "is_solved": true, "solved_count": 10, "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 699, "completion_tokens": 413, "duration": 19.55560827255249}
{"task_id": "HumanEval/14", "is_solved": true, "solved_count": 5, "generated_code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 578, "completion_tokens": 319, "duration": 12.953052997589111}
{"task_id": "HumanEval/15", "is_solved": true, "solved_count": 5, "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 903, "completion_tokens": 441, "duration": 25.650885105133057}
{"task_id": "HumanEval/16", "is_solved": false, "solved_count": 8, "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 736, "completion_tokens": 430, "duration": 23.87060236930847}
{"task_id": "HumanEval/17", "is_solved": true, "solved_count": 9, "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [durations[note] for note in notes]", "prompt_tokens": 1888, "completion_tokens": 1162, "duration": 32.90298891067505}
{"task_id": "HumanEval/18", "is_solved": true, "solved_count": 10, "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start) # Find next occurrence of substring\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 821, "completion_tokens": 535, "duration": 20.678200006484985}
{"task_id": "HumanEval/19", "is_solved": true, "solved_count": 7, "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    nums_dict = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'}\n    return ' '.join(sorted(numbers.split(), key=lambda x: int(nums_dict[x])))", "prompt_tokens": 1094, "completion_tokens": 594, "duration": 24.419825315475464}
{"task_id": "HumanEval/20", "is_solved": true, "solved_count": 7, "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n    return result", "prompt_tokens": 1085, "completion_tokens": 675, "duration": 30.122337102890015}
{"task_id": "HumanEval/21", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 1021, "completion_tokens": 649, "duration": 30.22760009765625}
{"task_id": "HumanEval/22", "is_solved": false, "solved_count": 4, "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 715, "completion_tokens": 388, "duration": 19.255441904067993}
{"task_id": "HumanEval/23", "is_solved": false, "solved_count": 4, "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 463, "completion_tokens": 213, "duration": 9.115659713745117}
{"task_id": "HumanEval/24", "is_solved": true, "solved_count": 8, "generated_code": "def largest_divisor(n: int) -> int:\n    result = 1\n    for i in range(2, n):\n        if n % i == 0:\n            result = i\n    return result", "prompt_tokens": 680, "completion_tokens": 440, "duration": 21.250659942626953}
{"task_id": "HumanEval/25", "is_solved": true, "solved_count": 10, "generated_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 919, "completion_tokens": 555, "duration": 30.087397575378418}
{"task_id": "HumanEval/26", "is_solved": true, "solved_count": 7, "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    no_duplicates = []\n    for num in numbers:\n        if numbers.count(num) == 1:\n            no_duplicates.append(num)\n    return no_duplicates", "prompt_tokens": 765, "completion_tokens": 468, "duration": 20.541908502578735}
{"task_id": "HumanEval/27", "is_solved": true, "solved_count": 6, "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 558, "completion_tokens": 299, "duration": 15.549782276153564}
{"task_id": "HumanEval/28", "is_solved": true, "solved_count": 6, "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 703, "completion_tokens": 432, "duration": 21.016668558120728}
{"task_id": "HumanEval/29", "is_solved": true, "solved_count": 7, "generated_code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 897, "completion_tokens": 579, "duration": 26.583778858184814}
{"task_id": "HumanEval/30", "is_solved": true, "solved_count": 5, "generated_code": "def get_positive(l):\n    return [num for num in l if num > 0]", "prompt_tokens": 902, "completion_tokens": 516, "duration": 27.176506757736206}
{"task_id": "HumanEval/31", "is_solved": true, "solved_count": 10, "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 677, "completion_tokens": 352, "duration": 15.731561183929443}
{"task_id": "HumanEval/32", "is_solved": false, "solved_count": 3, "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    return round(-xs[0] / xs[1], 2)", "prompt_tokens": 1098, "completion_tokens": 576, "duration": 29.34441065788269}
{"task_id": "HumanEval/33", "is_solved": false, "solved_count": 4, "generated_code": "def sort_third(l: list):\n    result = l[:]\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = [l[i] for i in third_indices]\n    sorted_third_values = sorted(third_values)\n    \n    for i, val in zip(third_indices, sorted_third_values):\n        result[i] = val\n    \n    return result", "prompt_tokens": 1082, "completion_tokens": 688, "duration": 46.19566082954407}
{"task_id": "HumanEval/34", "is_solved": true, "solved_count": 5, "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 706, "completion_tokens": 394, "duration": 17.265743494033813}
{"task_id": "HumanEval/35", "is_solved": true, "solved_count": 5, "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 688, "completion_tokens": 357, "duration": 21.502556562423706}
{"task_id": "HumanEval/36", "is_solved": false, "solved_count": 4, "generated_code": "def fizz_buzz(n: int):\n    def count_sevens(num):\n        return str(num).count('7')\n\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += count_sevens(i)\n\n    return count", "prompt_tokens": 790, "completion_tokens": 522, "duration": 19.461316347122192}
{"task_id": "HumanEval/37", "is_solved": true, "solved_count": 7, "generated_code": "def sort_even(l: list):\n    result = l.copy()\n    result[::2] = sorted(result[::2])\n    return result", "prompt_tokens": 921, "completion_tokens": 526, "duration": 35.29061031341553}
{"task_id": "HumanEval/38", "is_solved": false, "solved_count": 3, "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    return s[-1] + s[:-1]", "prompt_tokens": 1910, "completion_tokens": 1248, "duration": 49.329371213912964}
{"task_id": "HumanEval/39", "is_solved": true, "solved_count": 9, "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, num+1):\n                a, b = b, a + b\n            return b\n\n    num = 1\n    count = 0\n    while count < n:\n        fib_num = fibonacci(num)\n        if is_prime(fib_num):\n            count += 1\n        num += 1\n\n    return fib_num", "prompt_tokens": 813, "completion_tokens": 621, "duration": 27.354947090148926}
{"task_id": "HumanEval/40", "is_solved": true, "solved_count": 10, "generated_code": "def triples_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1109, "completion_tokens": 675, "duration": 36.364749908447266}
{"task_id": "HumanEval/41", "is_solved": true, "solved_count": 6, "generated_code": "def car_race_collision(n: int):\n    return n**2", "prompt_tokens": 740, "completion_tokens": 272, "duration": 12.553198099136353}
{"task_id": "HumanEval/42", "is_solved": true, "solved_count": 5, "generated_code": "def incr_list(l: list):\n    return [x+1 for x in l]", "prompt_tokens": 746, "completion_tokens": 369, "duration": 18.95847988128662}
{"task_id": "HumanEval/43", "is_solved": true, "solved_count": 10, "generated_code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "prompt_tokens": 981, "completion_tokens": 534, "duration": 34.19432306289673}
{"task_id": "HumanEval/44", "is_solved": false, "solved_count": 8, "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    \n    if x < 0:\n        sign = '-'\n        x = -x\n    else:\n        sign = ''\n    \n    result = ''\n    while x:\n        result = str(x % base) + result\n        x //= base\n    \n    return sign + result", "prompt_tokens": 870, "completion_tokens": 592, "duration": 31.739969491958618}
{"task_id": "HumanEval/45", "is_solved": true, "solved_count": 5, "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 474, "completion_tokens": 221, "duration": 12.966674089431763}
{"task_id": "HumanEval/46", "is_solved": false, "solved_count": 8, "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    fib_values = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_values.append(fib_values[i-1] + fib_values[i-2] + fib_values[i-3] + fib_values[i-4])\n\n    return fib_values[n]", "prompt_tokens": 934, "completion_tokens": 534, "duration": 23.002590894699097}
{"task_id": "HumanEval/47", "is_solved": false, "solved_count": 8, "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 799, "completion_tokens": 528, "duration": 23.62255048751831}
{"task_id": "HumanEval/48", "is_solved": false, "solved_count": 8, "generated_code": "def is_palindrome(text: str):\n    text = ''.join(filter(str.isalnum, text.lower()))\n    return text == text[::-1]", "prompt_tokens": 628, "completion_tokens": 335, "duration": 26.754860401153564}
{"task_id": "HumanEval/49", "is_solved": false, "solved_count": 9, "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 841, "completion_tokens": 473, "duration": 23.037086248397827}
{"task_id": "HumanEval/50", "is_solved": true, "solved_count": 5, "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])", "prompt_tokens": 728, "completion_tokens": 461, "duration": 31.962536573410034}
{"task_id": "HumanEval/51", "is_solved": true, "solved_count": 9, "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 761, "completion_tokens": 369, "duration": 17.08411741256714}
{"task_id": "HumanEval/52", "is_solved": true, "solved_count": 7, "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 730, "completion_tokens": 415, "duration": 28.169750452041626}
{"task_id": "HumanEval/53", "is_solved": true, "solved_count": 5, "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 563, "completion_tokens": 295, "duration": 15.437455654144287}
{"task_id": "HumanEval/54", "is_solved": false, "solved_count": 8, "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 883, "completion_tokens": 448, "duration": 34.575334548950195}
{"task_id": "HumanEval/55", "is_solved": true, "solved_count": 6, "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 551, "completion_tokens": 302, "duration": 14.447638034820557}
{"task_id": "HumanEval/56", "is_solved": false, "solved_count": 9, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack and stack[-1] == \"<\":\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 689, "completion_tokens": 391, "duration": 43.11038422584534}
{"task_id": "HumanEval/57", "is_solved": true, "solved_count": 10, "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 894, "completion_tokens": 602, "duration": 31.102030515670776}
{"task_id": "HumanEval/58", "is_solved": true, "solved_count": 7, "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 937, "completion_tokens": 556, "duration": 28.569929361343384}
{"task_id": "HumanEval/59", "is_solved": true, "solved_count": 5, "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 655, "completion_tokens": 389, "duration": 21.25914978981018}
{"task_id": "HumanEval/60", "is_solved": true, "solved_count": 8, "generated_code": "def sum_to_n(n: int):\n    return sum(range(1, n+1))", "prompt_tokens": 657, "completion_tokens": 308, "duration": 17.835389137268066}
{"task_id": "HumanEval/61", "is_solved": true, "solved_count": 10, "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return not stack", "prompt_tokens": 685, "completion_tokens": 383, "duration": 25.72576069831848}
{"task_id": "HumanEval/62", "is_solved": false, "solved_count": 6, "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))] if len(xs) > 1 else []", "prompt_tokens": 3424, "completion_tokens": 2260, "duration": 68.18433690071106}
{"task_id": "HumanEval/63", "is_solved": true, "solved_count": 10, "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 900, "completion_tokens": 491, "duration": 22.953145265579224}
{"task_id": "HumanEval/64", "is_solved": false, "solved_count": 8, "generated_code": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if s == \"\":\n        return 0\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (s[i].lower() == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 862, "completion_tokens": 516, "duration": 22.296876668930054}
{"task_id": "HumanEval/65", "is_solved": false, "solved_count": 8, "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str) if len(x_str) > 0 else 0\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 837, "completion_tokens": 556, "duration": 28.1736581325531}
{"task_id": "HumanEval/66", "is_solved": false, "solved_count": 9, "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 766, "completion_tokens": 383, "duration": 19.874639749526978}
{"task_id": "HumanEval/67", "is_solved": true, "solved_count": 7, "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 1008, "completion_tokens": 442, "duration": 24.21700930595398}
{"task_id": "HumanEval/68", "is_solved": true, "solved_count": 10, "generated_code": "def pluck(arr):\n    even_numbers = [(num, i) for i, num in enumerate(arr) if num % 2 == 0]\n    if not even_numbers:\n        return []\n    min_even = min(even_numbers)\n    return list(min_even)\n\n# Test case where the smallest even number is in the middle of the array\nassert pluck([4, 2, 3]) == [2, 1]\n\n# Test case where the input array has only one even number\nassert pluck([1, 2, 3]) == [2, 1]\n\n# Test case where the input array is empty\nassert pluck([]) == []\n\n# Test case with multiple zeros, testing for the first occurrence\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]", "prompt_tokens": 2287, "completion_tokens": 1261, "duration": 43.390934228897095}
{"task_id": "HumanEval/69", "is_solved": false, "solved_count": 8, "generated_code": "def search(lst):\n    max_val = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_val = max(max_val, num)\n    return max_val", "prompt_tokens": 921, "completion_tokens": 460, "duration": 22.73747706413269}
{"task_id": "HumanEval/70", "is_solved": true, "solved_count": 8, "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 944, "completion_tokens": 562, "duration": 24.712051391601562}
{"task_id": "HumanEval/71", "is_solved": false, "solved_count": 9, "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 797, "completion_tokens": 462, "duration": 26.888216495513916}
{"task_id": "HumanEval/72", "is_solved": true, "solved_count": 10, "generated_code": "def will_it_fly(q, w):\n    is_balanced = q == q[::-1]\n    is_light_enough = sum(q) <= w\n    return is_balanced and is_light_enough", "prompt_tokens": 1245, "completion_tokens": 647, "duration": 40.51527404785156}
{"task_id": "HumanEval/73", "is_solved": false, "solved_count": 7, "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 916, "completion_tokens": 473, "duration": 24.131571769714355}
{"task_id": "HumanEval/74", "is_solved": true, "solved_count": 5, "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 1007, "completion_tokens": 526, "duration": 30.920414447784424}
{"task_id": "HumanEval/75", "is_solved": true, "solved_count": 10, "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n\n    return count == 3\n\n# Test cases have been removed as per the instructions", "prompt_tokens": 898, "completion_tokens": 673, "duration": 43.142277002334595}
{"task_id": "HumanEval/76", "is_solved": false, "solved_count": 9, "generated_code": "def is_simple_power(x, n):\n    if n == 0:\n        return x == 1\n    if x == 0:\n        return False\n    if n == 1:\n        return x == 1\n    if n < 0:\n        return False\n    return x > 0 and (x == 1 or (x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 1646, "completion_tokens": 1030, "duration": 45.85754036903381}
{"task_id": "HumanEval/77", "is_solved": false, "solved_count": 7, "generated_code": "def iscube(a):\n    return (a > 0 and (a ** (1/3)).is_integer()) or (a < 0 and ((-a) ** (1/3)).is_integer()) or a == 0", "prompt_tokens": 730, "completion_tokens": 381, "duration": 16.882508993148804}
{"task_id": "HumanEval/78", "is_solved": false, "solved_count": 9, "generated_code": "def hex_key(num):\n    primes = set(['2', '3', '5', '7', 'B', 'D'])\n    count = sum(1 for digit in num if digit in primes)\n    return count", "prompt_tokens": 1113, "completion_tokens": 382, "duration": 25.94508147239685}
{"task_id": "HumanEval/79", "is_solved": true, "solved_count": 7, "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 803, "completion_tokens": 365, "duration": 23.131752252578735}
{"task_id": "HumanEval/80", "is_solved": true, "solved_count": 10, "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 912, "completion_tokens": 560, "duration": 43.50223755836487}
{"task_id": "HumanEval/81", "is_solved": false, "solved_count": 3, "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 1147, "completion_tokens": 628, "duration": 35.77907371520996}
{"task_id": "HumanEval/82", "is_solved": true, "solved_count": 9, "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 1469, "completion_tokens": 1016, "duration": 46.792816162109375}
{"task_id": "HumanEval/83", "is_solved": false, "solved_count": 4, "generated_code": "def starts_one_ends(n):\n    return 10 ** (n - 1) + 10 ** (n - 1) - 10 ** (n - 2)", "prompt_tokens": 1337, "completion_tokens": 970, "duration": 41.79480791091919}
{"task_id": "HumanEval/84", "is_solved": false, "solved_count": 9, "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 791, "completion_tokens": 368, "duration": 23.311811923980713}
{"task_id": "HumanEval/85", "is_solved": false, "solved_count": 4, "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 737, "completion_tokens": 483, "duration": 22.12752604484558}
{"task_id": "HumanEval/86", "is_solved": false, "solved_count": 6, "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 814, "completion_tokens": 410, "duration": 19.108075857162476}
{"task_id": "HumanEval/87", "is_solved": true, "solved_count": 6, "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))", "prompt_tokens": 1390, "completion_tokens": 755, "duration": 31.74369239807129}
{"task_id": "HumanEval/88", "is_solved": false, "solved_count": 6, "generated_code": "def sort_array(array):\n    first_last_sum = array[0] + array[-1]\n    return sorted(array) if first_last_sum % 2 == 1 else sorted(array, reverse=True)", "prompt_tokens": 1167, "completion_tokens": 623, "duration": 27.804616451263428}
{"task_id": "HumanEval/89", "is_solved": true, "solved_count": 10, "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.islower() else 4\n            shifted_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a')) if char.islower() else chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            result += shifted_char\n        else:\n            result += char\n    return result", "prompt_tokens": 909, "completion_tokens": 615, "duration": 29.577845096588135}
{"task_id": "HumanEval/90", "is_solved": false, "solved_count": 9, "generated_code": "def next_smallest(lst):\n    unique_nums = set(lst)\n    if len(unique_nums) < 2:\n        return None\n    else:\n        unique_nums.remove(min(unique_nums))\n        return min(unique_nums)", "prompt_tokens": 832, "completion_tokens": 448, "duration": 20.80490756034851}
{"task_id": "HumanEval/91", "is_solved": false, "solved_count": 6, "generated_code": "import re\n\ndef is_bored(S):\n    return len([sentence for sentence in re.split(r'[.!?]', S) if sentence.strip().startswith(\"I\")])", "prompt_tokens": 1626, "completion_tokens": 1061, "duration": 36.053470611572266}
{"task_id": "HumanEval/92", "is_solved": false, "solved_count": 9, "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 1026, "completion_tokens": 627, "duration": 28.25740885734558}
{"task_id": "HumanEval/93", "is_solved": false, "solved_count": 3, "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'AEIOUaeiou'\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += chr(ord(char) + 2).swapcase()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 886, "completion_tokens": 567, "duration": 23.45549488067627}
{"task_id": "HumanEval/94", "is_solved": true, "solved_count": 9, "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n\n    largest_prime = max(primes)\n    return sum_digits(largest_prime)", "prompt_tokens": 1368, "completion_tokens": 735, "duration": 33.63761019706726}
{"task_id": "HumanEval/95", "is_solved": true, "solved_count": 10, "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 1437, "completion_tokens": 702, "duration": 27.20106267929077}
{"task_id": "HumanEval/96", "is_solved": true, "solved_count": 10, "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "prompt_tokens": 998, "completion_tokens": 610, "duration": 26.855952501296997}
{"task_id": "HumanEval/97", "is_solved": true, "solved_count": 10, "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 713, "completion_tokens": 364, "duration": 19.247998237609863}
{"task_id": "HumanEval/98", "is_solved": false, "solved_count": 7, "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 719, "completion_tokens": 447, "duration": 24.461873769760132}
{"task_id": "HumanEval/99", "is_solved": true, "solved_count": 10, "generated_code": "def closest_integer(value):\n    number = float(value)\n    if number >= 0:\n        return int(number + 0.5)\n    else:\n        return int(number - 0.5)", "prompt_tokens": 924, "completion_tokens": 474, "duration": 21.773115634918213}
{"task_id": "HumanEval/100", "is_solved": false, "solved_count": 4, "generated_code": "def make_a_pile(n):\n    result = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            result.append(n + 2*i)\n        else:\n            result.append(n + 2*i + 1)\n    return result", "prompt_tokens": 898, "completion_tokens": 514, "duration": 21.09496760368347}
{"task_id": "HumanEval/101", "is_solved": true, "solved_count": 10, "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split()]\n\n# Test with a mix of commas and spaces\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with only commas and no spaces\nassert words_string(\"One,two,three,four,five,six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test with only spaces and no commas\nassert words_string(\"Hello world this is a test\") == [\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\n\n# Test with a single word (no commas or spaces)\nassert words_string(\"Single\") == [\"Single\"]\n\n# Test with an empty string\nassert words_string(\"\") == []\n\n# Test with multiple spaces between words\nassert words_string(\"With   multiple   spaces\") == [\"With\", \"multiple\", \"spaces\"]\n\n# Test with a mix of multiple spaces and commas\nassert words_string(\"Mix, of,  multiple,spaces\") == [\"Mix\", \"of\", \"multiple\", \"spaces\"]\n\n# Test with leading and trailing spaces\nassert words_string(\"  Leading and trailing  \") == [\"Leading\", \"and\", \"trailing\"]\n\n# Test with leading and trailing commas\nassert words_string(\",Leading,and,trailing,\") == [\"Leading\", \"and\", \"trailing\"]\n\n# Test with a string that has spaces and commas but no words\nassert words_string(\" , , \") == []\n\n# Test with a string that includes numbers\nassert words_string(\"This, is, 4, tests\") == [\"This\", \"is\", \"4\", \"tests\"]\n\n# Test with special characters in the string\nassert words_string(\"Special, &*%, characters\") == [\"Special\", \"&*%\", \"characters\"]", "prompt_tokens": 785, "completion_tokens": 762, "duration": 37.63310694694519}
{"task_id": "HumanEval/102", "is_solved": true, "solved_count": 10, "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            max_even = max(max_even, num)\n    return max_even", "prompt_tokens": 796, "completion_tokens": 480, "duration": 20.16709852218628}
{"task_id": "HumanEval/103", "is_solved": false, "solved_count": 8, "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 1654, "completion_tokens": 979, "duration": 29.50966715812683}
{"task_id": "HumanEval/104", "is_solved": false, "solved_count": 6, "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 786, "completion_tokens": 429, "duration": 16.826871156692505}
{"task_id": "HumanEval/105", "is_solved": true, "solved_count": 7, "generated_code": "def by_length(arr):\n    mapping = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [mapping[num] for num in reversed_arr]\n    \n    return result", "prompt_tokens": 1245, "completion_tokens": 630, "duration": 24.402743101119995}
{"task_id": "HumanEval/106", "is_solved": true, "solved_count": 8, "generated_code": "def f(n):\n    if n <= 0:\n        return []\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 890, "completion_tokens": 554, "duration": 21.67983651161194}
{"task_id": "HumanEval/107", "is_solved": false, "solved_count": 4, "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 1)\n\n    return (even_count, odd_count)", "prompt_tokens": 1152, "completion_tokens": 650, "duration": 26.123648643493652}
{"task_id": "HumanEval/108", "is_solved": false, "solved_count": 5, "generated_code": "def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)", "prompt_tokens": 928, "completion_tokens": 543, "duration": 36.557968616485596}
{"task_id": "HumanEval/109", "is_solved": true, "solved_count": 10, "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 1219, "completion_tokens": 504, "duration": 19.008874893188477}
{"task_id": "HumanEval/110", "is_solved": true, "solved_count": 10, "generated_code": "def exchange(lst1, lst2):\n    count_odd = sum(1 for num in lst1 if num % 2 != 0)\n    count_even = sum(1 for num in lst2 if num % 2 == 0)\n\n    return \"YES\" if count_even >= count_odd else \"NO\"", "prompt_tokens": 1143, "completion_tokens": 636, "duration": 24.8492431640625}
{"task_id": "HumanEval/111", "is_solved": false, "solved_count": 5, "generated_code": "def histogram(test):\n    hist = {}\n    for char in test.split():\n        hist[char] = hist.get(char, 0) + 1\n    max_count = max(hist.values())\n    return {char: count for char, count in hist.items() if count == max_count}", "prompt_tokens": 947, "completion_tokens": 525, "duration": 31.96316170692444}
{"task_id": "HumanEval/112", "is_solved": false, "solved_count": 8, "generated_code": "def reverse_delete(s,c):\n    s = ''.join([ch for ch in s if ch not in c])\n    return s, s == s[::-1]", "prompt_tokens": 953, "completion_tokens": 483, "duration": 17.31316351890564}
{"task_id": "HumanEval/113", "is_solved": false, "solved_count": 4, "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 1193, "completion_tokens": 739, "duration": 27.03617835044861}
{"task_id": "HumanEval/114", "is_solved": true, "solved_count": 10, "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    curr_sum = 0\n    \n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    \n    return min_sum", "prompt_tokens": 855, "completion_tokens": 565, "duration": 24.98102045059204}
{"task_id": "HumanEval/115", "is_solved": false, "solved_count": 9, "generated_code": "def max_fill(grid, bucket_capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / bucket_capacity)", "prompt_tokens": 2265, "completion_tokens": 1060, "duration": 36.47014141082764}
{"task_id": "HumanEval/116", "is_solved": false, "solved_count": 4, "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1076, "completion_tokens": 581, "duration": 21.315979480743408}
{"task_id": "HumanEval/117", "is_solved": false, "solved_count": 9, "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in \"aeiou\")\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result", "prompt_tokens": 1038, "completion_tokens": 560, "duration": 20.017637729644775}
{"task_id": "HumanEval/118", "is_solved": false, "solved_count": 6, "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 998, "completion_tokens": 612, "duration": 24.733421087265015}
{"task_id": "HumanEval/119", "is_solved": true, "solved_count": 10, "generated_code": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 972, "completion_tokens": 525, "duration": 32.00171256065369}
{"task_id": "HumanEval/120", "is_solved": false, "solved_count": 9, "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1119, "completion_tokens": 520, "duration": 24.089661121368408}
{"task_id": "HumanEval/121", "is_solved": false, "solved_count": 6, "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 743, "completion_tokens": 407, "duration": 27.43593955039978}
{"task_id": "HumanEval/122", "is_solved": false, "solved_count": 7, "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 0 <= num < 100)", "prompt_tokens": 2604, "completion_tokens": 1756, "duration": 52.766740560531616}
{"task_id": "HumanEval/123", "is_solved": false, "solved_count": 3, "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            result.append(n)\n            n = 3 * n + 1\n    result.append(1)\n    return sorted(result)", "prompt_tokens": 1046, "completion_tokens": 469, "duration": 26.377554893493652}
{"task_id": "HumanEval/124", "is_solved": true, "solved_count": 10, "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    return False", "prompt_tokens": 1101, "completion_tokens": 575, "duration": 21.657633781433105}
{"task_id": "HumanEval/125", "is_solved": false, "solved_count": 6, "generated_code": "def split_words(txt):\n    words = txt.split()\n    if len(words) > 1:\n        return words\n    else:\n        words = txt.split(',')\n        if len(words) > 1:\n            return words\n        else:\n            count = sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)\n            return count", "prompt_tokens": 875, "completion_tokens": 495, "duration": 20.5704927444458}
{"task_id": "HumanEval/126", "is_solved": false, "solved_count": 9, "generated_code": "def is_sorted(lst):\n    seen = {}\n    for i in lst:\n        if i in seen:\n            return False\n        seen[i] = True\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))", "prompt_tokens": 2270, "completion_tokens": 943, "duration": 66.61690163612366}
{"task_id": "HumanEval/127", "is_solved": true, "solved_count": 10, "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n    \n    length = end - start\n    \n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 1329, "completion_tokens": 747, "duration": 35.660268783569336}
{"task_id": "HumanEval/128", "is_solved": false, "solved_count": 9, "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    total = 0\n    \n    for num in arr:\n        if num < 0:\n            product *= -1\n        elif num == 0:\n            product = 0\n        total += abs(num)\n    \n    return total * product", "prompt_tokens": 918, "completion_tokens": 566, "duration": 32.23932194709778}
{"task_id": "HumanEval/129", "is_solved": false, "solved_count": 3, "generated_code": "def minPath(grid, k):\n    def find_min_path(grid, k):\n        def dfs(x, y, path):\n            if len(path) == k:\n                return path\n            for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                    new_path = dfs(nx, ny, path + [grid[nx][ny]])\n                    if new_path:\n                        return new_path\n\n        min_path = None\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                new_path = dfs(i, j, [grid[i][j]])\n                if new_path:\n                    if not min_path or new_path < min_path:\n                        min_path = new_path\n        return min_path\n\n    return find_min_path(grid, k)", "prompt_tokens": 1588, "completion_tokens": 824, "duration": 43.90482950210571}
{"task_id": "HumanEval/130", "is_solved": false, "solved_count": 3, "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        result = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                result.append(1 + i // 2)\n            else:\n                result.append(result[i - 1] + result[i - 2] + result[i - 3])\n        return result", "prompt_tokens": 1160, "completion_tokens": 619, "duration": 34.38070797920227}
{"task_id": "HumanEval/131", "is_solved": true, "solved_count": 10, "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    product = 1\n    for digit in odd_digits:\n        product *= digit\n    return product", "prompt_tokens": 616, "completion_tokens": 358, "duration": 16.058685064315796}
{"task_id": "HumanEval/132", "is_solved": false, "solved_count": 7, "generated_code": "def is_nested(string):\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in string:\n        if char == '[':\n            opening_brackets += 1\n        elif char == ']' and opening_brackets > closing_brackets:\n            closing_brackets += 1\n    return opening_brackets > 0 and closing_brackets == opening_brackets", "prompt_tokens": 1915, "completion_tokens": 1093, "duration": 37.1296284198761}
{"task_id": "HumanEval/133", "is_solved": false, "solved_count": 9, "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 1080, "completion_tokens": 608, "duration": 38.84532189369202}
{"task_id": "HumanEval/134", "is_solved": true, "solved_count": 9, "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-2] == \" \" if len(txt) > 1 else txt.isalpha()\n\n# Test with a basic example where the last character is a letter but part of a word\nassert check_if_last_char_is_a_letter(\"apple pie\") == False\n\n# Test with a basic example where the last character is a letter and not part of a word\nassert check_if_last_char_is_a_letter(\"apple pi e\") == True\n\n# Test with a space at the end of the string\nassert check_if_last_char_is_a_letter(\"apple pi e \") == False\n\n# Test with an empty string\nassert check_if_last_char_is_a_letter(\"\") == False\n\n# Test with a string where the last character is a digit\nassert check_if_last_char_is_a_letter(\"apple pie 2\") == False\n\n# Test with a string where the last character is a punctuation mark\nassert check_if_last_char_is_a_letter(\"apple pie!\") == False\n\n# Test with a string that has only one character and it is a letter\nassert check_if_last_char_is_a_letter(\"a\") == True\n\n# Test with a string that has only one character and it is not a letter\nassert check_if_last_char_is_a_letter(\"1\") == False\n\n# Test with a string that has spaces before the last letter\nassert check_if_last_char_is_a_letter(\"apple pi   e\") == True\n\n# Test with a mixed case letter at the end\nassert check_if_last_char_is_a_letter(\"apple Pi E\") == True\n\n# Test with a string where the last character is a letter followed by a newline character\nassert check_if_last_char_is_a_letter(\"apple pi e\\n\") == False\n\n# Test with a string where the last character is a letter followed by a tab character\nassert check_if_last_char_is_a_letter(\"apple pi e\\t\") == False\n\n# Test with a string that has multiple words and the last character of the last word is not a letter\nassert check_if_last_char_is_a_letter(\"This is a test!\") == False\n\n# Test with a string that has multiple words and the last character of the last word is a letter but not separated by a space\nassert check_if_last_char_is_a_letter(\"This is a test\") == False\n\n# Test with a string that includes alphanumeric characters but ends with a letter not part of a word\nassert check_if_last_char_is_a_letter(\"This is a test2 e\") == True", "prompt_tokens": 952, "completion_tokens": 1019, "duration": 38.85738563537598}
{"task_id": "HumanEval/135", "is_solved": false, "solved_count": 3, "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index", "prompt_tokens": 775, "completion_tokens": 437, "duration": 19.720214128494263}
{"task_id": "HumanEval/136", "is_solved": true, "solved_count": 9, "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 898, "completion_tokens": 516, "duration": 30.72200608253479}
{"task_id": "HumanEval/137", "is_solved": true, "solved_count": 9, "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        if str(a).replace(\",\", \".\") > str(b).replace(\",\", \".\"):\n            return a\n        elif str(a).replace(\",\", \".\") < str(b).replace(\",\", \".\"):\n            return b\n        else:\n            return None\n    else:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None", "prompt_tokens": 1091, "completion_tokens": 729, "duration": 28.30526041984558}
{"task_id": "HumanEval/138", "is_solved": false, "solved_count": 8, "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 720, "completion_tokens": 407, "duration": 15.687381029129028}
{"task_id": "HumanEval/139", "is_solved": true, "solved_count": 5, "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 810, "completion_tokens": 496, "duration": 27.8741192817688}
{"task_id": "HumanEval/140", "is_solved": false, "solved_count": 6, "generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n                consecutive_spaces = 0\n        else:\n            if consecutive_spaces > 0:\n                result.append('_')\n                consecutive_spaces = 0\n            result.append(char)\n    if consecutive_spaces > 0:\n        result.append('-')\n    return ''.join(result)", "prompt_tokens": 769, "completion_tokens": 481, "duration": 20.665015935897827}
{"task_id": "HumanEval/141", "is_solved": false, "solved_count": 9, "generated_code": "def file_name_check(file_name):\n    if not file_name:\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not ext.lower() in ['txt', 'exe', 'dll']:\n        return 'No'\n    if len([c for c in name if c.isdigit()]) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1042, "completion_tokens": 541, "duration": 21.132425785064697}
{"task_id": "HumanEval/142", "is_solved": false, "solved_count": 4, "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result", "prompt_tokens": 1048, "completion_tokens": 602, "duration": 25.95036816596985}
{"task_id": "HumanEval/143", "is_solved": false, "solved_count": 4, "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)", "prompt_tokens": 933, "completion_tokens": 550, "duration": 23.278268337249756}
{"task_id": "HumanEval/144", "is_solved": true, "solved_count": 10, "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    return (x_num * n_num) % (x_denom * n_denom) == 0", "prompt_tokens": 1107, "completion_tokens": 677, "duration": 29.97512197494507}
{"task_id": "HumanEval/145", "is_solved": false, "solved_count": 2, "generated_code": "def order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 910, "completion_tokens": 543, "duration": 23.403465747833252}
{"task_id": "HumanEval/146", "is_solved": false, "solved_count": 7, "generated_code": "def specialFilter(nums):\n    def is_odd_digit(num):\n        return int(str(abs(num))[0]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0\n\n    return len([num for num in nums if num > 10 and is_odd_digit(num)])", "prompt_tokens": 838, "completion_tokens": 484, "duration": 21.828116178512573}
{"task_id": "HumanEval/147", "is_solved": false, "solved_count": 4, "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 891, "completion_tokens": 483, "duration": 22.913399934768677}
{"task_id": "HumanEval/148", "is_solved": false, "solved_count": 8, "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    \n    if start < end:\n        return tuple(planets[start+1:end])\n    else:\n        return tuple(planets[end+1:start])\n\n# Removed unit tests", "prompt_tokens": 1915, "completion_tokens": 1128, "duration": 34.20256996154785}
{"task_id": "HumanEval/149", "is_solved": false, "solved_count": 3, "generated_code": "def sorted_list_sum(lst):\n    evens = [word for word in lst if len(word) % 2 == 0]\n    return sorted(sorted(evens), key=lambda x: (len(x), x))", "prompt_tokens": 935, "completion_tokens": 425, "duration": 24.248580932617188}
{"task_id": "HumanEval/150", "is_solved": true, "solved_count": 10, "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 779, "completion_tokens": 508, "duration": 23.654418230056763}
{"task_id": "HumanEval/151", "is_solved": false, "solved_count": 9, "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)\n\n# Test with a mix of odd, even, and zero integers\nassert double_the_difference([1, 3, 2, 0]) == 10\n\n# Test with all negative numbers\nassert double_the_difference([-1, -2, -3, -4]) == 0\n\n# Test with a mix of negative and positive numbers including odd\nassert double_the_difference([9, -2, -3, 4]) == 81\n\n# Test with only one odd positive number\nassert double_the_difference([7]) == 49\n\n# Test with only one even positive number\nassert double_the_difference([2]) == 0\n\n# Test with only one negative number\nassert double_the_difference([-1]) == 0\n\n# Test with only zero\nassert double_the_difference([0]) == 0\n\n# Test with an empty list\nassert double_the_difference([]) == 0\n\n# Test with non-integer numbers, should ignore them\nassert double_the_difference([1.5, 3.5, -2.5, 2, 3]) == 9\n\n# Test with a mix of integers and non-integer types (string, float)\nassert double_the_difference([1, \"string\", 2.5, 3]) == 10\n\n# Test with very large numbers\nassert double_the_difference([1000001, 2000002]) == 1000001**2\n\n# Test with a list containing only zero and negative numbers\nassert double_the_difference([-1, -2, -3, 0]) == 0", "prompt_tokens": 790, "completion_tokens": 701, "duration": 25.528515100479126}
{"task_id": "HumanEval/152", "is_solved": true, "solved_count": 7, "generated_code": "def compare(game,guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 1133, "completion_tokens": 530, "duration": 23.41802954673767}
{"task_id": "HumanEval/153", "is_solved": false, "solved_count": 5, "generated_code": "def Strongest_Extension(class_name, extensions):\n    def get_strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n    strongest_extension = max(extensions, key=get_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1318, "completion_tokens": 649, "duration": 28.516332864761353}
{"task_id": "HumanEval/154", "is_solved": true, "solved_count": 10, "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if a.find(b) != -1:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 1136, "completion_tokens": 738, "duration": 87.23615837097168}
{"task_id": "HumanEval/155", "is_solved": true, "solved_count": 9, "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 610, "completion_tokens": 347, "duration": 22.330653429031372}
{"task_id": "HumanEval/156", "is_solved": true, "solved_count": 10, "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return None\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        'm', 'cm', 'd', 'cd',\n        'c', 'xc', 'l', 'xl',\n        'x', 'ix', 'v', 'iv',\n        'i'\n    ]\n    \n    roman_numeral = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_numeral += syms[i]\n            number -= val[i]\n        i += 1\n        \n    return roman_numeral.lower()", "prompt_tokens": 801, "completion_tokens": 600, "duration": 22.14866018295288}
{"task_id": "HumanEval/157", "is_solved": false, "solved_count": 9, "generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "prompt_tokens": 873, "completion_tokens": 536, "duration": 21.151905059814453}
{"task_id": "HumanEval/158", "is_solved": false, "solved_count": 9, "generated_code": "def find_max(words):\n    words.sort()\n    words.sort(key=lambda x: len(set(x)), reverse=True)\n    return words[0] if words else None", "prompt_tokens": 987, "completion_tokens": 602, "duration": 77.63901472091675}
{"task_id": "HumanEval/159", "is_solved": false, "solved_count": 8, "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 1192, "completion_tokens": 505, "duration": 24.324520587921143}
{"task_id": "HumanEval/160", "is_solved": false, "solved_count": 2, "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1264, "completion_tokens": 783, "duration": 30.997255086898804}
{"task_id": "HumanEval/161", "is_solved": true, "solved_count": 7, "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        result = result[::-1]\n    return result", "prompt_tokens": 695, "completion_tokens": 362, "duration": 12.74778413772583}
{"task_id": "HumanEval/162", "is_solved": false, "solved_count": 3, "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 717, "completion_tokens": 413, "duration": 17.795348644256592}
{"task_id": "HumanEval/163", "is_solved": false, "solved_count": 5, "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 1155, "completion_tokens": 798, "duration": 41.240299463272095}
